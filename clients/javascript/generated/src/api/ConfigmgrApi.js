/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo', 'model/AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo', 'model/AnalyticsComponentQueryCacheServiceInfo', 'model/ApacheSlingHealthCheckResultHTMLSerializerInfo', 'model/ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo', 'model/ComAdobeAemTransactionCoreImplTransactionRecorderInfo', 'model/ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo', 'model/ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo', 'model/ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo', 'model/ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo', 'model/ComAdobeCqAccountApiAccountManagementServiceInfo', 'model/ComAdobeCqAccountImplAccountManagementServletInfo', 'model/ComAdobeCqAddressImplLocationLocationListServletInfo', 'model/ComAdobeCqAuditPurgeDamInfo', 'model/ComAdobeCqAuditPurgePagesInfo', 'model/ComAdobeCqAuditPurgeReplicationInfo', 'model/ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo', 'model/ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo', 'model/ComAdobeCqCdnRewriterImplCDNRewriterInfo', 'model/ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo', 'model/ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo', 'model/ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo', 'model/ComAdobeCqCommerceImplAssetStaticImageHandlerInfo', 'model/ComAdobeCqCommerceImplAssetVideoHandlerInfo', 'model/ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo', 'model/ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo', 'model/ComAdobeCqCommercePimImplPageEventListenerInfo', 'model/ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo', 'model/ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo', 'model/ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo', 'model/ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo', 'model/ComAdobeCqDamCfmImplComponentComponentConfigImplInfo', 'model/ComAdobeCqDamCfmImplConfFeatureConfigImplInfo', 'model/ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo', 'model/ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo', 'model/ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo', 'model/ComAdobeCqDamDmProcessImagePTiffManagerImplInfo', 'model/ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo', 'model/ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo', 'model/ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo', 'model/ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo', 'model/ComAdobeCqDamS7imagingImplIsImageServerComponentInfo', 'model/ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo', 'model/ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo', 'model/ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo', 'model/ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo', 'model/ComAdobeCqDeserfwImplDeserializationFirewallImplInfo', 'model/ComAdobeCqDtmImplServiceDTMWebServiceImplInfo', 'model/ComAdobeCqDtmImplServletsDTMDeployHookServletInfo', 'model/ComAdobeCqDtmReactorImplServiceWebServiceImplInfo', 'model/ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo', 'model/ComAdobeCqHcContentPackagesHealthCheckInfo', 'model/ComAdobeCqHistoryImplHistoryRequestFilterInfo', 'model/ComAdobeCqHistoryImplHistoryServiceImplInfo', 'model/ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo', 'model/ComAdobeCqProjectsImplServletProjectImageServletInfo', 'model/ComAdobeCqProjectsPurgeSchedulerInfo', 'model/ComAdobeCqScheduledExporterImplScheduledExporterImplInfo', 'model/ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo', 'model/ComAdobeCqScreensDeviceImplDeviceServiceInfo', 'model/ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo', 'model/ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo', 'model/ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo', 'model/ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo', 'model/ComAdobeCqScreensImplScreensChannelPostProcessorInfo', 'model/ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo', 'model/ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo', 'model/ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo', 'model/ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo', 'model/ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo', 'model/ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo', 'model/ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo', 'model/ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo', 'model/ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo', 'model/ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo', 'model/ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo', 'model/ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo', 'model/ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo', 'model/ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo', 'model/ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo', 'model/ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo', 'model/ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo', 'model/ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo', 'model/ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo', 'model/ComAdobeCqSocialCalendarServletsTimeZoneServletInfo', 'model/ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo', 'model/ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo', 'model/ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo', 'model/ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo', 'model/ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo', 'model/ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo', 'model/ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo', 'model/ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo', 'model/ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo', 'model/ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo', 'model/ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo', 'model/ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo', 'model/ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo', 'model/ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo', 'model/ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo', 'model/ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo', 'model/ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo', 'model/ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo', 'model/ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo', 'model/ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo', 'model/ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo', 'model/ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo', 'model/ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo', 'model/ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo', 'model/ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo', 'model/ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo', 'model/ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo', 'model/ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo', 'model/ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo', 'model/ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo', 'model/ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo', 'model/ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo', 'model/ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo', 'model/ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo', 'model/ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo', 'model/ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo', 'model/ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo', 'model/ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo', 'model/ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo', 'model/ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo', 'model/ComAdobeCqSocialGroupImplGroupServiceImplInfo', 'model/ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo', 'model/ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo', 'model/ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo', 'model/ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo', 'model/ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo', 'model/ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo', 'model/ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo', 'model/ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo', 'model/ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo', 'model/ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo', 'model/ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo', 'model/ComAdobeCqSocialNotificationsImplMentionsRouterInfo', 'model/ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo', 'model/ComAdobeCqSocialNotificationsImplNotificationsRouterInfo', 'model/ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo', 'model/ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo', 'model/ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo', 'model/ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo', 'model/ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo', 'model/ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo', 'model/ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo', 'model/ComAdobeCqSocialScoringImplScoringEventListenerInfo', 'model/ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo', 'model/ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo', 'model/ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo', 'model/ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo', 'model/ComAdobeCqSocialSrpImplSocialSolrConnectorInfo', 'model/ComAdobeCqSocialSyncImplDiffChangesObserverInfo', 'model/ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo', 'model/ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo', 'model/ComAdobeCqSocialSyncImplUserSyncListenerImplInfo', 'model/ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo', 'model/ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo', 'model/ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo', 'model/ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo', 'model/ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo', 'model/ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo', 'model/ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo', 'model/ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo', 'model/ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo', 'model/ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo', 'model/ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo', 'model/ComAdobeCqSocialUserImplTransportHttpToPublisherInfo', 'model/ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo', 'model/ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo', 'model/ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo', 'model/ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo', 'model/ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo', 'model/ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo', 'model/ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo', 'model/ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo', 'model/ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo', 'model/ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo', 'model/ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo', 'model/ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo', 'model/ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo', 'model/ComAdobeFormsCommonServiceImplDefaultDataProviderInfo', 'model/ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo', 'model/ComAdobeFormsCommonServletTempCleanUpTaskInfo', 'model/ComAdobeGraniteAcpPlatformPlatformServletInfo', 'model/ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo', 'model/ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo', 'model/ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo', 'model/ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo', 'model/ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo', 'model/ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo', 'model/ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo', 'model/ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo', 'model/ComAdobeGraniteAuthImsImplIMSProviderImplInfo', 'model/ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo', 'model/ComAdobeGraniteAuthImsInfo', 'model/ComAdobeGraniteAuthOauthAccesstokenProviderInfo', 'model/ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo', 'model/ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo', 'model/ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo', 'model/ComAdobeGraniteAuthOauthImplGithubProviderImplInfo', 'model/ComAdobeGraniteAuthOauthImplGraniteProviderInfo', 'model/ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo', 'model/ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo', 'model/ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo', 'model/ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo', 'model/ComAdobeGraniteAuthOauthProviderInfo', 'model/ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo', 'model/ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo', 'model/ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo', 'model/ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo', 'model/ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo', 'model/ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo', 'model/ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo', 'model/ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo', 'model/ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo', 'model/ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo', 'model/ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo', 'model/ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo', 'model/ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo', 'model/ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo', 'model/ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo', 'model/ComAdobeGraniteCompatrouterImplRoutingConfigInfo', 'model/ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo', 'model/ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo', 'model/ComAdobeGraniteContexthubImplContextHubImplInfo', 'model/ComAdobeGraniteCorsImplCORSPolicyImplInfo', 'model/ComAdobeGraniteCsrfImplCSRFFilterInfo', 'model/ComAdobeGraniteCsrfImplCSRFServletInfo', 'model/ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo', 'model/ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo', 'model/ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo', 'model/ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo', 'model/ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo', 'model/ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo', 'model/ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo', 'model/ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo', 'model/ComAdobeGraniteFragsImplRandomFeatureInfo', 'model/ComAdobeGraniteHttpcacheFileFileCacheStoreInfo', 'model/ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo', 'model/ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo', 'model/ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo', 'model/ComAdobeGraniteInfocollectorInfoCollectorInfo', 'model/ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo', 'model/ComAdobeGraniteLicenseImplLicenseCheckFilterInfo', 'model/ComAdobeGraniteLoggingImplLogAnalyserImplInfo', 'model/ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo', 'model/ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo', 'model/ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo', 'model/ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo', 'model/ComAdobeGraniteMonitoringImplScriptConfigImplInfo', 'model/ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo', 'model/ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo', 'model/ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo', 'model/ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo', 'model/ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo', 'model/ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo', 'model/ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo', 'model/ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo', 'model/ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo', 'model/ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo', 'model/ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo', 'model/ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo', 'model/ComAdobeGraniteOptoutImplOptOutServiceImplInfo', 'model/ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo', 'model/ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo', 'model/ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo', 'model/ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo', 'model/ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo', 'model/ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo', 'model/ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo', 'model/ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo', 'model/ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo', 'model/ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo', 'model/ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo', 'model/ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo', 'model/ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo', 'model/ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo', 'model/ComAdobeGraniteRepositoryImplCommitStatsConfigInfo', 'model/ComAdobeGraniteRepositoryServiceUserConfigurationInfo', 'model/ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo', 'model/ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo', 'model/ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo', 'model/ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo', 'model/ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo', 'model/ComAdobeGraniteRestImplServletDefaultGETServletInfo', 'model/ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo', 'model/ComAdobeGraniteSecurityUserUserPropertiesServiceInfo', 'model/ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo', 'model/ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo', 'model/ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo', 'model/ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo', 'model/ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo', 'model/ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo', 'model/ComAdobeGraniteThreaddumpThreadDumpCollectorInfo', 'model/ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo', 'model/ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo', 'model/ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo', 'model/ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo', 'model/ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo', 'model/ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo', 'model/ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo', 'model/ComAdobeGraniteWorkflowCoreJobJobHandlerInfo', 'model/ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo', 'model/ComAdobeGraniteWorkflowCorePayloadMapCacheInfo', 'model/ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo', 'model/ComAdobeGraniteWorkflowCoreWorkflowConfigInfo', 'model/ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo', 'model/ComAdobeGraniteWorkflowPurgeSchedulerInfo', 'model/ComAdobeOctopusNcommBootstrapInfo', 'model/ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo', 'model/ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo', 'model/ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo', 'model/ComDayCommonsHttpclientInfo', 'model/ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo', 'model/ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo', 'model/ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo', 'model/ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo', 'model/ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo', 'model/ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo', 'model/ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo', 'model/ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo', 'model/ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo', 'model/ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo', 'model/ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo', 'model/ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo', 'model/ComDayCqAuthImplCugCugSupportImplInfo', 'model/ComDayCqAuthImplLoginSelectorHandlerInfo', 'model/ComDayCqCommonsImplExternalizerImplInfo', 'model/ComDayCqCommonsServletsRootMappingServletInfo', 'model/ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo', 'model/ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo', 'model/ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo', 'model/ComDayCqContentsyncImplContentSyncManagerImplInfo', 'model/ComDayCqDamCommonsHandlerStandardImageHandlerInfo', 'model/ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo', 'model/ComDayCqDamCommonsUtilImplAssetCacheImplInfo', 'model/ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo', 'model/ComDayCqDamCoreImplAssetMoveListenerInfo', 'model/ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo', 'model/ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo', 'model/ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo', 'model/ComDayCqDamCoreImplDamChangeEventListenerInfo', 'model/ComDayCqDamCoreImplDamEventPurgeServiceInfo', 'model/ComDayCqDamCoreImplDamEventRecorderImplInfo', 'model/ComDayCqDamCoreImplEventDamEventAuditListenerInfo', 'model/ComDayCqDamCoreImplExpiryNotificationJobImplInfo', 'model/ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo', 'model/ComDayCqDamCoreImplGfxCommonsGfxRendererInfo', 'model/ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo', 'model/ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo', 'model/ComDayCqDamCoreImplHandlerJpegHandlerInfo', 'model/ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo', 'model/ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo', 'model/ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo', 'model/ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo', 'model/ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo', 'model/ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo', 'model/ComDayCqDamCoreImplLightboxLightboxServletInfo', 'model/ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo', 'model/ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo', 'model/ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo', 'model/ComDayCqDamCoreImplMissingMetadataNotificationJobInfo', 'model/ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo', 'model/ComDayCqDamCoreImplProcessTextExtractionProcessInfo', 'model/ComDayCqDamCoreImplRenditionMakerImplInfo', 'model/ComDayCqDamCoreImplReportsReportExportServiceInfo', 'model/ComDayCqDamCoreImplReportsReportPurgeServiceInfo', 'model/ComDayCqDamCoreImplServletAssetDownloadServletInfo', 'model/ComDayCqDamCoreImplServletAssetStatusServletInfo', 'model/ComDayCqDamCoreImplServletAssetXMPSearchServletInfo', 'model/ComDayCqDamCoreImplServletBatchMetadataServletInfo', 'model/ComDayCqDamCoreImplServletBinaryProviderServletInfo', 'model/ComDayCqDamCoreImplServletCollectionServletInfo', 'model/ComDayCqDamCoreImplServletCollectionsServletInfo', 'model/ComDayCqDamCoreImplServletCompanionServletInfo', 'model/ComDayCqDamCoreImplServletCreateAssetServletInfo', 'model/ComDayCqDamCoreImplServletDamContentDispositionFilterInfo', 'model/ComDayCqDamCoreImplServletGuidLookupFilterInfo', 'model/ComDayCqDamCoreImplServletHealthCheckServletInfo', 'model/ComDayCqDamCoreImplServletMetadataGetServletInfo', 'model/ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo', 'model/ComDayCqDamCoreImplServletResourceCollectionServletInfo', 'model/ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo', 'model/ComDayCqDamCoreImplUnzipUnzipConfigInfo', 'model/ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo', 'model/ComDayCqDamCoreProcessExtractMetadataProcessInfo', 'model/ComDayCqDamCoreProcessMetadataProcessorProcessInfo', 'model/ComDayCqDamHandlerFfmpegLocatorImplInfo', 'model/ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo', 'model/ComDayCqDamHandlerStandardPdfPdfHandlerInfo', 'model/ComDayCqDamHandlerStandardPsPostScriptHandlerInfo', 'model/ComDayCqDamHandlerStandardPsdPsdHandlerInfo', 'model/ComDayCqDamIdsImplIDSJobProcessorInfo', 'model/ComDayCqDamIdsImplIDSPoolManagerImplInfo', 'model/ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo', 'model/ComDayCqDamInddImplServletSnippetCreationServletInfo', 'model/ComDayCqDamInddProcessINDDMediaExtractProcessInfo', 'model/ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo', 'model/ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo', 'model/ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo', 'model/ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo', 'model/ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo', 'model/ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo', 'model/ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo', 'model/ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo', 'model/ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo', 'model/ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo', 'model/ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo', 'model/ComDayCqDamScene7ImplScene7APIClientImplInfo', 'model/ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo', 'model/ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo', 'model/ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo', 'model/ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo', 'model/ComDayCqDamScene7ImplScene7UploadServiceImplInfo', 'model/ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo', 'model/ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo', 'model/ComDayCqDamVideoImplServletVideoTestServletInfo', 'model/ComDayCqExtwidgetServletsImageSpriteServletInfo', 'model/ComDayCqImageInternalFontFontHelperInfo', 'model/ComDayCqJcrclustersupportClusterStartLevelControllerInfo', 'model/ComDayCqMailerDefaultMailServiceInfo', 'model/ComDayCqMailerImplCqMailingServiceInfo', 'model/ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo', 'model/ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo', 'model/ComDayCqMcmCampaignImplIntegrationConfigImplInfo', 'model/ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo', 'model/ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo', 'model/ComDayCqMcmImplMCMConfigurationInfo', 'model/ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo', 'model/ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo', 'model/ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo', 'model/ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo', 'model/ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo', 'model/ComDayCqNotificationImplNotificationServiceImplInfo', 'model/ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo', 'model/ComDayCqPollingImporterImplManagedPollConfigImplInfo', 'model/ComDayCqPollingImporterImplManagedPollingImporterImplInfo', 'model/ComDayCqPollingImporterImplPollingImporterImplInfo', 'model/ComDayCqReplicationAuditReplicationEventListenerInfo', 'model/ComDayCqReplicationContentStaticContentBuilderInfo', 'model/ComDayCqReplicationImplAgentManagerImplInfo', 'model/ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo', 'model/ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo', 'model/ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo', 'model/ComDayCqReplicationImplReplicationReceiverImplInfo', 'model/ComDayCqReplicationImplReplicatorImplInfo', 'model/ComDayCqReplicationImplReverseReplicatorInfo', 'model/ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo', 'model/ComDayCqReplicationImplTransportHttpInfo', 'model/ComDayCqReportingImplCacheCacheImplInfo', 'model/ComDayCqReportingImplConfigServiceImplInfo', 'model/ComDayCqReportingImplRLogAnalyzerInfo', 'model/ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo', 'model/ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo', 'model/ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo', 'model/ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo', 'model/ComDayCqRewriterProcessorImplHtmlParserFactoryInfo', 'model/ComDayCqSearchImplBuilderQueryBuilderImplInfo', 'model/ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo', 'model/ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo', 'model/ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo', 'model/ComDayCqSecurityACLSetupInfo', 'model/ComDayCqStatisticsImplStatisticsServiceImplInfo', 'model/ComDayCqTaggingImplJcrTagManagerFactoryImplInfo', 'model/ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo', 'model/ComDayCqTaggingImplTagGarbageCollectorInfo', 'model/ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo', 'model/ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo', 'model/ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo', 'model/ComDayCqWcmCoreImplCommandsWCMCommandServletInfo', 'model/ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo', 'model/ComDayCqWcmCoreImplEventPageEventAuditListenerInfo', 'model/ComDayCqWcmCoreImplEventPagePostProcessorInfo', 'model/ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo', 'model/ComDayCqWcmCoreImplEventTemplatePostProcessorInfo', 'model/ComDayCqWcmCoreImplLanguageManagerImplInfo', 'model/ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo', 'model/ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo', 'model/ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo', 'model/ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo', 'model/ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo', 'model/ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo', 'model/ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo', 'model/ComDayCqWcmCoreImplServletsFindReplaceServletInfo', 'model/ComDayCqWcmCoreImplServletsReferenceSearchServletInfo', 'model/ComDayCqWcmCoreImplServletsThumbnailServletInfo', 'model/ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo', 'model/ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo', 'model/ComDayCqWcmCoreImplVersionManagerImplInfo', 'model/ComDayCqWcmCoreImplVersionPurgeTaskInfo', 'model/ComDayCqWcmCoreImplWCMDebugFilterInfo', 'model/ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo', 'model/ComDayCqWcmCoreImplWarpTimeWarpFilterInfo', 'model/ComDayCqWcmCoreMvtMVTStatisticsImplInfo', 'model/ComDayCqWcmCoreStatsPageViewStatisticsImplInfo', 'model/ComDayCqWcmCoreWCMRequestFilterInfo', 'model/ComDayCqWcmDesignimporterDesignPackageImporterInfo', 'model/ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo', 'model/ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo', 'model/ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo', 'model/ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo', 'model/ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo', 'model/ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo', 'model/ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo', 'model/ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo', 'model/ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo', 'model/ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo', 'model/ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo', 'model/ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo', 'model/ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo', 'model/ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo', 'model/ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo', 'model/ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo', 'model/ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo', 'model/ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo', 'model/ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo', 'model/ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo', 'model/ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo', 'model/ComDayCqWcmFoundationFormsImplFormChooserServletInfo', 'model/ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo', 'model/ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo', 'model/ComDayCqWcmFoundationFormsImplMailServletInfo', 'model/ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo', 'model/ComDayCqWcmFoundationImplHTTPAuthHandlerInfo', 'model/ComDayCqWcmFoundationImplPageImpressionsTrackerInfo', 'model/ComDayCqWcmFoundationImplPageRedirectServletInfo', 'model/ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo', 'model/ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo', 'model/ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo', 'model/ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo', 'model/ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo', 'model/ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo', 'model/ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo', 'model/ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo', 'model/ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo', 'model/ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo', 'model/ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo', 'model/ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo', 'model/ComDayCqWcmMsmImplRolloutManagerImplInfo', 'model/ComDayCqWcmMsmImplServletsAuditLogServletInfo', 'model/ComDayCqWcmNotificationEmailImplEmailChannelInfo', 'model/ComDayCqWcmNotificationImplNotificationManagerImplInfo', 'model/ComDayCqWcmScriptingImplBVPManagerInfo', 'model/ComDayCqWcmUndoUndoConfigInfo', 'model/ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo', 'model/ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo', 'model/ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo', 'model/ComDayCqWidgetImplHtmlLibraryManagerImplInfo', 'model/ComDayCqWidgetImplWidgetExtensionProviderImplInfo', 'model/ComDayCqWorkflowImplEmailEMailNotificationServiceInfo', 'model/ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo', 'model/ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo', 'model/ComDayCrxSecurityTokenImplTokenCleanupTaskInfo', 'model/GuideLocalizationServiceInfo', 'model/MessagingUserComponentFactoryInfo', 'model/OrgApacheAriesJmxFrameworkStateConfigInfo', 'model/OrgApacheFelixEventadminImplEventAdminInfo', 'model/OrgApacheFelixHttpInfo', 'model/OrgApacheFelixHttpSslfilterSslFilterInfo', 'model/OrgApacheFelixJaasConfigurationFactoryInfo', 'model/OrgApacheFelixJaasConfigurationSpiInfo', 'model/OrgApacheFelixScrScrServiceInfo', 'model/OrgApacheFelixSystemreadyImplComponentsCheckInfo', 'model/OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo', 'model/OrgApacheFelixSystemreadyImplServicesCheckInfo', 'model/OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo', 'model/OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo', 'model/OrgApacheFelixSystemreadySystemReadyMonitorInfo', 'model/OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo', 'model/OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo', 'model/OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo', 'model/OrgApacheHttpProxyconfiguratorInfo', 'model/OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo', 'model/OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo', 'model/OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo', 'model/OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo', 'model/OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo', 'model/OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo', 'model/OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo', 'model/OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo', 'model/OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo', 'model/OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo', 'model/OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo', 'model/OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo', 'model/OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo', 'model/OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo', 'model/OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo', 'model/OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo', 'model/OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo', 'model/OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo', 'model/OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo', 'model/OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo', 'model/OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo', 'model/OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo', 'model/OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo', 'model/OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo', 'model/OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo', 'model/OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo', 'model/OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo', 'model/OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo', 'model/OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo', 'model/OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo', 'model/OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo', 'model/OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo', 'model/OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo', 'model/OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo', 'model/OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo', 'model/OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo', 'model/OrgApacheSlingAuthCoreImplLogoutServletInfo', 'model/OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo', 'model/OrgApacheSlingCaconfigImplConfigurationResolverImplInfo', 'model/OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo', 'model/OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo', 'model/OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo', 'model/OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo', 'model/OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo', 'model/OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo', 'model/OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo', 'model/OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo', 'model/OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo', 'model/OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo', 'model/OrgApacheSlingCommonsLogLogManagerInfo', 'model/OrgApacheSlingCommonsMetricsInternalLogReporterInfo', 'model/OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo', 'model/OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo', 'model/OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo', 'model/OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo', 'model/OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo', 'model/OrgApacheSlingDatasourceDataSourceFactoryInfo', 'model/OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo', 'model/OrgApacheSlingDiscoveryOakConfigInfo', 'model/OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo', 'model/OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo', 'model/OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo', 'model/OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo', 'model/OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo', 'model/OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo', 'model/OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo', 'model/OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo', 'model/OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo', 'model/OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo', 'model/OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo', 'model/OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo', 'model/OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo', 'model/OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo', 'model/OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo', 'model/OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo', 'model/OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo', 'model/OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo', 'model/OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo', 'model/OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo', 'model/OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo', 'model/OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo', 'model/OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo', 'model/OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo', 'model/OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo', 'model/OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo', 'model/OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo', 'model/OrgApacheSlingEngineImplLogRequestLoggerInfo', 'model/OrgApacheSlingEngineImplLogRequestLoggerServiceInfo', 'model/OrgApacheSlingEngineImplSlingMainServletInfo', 'model/OrgApacheSlingEngineParametersInfo', 'model/OrgApacheSlingEventImplEventingThreadPoolInfo', 'model/OrgApacheSlingEventImplJobsDefaultJobManagerInfo', 'model/OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo', 'model/OrgApacheSlingEventImplJobsJobConsumerManagerInfo', 'model/OrgApacheSlingEventJobsQueueConfigurationInfo', 'model/OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo', 'model/OrgApacheSlingFeatureflagsFeatureInfo', 'model/OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo', 'model/OrgApacheSlingHapiImplHApiUtilImplInfo', 'model/OrgApacheSlingHcCoreImplCompositeHealthCheckInfo', 'model/OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo', 'model/OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo', 'model/OrgApacheSlingHcCoreImplScriptableHealthCheckInfo', 'model/OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo', 'model/OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo', 'model/OrgApacheSlingI18nImplI18NFilterInfo', 'model/OrgApacheSlingI18nImplJcrResourceBundleProviderInfo', 'model/OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo', 'model/OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo', 'model/OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo', 'model/OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo', 'model/OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo', 'model/OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo', 'model/OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo', 'model/OrgApacheSlingJcrRepoinitRepositoryInitializerInfo', 'model/OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo', 'model/OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo', 'model/OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo', 'model/OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo', 'model/OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo', 'model/OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo', 'model/OrgApacheSlingJmxProviderImplJMXResourceProviderInfo', 'model/OrgApacheSlingModelsImplModelAdapterFactoryInfo', 'model/OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo', 'model/OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo', 'model/OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo', 'model/OrgApacheSlingResourcemergerPickerOverridingInfo', 'model/OrgApacheSlingScriptingCoreImplScriptCacheImplInfo', 'model/OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo', 'model/OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo', 'model/OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo', 'model/OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo', 'model/OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo', 'model/OrgApacheSlingSecurityImplContentDispositionFilterInfo', 'model/OrgApacheSlingSecurityImplReferrerFilterInfo', 'model/OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo', 'model/OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo', 'model/OrgApacheSlingServletsGetDefaultGetServletInfo', 'model/OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo', 'model/OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo', 'model/OrgApacheSlingServletsPostImplSlingPostServletInfo', 'model/OrgApacheSlingServletsResolverSlingServletResolverInfo', 'model/OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo', 'model/OrgApacheSlingStartupfilterImplStartupFilterImplInfo', 'model/OrgApacheSlingTenantInternalTenantProviderImplInfo', 'model/OrgApacheSlingTracerInternalLogTracerInfo', 'model/OrgApacheSlingXssImplXSSFilterImplInfo'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo'), require('../model/AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo'), require('../model/AnalyticsComponentQueryCacheServiceInfo'), require('../model/ApacheSlingHealthCheckResultHTMLSerializerInfo'), require('../model/ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo'), require('../model/ComAdobeAemTransactionCoreImplTransactionRecorderInfo'), require('../model/ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo'), require('../model/ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo'), require('../model/ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo'), require('../model/ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo'), require('../model/ComAdobeCqAccountApiAccountManagementServiceInfo'), require('../model/ComAdobeCqAccountImplAccountManagementServletInfo'), require('../model/ComAdobeCqAddressImplLocationLocationListServletInfo'), require('../model/ComAdobeCqAuditPurgeDamInfo'), require('../model/ComAdobeCqAuditPurgePagesInfo'), require('../model/ComAdobeCqAuditPurgeReplicationInfo'), require('../model/ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo'), require('../model/ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo'), require('../model/ComAdobeCqCdnRewriterImplCDNRewriterInfo'), require('../model/ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo'), require('../model/ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo'), require('../model/ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo'), require('../model/ComAdobeCqCommerceImplAssetStaticImageHandlerInfo'), require('../model/ComAdobeCqCommerceImplAssetVideoHandlerInfo'), require('../model/ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo'), require('../model/ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo'), require('../model/ComAdobeCqCommercePimImplPageEventListenerInfo'), require('../model/ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo'), require('../model/ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo'), require('../model/ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo'), require('../model/ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo'), require('../model/ComAdobeCqDamCfmImplComponentComponentConfigImplInfo'), require('../model/ComAdobeCqDamCfmImplConfFeatureConfigImplInfo'), require('../model/ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo'), require('../model/ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo'), require('../model/ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo'), require('../model/ComAdobeCqDamDmProcessImagePTiffManagerImplInfo'), require('../model/ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo'), require('../model/ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo'), require('../model/ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo'), require('../model/ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo'), require('../model/ComAdobeCqDamS7imagingImplIsImageServerComponentInfo'), require('../model/ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo'), require('../model/ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo'), require('../model/ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo'), require('../model/ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo'), require('../model/ComAdobeCqDeserfwImplDeserializationFirewallImplInfo'), require('../model/ComAdobeCqDtmImplServiceDTMWebServiceImplInfo'), require('../model/ComAdobeCqDtmImplServletsDTMDeployHookServletInfo'), require('../model/ComAdobeCqDtmReactorImplServiceWebServiceImplInfo'), require('../model/ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo'), require('../model/ComAdobeCqHcContentPackagesHealthCheckInfo'), require('../model/ComAdobeCqHistoryImplHistoryRequestFilterInfo'), require('../model/ComAdobeCqHistoryImplHistoryServiceImplInfo'), require('../model/ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo'), require('../model/ComAdobeCqProjectsImplServletProjectImageServletInfo'), require('../model/ComAdobeCqProjectsPurgeSchedulerInfo'), require('../model/ComAdobeCqScheduledExporterImplScheduledExporterImplInfo'), require('../model/ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo'), require('../model/ComAdobeCqScreensDeviceImplDeviceServiceInfo'), require('../model/ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo'), require('../model/ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo'), require('../model/ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo'), require('../model/ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo'), require('../model/ComAdobeCqScreensImplScreensChannelPostProcessorInfo'), require('../model/ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo'), require('../model/ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo'), require('../model/ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo'), require('../model/ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo'), require('../model/ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo'), require('../model/ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo'), require('../model/ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo'), require('../model/ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo'), require('../model/ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo'), require('../model/ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo'), require('../model/ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo'), require('../model/ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo'), require('../model/ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo'), require('../model/ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo'), require('../model/ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo'), require('../model/ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo'), require('../model/ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo'), require('../model/ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo'), require('../model/ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo'), require('../model/ComAdobeCqSocialCalendarServletsTimeZoneServletInfo'), require('../model/ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo'), require('../model/ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo'), require('../model/ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo'), require('../model/ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo'), require('../model/ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo'), require('../model/ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo'), require('../model/ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo'), require('../model/ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo'), require('../model/ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo'), require('../model/ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo'), require('../model/ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo'), require('../model/ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo'), require('../model/ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo'), require('../model/ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo'), require('../model/ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo'), require('../model/ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo'), require('../model/ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo'), require('../model/ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo'), require('../model/ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo'), require('../model/ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo'), require('../model/ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo'), require('../model/ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo'), require('../model/ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo'), require('../model/ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo'), require('../model/ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo'), require('../model/ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo'), require('../model/ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo'), require('../model/ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo'), require('../model/ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo'), require('../model/ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo'), require('../model/ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo'), require('../model/ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo'), require('../model/ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo'), require('../model/ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo'), require('../model/ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo'), require('../model/ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo'), require('../model/ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo'), require('../model/ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo'), require('../model/ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo'), require('../model/ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo'), require('../model/ComAdobeCqSocialGroupImplGroupServiceImplInfo'), require('../model/ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo'), require('../model/ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo'), require('../model/ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo'), require('../model/ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo'), require('../model/ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo'), require('../model/ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo'), require('../model/ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo'), require('../model/ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo'), require('../model/ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo'), require('../model/ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo'), require('../model/ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo'), require('../model/ComAdobeCqSocialNotificationsImplMentionsRouterInfo'), require('../model/ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo'), require('../model/ComAdobeCqSocialNotificationsImplNotificationsRouterInfo'), require('../model/ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo'), require('../model/ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo'), require('../model/ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo'), require('../model/ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo'), require('../model/ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo'), require('../model/ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo'), require('../model/ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo'), require('../model/ComAdobeCqSocialScoringImplScoringEventListenerInfo'), require('../model/ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo'), require('../model/ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo'), require('../model/ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo'), require('../model/ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo'), require('../model/ComAdobeCqSocialSrpImplSocialSolrConnectorInfo'), require('../model/ComAdobeCqSocialSyncImplDiffChangesObserverInfo'), require('../model/ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo'), require('../model/ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo'), require('../model/ComAdobeCqSocialSyncImplUserSyncListenerImplInfo'), require('../model/ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo'), require('../model/ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo'), require('../model/ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo'), require('../model/ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo'), require('../model/ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo'), require('../model/ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo'), require('../model/ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo'), require('../model/ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo'), require('../model/ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo'), require('../model/ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo'), require('../model/ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo'), require('../model/ComAdobeCqSocialUserImplTransportHttpToPublisherInfo'), require('../model/ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo'), require('../model/ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo'), require('../model/ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo'), require('../model/ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo'), require('../model/ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo'), require('../model/ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo'), require('../model/ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo'), require('../model/ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo'), require('../model/ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo'), require('../model/ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo'), require('../model/ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo'), require('../model/ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo'), require('../model/ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo'), require('../model/ComAdobeFormsCommonServiceImplDefaultDataProviderInfo'), require('../model/ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo'), require('../model/ComAdobeFormsCommonServletTempCleanUpTaskInfo'), require('../model/ComAdobeGraniteAcpPlatformPlatformServletInfo'), require('../model/ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo'), require('../model/ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo'), require('../model/ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo'), require('../model/ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo'), require('../model/ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo'), require('../model/ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo'), require('../model/ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo'), require('../model/ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo'), require('../model/ComAdobeGraniteAuthImsImplIMSProviderImplInfo'), require('../model/ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo'), require('../model/ComAdobeGraniteAuthImsInfo'), require('../model/ComAdobeGraniteAuthOauthAccesstokenProviderInfo'), require('../model/ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo'), require('../model/ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo'), require('../model/ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo'), require('../model/ComAdobeGraniteAuthOauthImplGithubProviderImplInfo'), require('../model/ComAdobeGraniteAuthOauthImplGraniteProviderInfo'), require('../model/ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo'), require('../model/ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo'), require('../model/ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo'), require('../model/ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo'), require('../model/ComAdobeGraniteAuthOauthProviderInfo'), require('../model/ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo'), require('../model/ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo'), require('../model/ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo'), require('../model/ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo'), require('../model/ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo'), require('../model/ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo'), require('../model/ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo'), require('../model/ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo'), require('../model/ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo'), require('../model/ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo'), require('../model/ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo'), require('../model/ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo'), require('../model/ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo'), require('../model/ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo'), require('../model/ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo'), require('../model/ComAdobeGraniteCompatrouterImplRoutingConfigInfo'), require('../model/ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo'), require('../model/ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo'), require('../model/ComAdobeGraniteContexthubImplContextHubImplInfo'), require('../model/ComAdobeGraniteCorsImplCORSPolicyImplInfo'), require('../model/ComAdobeGraniteCsrfImplCSRFFilterInfo'), require('../model/ComAdobeGraniteCsrfImplCSRFServletInfo'), require('../model/ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo'), require('../model/ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo'), require('../model/ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo'), require('../model/ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo'), require('../model/ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo'), require('../model/ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo'), require('../model/ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo'), require('../model/ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo'), require('../model/ComAdobeGraniteFragsImplRandomFeatureInfo'), require('../model/ComAdobeGraniteHttpcacheFileFileCacheStoreInfo'), require('../model/ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo'), require('../model/ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo'), require('../model/ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo'), require('../model/ComAdobeGraniteInfocollectorInfoCollectorInfo'), require('../model/ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo'), require('../model/ComAdobeGraniteLicenseImplLicenseCheckFilterInfo'), require('../model/ComAdobeGraniteLoggingImplLogAnalyserImplInfo'), require('../model/ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo'), require('../model/ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo'), require('../model/ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo'), require('../model/ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo'), require('../model/ComAdobeGraniteMonitoringImplScriptConfigImplInfo'), require('../model/ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo'), require('../model/ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo'), require('../model/ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo'), require('../model/ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo'), require('../model/ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo'), require('../model/ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo'), require('../model/ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo'), require('../model/ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo'), require('../model/ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo'), require('../model/ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo'), require('../model/ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo'), require('../model/ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo'), require('../model/ComAdobeGraniteOptoutImplOptOutServiceImplInfo'), require('../model/ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo'), require('../model/ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo'), require('../model/ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo'), require('../model/ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo'), require('../model/ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo'), require('../model/ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo'), require('../model/ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo'), require('../model/ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo'), require('../model/ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo'), require('../model/ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo'), require('../model/ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo'), require('../model/ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo'), require('../model/ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo'), require('../model/ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo'), require('../model/ComAdobeGraniteRepositoryImplCommitStatsConfigInfo'), require('../model/ComAdobeGraniteRepositoryServiceUserConfigurationInfo'), require('../model/ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo'), require('../model/ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo'), require('../model/ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo'), require('../model/ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo'), require('../model/ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo'), require('../model/ComAdobeGraniteRestImplServletDefaultGETServletInfo'), require('../model/ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo'), require('../model/ComAdobeGraniteSecurityUserUserPropertiesServiceInfo'), require('../model/ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo'), require('../model/ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo'), require('../model/ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo'), require('../model/ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo'), require('../model/ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo'), require('../model/ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo'), require('../model/ComAdobeGraniteThreaddumpThreadDumpCollectorInfo'), require('../model/ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo'), require('../model/ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo'), require('../model/ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo'), require('../model/ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo'), require('../model/ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo'), require('../model/ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo'), require('../model/ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo'), require('../model/ComAdobeGraniteWorkflowCoreJobJobHandlerInfo'), require('../model/ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo'), require('../model/ComAdobeGraniteWorkflowCorePayloadMapCacheInfo'), require('../model/ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo'), require('../model/ComAdobeGraniteWorkflowCoreWorkflowConfigInfo'), require('../model/ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo'), require('../model/ComAdobeGraniteWorkflowPurgeSchedulerInfo'), require('../model/ComAdobeOctopusNcommBootstrapInfo'), require('../model/ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo'), require('../model/ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo'), require('../model/ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo'), require('../model/ComDayCommonsHttpclientInfo'), require('../model/ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo'), require('../model/ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo'), require('../model/ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo'), require('../model/ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo'), require('../model/ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo'), require('../model/ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo'), require('../model/ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo'), require('../model/ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo'), require('../model/ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo'), require('../model/ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo'), require('../model/ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo'), require('../model/ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo'), require('../model/ComDayCqAuthImplCugCugSupportImplInfo'), require('../model/ComDayCqAuthImplLoginSelectorHandlerInfo'), require('../model/ComDayCqCommonsImplExternalizerImplInfo'), require('../model/ComDayCqCommonsServletsRootMappingServletInfo'), require('../model/ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo'), require('../model/ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo'), require('../model/ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo'), require('../model/ComDayCqContentsyncImplContentSyncManagerImplInfo'), require('../model/ComDayCqDamCommonsHandlerStandardImageHandlerInfo'), require('../model/ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo'), require('../model/ComDayCqDamCommonsUtilImplAssetCacheImplInfo'), require('../model/ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo'), require('../model/ComDayCqDamCoreImplAssetMoveListenerInfo'), require('../model/ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo'), require('../model/ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo'), require('../model/ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo'), require('../model/ComDayCqDamCoreImplDamChangeEventListenerInfo'), require('../model/ComDayCqDamCoreImplDamEventPurgeServiceInfo'), require('../model/ComDayCqDamCoreImplDamEventRecorderImplInfo'), require('../model/ComDayCqDamCoreImplEventDamEventAuditListenerInfo'), require('../model/ComDayCqDamCoreImplExpiryNotificationJobImplInfo'), require('../model/ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo'), require('../model/ComDayCqDamCoreImplGfxCommonsGfxRendererInfo'), require('../model/ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo'), require('../model/ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo'), require('../model/ComDayCqDamCoreImplHandlerJpegHandlerInfo'), require('../model/ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo'), require('../model/ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo'), require('../model/ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo'), require('../model/ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo'), require('../model/ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo'), require('../model/ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo'), require('../model/ComDayCqDamCoreImplLightboxLightboxServletInfo'), require('../model/ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo'), require('../model/ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo'), require('../model/ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo'), require('../model/ComDayCqDamCoreImplMissingMetadataNotificationJobInfo'), require('../model/ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo'), require('../model/ComDayCqDamCoreImplProcessTextExtractionProcessInfo'), require('../model/ComDayCqDamCoreImplRenditionMakerImplInfo'), require('../model/ComDayCqDamCoreImplReportsReportExportServiceInfo'), require('../model/ComDayCqDamCoreImplReportsReportPurgeServiceInfo'), require('../model/ComDayCqDamCoreImplServletAssetDownloadServletInfo'), require('../model/ComDayCqDamCoreImplServletAssetStatusServletInfo'), require('../model/ComDayCqDamCoreImplServletAssetXMPSearchServletInfo'), require('../model/ComDayCqDamCoreImplServletBatchMetadataServletInfo'), require('../model/ComDayCqDamCoreImplServletBinaryProviderServletInfo'), require('../model/ComDayCqDamCoreImplServletCollectionServletInfo'), require('../model/ComDayCqDamCoreImplServletCollectionsServletInfo'), require('../model/ComDayCqDamCoreImplServletCompanionServletInfo'), require('../model/ComDayCqDamCoreImplServletCreateAssetServletInfo'), require('../model/ComDayCqDamCoreImplServletDamContentDispositionFilterInfo'), require('../model/ComDayCqDamCoreImplServletGuidLookupFilterInfo'), require('../model/ComDayCqDamCoreImplServletHealthCheckServletInfo'), require('../model/ComDayCqDamCoreImplServletMetadataGetServletInfo'), require('../model/ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo'), require('../model/ComDayCqDamCoreImplServletResourceCollectionServletInfo'), require('../model/ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo'), require('../model/ComDayCqDamCoreImplUnzipUnzipConfigInfo'), require('../model/ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo'), require('../model/ComDayCqDamCoreProcessExtractMetadataProcessInfo'), require('../model/ComDayCqDamCoreProcessMetadataProcessorProcessInfo'), require('../model/ComDayCqDamHandlerFfmpegLocatorImplInfo'), require('../model/ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo'), require('../model/ComDayCqDamHandlerStandardPdfPdfHandlerInfo'), require('../model/ComDayCqDamHandlerStandardPsPostScriptHandlerInfo'), require('../model/ComDayCqDamHandlerStandardPsdPsdHandlerInfo'), require('../model/ComDayCqDamIdsImplIDSJobProcessorInfo'), require('../model/ComDayCqDamIdsImplIDSPoolManagerImplInfo'), require('../model/ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo'), require('../model/ComDayCqDamInddImplServletSnippetCreationServletInfo'), require('../model/ComDayCqDamInddProcessINDDMediaExtractProcessInfo'), require('../model/ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo'), require('../model/ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo'), require('../model/ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo'), require('../model/ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo'), require('../model/ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo'), require('../model/ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo'), require('../model/ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo'), require('../model/ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo'), require('../model/ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo'), require('../model/ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo'), require('../model/ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo'), require('../model/ComDayCqDamScene7ImplScene7APIClientImplInfo'), require('../model/ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo'), require('../model/ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo'), require('../model/ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo'), require('../model/ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo'), require('../model/ComDayCqDamScene7ImplScene7UploadServiceImplInfo'), require('../model/ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo'), require('../model/ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo'), require('../model/ComDayCqDamVideoImplServletVideoTestServletInfo'), require('../model/ComDayCqExtwidgetServletsImageSpriteServletInfo'), require('../model/ComDayCqImageInternalFontFontHelperInfo'), require('../model/ComDayCqJcrclustersupportClusterStartLevelControllerInfo'), require('../model/ComDayCqMailerDefaultMailServiceInfo'), require('../model/ComDayCqMailerImplCqMailingServiceInfo'), require('../model/ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo'), require('../model/ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo'), require('../model/ComDayCqMcmCampaignImplIntegrationConfigImplInfo'), require('../model/ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo'), require('../model/ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo'), require('../model/ComDayCqMcmImplMCMConfigurationInfo'), require('../model/ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo'), require('../model/ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo'), require('../model/ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo'), require('../model/ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo'), require('../model/ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo'), require('../model/ComDayCqNotificationImplNotificationServiceImplInfo'), require('../model/ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo'), require('../model/ComDayCqPollingImporterImplManagedPollConfigImplInfo'), require('../model/ComDayCqPollingImporterImplManagedPollingImporterImplInfo'), require('../model/ComDayCqPollingImporterImplPollingImporterImplInfo'), require('../model/ComDayCqReplicationAuditReplicationEventListenerInfo'), require('../model/ComDayCqReplicationContentStaticContentBuilderInfo'), require('../model/ComDayCqReplicationImplAgentManagerImplInfo'), require('../model/ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo'), require('../model/ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo'), require('../model/ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo'), require('../model/ComDayCqReplicationImplReplicationReceiverImplInfo'), require('../model/ComDayCqReplicationImplReplicatorImplInfo'), require('../model/ComDayCqReplicationImplReverseReplicatorInfo'), require('../model/ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo'), require('../model/ComDayCqReplicationImplTransportHttpInfo'), require('../model/ComDayCqReportingImplCacheCacheImplInfo'), require('../model/ComDayCqReportingImplConfigServiceImplInfo'), require('../model/ComDayCqReportingImplRLogAnalyzerInfo'), require('../model/ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo'), require('../model/ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo'), require('../model/ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo'), require('../model/ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo'), require('../model/ComDayCqRewriterProcessorImplHtmlParserFactoryInfo'), require('../model/ComDayCqSearchImplBuilderQueryBuilderImplInfo'), require('../model/ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo'), require('../model/ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo'), require('../model/ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo'), require('../model/ComDayCqSecurityACLSetupInfo'), require('../model/ComDayCqStatisticsImplStatisticsServiceImplInfo'), require('../model/ComDayCqTaggingImplJcrTagManagerFactoryImplInfo'), require('../model/ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo'), require('../model/ComDayCqTaggingImplTagGarbageCollectorInfo'), require('../model/ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo'), require('../model/ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo'), require('../model/ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo'), require('../model/ComDayCqWcmCoreImplCommandsWCMCommandServletInfo'), require('../model/ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo'), require('../model/ComDayCqWcmCoreImplEventPageEventAuditListenerInfo'), require('../model/ComDayCqWcmCoreImplEventPagePostProcessorInfo'), require('../model/ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo'), require('../model/ComDayCqWcmCoreImplEventTemplatePostProcessorInfo'), require('../model/ComDayCqWcmCoreImplLanguageManagerImplInfo'), require('../model/ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo'), require('../model/ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo'), require('../model/ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo'), require('../model/ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo'), require('../model/ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo'), require('../model/ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo'), require('../model/ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo'), require('../model/ComDayCqWcmCoreImplServletsFindReplaceServletInfo'), require('../model/ComDayCqWcmCoreImplServletsReferenceSearchServletInfo'), require('../model/ComDayCqWcmCoreImplServletsThumbnailServletInfo'), require('../model/ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo'), require('../model/ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo'), require('../model/ComDayCqWcmCoreImplVersionManagerImplInfo'), require('../model/ComDayCqWcmCoreImplVersionPurgeTaskInfo'), require('../model/ComDayCqWcmCoreImplWCMDebugFilterInfo'), require('../model/ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo'), require('../model/ComDayCqWcmCoreImplWarpTimeWarpFilterInfo'), require('../model/ComDayCqWcmCoreMvtMVTStatisticsImplInfo'), require('../model/ComDayCqWcmCoreStatsPageViewStatisticsImplInfo'), require('../model/ComDayCqWcmCoreWCMRequestFilterInfo'), require('../model/ComDayCqWcmDesignimporterDesignPackageImporterInfo'), require('../model/ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo'), require('../model/ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo'), require('../model/ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo'), require('../model/ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo'), require('../model/ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo'), require('../model/ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo'), require('../model/ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo'), require('../model/ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo'), require('../model/ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo'), require('../model/ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo'), require('../model/ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo'), require('../model/ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo'), require('../model/ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo'), require('../model/ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo'), require('../model/ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo'), require('../model/ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo'), require('../model/ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo'), require('../model/ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo'), require('../model/ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo'), require('../model/ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo'), require('../model/ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo'), require('../model/ComDayCqWcmFoundationFormsImplFormChooserServletInfo'), require('../model/ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo'), require('../model/ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo'), require('../model/ComDayCqWcmFoundationFormsImplMailServletInfo'), require('../model/ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo'), require('../model/ComDayCqWcmFoundationImplHTTPAuthHandlerInfo'), require('../model/ComDayCqWcmFoundationImplPageImpressionsTrackerInfo'), require('../model/ComDayCqWcmFoundationImplPageRedirectServletInfo'), require('../model/ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo'), require('../model/ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo'), require('../model/ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo'), require('../model/ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo'), require('../model/ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo'), require('../model/ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo'), require('../model/ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo'), require('../model/ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo'), require('../model/ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo'), require('../model/ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo'), require('../model/ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo'), require('../model/ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo'), require('../model/ComDayCqWcmMsmImplRolloutManagerImplInfo'), require('../model/ComDayCqWcmMsmImplServletsAuditLogServletInfo'), require('../model/ComDayCqWcmNotificationEmailImplEmailChannelInfo'), require('../model/ComDayCqWcmNotificationImplNotificationManagerImplInfo'), require('../model/ComDayCqWcmScriptingImplBVPManagerInfo'), require('../model/ComDayCqWcmUndoUndoConfigInfo'), require('../model/ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo'), require('../model/ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo'), require('../model/ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo'), require('../model/ComDayCqWidgetImplHtmlLibraryManagerImplInfo'), require('../model/ComDayCqWidgetImplWidgetExtensionProviderImplInfo'), require('../model/ComDayCqWorkflowImplEmailEMailNotificationServiceInfo'), require('../model/ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo'), require('../model/ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo'), require('../model/ComDayCrxSecurityTokenImplTokenCleanupTaskInfo'), require('../model/GuideLocalizationServiceInfo'), require('../model/MessagingUserComponentFactoryInfo'), require('../model/OrgApacheAriesJmxFrameworkStateConfigInfo'), require('../model/OrgApacheFelixEventadminImplEventAdminInfo'), require('../model/OrgApacheFelixHttpInfo'), require('../model/OrgApacheFelixHttpSslfilterSslFilterInfo'), require('../model/OrgApacheFelixJaasConfigurationFactoryInfo'), require('../model/OrgApacheFelixJaasConfigurationSpiInfo'), require('../model/OrgApacheFelixScrScrServiceInfo'), require('../model/OrgApacheFelixSystemreadyImplComponentsCheckInfo'), require('../model/OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo'), require('../model/OrgApacheFelixSystemreadyImplServicesCheckInfo'), require('../model/OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo'), require('../model/OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo'), require('../model/OrgApacheFelixSystemreadySystemReadyMonitorInfo'), require('../model/OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo'), require('../model/OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo'), require('../model/OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo'), require('../model/OrgApacheHttpProxyconfiguratorInfo'), require('../model/OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo'), require('../model/OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo'), require('../model/OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo'), require('../model/OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo'), require('../model/OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo'), require('../model/OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo'), require('../model/OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo'), require('../model/OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo'), require('../model/OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo'), require('../model/OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo'), require('../model/OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo'), require('../model/OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo'), require('../model/OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo'), require('../model/OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo'), require('../model/OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo'), require('../model/OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo'), require('../model/OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo'), require('../model/OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo'), require('../model/OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo'), require('../model/OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo'), require('../model/OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo'), require('../model/OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo'), require('../model/OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo'), require('../model/OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo'), require('../model/OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo'), require('../model/OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo'), require('../model/OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo'), require('../model/OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo'), require('../model/OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo'), require('../model/OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo'), require('../model/OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo'), require('../model/OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo'), require('../model/OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo'), require('../model/OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo'), require('../model/OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo'), require('../model/OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo'), require('../model/OrgApacheSlingAuthCoreImplLogoutServletInfo'), require('../model/OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo'), require('../model/OrgApacheSlingCaconfigImplConfigurationResolverImplInfo'), require('../model/OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo'), require('../model/OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo'), require('../model/OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo'), require('../model/OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo'), require('../model/OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo'), require('../model/OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo'), require('../model/OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo'), require('../model/OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo'), require('../model/OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo'), require('../model/OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo'), require('../model/OrgApacheSlingCommonsLogLogManagerInfo'), require('../model/OrgApacheSlingCommonsMetricsInternalLogReporterInfo'), require('../model/OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo'), require('../model/OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo'), require('../model/OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo'), require('../model/OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo'), require('../model/OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo'), require('../model/OrgApacheSlingDatasourceDataSourceFactoryInfo'), require('../model/OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo'), require('../model/OrgApacheSlingDiscoveryOakConfigInfo'), require('../model/OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo'), require('../model/OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo'), require('../model/OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo'), require('../model/OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo'), require('../model/OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo'), require('../model/OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo'), require('../model/OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo'), require('../model/OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo'), require('../model/OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo'), require('../model/OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo'), require('../model/OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo'), require('../model/OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo'), require('../model/OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo'), require('../model/OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo'), require('../model/OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo'), require('../model/OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo'), require('../model/OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo'), require('../model/OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo'), require('../model/OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo'), require('../model/OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo'), require('../model/OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo'), require('../model/OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo'), require('../model/OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo'), require('../model/OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo'), require('../model/OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo'), require('../model/OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo'), require('../model/OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo'), require('../model/OrgApacheSlingEngineImplLogRequestLoggerInfo'), require('../model/OrgApacheSlingEngineImplLogRequestLoggerServiceInfo'), require('../model/OrgApacheSlingEngineImplSlingMainServletInfo'), require('../model/OrgApacheSlingEngineParametersInfo'), require('../model/OrgApacheSlingEventImplEventingThreadPoolInfo'), require('../model/OrgApacheSlingEventImplJobsDefaultJobManagerInfo'), require('../model/OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo'), require('../model/OrgApacheSlingEventImplJobsJobConsumerManagerInfo'), require('../model/OrgApacheSlingEventJobsQueueConfigurationInfo'), require('../model/OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo'), require('../model/OrgApacheSlingFeatureflagsFeatureInfo'), require('../model/OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo'), require('../model/OrgApacheSlingHapiImplHApiUtilImplInfo'), require('../model/OrgApacheSlingHcCoreImplCompositeHealthCheckInfo'), require('../model/OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo'), require('../model/OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo'), require('../model/OrgApacheSlingHcCoreImplScriptableHealthCheckInfo'), require('../model/OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo'), require('../model/OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo'), require('../model/OrgApacheSlingI18nImplI18NFilterInfo'), require('../model/OrgApacheSlingI18nImplJcrResourceBundleProviderInfo'), require('../model/OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo'), require('../model/OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo'), require('../model/OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo'), require('../model/OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo'), require('../model/OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo'), require('../model/OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo'), require('../model/OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo'), require('../model/OrgApacheSlingJcrRepoinitRepositoryInitializerInfo'), require('../model/OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo'), require('../model/OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo'), require('../model/OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo'), require('../model/OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo'), require('../model/OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo'), require('../model/OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo'), require('../model/OrgApacheSlingJmxProviderImplJMXResourceProviderInfo'), require('../model/OrgApacheSlingModelsImplModelAdapterFactoryInfo'), require('../model/OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo'), require('../model/OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo'), require('../model/OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo'), require('../model/OrgApacheSlingResourcemergerPickerOverridingInfo'), require('../model/OrgApacheSlingScriptingCoreImplScriptCacheImplInfo'), require('../model/OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo'), require('../model/OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo'), require('../model/OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo'), require('../model/OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo'), require('../model/OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo'), require('../model/OrgApacheSlingSecurityImplContentDispositionFilterInfo'), require('../model/OrgApacheSlingSecurityImplReferrerFilterInfo'), require('../model/OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo'), require('../model/OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo'), require('../model/OrgApacheSlingServletsGetDefaultGetServletInfo'), require('../model/OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo'), require('../model/OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo'), require('../model/OrgApacheSlingServletsPostImplSlingPostServletInfo'), require('../model/OrgApacheSlingServletsResolverSlingServletResolverInfo'), require('../model/OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo'), require('../model/OrgApacheSlingStartupfilterImplStartupFilterImplInfo'), require('../model/OrgApacheSlingTenantInternalTenantProviderImplInfo'), require('../model/OrgApacheSlingTracerInternalLogTracerInfo'), require('../model/OrgApacheSlingXssImplXSSFilterImplInfo'));
  } else {
    // Browser globals (root is window)
    if (!root.NodeSwaggerAemOsgi) {
      root.NodeSwaggerAemOsgi = {};
    }
    root.NodeSwaggerAemOsgi.ConfigmgrApi = factory(root.NodeSwaggerAemOsgi.ApiClient, root.NodeSwaggerAemOsgi.AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo, root.NodeSwaggerAemOsgi.AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo, root.NodeSwaggerAemOsgi.AnalyticsComponentQueryCacheServiceInfo, root.NodeSwaggerAemOsgi.ApacheSlingHealthCheckResultHTMLSerializerInfo, root.NodeSwaggerAemOsgi.ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo, root.NodeSwaggerAemOsgi.ComAdobeAemTransactionCoreImplTransactionRecorderInfo, root.NodeSwaggerAemOsgi.ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo, root.NodeSwaggerAemOsgi.ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo, root.NodeSwaggerAemOsgi.ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo, root.NodeSwaggerAemOsgi.ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo, root.NodeSwaggerAemOsgi.ComAdobeCqAccountApiAccountManagementServiceInfo, root.NodeSwaggerAemOsgi.ComAdobeCqAccountImplAccountManagementServletInfo, root.NodeSwaggerAemOsgi.ComAdobeCqAddressImplLocationLocationListServletInfo, root.NodeSwaggerAemOsgi.ComAdobeCqAuditPurgeDamInfo, root.NodeSwaggerAemOsgi.ComAdobeCqAuditPurgePagesInfo, root.NodeSwaggerAemOsgi.ComAdobeCqAuditPurgeReplicationInfo, root.NodeSwaggerAemOsgi.ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo, root.NodeSwaggerAemOsgi.ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo, root.NodeSwaggerAemOsgi.ComAdobeCqCdnRewriterImplCDNRewriterInfo, root.NodeSwaggerAemOsgi.ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo, root.NodeSwaggerAemOsgi.ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo, root.NodeSwaggerAemOsgi.ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo, root.NodeSwaggerAemOsgi.ComAdobeCqCommerceImplAssetStaticImageHandlerInfo, root.NodeSwaggerAemOsgi.ComAdobeCqCommerceImplAssetVideoHandlerInfo, root.NodeSwaggerAemOsgi.ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo, root.NodeSwaggerAemOsgi.ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo, root.NodeSwaggerAemOsgi.ComAdobeCqCommercePimImplPageEventListenerInfo, root.NodeSwaggerAemOsgi.ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo, root.NodeSwaggerAemOsgi.ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo, root.NodeSwaggerAemOsgi.ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo, root.NodeSwaggerAemOsgi.ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo, root.NodeSwaggerAemOsgi.ComAdobeCqDamCfmImplComponentComponentConfigImplInfo, root.NodeSwaggerAemOsgi.ComAdobeCqDamCfmImplConfFeatureConfigImplInfo, root.NodeSwaggerAemOsgi.ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo, root.NodeSwaggerAemOsgi.ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo, root.NodeSwaggerAemOsgi.ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo, root.NodeSwaggerAemOsgi.ComAdobeCqDamDmProcessImagePTiffManagerImplInfo, root.NodeSwaggerAemOsgi.ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo, root.NodeSwaggerAemOsgi.ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo, root.NodeSwaggerAemOsgi.ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo, root.NodeSwaggerAemOsgi.ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo, root.NodeSwaggerAemOsgi.ComAdobeCqDamS7imagingImplIsImageServerComponentInfo, root.NodeSwaggerAemOsgi.ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo, root.NodeSwaggerAemOsgi.ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo, root.NodeSwaggerAemOsgi.ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo, root.NodeSwaggerAemOsgi.ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo, root.NodeSwaggerAemOsgi.ComAdobeCqDeserfwImplDeserializationFirewallImplInfo, root.NodeSwaggerAemOsgi.ComAdobeCqDtmImplServiceDTMWebServiceImplInfo, root.NodeSwaggerAemOsgi.ComAdobeCqDtmImplServletsDTMDeployHookServletInfo, root.NodeSwaggerAemOsgi.ComAdobeCqDtmReactorImplServiceWebServiceImplInfo, root.NodeSwaggerAemOsgi.ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo, root.NodeSwaggerAemOsgi.ComAdobeCqHcContentPackagesHealthCheckInfo, root.NodeSwaggerAemOsgi.ComAdobeCqHistoryImplHistoryRequestFilterInfo, root.NodeSwaggerAemOsgi.ComAdobeCqHistoryImplHistoryServiceImplInfo, root.NodeSwaggerAemOsgi.ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo, root.NodeSwaggerAemOsgi.ComAdobeCqProjectsImplServletProjectImageServletInfo, root.NodeSwaggerAemOsgi.ComAdobeCqProjectsPurgeSchedulerInfo, root.NodeSwaggerAemOsgi.ComAdobeCqScheduledExporterImplScheduledExporterImplInfo, root.NodeSwaggerAemOsgi.ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo, root.NodeSwaggerAemOsgi.ComAdobeCqScreensDeviceImplDeviceServiceInfo, root.NodeSwaggerAemOsgi.ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo, root.NodeSwaggerAemOsgi.ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo, root.NodeSwaggerAemOsgi.ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo, root.NodeSwaggerAemOsgi.ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo, root.NodeSwaggerAemOsgi.ComAdobeCqScreensImplScreensChannelPostProcessorInfo, root.NodeSwaggerAemOsgi.ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo, root.NodeSwaggerAemOsgi.ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo, root.NodeSwaggerAemOsgi.ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo, root.NodeSwaggerAemOsgi.ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo, root.NodeSwaggerAemOsgi.ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialCalendarServletsTimeZoneServletInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialGroupImplGroupServiceImplInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialNotificationsImplMentionsRouterInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialNotificationsImplNotificationsRouterInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialScoringImplScoringEventListenerInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialSrpImplSocialSolrConnectorInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialSyncImplDiffChangesObserverInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialSyncImplUserSyncListenerImplInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo, root.NodeSwaggerAemOsgi.ComAdobeCqSocialUserImplTransportHttpToPublisherInfo, root.NodeSwaggerAemOsgi.ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo, root.NodeSwaggerAemOsgi.ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo, root.NodeSwaggerAemOsgi.ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo, root.NodeSwaggerAemOsgi.ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo, root.NodeSwaggerAemOsgi.ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo, root.NodeSwaggerAemOsgi.ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo, root.NodeSwaggerAemOsgi.ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo, root.NodeSwaggerAemOsgi.ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo, root.NodeSwaggerAemOsgi.ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo, root.NodeSwaggerAemOsgi.ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo, root.NodeSwaggerAemOsgi.ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo, root.NodeSwaggerAemOsgi.ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo, root.NodeSwaggerAemOsgi.ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo, root.NodeSwaggerAemOsgi.ComAdobeFormsCommonServiceImplDefaultDataProviderInfo, root.NodeSwaggerAemOsgi.ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo, root.NodeSwaggerAemOsgi.ComAdobeFormsCommonServletTempCleanUpTaskInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteAcpPlatformPlatformServletInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteAuthImsImplIMSProviderImplInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteAuthImsInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteAuthOauthAccesstokenProviderInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteAuthOauthImplGithubProviderImplInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteAuthOauthImplGraniteProviderInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteAuthOauthProviderInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteCompatrouterImplRoutingConfigInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteContexthubImplContextHubImplInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteCorsImplCORSPolicyImplInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteCsrfImplCSRFFilterInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteCsrfImplCSRFServletInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteFragsImplRandomFeatureInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteHttpcacheFileFileCacheStoreInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteInfocollectorInfoCollectorInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteLicenseImplLicenseCheckFilterInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteLoggingImplLogAnalyserImplInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteMonitoringImplScriptConfigImplInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteOptoutImplOptOutServiceImplInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteRepositoryImplCommitStatsConfigInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteRepositoryServiceUserConfigurationInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteRestImplServletDefaultGETServletInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteSecurityUserUserPropertiesServiceInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteThreaddumpThreadDumpCollectorInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteWorkflowCoreJobJobHandlerInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteWorkflowCorePayloadMapCacheInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteWorkflowCoreWorkflowConfigInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo, root.NodeSwaggerAemOsgi.ComAdobeGraniteWorkflowPurgeSchedulerInfo, root.NodeSwaggerAemOsgi.ComAdobeOctopusNcommBootstrapInfo, root.NodeSwaggerAemOsgi.ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo, root.NodeSwaggerAemOsgi.ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo, root.NodeSwaggerAemOsgi.ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo, root.NodeSwaggerAemOsgi.ComDayCommonsHttpclientInfo, root.NodeSwaggerAemOsgi.ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo, root.NodeSwaggerAemOsgi.ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo, root.NodeSwaggerAemOsgi.ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo, root.NodeSwaggerAemOsgi.ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo, root.NodeSwaggerAemOsgi.ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo, root.NodeSwaggerAemOsgi.ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo, root.NodeSwaggerAemOsgi.ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo, root.NodeSwaggerAemOsgi.ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo, root.NodeSwaggerAemOsgi.ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo, root.NodeSwaggerAemOsgi.ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo, root.NodeSwaggerAemOsgi.ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo, root.NodeSwaggerAemOsgi.ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo, root.NodeSwaggerAemOsgi.ComDayCqAuthImplCugCugSupportImplInfo, root.NodeSwaggerAemOsgi.ComDayCqAuthImplLoginSelectorHandlerInfo, root.NodeSwaggerAemOsgi.ComDayCqCommonsImplExternalizerImplInfo, root.NodeSwaggerAemOsgi.ComDayCqCommonsServletsRootMappingServletInfo, root.NodeSwaggerAemOsgi.ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo, root.NodeSwaggerAemOsgi.ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo, root.NodeSwaggerAemOsgi.ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo, root.NodeSwaggerAemOsgi.ComDayCqContentsyncImplContentSyncManagerImplInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCommonsHandlerStandardImageHandlerInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCommonsUtilImplAssetCacheImplInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCoreImplAssetMoveListenerInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCoreImplDamChangeEventListenerInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCoreImplDamEventPurgeServiceInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCoreImplDamEventRecorderImplInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCoreImplEventDamEventAuditListenerInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCoreImplExpiryNotificationJobImplInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCoreImplGfxCommonsGfxRendererInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCoreImplHandlerJpegHandlerInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCoreImplLightboxLightboxServletInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCoreImplMissingMetadataNotificationJobInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCoreImplProcessTextExtractionProcessInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCoreImplRenditionMakerImplInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCoreImplReportsReportExportServiceInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCoreImplReportsReportPurgeServiceInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCoreImplServletAssetDownloadServletInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCoreImplServletAssetStatusServletInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCoreImplServletAssetXMPSearchServletInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCoreImplServletBatchMetadataServletInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCoreImplServletBinaryProviderServletInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCoreImplServletCollectionServletInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCoreImplServletCollectionsServletInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCoreImplServletCompanionServletInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCoreImplServletCreateAssetServletInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCoreImplServletDamContentDispositionFilterInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCoreImplServletGuidLookupFilterInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCoreImplServletHealthCheckServletInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCoreImplServletMetadataGetServletInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCoreImplServletResourceCollectionServletInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCoreImplUnzipUnzipConfigInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCoreProcessExtractMetadataProcessInfo, root.NodeSwaggerAemOsgi.ComDayCqDamCoreProcessMetadataProcessorProcessInfo, root.NodeSwaggerAemOsgi.ComDayCqDamHandlerFfmpegLocatorImplInfo, root.NodeSwaggerAemOsgi.ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo, root.NodeSwaggerAemOsgi.ComDayCqDamHandlerStandardPdfPdfHandlerInfo, root.NodeSwaggerAemOsgi.ComDayCqDamHandlerStandardPsPostScriptHandlerInfo, root.NodeSwaggerAemOsgi.ComDayCqDamHandlerStandardPsdPsdHandlerInfo, root.NodeSwaggerAemOsgi.ComDayCqDamIdsImplIDSJobProcessorInfo, root.NodeSwaggerAemOsgi.ComDayCqDamIdsImplIDSPoolManagerImplInfo, root.NodeSwaggerAemOsgi.ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo, root.NodeSwaggerAemOsgi.ComDayCqDamInddImplServletSnippetCreationServletInfo, root.NodeSwaggerAemOsgi.ComDayCqDamInddProcessINDDMediaExtractProcessInfo, root.NodeSwaggerAemOsgi.ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo, root.NodeSwaggerAemOsgi.ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo, root.NodeSwaggerAemOsgi.ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo, root.NodeSwaggerAemOsgi.ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo, root.NodeSwaggerAemOsgi.ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo, root.NodeSwaggerAemOsgi.ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo, root.NodeSwaggerAemOsgi.ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo, root.NodeSwaggerAemOsgi.ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo, root.NodeSwaggerAemOsgi.ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo, root.NodeSwaggerAemOsgi.ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo, root.NodeSwaggerAemOsgi.ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo, root.NodeSwaggerAemOsgi.ComDayCqDamScene7ImplScene7APIClientImplInfo, root.NodeSwaggerAemOsgi.ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo, root.NodeSwaggerAemOsgi.ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo, root.NodeSwaggerAemOsgi.ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo, root.NodeSwaggerAemOsgi.ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo, root.NodeSwaggerAemOsgi.ComDayCqDamScene7ImplScene7UploadServiceImplInfo, root.NodeSwaggerAemOsgi.ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo, root.NodeSwaggerAemOsgi.ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo, root.NodeSwaggerAemOsgi.ComDayCqDamVideoImplServletVideoTestServletInfo, root.NodeSwaggerAemOsgi.ComDayCqExtwidgetServletsImageSpriteServletInfo, root.NodeSwaggerAemOsgi.ComDayCqImageInternalFontFontHelperInfo, root.NodeSwaggerAemOsgi.ComDayCqJcrclustersupportClusterStartLevelControllerInfo, root.NodeSwaggerAemOsgi.ComDayCqMailerDefaultMailServiceInfo, root.NodeSwaggerAemOsgi.ComDayCqMailerImplCqMailingServiceInfo, root.NodeSwaggerAemOsgi.ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo, root.NodeSwaggerAemOsgi.ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo, root.NodeSwaggerAemOsgi.ComDayCqMcmCampaignImplIntegrationConfigImplInfo, root.NodeSwaggerAemOsgi.ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo, root.NodeSwaggerAemOsgi.ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo, root.NodeSwaggerAemOsgi.ComDayCqMcmImplMCMConfigurationInfo, root.NodeSwaggerAemOsgi.ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo, root.NodeSwaggerAemOsgi.ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo, root.NodeSwaggerAemOsgi.ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo, root.NodeSwaggerAemOsgi.ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo, root.NodeSwaggerAemOsgi.ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo, root.NodeSwaggerAemOsgi.ComDayCqNotificationImplNotificationServiceImplInfo, root.NodeSwaggerAemOsgi.ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo, root.NodeSwaggerAemOsgi.ComDayCqPollingImporterImplManagedPollConfigImplInfo, root.NodeSwaggerAemOsgi.ComDayCqPollingImporterImplManagedPollingImporterImplInfo, root.NodeSwaggerAemOsgi.ComDayCqPollingImporterImplPollingImporterImplInfo, root.NodeSwaggerAemOsgi.ComDayCqReplicationAuditReplicationEventListenerInfo, root.NodeSwaggerAemOsgi.ComDayCqReplicationContentStaticContentBuilderInfo, root.NodeSwaggerAemOsgi.ComDayCqReplicationImplAgentManagerImplInfo, root.NodeSwaggerAemOsgi.ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo, root.NodeSwaggerAemOsgi.ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo, root.NodeSwaggerAemOsgi.ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo, root.NodeSwaggerAemOsgi.ComDayCqReplicationImplReplicationReceiverImplInfo, root.NodeSwaggerAemOsgi.ComDayCqReplicationImplReplicatorImplInfo, root.NodeSwaggerAemOsgi.ComDayCqReplicationImplReverseReplicatorInfo, root.NodeSwaggerAemOsgi.ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo, root.NodeSwaggerAemOsgi.ComDayCqReplicationImplTransportHttpInfo, root.NodeSwaggerAemOsgi.ComDayCqReportingImplCacheCacheImplInfo, root.NodeSwaggerAemOsgi.ComDayCqReportingImplConfigServiceImplInfo, root.NodeSwaggerAemOsgi.ComDayCqReportingImplRLogAnalyzerInfo, root.NodeSwaggerAemOsgi.ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo, root.NodeSwaggerAemOsgi.ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo, root.NodeSwaggerAemOsgi.ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo, root.NodeSwaggerAemOsgi.ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo, root.NodeSwaggerAemOsgi.ComDayCqRewriterProcessorImplHtmlParserFactoryInfo, root.NodeSwaggerAemOsgi.ComDayCqSearchImplBuilderQueryBuilderImplInfo, root.NodeSwaggerAemOsgi.ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo, root.NodeSwaggerAemOsgi.ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo, root.NodeSwaggerAemOsgi.ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo, root.NodeSwaggerAemOsgi.ComDayCqSecurityACLSetupInfo, root.NodeSwaggerAemOsgi.ComDayCqStatisticsImplStatisticsServiceImplInfo, root.NodeSwaggerAemOsgi.ComDayCqTaggingImplJcrTagManagerFactoryImplInfo, root.NodeSwaggerAemOsgi.ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo, root.NodeSwaggerAemOsgi.ComDayCqTaggingImplTagGarbageCollectorInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmCoreImplCommandsWCMCommandServletInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmCoreImplEventPageEventAuditListenerInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmCoreImplEventPagePostProcessorInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmCoreImplEventTemplatePostProcessorInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmCoreImplLanguageManagerImplInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmCoreImplServletsFindReplaceServletInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmCoreImplServletsReferenceSearchServletInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmCoreImplServletsThumbnailServletInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmCoreImplVersionManagerImplInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmCoreImplVersionPurgeTaskInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmCoreImplWCMDebugFilterInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmCoreImplWarpTimeWarpFilterInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmCoreMvtMVTStatisticsImplInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmCoreStatsPageViewStatisticsImplInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmCoreWCMRequestFilterInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmDesignimporterDesignPackageImporterInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmFoundationFormsImplFormChooserServletInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmFoundationFormsImplMailServletInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmFoundationImplHTTPAuthHandlerInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmFoundationImplPageImpressionsTrackerInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmFoundationImplPageRedirectServletInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmMsmImplRolloutManagerImplInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmMsmImplServletsAuditLogServletInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmNotificationEmailImplEmailChannelInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmNotificationImplNotificationManagerImplInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmScriptingImplBVPManagerInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmUndoUndoConfigInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo, root.NodeSwaggerAemOsgi.ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo, root.NodeSwaggerAemOsgi.ComDayCqWidgetImplHtmlLibraryManagerImplInfo, root.NodeSwaggerAemOsgi.ComDayCqWidgetImplWidgetExtensionProviderImplInfo, root.NodeSwaggerAemOsgi.ComDayCqWorkflowImplEmailEMailNotificationServiceInfo, root.NodeSwaggerAemOsgi.ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo, root.NodeSwaggerAemOsgi.ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo, root.NodeSwaggerAemOsgi.ComDayCrxSecurityTokenImplTokenCleanupTaskInfo, root.NodeSwaggerAemOsgi.GuideLocalizationServiceInfo, root.NodeSwaggerAemOsgi.MessagingUserComponentFactoryInfo, root.NodeSwaggerAemOsgi.OrgApacheAriesJmxFrameworkStateConfigInfo, root.NodeSwaggerAemOsgi.OrgApacheFelixEventadminImplEventAdminInfo, root.NodeSwaggerAemOsgi.OrgApacheFelixHttpInfo, root.NodeSwaggerAemOsgi.OrgApacheFelixHttpSslfilterSslFilterInfo, root.NodeSwaggerAemOsgi.OrgApacheFelixJaasConfigurationFactoryInfo, root.NodeSwaggerAemOsgi.OrgApacheFelixJaasConfigurationSpiInfo, root.NodeSwaggerAemOsgi.OrgApacheFelixScrScrServiceInfo, root.NodeSwaggerAemOsgi.OrgApacheFelixSystemreadyImplComponentsCheckInfo, root.NodeSwaggerAemOsgi.OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo, root.NodeSwaggerAemOsgi.OrgApacheFelixSystemreadyImplServicesCheckInfo, root.NodeSwaggerAemOsgi.OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo, root.NodeSwaggerAemOsgi.OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo, root.NodeSwaggerAemOsgi.OrgApacheFelixSystemreadySystemReadyMonitorInfo, root.NodeSwaggerAemOsgi.OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo, root.NodeSwaggerAemOsgi.OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo, root.NodeSwaggerAemOsgi.OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo, root.NodeSwaggerAemOsgi.OrgApacheHttpProxyconfiguratorInfo, root.NodeSwaggerAemOsgi.OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo, root.NodeSwaggerAemOsgi.OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo, root.NodeSwaggerAemOsgi.OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo, root.NodeSwaggerAemOsgi.OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo, root.NodeSwaggerAemOsgi.OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo, root.NodeSwaggerAemOsgi.OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo, root.NodeSwaggerAemOsgi.OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo, root.NodeSwaggerAemOsgi.OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo, root.NodeSwaggerAemOsgi.OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo, root.NodeSwaggerAemOsgi.OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo, root.NodeSwaggerAemOsgi.OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo, root.NodeSwaggerAemOsgi.OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo, root.NodeSwaggerAemOsgi.OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo, root.NodeSwaggerAemOsgi.OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo, root.NodeSwaggerAemOsgi.OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo, root.NodeSwaggerAemOsgi.OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo, root.NodeSwaggerAemOsgi.OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo, root.NodeSwaggerAemOsgi.OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo, root.NodeSwaggerAemOsgi.OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo, root.NodeSwaggerAemOsgi.OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo, root.NodeSwaggerAemOsgi.OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo, root.NodeSwaggerAemOsgi.OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo, root.NodeSwaggerAemOsgi.OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo, root.NodeSwaggerAemOsgi.OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo, root.NodeSwaggerAemOsgi.OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo, root.NodeSwaggerAemOsgi.OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo, root.NodeSwaggerAemOsgi.OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo, root.NodeSwaggerAemOsgi.OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo, root.NodeSwaggerAemOsgi.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo, root.NodeSwaggerAemOsgi.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo, root.NodeSwaggerAemOsgi.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo, root.NodeSwaggerAemOsgi.OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo, root.NodeSwaggerAemOsgi.OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo, root.NodeSwaggerAemOsgi.OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo, root.NodeSwaggerAemOsgi.OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo, root.NodeSwaggerAemOsgi.OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingAuthCoreImplLogoutServletInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingCaconfigImplConfigurationResolverImplInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingCommonsLogLogManagerInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingCommonsMetricsInternalLogReporterInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingDatasourceDataSourceFactoryInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingDiscoveryOakConfigInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingEngineImplLogRequestLoggerInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingEngineImplLogRequestLoggerServiceInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingEngineImplSlingMainServletInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingEngineParametersInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingEventImplEventingThreadPoolInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingEventImplJobsDefaultJobManagerInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingEventImplJobsJobConsumerManagerInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingEventJobsQueueConfigurationInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingFeatureflagsFeatureInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingHapiImplHApiUtilImplInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingHcCoreImplCompositeHealthCheckInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingHcCoreImplScriptableHealthCheckInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingI18nImplI18NFilterInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingI18nImplJcrResourceBundleProviderInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingJcrRepoinitRepositoryInitializerInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingJmxProviderImplJMXResourceProviderInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingModelsImplModelAdapterFactoryInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingResourcemergerPickerOverridingInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingScriptingCoreImplScriptCacheImplInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingSecurityImplContentDispositionFilterInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingSecurityImplReferrerFilterInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingServletsGetDefaultGetServletInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingServletsPostImplSlingPostServletInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingServletsResolverSlingServletResolverInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingStartupfilterImplStartupFilterImplInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingTenantInternalTenantProviderImplInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingTracerInternalLogTracerInfo, root.NodeSwaggerAemOsgi.OrgApacheSlingXssImplXSSFilterImplInfo);
  }
}(this, function(ApiClient, AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo, AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo, AnalyticsComponentQueryCacheServiceInfo, ApacheSlingHealthCheckResultHTMLSerializerInfo, ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo, ComAdobeAemTransactionCoreImplTransactionRecorderInfo, ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo, ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo, ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo, ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo, ComAdobeCqAccountApiAccountManagementServiceInfo, ComAdobeCqAccountImplAccountManagementServletInfo, ComAdobeCqAddressImplLocationLocationListServletInfo, ComAdobeCqAuditPurgeDamInfo, ComAdobeCqAuditPurgePagesInfo, ComAdobeCqAuditPurgeReplicationInfo, ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo, ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo, ComAdobeCqCdnRewriterImplCDNRewriterInfo, ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo, ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo, ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo, ComAdobeCqCommerceImplAssetStaticImageHandlerInfo, ComAdobeCqCommerceImplAssetVideoHandlerInfo, ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo, ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo, ComAdobeCqCommercePimImplPageEventListenerInfo, ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo, ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo, ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo, ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo, ComAdobeCqDamCfmImplComponentComponentConfigImplInfo, ComAdobeCqDamCfmImplConfFeatureConfigImplInfo, ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo, ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo, ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo, ComAdobeCqDamDmProcessImagePTiffManagerImplInfo, ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo, ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo, ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo, ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo, ComAdobeCqDamS7imagingImplIsImageServerComponentInfo, ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo, ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo, ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo, ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo, ComAdobeCqDeserfwImplDeserializationFirewallImplInfo, ComAdobeCqDtmImplServiceDTMWebServiceImplInfo, ComAdobeCqDtmImplServletsDTMDeployHookServletInfo, ComAdobeCqDtmReactorImplServiceWebServiceImplInfo, ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo, ComAdobeCqHcContentPackagesHealthCheckInfo, ComAdobeCqHistoryImplHistoryRequestFilterInfo, ComAdobeCqHistoryImplHistoryServiceImplInfo, ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo, ComAdobeCqProjectsImplServletProjectImageServletInfo, ComAdobeCqProjectsPurgeSchedulerInfo, ComAdobeCqScheduledExporterImplScheduledExporterImplInfo, ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo, ComAdobeCqScreensDeviceImplDeviceServiceInfo, ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo, ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo, ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo, ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo, ComAdobeCqScreensImplScreensChannelPostProcessorInfo, ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo, ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo, ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo, ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo, ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo, ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo, ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo, ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo, ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo, ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo, ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo, ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo, ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo, ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo, ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo, ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo, ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo, ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo, ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo, ComAdobeCqSocialCalendarServletsTimeZoneServletInfo, ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo, ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo, ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo, ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo, ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo, ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo, ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo, ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo, ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo, ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo, ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo, ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo, ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo, ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo, ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo, ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo, ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo, ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo, ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo, ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo, ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo, ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo, ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo, ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo, ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo, ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo, ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo, ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo, ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo, ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo, ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo, ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo, ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo, ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo, ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo, ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo, ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo, ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo, ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo, ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo, ComAdobeCqSocialGroupImplGroupServiceImplInfo, ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo, ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo, ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo, ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo, ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo, ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo, ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo, ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo, ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo, ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo, ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo, ComAdobeCqSocialNotificationsImplMentionsRouterInfo, ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo, ComAdobeCqSocialNotificationsImplNotificationsRouterInfo, ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo, ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo, ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo, ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo, ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo, ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo, ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo, ComAdobeCqSocialScoringImplScoringEventListenerInfo, ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo, ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo, ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo, ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo, ComAdobeCqSocialSrpImplSocialSolrConnectorInfo, ComAdobeCqSocialSyncImplDiffChangesObserverInfo, ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo, ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo, ComAdobeCqSocialSyncImplUserSyncListenerImplInfo, ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo, ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo, ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo, ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo, ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo, ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo, ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo, ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo, ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo, ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo, ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo, ComAdobeCqSocialUserImplTransportHttpToPublisherInfo, ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo, ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo, ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo, ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo, ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo, ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo, ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo, ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo, ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo, ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo, ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo, ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo, ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo, ComAdobeFormsCommonServiceImplDefaultDataProviderInfo, ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo, ComAdobeFormsCommonServletTempCleanUpTaskInfo, ComAdobeGraniteAcpPlatformPlatformServletInfo, ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo, ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo, ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo, ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo, ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo, ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo, ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo, ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo, ComAdobeGraniteAuthImsImplIMSProviderImplInfo, ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo, ComAdobeGraniteAuthImsInfo, ComAdobeGraniteAuthOauthAccesstokenProviderInfo, ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo, ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo, ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo, ComAdobeGraniteAuthOauthImplGithubProviderImplInfo, ComAdobeGraniteAuthOauthImplGraniteProviderInfo, ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo, ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo, ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo, ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo, ComAdobeGraniteAuthOauthProviderInfo, ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo, ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo, ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo, ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo, ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo, ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo, ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo, ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo, ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo, ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo, ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo, ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo, ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo, ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo, ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo, ComAdobeGraniteCompatrouterImplRoutingConfigInfo, ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo, ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo, ComAdobeGraniteContexthubImplContextHubImplInfo, ComAdobeGraniteCorsImplCORSPolicyImplInfo, ComAdobeGraniteCsrfImplCSRFFilterInfo, ComAdobeGraniteCsrfImplCSRFServletInfo, ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo, ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo, ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo, ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo, ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo, ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo, ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo, ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo, ComAdobeGraniteFragsImplRandomFeatureInfo, ComAdobeGraniteHttpcacheFileFileCacheStoreInfo, ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo, ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo, ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo, ComAdobeGraniteInfocollectorInfoCollectorInfo, ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo, ComAdobeGraniteLicenseImplLicenseCheckFilterInfo, ComAdobeGraniteLoggingImplLogAnalyserImplInfo, ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo, ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo, ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo, ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo, ComAdobeGraniteMonitoringImplScriptConfigImplInfo, ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo, ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo, ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo, ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo, ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo, ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo, ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo, ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo, ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo, ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo, ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo, ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo, ComAdobeGraniteOptoutImplOptOutServiceImplInfo, ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo, ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo, ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo, ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo, ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo, ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo, ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo, ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo, ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo, ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo, ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo, ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo, ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo, ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo, ComAdobeGraniteRepositoryImplCommitStatsConfigInfo, ComAdobeGraniteRepositoryServiceUserConfigurationInfo, ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo, ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo, ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo, ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo, ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo, ComAdobeGraniteRestImplServletDefaultGETServletInfo, ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo, ComAdobeGraniteSecurityUserUserPropertiesServiceInfo, ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo, ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo, ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo, ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo, ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo, ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo, ComAdobeGraniteThreaddumpThreadDumpCollectorInfo, ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo, ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo, ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo, ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo, ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo, ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo, ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo, ComAdobeGraniteWorkflowCoreJobJobHandlerInfo, ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo, ComAdobeGraniteWorkflowCorePayloadMapCacheInfo, ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo, ComAdobeGraniteWorkflowCoreWorkflowConfigInfo, ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo, ComAdobeGraniteWorkflowPurgeSchedulerInfo, ComAdobeOctopusNcommBootstrapInfo, ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo, ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo, ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo, ComDayCommonsHttpclientInfo, ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo, ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo, ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo, ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo, ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo, ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo, ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo, ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo, ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo, ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo, ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo, ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo, ComDayCqAuthImplCugCugSupportImplInfo, ComDayCqAuthImplLoginSelectorHandlerInfo, ComDayCqCommonsImplExternalizerImplInfo, ComDayCqCommonsServletsRootMappingServletInfo, ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo, ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo, ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo, ComDayCqContentsyncImplContentSyncManagerImplInfo, ComDayCqDamCommonsHandlerStandardImageHandlerInfo, ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo, ComDayCqDamCommonsUtilImplAssetCacheImplInfo, ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo, ComDayCqDamCoreImplAssetMoveListenerInfo, ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo, ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo, ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo, ComDayCqDamCoreImplDamChangeEventListenerInfo, ComDayCqDamCoreImplDamEventPurgeServiceInfo, ComDayCqDamCoreImplDamEventRecorderImplInfo, ComDayCqDamCoreImplEventDamEventAuditListenerInfo, ComDayCqDamCoreImplExpiryNotificationJobImplInfo, ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo, ComDayCqDamCoreImplGfxCommonsGfxRendererInfo, ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo, ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo, ComDayCqDamCoreImplHandlerJpegHandlerInfo, ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo, ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo, ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo, ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo, ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo, ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo, ComDayCqDamCoreImplLightboxLightboxServletInfo, ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo, ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo, ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo, ComDayCqDamCoreImplMissingMetadataNotificationJobInfo, ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo, ComDayCqDamCoreImplProcessTextExtractionProcessInfo, ComDayCqDamCoreImplRenditionMakerImplInfo, ComDayCqDamCoreImplReportsReportExportServiceInfo, ComDayCqDamCoreImplReportsReportPurgeServiceInfo, ComDayCqDamCoreImplServletAssetDownloadServletInfo, ComDayCqDamCoreImplServletAssetStatusServletInfo, ComDayCqDamCoreImplServletAssetXMPSearchServletInfo, ComDayCqDamCoreImplServletBatchMetadataServletInfo, ComDayCqDamCoreImplServletBinaryProviderServletInfo, ComDayCqDamCoreImplServletCollectionServletInfo, ComDayCqDamCoreImplServletCollectionsServletInfo, ComDayCqDamCoreImplServletCompanionServletInfo, ComDayCqDamCoreImplServletCreateAssetServletInfo, ComDayCqDamCoreImplServletDamContentDispositionFilterInfo, ComDayCqDamCoreImplServletGuidLookupFilterInfo, ComDayCqDamCoreImplServletHealthCheckServletInfo, ComDayCqDamCoreImplServletMetadataGetServletInfo, ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo, ComDayCqDamCoreImplServletResourceCollectionServletInfo, ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo, ComDayCqDamCoreImplUnzipUnzipConfigInfo, ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo, ComDayCqDamCoreProcessExtractMetadataProcessInfo, ComDayCqDamCoreProcessMetadataProcessorProcessInfo, ComDayCqDamHandlerFfmpegLocatorImplInfo, ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo, ComDayCqDamHandlerStandardPdfPdfHandlerInfo, ComDayCqDamHandlerStandardPsPostScriptHandlerInfo, ComDayCqDamHandlerStandardPsdPsdHandlerInfo, ComDayCqDamIdsImplIDSJobProcessorInfo, ComDayCqDamIdsImplIDSPoolManagerImplInfo, ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo, ComDayCqDamInddImplServletSnippetCreationServletInfo, ComDayCqDamInddProcessINDDMediaExtractProcessInfo, ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo, ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo, ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo, ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo, ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo, ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo, ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo, ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo, ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo, ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo, ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo, ComDayCqDamScene7ImplScene7APIClientImplInfo, ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo, ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo, ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo, ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo, ComDayCqDamScene7ImplScene7UploadServiceImplInfo, ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo, ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo, ComDayCqDamVideoImplServletVideoTestServletInfo, ComDayCqExtwidgetServletsImageSpriteServletInfo, ComDayCqImageInternalFontFontHelperInfo, ComDayCqJcrclustersupportClusterStartLevelControllerInfo, ComDayCqMailerDefaultMailServiceInfo, ComDayCqMailerImplCqMailingServiceInfo, ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo, ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo, ComDayCqMcmCampaignImplIntegrationConfigImplInfo, ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo, ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo, ComDayCqMcmImplMCMConfigurationInfo, ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo, ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo, ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo, ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo, ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo, ComDayCqNotificationImplNotificationServiceImplInfo, ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo, ComDayCqPollingImporterImplManagedPollConfigImplInfo, ComDayCqPollingImporterImplManagedPollingImporterImplInfo, ComDayCqPollingImporterImplPollingImporterImplInfo, ComDayCqReplicationAuditReplicationEventListenerInfo, ComDayCqReplicationContentStaticContentBuilderInfo, ComDayCqReplicationImplAgentManagerImplInfo, ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo, ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo, ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo, ComDayCqReplicationImplReplicationReceiverImplInfo, ComDayCqReplicationImplReplicatorImplInfo, ComDayCqReplicationImplReverseReplicatorInfo, ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo, ComDayCqReplicationImplTransportHttpInfo, ComDayCqReportingImplCacheCacheImplInfo, ComDayCqReportingImplConfigServiceImplInfo, ComDayCqReportingImplRLogAnalyzerInfo, ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo, ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo, ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo, ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo, ComDayCqRewriterProcessorImplHtmlParserFactoryInfo, ComDayCqSearchImplBuilderQueryBuilderImplInfo, ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo, ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo, ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo, ComDayCqSecurityACLSetupInfo, ComDayCqStatisticsImplStatisticsServiceImplInfo, ComDayCqTaggingImplJcrTagManagerFactoryImplInfo, ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo, ComDayCqTaggingImplTagGarbageCollectorInfo, ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo, ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo, ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo, ComDayCqWcmCoreImplCommandsWCMCommandServletInfo, ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo, ComDayCqWcmCoreImplEventPageEventAuditListenerInfo, ComDayCqWcmCoreImplEventPagePostProcessorInfo, ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo, ComDayCqWcmCoreImplEventTemplatePostProcessorInfo, ComDayCqWcmCoreImplLanguageManagerImplInfo, ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo, ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo, ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo, ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo, ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo, ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo, ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo, ComDayCqWcmCoreImplServletsFindReplaceServletInfo, ComDayCqWcmCoreImplServletsReferenceSearchServletInfo, ComDayCqWcmCoreImplServletsThumbnailServletInfo, ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo, ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo, ComDayCqWcmCoreImplVersionManagerImplInfo, ComDayCqWcmCoreImplVersionPurgeTaskInfo, ComDayCqWcmCoreImplWCMDebugFilterInfo, ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo, ComDayCqWcmCoreImplWarpTimeWarpFilterInfo, ComDayCqWcmCoreMvtMVTStatisticsImplInfo, ComDayCqWcmCoreStatsPageViewStatisticsImplInfo, ComDayCqWcmCoreWCMRequestFilterInfo, ComDayCqWcmDesignimporterDesignPackageImporterInfo, ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo, ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo, ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo, ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo, ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo, ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo, ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo, ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo, ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo, ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo, ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo, ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo, ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo, ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo, ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo, ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo, ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo, ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo, ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo, ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo, ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo, ComDayCqWcmFoundationFormsImplFormChooserServletInfo, ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo, ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo, ComDayCqWcmFoundationFormsImplMailServletInfo, ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo, ComDayCqWcmFoundationImplHTTPAuthHandlerInfo, ComDayCqWcmFoundationImplPageImpressionsTrackerInfo, ComDayCqWcmFoundationImplPageRedirectServletInfo, ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo, ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo, ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo, ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo, ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo, ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo, ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo, ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo, ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo, ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo, ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo, ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo, ComDayCqWcmMsmImplRolloutManagerImplInfo, ComDayCqWcmMsmImplServletsAuditLogServletInfo, ComDayCqWcmNotificationEmailImplEmailChannelInfo, ComDayCqWcmNotificationImplNotificationManagerImplInfo, ComDayCqWcmScriptingImplBVPManagerInfo, ComDayCqWcmUndoUndoConfigInfo, ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo, ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo, ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo, ComDayCqWidgetImplHtmlLibraryManagerImplInfo, ComDayCqWidgetImplWidgetExtensionProviderImplInfo, ComDayCqWorkflowImplEmailEMailNotificationServiceInfo, ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo, ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo, ComDayCrxSecurityTokenImplTokenCleanupTaskInfo, GuideLocalizationServiceInfo, MessagingUserComponentFactoryInfo, OrgApacheAriesJmxFrameworkStateConfigInfo, OrgApacheFelixEventadminImplEventAdminInfo, OrgApacheFelixHttpInfo, OrgApacheFelixHttpSslfilterSslFilterInfo, OrgApacheFelixJaasConfigurationFactoryInfo, OrgApacheFelixJaasConfigurationSpiInfo, OrgApacheFelixScrScrServiceInfo, OrgApacheFelixSystemreadyImplComponentsCheckInfo, OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo, OrgApacheFelixSystemreadyImplServicesCheckInfo, OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo, OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo, OrgApacheFelixSystemreadySystemReadyMonitorInfo, OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo, OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo, OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo, OrgApacheHttpProxyconfiguratorInfo, OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo, OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo, OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo, OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo, OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo, OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo, OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo, OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo, OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo, OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo, OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo, OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo, OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo, OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo, OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo, OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo, OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo, OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo, OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo, OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo, OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo, OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo, OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo, OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo, OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo, OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo, OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo, OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo, OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo, OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo, OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo, OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo, OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo, OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo, OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo, OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo, OrgApacheSlingAuthCoreImplLogoutServletInfo, OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo, OrgApacheSlingCaconfigImplConfigurationResolverImplInfo, OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo, OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo, OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo, OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo, OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo, OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo, OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo, OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo, OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo, OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo, OrgApacheSlingCommonsLogLogManagerInfo, OrgApacheSlingCommonsMetricsInternalLogReporterInfo, OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo, OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo, OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo, OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo, OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo, OrgApacheSlingDatasourceDataSourceFactoryInfo, OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo, OrgApacheSlingDiscoveryOakConfigInfo, OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo, OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo, OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo, OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo, OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo, OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo, OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo, OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo, OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo, OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo, OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo, OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo, OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo, OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo, OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo, OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo, OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo, OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo, OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo, OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo, OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo, OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo, OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo, OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo, OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo, OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo, OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo, OrgApacheSlingEngineImplLogRequestLoggerInfo, OrgApacheSlingEngineImplLogRequestLoggerServiceInfo, OrgApacheSlingEngineImplSlingMainServletInfo, OrgApacheSlingEngineParametersInfo, OrgApacheSlingEventImplEventingThreadPoolInfo, OrgApacheSlingEventImplJobsDefaultJobManagerInfo, OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo, OrgApacheSlingEventImplJobsJobConsumerManagerInfo, OrgApacheSlingEventJobsQueueConfigurationInfo, OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo, OrgApacheSlingFeatureflagsFeatureInfo, OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo, OrgApacheSlingHapiImplHApiUtilImplInfo, OrgApacheSlingHcCoreImplCompositeHealthCheckInfo, OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo, OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo, OrgApacheSlingHcCoreImplScriptableHealthCheckInfo, OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo, OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo, OrgApacheSlingI18nImplI18NFilterInfo, OrgApacheSlingI18nImplJcrResourceBundleProviderInfo, OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo, OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo, OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo, OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo, OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo, OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo, OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo, OrgApacheSlingJcrRepoinitRepositoryInitializerInfo, OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo, OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo, OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo, OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo, OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo, OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo, OrgApacheSlingJmxProviderImplJMXResourceProviderInfo, OrgApacheSlingModelsImplModelAdapterFactoryInfo, OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo, OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo, OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo, OrgApacheSlingResourcemergerPickerOverridingInfo, OrgApacheSlingScriptingCoreImplScriptCacheImplInfo, OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo, OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo, OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo, OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo, OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo, OrgApacheSlingSecurityImplContentDispositionFilterInfo, OrgApacheSlingSecurityImplReferrerFilterInfo, OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo, OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo, OrgApacheSlingServletsGetDefaultGetServletInfo, OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo, OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo, OrgApacheSlingServletsPostImplSlingPostServletInfo, OrgApacheSlingServletsResolverSlingServletResolverInfo, OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo, OrgApacheSlingStartupfilterImplStartupFilterImplInfo, OrgApacheSlingTenantInternalTenantProviderImplInfo, OrgApacheSlingTracerInternalLogTracerInfo, OrgApacheSlingXssImplXSSFilterImplInfo) {
  'use strict';

  /**
   * Configmgr service.
   * @module api/ConfigmgrApi
   * @version 1.0.0
   */

  /**
   * Constructs a new ConfigmgrApi. 
   * @alias module:api/ConfigmgrApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the adaptiveFormAndInteractiveCommunicationWebChannelConfiguration operation.
     * @callback module:api/ConfigmgrApi~adaptiveFormAndInteractiveCommunicationWebChannelConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.showPlaceholder 
     * @param {Number} opts.maximumCacheEntries 
     * @param {String} opts.afScriptingCompatversion 
     * @param {Boolean} opts.makeFileNameUnique 
     * @param {Boolean} opts.generatingCompliantData 
     * @param {module:api/ConfigmgrApi~adaptiveFormAndInteractiveCommunicationWebChannelConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo}
     */
    this.adaptiveFormAndInteractiveCommunicationWebChannelConfiguration = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'showPlaceholder': opts['showPlaceholder'],
        'maximumCacheEntries': opts['maximumCacheEntries'],
        'af.scripting.compatversion': opts['afScriptingCompatversion'],
        'makeFileNameUnique': opts['makeFileNameUnique'],
        'generatingCompliantData': opts['generatingCompliantData'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Configuration', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur operation.
     * @callback module:api/ConfigmgrApi~adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.fontList 
     * @param {module:api/ConfigmgrApi~adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo}
     */
    this.adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'fontList': {
          value: opts['fontList'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Theme Configuration', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsComponentQueryCacheService operation.
     * @callback module:api/ConfigmgrApi~analyticsComponentQueryCacheServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalyticsComponentQueryCacheServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.cqAnalyticsComponentQueryCacheSize 
     * @param {module:api/ConfigmgrApi~analyticsComponentQueryCacheServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalyticsComponentQueryCacheServiceInfo}
     */
    this.analyticsComponentQueryCacheService = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.analytics.component.query.cache.size': opts['cqAnalyticsComponentQueryCacheSize'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = AnalyticsComponentQueryCacheServiceInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/Analytics Component Query Cache Service', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apacheSlingHealthCheckResultHTMLSerializer operation.
     * @callback module:api/ConfigmgrApi~apacheSlingHealthCheckResultHTMLSerializerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApacheSlingHealthCheckResultHTMLSerializerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.styleString 
     * @param {module:api/ConfigmgrApi~apacheSlingHealthCheckResultHTMLSerializerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApacheSlingHealthCheckResultHTMLSerializerInfo}
     */
    this.apacheSlingHealthCheckResultHTMLSerializer = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'styleString': opts['styleString'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ApacheSlingHealthCheckResultHTMLSerializerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/Apache Sling Health Check Result HTML Serializer', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration operation.
     * @callback module:api/ConfigmgrApi~comAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.formsManagerConfigIncludeOOTBTemplates 
     * @param {Boolean} opts.formsManagerConfigIncludeDeprecatedTemplates 
     * @param {module:api/ConfigmgrApi~comAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo}
     */
    this.comAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'formsManagerConfig.includeOOTBTemplates': opts['formsManagerConfigIncludeOOTBTemplates'],
        'formsManagerConfig.includeDeprecatedTemplates': opts['formsManagerConfigIncludeDeprecatedTemplates'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.aem.formsndocuments.config.AEMFormsManagerConfiguration', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeAemTransactionCoreImplTransactionRecorder operation.
     * @callback module:api/ConfigmgrApi~comAdobeAemTransactionCoreImplTransactionRecorderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeAemTransactionCoreImplTransactionRecorderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.isTransactionRecordingEnabled 
     * @param {module:api/ConfigmgrApi~comAdobeAemTransactionCoreImplTransactionRecorderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeAemTransactionCoreImplTransactionRecorderInfo}
     */
    this.comAdobeAemTransactionCoreImplTransactionRecorder = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'isTransactionRecordingEnabled': opts['isTransactionRecordingEnabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeAemTransactionCoreImplTransactionRecorderInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.aem.transaction.core.impl.TransactionRecorder', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC operation.
     * @callback module:api/ConfigmgrApi~comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.hcName 
     * @param {Array.<String>} opts.hcTags 
     * @param {String} opts.hcMbeanName 
     * @param {module:api/ConfigmgrApi~comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo}
     */
    this.comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'hc.name': opts['hcName'],
        'hc.mbean.name': opts['hcMbeanName'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'hc.tags': {
          value: opts['hcTags'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.DeprecateIndexesHC', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC operation.
     * @callback module:api/ConfigmgrApi~comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.hcName 
     * @param {Array.<String>} opts.hcTags 
     * @param {String} opts.hcMbeanName 
     * @param {module:api/ConfigmgrApi~comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo}
     */
    this.comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'hc.name': opts['hcName'],
        'hc.mbean.name': opts['hcMbeanName'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'hc.tags': {
          value: opts['hcTags'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.ReplicationAgentsDisabledHC', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.preUpgradeMaintenanceTasks 
     * @param {Array.<String>} opts.preUpgradeHcTags 
     * @param {module:api/ConfigmgrApi~comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo}
     */
    this.comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'pre-upgrade.maintenance.tasks': {
          value: opts['preUpgradeMaintenanceTasks'],
          collectionFormat: 'multi'
        },
        'pre-upgrade.hc.tags': {
          value: opts['preUpgradeHcTags'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.aem.upgrade.prechecks.mbean.impl.PreUpgradeTasksMBeanImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.rootPath 
     * @param {Boolean} opts.fixInconsistencies 
     * @param {module:api/ConfigmgrApi~comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo}
     */
    this.comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'root.path': opts['rootPath'],
        'fix.inconsistencies': opts['fixInconsistencies'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.aem.upgrade.prechecks.tasks.impl.ConsistencyCheckTaskImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqAccountApiAccountManagementService operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqAccountApiAccountManagementServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqAccountApiAccountManagementServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.cqAccountmanagerTokenValidityPeriod 
     * @param {String} opts.cqAccountmanagerConfigRequestnewaccountMail 
     * @param {String} opts.cqAccountmanagerConfigRequestnewpwdMail 
     * @param {module:api/ConfigmgrApi~comAdobeCqAccountApiAccountManagementServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqAccountApiAccountManagementServiceInfo}
     */
    this.comAdobeCqAccountApiAccountManagementService = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.accountmanager.token.validity.period': opts['cqAccountmanagerTokenValidityPeriod'],
        'cq.accountmanager.config.requestnewaccount.mail': opts['cqAccountmanagerConfigRequestnewaccountMail'],
        'cq.accountmanager.config.requestnewpwd.mail': opts['cqAccountmanagerConfigRequestnewpwdMail'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqAccountApiAccountManagementServiceInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.account.api.AccountManagementService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqAccountImplAccountManagementServlet operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqAccountImplAccountManagementServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqAccountImplAccountManagementServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.cqAccountmanagerConfigInformnewaccountMail 
     * @param {String} opts.cqAccountmanagerConfigInformnewpwdMail 
     * @param {module:api/ConfigmgrApi~comAdobeCqAccountImplAccountManagementServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqAccountImplAccountManagementServletInfo}
     */
    this.comAdobeCqAccountImplAccountManagementServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.accountmanager.config.informnewaccount.mail': opts['cqAccountmanagerConfigInformnewaccountMail'],
        'cq.accountmanager.config.informnewpwd.mail': opts['cqAccountmanagerConfigInformnewpwdMail'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqAccountImplAccountManagementServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.account.impl.AccountManagementServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqAddressImplLocationLocationListServlet operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqAddressImplLocationLocationListServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqAddressImplLocationLocationListServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.cqAddressLocationDefaultMaxResults 
     * @param {module:api/ConfigmgrApi~comAdobeCqAddressImplLocationLocationListServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqAddressImplLocationLocationListServletInfo}
     */
    this.comAdobeCqAddressImplLocationLocationListServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.address.location.default.maxResults': opts['cqAddressLocationDefaultMaxResults'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqAddressImplLocationLocationListServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.address.impl.location.LocationListServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqAuditPurgeDam operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqAuditPurgeDamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqAuditPurgeDamInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.auditlogRuleName 
     * @param {String} opts.auditlogRuleContentpath 
     * @param {Number} opts.auditlogRuleMinimumage 
     * @param {String} opts.auditlogRuleTypes 
     * @param {module:api/ConfigmgrApi~comAdobeCqAuditPurgeDamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqAuditPurgeDamInfo}
     */
    this.comAdobeCqAuditPurgeDam = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'auditlog.rule.name': opts['auditlogRuleName'],
        'auditlog.rule.contentpath': opts['auditlogRuleContentpath'],
        'auditlog.rule.minimumage': opts['auditlogRuleMinimumage'],
        'auditlog.rule.types': opts['auditlogRuleTypes'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqAuditPurgeDamInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.audit.purge.Dam', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqAuditPurgePages operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqAuditPurgePagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqAuditPurgePagesInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.auditlogRuleName 
     * @param {String} opts.auditlogRuleContentpath 
     * @param {Number} opts.auditlogRuleMinimumage 
     * @param {String} opts.auditlogRuleTypes 
     * @param {module:api/ConfigmgrApi~comAdobeCqAuditPurgePagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqAuditPurgePagesInfo}
     */
    this.comAdobeCqAuditPurgePages = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'auditlog.rule.name': opts['auditlogRuleName'],
        'auditlog.rule.contentpath': opts['auditlogRuleContentpath'],
        'auditlog.rule.minimumage': opts['auditlogRuleMinimumage'],
        'auditlog.rule.types': opts['auditlogRuleTypes'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqAuditPurgePagesInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.audit.purge.Pages', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqAuditPurgeReplication operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqAuditPurgeReplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqAuditPurgeReplicationInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.auditlogRuleName 
     * @param {String} opts.auditlogRuleContentpath 
     * @param {Number} opts.auditlogRuleMinimumage 
     * @param {String} opts.auditlogRuleTypes 
     * @param {module:api/ConfigmgrApi~comAdobeCqAuditPurgeReplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqAuditPurgeReplicationInfo}
     */
    this.comAdobeCqAuditPurgeReplication = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'auditlog.rule.name': opts['auditlogRuleName'],
        'auditlog.rule.contentpath': opts['auditlogRuleContentpath'],
        'auditlog.rule.minimumage': opts['auditlogRuleMinimumage'],
        'auditlog.rule.types': opts['auditlogRuleTypes'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqAuditPurgeReplicationInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.audit.purge.Replication', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqCdnRewriterImplAWSCloudFrontRewriter operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqCdnRewriterImplAWSCloudFrontRewriterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.keypairId 
     * @param {String} opts.keypairAlias 
     * @param {Array.<String>} opts.cdnrewriterAttributes 
     * @param {String} opts.cdnRewriterDistributionDomain 
     * @param {module:api/ConfigmgrApi~comAdobeCqCdnRewriterImplAWSCloudFrontRewriterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo}
     */
    this.comAdobeCqCdnRewriterImplAWSCloudFrontRewriter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'service.ranking': opts['serviceRanking'],
        'keypair.id': opts['keypairId'],
        'keypair.alias': opts['keypairAlias'],
        'cdn.rewriter.distribution.domain': opts['cdnRewriterDistributionDomain'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'cdnrewriter.attributes': {
          value: opts['cdnrewriterAttributes'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.AWSCloudFrontRewriter', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqCdnRewriterImplCDNConfigServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqCdnRewriterImplCDNConfigServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.cdnConfigDistributionDomain 
     * @param {Boolean} opts.cdnConfigEnableRewriting 
     * @param {Array.<String>} opts.cdnConfigPathPrefixes 
     * @param {Number} opts.cdnConfigCdnttl 
     * @param {String} opts.cdnConfigApplicationProtocol 
     * @param {module:api/ConfigmgrApi~comAdobeCqCdnRewriterImplCDNConfigServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo}
     */
    this.comAdobeCqCdnRewriterImplCDNConfigServiceImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cdn.config.distribution.domain': opts['cdnConfigDistributionDomain'],
        'cdn.config.enable.rewriting': opts['cdnConfigEnableRewriting'],
        'cdn.config.cdnttl': opts['cdnConfigCdnttl'],
        'cdn.config.application.protocol': opts['cdnConfigApplicationProtocol'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'cdn.config.path.prefixes': {
          value: opts['cdnConfigPathPrefixes'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNConfigServiceImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqCdnRewriterImplCDNRewriter operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqCdnRewriterImplCDNRewriterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqCdnRewriterImplCDNRewriterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {Array.<String>} opts.cdnrewriterAttributes 
     * @param {String} opts.cdnRewriterDistributionDomain 
     * @param {module:api/ConfigmgrApi~comAdobeCqCdnRewriterImplCDNRewriterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqCdnRewriterImplCDNRewriterInfo}
     */
    this.comAdobeCqCdnRewriterImplCDNRewriter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'service.ranking': opts['serviceRanking'],
        'cdn.rewriter.distribution.domain': opts['cdnRewriterDistributionDomain'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'cdnrewriter.attributes': {
          value: opts['cdnrewriterAttributes'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqCdnRewriterImplCDNRewriterInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNRewriter', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.flushAgents 
     * @param {module:api/ConfigmgrApi~comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo}
     */
    this.comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'flush.agents': {
          value: opts['flushAgents'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.cloudconfig.core.impl.ConfigurationReplicationEventHandler', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqCommerceImplAssetDynamicImageHandler operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqCommerceImplAssetDynamicImageHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.cqCommerceAssetHandlerActive 
     * @param {String} opts.cqCommerceAssetHandlerName 
     * @param {module:api/ConfigmgrApi~comAdobeCqCommerceImplAssetDynamicImageHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo}
     */
    this.comAdobeCqCommerceImplAssetDynamicImageHandler = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.commerce.asset.handler.active': opts['cqCommerceAssetHandlerActive'],
        'cq.commerce.asset.handler.name': opts['cqCommerceAssetHandlerName'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.commerce.impl.asset.DynamicImageHandler', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqCommerceImplAssetProductAssetHandlerProviderImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.cqCommerceAssetHandlerFallback 
     * @param {module:api/ConfigmgrApi~comAdobeCqCommerceImplAssetProductAssetHandlerProviderImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo}
     */
    this.comAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.commerce.asset.handler.fallback': opts['cqCommerceAssetHandlerFallback'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.commerce.impl.asset.ProductAssetHandlerProviderImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqCommerceImplAssetStaticImageHandler operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqCommerceImplAssetStaticImageHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqCommerceImplAssetStaticImageHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.cqCommerceAssetHandlerActive 
     * @param {String} opts.cqCommerceAssetHandlerName 
     * @param {module:api/ConfigmgrApi~comAdobeCqCommerceImplAssetStaticImageHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqCommerceImplAssetStaticImageHandlerInfo}
     */
    this.comAdobeCqCommerceImplAssetStaticImageHandler = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.commerce.asset.handler.active': opts['cqCommerceAssetHandlerActive'],
        'cq.commerce.asset.handler.name': opts['cqCommerceAssetHandlerName'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqCommerceImplAssetStaticImageHandlerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.commerce.impl.asset.StaticImageHandler', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqCommerceImplAssetVideoHandler operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqCommerceImplAssetVideoHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqCommerceImplAssetVideoHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.cqCommerceAssetHandlerActive 
     * @param {String} opts.cqCommerceAssetHandlerName 
     * @param {module:api/ConfigmgrApi~comAdobeCqCommerceImplAssetVideoHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqCommerceImplAssetVideoHandlerInfo}
     */
    this.comAdobeCqCommerceImplAssetVideoHandler = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.commerce.asset.handler.active': opts['cqCommerceAssetHandlerActive'],
        'cq.commerce.asset.handler.name': opts['cqCommerceAssetHandlerName'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqCommerceImplAssetVideoHandlerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.commerce.impl.asset.VideoHandler', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqCommerceImplPromotionPromotionManagerImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqCommerceImplPromotionPromotionManagerImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.cqCommercePromotionRoot 
     * @param {module:api/ConfigmgrApi~comAdobeCqCommerceImplPromotionPromotionManagerImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo}
     */
    this.comAdobeCqCommerceImplPromotionPromotionManagerImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.commerce.promotion.root': opts['cqCommercePromotionRoot'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.commerce.impl.promotion.PromotionManagerImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.cqCommerceCataloggeneratorBucketsize 
     * @param {String} opts.cqCommerceCataloggeneratorBucketname 
     * @param {Array.<String>} opts.cqCommerceCataloggeneratorExcludedtemplateproperties 
     * @param {module:api/ConfigmgrApi~comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo}
     */
    this.comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.commerce.cataloggenerator.bucketsize': opts['cqCommerceCataloggeneratorBucketsize'],
        'cq.commerce.cataloggenerator.bucketname': opts['cqCommerceCataloggeneratorBucketname'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'cq.commerce.cataloggenerator.excludedtemplateproperties': {
          value: opts['cqCommerceCataloggeneratorExcludedtemplateproperties'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.commerce.pim.impl.cataloggenerator.CatalogGeneratorImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqCommercePimImplPageEventListener operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqCommercePimImplPageEventListenerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqCommercePimImplPageEventListenerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.cqCommercePageeventlistenerEnabled 
     * @param {module:api/ConfigmgrApi~comAdobeCqCommercePimImplPageEventListenerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqCommercePimImplPageEventListenerInfo}
     */
    this.comAdobeCqCommercePimImplPageEventListener = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.commerce.pageeventlistener.enabled': opts['cqCommercePageeventlistenerEnabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqCommercePimImplPageEventListenerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.commerce.pim.impl.PageEventListener', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqCommercePimImplProductfeedProductFeedServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqCommercePimImplProductfeedProductFeedServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.feedGeneratorAlgorithm 
     * @param {module:api/ConfigmgrApi~comAdobeCqCommercePimImplProductfeedProductFeedServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo}
     */
    this.comAdobeCqCommercePimImplProductfeedProductFeedServiceImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'Feed generator algorithm': opts['feedGeneratorAlgorithm'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.commerce.pim.impl.productfeed.ProductFeedServiceImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqContentinsightImplReportingServicesSettingsProvider operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqContentinsightImplReportingServicesSettingsProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.reportingservicesUrl 
     * @param {module:api/ConfigmgrApi~comAdobeCqContentinsightImplReportingServicesSettingsProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo}
     */
    this.comAdobeCqContentinsightImplReportingServicesSettingsProvider = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'reportingservices.url': opts['reportingservicesUrl'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.contentinsight.impl.ReportingServicesSettingsProvider', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqContentinsightImplServletsBrightEdgeProxyServlet operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqContentinsightImplServletsBrightEdgeProxyServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.brightedgeUrl 
     * @param {module:api/ConfigmgrApi~comAdobeCqContentinsightImplServletsBrightEdgeProxyServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo}
     */
    this.comAdobeCqContentinsightImplServletsBrightEdgeProxyServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'brightedge.url': opts['brightedgeUrl'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.BrightEdgeProxyServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqContentinsightImplServletsReportingServicesProxyServle operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqContentinsightImplServletsReportingServicesProxyServleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.reportingservicesProxyWhitelist 
     * @param {module:api/ConfigmgrApi~comAdobeCqContentinsightImplServletsReportingServicesProxyServleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo}
     */
    this.comAdobeCqContentinsightImplServletsReportingServicesProxyServle = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'reportingservices.proxy.whitelist': {
          value: opts['reportingservicesProxyWhitelist'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.ReportingServicesProxyServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqDamCfmImplComponentComponentConfigImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqDamCfmImplComponentComponentConfigImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqDamCfmImplComponentComponentConfigImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.damCfmComponentResourceType 
     * @param {String} opts.damCfmComponentFileReferenceProp 
     * @param {String} opts.damCfmComponentElementsProp 
     * @param {String} opts.damCfmComponentVariationProp 
     * @param {module:api/ConfigmgrApi~comAdobeCqDamCfmImplComponentComponentConfigImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqDamCfmImplComponentComponentConfigImplInfo}
     */
    this.comAdobeCqDamCfmImplComponentComponentConfigImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'dam.cfm.component.resourceType': opts['damCfmComponentResourceType'],
        'dam.cfm.component.fileReferenceProp': opts['damCfmComponentFileReferenceProp'],
        'dam.cfm.component.elementsProp': opts['damCfmComponentElementsProp'],
        'dam.cfm.component.variationProp': opts['damCfmComponentVariationProp'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqDamCfmImplComponentComponentConfigImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.dam.cfm.impl.component.ComponentConfigImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqDamCfmImplConfFeatureConfigImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqDamCfmImplConfFeatureConfigImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqDamCfmImplConfFeatureConfigImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.damCfmResourceTypes 
     * @param {Array.<String>} opts.damCfmReferenceProperties 
     * @param {module:api/ConfigmgrApi~comAdobeCqDamCfmImplConfFeatureConfigImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqDamCfmImplConfFeatureConfigImplInfo}
     */
    this.comAdobeCqDamCfmImplConfFeatureConfigImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'dam.cfm.resourceTypes': {
          value: opts['damCfmResourceTypes'],
          collectionFormat: 'multi'
        },
        'dam.cfm.referenceProperties': {
          value: opts['damCfmReferenceProperties'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqDamCfmImplConfFeatureConfigImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.dam.cfm.impl.conf.FeatureConfigImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqDamCfmImplContentRewriterAssetProcessor operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqDamCfmImplContentRewriterAssetProcessorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.pipelineType 
     * @param {module:api/ConfigmgrApi~comAdobeCqDamCfmImplContentRewriterAssetProcessorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo}
     */
    this.comAdobeCqDamCfmImplContentRewriterAssetProcessor = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'pipeline.type': opts['pipelineType'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.AssetProcessor', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqDamCfmImplContentRewriterParRangeFilter operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqDamCfmImplContentRewriterParRangeFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.pipelineType 
     * @param {module:api/ConfigmgrApi~comAdobeCqDamCfmImplContentRewriterParRangeFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo}
     */
    this.comAdobeCqDamCfmImplContentRewriterParRangeFilter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'pipeline.type': opts['pipelineType'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.ParRangeFilter', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqDamCfmImplContentRewriterPayloadFilter operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqDamCfmImplContentRewriterPayloadFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.pipelineType 
     * @param {module:api/ConfigmgrApi~comAdobeCqDamCfmImplContentRewriterPayloadFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo}
     */
    this.comAdobeCqDamCfmImplContentRewriterPayloadFilter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'pipeline.type': opts['pipelineType'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.PayloadFilter', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqDamDmProcessImagePTiffManagerImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqDamDmProcessImagePTiffManagerImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqDamDmProcessImagePTiffManagerImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.maxMemory 
     * @param {module:api/ConfigmgrApi~comAdobeCqDamDmProcessImagePTiffManagerImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqDamDmProcessImagePTiffManagerImplInfo}
     */
    this.comAdobeCqDamDmProcessImagePTiffManagerImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'maxMemory': opts['maxMemory'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqDamDmProcessImagePTiffManagerImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.dam.dm.process.image.PTiffManagerImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.dmreplicateonmodifyEnabled 
     * @param {Boolean} opts.dmreplicateonmodifyForcesyncdeletes 
     * @param {module:api/ConfigmgrApi~comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo}
     */
    this.comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'dmreplicateonmodify.enabled': opts['dmreplicateonmodifyEnabled'],
        'dmreplicateonmodify.forcesyncdeletes': opts['dmreplicateonmodifyForcesyncdeletes'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.dam.ips.impl.replication.trigger.ReplicateOnModifyWorker', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqDamMacSyncHelperImplMACSyncClientImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqDamMacSyncHelperImplMACSyncClientImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.comAdobeDamMacSyncClientSoTimeout 
     * @param {module:api/ConfigmgrApi~comAdobeCqDamMacSyncHelperImplMACSyncClientImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo}
     */
    this.comAdobeCqDamMacSyncHelperImplMACSyncClientImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'com.adobe.dam.mac.sync.client.so.timeout': opts['comAdobeDamMacSyncClientSoTimeout'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.dam.mac.sync.helper.impl.MACSyncClientImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqDamMacSyncImplDAMSyncServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqDamMacSyncImplDAMSyncServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths 
     * @param {Boolean} opts.comAdobeCqDamMacSyncDamsyncserviceSyncRenditions 
     * @param {Number} opts.comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs 
     * @param {String} opts.comAdobeCqDamMacSyncDamsyncservicePlatform 
     * @param {module:api/ConfigmgrApi~comAdobeCqDamMacSyncImplDAMSyncServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo}
     */
    this.comAdobeCqDamMacSyncImplDAMSyncServiceImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'com.adobe.cq.dam.mac.sync.damsyncservice.sync.renditions': opts['comAdobeCqDamMacSyncDamsyncserviceSyncRenditions'],
        'com.adobe.cq.dam.mac.sync.damsyncservice.replicate.thread.wait.ms': opts['comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs'],
        'com.adobe.cq.dam.mac.sync.damsyncservice.platform': opts['comAdobeCqDamMacSyncDamsyncservicePlatform'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'com.adobe.cq.dam.mac.sync.damsyncservice.registered_paths': {
          value: opts['comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.dam.mac.sync.impl.DAMSyncServiceImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqDamProcessorNuiImplNuiAssetProcessor operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqDamProcessorNuiImplNuiAssetProcessorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.nuiEnabled 
     * @param {String} opts.nuiServiceUrl 
     * @param {String} opts.nuiApiKey 
     * @param {module:api/ConfigmgrApi~comAdobeCqDamProcessorNuiImplNuiAssetProcessorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo}
     */
    this.comAdobeCqDamProcessorNuiImplNuiAssetProcessor = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'nuiEnabled': opts['nuiEnabled'],
        'nuiServiceUrl': opts['nuiServiceUrl'],
        'nuiApiKey': opts['nuiApiKey'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.dam.processor.nui.impl.NuiAssetProcessor', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqDamS7imagingImplIsImageServerComponent operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqDamS7imagingImplIsImageServerComponentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqDamS7imagingImplIsImageServerComponentInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.tcpPort 
     * @param {Boolean} opts.allowRemoteAccess 
     * @param {String} opts.maxRenderRgnPixels 
     * @param {String} opts.maxMessageSize 
     * @param {Number} opts.randomAccessUrlTimeout 
     * @param {Number} opts.workerThreads 
     * @param {module:api/ConfigmgrApi~comAdobeCqDamS7imagingImplIsImageServerComponentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqDamS7imagingImplIsImageServerComponentInfo}
     */
    this.comAdobeCqDamS7imagingImplIsImageServerComponent = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'TcpPort': opts['tcpPort'],
        'AllowRemoteAccess': opts['allowRemoteAccess'],
        'MaxRenderRgnPixels': opts['maxRenderRgnPixels'],
        'MaxMessageSize': opts['maxMessageSize'],
        'RandomAccessUrlTimeout': opts['randomAccessUrlTimeout'],
        'WorkerThreads': opts['workerThreads'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqDamS7imagingImplIsImageServerComponentInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.is.ImageServerComponent', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqDamS7imagingImplPsPlatformServerServlet operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqDamS7imagingImplPsPlatformServerServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.cacheEnable 
     * @param {Array.<String>} opts.cacheRootPaths 
     * @param {Number} opts.cacheMaxSize 
     * @param {Number} opts.cacheMaxEntries 
     * @param {module:api/ConfigmgrApi~comAdobeCqDamS7imagingImplPsPlatformServerServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo}
     */
    this.comAdobeCqDamS7imagingImplPsPlatformServerServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cache.enable': opts['cacheEnable'],
        'cache.maxSize': opts['cacheMaxSize'],
        'cache.maxEntries': opts['cacheMaxEntries'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'cache.rootPaths': {
          value: opts['cacheRootPaths'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.ps.PlatformServerServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqDamWebdavImplIoAssetIOHandler operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqDamWebdavImplIoAssetIOHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.pathPrefix 
     * @param {Boolean} opts.createVersion 
     * @param {module:api/ConfigmgrApi~comAdobeCqDamWebdavImplIoAssetIOHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo}
     */
    this.comAdobeCqDamWebdavImplIoAssetIOHandler = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'service.ranking': opts['serviceRanking'],
        'pathPrefix': opts['pathPrefix'],
        'createVersion': opts['createVersion'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.AssetIOHandler', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.cqDamWebdavVersionLinkingEnable 
     * @param {Number} opts.cqDamWebdavVersionLinkingSchedulerPeriod 
     * @param {Number} opts.cqDamWebdavVersionLinkingStagingTimeout 
     * @param {module:api/ConfigmgrApi~comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo}
     */
    this.comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.dam.webdav.version.linking.enable': opts['cqDamWebdavVersionLinkingEnable'],
        'cq.dam.webdav.version.linking.scheduler.period': opts['cqDamWebdavVersionLinkingSchedulerPeriod'],
        'cq.dam.webdav.version.linking.staging.timeout': opts['cqDamWebdavVersionLinkingStagingTimeout'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.DamWebdavVersionLinkingJob', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqDamWebdavImplIoSpecialFilesHandler operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqDamWebdavImplIoSpecialFilesHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters 
     * @param {module:api/ConfigmgrApi~comAdobeCqDamWebdavImplIoSpecialFilesHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo}
     */
    this.comAdobeCqDamWebdavImplIoSpecialFilesHandler = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'com.day.cq.dam.core.impl.io.SpecialFilesHandler.filepatters': {
          value: opts['comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.SpecialFilesHandler', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqDeserfwImplDeserializationFirewallImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqDeserfwImplDeserializationFirewallImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqDeserfwImplDeserializationFirewallImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.firewallDeserializationWhitelist 
     * @param {Array.<String>} opts.firewallDeserializationBlacklist 
     * @param {String} opts.firewallDeserializationDiagnostics 
     * @param {module:api/ConfigmgrApi~comAdobeCqDeserfwImplDeserializationFirewallImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqDeserfwImplDeserializationFirewallImplInfo}
     */
    this.comAdobeCqDeserfwImplDeserializationFirewallImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'firewall.deserialization.diagnostics': opts['firewallDeserializationDiagnostics'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'firewall.deserialization.whitelist': {
          value: opts['firewallDeserializationWhitelist'],
          collectionFormat: 'multi'
        },
        'firewall.deserialization.blacklist': {
          value: opts['firewallDeserializationBlacklist'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqDeserfwImplDeserializationFirewallImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.deserfw.impl.DeserializationFirewallImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqDtmImplServiceDTMWebServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqDtmImplServiceDTMWebServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqDtmImplServiceDTMWebServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.connectionTimeout 
     * @param {Number} opts.socketTimeout 
     * @param {module:api/ConfigmgrApi~comAdobeCqDtmImplServiceDTMWebServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqDtmImplServiceDTMWebServiceImplInfo}
     */
    this.comAdobeCqDtmImplServiceDTMWebServiceImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'connection.timeout': opts['connectionTimeout'],
        'socket.timeout': opts['socketTimeout'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqDtmImplServiceDTMWebServiceImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.dtm.impl.service.DTMWebServiceImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqDtmImplServletsDTMDeployHookServlet operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqDtmImplServletsDTMDeployHookServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqDtmImplServletsDTMDeployHookServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.dtmStagingIpWhitelist 
     * @param {Array.<String>} opts.dtmProductionIpWhitelist 
     * @param {module:api/ConfigmgrApi~comAdobeCqDtmImplServletsDTMDeployHookServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqDtmImplServletsDTMDeployHookServletInfo}
     */
    this.comAdobeCqDtmImplServletsDTMDeployHookServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'dtm.staging.ip.whitelist': {
          value: opts['dtmStagingIpWhitelist'],
          collectionFormat: 'multi'
        },
        'dtm.production.ip.whitelist': {
          value: opts['dtmProductionIpWhitelist'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqDtmImplServletsDTMDeployHookServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.dtm.impl.servlets.DTMDeployHookServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqDtmReactorImplServiceWebServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqDtmReactorImplServiceWebServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqDtmReactorImplServiceWebServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.endpointUri 
     * @param {Number} opts.connectionTimeout 
     * @param {Number} opts.socketTimeout 
     * @param {module:api/ConfigmgrApi~comAdobeCqDtmReactorImplServiceWebServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqDtmReactorImplServiceWebServiceImplInfo}
     */
    this.comAdobeCqDtmReactorImplServiceWebServiceImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'endpointUri': opts['endpointUri'],
        'connectionTimeout': opts['connectionTimeout'],
        'socketTimeout': opts['socketTimeout'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqDtmReactorImplServiceWebServiceImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.dtm.reactor.impl.service.WebServiceImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqExperiencelogImplExperienceLogConfigServlet operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqExperiencelogImplExperienceLogConfigServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.enabled 
     * @param {Array.<String>} opts.disabledForGroups 
     * @param {module:api/ConfigmgrApi~comAdobeCqExperiencelogImplExperienceLogConfigServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo}
     */
    this.comAdobeCqExperiencelogImplExperienceLogConfigServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'enabled': opts['enabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'disabledForGroups': {
          value: opts['disabledForGroups'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.experiencelog.impl.ExperienceLogConfigServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqHcContentPackagesHealthCheck operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqHcContentPackagesHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqHcContentPackagesHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.hcName 
     * @param {Array.<String>} opts.hcTags 
     * @param {String} opts.hcMbeanName 
     * @param {Array.<String>} opts.packageNames 
     * @param {module:api/ConfigmgrApi~comAdobeCqHcContentPackagesHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqHcContentPackagesHealthCheckInfo}
     */
    this.comAdobeCqHcContentPackagesHealthCheck = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'hc.name': opts['hcName'],
        'hc.mbean.name': opts['hcMbeanName'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'hc.tags': {
          value: opts['hcTags'],
          collectionFormat: 'multi'
        },
        'package.names': {
          value: opts['packageNames'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqHcContentPackagesHealthCheckInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.hc.ContentPackagesHealthCheck', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqHistoryImplHistoryRequestFilter operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqHistoryImplHistoryRequestFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqHistoryImplHistoryRequestFilterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.historyRequestFilterExcludedSelectors 
     * @param {Array.<String>} opts.historyRequestFilterExcludedExtensions 
     * @param {module:api/ConfigmgrApi~comAdobeCqHistoryImplHistoryRequestFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqHistoryImplHistoryRequestFilterInfo}
     */
    this.comAdobeCqHistoryImplHistoryRequestFilter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'history.requestFilter.excludedSelectors': {
          value: opts['historyRequestFilterExcludedSelectors'],
          collectionFormat: 'multi'
        },
        'history.requestFilter.excludedExtensions': {
          value: opts['historyRequestFilterExcludedExtensions'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqHistoryImplHistoryRequestFilterInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.history.impl.HistoryRequestFilter', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqHistoryImplHistoryServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqHistoryImplHistoryServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqHistoryImplHistoryServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.historyServiceResourceTypes 
     * @param {Array.<String>} opts.historyServicePathFilter 
     * @param {module:api/ConfigmgrApi~comAdobeCqHistoryImplHistoryServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqHistoryImplHistoryServiceImplInfo}
     */
    this.comAdobeCqHistoryImplHistoryServiceImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'history.service.resourceTypes': {
          value: opts['historyServiceResourceTypes'],
          collectionFormat: 'multi'
        },
        'history.service.pathFilter': {
          value: opts['historyServicePathFilter'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqHistoryImplHistoryServiceImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.history.impl.HistoryServiceImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqInboxImplTypeproviderItemTypeProvider operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqInboxImplTypeproviderItemTypeProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.inboxImplTypeproviderRegistrypaths 
     * @param {Array.<String>} opts.inboxImplTypeproviderLegacypaths 
     * @param {String} opts.inboxImplTypeproviderDefaulturlFailureitem 
     * @param {String} opts.inboxImplTypeproviderDefaulturlWorkitem 
     * @param {String} opts.inboxImplTypeproviderDefaulturlTask 
     * @param {module:api/ConfigmgrApi~comAdobeCqInboxImplTypeproviderItemTypeProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo}
     */
    this.comAdobeCqInboxImplTypeproviderItemTypeProvider = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'inbox.impl.typeprovider.defaulturl.failureitem': opts['inboxImplTypeproviderDefaulturlFailureitem'],
        'inbox.impl.typeprovider.defaulturl.workitem': opts['inboxImplTypeproviderDefaulturlWorkitem'],
        'inbox.impl.typeprovider.defaulturl.task': opts['inboxImplTypeproviderDefaulturlTask'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'inbox.impl.typeprovider.registrypaths': {
          value: opts['inboxImplTypeproviderRegistrypaths'],
          collectionFormat: 'multi'
        },
        'inbox.impl.typeprovider.legacypaths': {
          value: opts['inboxImplTypeproviderLegacypaths'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.inbox.impl.typeprovider.ItemTypeProvider', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqProjectsImplServletProjectImageServlet operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqProjectsImplServletProjectImageServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqProjectsImplServletProjectImageServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.imageQuality 
     * @param {String} opts.imageSupportedResolutions 
     * @param {module:api/ConfigmgrApi~comAdobeCqProjectsImplServletProjectImageServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqProjectsImplServletProjectImageServletInfo}
     */
    this.comAdobeCqProjectsImplServletProjectImageServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'image.quality': opts['imageQuality'],
        'image.supported.resolutions': opts['imageSupportedResolutions'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqProjectsImplServletProjectImageServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.projects.impl.servlet.ProjectImageServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqProjectsPurgeScheduler operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqProjectsPurgeSchedulerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqProjectsPurgeSchedulerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.scheduledpurgeName 
     * @param {Boolean} opts.scheduledpurgePurgeActive 
     * @param {Array.<String>} opts.scheduledpurgeTemplates 
     * @param {Boolean} opts.scheduledpurgePurgeGroups 
     * @param {Boolean} opts.scheduledpurgePurgeAssets 
     * @param {Boolean} opts.scheduledpurgeTerminateRunningWorkflows 
     * @param {Number} opts.scheduledpurgeDaysold 
     * @param {Number} opts.scheduledpurgeSaveThreshold 
     * @param {module:api/ConfigmgrApi~comAdobeCqProjectsPurgeSchedulerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqProjectsPurgeSchedulerInfo}
     */
    this.comAdobeCqProjectsPurgeScheduler = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'scheduledpurge.name': opts['scheduledpurgeName'],
        'scheduledpurge.purgeActive': opts['scheduledpurgePurgeActive'],
        'scheduledpurge.purgeGroups': opts['scheduledpurgePurgeGroups'],
        'scheduledpurge.purgeAssets': opts['scheduledpurgePurgeAssets'],
        'scheduledpurge.terminateRunningWorkflows': opts['scheduledpurgeTerminateRunningWorkflows'],
        'scheduledpurge.daysold': opts['scheduledpurgeDaysold'],
        'scheduledpurge.saveThreshold': opts['scheduledpurgeSaveThreshold'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'scheduledpurge.templates': {
          value: opts['scheduledpurgeTemplates'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqProjectsPurgeSchedulerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.projects.purge.Scheduler', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqScheduledExporterImplScheduledExporterImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqScheduledExporterImplScheduledExporterImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqScheduledExporterImplScheduledExporterImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.includePaths 
     * @param {String} opts.exporterUser 
     * @param {module:api/ConfigmgrApi~comAdobeCqScheduledExporterImplScheduledExporterImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqScheduledExporterImplScheduledExporterImplInfo}
     */
    this.comAdobeCqScheduledExporterImplScheduledExporterImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'exporter.user': opts['exporterUser'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'include.paths': {
          value: opts['includePaths'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqScheduledExporterImplScheduledExporterImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.scheduled.exporter.impl.ScheduledExporterImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.comAdobeCqScreensAnalyticsImplUrl 
     * @param {String} opts.comAdobeCqScreensAnalyticsImplApikey 
     * @param {String} opts.comAdobeCqScreensAnalyticsImplProject 
     * @param {String} opts.comAdobeCqScreensAnalyticsImplEnvironment 
     * @param {Number} opts.comAdobeCqScreensAnalyticsImplSendFrequency 
     * @param {module:api/ConfigmgrApi~comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo}
     */
    this.comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'com.adobe.cq.screens.analytics.impl.url': opts['comAdobeCqScreensAnalyticsImplUrl'],
        'com.adobe.cq.screens.analytics.impl.apikey': opts['comAdobeCqScreensAnalyticsImplApikey'],
        'com.adobe.cq.screens.analytics.impl.project': opts['comAdobeCqScreensAnalyticsImplProject'],
        'com.adobe.cq.screens.analytics.impl.environment': opts['comAdobeCqScreensAnalyticsImplEnvironment'],
        'com.adobe.cq.screens.analytics.impl.sendFrequency': opts['comAdobeCqScreensAnalyticsImplSendFrequency'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.screens.analytics.impl.ScreensAnalyticsServiceImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqScreensDeviceImplDeviceService operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqScreensDeviceImplDeviceServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqScreensDeviceImplDeviceServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.comAdobeAemScreensPlayerPingfrequency 
     * @param {String} opts.comAdobeAemScreensDevicePaswordSpecialchars 
     * @param {Number} opts.comAdobeAemScreensDevicePaswordMinlowercasechars 
     * @param {Number} opts.comAdobeAemScreensDevicePaswordMinuppercasechars 
     * @param {Number} opts.comAdobeAemScreensDevicePaswordMinnumberchars 
     * @param {Number} opts.comAdobeAemScreensDevicePaswordMinspecialchars 
     * @param {Number} opts.comAdobeAemScreensDevicePaswordMinlength 
     * @param {module:api/ConfigmgrApi~comAdobeCqScreensDeviceImplDeviceServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqScreensDeviceImplDeviceServiceInfo}
     */
    this.comAdobeCqScreensDeviceImplDeviceService = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'com.adobe.aem.screens.player.pingfrequency': opts['comAdobeAemScreensPlayerPingfrequency'],
        'com.adobe.aem.screens.device.pasword.specialchars': opts['comAdobeAemScreensDevicePaswordSpecialchars'],
        'com.adobe.aem.screens.device.pasword.minlowercasechars': opts['comAdobeAemScreensDevicePaswordMinlowercasechars'],
        'com.adobe.aem.screens.device.pasword.minuppercasechars': opts['comAdobeAemScreensDevicePaswordMinuppercasechars'],
        'com.adobe.aem.screens.device.pasword.minnumberchars': opts['comAdobeAemScreensDevicePaswordMinnumberchars'],
        'com.adobe.aem.screens.device.pasword.minspecialchars': opts['comAdobeAemScreensDevicePaswordMinspecialchars'],
        'com.adobe.aem.screens.device.pasword.minlength': opts['comAdobeAemScreensDevicePaswordMinlength'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqScreensDeviceImplDeviceServiceInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.screens.device.impl.DeviceService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.deviceRegistrationTimeout 
     * @param {module:api/ConfigmgrApi~comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo}
     */
    this.comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'deviceRegistrationTimeout': opts['deviceRegistrationTimeout'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.screens.device.registration.impl.RegistrationServiceImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqScreensImplHandlerChannelsUpdateHandler operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqScreensImplHandlerChannelsUpdateHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.cqPagesupdatehandlerImageresourcetypes 
     * @param {Array.<String>} opts.cqPagesupdatehandlerProductresourcetypes 
     * @param {Array.<String>} opts.cqPagesupdatehandlerVideoresourcetypes 
     * @param {Array.<String>} opts.cqPagesupdatehandlerDynamicsequenceresourcetypes 
     * @param {Array.<String>} opts.cqPagesupdatehandlerPreviewmodepaths 
     * @param {module:api/ConfigmgrApi~comAdobeCqScreensImplHandlerChannelsUpdateHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo}
     */
    this.comAdobeCqScreensImplHandlerChannelsUpdateHandler = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'cq.pagesupdatehandler.imageresourcetypes': {
          value: opts['cqPagesupdatehandlerImageresourcetypes'],
          collectionFormat: 'multi'
        },
        'cq.pagesupdatehandler.productresourcetypes': {
          value: opts['cqPagesupdatehandlerProductresourcetypes'],
          collectionFormat: 'multi'
        },
        'cq.pagesupdatehandler.videoresourcetypes': {
          value: opts['cqPagesupdatehandlerVideoresourcetypes'],
          collectionFormat: 'multi'
        },
        'cq.pagesupdatehandler.dynamicsequenceresourcetypes': {
          value: opts['cqPagesupdatehandlerDynamicsequenceresourcetypes'],
          collectionFormat: 'multi'
        },
        'cq.pagesupdatehandler.previewmodepaths': {
          value: opts['cqPagesupdatehandlerPreviewmodepaths'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.screens.impl.handler.ChannelsUpdateHandler', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.schedulerExpression 
     * @param {module:api/ConfigmgrApi~comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo}
     */
    this.comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'scheduler.expression': opts['schedulerExpression'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.screens.impl.jobs.DistributedDevicesStatiUpdateJob', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqScreensImplRemoteImplDistributedHttpClientImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqScreensImplRemoteImplDistributedHttpClientImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.comAdobeAemScreensImplRemoteRequestTimeout 
     * @param {module:api/ConfigmgrApi~comAdobeCqScreensImplRemoteImplDistributedHttpClientImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo}
     */
    this.comAdobeCqScreensImplRemoteImplDistributedHttpClientImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'com.adobe.aem.screens.impl.remote.request_timeout': opts['comAdobeAemScreensImplRemoteRequestTimeout'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.screens.impl.remote.impl.DistributedHttpClientImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqScreensImplScreensChannelPostProcessor operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqScreensImplScreensChannelPostProcessorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqScreensImplScreensChannelPostProcessorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.screensChannelsPropertiesToRemove 
     * @param {module:api/ConfigmgrApi~comAdobeCqScreensImplScreensChannelPostProcessorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqScreensImplScreensChannelPostProcessorInfo}
     */
    this.comAdobeCqScreensImplScreensChannelPostProcessor = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'screens.channels.properties.to.remove': {
          value: opts['screensChannelsPropertiesToRemove'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqScreensImplScreensChannelPostProcessorInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.screens.impl.ScreensChannelPostProcessor', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath 
     * @param {String} opts.comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency 
     * @param {Number} opts.comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout 
     * @param {String} opts.comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients 
     * @param {String} opts.comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver 
     * @param {Number} opts.comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport 
     * @param {Boolean} opts.comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls 
     * @param {String} opts.comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername 
     * @param {String} opts.comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword 
     * @param {module:api/ConfigmgrApi~comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo}
     */
    this.comAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.scheduleFrequency': opts['comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency'],
        'com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.pingTimeout': opts['comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout'],
        'com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.recipients': opts['comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients'],
        'com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpserver': opts['comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver'],
        'com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpport': opts['comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport'],
        'com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.usetls': opts['comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls'],
        'com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.username': opts['comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername'],
        'com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.password': opts['comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.projectPath': {
          value: opts['comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqScreensMqActivemqImplArtemisJMSProvider operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqScreensMqActivemqImplArtemisJMSProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {Number} opts.globalSize 
     * @param {Number} opts.maxDiskUsage 
     * @param {Boolean} opts.persistenceEnabled 
     * @param {Number} opts.threadPoolMaxSize 
     * @param {Number} opts.scheduledThreadPoolMaxSize 
     * @param {Number} opts.gracefulShutdownTimeout 
     * @param {Array.<String>} opts.queues 
     * @param {Array.<String>} opts.topics 
     * @param {Number} opts.addressesMaxDeliveryAttempts 
     * @param {Number} opts.addressesExpiryDelay 
     * @param {String} opts.addressesAddressFullMessagePolicy 
     * @param {Number} opts.addressesMaxSizeBytes 
     * @param {Number} opts.addressesPageSizeBytes 
     * @param {Number} opts.addressesPageCacheMaxSize 
     * @param {String} opts.clusterUser 
     * @param {String} opts.clusterPassword 
     * @param {Number} opts.clusterCallTimeout 
     * @param {Number} opts.clusterCallFailoverTimeout 
     * @param {Number} opts.clusterClientFailureCheckPeriod 
     * @param {Number} opts.clusterNotificationAttempts 
     * @param {Number} opts.clusterNotificationInterval 
     * @param {Number} opts.idCacheSize 
     * @param {Number} opts.clusterConfirmationWindowSize 
     * @param {Number} opts.clusterConnectionTtl 
     * @param {Boolean} opts.clusterDuplicateDetection 
     * @param {Number} opts.clusterInitialConnectAttempts 
     * @param {Number} opts.clusterMaxRetryInterval 
     * @param {Number} opts.clusterMinLargeMessageSize 
     * @param {Number} opts.clusterProducerWindowSize 
     * @param {Number} opts.clusterReconnectAttempts 
     * @param {Number} opts.clusterRetryInterval 
     * @param {Number} opts.clusterRetryIntervalMultiplier 
     * @param {module:api/ConfigmgrApi~comAdobeCqScreensMqActivemqImplArtemisJMSProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo}
     */
    this.comAdobeCqScreensMqActivemqImplArtemisJMSProvider = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'service.ranking': opts['serviceRanking'],
        'global.size': opts['globalSize'],
        'max.disk.usage': opts['maxDiskUsage'],
        'persistence.enabled': opts['persistenceEnabled'],
        'thread.pool.max.size': opts['threadPoolMaxSize'],
        'scheduled.thread.pool.max.size': opts['scheduledThreadPoolMaxSize'],
        'graceful.shutdown.timeout': opts['gracefulShutdownTimeout'],
        'addresses.max.delivery.attempts': opts['addressesMaxDeliveryAttempts'],
        'addresses.expiry.delay': opts['addressesExpiryDelay'],
        'addresses.address.full.message.policy': opts['addressesAddressFullMessagePolicy'],
        'addresses.max.size.bytes': opts['addressesMaxSizeBytes'],
        'addresses.page.size.bytes': opts['addressesPageSizeBytes'],
        'addresses.page.cache.max.size': opts['addressesPageCacheMaxSize'],
        'cluster.user': opts['clusterUser'],
        'cluster.password': opts['clusterPassword'],
        'cluster.call.timeout': opts['clusterCallTimeout'],
        'cluster.call.failover.timeout': opts['clusterCallFailoverTimeout'],
        'cluster.client.failure.check.period': opts['clusterClientFailureCheckPeriod'],
        'cluster.notification.attempts': opts['clusterNotificationAttempts'],
        'cluster.notification.interval': opts['clusterNotificationInterval'],
        'id.cache.size': opts['idCacheSize'],
        'cluster.confirmation.window.size': opts['clusterConfirmationWindowSize'],
        'cluster.connection.ttl': opts['clusterConnectionTtl'],
        'cluster.duplicate.detection': opts['clusterDuplicateDetection'],
        'cluster.initial.connect.attempts': opts['clusterInitialConnectAttempts'],
        'cluster.max.retry.interval': opts['clusterMaxRetryInterval'],
        'cluster.min.large.message.size': opts['clusterMinLargeMessageSize'],
        'cluster.producer.window.size': opts['clusterProducerWindowSize'],
        'cluster.reconnect.attempts': opts['clusterReconnectAttempts'],
        'cluster.retry.interval': opts['clusterRetryInterval'],
        'cluster.retry.interval.multiplier': opts['clusterRetryIntervalMultiplier'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'queues': {
          value: opts['queues'],
          collectionFormat: 'multi'
        },
        'topics': {
          value: opts['topics'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.screens.mq.activemq.impl.ArtemisJMSProvider', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath 
     * @param {String} opts.comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency 
     * @param {module:api/ConfigmgrApi~comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo}
     */
    this.comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.scheduleFrequency': opts['comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.projectPath': {
          value: opts['comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqScreensOfflinecontentImplOfflineContentServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.disableSmartSync 
     * @param {module:api/ConfigmgrApi~comAdobeCqScreensOfflinecontentImplOfflineContentServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo}
     */
    this.comAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'disableSmartSync': opts['disableSmartSync'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.OfflineContentServiceImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqScreensSegmentationImplSegmentationFeatureFlag operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqScreensSegmentationImplSegmentationFeatureFlagCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.enableDataTriggeredContent 
     * @param {module:api/ConfigmgrApi~comAdobeCqScreensSegmentationImplSegmentationFeatureFlagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo}
     */
    this.comAdobeCqScreensSegmentationImplSegmentationFeatureFlag = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'enableDataTriggeredContent': opts['enableDataTriggeredContent'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.screens.segmentation.impl.SegmentationFeatureFlag', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {module:api/ConfigmgrApi~comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo}
     */
    this.comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'hc.tags': {
          value: opts['hcTags'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.HtmlLibraryManagerConfigHealthCheck', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {module:api/ConfigmgrApi~comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo}
     */
    this.comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'hc.tags': {
          value: opts['hcTags'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.WcmFilterHealthCheck', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {String} opts.dispatcherAddress 
     * @param {Array.<String>} opts.dispatcherFilterAllowed 
     * @param {Array.<String>} opts.dispatcherFilterBlocked 
     * @param {module:api/ConfigmgrApi~comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo}
     */
    this.comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'dispatcher.address': opts['dispatcherAddress'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'hc.tags': {
          value: opts['hcTags'],
          collectionFormat: 'multi'
        },
        'dispatcher.filter.allowed': {
          value: opts['dispatcherFilterAllowed'],
          collectionFormat: 'multi'
        },
        'dispatcher.filter.blocked': {
          value: opts['dispatcherFilterBlocked'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.security.hc.dispatcher.impl.DispatcherAccessHealthCheck', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSecurityHcPackagesImplExampleContentHealthCheck operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSecurityHcPackagesImplExampleContentHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {module:api/ConfigmgrApi~comAdobeCqSecurityHcPackagesImplExampleContentHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo}
     */
    this.comAdobeCqSecurityHcPackagesImplExampleContentHealthCheck = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'hc.tags': {
          value: opts['hcTags'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.security.hc.packages.impl.ExampleContentHealthCheck', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSecurityHcWebserverImplClickjackingHealthCheck operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSecurityHcWebserverImplClickjackingHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {String} opts.webserverAddress 
     * @param {module:api/ConfigmgrApi~comAdobeCqSecurityHcWebserverImplClickjackingHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo}
     */
    this.comAdobeCqSecurityHcWebserverImplClickjackingHealthCheck = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'webserver.address': opts['webserverAddress'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'hc.tags': {
          value: opts['hcTags'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.security.hc.webserver.impl.ClickjackingHealthCheck', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialAccountverificationImplAccountManagementConfigIm operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialAccountverificationImplAccountManagementConfigImCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.enable 
     * @param {Number} opts.ttl1 
     * @param {Number} opts.ttl2 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialAccountverificationImplAccountManagementConfigImCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo}
     */
    this.comAdobeCqSocialAccountverificationImplAccountManagementConfigIm = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'enable': opts['enable'],
        'ttl1': opts['ttl1'],
        'ttl2': opts['ttl2'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.accountverification.impl.AccountManagementConfigImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialActivitystreamsClientImplSocialActivityComponen operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialActivitystreamsClientImplSocialActivityComponenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.priority 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialActivitystreamsClientImplSocialActivityComponenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo}
     */
    this.comAdobeCqSocialActivitystreamsClientImplSocialActivityComponen = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'priority': opts['priority'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityComponentFactoryImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.priority 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo}
     */
    this.comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'priority': opts['priority'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityStreamComponentFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialActivitystreamsListenerImplEventListenerHandler operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.eventTopics 
     * @param {String} opts.eventFilter 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo}
     */
    this.comAdobeCqSocialActivitystreamsListenerImplEventListenerHandler = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'event.topics': opts['eventTopics'],
        'event.filter': opts['eventFilter'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.EventListenerHandler', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialActivitystreamsListenerImplModerationEventExten operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialActivitystreamsListenerImplModerationEventExtenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.accepted 
     * @param {Number} opts.ranked 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialActivitystreamsListenerImplModerationEventExtenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo}
     */
    this.comAdobeCqSocialActivitystreamsListenerImplModerationEventExten = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'accepted': opts['accepted'],
        'ranked': opts['ranked'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ModerationEventExtension', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.ranking 
     * @param {Boolean} opts.enable 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo}
     */
    this.comAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'ranking': opts['ranking'],
        'enable': opts['enable'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.RatingEventActivitySuppressor', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialActivitystreamsListenerImplResourceActivityStre operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialActivitystreamsListenerImplResourceActivityStreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.streamPath 
     * @param {String} opts.streamName 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialActivitystreamsListenerImplResourceActivityStreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo}
     */
    this.comAdobeCqSocialActivitystreamsListenerImplResourceActivityStre = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'streamPath': opts['streamPath'],
        'streamName': opts['streamName'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ResourceActivityStreamProviderFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsICallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.maxRetry 
     * @param {Array.<String>} opts.fieldWhitelist 
     * @param {Array.<String>} opts.attachmentTypeBlacklist 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsICallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo}
     */
    this.comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'MaxRetry': opts['maxRetry'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'fieldWhitelist': {
          value: opts['fieldWhitelist'],
          collectionFormat: 'multi'
        },
        'attachmentTypeBlacklist': {
          value: opts['attachmentTypeBlacklist'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.calendar.client.endpoints.impl.CalendarOperationsImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialCalendarClientOperationextensionsEventAttachmen operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialCalendarClientOperationextensionsEventAttachmenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.attachmentTypeBlacklist 
     * @param {Number} opts.extensionOrder 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialCalendarClientOperationextensionsEventAttachmenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo}
     */
    this.comAdobeCqSocialCalendarClientOperationextensionsEventAttachmen = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'attachmentTypeBlacklist': opts['attachmentTypeBlacklist'],
        'extension.order': opts['extensionOrder'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.calendar.client.operationextensions.EventAttachment', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialCalendarServletsTimeZoneServlet operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialCalendarServletsTimeZoneServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialCalendarServletsTimeZoneServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.timezonesExpirytime 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialCalendarServletsTimeZoneServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialCalendarServletsTimeZoneServletInfo}
     */
    this.comAdobeCqSocialCalendarServletsTimeZoneServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'timezones.expirytime': opts['timezonesExpirytime'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialCalendarServletsTimeZoneServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.calendar.servlets.TimeZoneServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.ranking 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo}
     */
    this.comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'ranking': opts['ranking'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentDeleteEventActivitySuppressor', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.fieldWhitelist 
     * @param {Array.<String>} opts.attachmentTypeBlacklist 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo}
     */
    this.comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'fieldWhitelist': {
          value: opts['fieldWhitelist'],
          collectionFormat: 'multi'
        },
        'attachmentTypeBlacklist': {
          value: opts['attachmentTypeBlacklist'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentOperationService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.fieldWhitelist 
     * @param {Array.<String>} opts.attachmentTypeBlacklist 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo}
     */
    this.comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'fieldWhitelist': {
          value: opts['fieldWhitelist'],
          collectionFormat: 'multi'
        },
        'attachmentTypeBlacklist': {
          value: opts['attachmentTypeBlacklist'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.TranslationOperationService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.numUserLimit 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo}
     */
    this.comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'numUserLimit': opts['numUserLimit'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.commons.comments.listing.impl.SearchCommentSocialComponentListProvider', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.enableScheduledPostsSearch 
     * @param {Number} opts.numberOfMinutes 
     * @param {Number} opts.maxSearchLimit 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo}
     */
    this.comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'enableScheduledPostsSearch': opts['enableScheduledPostsSearch'],
        'numberOfMinutes': opts['numberOfMinutes'],
        'maxSearchLimit': opts['maxSearchLimit'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.commons.comments.scheduler.impl.SearchScheduledPosts', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialCommonsCorsCORSAuthenticationFilter operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialCommonsCorsCORSAuthenticationFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.corsEnabling 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialCommonsCorsCORSAuthenticationFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo}
     */
    this.comAdobeCqSocialCommonsCorsCORSAuthenticationFilter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cors.enabling': opts['corsEnabling'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.commons.cors.CORSAuthenticationFilter', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.priorityOrder 
     * @param {Array.<String>} opts.replyEmailPatterns 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo}
     */
    this.comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'priorityOrder': opts['priorityOrder'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'replyEmailPatterns': {
          value: opts['replyEmailPatterns'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.AndroidEmailClientProvider', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.contextPath 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo}
     */
    this.comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'context.path': opts['contextPath'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailBuilderImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.eventTopics 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo}
     */
    this.comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'event.topics': opts['eventTopics'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailEventListener', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.priorityOrder 
     * @param {Array.<String>} opts.replyEmailPatterns 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo}
     */
    this.comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'priorityOrder': opts['priorityOrder'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'replyEmailPatterns': {
          value: opts['replyEmailPatterns'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CustomEmailClientProvider', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.patternTime 
     * @param {String} opts.patternNewline 
     * @param {String} opts.patternDayOfMonth 
     * @param {String} opts.patternMonth 
     * @param {String} opts.patternYear 
     * @param {String} opts.patternDate 
     * @param {String} opts.patternDateTime 
     * @param {String} opts.patternEmail 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo}
     */
    this.comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'pattern.time': opts['patternTime'],
        'pattern.newline': opts['patternNewline'],
        'pattern.dayOfMonth': opts['patternDayOfMonth'],
        'pattern.month': opts['patternMonth'],
        'pattern.year': opts['patternYear'],
        'pattern.date': opts['patternDate'],
        'pattern.dateTime': opts['patternDateTime'],
        'pattern.email': opts['patternEmail'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailQuotedTextPatternsImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.emailName 
     * @param {Boolean} opts.emailCreatePostFromReply 
     * @param {String} opts.emailAddCommentIdTo 
     * @param {Number} opts.emailSubjectMaximumLength 
     * @param {String} opts.emailReplyToAddress 
     * @param {String} opts.emailReplyToDelimiter 
     * @param {String} opts.emailTrackerIdPrefixInSubject 
     * @param {String} opts.emailTrackerIdPrefixInBody 
     * @param {Boolean} opts.emailAsHTML 
     * @param {String} opts.emailDefaultUserName 
     * @param {String} opts.emailTemplatesRootPath 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo}
     */
    this.comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'email.name': opts['emailName'],
        'email.createPostFromReply': opts['emailCreatePostFromReply'],
        'email.addCommentIdTo': opts['emailAddCommentIdTo'],
        'email.subjectMaximumLength': opts['emailSubjectMaximumLength'],
        'email.replyToAddress': opts['emailReplyToAddress'],
        'email.replyToDelimiter': opts['emailReplyToDelimiter'],
        'email.trackerIdPrefixInSubject': opts['emailTrackerIdPrefixInSubject'],
        'email.trackerIdPrefixInBody': opts['emailTrackerIdPrefixInBody'],
        'email.asHTML': opts['emailAsHTML'],
        'email.defaultUserName': opts['emailDefaultUserName'],
        'email.templates.rootPath': opts['emailTemplatesRootPath'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyConfigurationImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.connectProtocol 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo}
     */
    this.comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'connectProtocol': opts['connectProtocol'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyImporter', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.priorityOrder 
     * @param {Array.<String>} opts.replyEmailPatterns 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo}
     */
    this.comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'priorityOrder': opts['priorityOrder'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'replyEmailPatterns': {
          value: opts['replyEmailPatterns'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.GmailEmailClientProvider', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.priorityOrder 
     * @param {Array.<String>} opts.replyEmailPatterns 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo}
     */
    this.comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'priorityOrder': opts['priorityOrder'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'replyEmailPatterns': {
          value: opts['replyEmailPatterns'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.IOSEmailClientProvider', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.priorityOrder 
     * @param {Array.<String>} opts.replyEmailPatterns 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo}
     */
    this.comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'priorityOrder': opts['priorityOrder'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'replyEmailPatterns': {
          value: opts['replyEmailPatterns'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.MacmailEmailClientProvider', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.priorityOrder 
     * @param {Array.<String>} opts.replyEmailPatterns 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo}
     */
    this.comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'priorityOrder': opts['priorityOrder'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'replyEmailPatterns': {
          value: opts['replyEmailPatterns'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.OutLookEmailClientProvider', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.replyEmailPatterns 
     * @param {Number} opts.priorityOrder 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo}
     */
    this.comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'priorityOrder': opts['priorityOrder'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'replyEmailPatterns': {
          value: opts['replyEmailPatterns'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.UnknownEmailClientProvider', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.priorityOrder 
     * @param {Array.<String>} opts.replyEmailPatterns 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo}
     */
    this.comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'priorityOrder': opts['priorityOrder'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'replyEmailPatterns': {
          value: opts['replyEmailPatterns'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.YahooEmailClientProvider', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.numberOfDays 
     * @param {Number} opts.ageOfFile 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo}
     */
    this.comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'numberOfDays': opts['numberOfDays'],
        'ageOfFile': opts['ageOfFile'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.commons.maintainance.impl.DeleteTempUGCImageUploads', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.eventTopics 
     * @param {String} opts.eventFilter 
     * @param {Array.<String>} opts.verbs 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo}
     */
    this.comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'event.topics': opts['eventTopics'],
        'event.filter': opts['eventFilter'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'verbs': {
          value: opts['verbs'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.commons.ugclimiter.impl.UGCLimiterServiceImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.enable 
     * @param {Number} opts.uGCLimit 
     * @param {Number} opts.ugcLimitDuration 
     * @param {Array.<String>} opts.domains 
     * @param {Array.<String>} opts.toList 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo}
     */
    this.comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'enable': opts['enable'],
        'UGCLimit': opts['uGCLimit'],
        'ugcLimitDuration': opts['ugcLimitDuration'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'domains': {
          value: opts['domains'],
          collectionFormat: 'multi'
        },
        'toList': {
          value: opts['toList'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.commons.ugclimitsconfig.impl.CommunityUserUGCLimitsConfigImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialConnectOauthImplFacebookProviderImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialConnectOauthImplFacebookProviderImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.oauthProviderId 
     * @param {String} opts.oauthCloudConfigRoot 
     * @param {String} opts.providerConfigRoot 
     * @param {Boolean} opts.providerConfigCreateTagsEnabled 
     * @param {String} opts.providerConfigUserFolder 
     * @param {Boolean} opts.providerConfigFacebookFetchFields 
     * @param {Array.<String>} opts.providerConfigFacebookFields 
     * @param {Boolean} opts.providerConfigRefreshUserdataEnabled 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialConnectOauthImplFacebookProviderImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo}
     */
    this.comAdobeCqSocialConnectOauthImplFacebookProviderImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'oauth.provider.id': opts['oauthProviderId'],
        'oauth.cloud.config.root': opts['oauthCloudConfigRoot'],
        'provider.config.root': opts['providerConfigRoot'],
        'provider.config.create.tags.enabled': opts['providerConfigCreateTagsEnabled'],
        'provider.config.user.folder': opts['providerConfigUserFolder'],
        'provider.config.facebook.fetch.fields': opts['providerConfigFacebookFetchFields'],
        'provider.config.refresh.userdata.enabled': opts['providerConfigRefreshUserdataEnabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'provider.config.facebook.fields': {
          value: opts['providerConfigFacebookFields'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.FacebookProviderImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.path 
     * @param {Number} opts.serviceRanking 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo}
     */
    this.comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'service.ranking': opts['serviceRanking'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'path': {
          value: opts['path'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthAuthenticationHandler', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.facebook 
     * @param {Array.<String>} opts.twitter 
     * @param {String} opts.providerConfigUserFolder 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo}
     */
    this.comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'provider.config.user.folder': opts['providerConfigUserFolder'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'facebook': {
          value: opts['facebook'],
          collectionFormat: 'multi'
        },
        'twitter': {
          value: opts['twitter'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthUserProfileMapper', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialConnectOauthImplTwitterProviderImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialConnectOauthImplTwitterProviderImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.oauthProviderId 
     * @param {String} opts.oauthCloudConfigRoot 
     * @param {String} opts.providerConfigRoot 
     * @param {String} opts.providerConfigUserFolder 
     * @param {Boolean} opts.providerConfigTwitterEnableParams 
     * @param {Array.<String>} opts.providerConfigTwitterParams 
     * @param {Boolean} opts.providerConfigRefreshUserdataEnabled 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialConnectOauthImplTwitterProviderImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo}
     */
    this.comAdobeCqSocialConnectOauthImplTwitterProviderImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'oauth.provider.id': opts['oauthProviderId'],
        'oauth.cloud.config.root': opts['oauthCloudConfigRoot'],
        'provider.config.root': opts['providerConfigRoot'],
        'provider.config.user.folder': opts['providerConfigUserFolder'],
        'provider.config.twitter.enable.params': opts['providerConfigTwitterEnableParams'],
        'provider.config.refresh.userdata.enabled': opts['providerConfigRefreshUserdataEnabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'provider.config.twitter.params': {
          value: opts['providerConfigTwitterParams'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.TwitterProviderImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.cqSocialContentFragmentsServicesEnabled 
     * @param {Number} opts.cqSocialContentFragmentsServicesWaitTimeSeconds 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo}
     */
    this.comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.social.content.fragments.services.enabled': opts['cqSocialContentFragmentsServicesEnabled'],
        'cq.social.content.fragments.services.waitTimeSeconds': opts['cqSocialContentFragmentsServicesWaitTimeSeconds'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.content.fragments.services.impl.CommunitiesFragmentCreationServiceImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialDatastoreAsImplASResourceProviderFactory operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialDatastoreAsImplASResourceProviderFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.versionId 
     * @param {Boolean} opts.cacheOn 
     * @param {Number} opts.concurrencyLevel 
     * @param {Number} opts.cacheStartSize 
     * @param {Number} opts.cacheTtl 
     * @param {Number} opts.cacheSize 
     * @param {Number} opts.timeLimit 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialDatastoreAsImplASResourceProviderFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo}
     */
    this.comAdobeCqSocialDatastoreAsImplASResourceProviderFactory = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'version.id': opts['versionId'],
        'cache.on': opts['cacheOn'],
        'concurrency.level': opts['concurrencyLevel'],
        'cache.start.size': opts['cacheStartSize'],
        'cache.ttl': opts['cacheTtl'],
        'cache.size': opts['cacheSize'],
        'time.limit': opts['timeLimit'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.datastore.as.impl.ASResourceProviderFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.solrZkTimeout 
     * @param {String} opts.solrCommit 
     * @param {Boolean} opts.cacheOn 
     * @param {Number} opts.concurrencyLevel 
     * @param {Number} opts.cacheStartSize 
     * @param {Number} opts.cacheTtl 
     * @param {Number} opts.cacheSize 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo}
     */
    this.comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'solr.zk.timeout': opts['solrZkTimeout'],
        'solr.commit': opts['solrCommit'],
        'cache.on': opts['cacheOn'],
        'concurrency.level': opts['concurrencyLevel'],
        'cache.start.size': opts['cacheStartSize'],
        'cache.ttl': opts['cacheTtl'],
        'cache.size': opts['cacheSize'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.datastore.op.impl.SocialMSResourceProviderFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.solrZkTimeout 
     * @param {String} opts.solrCommit 
     * @param {Boolean} opts.cacheOn 
     * @param {Number} opts.concurrencyLevel 
     * @param {Number} opts.cacheStartSize 
     * @param {Number} opts.cacheTtl 
     * @param {Number} opts.cacheSize 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo}
     */
    this.comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'solr.zk.timeout': opts['solrZkTimeout'],
        'solr.commit': opts['solrCommit'],
        'cache.on': opts['cacheOn'],
        'concurrency.level': opts['concurrencyLevel'],
        'cache.start.size': opts['cacheStartSize'],
        'cache.ttl': opts['cacheTtl'],
        'cache.size': opts['cacheSize'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.datastore.rdb.impl.SocialRDBResourceProviderFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.isMemberCheck 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo}
     */
    this.comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'isMemberCheck': opts['isMemberCheck'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementLearningPathAdaptorFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.isMemberCheck 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo}
     */
    this.comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'isMemberCheck': opts['isMemberCheck'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementResourceAdaptorFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.fieldWhitelist 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo}
     */
    this.comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'fieldWhitelist': {
          value: opts['fieldWhitelist'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.enablement.learningpath.endpoints.impl.EnablementLearningPathModelOperationService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialEnablementResourceEndpointsImplEnablementResou operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialEnablementResourceEndpointsImplEnablementResouCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.fieldWhitelist 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialEnablementResourceEndpointsImplEnablementResouCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo}
     */
    this.comAdobeCqSocialEnablementResourceEndpointsImplEnablementResou = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'fieldWhitelist': {
          value: opts['fieldWhitelist'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.enablement.resource.endpoints.impl.EnablementResourceModelOperationService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialEnablementServicesImplAuthorMarkerImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialEnablementServicesImplAuthorMarkerImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialEnablementServicesImplAuthorMarkerImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo}
     */
    this.comAdobeCqSocialEnablementServicesImplAuthorMarkerImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'service.ranking': opts['serviceRanking'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.enablement.services.impl.AuthorMarkerImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.slingServletSelectors 
     * @param {String} opts.slingServletExtensions 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo}
     */
    this.comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'sling.servlet.selectors': opts['slingServletSelectors'],
        'sling.servlet.extensions': opts['slingServletExtensions'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.FilelibraryDownloadGetServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.fieldWhitelist 
     * @param {Array.<String>} opts.attachmentTypeBlacklist 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo}
     */
    this.comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'fieldWhitelist': {
          value: opts['fieldWhitelist'],
          collectionFormat: 'multi'
        },
        'attachmentTypeBlacklist': {
          value: opts['attachmentTypeBlacklist'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.impl.FileLibraryOperationsService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialForumClientEndpointsImplForumOperationsService operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialForumClientEndpointsImplForumOperationsServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.fieldWhitelist 
     * @param {Array.<String>} opts.attachmentTypeBlacklist 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialForumClientEndpointsImplForumOperationsServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo}
     */
    this.comAdobeCqSocialForumClientEndpointsImplForumOperationsService = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'fieldWhitelist': {
          value: opts['fieldWhitelist'],
          collectionFormat: 'multi'
        },
        'attachmentTypeBlacklist': {
          value: opts['attachmentTypeBlacklist'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.forum.client.endpoints.impl.ForumOperationsService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialForumDispatcherImplFlushOperations operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialForumDispatcherImplFlushOperationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.extensionOrder 
     * @param {Boolean} opts.flushForumontopic 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialForumDispatcherImplFlushOperationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo}
     */
    this.comAdobeCqSocialForumDispatcherImplFlushOperations = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'extension.order': opts['extensionOrder'],
        'flush.forumontopic': opts['flushForumontopic'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.forum.dispatcher.impl.FlushOperations', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.groupListingPaginationEnable 
     * @param {Boolean} opts.groupListingLazyloadingEnable 
     * @param {Number} opts.pageSize 
     * @param {Number} opts.priority 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo}
     */
    this.comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'group.listing.pagination.enable': opts['groupListingPaginationEnable'],
        'group.listing.lazyloading.enable': opts['groupListingLazyloadingEnable'],
        'page.size': opts['pageSize'],
        'priority': opts['priority'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.group.client.impl.CommunityGroupCollectionComponentFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialGroupImplGroupServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialGroupImplGroupServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialGroupImplGroupServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.maxWaitTime 
     * @param {Number} opts.minWaitBetweenRetries 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialGroupImplGroupServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialGroupImplGroupServiceImplInfo}
     */
    this.comAdobeCqSocialGroupImplGroupServiceImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'maxWaitTime': opts['maxWaitTime'],
        'minWaitBetweenRetries': opts['minWaitBetweenRetries'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialGroupImplGroupServiceImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.group.impl.GroupServiceImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialHandlebarsGuavaTemplateCacheImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialHandlebarsGuavaTemplateCacheImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.parameterGuavaCacheEnabled 
     * @param {String} opts.parameterGuavaCacheParams 
     * @param {Boolean} opts.parameterGuavaCacheReload 
     * @param {Number} opts.serviceRanking 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialHandlebarsGuavaTemplateCacheImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo}
     */
    this.comAdobeCqSocialHandlebarsGuavaTemplateCacheImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'parameter.guava.cache.enabled': opts['parameterGuavaCacheEnabled'],
        'parameter.guava.cache.params': opts['parameterGuavaCacheParams'],
        'parameter.guava.cache.reload': opts['parameterGuavaCacheReload'],
        'service.ranking': opts['serviceRanking'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.handlebars.GuavaTemplateCacheImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.fieldWhitelist 
     * @param {Array.<String>} opts.attachmentTypeBlacklist 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo}
     */
    this.comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'fieldWhitelist': {
          value: opts['fieldWhitelist'],
          collectionFormat: 'multi'
        },
        'attachmentTypeBlacklist': {
          value: opts['attachmentTypeBlacklist'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.ideation.client.endpoints.impl.IdeationOperationsService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.fieldWhitelist 
     * @param {Array.<String>} opts.attachmentTypeBlacklist 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo}
     */
    this.comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'fieldWhitelist': {
          value: opts['fieldWhitelist'],
          collectionFormat: 'multi'
        },
        'attachmentTypeBlacklist': {
          value: opts['attachmentTypeBlacklist'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.journal.client.endpoints.impl.JournalOperationsService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.fieldWhitelist 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo}
     */
    this.comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'fieldWhitelist': {
          value: opts['fieldWhitelist'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberGroupProfileOperationService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.fieldWhitelist 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo}
     */
    this.comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'fieldWhitelist': {
          value: opts['fieldWhitelist'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberUserProfileOperationService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.everyoneLimit 
     * @param {Number} opts.priority 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo}
     */
    this.comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'everyoneLimit': opts['everyoneLimit'],
        'priority': opts['priority'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.members.impl.CommunityMemberGroupProfileComponentFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialMessagingClientEndpointsImplMessagingOperation operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialMessagingClientEndpointsImplMessagingOperationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.messageProperties 
     * @param {Number} opts.messageBoxSizeLimit 
     * @param {Number} opts.messageCountLimit 
     * @param {Boolean} opts.notifyFailure 
     * @param {String} opts.failureMessageFrom 
     * @param {String} opts.failureTemplatePath 
     * @param {Number} opts.maxRetries 
     * @param {Number} opts.minWaitBetweenRetries 
     * @param {Number} opts.countUpdatePoolSize 
     * @param {String} opts.inboxPath 
     * @param {String} opts.sentitemsPath 
     * @param {Boolean} opts.supportAttachments 
     * @param {Boolean} opts.supportGroupMessaging 
     * @param {Number} opts.maxTotalRecipients 
     * @param {Number} opts.batchSize 
     * @param {Number} opts.maxTotalAttachmentSize 
     * @param {Array.<String>} opts.attachmentTypeBlacklist 
     * @param {Array.<String>} opts.allowedAttachmentTypes 
     * @param {String} opts.serviceSelector 
     * @param {Array.<String>} opts.fieldWhitelist 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialMessagingClientEndpointsImplMessagingOperationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo}
     */
    this.comAdobeCqSocialMessagingClientEndpointsImplMessagingOperation = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'messageBoxSizeLimit': opts['messageBoxSizeLimit'],
        'messageCountLimit': opts['messageCountLimit'],
        'notifyFailure': opts['notifyFailure'],
        'failureMessageFrom': opts['failureMessageFrom'],
        'failureTemplatePath': opts['failureTemplatePath'],
        'maxRetries': opts['maxRetries'],
        'minWaitBetweenRetries': opts['minWaitBetweenRetries'],
        'countUpdatePoolSize': opts['countUpdatePoolSize'],
        'inbox.path': opts['inboxPath'],
        'sentitems.path': opts['sentitemsPath'],
        'supportAttachments': opts['supportAttachments'],
        'supportGroupMessaging': opts['supportGroupMessaging'],
        'maxTotalRecipients': opts['maxTotalRecipients'],
        'batchSize': opts['batchSize'],
        'maxTotalAttachmentSize': opts['maxTotalAttachmentSize'],
        'serviceSelector': opts['serviceSelector'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'message.properties': {
          value: opts['messageProperties'],
          collectionFormat: 'multi'
        },
        'attachmentTypeBlacklist': {
          value: opts['attachmentTypeBlacklist'],
          collectionFormat: 'multi'
        },
        'allowedAttachmentTypes': {
          value: opts['allowedAttachmentTypes'],
          collectionFormat: 'multi'
        },
        'fieldWhitelist': {
          value: opts['fieldWhitelist'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.messaging.client.endpoints.impl.MessagingOperationsServiceImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.resourceTypeFilters 
     * @param {Number} opts.priority 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo}
     */
    this.comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'priority': opts['priority'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'resourceType.filters': {
          value: opts['resourceTypeFilters'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.FilterGroupSocialComponentFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialModerationDashboardApiModerationDashboardSocial operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialModerationDashboardApiModerationDashboardSocialCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.priority 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialModerationDashboardApiModerationDashboardSocialCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo}
     */
    this.comAdobeCqSocialModerationDashboardApiModerationDashboardSocial = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'priority': opts['priority'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.ModerationDashboardSocialComponentFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.priority 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo}
     */
    this.comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'priority': opts['priority'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.UserDetailsSocialComponentFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialModerationDashboardInternalImplFilterGroupSociCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.resourceTypeFilters 
     * @param {Number} opts.priority 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialModerationDashboardInternalImplFilterGroupSociCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo}
     */
    this.comAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'priority': opts['priority'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'resourceType.filters': {
          value: opts['resourceTypeFilters'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.internal.impl.FilterGroupSocialComponentFactoryV2', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialNotificationsImplMentionsRouter operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialNotificationsImplMentionsRouterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialNotificationsImplMentionsRouterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.eventTopics 
     * @param {String} opts.eventFilter 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialNotificationsImplMentionsRouterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialNotificationsImplMentionsRouterInfo}
     */
    this.comAdobeCqSocialNotificationsImplMentionsRouter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'event.topics': opts['eventTopics'],
        'event.filter': opts['eventFilter'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialNotificationsImplMentionsRouterInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.notifications.impl.MentionsRouter', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialNotificationsImplNotificationManagerImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialNotificationsImplNotificationManagerImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.maxUnreadNotificationCount 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialNotificationsImplNotificationManagerImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo}
     */
    this.comAdobeCqSocialNotificationsImplNotificationManagerImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'max.unread.notification.count': opts['maxUnreadNotificationCount'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationManagerImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialNotificationsImplNotificationsRouter operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialNotificationsImplNotificationsRouterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialNotificationsImplNotificationsRouterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.eventTopics 
     * @param {String} opts.eventFilter 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialNotificationsImplNotificationsRouterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialNotificationsImplNotificationsRouterInfo}
     */
    this.comAdobeCqSocialNotificationsImplNotificationsRouter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'event.topics': opts['eventTopics'],
        'event.filter': opts['eventFilter'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialNotificationsImplNotificationsRouterInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationsRouter', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.fieldWhitelist 
     * @param {Array.<String>} opts.attachmentTypeBlacklist 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo}
     */
    this.comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'fieldWhitelist': {
          value: opts['fieldWhitelist'],
          collectionFormat: 'multi'
        },
        'attachmentTypeBlacklist': {
          value: opts['attachmentTypeBlacklist'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.qna.client.endpoints.impl.QnaForumOperationsService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportICallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.cqSocialReportingAnalyticsPollingImporterInterval 
     * @param {Number} opts.cqSocialReportingAnalyticsPollingImporterPageSize 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportICallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo}
     */
    this.comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.social.reporting.analytics.polling.importer.interval': opts['cqSocialReportingAnalyticsPollingImporterInterval'],
        'cq.social.reporting.analytics.polling.importer.pageSize': opts['cqSocialReportingAnalyticsPollingImporterPageSize'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportImporterServiceImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.reportFetchDelay 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo}
     */
    this.comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'report.fetch.delay': opts['reportFetchDelay'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportManagementServiceImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.cqSocialConsoleAnalyticsSitesMapping 
     * @param {Number} opts.priority 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo}
     */
    this.comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'priority': opts['priority'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'cq.social.console.analytics.sites.mapping': {
          value: opts['cqSocialConsoleAnalyticsSitesMapping'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.SiteTrendReportSocialComponentFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.fieldWhitelist 
     * @param {Array.<String>} opts.attachmentTypeBlacklist 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo}
     */
    this.comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'fieldWhitelist': {
          value: opts['fieldWhitelist'],
          collectionFormat: 'multi'
        },
        'attachmentTypeBlacklist': {
          value: opts['attachmentTypeBlacklist'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.review.client.endpoints.impl.ReviewOperationsService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialScfCoreOperationsImplSocialOperationsServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.slingServletSelectors 
     * @param {String} opts.slingServletExtensions 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialScfCoreOperationsImplSocialOperationsServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo}
     */
    this.comAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'sling.servlet.selectors': opts['slingServletSelectors'],
        'sling.servlet.extensions': opts['slingServletExtensions'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.scf.core.operations.impl.SocialOperationsServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialScfEndpointsImplDefaultSocialGetServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.slingServletSelectors 
     * @param {String} opts.slingServletExtensions 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialScfEndpointsImplDefaultSocialGetServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo}
     */
    this.comAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'sling.servlet.extensions': opts['slingServletExtensions'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'sling.servlet.selectors': {
          value: opts['slingServletSelectors'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.scf.endpoints.impl.DefaultSocialGetServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialScoringImplScoringEventListener operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialScoringImplScoringEventListenerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialScoringImplScoringEventListenerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.eventTopics 
     * @param {String} opts.eventFilter 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialScoringImplScoringEventListenerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialScoringImplScoringEventListenerInfo}
     */
    this.comAdobeCqSocialScoringImplScoringEventListener = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'event.topics': opts['eventTopics'],
        'event.filter': opts['eventFilter'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialScoringImplScoringEventListenerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.scoring.impl.ScoringEventListener', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.enableFallback 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo}
     */
    this.comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'enableFallback': opts['enableFallback'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.serviceusers.internal.impl.ServiceUserWrapperImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialSiteEndpointsImplSiteOperationService operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialSiteEndpointsImplSiteOperationServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.fieldWhitelist 
     * @param {Array.<String>} opts.sitePathFilters 
     * @param {String} opts.sitePackageGroup 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialSiteEndpointsImplSiteOperationServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo}
     */
    this.comAdobeCqSocialSiteEndpointsImplSiteOperationService = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'sitePackageGroup': opts['sitePackageGroup'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'fieldWhitelist': {
          value: opts['fieldWhitelist'],
          collectionFormat: 'multi'
        },
        'sitePathFilters': {
          value: opts['sitePathFilters'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.site.endpoints.impl.SiteOperationService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.cqSocialConsoleAnalyticsComponents 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo}
     */
    this.comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'cq.social.console.analytics.components': {
          value: opts['cqSocialConsoleAnalyticsComponents'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.site.impl.AnalyticsComponentConfigurationServiceImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialSiteImplSiteConfiguratorImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialSiteImplSiteConfiguratorImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.componentsUsingTags 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialSiteImplSiteConfiguratorImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo}
     */
    this.comAdobeCqSocialSiteImplSiteConfiguratorImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'componentsUsingTags': {
          value: opts['componentsUsingTags'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.site.impl.SiteConfiguratorImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialSrpImplSocialSolrConnector operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialSrpImplSocialSolrConnectorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialSrpImplSocialSolrConnectorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.srpType 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialSrpImplSocialSolrConnectorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialSrpImplSocialSolrConnectorInfo}
     */
    this.comAdobeCqSocialSrpImplSocialSolrConnector = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'srp.type': opts['srpType'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialSrpImplSocialSolrConnectorInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.srp.impl.SocialSolrConnector', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialSyncImplDiffChangesObserver operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialSyncImplDiffChangesObserverCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialSyncImplDiffChangesObserverInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.enabled 
     * @param {String} opts.agentName 
     * @param {String} opts.diffPath 
     * @param {String} opts.propertyNames 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialSyncImplDiffChangesObserverCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialSyncImplDiffChangesObserverInfo}
     */
    this.comAdobeCqSocialSyncImplDiffChangesObserver = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'enabled': opts['enabled'],
        'agentName': opts['agentName'],
        'diffPath': opts['diffPath'],
        'propertyNames': opts['propertyNames'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialSyncImplDiffChangesObserverInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.sync.impl.DiffChangesObserver', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialSyncImplGroupSyncListenerImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialSyncImplGroupSyncListenerImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.nodetypes 
     * @param {Array.<String>} opts.ignorableprops 
     * @param {String} opts.ignorablenodes 
     * @param {Boolean} opts.enabled 
     * @param {String} opts.distfolders 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialSyncImplGroupSyncListenerImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo}
     */
    this.comAdobeCqSocialSyncImplGroupSyncListenerImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'ignorablenodes': opts['ignorablenodes'],
        'enabled': opts['enabled'],
        'distfolders': opts['distfolders'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'nodetypes': {
          value: opts['nodetypes'],
          collectionFormat: 'multi'
        },
        'ignorableprops': {
          value: opts['ignorableprops'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.sync.impl.GroupSyncListenerImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialSyncImplPublisherSyncServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialSyncImplPublisherSyncServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.activeRunModes 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialSyncImplPublisherSyncServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo}
     */
    this.comAdobeCqSocialSyncImplPublisherSyncServiceImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'activeRunModes': {
          value: opts['activeRunModes'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.sync.impl.PublisherSyncServiceImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialSyncImplUserSyncListenerImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialSyncImplUserSyncListenerImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialSyncImplUserSyncListenerImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.nodetypes 
     * @param {Array.<String>} opts.ignorableprops 
     * @param {Array.<String>} opts.ignorablenodes 
     * @param {Boolean} opts.enabled 
     * @param {Array.<String>} opts.distfolders 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialSyncImplUserSyncListenerImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialSyncImplUserSyncListenerImplInfo}
     */
    this.comAdobeCqSocialSyncImplUserSyncListenerImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'enabled': opts['enabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'nodetypes': {
          value: opts['nodetypes'],
          collectionFormat: 'multi'
        },
        'ignorableprops': {
          value: opts['ignorableprops'],
          collectionFormat: 'multi'
        },
        'ignorablenodes': {
          value: opts['ignorablenodes'],
          collectionFormat: 'multi'
        },
        'distfolders': {
          value: opts['distfolders'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialSyncImplUserSyncListenerImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.sync.impl.UserSyncListenerImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialTranslationImplTranslationServiceConfigManager operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialTranslationImplTranslationServiceConfigManagerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.translateLanguage 
     * @param {String} opts.translateDisplay 
     * @param {Boolean} opts.translateAttribution 
     * @param {String} opts.translateCaching 
     * @param {String} opts.translateSmartRendering 
     * @param {String} opts.translateCachingDuration 
     * @param {String} opts.translateSessionSaveInterval 
     * @param {String} opts.translateSessionSaveBatchLimit 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialTranslationImplTranslationServiceConfigManagerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo}
     */
    this.comAdobeCqSocialTranslationImplTranslationServiceConfigManager = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'translate.language': opts['translateLanguage'],
        'translate.display': opts['translateDisplay'],
        'translate.attribution': opts['translateAttribution'],
        'translate.caching': opts['translateCaching'],
        'translate.smart.rendering': opts['translateSmartRendering'],
        'translate.caching.duration': opts['translateCachingDuration'],
        'translate.session.save.interval': opts['translateSessionSaveInterval'],
        'translate.session.save.batchLimit': opts['translateSessionSaveBatchLimit'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.translation.impl.TranslationServiceConfigManager', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialTranslationImplUGCLanguageDetector operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialTranslationImplUGCLanguageDetectorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.eventTopics 
     * @param {String} opts.eventFilter 
     * @param {Array.<String>} opts.translateListenerType 
     * @param {Array.<String>} opts.translatePropertyList 
     * @param {Number} opts.poolSize 
     * @param {Number} opts.maxPoolSize 
     * @param {Number} opts.queueSize 
     * @param {Number} opts.keepAliveTime 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialTranslationImplUGCLanguageDetectorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo}
     */
    this.comAdobeCqSocialTranslationImplUGCLanguageDetector = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'event.topics': opts['eventTopics'],
        'event.filter': opts['eventFilter'],
        'poolSize': opts['poolSize'],
        'maxPoolSize': opts['maxPoolSize'],
        'queueSize': opts['queueSize'],
        'keepAliveTime': opts['keepAliveTime'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'translate.listener.type': {
          value: opts['translateListenerType'],
          collectionFormat: 'multi'
        },
        'translate.property.list': {
          value: opts['translatePropertyList'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.translation.impl.UGCLanguageDetector', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.threadPoolSize 
     * @param {Number} opts.delayTime 
     * @param {Number} opts.workerSleepTime 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo}
     */
    this.comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'threadPoolSize': opts['threadPoolSize'],
        'delayTime': opts['delayTime'],
        'workerSleepTime': opts['workerSleepTime'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.ugcbase.dispatcher.impl.FlushServiceImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.poolSize 
     * @param {Number} opts.maxPoolSize 
     * @param {Number} opts.queueSize 
     * @param {Number} opts.keepAliveTime 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo}
     */
    this.comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'poolSize': opts['poolSize'],
        'maxPoolSize': opts['maxPoolSize'],
        'queueSize': opts['queueSize'],
        'keepAliveTime': opts['keepAliveTime'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.AysncReverseReplicatorImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialUgcbaseImplPublisherConfigurationImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialUgcbaseImplPublisherConfigurationImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.isPrimaryPublisher 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialUgcbaseImplPublisherConfigurationImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo}
     */
    this.comAdobeCqSocialUgcbaseImplPublisherConfigurationImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'isPrimaryPublisher': opts['isPrimaryPublisher'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.PublisherConfigurationImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialUgcbaseImplSocialUtilsImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialUgcbaseImplSocialUtilsImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.legacyCloudUGCPathMapping 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialUgcbaseImplSocialUtilsImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo}
     */
    this.comAdobeCqSocialUgcbaseImplSocialUtilsImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'legacyCloudUGCPathMapping': opts['legacyCloudUGCPathMapping'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.SocialUtilsImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialUgcbaseModerationImplAutoModerationImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialUgcbaseModerationImplAutoModerationImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.automoderationSequence 
     * @param {Boolean} opts.automoderationOnfailurestop 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialUgcbaseModerationImplAutoModerationImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo}
     */
    this.comAdobeCqSocialUgcbaseModerationImplAutoModerationImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'automoderation.onfailurestop': opts['automoderationOnfailurestop'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'automoderation.sequence': {
          value: opts['automoderationSequence'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.AutoModerationImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialUgcbaseModerationImplSentimentProcess operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialUgcbaseModerationImplSentimentProcessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.watchwordsPositive 
     * @param {Array.<String>} opts.watchwordsNegative 
     * @param {String} opts.watchwordsPath 
     * @param {String} opts.sentimentPath 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialUgcbaseModerationImplSentimentProcessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo}
     */
    this.comAdobeCqSocialUgcbaseModerationImplSentimentProcess = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'watchwords.path': opts['watchwordsPath'],
        'sentiment.path': opts['sentimentPath'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'watchwords.positive': {
          value: opts['watchwordsPositive'],
          collectionFormat: 'multi'
        },
        'watchwords.negative': {
          value: opts['watchwordsNegative'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.SentimentProcess', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.defaultAttachmentTypeBlacklist 
     * @param {Array.<String>} opts.baselineAttachmentTypeBlacklist 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo}
     */
    this.comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'default.attachment.type.blacklist': {
          value: opts['defaultAttachmentTypeBlacklist'],
          collectionFormat: 'multi'
        },
        'baseline.attachment.type.blacklist': {
          value: opts['baselineAttachmentTypeBlacklist'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.DefaultAttachmentTypeBlacklistService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.parameterWhitelist 
     * @param {Array.<String>} opts.parameterWhitelistPrefixes 
     * @param {Array.<String>} opts.binaryParameterWhitelist 
     * @param {Array.<String>} opts.modifierWhitelist 
     * @param {Array.<String>} opts.operationWhitelist 
     * @param {Array.<String>} opts.operationWhitelistPrefixes 
     * @param {Array.<String>} opts.typehintWhitelist 
     * @param {Array.<String>} opts.resourcetypeWhitelist 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo}
     */
    this.comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'parameter.whitelist': {
          value: opts['parameterWhitelist'],
          collectionFormat: 'multi'
        },
        'parameter.whitelist.prefixes': {
          value: opts['parameterWhitelistPrefixes'],
          collectionFormat: 'multi'
        },
        'binary.parameter.whitelist': {
          value: opts['binaryParameterWhitelist'],
          collectionFormat: 'multi'
        },
        'modifier.whitelist': {
          value: opts['modifierWhitelist'],
          collectionFormat: 'multi'
        },
        'operation.whitelist': {
          value: opts['operationWhitelist'],
          collectionFormat: 'multi'
        },
        'operation.whitelist.prefixes': {
          value: opts['operationWhitelistPrefixes'],
          collectionFormat: 'multi'
        },
        'typehint.whitelist': {
          value: opts['typehintWhitelist'],
          collectionFormat: 'multi'
        },
        'resourcetype.whitelist': {
          value: opts['resourcetypeWhitelist'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.SaferSlingPostValidatorImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.slingServletExtensions 
     * @param {String} opts.slingServletPaths 
     * @param {String} opts.slingServletMethods 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo}
     */
    this.comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'sling.servlet.extensions': opts['slingServletExtensions'],
        'sling.servlet.paths': opts['slingServletPaths'],
        'sling.servlet.methods': opts['slingServletMethods'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.user.endpoints.impl.UsersGroupFromPublishServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialUserImplTransportHttpToPublisher operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialUserImplTransportHttpToPublisherCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialUserImplTransportHttpToPublisherInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.enable 
     * @param {Array.<String>} opts.agentConfiguration 
     * @param {String} opts.contextPath 
     * @param {Array.<String>} opts.disabledCipherSuites 
     * @param {Array.<String>} opts.enabledCipherSuites 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialUserImplTransportHttpToPublisherCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialUserImplTransportHttpToPublisherInfo}
     */
    this.comAdobeCqSocialUserImplTransportHttpToPublisher = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'enable': opts['enable'],
        'context.path': opts['contextPath'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'agent.configuration': {
          value: opts['agentConfiguration'],
          collectionFormat: 'multi'
        },
        'disabled.cipher.suites': {
          value: opts['disabledCipherSuites'],
          collectionFormat: 'multi'
        },
        'enabled.cipher.suites': {
          value: opts['enabledCipherSuites'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqSocialUserImplTransportHttpToPublisherInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.user.impl.transport.HttpToPublisher', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.resourceTypes 
     * @param {module:api/ConfigmgrApi~comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo}
     */
    this.comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'resource.types': {
          value: opts['resourceTypes'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.ui.wcm.commons.internal.servlets.rte.RTEFilterServletFactory.amended', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqUpgradesCleanupImplUpgradeContentCleanup operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqUpgradesCleanupImplUpgradeContentCleanupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.deletePathRegexps 
     * @param {String} opts.deleteSql2Query 
     * @param {module:api/ConfigmgrApi~comAdobeCqUpgradesCleanupImplUpgradeContentCleanupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo}
     */
    this.comAdobeCqUpgradesCleanupImplUpgradeContentCleanup = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'delete.sql2.query': opts['deleteSql2Query'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'delete.path.regexps': {
          value: opts['deletePathRegexps'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeContentCleanup', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.deleteNameRegexps 
     * @param {module:api/ConfigmgrApi~comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo}
     */
    this.comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'delete.name.regexps': {
          value: opts['deleteNameRegexps'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeInstallFolderCleanup', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.threshold 
     * @param {String} opts.jobTopicName 
     * @param {Boolean} opts.emailEnabled 
     * @param {module:api/ConfigmgrApi~comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo}
     */
    this.comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'threshold': opts['threshold'],
        'jobTopicName': opts['jobTopicName'],
        'emailEnabled': opts['emailEnabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncDeleteConfigProviderService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.schedulerExpression 
     * @param {Number} opts.jobPurgeThreshold 
     * @param {Number} opts.jobPurgeMaxJobs 
     * @param {module:api/ConfigmgrApi~comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo}
     */
    this.comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'scheduler.expression': opts['schedulerExpression'],
        'job.purge.threshold': opts['jobPurgeThreshold'],
        'job.purge.max.jobs': opts['jobPurgeMaxJobs'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncJobCleanUpTask', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.threshold 
     * @param {String} opts.jobTopicName 
     * @param {Boolean} opts.emailEnabled 
     * @param {module:api/ConfigmgrApi~comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo}
     */
    this.comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'threshold': opts['threshold'],
        'jobTopicName': opts['jobTopicName'],
        'emailEnabled': opts['emailEnabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncMoveConfigProviderService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.threshold 
     * @param {String} opts.jobTopicName 
     * @param {Boolean} opts.emailEnabled 
     * @param {module:api/ConfigmgrApi~comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo}
     */
    this.comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'threshold': opts['threshold'],
        'jobTopicName': opts['jobTopicName'],
        'emailEnabled': opts['emailEnabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncPageMoveConfigProviderService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqWcmLaunchesImplLaunchesEventHandler operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqWcmLaunchesImplLaunchesEventHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.eventFilter 
     * @param {Number} opts.launchesEventhandlerThreadpoolMaxsize 
     * @param {String} opts.launchesEventhandlerThreadpoolPriority 
     * @param {Boolean} opts.launchesEventhandlerUpdatelastmodification 
     * @param {module:api/ConfigmgrApi~comAdobeCqWcmLaunchesImplLaunchesEventHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo}
     */
    this.comAdobeCqWcmLaunchesImplLaunchesEventHandler = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'event.filter': opts['eventFilter'],
        'launches.eventhandler.threadpool.maxsize': opts['launchesEventhandlerThreadpoolMaxsize'],
        'launches.eventhandler.threadpool.priority': opts['launchesEventhandlerThreadpoolPriority'],
        'launches.eventhandler.updatelastmodification': opts['launchesEventhandlerUpdatelastmodification'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.wcm.launches.impl.LaunchesEventHandler', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.cqWcmQrcodeServletWhitelist 
     * @param {module:api/ConfigmgrApi~comAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo}
     */
    this.comAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'cq.wcm.qrcode.servlet.whitelist': {
          value: opts['cqWcmQrcodeServletWhitelist'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.wcm.mobile.qrcode.servlet.QRCodeImageGenerator', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqWcmStyleInternalComponentStyleInfoCacheImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.size 
     * @param {module:api/ConfigmgrApi~comAdobeCqWcmStyleInternalComponentStyleInfoCacheImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo}
     */
    this.comAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'size': opts['size'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.wcm.style.internal.ComponentStyleInfoCacheImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.syncTranslationStateSchedulingFormat 
     * @param {String} opts.schedulingRepeatTranslationSchedulingFormat 
     * @param {String} opts.syncTranslationStateLockTimeoutInMinutes 
     * @param {String} opts.exportFormat 
     * @param {module:api/ConfigmgrApi~comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo}
     */
    this.comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'syncTranslationState.schedulingFormat': opts['syncTranslationStateSchedulingFormat'],
        'schedulingRepeatTranslation.schedulingFormat': opts['schedulingRepeatTranslationSchedulingFormat'],
        'syncTranslationState.lockTimeoutInMinutes': opts['syncTranslationStateLockTimeoutInMinutes'],
        'export.format': opts['exportFormat'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.wcm.translation.impl.TranslationPlatformConfigurationImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService operation.
     * @callback module:api/ConfigmgrApi~comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.portalOutboxes 
     * @param {String} opts.draftDataService 
     * @param {String} opts.draftMetadataService 
     * @param {String} opts.submitDataService 
     * @param {String} opts.submitMetadataService 
     * @param {String} opts.pendingSignDataService 
     * @param {String} opts.pendingSignMetadataService 
     * @param {module:api/ConfigmgrApi~comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo}
     */
    this.comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'draft.data.service': opts['draftDataService'],
        'draft.metadata.service': opts['draftMetadataService'],
        'submit.data.service': opts['submitDataService'],
        'submit.metadata.service': opts['submitMetadataService'],
        'pendingSign.data.service': opts['pendingSignDataService'],
        'pendingSign.metadata.service': opts['pendingSignMetadataService'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'portal.outboxes': {
          value: opts['portalOutboxes'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.fd.fp.config.FormsPortalDraftsandSubmissionConfigService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeFdFpConfigFormsPortalSchedulerService operation.
     * @callback module:api/ConfigmgrApi~comAdobeFdFpConfigFormsPortalSchedulerServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.formportalInterval 
     * @param {module:api/ConfigmgrApi~comAdobeFdFpConfigFormsPortalSchedulerServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo}
     */
    this.comAdobeFdFpConfigFormsPortalSchedulerService = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'formportal.interval': opts['formportalInterval'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.fd.fp.config.FormsPortalSchedulerService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeFormsCommonServiceImplDefaultDataProvider operation.
     * @callback module:api/ConfigmgrApi~comAdobeFormsCommonServiceImplDefaultDataProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeFormsCommonServiceImplDefaultDataProviderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.alloweddataFileLocations 
     * @param {module:api/ConfigmgrApi~comAdobeFormsCommonServiceImplDefaultDataProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeFormsCommonServiceImplDefaultDataProviderInfo}
     */
    this.comAdobeFormsCommonServiceImplDefaultDataProvider = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'alloweddataFileLocations': {
          value: opts['alloweddataFileLocations'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeFormsCommonServiceImplDefaultDataProviderInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.forms.common.service.impl.DefaultDataProvider', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp operation.
     * @callback module:api/ConfigmgrApi~comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.tempStorageConfig 
     * @param {module:api/ConfigmgrApi~comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo}
     */
    this.comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'tempStorageConfig': opts['tempStorageConfig'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.forms.common.service.impl.FormsCommonConfigurationServiceImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeFormsCommonServletTempCleanUpTask operation.
     * @callback module:api/ConfigmgrApi~comAdobeFormsCommonServletTempCleanUpTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeFormsCommonServletTempCleanUpTaskInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.schedulerExpression 
     * @param {String} opts.durationForTemporaryStorage 
     * @param {String} opts.durationForAnonymousStorage 
     * @param {module:api/ConfigmgrApi~comAdobeFormsCommonServletTempCleanUpTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeFormsCommonServletTempCleanUpTaskInfo}
     */
    this.comAdobeFormsCommonServletTempCleanUpTask = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'scheduler.expression': opts['schedulerExpression'],
        'Duration for Temporary Storage': opts['durationForTemporaryStorage'],
        'Duration for Anonymous Storage': opts['durationForAnonymousStorage'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeFormsCommonServletTempCleanUpTaskInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.forms.common.servlet.TempCleanUpTask', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteAcpPlatformPlatformServlet operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteAcpPlatformPlatformServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteAcpPlatformPlatformServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.queryLimit 
     * @param {Array.<String>} opts.fileTypeExtensionMap 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteAcpPlatformPlatformServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteAcpPlatformPlatformServletInfo}
     */
    this.comAdobeGraniteAcpPlatformPlatformServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'query.limit': opts['queryLimit'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'file.type.extension.map': {
          value: opts['fileTypeExtensionMap'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteAcpPlatformPlatformServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.acp.platform.PlatformServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteActivitystreamsImplActivityManagerImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteActivitystreamsImplActivityManagerImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.aggregateRelationships 
     * @param {Boolean} opts.aggregateDescendVirtual 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteActivitystreamsImplActivityManagerImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo}
     */
    this.comAdobeGraniteActivitystreamsImplActivityManagerImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'aggregate.descend.virtual': opts['aggregateDescendVirtual'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'aggregate.relationships': {
          value: opts['aggregateRelationships'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.activitystreams.impl.ActivityManagerImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteAnalyzerBaseSystemStatusServlet operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteAnalyzerBaseSystemStatusServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.disabled 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteAnalyzerBaseSystemStatusServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo}
     */
    this.comAdobeGraniteAnalyzerBaseSystemStatusServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'disabled': opts['disabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.analyzer.base.SystemStatusServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.disabled 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo}
     */
    this.comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'disabled': opts['disabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.analyzer.scripts.compile.AllScriptsCompilerServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteApicontrollerFilterResolverHookFactory operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteApicontrollerFilterResolverHookFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.comAdobeCqCdnCdnRewriter 
     * @param {String} opts.comAdobeCqCloudConfigComponents 
     * @param {String} opts.comAdobeCqCloudConfigCore 
     * @param {String} opts.comAdobeCqCloudConfigUi 
     * @param {String} opts.comAdobeCqComAdobeCqEditor 
     * @param {String} opts.comAdobeCqComAdobeCqProjectsCore 
     * @param {String} opts.comAdobeCqComAdobeCqProjectsWcmCore 
     * @param {String} opts.comAdobeCqComAdobeCqUiCommons 
     * @param {String} opts.comAdobeCqComAdobeCqWcmStyle 
     * @param {String} opts.comAdobeCqCqActivitymapIntegration 
     * @param {String} opts.comAdobeCqCqContexthubCommons 
     * @param {String} opts.comAdobeCqCqDtm 
     * @param {String} opts.comAdobeCqCqHealthcheck 
     * @param {String} opts.comAdobeCqCqMultisiteTargeting 
     * @param {String} opts.comAdobeCqCqPreUpgradeCleanup 
     * @param {String} opts.comAdobeCqCqProductInfoProvider 
     * @param {String} opts.comAdobeCqCqRestSites 
     * @param {String} opts.comAdobeCqCqSecurityHc 
     * @param {String} opts.comAdobeCqDamCqDamSvgHandler 
     * @param {String} opts.comAdobeCqDamCqScene7Imaging 
     * @param {String} opts.comAdobeCqDtmReactorCore 
     * @param {String} opts.comAdobeCqDtmReactorUi 
     * @param {String} opts.comAdobeCqExpJspelResolver 
     * @param {String} opts.comAdobeCqInboxCqInbox 
     * @param {String} opts.comAdobeCqJsonSchemaParser 
     * @param {String} opts.comAdobeCqMediaCqMediaPublishingDpsFpCore 
     * @param {String} opts.comAdobeCqMobileCqMobileCaas 
     * @param {String} opts.comAdobeCqMobileCqMobileIndexBuilder 
     * @param {String} opts.comAdobeCqMobileCqMobilePhonegapBuild 
     * @param {String} opts.comAdobeCqMyspell 
     * @param {String} opts.comAdobeCqSampleWeRetailCore 
     * @param {String} opts.comAdobeCqScreensComAdobeCqScreensDcc 
     * @param {String} opts.comAdobeCqScreensComAdobeCqScreensMqCore 
     * @param {String} opts.comAdobeCqSocialCqSocialAsProvider 
     * @param {String} opts.comAdobeCqSocialCqSocialBadgingBasicImpl 
     * @param {String} opts.comAdobeCqSocialCqSocialBadgingImpl 
     * @param {String} opts.comAdobeCqSocialCqSocialCalendarImpl 
     * @param {String} opts.comAdobeCqSocialCqSocialContentFragmentsImpl 
     * @param {String} opts.comAdobeCqSocialCqSocialEnablementImpl 
     * @param {String} opts.comAdobeCqSocialCqSocialGraphImpl 
     * @param {String} opts.comAdobeCqSocialCqSocialIdeationImpl 
     * @param {String} opts.comAdobeCqSocialCqSocialJcrProvider 
     * @param {String} opts.comAdobeCqSocialCqSocialMembersImpl 
     * @param {String} opts.comAdobeCqSocialCqSocialMsProvider 
     * @param {String} opts.comAdobeCqSocialCqSocialNotificationsChannelsWeb 
     * @param {String} opts.comAdobeCqSocialCqSocialNotificationsImpl 
     * @param {String} opts.comAdobeCqSocialCqSocialRdbProvider 
     * @param {String} opts.comAdobeCqSocialCqSocialScfImpl 
     * @param {String} opts.comAdobeCqSocialCqSocialScoringBasicImpl 
     * @param {String} opts.comAdobeCqSocialCqSocialScoringImpl 
     * @param {String} opts.comAdobeCqSocialCqSocialServiceusersImpl 
     * @param {String} opts.comAdobeCqSocialCqSocialSrpImpl 
     * @param {String} opts.comAdobeCqSocialCqSocialUgcbaseImpl 
     * @param {String} opts.comAdobeDamCqDamCfmImpl 
     * @param {String} opts.comAdobeFormsFoundationFormsFoundationBase 
     * @param {String} opts.comAdobeGraniteApicontroller 
     * @param {String} opts.comAdobeGraniteAssetCore 
     * @param {String} opts.comAdobeGraniteAuthSso 
     * @param {String} opts.comAdobeGraniteBundlesHcImpl 
     * @param {String} opts.comAdobeGraniteCompatRouter 
     * @param {String} opts.comAdobeGraniteConf 
     * @param {String} opts.comAdobeGraniteConfUiCore 
     * @param {String} opts.comAdobeGraniteCors 
     * @param {String} opts.comAdobeGraniteCrxExplorer 
     * @param {String} opts.comAdobeGraniteCrxdeLite 
     * @param {String} opts.comAdobeGraniteCryptoConfig 
     * @param {String} opts.comAdobeGraniteCryptoExtension 
     * @param {String} opts.comAdobeGraniteCryptoFile 
     * @param {String} opts.comAdobeGraniteCryptoJcr 
     * @param {String} opts.comAdobeGraniteCsrf 
     * @param {String} opts.comAdobeGraniteDistributionCore 
     * @param {String} opts.comAdobeGraniteDropwizardMetrics 
     * @param {String} opts.comAdobeGraniteFragsImpl 
     * @param {String} opts.comAdobeGraniteGibson 
     * @param {String} opts.comAdobeGraniteInfocollector 
     * @param {String} opts.comAdobeGraniteInstallerFactoryPackages 
     * @param {String} opts.comAdobeGraniteJettySsl 
     * @param {String} opts.comAdobeGraniteJobsAsync 
     * @param {String} opts.comAdobeGraniteMaintenanceOak 
     * @param {String} opts.comAdobeGraniteMonitoringCore 
     * @param {String} opts.comAdobeGraniteQueries 
     * @param {String} opts.comAdobeGraniteReplicationHcImpl 
     * @param {String} opts.comAdobeGraniteRepositoryChecker 
     * @param {String} opts.comAdobeGraniteRepositoryHcImpl 
     * @param {String} opts.comAdobeGraniteRestAssets 
     * @param {String} opts.comAdobeGraniteSecurityUi 
     * @param {String} opts.comAdobeGraniteStartup 
     * @param {String} opts.comAdobeGraniteTagsoup 
     * @param {String} opts.comAdobeGraniteTaskmanagementCore 
     * @param {String} opts.comAdobeGraniteTaskmanagementWorkflow 
     * @param {String} opts.comAdobeGraniteUiClientlibsCompilerLess 
     * @param {String} opts.comAdobeGraniteUiClientlibsProcessorGcc 
     * @param {String} opts.comAdobeGraniteWebconsolePlugins 
     * @param {String} opts.comAdobeGraniteWorkflowConsole 
     * @param {String} opts.comAdobeXmpWorkerFilesNativeFragmentLinux 
     * @param {String} opts.comAdobeXmpWorkerFilesNativeFragmentMacosx 
     * @param {String} opts.comAdobeXmpWorkerFilesNativeFragmentWin 
     * @param {String} opts.comDayCommonsOsgiWrapperSimpleJndi 
     * @param {String} opts.comDayCqCqAuthhandler 
     * @param {String} opts.comDayCqCqCompatConfigupdate 
     * @param {String} opts.comDayCqCqLicensebranding 
     * @param {String} opts.comDayCqCqNotifcationImpl 
     * @param {String} opts.comDayCqCqReplicationAudit 
     * @param {String} opts.comDayCqCqSearchExt 
     * @param {String} opts.comDayCqDamCqDamAnnotationPrint 
     * @param {String} opts.comDayCqDamCqDamAssetUsage 
     * @param {String} opts.comDayCqDamCqDamS7dam 
     * @param {String} opts.comDayCqDamCqDamSimilaritysearch 
     * @param {String} opts.comDayCqDamDamWebdavSupport 
     * @param {String} opts.comDayCqPreUpgradeTasks 
     * @param {String} opts.comDayCqReplicationExtensions 
     * @param {String} opts.comDayCqWcmCqMsmCore 
     * @param {String} opts.comDayCqWcmCqWcmTranslation 
     * @param {String} opts.dayCommonsJrawio 
     * @param {String} opts.orgApacheAriesJmxWhiteboard 
     * @param {String} opts.orgApacheFelixHttpSslfilter 
     * @param {String} opts.orgApacheFelixOrgApacheFelixThreaddump 
     * @param {String} opts.orgApacheFelixWebconsolePluginsDs 
     * @param {String} opts.orgApacheFelixWebconsolePluginsEvent 
     * @param {String} opts.orgApacheFelixWebconsolePluginsMemoryusage 
     * @param {String} opts.orgApacheFelixWebconsolePluginsPackageadmin 
     * @param {String} opts.orgApacheJackrabbitOakAuthLdap 
     * @param {String} opts.orgApacheJackrabbitOakSegmentTar 
     * @param {String} opts.orgApacheJackrabbitOakSolrOsgi 
     * @param {String} opts.orgApacheSlingBundleresourceImpl 
     * @param {String} opts.orgApacheSlingCommonsFsclassloader 
     * @param {String} opts.orgApacheSlingCommonsLogWebconsole 
     * @param {String} opts.orgApacheSlingDatasource 
     * @param {String} opts.orgApacheSlingDiscoveryBase 
     * @param {String} opts.orgApacheSlingDiscoveryOak 
     * @param {String} opts.orgApacheSlingDiscoverySupport 
     * @param {String} opts.orgApacheSlingDistributionApi 
     * @param {String} opts.orgApacheSlingDistributionCore 
     * @param {String} opts.orgApacheSlingExtensionsWebconsolesecurityprovider 
     * @param {String} opts.orgApacheSlingHcWebconsole 
     * @param {String} opts.orgApacheSlingInstallerConsole 
     * @param {String} opts.orgApacheSlingInstallerProviderFile 
     * @param {String} opts.orgApacheSlingInstallerProviderJcr 
     * @param {String} opts.orgApacheSlingJcrDavex 
     * @param {String} opts.orgApacheSlingJcrResourcesecurity 
     * @param {String} opts.orgApacheSlingJmxProvider 
     * @param {String} opts.orgApacheSlingLaunchpadInstaller 
     * @param {String} opts.orgApacheSlingModelsImpl 
     * @param {String} opts.orgApacheSlingRepoinitParser 
     * @param {String} opts.orgApacheSlingResourceInventory 
     * @param {String} opts.orgApacheSlingResourceresolver 
     * @param {String} opts.orgApacheSlingScriptingJavascript 
     * @param {String} opts.orgApacheSlingScriptingJst 
     * @param {String} opts.orgApacheSlingScriptingSightlyJsProvider 
     * @param {String} opts.orgApacheSlingScriptingSightlyModelsProvider 
     * @param {String} opts.orgApacheSlingSecurity 
     * @param {String} opts.orgApacheSlingServletsCompat 
     * @param {String} opts.orgApacheSlingServletsGet 
     * @param {String} opts.orgApacheSlingStartupfilterDisabler 
     * @param {String} opts.orgApacheSlingTracer 
     * @param {String} opts.weRetailClientAppCore 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteApicontrollerFilterResolverHookFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo}
     */
    this.comAdobeGraniteApicontrollerFilterResolverHookFactory = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'com.adobe.cq.cdn.cdn-rewriter': opts['comAdobeCqCdnCdnRewriter'],
        'com.adobe.cq.cloud-config.components': opts['comAdobeCqCloudConfigComponents'],
        'com.adobe.cq.cloud-config.core': opts['comAdobeCqCloudConfigCore'],
        'com.adobe.cq.cloud-config.ui': opts['comAdobeCqCloudConfigUi'],
        'com.adobe.cq.com.adobe.cq.editor': opts['comAdobeCqComAdobeCqEditor'],
        'com.adobe.cq.com.adobe.cq.projects.core': opts['comAdobeCqComAdobeCqProjectsCore'],
        'com.adobe.cq.com.adobe.cq.projects.wcm.core': opts['comAdobeCqComAdobeCqProjectsWcmCore'],
        'com.adobe.cq.com.adobe.cq.ui.commons': opts['comAdobeCqComAdobeCqUiCommons'],
        'com.adobe.cq.com.adobe.cq.wcm.style': opts['comAdobeCqComAdobeCqWcmStyle'],
        'com.adobe.cq.cq-activitymap-integration': opts['comAdobeCqCqActivitymapIntegration'],
        'com.adobe.cq.cq-contexthub-commons': opts['comAdobeCqCqContexthubCommons'],
        'com.adobe.cq.cq-dtm': opts['comAdobeCqCqDtm'],
        'com.adobe.cq.cq-healthcheck': opts['comAdobeCqCqHealthcheck'],
        'com.adobe.cq.cq-multisite-targeting': opts['comAdobeCqCqMultisiteTargeting'],
        'com.adobe.cq.cq-pre-upgrade-cleanup': opts['comAdobeCqCqPreUpgradeCleanup'],
        'com.adobe.cq.cq-product-info-provider': opts['comAdobeCqCqProductInfoProvider'],
        'com.adobe.cq.cq-rest-sites': opts['comAdobeCqCqRestSites'],
        'com.adobe.cq.cq-security-hc': opts['comAdobeCqCqSecurityHc'],
        'com.adobe.cq.dam.cq-dam-svg-handler': opts['comAdobeCqDamCqDamSvgHandler'],
        'com.adobe.cq.dam.cq-scene7-imaging': opts['comAdobeCqDamCqScene7Imaging'],
        'com.adobe.cq.dtm-reactor.core': opts['comAdobeCqDtmReactorCore'],
        'com.adobe.cq.dtm-reactor.ui': opts['comAdobeCqDtmReactorUi'],
        'com.adobe.cq.exp-jspel-resolver': opts['comAdobeCqExpJspelResolver'],
        'com.adobe.cq.inbox.cq-inbox': opts['comAdobeCqInboxCqInbox'],
        'com.adobe.cq.json-schema-parser': opts['comAdobeCqJsonSchemaParser'],
        'com.adobe.cq.media.cq-media-publishing-dps-fp-core': opts['comAdobeCqMediaCqMediaPublishingDpsFpCore'],
        'com.adobe.cq.mobile.cq-mobile-caas': opts['comAdobeCqMobileCqMobileCaas'],
        'com.adobe.cq.mobile.cq-mobile-index-builder': opts['comAdobeCqMobileCqMobileIndexBuilder'],
        'com.adobe.cq.mobile.cq-mobile-phonegap-build': opts['comAdobeCqMobileCqMobilePhonegapBuild'],
        'com.adobe.cq.myspell': opts['comAdobeCqMyspell'],
        'com.adobe.cq.sample.we.retail.core': opts['comAdobeCqSampleWeRetailCore'],
        'com.adobe.cq.screens.com.adobe.cq.screens.dcc': opts['comAdobeCqScreensComAdobeCqScreensDcc'],
        'com.adobe.cq.screens.com.adobe.cq.screens.mq.core': opts['comAdobeCqScreensComAdobeCqScreensMqCore'],
        'com.adobe.cq.social.cq-social-as-provider': opts['comAdobeCqSocialCqSocialAsProvider'],
        'com.adobe.cq.social.cq-social-badging-basic-impl': opts['comAdobeCqSocialCqSocialBadgingBasicImpl'],
        'com.adobe.cq.social.cq-social-badging-impl': opts['comAdobeCqSocialCqSocialBadgingImpl'],
        'com.adobe.cq.social.cq-social-calendar-impl': opts['comAdobeCqSocialCqSocialCalendarImpl'],
        'com.adobe.cq.social.cq-social-content-fragments-impl': opts['comAdobeCqSocialCqSocialContentFragmentsImpl'],
        'com.adobe.cq.social.cq-social-enablement-impl': opts['comAdobeCqSocialCqSocialEnablementImpl'],
        'com.adobe.cq.social.cq-social-graph-impl': opts['comAdobeCqSocialCqSocialGraphImpl'],
        'com.adobe.cq.social.cq-social-ideation-impl': opts['comAdobeCqSocialCqSocialIdeationImpl'],
        'com.adobe.cq.social.cq-social-jcr-provider': opts['comAdobeCqSocialCqSocialJcrProvider'],
        'com.adobe.cq.social.cq-social-members-impl': opts['comAdobeCqSocialCqSocialMembersImpl'],
        'com.adobe.cq.social.cq-social-ms-provider': opts['comAdobeCqSocialCqSocialMsProvider'],
        'com.adobe.cq.social.cq-social-notifications-channels-web': opts['comAdobeCqSocialCqSocialNotificationsChannelsWeb'],
        'com.adobe.cq.social.cq-social-notifications-impl': opts['comAdobeCqSocialCqSocialNotificationsImpl'],
        'com.adobe.cq.social.cq-social-rdb-provider': opts['comAdobeCqSocialCqSocialRdbProvider'],
        'com.adobe.cq.social.cq-social-scf-impl': opts['comAdobeCqSocialCqSocialScfImpl'],
        'com.adobe.cq.social.cq-social-scoring-basic-impl': opts['comAdobeCqSocialCqSocialScoringBasicImpl'],
        'com.adobe.cq.social.cq-social-scoring-impl': opts['comAdobeCqSocialCqSocialScoringImpl'],
        'com.adobe.cq.social.cq-social-serviceusers-impl': opts['comAdobeCqSocialCqSocialServiceusersImpl'],
        'com.adobe.cq.social.cq-social-srp-impl': opts['comAdobeCqSocialCqSocialSrpImpl'],
        'com.adobe.cq.social.cq-social-ugcbase-impl': opts['comAdobeCqSocialCqSocialUgcbaseImpl'],
        'com.adobe.dam.cq-dam-cfm-impl': opts['comAdobeDamCqDamCfmImpl'],
        'com.adobe.forms.foundation-forms-foundation-base': opts['comAdobeFormsFoundationFormsFoundationBase'],
        'com.adobe.granite.apicontroller': opts['comAdobeGraniteApicontroller'],
        'com.adobe.granite.asset.core': opts['comAdobeGraniteAssetCore'],
        'com.adobe.granite.auth.sso': opts['comAdobeGraniteAuthSso'],
        'com.adobe.granite.bundles.hc.impl': opts['comAdobeGraniteBundlesHcImpl'],
        'com.adobe.granite.compat-router': opts['comAdobeGraniteCompatRouter'],
        'com.adobe.granite.conf': opts['comAdobeGraniteConf'],
        'com.adobe.granite.conf.ui.core': opts['comAdobeGraniteConfUiCore'],
        'com.adobe.granite.cors': opts['comAdobeGraniteCors'],
        'com.adobe.granite.crx-explorer': opts['comAdobeGraniteCrxExplorer'],
        'com.adobe.granite.crxde-lite': opts['comAdobeGraniteCrxdeLite'],
        'com.adobe.granite.crypto.config': opts['comAdobeGraniteCryptoConfig'],
        'com.adobe.granite.crypto.extension': opts['comAdobeGraniteCryptoExtension'],
        'com.adobe.granite.crypto.file': opts['comAdobeGraniteCryptoFile'],
        'com.adobe.granite.crypto.jcr': opts['comAdobeGraniteCryptoJcr'],
        'com.adobe.granite.csrf': opts['comAdobeGraniteCsrf'],
        'com.adobe.granite.distribution.core': opts['comAdobeGraniteDistributionCore'],
        'com.adobe.granite.dropwizard.metrics': opts['comAdobeGraniteDropwizardMetrics'],
        'com.adobe.granite.frags.impl': opts['comAdobeGraniteFragsImpl'],
        'com.adobe.granite.gibson': opts['comAdobeGraniteGibson'],
        'com.adobe.granite.infocollector': opts['comAdobeGraniteInfocollector'],
        'com.adobe.granite.installer.factory.packages': opts['comAdobeGraniteInstallerFactoryPackages'],
        'com.adobe.granite.jetty.ssl': opts['comAdobeGraniteJettySsl'],
        'com.adobe.granite.jobs.async': opts['comAdobeGraniteJobsAsync'],
        'com.adobe.granite.maintenance.oak': opts['comAdobeGraniteMaintenanceOak'],
        'com.adobe.granite.monitoring.core': opts['comAdobeGraniteMonitoringCore'],
        'com.adobe.granite.queries': opts['comAdobeGraniteQueries'],
        'com.adobe.granite.replication.hc.impl': opts['comAdobeGraniteReplicationHcImpl'],
        'com.adobe.granite.repository.checker': opts['comAdobeGraniteRepositoryChecker'],
        'com.adobe.granite.repository.hc.impl': opts['comAdobeGraniteRepositoryHcImpl'],
        'com.adobe.granite.rest.assets': opts['comAdobeGraniteRestAssets'],
        'com.adobe.granite.security.ui': opts['comAdobeGraniteSecurityUi'],
        'com.adobe.granite.startup': opts['comAdobeGraniteStartup'],
        'com.adobe.granite.tagsoup': opts['comAdobeGraniteTagsoup'],
        'com.adobe.granite.taskmanagement.core': opts['comAdobeGraniteTaskmanagementCore'],
        'com.adobe.granite.taskmanagement.workflow': opts['comAdobeGraniteTaskmanagementWorkflow'],
        'com.adobe.granite.ui.clientlibs.compiler.less': opts['comAdobeGraniteUiClientlibsCompilerLess'],
        'com.adobe.granite.ui.clientlibs.processor.gcc': opts['comAdobeGraniteUiClientlibsProcessorGcc'],
        'com.adobe.granite.webconsole.plugins': opts['comAdobeGraniteWebconsolePlugins'],
        'com.adobe.granite.workflow.console': opts['comAdobeGraniteWorkflowConsole'],
        'com.adobe.xmp.worker.files.native.fragment.linux': opts['comAdobeXmpWorkerFilesNativeFragmentLinux'],
        'com.adobe.xmp.worker.files.native.fragment.macosx': opts['comAdobeXmpWorkerFilesNativeFragmentMacosx'],
        'com.adobe.xmp.worker.files.native.fragment.win': opts['comAdobeXmpWorkerFilesNativeFragmentWin'],
        'com.day.commons.osgi.wrapper.simple-jndi': opts['comDayCommonsOsgiWrapperSimpleJndi'],
        'com.day.cq.cq-authhandler': opts['comDayCqCqAuthhandler'],
        'com.day.cq.cq-compat-configupdate': opts['comDayCqCqCompatConfigupdate'],
        'com.day.cq.cq-licensebranding': opts['comDayCqCqLicensebranding'],
        'com.day.cq.cq-notifcation-impl': opts['comDayCqCqNotifcationImpl'],
        'com.day.cq.cq-replication-audit': opts['comDayCqCqReplicationAudit'],
        'com.day.cq.cq-search-ext': opts['comDayCqCqSearchExt'],
        'com.day.cq.dam.cq-dam-annotation-print': opts['comDayCqDamCqDamAnnotationPrint'],
        'com.day.cq.dam.cq-dam-asset-usage': opts['comDayCqDamCqDamAssetUsage'],
        'com.day.cq.dam.cq-dam-s7dam': opts['comDayCqDamCqDamS7dam'],
        'com.day.cq.dam.cq-dam-similaritysearch': opts['comDayCqDamCqDamSimilaritysearch'],
        'com.day.cq.dam.dam-webdav-support': opts['comDayCqDamDamWebdavSupport'],
        'com.day.cq.pre-upgrade-tasks': opts['comDayCqPreUpgradeTasks'],
        'com.day.cq.replication.extensions': opts['comDayCqReplicationExtensions'],
        'com.day.cq.wcm.cq-msm-core': opts['comDayCqWcmCqMsmCore'],
        'com.day.cq.wcm.cq-wcm-translation': opts['comDayCqWcmCqWcmTranslation'],
        'day-commons-jrawio': opts['dayCommonsJrawio'],
        'org.apache.aries.jmx.whiteboard': opts['orgApacheAriesJmxWhiteboard'],
        'org.apache.felix.http.sslfilter': opts['orgApacheFelixHttpSslfilter'],
        'org.apache.felix.org.apache.felix.threaddump': opts['orgApacheFelixOrgApacheFelixThreaddump'],
        'org.apache.felix.webconsole.plugins.ds': opts['orgApacheFelixWebconsolePluginsDs'],
        'org.apache.felix.webconsole.plugins.event': opts['orgApacheFelixWebconsolePluginsEvent'],
        'org.apache.felix.webconsole.plugins.memoryusage': opts['orgApacheFelixWebconsolePluginsMemoryusage'],
        'org.apache.felix.webconsole.plugins.packageadmin': opts['orgApacheFelixWebconsolePluginsPackageadmin'],
        'org.apache.jackrabbit.oak-auth-ldap': opts['orgApacheJackrabbitOakAuthLdap'],
        'org.apache.jackrabbit.oak-segment-tar': opts['orgApacheJackrabbitOakSegmentTar'],
        'org.apache.jackrabbit.oak-solr-osgi': opts['orgApacheJackrabbitOakSolrOsgi'],
        'org.apache.sling.bundleresource.impl': opts['orgApacheSlingBundleresourceImpl'],
        'org.apache.sling.commons.fsclassloader': opts['orgApacheSlingCommonsFsclassloader'],
        'org.apache.sling.commons.log.webconsole': opts['orgApacheSlingCommonsLogWebconsole'],
        'org.apache.sling.datasource': opts['orgApacheSlingDatasource'],
        'org.apache.sling.discovery.base': opts['orgApacheSlingDiscoveryBase'],
        'org.apache.sling.discovery.oak': opts['orgApacheSlingDiscoveryOak'],
        'org.apache.sling.discovery.support': opts['orgApacheSlingDiscoverySupport'],
        'org.apache.sling.distribution.api': opts['orgApacheSlingDistributionApi'],
        'org.apache.sling.distribution.core': opts['orgApacheSlingDistributionCore'],
        'org.apache.sling.extensions.webconsolesecurityprovider': opts['orgApacheSlingExtensionsWebconsolesecurityprovider'],
        'org.apache.sling.hc.webconsole': opts['orgApacheSlingHcWebconsole'],
        'org.apache.sling.installer.console': opts['orgApacheSlingInstallerConsole'],
        'org.apache.sling.installer.provider.file': opts['orgApacheSlingInstallerProviderFile'],
        'org.apache.sling.installer.provider.jcr': opts['orgApacheSlingInstallerProviderJcr'],
        'org.apache.sling.jcr.davex': opts['orgApacheSlingJcrDavex'],
        'org.apache.sling.jcr.resourcesecurity': opts['orgApacheSlingJcrResourcesecurity'],
        'org.apache.sling.jmx.provider': opts['orgApacheSlingJmxProvider'],
        'org.apache.sling.launchpad.installer': opts['orgApacheSlingLaunchpadInstaller'],
        'org.apache.sling.models.impl': opts['orgApacheSlingModelsImpl'],
        'org.apache.sling.repoinit.parser': opts['orgApacheSlingRepoinitParser'],
        'org.apache.sling.resource.inventory': opts['orgApacheSlingResourceInventory'],
        'org.apache.sling.resourceresolver': opts['orgApacheSlingResourceresolver'],
        'org.apache.sling.scripting.javascript': opts['orgApacheSlingScriptingJavascript'],
        'org.apache.sling.scripting.jst': opts['orgApacheSlingScriptingJst'],
        'org.apache.sling.scripting.sightly.js.provider': opts['orgApacheSlingScriptingSightlyJsProvider'],
        'org.apache.sling.scripting.sightly.models.provider': opts['orgApacheSlingScriptingSightlyModelsProvider'],
        'org.apache.sling.security': opts['orgApacheSlingSecurity'],
        'org.apache.sling.servlets.compat': opts['orgApacheSlingServletsCompat'],
        'org.apache.sling.servlets.get': opts['orgApacheSlingServletsGet'],
        'org.apache.sling.startupfilter.disabler': opts['orgApacheSlingStartupfilterDisabler'],
        'org.apache.sling.tracer': opts['orgApacheSlingTracer'],
        'we.retail.client.app.core': opts['weRetailClientAppCore'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.apicontroller.FilterResolverHookFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteAuthCertImplClientCertAuthHandler operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteAuthCertImplClientCertAuthHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.path 
     * @param {Number} opts.serviceRanking 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteAuthCertImplClientCertAuthHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo}
     */
    this.comAdobeGraniteAuthCertImplClientCertAuthHandler = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'path': opts['path'],
        'service.ranking': opts['serviceRanking'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.auth.cert.impl.ClientCertAuthHandler', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteAuthIms operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteAuthImsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteAuthImsInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.configid 
     * @param {String} opts.scope 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteAuthImsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteAuthImsInfo}
     */
    this.comAdobeGraniteAuthIms = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'configid': opts['configid'],
        'scope': opts['scope'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteAuthImsInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.auth.ims', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.oauthProviderId 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo}
     */
    this.comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'oauth.provider.id': opts['oauthProviderId'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.auth.ims.impl.ExternalUserIdMappingProviderExtension', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.authImsClientSecret 
     * @param {String} opts.customizerType 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo}
     */
    this.comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'auth.ims.client.secret': opts['authImsClientSecret'],
        'customizer.type': opts['customizerType'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSAccessTokenRequestCustomizerImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.oauthProviderId 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo}
     */
    this.comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'oauth.provider.id': opts['oauthProviderId'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSInstanceCredentialsValidator', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteAuthImsImplIMSProviderImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteAuthImsImplIMSProviderImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteAuthImsImplIMSProviderImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.oauthProviderId 
     * @param {String} opts.oauthProviderImsAuthorizationUrl 
     * @param {String} opts.oauthProviderImsTokenUrl 
     * @param {String} opts.oauthProviderImsProfileUrl 
     * @param {Array.<String>} opts.oauthProviderImsExtendedDetailsUrls 
     * @param {String} opts.oauthProviderImsValidateTokenUrl 
     * @param {String} opts.oauthProviderImsSessionProperty 
     * @param {String} opts.oauthProviderImsServiceTokenClientId 
     * @param {String} opts.oauthProviderImsServiceTokenClientSecret 
     * @param {String} opts.oauthProviderImsServiceToken 
     * @param {String} opts.imsOrgRef 
     * @param {Array.<String>} opts.imsGroupMapping 
     * @param {Boolean} opts.oauthProviderImsOnlyLicenseGroup 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteAuthImsImplIMSProviderImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteAuthImsImplIMSProviderImplInfo}
     */
    this.comAdobeGraniteAuthImsImplIMSProviderImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'oauth.provider.id': opts['oauthProviderId'],
        'oauth.provider.ims.authorization.url': opts['oauthProviderImsAuthorizationUrl'],
        'oauth.provider.ims.token.url': opts['oauthProviderImsTokenUrl'],
        'oauth.provider.ims.profile.url': opts['oauthProviderImsProfileUrl'],
        'oauth.provider.ims.validate.token.url': opts['oauthProviderImsValidateTokenUrl'],
        'oauth.provider.ims.session.property': opts['oauthProviderImsSessionProperty'],
        'oauth.provider.ims.service.token.client.id': opts['oauthProviderImsServiceTokenClientId'],
        'oauth.provider.ims.service.token.client.secret': opts['oauthProviderImsServiceTokenClientSecret'],
        'oauth.provider.ims.service.token': opts['oauthProviderImsServiceToken'],
        'ims.org.ref': opts['imsOrgRef'],
        'oauth.provider.ims.only.license.group': opts['oauthProviderImsOnlyLicenseGroup'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'oauth.provider.ims.extended.details.urls': {
          value: opts['oauthProviderImsExtendedDetailsUrls'],
          collectionFormat: 'multi'
        },
        'ims.group.mapping': {
          value: opts['imsGroupMapping'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteAuthImsImplIMSProviderImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSProviderImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteAuthImsImplImsConfigProviderImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteAuthImsImplImsConfigProviderImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.oauthConfigmanagerImsConfigid 
     * @param {String} opts.imsOwningEntity 
     * @param {String} opts.aemInstanceId 
     * @param {String} opts.imsServiceCode 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteAuthImsImplImsConfigProviderImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo}
     */
    this.comAdobeGraniteAuthImsImplImsConfigProviderImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'oauth.configmanager.ims.configid': opts['oauthConfigmanagerImsConfigid'],
        'ims.owningEntity': opts['imsOwningEntity'],
        'aem.instanceId': opts['aemInstanceId'],
        'ims.serviceCode': opts['imsServiceCode'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.auth.ims.impl.ImsConfigProviderImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteAuthOauthAccesstokenProvider operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteAuthOauthAccesstokenProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteAuthOauthAccesstokenProviderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {String} opts.authTokenProviderTitle 
     * @param {Array.<String>} opts.authTokenProviderDefaultClaims 
     * @param {String} opts.authTokenProviderEndpoint 
     * @param {String} opts.authAccessTokenRequest 
     * @param {String} opts.authTokenProviderKeypairAlias 
     * @param {Number} opts.authTokenProviderConnTimeout 
     * @param {Number} opts.authTokenProviderSoTimeout 
     * @param {String} opts.authTokenProviderClientId 
     * @param {String} opts.authTokenProviderScope 
     * @param {Boolean} opts.authTokenProviderReuseAccessToken 
     * @param {Boolean} opts.authTokenProviderRelaxedSsl 
     * @param {String} opts.tokenRequestCustomizerType 
     * @param {String} opts.authTokenValidatorType 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteAuthOauthAccesstokenProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteAuthOauthAccesstokenProviderInfo}
     */
    this.comAdobeGraniteAuthOauthAccesstokenProvider = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'name': opts['name'],
        'auth.token.provider.title': opts['authTokenProviderTitle'],
        'auth.token.provider.endpoint': opts['authTokenProviderEndpoint'],
        'auth.access.token.request': opts['authAccessTokenRequest'],
        'auth.token.provider.keypair.alias': opts['authTokenProviderKeypairAlias'],
        'auth.token.provider.conn.timeout': opts['authTokenProviderConnTimeout'],
        'auth.token.provider.so.timeout': opts['authTokenProviderSoTimeout'],
        'auth.token.provider.client.id': opts['authTokenProviderClientId'],
        'auth.token.provider.scope': opts['authTokenProviderScope'],
        'auth.token.provider.reuse.access.token': opts['authTokenProviderReuseAccessToken'],
        'auth.token.provider.relaxed.ssl': opts['authTokenProviderRelaxedSsl'],
        'token.request.customizer.type': opts['tokenRequestCustomizerType'],
        'auth.token.validator.type': opts['authTokenValidatorType'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'auth.token.provider.default.claims': {
          value: opts['authTokenProviderDefaultClaims'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteAuthOauthAccesstokenProviderInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.auth.oauth.accesstoken.provider', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteAuthOauthImplBearerAuthenticationHandler operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteAuthOauthImplBearerAuthenticationHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.path 
     * @param {Array.<String>} opts.oauthClientIdsAllowed 
     * @param {Boolean} opts.authBearerSyncIms 
     * @param {String} opts.authTokenRequestParameter 
     * @param {String} opts.oauthBearerConfigid 
     * @param {Boolean} opts.oauthJwtSupport 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteAuthOauthImplBearerAuthenticationHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo}
     */
    this.comAdobeGraniteAuthOauthImplBearerAuthenticationHandler = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'path': opts['path'],
        'auth.bearer.sync.ims': opts['authBearerSyncIms'],
        'auth.tokenRequestParameter': opts['authTokenRequestParameter'],
        'oauth.bearer.configid': opts['oauthBearerConfigid'],
        'oauth.jwt.support': opts['oauthJwtSupport'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'oauth.clientIds.allowed': {
          value: opts['oauthClientIdsAllowed'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.BearerAuthenticationHandler', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteAuthOauthImplDefaultTokenValidatorImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.authTokenValidatorType 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteAuthOauthImplDefaultTokenValidatorImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo}
     */
    this.comAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'auth.token.validator.type': opts['authTokenValidatorType'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.DefaultTokenValidatorImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteAuthOauthImplFacebookProviderImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteAuthOauthImplFacebookProviderImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.oauthProviderId 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteAuthOauthImplFacebookProviderImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo}
     */
    this.comAdobeGraniteAuthOauthImplFacebookProviderImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'oauth.provider.id': opts['oauthProviderId'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.FacebookProviderImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteAuthOauthImplGithubProviderImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteAuthOauthImplGithubProviderImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteAuthOauthImplGithubProviderImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.oauthProviderId 
     * @param {String} opts.oauthProviderGithubAuthorizationUrl 
     * @param {String} opts.oauthProviderGithubTokenUrl 
     * @param {String} opts.oauthProviderGithubProfileUrl 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteAuthOauthImplGithubProviderImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteAuthOauthImplGithubProviderImplInfo}
     */
    this.comAdobeGraniteAuthOauthImplGithubProviderImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'oauth.provider.id': opts['oauthProviderId'],
        'oauth.provider.github.authorization.url': opts['oauthProviderGithubAuthorizationUrl'],
        'oauth.provider.github.token.url': opts['oauthProviderGithubTokenUrl'],
        'oauth.provider.github.profile.url': opts['oauthProviderGithubProfileUrl'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteAuthOauthImplGithubProviderImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.GithubProviderImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteAuthOauthImplGraniteProvider operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteAuthOauthImplGraniteProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteAuthOauthImplGraniteProviderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.oauthProviderId 
     * @param {String} opts.oauthProviderGraniteAuthorizationUrl 
     * @param {String} opts.oauthProviderGraniteTokenUrl 
     * @param {String} opts.oauthProviderGraniteProfileUrl 
     * @param {String} opts.oauthProviderGraniteExtendedDetailsUrls 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteAuthOauthImplGraniteProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteAuthOauthImplGraniteProviderInfo}
     */
    this.comAdobeGraniteAuthOauthImplGraniteProvider = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'oauth.provider.id': opts['oauthProviderId'],
        'oauth.provider.granite.authorization.url': opts['oauthProviderGraniteAuthorizationUrl'],
        'oauth.provider.granite.token.url': opts['oauthProviderGraniteTokenUrl'],
        'oauth.provider.granite.profile.url': opts['oauthProviderGraniteProfileUrl'],
        'oauth.provider.granite.extended.details.urls': opts['oauthProviderGraniteExtendedDetailsUrls'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteAuthOauthImplGraniteProviderInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.GraniteProvider', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteAuthOauthImplHelperProviderConfigManager operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteAuthOauthImplHelperProviderConfigManagerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.oauthCookieLoginTimeout 
     * @param {String} opts.oauthCookieMaxAge 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteAuthOauthImplHelperProviderConfigManagerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo}
     */
    this.comAdobeGraniteAuthOauthImplHelperProviderConfigManager = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'oauth.cookie.login.timeout': opts['oauthCookieLoginTimeout'],
        'oauth.cookie.max.age': opts['oauthCookieMaxAge'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManager', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.oauthCookieLoginTimeout 
     * @param {String} opts.oauthCookieMaxAge 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo}
     */
    this.comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'oauth.cookie.login.timeout': opts['oauthCookieLoginTimeout'],
        'oauth.cookie.max.age': opts['oauthCookieMaxAge'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManagerInternal', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteAuthOauthImplOAuthAuthenticationHandler operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.path 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo}
     */
    this.comAdobeGraniteAuthOauthImplOAuthAuthenticationHandler = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'path': opts['path'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.OAuthAuthenticationHandler', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteAuthOauthImplTwitterProviderImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteAuthOauthImplTwitterProviderImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.oauthProviderId 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteAuthOauthImplTwitterProviderImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo}
     */
    this.comAdobeGraniteAuthOauthImplTwitterProviderImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'oauth.provider.id': opts['oauthProviderId'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.TwitterProviderImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteAuthOauthProvider operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteAuthOauthProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteAuthOauthProviderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.oauthConfigId 
     * @param {String} opts.oauthClientId 
     * @param {String} opts.oauthClientSecret 
     * @param {Array.<String>} opts.oauthScope 
     * @param {String} opts.oauthConfigProviderId 
     * @param {Boolean} opts.oauthCreateUsers 
     * @param {String} opts.oauthUseridProperty 
     * @param {Boolean} opts.forceStrictUsernameMatching 
     * @param {Boolean} opts.oauthEncodeUserids 
     * @param {Boolean} opts.oauthHashUserids 
     * @param {String} opts.oauthCallBackUrl 
     * @param {Boolean} opts.oauthAccessTokenPersist 
     * @param {Boolean} opts.oauthAccessTokenPersistCookie 
     * @param {Boolean} opts.oauthCsrfStateProtection 
     * @param {Boolean} opts.oauthRedirectRequestParams 
     * @param {Boolean} opts.oauthConfigSiblingsAllow 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteAuthOauthProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteAuthOauthProviderInfo}
     */
    this.comAdobeGraniteAuthOauthProvider = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'oauth.config.id': opts['oauthConfigId'],
        'oauth.client.id': opts['oauthClientId'],
        'oauth.client.secret': opts['oauthClientSecret'],
        'oauth.config.provider.id': opts['oauthConfigProviderId'],
        'oauth.create.users': opts['oauthCreateUsers'],
        'oauth.userid.property': opts['oauthUseridProperty'],
        'force.strict.username.matching': opts['forceStrictUsernameMatching'],
        'oauth.encode.userids': opts['oauthEncodeUserids'],
        'oauth.hash.userids': opts['oauthHashUserids'],
        'oauth.callBackUrl': opts['oauthCallBackUrl'],
        'oauth.access.token.persist': opts['oauthAccessTokenPersist'],
        'oauth.access.token.persist.cookie': opts['oauthAccessTokenPersistCookie'],
        'oauth.csrf.state.protection': opts['oauthCsrfStateProtection'],
        'oauth.redirect.request.params': opts['oauthRedirectRequestParams'],
        'oauth.config.siblings.allow': opts['oauthConfigSiblingsAllow'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'oauth.scope': {
          value: opts['oauthScope'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteAuthOauthProviderInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.auth.oauth.provider', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteAuthRequirementImplDefaultRequirementHandler operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteAuthRequirementImplDefaultRequirementHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.supportedPaths 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteAuthRequirementImplDefaultRequirementHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo}
     */
    this.comAdobeGraniteAuthRequirementImplDefaultRequirementHandler = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'supportedPaths': {
          value: opts['supportedPaths'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.auth.requirement.impl.DefaultRequirementHandler', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteAuthSamlSamlAuthenticationHandler operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteAuthSamlSamlAuthenticationHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.path 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.idpUrl 
     * @param {String} opts.idpCertAlias 
     * @param {Boolean} opts.idpHttpRedirect 
     * @param {String} opts.serviceProviderEntityId 
     * @param {String} opts.assertionConsumerServiceURL 
     * @param {String} opts.spPrivateKeyAlias 
     * @param {String} opts.keyStorePassword 
     * @param {String} opts.defaultRedirectUrl 
     * @param {String} opts.userIDAttribute 
     * @param {Boolean} opts.useEncryption 
     * @param {Boolean} opts.createUser 
     * @param {String} opts.userIntermediatePath 
     * @param {Boolean} opts.addGroupMemberships 
     * @param {String} opts.groupMembershipAttribute 
     * @param {Array.<String>} opts.defaultGroups 
     * @param {String} opts.nameIdFormat 
     * @param {Array.<String>} opts.synchronizeAttributes 
     * @param {Boolean} opts.handleLogout 
     * @param {String} opts.logoutUrl 
     * @param {Number} opts.clockTolerance 
     * @param {String} opts.digestMethod 
     * @param {String} opts.signatureMethod 
     * @param {String} opts.identitySyncType 
     * @param {String} opts.idpIdentifier 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteAuthSamlSamlAuthenticationHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo}
     */
    this.comAdobeGraniteAuthSamlSamlAuthenticationHandler = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'service.ranking': opts['serviceRanking'],
        'idpUrl': opts['idpUrl'],
        'idpCertAlias': opts['idpCertAlias'],
        'idpHttpRedirect': opts['idpHttpRedirect'],
        'serviceProviderEntityId': opts['serviceProviderEntityId'],
        'assertionConsumerServiceURL': opts['assertionConsumerServiceURL'],
        'spPrivateKeyAlias': opts['spPrivateKeyAlias'],
        'keyStorePassword': opts['keyStorePassword'],
        'defaultRedirectUrl': opts['defaultRedirectUrl'],
        'userIDAttribute': opts['userIDAttribute'],
        'useEncryption': opts['useEncryption'],
        'createUser': opts['createUser'],
        'userIntermediatePath': opts['userIntermediatePath'],
        'addGroupMemberships': opts['addGroupMemberships'],
        'groupMembershipAttribute': opts['groupMembershipAttribute'],
        'nameIdFormat': opts['nameIdFormat'],
        'handleLogout': opts['handleLogout'],
        'logoutUrl': opts['logoutUrl'],
        'clockTolerance': opts['clockTolerance'],
        'digestMethod': opts['digestMethod'],
        'signatureMethod': opts['signatureMethod'],
        'identitySyncType': opts['identitySyncType'],
        'idpIdentifier': opts['idpIdentifier'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'path': {
          value: opts['path'],
          collectionFormat: 'multi'
        },
        'defaultGroups': {
          value: opts['defaultGroups'],
          collectionFormat: 'multi'
        },
        'synchronizeAttributes': {
          value: opts['synchronizeAttributes'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteAuthSsoImplSsoAuthenticationHandler operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteAuthSsoImplSsoAuthenticationHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.path 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.jaasControlFlag 
     * @param {String} opts.jaasRealmName 
     * @param {Number} opts.jaasRanking 
     * @param {Array.<String>} opts.headers 
     * @param {Array.<String>} opts.cookies 
     * @param {Array.<String>} opts.parameters 
     * @param {Array.<String>} opts.usermap 
     * @param {String} opts.format 
     * @param {String} opts.trustedCredentialsAttribute 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteAuthSsoImplSsoAuthenticationHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo}
     */
    this.comAdobeGraniteAuthSsoImplSsoAuthenticationHandler = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'path': opts['path'],
        'service.ranking': opts['serviceRanking'],
        'jaas.controlFlag': opts['jaasControlFlag'],
        'jaas.realmName': opts['jaasRealmName'],
        'jaas.ranking': opts['jaasRanking'],
        'format': opts['format'],
        'trustedCredentialsAttribute': opts['trustedCredentialsAttribute'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'headers': {
          value: opts['headers'],
          collectionFormat: 'multi'
        },
        'cookies': {
          value: opts['cookies'],
          collectionFormat: 'multi'
        },
        'parameters': {
          value: opts['parameters'],
          collectionFormat: 'multi'
        },
        'usermap': {
          value: opts['usermap'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.auth.sso.impl.SsoAuthenticationHandler', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteBundlesHcImplCodeCacheHealthCheck operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteBundlesHcImplCodeCacheHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {Number} opts.minimumCodeCacheSize 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteBundlesHcImplCodeCacheHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo}
     */
    this.comAdobeGraniteBundlesHcImplCodeCacheHealthCheck = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'minimum.code.cache.size': opts['minimumCodeCacheSize'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'hc.tags': {
          value: opts['hcTags'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.CodeCacheHealthCheck', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo}
     */
    this.comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'hc.tags': {
          value: opts['hcTags'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.CrxdeSupportBundleHealthCheck', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteBundlesHcImplDavExBundleHealthCheck operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteBundlesHcImplDavExBundleHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteBundlesHcImplDavExBundleHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo}
     */
    this.comAdobeGraniteBundlesHcImplDavExBundleHealthCheck = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'hc.tags': {
          value: opts['hcTags'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.DavExBundleHealthCheck', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {Array.<String>} opts.ignoredBundles 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo}
     */
    this.comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'hc.tags': {
          value: opts['hcTags'],
          collectionFormat: 'multi'
        },
        'ignored.bundles': {
          value: opts['ignoredBundles'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.InactiveBundlesHealthCheck', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteBundlesHcImplJobsHealthCheck operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteBundlesHcImplJobsHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {Number} opts.maxQueuedJobs 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteBundlesHcImplJobsHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo}
     */
    this.comAdobeGraniteBundlesHcImplJobsHealthCheck = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'max.queued.jobs': opts['maxQueuedJobs'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'hc.tags': {
          value: opts['hcTags'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.JobsHealthCheck', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteBundlesHcImplSlingGetServletHealthCheck operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteBundlesHcImplSlingGetServletHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteBundlesHcImplSlingGetServletHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo}
     */
    this.comAdobeGraniteBundlesHcImplSlingGetServletHealthCheck = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'hc.tags': {
          value: opts['hcTags'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingGetServletHealthCheck', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo}
     */
    this.comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'hc.tags': {
          value: opts['hcTags'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJavaScriptHandlerHealthCheck', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo}
     */
    this.comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'hc.tags': {
          value: opts['hcTags'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJspScriptHandlerHealthCheck', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo}
     */
    this.comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'hc.tags': {
          value: opts['hcTags'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingReferrerFilterHealthCheck', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteBundlesHcImplWebDavBundleHealthCheck operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteBundlesHcImplWebDavBundleHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteBundlesHcImplWebDavBundleHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo}
     */
    this.comAdobeGraniteBundlesHcImplWebDavBundleHealthCheck = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'hc.tags': {
          value: opts['hcTags'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.WebDavBundleHealthCheck', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteCommentsInternalCommentReplicationContentFilterFac operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteCommentsInternalCommentReplicationContentFilterFacCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.replicateCommentResourceTypes 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteCommentsInternalCommentReplicationContentFilterFacCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo}
     */
    this.comAdobeGraniteCommentsInternalCommentReplicationContentFilterFac = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'replicate.comment.resourceTypes': {
          value: opts['replicateCommentResourceTypes'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.comments.internal.CommentReplicationContentFilterFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteCompatrouterImplCompatSwitchingServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.compatgroups 
     * @param {Boolean} opts.enabled 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteCompatrouterImplCompatSwitchingServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo}
     */
    this.comAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'enabled': opts['enabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'compatgroups': {
          value: opts['compatgroups'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.compatrouter.impl.CompatSwitchingServiceImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteCompatrouterImplRoutingConfig operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteCompatrouterImplRoutingConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteCompatrouterImplRoutingConfigInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.id 
     * @param {String} opts.compatPath 
     * @param {String} opts.newPath 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteCompatrouterImplRoutingConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteCompatrouterImplRoutingConfigInfo}
     */
    this.comAdobeGraniteCompatrouterImplRoutingConfig = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'id': opts['id'],
        'compatPath': opts['compatPath'],
        'newPath': opts['newPath'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteCompatrouterImplRoutingConfigInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.compatrouter.impl.RoutingConfig', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteCompatrouterImplSwitchMappingConfig operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteCompatrouterImplSwitchMappingConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.group 
     * @param {Array.<String>} opts.ids 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteCompatrouterImplSwitchMappingConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo}
     */
    this.comAdobeGraniteCompatrouterImplSwitchMappingConfig = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'group': opts['group'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'ids': {
          value: opts['ids'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.compatrouter.impl.SwitchMappingConfig', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.enabled 
     * @param {Array.<String>} opts.fallbackPaths 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo}
     */
    this.comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'enabled': opts['enabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'fallbackPaths': {
          value: opts['fallbackPaths'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.conf.impl.RuntimeAwareConfigurationResourceResolvingStrategy', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteContexthubImplContextHubImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteContexthubImplContextHubImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteContexthubImplContextHubImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.comAdobeGraniteContexthubSilentMode 
     * @param {Boolean} opts.comAdobeGraniteContexthubShowUi 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteContexthubImplContextHubImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteContexthubImplContextHubImplInfo}
     */
    this.comAdobeGraniteContexthubImplContextHubImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'com.adobe.granite.contexthub.silent_mode': opts['comAdobeGraniteContexthubSilentMode'],
        'com.adobe.granite.contexthub.show_ui': opts['comAdobeGraniteContexthubShowUi'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteContexthubImplContextHubImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.contexthub.impl.ContextHubImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteCorsImplCORSPolicyImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteCorsImplCORSPolicyImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteCorsImplCORSPolicyImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.alloworigin 
     * @param {Array.<String>} opts.alloworiginregexp 
     * @param {Array.<String>} opts.allowedpaths 
     * @param {Array.<String>} opts.exposedheaders 
     * @param {Number} opts.maxage 
     * @param {Array.<String>} opts.supportedheaders 
     * @param {Array.<String>} opts.supportedmethods 
     * @param {Boolean} opts.supportscredentials 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteCorsImplCORSPolicyImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteCorsImplCORSPolicyImplInfo}
     */
    this.comAdobeGraniteCorsImplCORSPolicyImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'maxage': opts['maxage'],
        'supportscredentials': opts['supportscredentials'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'alloworigin': {
          value: opts['alloworigin'],
          collectionFormat: 'multi'
        },
        'alloworiginregexp': {
          value: opts['alloworiginregexp'],
          collectionFormat: 'multi'
        },
        'allowedpaths': {
          value: opts['allowedpaths'],
          collectionFormat: 'multi'
        },
        'exposedheaders': {
          value: opts['exposedheaders'],
          collectionFormat: 'multi'
        },
        'supportedheaders': {
          value: opts['supportedheaders'],
          collectionFormat: 'multi'
        },
        'supportedmethods': {
          value: opts['supportedmethods'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteCorsImplCORSPolicyImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.cors.impl.CORSPolicyImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteCsrfImplCSRFFilter operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteCsrfImplCSRFFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteCsrfImplCSRFFilterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.filterMethods 
     * @param {Boolean} opts.filterEnableSafeUserAgents 
     * @param {Array.<String>} opts.filterSafeUserAgents 
     * @param {Array.<String>} opts.filterExcludedPaths 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteCsrfImplCSRFFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteCsrfImplCSRFFilterInfo}
     */
    this.comAdobeGraniteCsrfImplCSRFFilter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'filter.enable.safe.user.agents': opts['filterEnableSafeUserAgents'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'filter.methods': {
          value: opts['filterMethods'],
          collectionFormat: 'multi'
        },
        'filter.safe.user.agents': {
          value: opts['filterSafeUserAgents'],
          collectionFormat: 'multi'
        },
        'filter.excluded.paths': {
          value: opts['filterExcludedPaths'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteCsrfImplCSRFFilterInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.csrf.impl.CSRFFilter', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteCsrfImplCSRFServlet operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteCsrfImplCSRFServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteCsrfImplCSRFServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.csrfTokenExpiresIn 
     * @param {String} opts.slingAuthRequirements 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteCsrfImplCSRFServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteCsrfImplCSRFServletInfo}
     */
    this.comAdobeGraniteCsrfImplCSRFServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'csrf.token.expires.in': opts['csrfTokenExpiresIn'],
        'sling.auth.requirements': opts['slingAuthRequirements'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteCsrfImplCSRFServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.csrf.impl.CSRFServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {String} opts.username 
     * @param {String} opts.encryptedPassword 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo}
     */
    this.comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'name': opts['name'],
        'username': opts['username'],
        'encryptedPassword': opts['encryptedPassword'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.distribution.core.impl.CryptoDistributionTransportSecretProvider', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteDistributionCoreImplDiffDiffChangesObserver operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteDistributionCoreImplDiffDiffChangesObserverCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.enabled 
     * @param {String} opts.agentName 
     * @param {String} opts.diffPath 
     * @param {String} opts.observedPath 
     * @param {String} opts.serviceName 
     * @param {String} opts.propertyNames 
     * @param {Number} opts.distributionDelay 
     * @param {String} opts.serviceUserTarget 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteDistributionCoreImplDiffDiffChangesObserverCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo}
     */
    this.comAdobeGraniteDistributionCoreImplDiffDiffChangesObserver = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'enabled': opts['enabled'],
        'agentName': opts['agentName'],
        'diffPath': opts['diffPath'],
        'observedPath': opts['observedPath'],
        'serviceName': opts['serviceName'],
        'propertyNames': opts['propertyNames'],
        'distributionDelay': opts['distributionDelay'],
        'serviceUser.target': opts['serviceUserTarget'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffChangesObserver', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteDistributionCoreImplDiffDiffEventListener operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteDistributionCoreImplDiffDiffEventListenerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.diffPath 
     * @param {String} opts.serviceName 
     * @param {String} opts.serviceUserTarget 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteDistributionCoreImplDiffDiffEventListenerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo}
     */
    this.comAdobeGraniteDistributionCoreImplDiffDiffEventListener = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'diffPath': opts['diffPath'],
        'serviceName': opts['serviceName'],
        'serviceUser.target': opts['serviceUserTarget'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffEventListener', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteDistributionCoreImplDistributionToReplicationEven operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteDistributionCoreImplDistributionToReplicationEvenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.importerName 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteDistributionCoreImplDistributionToReplicationEvenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo}
     */
    this.comAdobeGraniteDistributionCoreImplDistributionToReplicationEven = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'importer.name': {
          value: opts['importerName'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.distribution.core.impl.DistributionToReplicationEventTransformer', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.providerName 
     * @param {Boolean} opts.forwardRequests 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo}
     */
    this.comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'providerName': opts['providerName'],
        'forward.requests': opts['forwardRequests'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.adapters.ReplicationAgentProvider', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteDistributionCoreImplReplicationDistributionTrans operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteDistributionCoreImplReplicationDistributionTransCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.forwardRequests 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteDistributionCoreImplReplicationDistributionTransCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo}
     */
    this.comAdobeGraniteDistributionCoreImplReplicationDistributionTrans = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'forward.requests': opts['forwardRequests'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.DistributionTransportHandler', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {String} opts.serviceName 
     * @param {String} opts.userId 
     * @param {String} opts.accessTokenProviderTarget 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo}
     */
    this.comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'name': opts['name'],
        'serviceName': opts['serviceName'],
        'userId': opts['userId'],
        'accessTokenProvider.target': opts['accessTokenProviderTarget'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.distribution.core.impl.transport.AccessTokenDistributionTransportSecretProvider', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteFragsImplCheckHttpHeaderFlag operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteFragsImplCheckHttpHeaderFlagCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.featureName 
     * @param {String} opts.featureDescription 
     * @param {String} opts.httpHeaderName 
     * @param {String} opts.httpHeaderValuepattern 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteFragsImplCheckHttpHeaderFlagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo}
     */
    this.comAdobeGraniteFragsImplCheckHttpHeaderFlag = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'feature.name': opts['featureName'],
        'feature.description': opts['featureDescription'],
        'http.header.name': opts['httpHeaderName'],
        'http.header.valuepattern': opts['httpHeaderValuepattern'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.frags.impl.CheckHttpHeaderFlag', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteFragsImplRandomFeature operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteFragsImplRandomFeatureCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteFragsImplRandomFeatureInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.featureName 
     * @param {String} opts.featureDescription 
     * @param {String} opts.activePercentage 
     * @param {String} opts.cookieName 
     * @param {Number} opts.cookieMaxAge 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteFragsImplRandomFeatureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteFragsImplRandomFeatureInfo}
     */
    this.comAdobeGraniteFragsImplRandomFeature = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'feature.name': opts['featureName'],
        'feature.description': opts['featureDescription'],
        'active.percentage': opts['activePercentage'],
        'cookie.name': opts['cookieName'],
        'cookie.maxAge': opts['cookieMaxAge'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteFragsImplRandomFeatureInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.frags.impl.RandomFeature', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteHttpcacheFileFileCacheStore operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteHttpcacheFileFileCacheStoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteHttpcacheFileFileCacheStoreInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.comAdobeGraniteHttpcacheFileDocumentRoot 
     * @param {String} opts.comAdobeGraniteHttpcacheFileIncludeHost 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteHttpcacheFileFileCacheStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteHttpcacheFileFileCacheStoreInfo}
     */
    this.comAdobeGraniteHttpcacheFileFileCacheStore = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'com.adobe.granite.httpcache.file.documentRoot': opts['comAdobeGraniteHttpcacheFileDocumentRoot'],
        'com.adobe.granite.httpcache.file.includeHost': opts['comAdobeGraniteHttpcacheFileIncludeHost'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteHttpcacheFileFileCacheStoreInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.httpcache.file.FileCacheStore', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteHttpcacheImplOuterCacheFilter operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteHttpcacheImplOuterCacheFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.comAdobeGraniteHttpcacheUrlPaths 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteHttpcacheImplOuterCacheFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo}
     */
    this.comAdobeGraniteHttpcacheImplOuterCacheFilter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'com.adobe.granite.httpcache.url.paths': {
          value: opts['comAdobeGraniteHttpcacheUrlPaths'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.httpcache.impl.OuterCacheFilter', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteI18nImplBundlePseudoTranslations operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteI18nImplBundlePseudoTranslationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.pseudoPatterns 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteI18nImplBundlePseudoTranslationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo}
     */
    this.comAdobeGraniteI18nImplBundlePseudoTranslations = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'pseudo.patterns': {
          value: opts['pseudoPatterns'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.i18n.impl.bundle.PseudoTranslations', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteI18nImplPreferencesLocaleResolverService operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteI18nImplPreferencesLocaleResolverServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.securityPreferencesName 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteI18nImplPreferencesLocaleResolverServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo}
     */
    this.comAdobeGraniteI18nImplPreferencesLocaleResolverService = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'security.preferences.name': opts['securityPreferencesName'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.i18n.impl.PreferencesLocaleResolverService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteInfocollectorInfoCollector operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteInfocollectorInfoCollectorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteInfocollectorInfoCollectorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.graniteInfocollectorIncludeThreadDumps 
     * @param {Boolean} opts.graniteInfocollectorIncludeHeapDump 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteInfocollectorInfoCollectorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteInfocollectorInfoCollectorInfo}
     */
    this.comAdobeGraniteInfocollectorInfoCollector = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'granite.infocollector.includeThreadDumps': opts['graniteInfocollectorIncludeThreadDumps'],
        'granite.infocollector.includeHeapDump': opts['graniteInfocollectorIncludeHeapDump'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteInfocollectorInfoCollectorInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.infocollector.InfoCollector', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteJettySslInternalGraniteSslConnectorFactory operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteJettySslInternalGraniteSslConnectorFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.comAdobeGraniteJettySslPort 
     * @param {String} opts.comAdobeGraniteJettySslKeystoreUser 
     * @param {String} opts.comAdobeGraniteJettySslKeystorePassword 
     * @param {Array.<String>} opts.comAdobeGraniteJettySslCiphersuitesExcluded 
     * @param {Array.<String>} opts.comAdobeGraniteJettySslCiphersuitesIncluded 
     * @param {String} opts.comAdobeGraniteJettySslClientCertificate 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteJettySslInternalGraniteSslConnectorFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo}
     */
    this.comAdobeGraniteJettySslInternalGraniteSslConnectorFactory = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'com.adobe.granite.jetty.ssl.port': opts['comAdobeGraniteJettySslPort'],
        'com.adobe.granite.jetty.ssl.keystore.user': opts['comAdobeGraniteJettySslKeystoreUser'],
        'com.adobe.granite.jetty.ssl.keystore.password': opts['comAdobeGraniteJettySslKeystorePassword'],
        'com.adobe.granite.jetty.ssl.client.certificate': opts['comAdobeGraniteJettySslClientCertificate'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'com.adobe.granite.jetty.ssl.ciphersuites.excluded': {
          value: opts['comAdobeGraniteJettySslCiphersuitesExcluded'],
          collectionFormat: 'multi'
        },
        'com.adobe.granite.jetty.ssl.ciphersuites.included': {
          value: opts['comAdobeGraniteJettySslCiphersuitesIncluded'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.jetty.ssl.internal.GraniteSslConnectorFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteLicenseImplLicenseCheckFilter operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteLicenseImplLicenseCheckFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteLicenseImplLicenseCheckFilterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.checkInternval 
     * @param {Array.<String>} opts.excludeIds 
     * @param {Boolean} opts.encryptPing 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteLicenseImplLicenseCheckFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteLicenseImplLicenseCheckFilterInfo}
     */
    this.comAdobeGraniteLicenseImplLicenseCheckFilter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'checkInternval': opts['checkInternval'],
        'encryptPing': opts['encryptPing'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'excludeIds': {
          value: opts['excludeIds'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteLicenseImplLicenseCheckFilterInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.license.impl.LicenseCheckFilter', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteLoggingImplLogAnalyserImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteLoggingImplLogAnalyserImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteLoggingImplLogAnalyserImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.messagesQueueSize 
     * @param {Array.<String>} opts.loggerConfig 
     * @param {Number} opts.messagesSize 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteLoggingImplLogAnalyserImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteLoggingImplLogAnalyserImplInfo}
     */
    this.comAdobeGraniteLoggingImplLogAnalyserImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'messages.queue.size': opts['messagesQueueSize'],
        'messages.size': opts['messagesSize'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'logger.config': {
          value: opts['loggerConfig'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteLoggingImplLogAnalyserImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.logging.impl.LogAnalyserImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteLoggingImplLogErrorHealthCheck operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteLoggingImplLogErrorHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteLoggingImplLogErrorHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo}
     */
    this.comAdobeGraniteLoggingImplLogErrorHealthCheck = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'hc.tags': {
          value: opts['hcTags'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.logging.impl.LogErrorHealthCheck', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.graniteMaintenanceMandatory 
     * @param {String} opts.jobTopics 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo}
     */
    this.comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'granite.maintenance.mandatory': opts['graniteMaintenanceMandatory'],
        'job.topics': opts['jobTopics'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.DataStoreGarbageCollectionTask', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.jobTopics 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo}
     */
    this.comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'job.topics': opts['jobTopics'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.LuceneBinariesCleanupTask', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteMaintenanceCrxImplRevisionCleanupTask operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.fullGcDays 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo}
     */
    this.comAdobeGraniteMaintenanceCrxImplRevisionCleanupTask = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'full.gc.days': {
          value: opts['fullGcDays'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.RevisionCleanupTask', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteMonitoringImplScriptConfigImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteMonitoringImplScriptConfigImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteMonitoringImplScriptConfigImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.scriptFilename 
     * @param {String} opts.scriptDisplay 
     * @param {String} opts.scriptPath 
     * @param {Array.<String>} opts.scriptPlatform 
     * @param {Number} opts.interval 
     * @param {String} opts.jmxdomain 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteMonitoringImplScriptConfigImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteMonitoringImplScriptConfigImplInfo}
     */
    this.comAdobeGraniteMonitoringImplScriptConfigImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'script.filename': opts['scriptFilename'],
        'script.display': opts['scriptDisplay'],
        'script.path': opts['scriptPath'],
        'interval': opts['interval'],
        'jmxdomain': opts['jmxdomain'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'script.platform': {
          value: opts['scriptPlatform'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteMonitoringImplScriptConfigImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.monitoring.impl.ScriptConfigImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.path 
     * @param {String} opts.jaasControlFlag 
     * @param {String} opts.jaasRealmName 
     * @param {Number} opts.jaasRanking 
     * @param {Boolean} opts.oauthOfflineValidation 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo}
     */
    this.comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'path': opts['path'],
        'jaas.controlFlag': opts['jaasControlFlag'],
        'jaas.realmName': opts['jaasRealmName'],
        'jaas.ranking': opts['jaasRanking'],
        'oauth.offline.validation': opts['oauthOfflineValidation'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.oauth.server.auth.impl.OAuth2ServerAuthenticationHandler', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteOauthServerImplAccessTokenCleanupTask operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteOauthServerImplAccessTokenCleanupTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.schedulerExpression 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteOauthServerImplAccessTokenCleanupTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo}
     */
    this.comAdobeGraniteOauthServerImplAccessTokenCleanupTask = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'scheduler.expression': opts['schedulerExpression'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.oauth.server.impl.AccessTokenCleanupTask', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteOauthServerImplOAuth2ClientRevocationServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.oauthClientRevocationActive 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteOauthServerImplOAuth2ClientRevocationServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo}
     */
    this.comAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'oauth.client.revocation.active': opts['oauthClientRevocationActive'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2ClientRevocationServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.slingServletPaths 
     * @param {Boolean} opts.oauthRevocationActive 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo}
     */
    this.comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'sling.servlet.paths': opts['slingServletPaths'],
        'oauth.revocation.active': opts['oauthRevocationActive'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2RevocationEndpointServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteOauthServerImplOAuth2TokenEndpointServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.oauthIssuer 
     * @param {String} opts.oauthAccessTokenExpiresIn 
     * @param {String} opts.osgiHttpWhiteboardServletPattern 
     * @param {String} opts.osgiHttpWhiteboardContextSelect 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteOauthServerImplOAuth2TokenEndpointServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo}
     */
    this.comAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'oauth.issuer': opts['oauthIssuer'],
        'oauth.access.token.expires.in': opts['oauthAccessTokenExpiresIn'],
        'osgi.http.whiteboard.servlet.pattern': opts['osgiHttpWhiteboardServletPattern'],
        'osgi.http.whiteboard.context.select': opts['osgiHttpWhiteboardContextSelect'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenEndpointServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteOauthServerImplOAuth2TokenRevocationServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.oauthTokenRevocationActive 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteOauthServerImplOAuth2TokenRevocationServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo}
     */
    this.comAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'oauth.token.revocation.active': opts['oauthTokenRevocationActive'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenRevocationServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteOffloadingImplOffloadingConfigurator operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteOffloadingImplOffloadingConfiguratorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.offloadingTransporter 
     * @param {Boolean} opts.offloadingCleanupPayload 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteOffloadingImplOffloadingConfiguratorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo}
     */
    this.comAdobeGraniteOffloadingImplOffloadingConfigurator = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'offloading.transporter': opts['offloadingTransporter'],
        'offloading.cleanup.payload': opts['offloadingCleanupPayload'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingConfigurator', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteOffloadingImplOffloadingJobCloner operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteOffloadingImplOffloadingJobClonerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.offloadingJobclonerEnabled 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteOffloadingImplOffloadingJobClonerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo}
     */
    this.comAdobeGraniteOffloadingImplOffloadingJobCloner = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'offloading.jobcloner.enabled': opts['offloadingJobclonerEnabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobCloner', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteOffloadingImplOffloadingJobOffloader operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteOffloadingImplOffloadingJobOffloaderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.offloadingOffloaderEnabled 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteOffloadingImplOffloadingJobOffloaderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo}
     */
    this.comAdobeGraniteOffloadingImplOffloadingJobOffloader = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'offloading.offloader.enabled': opts['offloadingOffloaderEnabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobOffloader', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteOffloadingImplTransporterOffloadingAgentManager operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.offloadingAgentmanagerEnabled 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo}
     */
    this.comAdobeGraniteOffloadingImplTransporterOffloadingAgentManager = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'offloading.agentmanager.enabled': opts['offloadingAgentmanagerEnabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingAgentManager', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.defaultTransportAgentToWorkerPrefix 
     * @param {String} opts.defaultTransportAgentToMasterPrefix 
     * @param {String} opts.defaultTransportInputPackage 
     * @param {String} opts.defaultTransportOutputPackage 
     * @param {Boolean} opts.defaultTransportReplicationSynchronous 
     * @param {Boolean} opts.defaultTransportContentpackage 
     * @param {Boolean} opts.offloadingTransporterDefaultEnabled 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo}
     */
    this.comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'default.transport.agent-to-worker.prefix': opts['defaultTransportAgentToWorkerPrefix'],
        'default.transport.agent-to-master.prefix': opts['defaultTransportAgentToMasterPrefix'],
        'default.transport.input.package': opts['defaultTransportInputPackage'],
        'default.transport.output.package': opts['defaultTransportOutputPackage'],
        'default.transport.replication.synchronous': opts['defaultTransportReplicationSynchronous'],
        'default.transport.contentpackage': opts['defaultTransportContentpackage'],
        'offloading.transporter.default.enabled': opts['offloadingTransporterDefaultEnabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingDefaultTransporter', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.omnisearchSuggestionRequiretextMin 
     * @param {Boolean} opts.omnisearchSuggestionSpellcheckRequire 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo}
     */
    this.comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'omnisearch.suggestion.requiretext.min': opts['omnisearchSuggestionRequiretextMin'],
        'omnisearch.suggestion.spellcheck.require': opts['omnisearchSuggestionSpellcheckRequire'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.omnisearch.impl.core.OmniSearchServiceImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteOptoutImplOptOutServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteOptoutImplOptOutServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteOptoutImplOptOutServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.optoutCookies 
     * @param {Array.<String>} opts.optoutHeaders 
     * @param {Array.<String>} opts.optoutWhitelistCookies 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteOptoutImplOptOutServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteOptoutImplOptOutServiceImplInfo}
     */
    this.comAdobeGraniteOptoutImplOptOutServiceImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'optout.cookies': {
          value: opts['optoutCookies'],
          collectionFormat: 'multi'
        },
        'optout.headers': {
          value: opts['optoutHeaders'],
          collectionFormat: 'multi'
        },
        'optout.whitelist.cookies': {
          value: opts['optoutWhitelistCookies'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteOptoutImplOptOutServiceImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.optout.impl.OptOutServiceImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteQueriesImplHcAsyncIndexHealthCheck operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteQueriesImplHcAsyncIndexHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.indexingCriticalThreshold 
     * @param {Number} opts.indexingWarnThreshold 
     * @param {Array.<String>} opts.hcTags 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteQueriesImplHcAsyncIndexHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo}
     */
    this.comAdobeGraniteQueriesImplHcAsyncIndexHealthCheck = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'indexing.critical.threshold': opts['indexingCriticalThreshold'],
        'indexing.warn.threshold': opts['indexingWarnThreshold'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'hc.tags': {
          value: opts['hcTags'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.queries.impl.hc.AsyncIndexHealthCheck', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteQueriesImplHcLargeIndexHealthCheck operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteQueriesImplHcLargeIndexHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.largeIndexCriticalThreshold 
     * @param {Number} opts.largeIndexWarnThreshold 
     * @param {Array.<String>} opts.hcTags 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteQueriesImplHcLargeIndexHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo}
     */
    this.comAdobeGraniteQueriesImplHcLargeIndexHealthCheck = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'large.index.critical.threshold': opts['largeIndexCriticalThreshold'],
        'large.index.warn.threshold': opts['largeIndexWarnThreshold'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'hc.tags': {
          value: opts['hcTags'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.queries.impl.hc.LargeIndexHealthCheck', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteQueriesImplHcQueriesStatusHealthCheck operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteQueriesImplHcQueriesStatusHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteQueriesImplHcQueriesStatusHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo}
     */
    this.comAdobeGraniteQueriesImplHcQueriesStatusHealthCheck = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'hc.tags': {
          value: opts['hcTags'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueriesStatusHealthCheck', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteQueriesImplHcQueryHealthCheckMetrics operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteQueriesImplHcQueryHealthCheckMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.getPeriod 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteQueriesImplHcQueryHealthCheckMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo}
     */
    this.comAdobeGraniteQueriesImplHcQueryHealthCheckMetrics = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'getPeriod': opts['getPeriod'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryHealthCheckMetrics', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteQueriesImplHcQueryLimitsHealthCheck operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteQueriesImplHcQueryLimitsHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteQueriesImplHcQueryLimitsHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo}
     */
    this.comAdobeGraniteQueriesImplHcQueryLimitsHealthCheck = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'hc.tags': {
          value: opts['hcTags'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryLimitsHealthCheck', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteReplicationHcImplReplicationQueueHealthCheck operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteReplicationHcImplReplicationQueueHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.numberOfRetriesAllowed 
     * @param {Array.<String>} opts.hcTags 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteReplicationHcImplReplicationQueueHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo}
     */
    this.comAdobeGraniteReplicationHcImplReplicationQueueHealthCheck = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'number.of.retries.allowed': opts['numberOfRetriesAllowed'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'hc.tags': {
          value: opts['hcTags'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationQueueHealthCheck', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo}
     */
    this.comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'hc.tags': {
          value: opts['hcTags'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationTransportUsersHealthCheck', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo}
     */
    this.comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'hc.tags': {
          value: opts['hcTags'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.repository.hc.impl.AuthorizableNodeNameHealthCheck', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {Array.<String>} opts.excludeSearchPath 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo}
     */
    this.comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'hc.tags': {
          value: opts['hcTags'],
          collectionFormat: 'multi'
        },
        'exclude.search.path': {
          value: opts['excludeSearchPath'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.repository.hc.impl.content.sling.SlingContentHealthCheck', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo}
     */
    this.comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'hc.tags': {
          value: opts['hcTags'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.repository.hc.impl.ContinuousRGCHealthCheck', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo}
     */
    this.comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'hc.tags': {
          value: opts['hcTags'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultAccessUserProfileHealthCheck', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {Array.<String>} opts.accountLogins 
     * @param {Array.<String>} opts.consoleLogins 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo}
     */
    this.comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'hc.tags': {
          value: opts['hcTags'],
          collectionFormat: 'multi'
        },
        'account.logins': {
          value: opts['accountLogins'],
          collectionFormat: 'multi'
        },
        'console.logins': {
          value: opts['consoleLogins'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultLoginsHealthCheck', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {Number} opts.diskSpaceWarnThreshold 
     * @param {Number} opts.diskSpaceErrorThreshold 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo}
     */
    this.comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'disk.space.warn.threshold': opts['diskSpaceWarnThreshold'],
        'disk.space.error.threshold': opts['diskSpaceErrorThreshold'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'hc.tags': {
          value: opts['hcTags'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.repository.hc.impl.DiskSpaceHealthCheck', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo}
     */
    this.comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'hc.tags': {
          value: opts['hcTags'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.repository.hc.impl.ObservationQueueLengthHealthCheck', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteRepositoryImplCommitStatsConfig operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteRepositoryImplCommitStatsConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteRepositoryImplCommitStatsConfigInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.enabled 
     * @param {Number} opts.intervalSeconds 
     * @param {Number} opts.commitsPerIntervalThreshold 
     * @param {Number} opts.maxLocationLength 
     * @param {Number} opts.maxDetailsShown 
     * @param {Number} opts.minDetailsPercentage 
     * @param {Array.<String>} opts.threadMatchers 
     * @param {Number} opts.maxGreedyDepth 
     * @param {String} opts.greedyStackMatchers 
     * @param {Array.<String>} opts.stackFilters 
     * @param {Array.<String>} opts.stackMatchers 
     * @param {Array.<String>} opts.stackCategorizers 
     * @param {Array.<String>} opts.stackShorteners 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteRepositoryImplCommitStatsConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteRepositoryImplCommitStatsConfigInfo}
     */
    this.comAdobeGraniteRepositoryImplCommitStatsConfig = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'enabled': opts['enabled'],
        'intervalSeconds': opts['intervalSeconds'],
        'commitsPerIntervalThreshold': opts['commitsPerIntervalThreshold'],
        'maxLocationLength': opts['maxLocationLength'],
        'maxDetailsShown': opts['maxDetailsShown'],
        'minDetailsPercentage': opts['minDetailsPercentage'],
        'maxGreedyDepth': opts['maxGreedyDepth'],
        'greedyStackMatchers': opts['greedyStackMatchers'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'threadMatchers': {
          value: opts['threadMatchers'],
          collectionFormat: 'multi'
        },
        'stackFilters': {
          value: opts['stackFilters'],
          collectionFormat: 'multi'
        },
        'stackMatchers': {
          value: opts['stackMatchers'],
          collectionFormat: 'multi'
        },
        'stackCategorizers': {
          value: opts['stackCategorizers'],
          collectionFormat: 'multi'
        },
        'stackShorteners': {
          value: opts['stackShorteners'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteRepositoryImplCommitStatsConfigInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.repository.impl.CommitStatsConfig', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteRepositoryServiceUserConfiguration operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteRepositoryServiceUserConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteRepositoryServiceUserConfigurationInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {Boolean} opts.serviceusersSimpleSubjectPopulation 
     * @param {Array.<String>} opts.serviceusersList 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteRepositoryServiceUserConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteRepositoryServiceUserConfigurationInfo}
     */
    this.comAdobeGraniteRepositoryServiceUserConfiguration = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'service.ranking': opts['serviceRanking'],
        'serviceusers.simpleSubjectPopulation': opts['serviceusersSimpleSubjectPopulation'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'serviceusers.list': {
          value: opts['serviceusersList'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteRepositoryServiceUserConfigurationInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.repository.ServiceUserConfiguration', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo}
     */
    this.comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'hc.tags': {
          value: opts['hcTags'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.requests.logging.impl.hc.RequestsStatusHealthCheckImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteResourcestatusImplCompositeStatusType operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteResourcestatusImplCompositeStatusTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {Array.<String>} opts.types 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteResourcestatusImplCompositeStatusTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo}
     */
    this.comAdobeGraniteResourcestatusImplCompositeStatusType = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'name': opts['name'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'types': {
          value: opts['types'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.resourcestatus.impl.CompositeStatusType', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteResourcestatusImplStatusResourceProviderImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteResourcestatusImplStatusResourceProviderImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.providerRoot 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteResourcestatusImplStatusResourceProviderImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo}
     */
    this.comAdobeGraniteResourcestatusImplStatusResourceProviderImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'provider.root': opts['providerRoot'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.resourcestatus.impl.StatusResourceProviderImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteRestAssetsImplAssetContentDispositionFilter operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteRestAssetsImplAssetContentDispositionFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.mimeAllowEmpty 
     * @param {Array.<String>} opts.mimeAllowed 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteRestAssetsImplAssetContentDispositionFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo}
     */
    this.comAdobeGraniteRestAssetsImplAssetContentDispositionFilter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'mime.allowEmpty': opts['mimeAllowEmpty'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'mime.allowed': {
          value: opts['mimeAllowed'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.rest.assets.impl.AssetContentDispositionFilter', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.providerRoots 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo}
     */
    this.comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'provider.roots': opts['providerRoots'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.rest.impl.ApiEndpointResourceProviderFactoryImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteRestImplServletDefaultGETServlet operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteRestImplServletDefaultGETServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteRestImplServletDefaultGETServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.defaultLimit 
     * @param {Boolean} opts.useAbsoluteUri 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteRestImplServletDefaultGETServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteRestImplServletDefaultGETServletInfo}
     */
    this.comAdobeGraniteRestImplServletDefaultGETServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'default.limit': opts['defaultLimit'],
        'use.absolute.uri': opts['useAbsoluteUri'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteRestImplServletDefaultGETServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.rest.impl.servlet.DefaultGETServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo}
     */
    this.comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'hc.tags': {
          value: opts['hcTags'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.security.user.ui.internal.servlets.SSLConfigurationServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteSecurityUserUserPropertiesService operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteSecurityUserUserPropertiesServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteSecurityUserUserPropertiesServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.adapterCondition 
     * @param {Array.<String>} opts.graniteUserpropertiesNodetypes 
     * @param {Array.<String>} opts.graniteUserpropertiesResourcetypes 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteSecurityUserUserPropertiesServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteSecurityUserUserPropertiesServiceInfo}
     */
    this.comAdobeGraniteSecurityUserUserPropertiesService = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'adapter.condition': opts['adapterCondition'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'granite.userproperties.nodetypes': {
          value: opts['graniteUserpropertiesNodetypes'],
          collectionFormat: 'multi'
        },
        'granite.userproperties.resourcetypes': {
          value: opts['graniteUserpropertiesResourcetypes'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteSecurityUserUserPropertiesServiceInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.security.user.UserPropertiesService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteSocialgraphImplSocialGraphFactoryImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteSocialgraphImplSocialGraphFactoryImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.group2memberRelationshipOutgoing 
     * @param {Array.<String>} opts.group2memberExcludedOutgoing 
     * @param {String} opts.group2memberRelationshipIncoming 
     * @param {Array.<String>} opts.group2memberExcludedIncoming 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteSocialgraphImplSocialGraphFactoryImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo}
     */
    this.comAdobeGraniteSocialgraphImplSocialGraphFactoryImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'group2member.relationship.outgoing': opts['group2memberRelationshipOutgoing'],
        'group2member.relationship.incoming': opts['group2memberRelationshipIncoming'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'group2member.excluded.outgoing': {
          value: opts['group2memberExcludedOutgoing'],
          collectionFormat: 'multi'
        },
        'group2member.excluded.incoming': {
          value: opts['group2memberExcludedIncoming'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.socialgraph.impl.SocialGraphFactoryImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.schedulerExpression 
     * @param {String} opts.jmxObjectname 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo}
     */
    this.comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'scheduler.expression': opts['schedulerExpression'],
        'jmx.objectname': opts['jmxObjectname'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.system.monitoring.impl.SystemStatsMBeanImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.adapterCondition 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo}
     */
    this.comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'adapter.condition': opts['adapterCondition'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskAdapterFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteTaskmanagementImplJcrTaskArchiveService operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.archivingEnabled 
     * @param {String} opts.schedulerExpression 
     * @param {Number} opts.archiveSinceDaysCompleted 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo}
     */
    this.comAdobeGraniteTaskmanagementImplJcrTaskArchiveService = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'archiving.enabled': opts['archivingEnabled'],
        'scheduler.expression': opts['schedulerExpression'],
        'archive.since.days.completed': opts['archiveSinceDaysCompleted'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskArchiveService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.purgeCompleted 
     * @param {Number} opts.completedAge 
     * @param {Boolean} opts.purgeActive 
     * @param {Number} opts.activeAge 
     * @param {Number} opts.saveThreshold 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo}
     */
    this.comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'purgeCompleted': opts['purgeCompleted'],
        'completedAge': opts['completedAge'],
        'purgeActive': opts['purgeActive'],
        'activeAge': opts['activeAge'],
        'saveThreshold': opts['saveThreshold'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.taskmanagement.impl.purge.TaskPurgeMaintenanceTask', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.adapterCondition 
     * @param {Array.<String>} opts.taskmanagerAdmingroups 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo}
     */
    this.comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'adapter.condition': opts['adapterCondition'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'taskmanager.admingroups': {
          value: opts['taskmanagerAdmingroups'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.taskmanagement.impl.service.TaskManagerAdapterFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteThreaddumpThreadDumpCollector operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteThreaddumpThreadDumpCollectorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteThreaddumpThreadDumpCollectorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.schedulerPeriod 
     * @param {String} opts.schedulerRunOn 
     * @param {Boolean} opts.graniteThreaddumpEnabled 
     * @param {Number} opts.graniteThreaddumpDumpsPerFile 
     * @param {Boolean} opts.graniteThreaddumpEnableGzipCompression 
     * @param {Boolean} opts.graniteThreaddumpEnableDirectoriesCompression 
     * @param {Boolean} opts.graniteThreaddumpEnableJStack 
     * @param {Number} opts.graniteThreaddumpMaxBackupDays 
     * @param {String} opts.graniteThreaddumpBackupCleanTrigger 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteThreaddumpThreadDumpCollectorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteThreaddumpThreadDumpCollectorInfo}
     */
    this.comAdobeGraniteThreaddumpThreadDumpCollector = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'scheduler.period': opts['schedulerPeriod'],
        'scheduler.runOn': opts['schedulerRunOn'],
        'granite.threaddump.enabled': opts['graniteThreaddumpEnabled'],
        'granite.threaddump.dumpsPerFile': opts['graniteThreaddumpDumpsPerFile'],
        'granite.threaddump.enableGzipCompression': opts['graniteThreaddumpEnableGzipCompression'],
        'granite.threaddump.enableDirectoriesCompression': opts['graniteThreaddumpEnableDirectoriesCompression'],
        'granite.threaddump.enableJStack': opts['graniteThreaddumpEnableJStack'],
        'granite.threaddump.maxBackupDays': opts['graniteThreaddumpMaxBackupDays'],
        'granite.threaddump.backupCleanTrigger': opts['graniteThreaddumpBackupCleanTrigger'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteThreaddumpThreadDumpCollectorInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.threaddump.ThreadDumpCollector', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.translationFactory 
     * @param {String} opts.defaultConnectorLabel 
     * @param {String} opts.defaultConnectorAttribution 
     * @param {String} opts.defaultConnectorWorkspaceId 
     * @param {String} opts.defaultConnectorSubscriptionKey 
     * @param {String} opts.languageMapLocation 
     * @param {String} opts.categoryMapLocation 
     * @param {Number} opts.retryAttempts 
     * @param {Number} opts.timeoutCount 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo}
     */
    this.comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'translationFactory': opts['translationFactory'],
        'defaultConnectorLabel': opts['defaultConnectorLabel'],
        'defaultConnectorAttribution': opts['defaultConnectorAttribution'],
        'defaultConnectorWorkspaceId': opts['defaultConnectorWorkspaceId'],
        'defaultConnectorSubscriptionKey': opts['defaultConnectorSubscriptionKey'],
        'languageMapLocation': opts['languageMapLocation'],
        'categoryMapLocation': opts['categoryMapLocation'],
        'retryAttempts': opts['retryAttempts'],
        'timeoutCount': opts['timeoutCount'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.translation.connector.msft.core.impl.MicrosoftTranslationServiceFactoryImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteTranslationCoreImplTranslationManagerImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteTranslationCoreImplTranslationManagerImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.defaultConnectorName 
     * @param {String} opts.defaultCategory 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteTranslationCoreImplTranslationManagerImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo}
     */
    this.comAdobeGraniteTranslationCoreImplTranslationManagerImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'defaultConnectorName': opts['defaultConnectorName'],
        'defaultCategory': opts['defaultCategory'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.translation.core.impl.TranslationManagerImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.htmllibmanagerTiming 
     * @param {String} opts.htmllibmanagerDebugInitJs 
     * @param {Boolean} opts.htmllibmanagerMinify 
     * @param {Boolean} opts.htmllibmanagerDebug 
     * @param {Boolean} opts.htmllibmanagerGzip 
     * @param {Number} opts.htmllibmanagerMaxDataUriSize 
     * @param {Number} opts.htmllibmanagerMaxage 
     * @param {Boolean} opts.htmllibmanagerForceCQUrlInfo 
     * @param {String} opts.htmllibmanagerDefaultthemename 
     * @param {String} opts.htmllibmanagerDefaultuserthemename 
     * @param {String} opts.htmllibmanagerClientmanager 
     * @param {Array.<String>} opts.htmllibmanagerPathList 
     * @param {Array.<String>} opts.htmllibmanagerExcludedPathList 
     * @param {Array.<String>} opts.htmllibmanagerProcessorJs 
     * @param {Array.<String>} opts.htmllibmanagerProcessorCss 
     * @param {Array.<String>} opts.htmllibmanagerLongcachePatterns 
     * @param {String} opts.htmllibmanagerLongcacheFormat 
     * @param {Boolean} opts.htmllibmanagerUseFileSystemOutputCache 
     * @param {String} opts.htmllibmanagerFileSystemOutputCacheLocation 
     * @param {Array.<String>} opts.htmllibmanagerDisableReplacement 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo}
     */
    this.comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'htmllibmanager.timing': opts['htmllibmanagerTiming'],
        'htmllibmanager.debug.init.js': opts['htmllibmanagerDebugInitJs'],
        'htmllibmanager.minify': opts['htmllibmanagerMinify'],
        'htmllibmanager.debug': opts['htmllibmanagerDebug'],
        'htmllibmanager.gzip': opts['htmllibmanagerGzip'],
        'htmllibmanager.maxDataUriSize': opts['htmllibmanagerMaxDataUriSize'],
        'htmllibmanager.maxage': opts['htmllibmanagerMaxage'],
        'htmllibmanager.forceCQUrlInfo': opts['htmllibmanagerForceCQUrlInfo'],
        'htmllibmanager.defaultthemename': opts['htmllibmanagerDefaultthemename'],
        'htmllibmanager.defaultuserthemename': opts['htmllibmanagerDefaultuserthemename'],
        'htmllibmanager.clientmanager': opts['htmllibmanagerClientmanager'],
        'htmllibmanager.longcache.format': opts['htmllibmanagerLongcacheFormat'],
        'htmllibmanager.useFileSystemOutputCache': opts['htmllibmanagerUseFileSystemOutputCache'],
        'htmllibmanager.fileSystemOutputCacheLocation': opts['htmllibmanagerFileSystemOutputCacheLocation'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'htmllibmanager.path.list': {
          value: opts['htmllibmanagerPathList'],
          collectionFormat: 'multi'
        },
        'htmllibmanager.excluded.path.list': {
          value: opts['htmllibmanagerExcludedPathList'],
          collectionFormat: 'multi'
        },
        'htmllibmanager.processor.js': {
          value: opts['htmllibmanagerProcessorJs'],
          collectionFormat: 'multi'
        },
        'htmllibmanager.processor.css': {
          value: opts['htmllibmanagerProcessorCss'],
          collectionFormat: 'multi'
        },
        'htmllibmanager.longcache.patterns': {
          value: opts['htmllibmanagerLongcachePatterns'],
          collectionFormat: 'multi'
        },
        'htmllibmanager.disable.replacement': {
          value: opts['htmllibmanagerDisableReplacement'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.ui.clientlibs.impl.HtmlLibraryManagerImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.enabled 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo}
     */
    this.comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'enabled': opts['enabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.workflow.console.frags.WorkflowWithdrawFeature', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.graniteWorkflowWorkflowPublishEventServiceEnabled 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo}
     */
    this.comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'granite.workflow.WorkflowPublishEventService.enabled': opts['graniteWorkflowWorkflowPublishEventServiceEnabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.workflow.console.publish.WorkflowPublishEventService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteWorkflowCoreJcrWorkflowBucketManager operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.bucketSize 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo}
     */
    this.comAdobeGraniteWorkflowCoreJcrWorkflowBucketManager = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'bucketSize': opts['bucketSize'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.workflow.core.jcr.WorkflowBucketManager', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteWorkflowCoreJobExternalProcessJobHandler operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.defaultTimeout 
     * @param {Number} opts.maxTimeout 
     * @param {Number} opts.defaultPeriod 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo}
     */
    this.comAdobeGraniteWorkflowCoreJobExternalProcessJobHandler = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'default.timeout': opts['defaultTimeout'],
        'max.timeout': opts['maxTimeout'],
        'default.period': opts['defaultPeriod'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.workflow.core.job.ExternalProcessJobHandler', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteWorkflowCoreJobJobHandler operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteWorkflowCoreJobJobHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteWorkflowCoreJobJobHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.jobTopics 
     * @param {Boolean} opts.allowSelfProcessTermination 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteWorkflowCoreJobJobHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteWorkflowCoreJobJobHandlerInfo}
     */
    this.comAdobeGraniteWorkflowCoreJobJobHandler = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'allow.self.process.termination': opts['allowSelfProcessTermination'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'job.topics': {
          value: opts['jobTopics'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteWorkflowCoreJobJobHandlerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.workflow.core.job.JobHandler', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.jobTopics 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo}
     */
    this.comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'job.topics': opts['jobTopics'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.workflow.core.offloading.WorkflowOffloadingJobConsumer', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteWorkflowCorePayloadMapCache operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteWorkflowCorePayloadMapCacheCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteWorkflowCorePayloadMapCacheInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.getSystemWorkflowModels 
     * @param {String} opts.getPackageRootPath 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteWorkflowCorePayloadMapCacheCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteWorkflowCorePayloadMapCacheInfo}
     */
    this.comAdobeGraniteWorkflowCorePayloadMapCache = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'getPackageRootPath': opts['getPackageRootPath'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'getSystemWorkflowModels': {
          value: opts['getSystemWorkflowModels'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteWorkflowCorePayloadMapCacheInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.workflow.core.PayloadMapCache', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.payloadMoveWhiteList 
     * @param {Boolean} opts.payloadMoveHandleFromWorkflowProcess 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo}
     */
    this.comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'payload.move.handle.from.workflow.process': opts['payloadMoveHandleFromWorkflowProcess'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'payload.move.white.list': {
          value: opts['payloadMoveWhiteList'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.workflow.core.payloadmap.PayloadMoveListener', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteWorkflowCoreWorkflowConfig operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteWorkflowCoreWorkflowConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteWorkflowCoreWorkflowConfigInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.cqWorkflowConfigWorkflowPackagesRootPath 
     * @param {Boolean} opts.cqWorkflowConfigWorkflowProcessLegacyMode 
     * @param {Boolean} opts.cqWorkflowConfigAllowLocking 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteWorkflowCoreWorkflowConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteWorkflowCoreWorkflowConfigInfo}
     */
    this.comAdobeGraniteWorkflowCoreWorkflowConfig = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.workflow.config.workflow.process.legacy.mode': opts['cqWorkflowConfigWorkflowProcessLegacyMode'],
        'cq.workflow.config.allow.locking': opts['cqWorkflowConfigAllowLocking'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'cq.workflow.config.workflow.packages.root.path': {
          value: opts['cqWorkflowConfigWorkflowPackagesRootPath'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteWorkflowCoreWorkflowConfigInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.workflow.core.WorkflowConfig', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteWorkflowCoreWorkflowSessionFactory operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteWorkflowCoreWorkflowSessionFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.graniteWorkflowinboxSortPropertyName 
     * @param {String} opts.graniteWorkflowinboxSortOrder 
     * @param {Number} opts.cqWorkflowJobRetry 
     * @param {Array.<String>} opts.cqWorkflowSuperuser 
     * @param {Number} opts.graniteWorkflowInboxQuerySize 
     * @param {Boolean} opts.graniteWorkflowAdminUserGroupFilter 
     * @param {Boolean} opts.graniteWorkflowEnforceWorkitemAssigneePermissions 
     * @param {Boolean} opts.graniteWorkflowEnforceWorkflowInitiatorPermissions 
     * @param {Boolean} opts.graniteWorkflowInjectTenantIdInJobTopics 
     * @param {Number} opts.graniteWorkflowMaxPurgeSaveThreshold 
     * @param {Number} opts.graniteWorkflowMaxPurgeQueryCount 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteWorkflowCoreWorkflowSessionFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo}
     */
    this.comAdobeGraniteWorkflowCoreWorkflowSessionFactory = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'granite.workflowinbox.sort.propertyName': opts['graniteWorkflowinboxSortPropertyName'],
        'granite.workflowinbox.sort.order': opts['graniteWorkflowinboxSortOrder'],
        'cq.workflow.job.retry': opts['cqWorkflowJobRetry'],
        'granite.workflow.inboxQuerySize': opts['graniteWorkflowInboxQuerySize'],
        'granite.workflow.adminUserGroupFilter': opts['graniteWorkflowAdminUserGroupFilter'],
        'granite.workflow.enforceWorkitemAssigneePermissions': opts['graniteWorkflowEnforceWorkitemAssigneePermissions'],
        'granite.workflow.enforceWorkflowInitiatorPermissions': opts['graniteWorkflowEnforceWorkflowInitiatorPermissions'],
        'granite.workflow.injectTenantIdInJobTopics': opts['graniteWorkflowInjectTenantIdInJobTopics'],
        'granite.workflow.maxPurgeSaveThreshold': opts['graniteWorkflowMaxPurgeSaveThreshold'],
        'granite.workflow.maxPurgeQueryCount': opts['graniteWorkflowMaxPurgeQueryCount'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'cq.workflow.superuser': {
          value: opts['cqWorkflowSuperuser'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.workflow.core.WorkflowSessionFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteWorkflowPurgeScheduler operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteWorkflowPurgeSchedulerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteWorkflowPurgeSchedulerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.scheduledpurgeName 
     * @param {String} opts.scheduledpurgeWorkflowStatus 
     * @param {Array.<String>} opts.scheduledpurgeModelIds 
     * @param {Number} opts.scheduledpurgeDaysold 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteWorkflowPurgeSchedulerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteWorkflowPurgeSchedulerInfo}
     */
    this.comAdobeGraniteWorkflowPurgeScheduler = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'scheduledpurge.name': opts['scheduledpurgeName'],
        'scheduledpurge.workflowStatus': opts['scheduledpurgeWorkflowStatus'],
        'scheduledpurge.daysold': opts['scheduledpurgeDaysold'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'scheduledpurge.modelIds': {
          value: opts['scheduledpurgeModelIds'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeGraniteWorkflowPurgeSchedulerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.workflow.purge.Scheduler', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeOctopusNcommBootstrap operation.
     * @callback module:api/ConfigmgrApi~comAdobeOctopusNcommBootstrapCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeOctopusNcommBootstrapInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.maxConnections 
     * @param {Number} opts.maxRequests 
     * @param {Number} opts.requestTimeout 
     * @param {Number} opts.requestRetries 
     * @param {Number} opts.launchTimeout 
     * @param {module:api/ConfigmgrApi~comAdobeOctopusNcommBootstrapCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeOctopusNcommBootstrapInfo}
     */
    this.comAdobeOctopusNcommBootstrap = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'maxConnections': opts['maxConnections'],
        'maxRequests': opts['maxRequests'],
        'requestTimeout': opts['requestTimeout'],
        'requestRetries': opts['requestRetries'],
        'launchTimeout': opts['launchTimeout'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeOctopusNcommBootstrapInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.octopus.ncomm.bootstrap', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS operation.
     * @callback module:api/ConfigmgrApi~comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.communitiesIntegrationLivefyreSlingEventFilter 
     * @param {module:api/ConfigmgrApi~comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo}
     */
    this.comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'communities.integration.livefyre.sling.event.filter': opts['communitiesIntegrationLivefyreSlingEventFilter'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.social.integrations.livefyre.user.pingforpull.impl.PingPullServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeXmpWorkerFilesNcommXMPFilesNComm operation.
     * @callback module:api/ConfigmgrApi~comAdobeXmpWorkerFilesNcommXMPFilesNCommCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.maxConnections 
     * @param {String} opts.maxRequests 
     * @param {String} opts.requestTimeout 
     * @param {String} opts.logDir 
     * @param {module:api/ConfigmgrApi~comAdobeXmpWorkerFilesNcommXMPFilesNCommCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo}
     */
    this.comAdobeXmpWorkerFilesNcommXMPFilesNComm = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'maxConnections': opts['maxConnections'],
        'maxRequests': opts['maxRequests'],
        'requestTimeout': opts['requestTimeout'],
        'logDir': opts['logDir'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.xmp.worker.files.ncomm.XMPFilesNComm', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCommonsDatasourceJdbcpoolJdbcPoolService operation.
     * @callback module:api/ConfigmgrApi~comDayCommonsDatasourceJdbcpoolJdbcPoolServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.jdbcDriverClass 
     * @param {String} opts.jdbcConnectionUri 
     * @param {String} opts.jdbcUsername 
     * @param {String} opts.jdbcPassword 
     * @param {String} opts.jdbcValidationQuery 
     * @param {Boolean} opts.defaultReadonly 
     * @param {Boolean} opts.defaultAutocommit 
     * @param {Number} opts.poolSize 
     * @param {Number} opts.poolMaxWaitMsec 
     * @param {String} opts.datasourceName 
     * @param {Array.<String>} opts.datasourceSvcProperties 
     * @param {module:api/ConfigmgrApi~comDayCommonsDatasourceJdbcpoolJdbcPoolServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo}
     */
    this.comDayCommonsDatasourceJdbcpoolJdbcPoolService = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'jdbc.driver.class': opts['jdbcDriverClass'],
        'jdbc.connection.uri': opts['jdbcConnectionUri'],
        'jdbc.username': opts['jdbcUsername'],
        'jdbc.password': opts['jdbcPassword'],
        'jdbc.validation.query': opts['jdbcValidationQuery'],
        'default.readonly': opts['defaultReadonly'],
        'default.autocommit': opts['defaultAutocommit'],
        'pool.size': opts['poolSize'],
        'pool.max.wait.msec': opts['poolMaxWaitMsec'],
        'datasource.name': opts['datasourceName'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'datasource.svc.properties': {
          value: opts['datasourceSvcProperties'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.commons.datasource.jdbcpool.JdbcPoolService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCommonsHttpclient operation.
     * @callback module:api/ConfigmgrApi~comDayCommonsHttpclientCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCommonsHttpclientInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.proxyEnabled 
     * @param {String} opts.proxyHost 
     * @param {String} opts.proxyUser 
     * @param {String} opts.proxyPassword 
     * @param {String} opts.proxyNtlmHost 
     * @param {String} opts.proxyNtlmDomain 
     * @param {Array.<String>} opts.proxyExceptions 
     * @param {module:api/ConfigmgrApi~comDayCommonsHttpclientCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCommonsHttpclientInfo}
     */
    this.comDayCommonsHttpclient = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'proxy.enabled': opts['proxyEnabled'],
        'proxy.host': opts['proxyHost'],
        'proxy.user': opts['proxyUser'],
        'proxy.password': opts['proxyPassword'],
        'proxy.ntlm.host': opts['proxyNtlmHost'],
        'proxy.ntlm.domain': opts['proxyNtlmDomain'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'proxy.exceptions': {
          value: opts['proxyExceptions'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCommonsHttpclientInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.commons.httpclient', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqAnalyticsImplStorePropertiesChangeListener operation.
     * @callback module:api/ConfigmgrApi~comDayCqAnalyticsImplStorePropertiesChangeListenerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.cqStoreListenerAdditionalStorePaths 
     * @param {module:api/ConfigmgrApi~comDayCqAnalyticsImplStorePropertiesChangeListenerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo}
     */
    this.comDayCqAnalyticsImplStorePropertiesChangeListener = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'cq.store.listener.additionalStorePaths': {
          value: opts['cqStoreListenerAdditionalStorePaths'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.analytics.impl.StorePropertiesChangeListener', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqAnalyticsSitecatalystImplExporterClassificationsExporte operation.
     * @callback module:api/ConfigmgrApi~comDayCqAnalyticsSitecatalystImplExporterClassificationsExporteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.allowedPaths 
     * @param {Number} opts.cqAnalyticsSaintExporterPagesize 
     * @param {module:api/ConfigmgrApi~comDayCqAnalyticsSitecatalystImplExporterClassificationsExporteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo}
     */
    this.comDayCqAnalyticsSitecatalystImplExporterClassificationsExporte = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.analytics.saint.exporter.pagesize': opts['cqAnalyticsSaintExporterPagesize'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'allowed.paths': {
          value: opts['allowedPaths'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.exporter.ClassificationsExporter', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqAnalyticsSitecatalystImplImporterReportImporter operation.
     * @callback module:api/ConfigmgrApi~comDayCqAnalyticsSitecatalystImplImporterReportImporterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.reportFetchAttempts 
     * @param {Number} opts.reportFetchDelay 
     * @param {module:api/ConfigmgrApi~comDayCqAnalyticsSitecatalystImplImporterReportImporterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo}
     */
    this.comDayCqAnalyticsSitecatalystImplImporterReportImporter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'report.fetch.attempts': opts['reportFetchAttempts'],
        'report.fetch.delay': opts['reportFetchDelay'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.importer.ReportImporter', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory operation.
     * @callback module:api/ConfigmgrApi~comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.cqAnalyticsAdapterfactoryContextstores 
     * @param {module:api/ConfigmgrApi~comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo}
     */
    this.comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'cq.analytics.adapterfactory.contextstores': {
          value: opts['cqAnalyticsAdapterfactoryContextstores'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystAdapterFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.cqAnalyticsSitecatalystServiceDatacenterUrl 
     * @param {Array.<String>} opts.devhostnamepatterns 
     * @param {Number} opts.connectionTimeout 
     * @param {Number} opts.socketTimeout 
     * @param {module:api/ConfigmgrApi~comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo}
     */
    this.comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'connection.timeout': opts['connectionTimeout'],
        'socket.timeout': opts['socketTimeout'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'cq.analytics.sitecatalyst.service.datacenter.url': {
          value: opts['cqAnalyticsSitecatalystServiceDatacenterUrl'],
          collectionFormat: 'multi'
        },
        'devhostnamepatterns': {
          value: opts['devhostnamepatterns'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystHttpClientImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqAnalyticsTestandtargetImplAccountOptionsUpdater operation.
     * @callback module:api/ConfigmgrApi~comDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.cqAnalyticsTestandtargetAccountoptionsupdaterEnabled 
     * @param {module:api/ConfigmgrApi~comDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo}
     */
    this.comDayCqAnalyticsTestandtargetImplAccountOptionsUpdater = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.analytics.testandtarget.accountoptionsupdater.enabled': opts['cqAnalyticsTestandtargetAccountoptionsupdaterEnabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.AccountOptionsUpdater', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener operation.
     * @callback module:api/ConfigmgrApi~comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled 
     * @param {module:api/ConfigmgrApi~comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo}
     */
    this.comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.analytics.testandtarget.deleteauthoractivitylistener.enabled': opts['cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.DeleteAuthorActivityListener', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener operation.
     * @callback module:api/ConfigmgrApi~comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled 
     * @param {module:api/ConfigmgrApi~comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo}
     */
    this.comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.analytics.testandtarget.pushauthorcampaignpagelistener.enabled': opts['cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.PushAuthorCampaignPageListener', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqAnalyticsTestandtargetImplSegmentImporter operation.
     * @callback module:api/ConfigmgrApi~comDayCqAnalyticsTestandtargetImplSegmentImporterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.cqAnalyticsTestandtargetSegmentimporterEnabled 
     * @param {module:api/ConfigmgrApi~comDayCqAnalyticsTestandtargetImplSegmentImporterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo}
     */
    this.comDayCqAnalyticsTestandtargetImplSegmentImporter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.analytics.testandtarget.segmentimporter.enabled': opts['cqAnalyticsTestandtargetSegmentimporterEnabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.SegmentImporter', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqAnalyticsTestandtargetImplServiceWebServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqAnalyticsTestandtargetImplServiceWebServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.endpointUri 
     * @param {Number} opts.connectionTimeout 
     * @param {Number} opts.socketTimeout 
     * @param {module:api/ConfigmgrApi~comDayCqAnalyticsTestandtargetImplServiceWebServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo}
     */
    this.comDayCqAnalyticsTestandtargetImplServiceWebServiceImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'endpointUri': opts['endpointUri'],
        'connectionTimeout': opts['connectionTimeout'],
        'socketTimeout': opts['socketTimeout'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.service.WebServiceImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqAnalyticsTestandtargetImplServletsAdminServerServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqAnalyticsTestandtargetImplServletsAdminServerServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.testandtargetEndpointUrl 
     * @param {module:api/ConfigmgrApi~comDayCqAnalyticsTestandtargetImplServletsAdminServerServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo}
     */
    this.comDayCqAnalyticsTestandtargetImplServletsAdminServerServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'testandtarget.endpoint.url': opts['testandtargetEndpointUrl'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.servlets.AdminServerServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.cqAnalyticsTestandtargetApiUrl 
     * @param {Number} opts.cqAnalyticsTestandtargetTimeout 
     * @param {Number} opts.cqAnalyticsTestandtargetSockettimeout 
     * @param {String} opts.cqAnalyticsTestandtargetRecommendationsUrlReplace 
     * @param {String} opts.cqAnalyticsTestandtargetRecommendationsUrlReplacewith 
     * @param {module:api/ConfigmgrApi~comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo}
     */
    this.comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.analytics.testandtarget.api.url': opts['cqAnalyticsTestandtargetApiUrl'],
        'cq.analytics.testandtarget.timeout': opts['cqAnalyticsTestandtargetTimeout'],
        'cq.analytics.testandtarget.sockettimeout': opts['cqAnalyticsTestandtargetSockettimeout'],
        'cq.analytics.testandtarget.recommendations.url.replace': opts['cqAnalyticsTestandtargetRecommendationsUrlReplace'],
        'cq.analytics.testandtarget.recommendations.url.replacewith': opts['cqAnalyticsTestandtargetRecommendationsUrlReplacewith'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.TestandtargetHttpClientImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqAuthImplCugCugSupportImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqAuthImplCugCugSupportImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqAuthImplCugCugSupportImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.cugExemptedPrincipals 
     * @param {Boolean} opts.cugEnabled 
     * @param {String} opts.cugPrincipalsRegex 
     * @param {String} opts.cugPrincipalsReplacement 
     * @param {module:api/ConfigmgrApi~comDayCqAuthImplCugCugSupportImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqAuthImplCugCugSupportImplInfo}
     */
    this.comDayCqAuthImplCugCugSupportImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cug.enabled': opts['cugEnabled'],
        'cug.principals.regex': opts['cugPrincipalsRegex'],
        'cug.principals.replacement': opts['cugPrincipalsReplacement'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'cug.exempted.principals': {
          value: opts['cugExemptedPrincipals'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqAuthImplCugCugSupportImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.auth.impl.cug.CugSupportImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqAuthImplLoginSelectorHandler operation.
     * @callback module:api/ConfigmgrApi~comDayCqAuthImplLoginSelectorHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqAuthImplLoginSelectorHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.path 
     * @param {Number} opts.serviceRanking 
     * @param {Array.<String>} opts.authLoginselectorMappings 
     * @param {Array.<String>} opts.authLoginselectorChangepwMappings 
     * @param {String} opts.authLoginselectorDefaultloginpage 
     * @param {String} opts.authLoginselectorDefaultchangepwpage 
     * @param {Array.<String>} opts.authLoginselectorHandle 
     * @param {Boolean} opts.authLoginselectorHandleAllExtensions 
     * @param {module:api/ConfigmgrApi~comDayCqAuthImplLoginSelectorHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqAuthImplLoginSelectorHandlerInfo}
     */
    this.comDayCqAuthImplLoginSelectorHandler = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'path': opts['path'],
        'service.ranking': opts['serviceRanking'],
        'auth.loginselector.defaultloginpage': opts['authLoginselectorDefaultloginpage'],
        'auth.loginselector.defaultchangepwpage': opts['authLoginselectorDefaultchangepwpage'],
        'auth.loginselector.handle.all.extensions': opts['authLoginselectorHandleAllExtensions'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'auth.loginselector.mappings': {
          value: opts['authLoginselectorMappings'],
          collectionFormat: 'multi'
        },
        'auth.loginselector.changepw.mappings': {
          value: opts['authLoginselectorChangepwMappings'],
          collectionFormat: 'multi'
        },
        'auth.loginselector.handle': {
          value: opts['authLoginselectorHandle'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqAuthImplLoginSelectorHandlerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.auth.impl.LoginSelectorHandler', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqCommonsImplExternalizerImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqCommonsImplExternalizerImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqCommonsImplExternalizerImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.externalizerDomains 
     * @param {String} opts.externalizerHost 
     * @param {String} opts.externalizerContextpath 
     * @param {Boolean} opts.externalizerEncodedpath 
     * @param {module:api/ConfigmgrApi~comDayCqCommonsImplExternalizerImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqCommonsImplExternalizerImplInfo}
     */
    this.comDayCqCommonsImplExternalizerImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'externalizer.host': opts['externalizerHost'],
        'externalizer.contextpath': opts['externalizerContextpath'],
        'externalizer.encodedpath': opts['externalizerEncodedpath'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'externalizer.domains': {
          value: opts['externalizerDomains'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqCommonsImplExternalizerImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.commons.impl.ExternalizerImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqCommonsServletsRootMappingServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqCommonsServletsRootMappingServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqCommonsServletsRootMappingServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.rootmappingTarget 
     * @param {module:api/ConfigmgrApi~comDayCqCommonsServletsRootMappingServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqCommonsServletsRootMappingServletInfo}
     */
    this.comDayCqCommonsServletsRootMappingServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'rootmapping.target': opts['rootmappingTarget'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqCommonsServletsRootMappingServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.commons.servlets.RootMappingServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke operation.
     * @callback module:api/ConfigmgrApi~comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.codeupgradetasks 
     * @param {Array.<String>} opts.codeupgradetaskfilters 
     * @param {module:api/ConfigmgrApi~comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo}
     */
    this.comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'codeupgradetasks': {
          value: opts['codeupgradetasks'],
          collectionFormat: 'multi'
        },
        'codeupgradetaskfilters': {
          value: opts['codeupgradetaskfilters'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.CodeUpgradeExecutionConditionChecker', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList operation.
     * @callback module:api/ConfigmgrApi~comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.upgradeTaskIgnoreList 
     * @param {module:api/ConfigmgrApi~comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo}
     */
    this.comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'upgradeTaskIgnoreList': {
          value: opts['upgradeTaskIgnoreList'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.UpgradeTaskIgnoreList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist operation.
     * @callback module:api/ConfigmgrApi~comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.effectiveBundleListPath 
     * @param {module:api/ConfigmgrApi~comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo}
     */
    this.comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'effectiveBundleListPath': opts['effectiveBundleListPath'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.VersionRangeTaskIgnorelist', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqContentsyncImplContentSyncManagerImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqContentsyncImplContentSyncManagerImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqContentsyncImplContentSyncManagerImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.contentsyncFallbackAuthorizable 
     * @param {String} opts.contentsyncFallbackUpdateuser 
     * @param {module:api/ConfigmgrApi~comDayCqContentsyncImplContentSyncManagerImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqContentsyncImplContentSyncManagerImplInfo}
     */
    this.comDayCqContentsyncImplContentSyncManagerImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'contentsync.fallback.authorizable': opts['contentsyncFallbackAuthorizable'],
        'contentsync.fallback.updateuser': opts['contentsyncFallbackUpdateuser'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqContentsyncImplContentSyncManagerImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.contentsync.impl.ContentSyncManagerImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCommonsHandlerStandardImageHandler operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCommonsHandlerStandardImageHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCommonsHandlerStandardImageHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.largeFileThreshold 
     * @param {Number} opts.largeCommentThreshold 
     * @param {Boolean} opts.cqDamEnableExtMetaExtraction 
     * @param {module:api/ConfigmgrApi~comDayCqDamCommonsHandlerStandardImageHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCommonsHandlerStandardImageHandlerInfo}
     */
    this.comDayCqDamCommonsHandlerStandardImageHandler = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'large_file_threshold': opts['largeFileThreshold'],
        'large_comment_threshold': opts['largeCommentThreshold'],
        'cq.dam.enable.ext.meta.extraction': opts['cqDamEnableExtMetaExtraction'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCommonsHandlerStandardImageHandlerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.commons.handler.StandardImageHandler', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCommonsMetadataXmpFilterBlackWhite operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCommonsMetadataXmpFilterBlackWhiteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.xmpFilterApplyWhitelist 
     * @param {Array.<String>} opts.xmpFilterWhitelist 
     * @param {Boolean} opts.xmpFilterApplyBlacklist 
     * @param {Array.<String>} opts.xmpFilterBlacklist 
     * @param {module:api/ConfigmgrApi~comDayCqDamCommonsMetadataXmpFilterBlackWhiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo}
     */
    this.comDayCqDamCommonsMetadataXmpFilterBlackWhite = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'xmp.filter.apply_whitelist': opts['xmpFilterApplyWhitelist'],
        'xmp.filter.apply_blacklist': opts['xmpFilterApplyBlacklist'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'xmp.filter.whitelist': {
          value: opts['xmpFilterWhitelist'],
          collectionFormat: 'multi'
        },
        'xmp.filter.blacklist': {
          value: opts['xmpFilterBlacklist'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.commons.metadata.XmpFilterBlackWhite', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCommonsUtilImplAssetCacheImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCommonsUtilImplAssetCacheImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCommonsUtilImplAssetCacheImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.largeFileMin 
     * @param {Boolean} opts.cacheApply 
     * @param {Array.<String>} opts.mimeTypes 
     * @param {module:api/ConfigmgrApi~comDayCqDamCommonsUtilImplAssetCacheImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCommonsUtilImplAssetCacheImplInfo}
     */
    this.comDayCqDamCommonsUtilImplAssetCacheImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'large.file.min': opts['largeFileMin'],
        'cache.apply': opts['cacheApply'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'mime.types': {
          value: opts['mimeTypes'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCommonsUtilImplAssetCacheImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.commons.util.impl.AssetCacheImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.cqDamConfigAnnotationPdfDocumentWidth 
     * @param {Number} opts.cqDamConfigAnnotationPdfDocumentHeight 
     * @param {Number} opts.cqDamConfigAnnotationPdfDocumentPaddingHorizontal 
     * @param {Number} opts.cqDamConfigAnnotationPdfDocumentPaddingVertical 
     * @param {Number} opts.cqDamConfigAnnotationPdfFontSize 
     * @param {String} opts.cqDamConfigAnnotationPdfFontColor 
     * @param {String} opts.cqDamConfigAnnotationPdfFontFamily 
     * @param {String} opts.cqDamConfigAnnotationPdfFontLight 
     * @param {Number} opts.cqDamConfigAnnotationPdfMarginTextImage 
     * @param {Number} opts.cqDamConfigAnnotationPdfMinImageHeight 
     * @param {Number} opts.cqDamConfigAnnotationPdfReviewStatusWidth 
     * @param {String} opts.cqDamConfigAnnotationPdfReviewStatusColorApproved 
     * @param {String} opts.cqDamConfigAnnotationPdfReviewStatusColorRejected 
     * @param {String} opts.cqDamConfigAnnotationPdfReviewStatusColorChangesRequested 
     * @param {Number} opts.cqDamConfigAnnotationPdfAnnotationMarkerWidth 
     * @param {Number} opts.cqDamConfigAnnotationPdfAssetMinheight 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo}
     */
    this.comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.dam.config.annotation.pdf.document.width': opts['cqDamConfigAnnotationPdfDocumentWidth'],
        'cq.dam.config.annotation.pdf.document.height': opts['cqDamConfigAnnotationPdfDocumentHeight'],
        'cq.dam.config.annotation.pdf.document.padding.horizontal': opts['cqDamConfigAnnotationPdfDocumentPaddingHorizontal'],
        'cq.dam.config.annotation.pdf.document.padding.vertical': opts['cqDamConfigAnnotationPdfDocumentPaddingVertical'],
        'cq.dam.config.annotation.pdf.font.size': opts['cqDamConfigAnnotationPdfFontSize'],
        'cq.dam.config.annotation.pdf.font.color': opts['cqDamConfigAnnotationPdfFontColor'],
        'cq.dam.config.annotation.pdf.font.family': opts['cqDamConfigAnnotationPdfFontFamily'],
        'cq.dam.config.annotation.pdf.font.light': opts['cqDamConfigAnnotationPdfFontLight'],
        'cq.dam.config.annotation.pdf.marginTextImage': opts['cqDamConfigAnnotationPdfMarginTextImage'],
        'cq.dam.config.annotation.pdf.minImageHeight': opts['cqDamConfigAnnotationPdfMinImageHeight'],
        'cq.dam.config.annotation.pdf.reviewStatus.width': opts['cqDamConfigAnnotationPdfReviewStatusWidth'],
        'cq.dam.config.annotation.pdf.reviewStatus.color.approved': opts['cqDamConfigAnnotationPdfReviewStatusColorApproved'],
        'cq.dam.config.annotation.pdf.reviewStatus.color.rejected': opts['cqDamConfigAnnotationPdfReviewStatusColorRejected'],
        'cq.dam.config.annotation.pdf.reviewStatus.color.changesRequested': opts['cqDamConfigAnnotationPdfReviewStatusColorChangesRequested'],
        'cq.dam.config.annotation.pdf.annotationMarker.width': opts['cqDamConfigAnnotationPdfAnnotationMarkerWidth'],
        'cq.dam.config.annotation.pdf.asset.minheight': opts['cqDamConfigAnnotationPdfAssetMinheight'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.annotation.pdf.AnnotationPdfConfig', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplAssetMoveListener operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplAssetMoveListenerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplAssetMoveListenerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.enabled 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplAssetMoveListenerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplAssetMoveListenerInfo}
     */
    this.comDayCqDamCoreImplAssetMoveListener = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'enabled': opts['enabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCoreImplAssetMoveListenerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.AssetMoveListener', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplAssethomeAssetHomePageConfiguration operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplAssethomeAssetHomePageConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.isEnabled 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplAssethomeAssetHomePageConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo}
     */
    this.comDayCqDamCoreImplAssethomeAssetHomePageConfiguration = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'isEnabled': opts['isEnabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.assethome.AssetHomePageConfiguration', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.cqDamAdhocAssetSharePrezipMaxcontentsize 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo}
     */
    this.comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.dam.adhoc.asset.share.prezip.maxcontentsize': opts['cqDamAdhocAssetSharePrezipMaxcontentsize'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.assetlinkshare.AdhocAssetShareProxyServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplCacheCQBufferedImageCache operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplCacheCQBufferedImageCacheCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.cqDamImageCacheMaxMemory 
     * @param {Number} opts.cqDamImageCacheMaxAge 
     * @param {String} opts.cqDamImageCacheMaxDimension 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplCacheCQBufferedImageCacheCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo}
     */
    this.comDayCqDamCoreImplCacheCQBufferedImageCache = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.dam.image.cache.max.memory': opts['cqDamImageCacheMaxMemory'],
        'cq.dam.image.cache.max.age': opts['cqDamImageCacheMaxAge'],
        'cq.dam.image.cache.max.dimension': opts['cqDamImageCacheMaxDimension'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.cache.CQBufferedImageCache', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplDamChangeEventListener operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplDamChangeEventListenerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplDamChangeEventListenerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.changeeventlistenerObservedPaths 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplDamChangeEventListenerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplDamChangeEventListenerInfo}
     */
    this.comDayCqDamCoreImplDamChangeEventListener = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'changeeventlistener.observed.paths': {
          value: opts['changeeventlistenerObservedPaths'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCoreImplDamChangeEventListenerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.DamChangeEventListener', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplDamEventPurgeService operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplDamEventPurgeServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplDamEventPurgeServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.schedulerExpression 
     * @param {Number} opts.maxSavedActivities 
     * @param {Number} opts.saveInterval 
     * @param {Boolean} opts.enableActivityPurge 
     * @param {String} opts.eventTypes 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplDamEventPurgeServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplDamEventPurgeServiceInfo}
     */
    this.comDayCqDamCoreImplDamEventPurgeService = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'scheduler.expression': opts['schedulerExpression'],
        'maxSavedActivities': opts['maxSavedActivities'],
        'saveInterval': opts['saveInterval'],
        'enableActivityPurge': opts['enableActivityPurge'],
        'eventTypes': opts['eventTypes'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCoreImplDamEventPurgeServiceInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.DamEventPurgeService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplDamEventRecorderImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplDamEventRecorderImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplDamEventRecorderImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.eventFilter 
     * @param {Number} opts.eventQueueLength 
     * @param {Boolean} opts.eventrecorderEnabled 
     * @param {Array.<String>} opts.eventrecorderBlacklist 
     * @param {String} opts.eventrecorderEventtypes 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplDamEventRecorderImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplDamEventRecorderImplInfo}
     */
    this.comDayCqDamCoreImplDamEventRecorderImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'event.filter': opts['eventFilter'],
        'event.queue.length': opts['eventQueueLength'],
        'eventrecorder.enabled': opts['eventrecorderEnabled'],
        'eventrecorder.eventtypes': opts['eventrecorderEventtypes'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'eventrecorder.blacklist': {
          value: opts['eventrecorderBlacklist'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCoreImplDamEventRecorderImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.DamEventRecorderImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplEventDamEventAuditListener operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplEventDamEventAuditListenerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplEventDamEventAuditListenerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.eventFilter 
     * @param {Boolean} opts.enabled 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplEventDamEventAuditListenerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplEventDamEventAuditListenerInfo}
     */
    this.comDayCqDamCoreImplEventDamEventAuditListener = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'event.filter': opts['eventFilter'],
        'enabled': opts['enabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCoreImplEventDamEventAuditListenerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.event.DamEventAuditListener', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplExpiryNotificationJobImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplExpiryNotificationJobImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplExpiryNotificationJobImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.cqDamExpiryNotificationSchedulerIstimebased 
     * @param {String} opts.cqDamExpiryNotificationSchedulerTimebasedRule 
     * @param {Number} opts.cqDamExpiryNotificationSchedulerPeriodRule 
     * @param {Boolean} opts.sendEmail 
     * @param {Number} opts.assetExpiredLimit 
     * @param {Number} opts.priorNotificationSeconds 
     * @param {String} opts.cqDamExpiryNotificationUrlProtocol 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplExpiryNotificationJobImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplExpiryNotificationJobImplInfo}
     */
    this.comDayCqDamCoreImplExpiryNotificationJobImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.dam.expiry.notification.scheduler.istimebased': opts['cqDamExpiryNotificationSchedulerIstimebased'],
        'cq.dam.expiry.notification.scheduler.timebased.rule': opts['cqDamExpiryNotificationSchedulerTimebasedRule'],
        'cq.dam.expiry.notification.scheduler.period.rule': opts['cqDamExpiryNotificationSchedulerPeriodRule'],
        'send_email': opts['sendEmail'],
        'asset_expired_limit': opts['assetExpiredLimit'],
        'prior_notification_seconds': opts['priorNotificationSeconds'],
        'cq.dam.expiry.notification.url.protocol': opts['cqDamExpiryNotificationUrlProtocol'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCoreImplExpiryNotificationJobImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.ExpiryNotificationJobImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.isEnabled 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo}
     */
    this.comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'isEnabled': opts['isEnabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.foldermetadataschema.FolderMetadataSchemaFeatureFlag', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplGfxCommonsGfxRenderer operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplGfxCommonsGfxRendererCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplGfxCommonsGfxRendererInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.skipBufferedcache 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplGfxCommonsGfxRendererCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplGfxCommonsGfxRendererInfo}
     */
    this.comDayCqDamCoreImplGfxCommonsGfxRenderer = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'skip.bufferedcache': opts['skipBufferedcache'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCoreImplGfxCommonsGfxRendererInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.gfx.CommonsGfxRenderer', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplHandlerEPSFormatHandler operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplHandlerEPSFormatHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.mimetype 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplHandlerEPSFormatHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo}
     */
    this.comDayCqDamCoreImplHandlerEPSFormatHandler = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'mimetype': opts['mimetype'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.handler.EPSFormatHandler', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplHandlerIndesignFormatHandler operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplHandlerIndesignFormatHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.mimetype 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplHandlerIndesignFormatHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo}
     */
    this.comDayCqDamCoreImplHandlerIndesignFormatHandler = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'mimetype': {
          value: opts['mimetype'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.handler.IndesignFormatHandler', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplHandlerJpegHandler operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplHandlerJpegHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplHandlerJpegHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.cqDamEnableExtMetaExtraction 
     * @param {Number} opts.largeFileThreshold 
     * @param {Number} opts.largeCommentThreshold 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplHandlerJpegHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplHandlerJpegHandlerInfo}
     */
    this.comDayCqDamCoreImplHandlerJpegHandler = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.dam.enable.ext.meta.extraction': opts['cqDamEnableExtMetaExtraction'],
        'large_file_threshold': opts['largeFileThreshold'],
        'large_comment_threshold': opts['largeCommentThreshold'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCoreImplHandlerJpegHandlerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.handler.JpegHandler', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplHandlerXmpNCommXMPHandler operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplHandlerXmpNCommXMPHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.xmphandlerCqFormats 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplHandlerXmpNCommXMPHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo}
     */
    this.comDayCqDamCoreImplHandlerXmpNCommXMPHandler = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'xmphandler.cq.formats': {
          value: opts['xmphandlerCqFormats'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.handler.xmp.NCommXMPHandler', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplJmxAssetIndexUpdateMonitor operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplJmxAssetIndexUpdateMonitorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.jmxObjectname 
     * @param {Boolean} opts.propertyMeasureEnabled 
     * @param {String} opts.propertyName 
     * @param {Number} opts.propertyMaxWaitMs 
     * @param {Number} opts.propertyMaxRate 
     * @param {Boolean} opts.fulltextMeasureEnabled 
     * @param {String} opts.fulltextName 
     * @param {Number} opts.fulltextMaxWaitMs 
     * @param {Number} opts.fulltextMaxRate 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplJmxAssetIndexUpdateMonitorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo}
     */
    this.comDayCqDamCoreImplJmxAssetIndexUpdateMonitor = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'jmx.objectname': opts['jmxObjectname'],
        'property.measure.enabled': opts['propertyMeasureEnabled'],
        'property.name': opts['propertyName'],
        'property.max.wait.ms': opts['propertyMaxWaitMs'],
        'property.max.rate': opts['propertyMaxRate'],
        'fulltext.measure.enabled': opts['fulltextMeasureEnabled'],
        'fulltext.name': opts['fulltextName'],
        'fulltext.max.wait.ms': opts['fulltextMaxWaitMs'],
        'fulltext.max.rate': opts['fulltextMaxRate'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetIndexUpdateMonitor', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplJmxAssetMigrationMBeanImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplJmxAssetMigrationMBeanImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.jmxObjectname 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplJmxAssetMigrationMBeanImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo}
     */
    this.comDayCqDamCoreImplJmxAssetMigrationMBeanImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'jmx.objectname': opts['jmxObjectname'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetMigrationMBeanImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplJmxAssetUpdateMonitorImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplJmxAssetUpdateMonitorImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.jmxObjectname 
     * @param {Boolean} opts.active 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplJmxAssetUpdateMonitorImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo}
     */
    this.comDayCqDamCoreImplJmxAssetUpdateMonitorImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'jmx.objectname': opts['jmxObjectname'],
        'active': opts['active'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetUpdateMonitorImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.operation 
     * @param {Boolean} opts.emailEnabled 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo}
     */
    this.comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'operation': opts['operation'],
        'emailEnabled': opts['emailEnabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataexport.AsyncMetadataExportConfigProviderService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.operation 
     * @param {String} opts.operationIcon 
     * @param {String} opts.topicName 
     * @param {Boolean} opts.emailEnabled 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo}
     */
    this.comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'operation': opts['operation'],
        'operationIcon': opts['operationIcon'],
        'topicName': opts['topicName'],
        'emailEnabled': opts['emailEnabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataimport.AsyncMetadataImportConfigProviderService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplLightboxLightboxServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplLightboxLightboxServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplLightboxLightboxServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.slingServletPaths 
     * @param {Array.<String>} opts.slingServletMethods 
     * @param {Boolean} opts.cqDamEnableAnonymous 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplLightboxLightboxServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplLightboxLightboxServletInfo}
     */
    this.comDayCqDamCoreImplLightboxLightboxServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'sling.servlet.paths': opts['slingServletPaths'],
        'cq.dam.enable.anonymous': opts['cqDamEnableAnonymous'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'sling.servlet.methods': {
          value: opts['slingServletMethods'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCoreImplLightboxLightboxServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.lightbox.LightboxServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplMetadataEditorSelectComponentHandler operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplMetadataEditorSelectComponentHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.granitedata 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplMetadataEditorSelectComponentHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo}
     */
    this.comDayCqDamCoreImplMetadataEditorSelectComponentHandler = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'granite:data': {
          value: opts['granitedata'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.metadata.editor.SelectComponentHandler', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.cqDamAllowAllMime 
     * @param {Array.<String>} opts.cqDamAllowedAssetMimes 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo}
     */
    this.comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.dam.allow.all.mime': opts['cqDamAllowAllMime'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'cq.dam.allowed.asset.mimes': {
          value: opts['cqDamAllowedAssetMimes'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.mimeType.AssetUploadRestrictionHelper', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.cqDamDetectAssetMimeFromContent 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo}
     */
    this.comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.dam.detect.asset.mime.from.content': opts['cqDamDetectAssetMimeFromContent'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.mimeType.DamMimeTypeServiceImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplMissingMetadataNotificationJob operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplMissingMetadataNotificationJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplMissingMetadataNotificationJobInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.cqDamMissingmetadataNotificationSchedulerIstimebased 
     * @param {String} opts.cqDamMissingmetadataNotificationSchedulerTimebasedRule 
     * @param {Number} opts.cqDamMissingmetadataNotificationSchedulerPeriodRule 
     * @param {String} opts.cqDamMissingmetadataNotificationRecipient 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplMissingMetadataNotificationJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplMissingMetadataNotificationJobInfo}
     */
    this.comDayCqDamCoreImplMissingMetadataNotificationJob = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.dam.missingmetadata.notification.scheduler.istimebased': opts['cqDamMissingmetadataNotificationSchedulerIstimebased'],
        'cq.dam.missingmetadata.notification.scheduler.timebased.rule': opts['cqDamMissingmetadataNotificationSchedulerTimebasedRule'],
        'cq.dam.missingmetadata.notification.scheduler.period.rule': opts['cqDamMissingmetadataNotificationSchedulerPeriodRule'],
        'cq.dam.missingmetadata.notification.recipient': opts['cqDamMissingmetadataNotificationRecipient'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCoreImplMissingMetadataNotificationJobInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.MissingMetadataNotificationJob', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.processLabel 
     * @param {Boolean} opts.notifyOnComplete 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo}
     */
    this.comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'process.label': opts['processLabel'],
        'Notify on Complete': opts['notifyOnComplete'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.process.SendTransientWorkflowCompletedEmailProcess', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplProcessTextExtractionProcess operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplProcessTextExtractionProcessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplProcessTextExtractionProcessInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.mimeTypes 
     * @param {Number} opts.maxExtract 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplProcessTextExtractionProcessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplProcessTextExtractionProcessInfo}
     */
    this.comDayCqDamCoreImplProcessTextExtractionProcess = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'maxExtract': opts['maxExtract'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'mimeTypes': {
          value: opts['mimeTypes'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCoreImplProcessTextExtractionProcessInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.process.TextExtractionProcess', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplRenditionMakerImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplRenditionMakerImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplRenditionMakerImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.xmpPropagate 
     * @param {Array.<String>} opts.xmpExcludes 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplRenditionMakerImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplRenditionMakerImplInfo}
     */
    this.comDayCqDamCoreImplRenditionMakerImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'xmp.propagate': opts['xmpPropagate'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'xmp.excludes': {
          value: opts['xmpExcludes'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCoreImplRenditionMakerImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.RenditionMakerImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplReportsReportExportService operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplReportsReportExportServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplReportsReportExportServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.queryBatchSize 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplReportsReportExportServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplReportsReportExportServiceInfo}
     */
    this.comDayCqDamCoreImplReportsReportExportService = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'queryBatchSize': opts['queryBatchSize'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCoreImplReportsReportExportServiceInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportExportService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplReportsReportPurgeService operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplReportsReportPurgeServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplReportsReportPurgeServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.schedulerExpression 
     * @param {Number} opts.maxSavedReports 
     * @param {Number} opts.timeDuration 
     * @param {Boolean} opts.enableReportPurge 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplReportsReportPurgeServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplReportsReportPurgeServiceInfo}
     */
    this.comDayCqDamCoreImplReportsReportPurgeService = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'scheduler.expression': opts['schedulerExpression'],
        'maxSavedReports': opts['maxSavedReports'],
        'timeDuration': opts['timeDuration'],
        'enableReportPurge': opts['enableReportPurge'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCoreImplReportsReportPurgeServiceInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportPurgeService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplServletAssetDownloadServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplServletAssetDownloadServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplServletAssetDownloadServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.enabled 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplServletAssetDownloadServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplServletAssetDownloadServletInfo}
     */
    this.comDayCqDamCoreImplServletAssetDownloadServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'enabled': opts['enabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCoreImplServletAssetDownloadServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetDownloadServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplServletAssetStatusServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplServletAssetStatusServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplServletAssetStatusServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.cqDamBatchStatusMaxassets 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplServletAssetStatusServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplServletAssetStatusServletInfo}
     */
    this.comDayCqDamCoreImplServletAssetStatusServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.dam.batch.status.maxassets': opts['cqDamBatchStatusMaxassets'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCoreImplServletAssetStatusServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetStatusServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplServletAssetXMPSearchServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplServletAssetXMPSearchServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplServletAssetXMPSearchServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.cqDamBatchIndesignMaxassets 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplServletAssetXMPSearchServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplServletAssetXMPSearchServletInfo}
     */
    this.comDayCqDamCoreImplServletAssetXMPSearchServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.dam.batch.indesign.maxassets': opts['cqDamBatchIndesignMaxassets'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCoreImplServletAssetXMPSearchServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetXMPSearchServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplServletBatchMetadataServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplServletBatchMetadataServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplServletBatchMetadataServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.cqDamBatchMetadataAssetDefault 
     * @param {Array.<String>} opts.cqDamBatchMetadataCollectionDefault 
     * @param {Number} opts.cqDamBatchMetadataMaxresources 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplServletBatchMetadataServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplServletBatchMetadataServletInfo}
     */
    this.comDayCqDamCoreImplServletBatchMetadataServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.dam.batch.metadata.maxresources': opts['cqDamBatchMetadataMaxresources'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'cq.dam.batch.metadata.asset.default': {
          value: opts['cqDamBatchMetadataAssetDefault'],
          collectionFormat: 'multi'
        },
        'cq.dam.batch.metadata.collection.default': {
          value: opts['cqDamBatchMetadataCollectionDefault'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCoreImplServletBatchMetadataServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.BatchMetadataServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplServletBinaryProviderServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplServletBinaryProviderServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplServletBinaryProviderServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.slingServletResourceTypes 
     * @param {Array.<String>} opts.slingServletMethods 
     * @param {Boolean} opts.cqDamDrmEnable 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplServletBinaryProviderServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplServletBinaryProviderServletInfo}
     */
    this.comDayCqDamCoreImplServletBinaryProviderServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.dam.drm.enable': opts['cqDamDrmEnable'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'sling.servlet.resourceTypes': {
          value: opts['slingServletResourceTypes'],
          collectionFormat: 'multi'
        },
        'sling.servlet.methods': {
          value: opts['slingServletMethods'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCoreImplServletBinaryProviderServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.BinaryProviderServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplServletCollectionServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplServletCollectionServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplServletCollectionServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.cqDamBatchCollectionProperties 
     * @param {Number} opts.cqDamBatchCollectionMaxcollections 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplServletCollectionServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplServletCollectionServletInfo}
     */
    this.comDayCqDamCoreImplServletCollectionServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.dam.batch.collection.maxcollections': opts['cqDamBatchCollectionMaxcollections'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'cq.dam.batch.collection.properties': {
          value: opts['cqDamBatchCollectionProperties'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCoreImplServletCollectionServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplServletCollectionsServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplServletCollectionsServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplServletCollectionsServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.cqDamBatchCollectionsProperties 
     * @param {Number} opts.cqDamBatchCollectionsLimit 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplServletCollectionsServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplServletCollectionsServletInfo}
     */
    this.comDayCqDamCoreImplServletCollectionsServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.dam.batch.collections.limit': opts['cqDamBatchCollectionsLimit'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'cq.dam.batch.collections.properties': {
          value: opts['cqDamBatchCollectionsProperties'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCoreImplServletCollectionsServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionsServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplServletCompanionServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplServletCompanionServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplServletCompanionServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.moreInfo 
     * @param {String} opts.mntoverlaydamguicontentassetsmoreinfoHtmlpath 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplServletCompanionServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplServletCompanionServletInfo}
     */
    this.comDayCqDamCoreImplServletCompanionServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'More Info': opts['moreInfo'],
        '/mnt/overlay/dam/gui/content/assets/moreinfo.html/${path}': opts['mntoverlaydamguicontentassetsmoreinfoHtmlpath'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCoreImplServletCompanionServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CompanionServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplServletCreateAssetServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplServletCreateAssetServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplServletCreateAssetServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.detectDuplicate 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplServletCreateAssetServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplServletCreateAssetServletInfo}
     */
    this.comDayCqDamCoreImplServletCreateAssetServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'detect_duplicate': opts['detectDuplicate'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCoreImplServletCreateAssetServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CreateAssetServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplServletDamContentDispositionFilter operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplServletDamContentDispositionFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplServletDamContentDispositionFilterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.cqMimeTypeBlacklist 
     * @param {Boolean} opts.cqDamEmptyMime 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplServletDamContentDispositionFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplServletDamContentDispositionFilterInfo}
     */
    this.comDayCqDamCoreImplServletDamContentDispositionFilter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.dam.empty.mime': opts['cqDamEmptyMime'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'cq.mime.type.blacklist': {
          value: opts['cqMimeTypeBlacklist'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCoreImplServletDamContentDispositionFilterInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.DamContentDispositionFilter', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplServletGuidLookupFilter operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplServletGuidLookupFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplServletGuidLookupFilterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.cqDamCoreGuidlookupfilterEnabled 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplServletGuidLookupFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplServletGuidLookupFilterInfo}
     */
    this.comDayCqDamCoreImplServletGuidLookupFilter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.dam.core.guidlookupfilter.enabled': opts['cqDamCoreGuidlookupfilterEnabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCoreImplServletGuidLookupFilterInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.GuidLookupFilter', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplServletHealthCheckServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplServletHealthCheckServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplServletHealthCheckServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.cqDamSyncWorkflowId 
     * @param {Array.<String>} opts.cqDamSyncFolderTypes 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplServletHealthCheckServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplServletHealthCheckServletInfo}
     */
    this.comDayCqDamCoreImplServletHealthCheckServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.dam.sync.workflow.id': opts['cqDamSyncWorkflowId'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'cq.dam.sync.folder.types': {
          value: opts['cqDamSyncFolderTypes'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCoreImplServletHealthCheckServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.HealthCheckServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplServletMetadataGetServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplServletMetadataGetServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplServletMetadataGetServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.slingServletResourceTypes 
     * @param {String} opts.slingServletMethods 
     * @param {String} opts.slingServletExtensions 
     * @param {String} opts.slingServletSelectors 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplServletMetadataGetServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplServletMetadataGetServletInfo}
     */
    this.comDayCqDamCoreImplServletMetadataGetServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'sling.servlet.resourceTypes': opts['slingServletResourceTypes'],
        'sling.servlet.methods': opts['slingServletMethods'],
        'sling.servlet.extensions': opts['slingServletExtensions'],
        'sling.servlet.selectors': opts['slingServletSelectors'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCoreImplServletMetadataGetServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.MetadataGetServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplServletMultipleLicenseAcceptServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplServletMultipleLicenseAcceptServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.cqDamDrmEnable 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplServletMultipleLicenseAcceptServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo}
     */
    this.comDayCqDamCoreImplServletMultipleLicenseAcceptServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.dam.drm.enable': opts['cqDamDrmEnable'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.MultipleLicenseAcceptServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplServletResourceCollectionServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplServletResourceCollectionServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplServletResourceCollectionServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.slingServletResourceTypes 
     * @param {String} opts.slingServletMethods 
     * @param {String} opts.slingServletSelectors 
     * @param {String} opts.downloadConfig 
     * @param {String} opts.viewSelector 
     * @param {Boolean} opts.sendEmail 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplServletResourceCollectionServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplServletResourceCollectionServletInfo}
     */
    this.comDayCqDamCoreImplServletResourceCollectionServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'sling.servlet.methods': opts['slingServletMethods'],
        'sling.servlet.selectors': opts['slingServletSelectors'],
        'download.config': opts['downloadConfig'],
        'view.selector': opts['viewSelector'],
        'send_email': opts['sendEmail'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'sling.servlet.resourceTypes': {
          value: opts['slingServletResourceTypes'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCoreImplServletResourceCollectionServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.ResourceCollectionServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.createPreviewEnabled 
     * @param {Boolean} opts.updatePreviewEnabled 
     * @param {Number} opts.queueSize 
     * @param {String} opts.folderPreviewRenditionRegex 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo}
     */
    this.comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'createPreviewEnabled': opts['createPreviewEnabled'],
        'updatePreviewEnabled': opts['updatePreviewEnabled'],
        'queueSize': opts['queueSize'],
        'folderPreviewRenditionRegex': opts['folderPreviewRenditionRegex'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.ui.preview.FolderPreviewUpdaterImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplUnzipUnzipConfig operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplUnzipUnzipConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplUnzipUnzipConfigInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.cqDamConfigUnzipMaxuncompressedsize 
     * @param {String} opts.cqDamConfigUnzipEncoding 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplUnzipUnzipConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplUnzipUnzipConfigInfo}
     */
    this.comDayCqDamCoreImplUnzipUnzipConfig = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.dam.config.unzip.maxuncompressedsize': opts['cqDamConfigUnzipMaxuncompressedsize'],
        'cq.dam.config.unzip.encoding': opts['cqDamConfigUnzipEncoding'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCoreImplUnzipUnzipConfigInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.unzip.UnzipConfig', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreProcessExifToolExtractMetadataProcess operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreProcessExifToolExtractMetadataProcessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.processLabel 
     * @param {Boolean} opts.cqDamEnableSha1 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreProcessExifToolExtractMetadataProcessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo}
     */
    this.comDayCqDamCoreProcessExifToolExtractMetadataProcess = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'process.label': opts['processLabel'],
        'cq.dam.enable.sha1': opts['cqDamEnableSha1'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.process.ExifToolExtractMetadataProcess', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreProcessExtractMetadataProcess operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreProcessExtractMetadataProcessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreProcessExtractMetadataProcessInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.processLabel 
     * @param {Boolean} opts.cqDamEnableSha1 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreProcessExtractMetadataProcessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreProcessExtractMetadataProcessInfo}
     */
    this.comDayCqDamCoreProcessExtractMetadataProcess = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'process.label': opts['processLabel'],
        'cq.dam.enable.sha1': opts['cqDamEnableSha1'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCoreProcessExtractMetadataProcessInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.process.ExtractMetadataProcess', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreProcessMetadataProcessorProcess operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreProcessMetadataProcessorProcessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreProcessMetadataProcessorProcessInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.processLabel 
     * @param {Boolean} opts.cqDamEnableSha1 
     * @param {Array.<String>} opts.cqDamMetadataXssprotectedProperties 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreProcessMetadataProcessorProcessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreProcessMetadataProcessorProcessInfo}
     */
    this.comDayCqDamCoreProcessMetadataProcessorProcess = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'process.label': opts['processLabel'],
        'cq.dam.enable.sha1': opts['cqDamEnableSha1'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'cq.dam.metadata.xssprotected.properties': {
          value: opts['cqDamMetadataXssprotectedProperties'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamCoreProcessMetadataProcessorProcessInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.process.MetadataProcessorProcess', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamHandlerFfmpegLocatorImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamHandlerFfmpegLocatorImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamHandlerFfmpegLocatorImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.executableSearchpath 
     * @param {module:api/ConfigmgrApi~comDayCqDamHandlerFfmpegLocatorImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamHandlerFfmpegLocatorImplInfo}
     */
    this.comDayCqDamHandlerFfmpegLocatorImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'executable.searchpath': {
          value: opts['executableSearchpath'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamHandlerFfmpegLocatorImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.handler.ffmpeg.LocatorImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.eventFilter 
     * @param {Array.<String>} opts.fontmgrSystemFontDir 
     * @param {String} opts.fontmgrAdobeFontDir 
     * @param {String} opts.fontmgrCustomerFontDir 
     * @param {module:api/ConfigmgrApi~comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo}
     */
    this.comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'event.filter': opts['eventFilter'],
        'fontmgr.adobe.font.dir': opts['fontmgrAdobeFontDir'],
        'fontmgr.customer.font.dir': opts['fontmgrCustomerFontDir'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'fontmgr.system.font.dir': {
          value: opts['fontmgrSystemFontDir'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.handler.gibson.fontmanager.impl.FontManagerServiceImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamHandlerStandardPdfPdfHandler operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamHandlerStandardPdfPdfHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamHandlerStandardPdfPdfHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.rasterAnnotation 
     * @param {module:api/ConfigmgrApi~comDayCqDamHandlerStandardPdfPdfHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamHandlerStandardPdfPdfHandlerInfo}
     */
    this.comDayCqDamHandlerStandardPdfPdfHandler = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'raster.annotation': opts['rasterAnnotation'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamHandlerStandardPdfPdfHandlerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.handler.standard.pdf.PdfHandler', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamHandlerStandardPsPostScriptHandler operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamHandlerStandardPsPostScriptHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamHandlerStandardPsPostScriptHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.rasterAnnotation 
     * @param {module:api/ConfigmgrApi~comDayCqDamHandlerStandardPsPostScriptHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamHandlerStandardPsPostScriptHandlerInfo}
     */
    this.comDayCqDamHandlerStandardPsPostScriptHandler = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'raster.annotation': opts['rasterAnnotation'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamHandlerStandardPsPostScriptHandlerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.handler.standard.ps.PostScriptHandler', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamHandlerStandardPsdPsdHandler operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamHandlerStandardPsdPsdHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamHandlerStandardPsdPsdHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.largeFileThreshold 
     * @param {module:api/ConfigmgrApi~comDayCqDamHandlerStandardPsdPsdHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamHandlerStandardPsdPsdHandlerInfo}
     */
    this.comDayCqDamHandlerStandardPsdPsdHandler = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'large_file_threshold': opts['largeFileThreshold'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamHandlerStandardPsdPsdHandlerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.handler.standard.psd.PsdHandler', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamIdsImplIDSJobProcessor operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamIdsImplIDSJobProcessorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamIdsImplIDSJobProcessorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.enableMultisession 
     * @param {Boolean} opts.idsCcEnable 
     * @param {Boolean} opts.enableRetry 
     * @param {Boolean} opts.enableRetryScripterror 
     * @param {String} opts.externalizerDomainCqhost 
     * @param {String} opts.externalizerDomainHttp 
     * @param {module:api/ConfigmgrApi~comDayCqDamIdsImplIDSJobProcessorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamIdsImplIDSJobProcessorInfo}
     */
    this.comDayCqDamIdsImplIDSJobProcessor = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'enable.multisession': opts['enableMultisession'],
        'ids.cc.enable': opts['idsCcEnable'],
        'enable.retry': opts['enableRetry'],
        'enable.retry.scripterror': opts['enableRetryScripterror'],
        'externalizer.domain.cqhost': opts['externalizerDomainCqhost'],
        'externalizer.domain.http': opts['externalizerDomainHttp'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamIdsImplIDSJobProcessorInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.ids.impl.IDSJobProcessor', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamIdsImplIDSPoolManagerImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamIdsImplIDSPoolManagerImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamIdsImplIDSPoolManagerImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.maxErrorsToBlacklist 
     * @param {Number} opts.retryIntervalToWhitelist 
     * @param {Number} opts.connectTimeout 
     * @param {Number} opts.socketTimeout 
     * @param {String} opts.processLabel 
     * @param {Number} opts.connectionUseMax 
     * @param {module:api/ConfigmgrApi~comDayCqDamIdsImplIDSPoolManagerImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamIdsImplIDSPoolManagerImplInfo}
     */
    this.comDayCqDamIdsImplIDSPoolManagerImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'max.errors.to.blacklist': opts['maxErrorsToBlacklist'],
        'retry.interval.to.whitelist': opts['retryIntervalToWhitelist'],
        'connect.timeout': opts['connectTimeout'],
        'socket.timeout': opts['socketTimeout'],
        'process.label': opts['processLabel'],
        'connection.use.max': opts['connectionUseMax'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamIdsImplIDSPoolManagerImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.ids.impl.IDSPoolManagerImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamInddImplHandlerIndesignXMPHandler operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamInddImplHandlerIndesignXMPHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.processLabel 
     * @param {Boolean} opts.extractPages 
     * @param {module:api/ConfigmgrApi~comDayCqDamInddImplHandlerIndesignXMPHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo}
     */
    this.comDayCqDamInddImplHandlerIndesignXMPHandler = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'process.label': opts['processLabel'],
        'extract.pages': opts['extractPages'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.indd.impl.handler.IndesignXMPHandler', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamInddImplServletSnippetCreationServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamInddImplServletSnippetCreationServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamInddImplServletSnippetCreationServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.snippetcreationMaxcollections 
     * @param {module:api/ConfigmgrApi~comDayCqDamInddImplServletSnippetCreationServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamInddImplServletSnippetCreationServletInfo}
     */
    this.comDayCqDamInddImplServletSnippetCreationServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'snippetcreation.maxcollections': opts['snippetcreationMaxcollections'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamInddImplServletSnippetCreationServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.indd.impl.servlet.SnippetCreationServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamInddProcessINDDMediaExtractProcess operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamInddProcessINDDMediaExtractProcessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamInddProcessINDDMediaExtractProcessInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.processLabel 
     * @param {String} opts.cqDamInddPagesRegex 
     * @param {Boolean} opts.idsJobDecoupled 
     * @param {String} opts.idsJobWorkflowModel 
     * @param {module:api/ConfigmgrApi~comDayCqDamInddProcessINDDMediaExtractProcessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamInddProcessINDDMediaExtractProcessInfo}
     */
    this.comDayCqDamInddProcessINDDMediaExtractProcess = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'process.label': opts['processLabel'],
        'cq.dam.indd.pages.regex': opts['cqDamInddPagesRegex'],
        'ids.job.decoupled': opts['idsJobDecoupled'],
        'ids.job.workflow.model': opts['idsJobWorkflowModel'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamInddProcessINDDMediaExtractProcessInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.indd.process.INDDMediaExtractProcess', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.batchCommitSize 
     * @param {module:api/ConfigmgrApi~comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo}
     */
    this.comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'batch.commit.size': opts['batchCommitSize'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceDataHandlerImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamPerformanceInternalAssetPerformanceReportSyncJob operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamPerformanceInternalAssetPerformanceReportSyncJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.schedulerExpression 
     * @param {module:api/ConfigmgrApi~comDayCqDamPerformanceInternalAssetPerformanceReportSyncJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo}
     */
    this.comDayCqDamPerformanceInternalAssetPerformanceReportSyncJob = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'scheduler.expression': opts['schedulerExpression'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceReportSyncJob', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.deleteZipFile 
     * @param {module:api/ConfigmgrApi~comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo}
     */
    this.comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'delete.zip.file': opts['deleteZipFile'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.pim.impl.sourcing.upload.process.ProductAssetsUploadProcess', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.cqDamS7damDynamicmediaconfigeventlistenerEnabled 
     * @param {module:api/ConfigmgrApi~comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo}
     */
    this.comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.dam.s7dam.dynamicmediaconfigeventlistener.enabled': opts['cqDamS7damDynamicmediaconfigeventlistenerEnabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.S7damDynamicMediaConfigEventListener', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.schedulerExpression 
     * @param {Boolean} opts.schedulerConcurrent 
     * @param {module:api/ConfigmgrApi~comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo}
     */
    this.comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'scheduler.expression': opts['schedulerExpression'],
        'scheduler.concurrent': opts['schedulerConcurrent'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.SiteCatalystReportRunner', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamS7damCommonPostServletsSetCreateHandler operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamS7damCommonPostServletsSetCreateHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.slingPostOperation 
     * @param {String} opts.slingServletMethods 
     * @param {module:api/ConfigmgrApi~comDayCqDamS7damCommonPostServletsSetCreateHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo}
     */
    this.comDayCqDamS7damCommonPostServletsSetCreateHandler = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'sling.post.operation': opts['slingPostOperation'],
        'sling.servlet.methods': opts['slingServletMethods'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetCreateHandler', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamS7damCommonPostServletsSetModifyHandler operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamS7damCommonPostServletsSetModifyHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.slingPostOperation 
     * @param {String} opts.slingServletMethods 
     * @param {module:api/ConfigmgrApi~comDayCqDamS7damCommonPostServletsSetModifyHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo}
     */
    this.comDayCqDamS7damCommonPostServletsSetModifyHandler = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'sling.post.operation': opts['slingPostOperation'],
        'sling.servlet.methods': opts['slingServletMethods'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetModifyHandler', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.processLabel 
     * @param {module:api/ConfigmgrApi~comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo}
     */
    this.comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'process.label': opts['processLabel'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.s7dam.common.process.VideoThumbnailDownloadProcess', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamS7damCommonS7damDamChangeEventListener operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamS7damCommonS7damDamChangeEventListenerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.cqDamS7damDamchangeeventlistenerEnabled 
     * @param {module:api/ConfigmgrApi~comDayCqDamS7damCommonS7damDamChangeEventListenerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo}
     */
    this.comDayCqDamS7damCommonS7damDamChangeEventListener = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.dam.s7dam.damchangeeventlistener.enabled': opts['cqDamS7damDamchangeeventlistenerEnabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.s7dam.common.S7damDamChangeEventListener', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamS7damCommonServletsS7damProductInfoServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamS7damCommonServletsS7damProductInfoServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.slingServletPaths 
     * @param {String} opts.slingServletMethods 
     * @param {module:api/ConfigmgrApi~comDayCqDamS7damCommonServletsS7damProductInfoServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo}
     */
    this.comDayCqDamS7damCommonServletsS7damProductInfoServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'sling.servlet.paths': opts['slingServletPaths'],
        'sling.servlet.methods': opts['slingServletMethods'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.s7dam.common.servlets.S7damProductInfoServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName 
     * @param {Number} opts.cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName 
     * @param {Number} opts.cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName 
     * @param {Number} opts.cqDamS7damVideoproxyclientserviceHttpReadtimeoutName 
     * @param {Number} opts.cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName 
     * @param {Number} opts.cqDamS7damVideoproxyclientserviceHttpMaxretrycountName 
     * @param {Number} opts.cqDamS7damVideoproxyclientserviceUploadprogressIntervalName 
     * @param {module:api/ConfigmgrApi~comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo}
     */
    this.comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.dam.s7dam.videoproxyclientservice.multipartupload.minsize.name': opts['cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName'],
        'cq.dam.s7dam.videoproxyclientservice.multipartupload.partsize.name': opts['cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName'],
        'cq.dam.s7dam.videoproxyclientservice.multipartupload.numthread.name': opts['cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName'],
        'cq.dam.s7dam.videoproxyclientservice.http.readtimeout.name': opts['cqDamS7damVideoproxyclientserviceHttpReadtimeoutName'],
        'cq.dam.s7dam.videoproxyclientservice.http.connectiontimeout.name': opts['cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName'],
        'cq.dam.s7dam.videoproxyclientservice.http.maxretrycount.name': opts['cqDamS7damVideoproxyclientserviceHttpMaxretrycountName'],
        'cq.dam.s7dam.videoproxyclientservice.uploadprogress.interval.name': opts['cqDamS7damVideoproxyclientserviceUploadprogressIntervalName'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.s7dam.common.video.impl.VideoProxyClientServiceImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamScene7ImplScene7APIClientImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamScene7ImplScene7APIClientImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamScene7ImplScene7APIClientImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.cqDamScene7ApiclientRecordsperpageNofilterName 
     * @param {Number} opts.cqDamScene7ApiclientRecordsperpageWithfilterName 
     * @param {module:api/ConfigmgrApi~comDayCqDamScene7ImplScene7APIClientImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamScene7ImplScene7APIClientImplInfo}
     */
    this.comDayCqDamScene7ImplScene7APIClientImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.dam.scene7.apiclient.recordsperpage.nofilter.name': opts['cqDamScene7ApiclientRecordsperpageNofilterName'],
        'cq.dam.scene7.apiclient.recordsperpage.withfilter.name': opts['cqDamScene7ApiclientRecordsperpageWithfilterName'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamScene7ImplScene7APIClientImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7APIClientImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamScene7ImplScene7AssetMimeTypeServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.cqDamScene7AssetmimetypeserviceMapping 
     * @param {module:api/ConfigmgrApi~comDayCqDamScene7ImplScene7AssetMimeTypeServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo}
     */
    this.comDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'cq.dam.scene7.assetmimetypeservice.mapping': {
          value: opts['cqDamScene7AssetmimetypeserviceMapping'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7AssetMimeTypeServiceImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamScene7ImplScene7ConfigurationEventListener operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamScene7ImplScene7ConfigurationEventListenerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.cqDamScene7ConfigurationeventlistenerEnabled 
     * @param {module:api/ConfigmgrApi~comDayCqDamScene7ImplScene7ConfigurationEventListenerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo}
     */
    this.comDayCqDamScene7ImplScene7ConfigurationEventListener = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.dam.scene7.configurationeventlistener.enabled': opts['cqDamScene7ConfigurationeventlistenerEnabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7ConfigurationEventListener', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamScene7ImplScene7DamChangeEventListener operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamScene7ImplScene7DamChangeEventListenerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.cqDamScene7DamchangeeventlistenerEnabled 
     * @param {Array.<String>} opts.cqDamScene7DamchangeeventlistenerObservedPaths 
     * @param {module:api/ConfigmgrApi~comDayCqDamScene7ImplScene7DamChangeEventListenerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo}
     */
    this.comDayCqDamScene7ImplScene7DamChangeEventListener = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.dam.scene7.damchangeeventlistener.enabled': opts['cqDamScene7DamchangeeventlistenerEnabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'cq.dam.scene7.damchangeeventlistener.observed.paths': {
          value: opts['cqDamScene7DamchangeeventlistenerObservedPaths'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7DamChangeEventListener', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamScene7ImplScene7FlashTemplatesServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamScene7ImplScene7FlashTemplatesServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.scene7FlashTemplatesRti 
     * @param {String} opts.scene7FlashTemplatesRsi 
     * @param {String} opts.scene7FlashTemplatesRb 
     * @param {String} opts.scene7FlashTemplatesRurl 
     * @param {String} opts.scene7FlashTemplateUrlFormatParameter 
     * @param {module:api/ConfigmgrApi~comDayCqDamScene7ImplScene7FlashTemplatesServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo}
     */
    this.comDayCqDamScene7ImplScene7FlashTemplatesServiceImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'scene7FlashTemplates.rti': opts['scene7FlashTemplatesRti'],
        'scene7FlashTemplates.rsi': opts['scene7FlashTemplatesRsi'],
        'scene7FlashTemplates.rb': opts['scene7FlashTemplatesRb'],
        'scene7FlashTemplates.rurl': opts['scene7FlashTemplatesRurl'],
        'scene7FlashTemplate.urlFormatParameter': opts['scene7FlashTemplateUrlFormatParameter'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7FlashTemplatesServiceImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamScene7ImplScene7UploadServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamScene7ImplScene7UploadServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamScene7ImplScene7UploadServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.cqDamScene7UploadserviceActivejobtimeoutLabel 
     * @param {Number} opts.cqDamScene7UploadserviceConnectionmaxperrouteLabel 
     * @param {module:api/ConfigmgrApi~comDayCqDamScene7ImplScene7UploadServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamScene7ImplScene7UploadServiceImplInfo}
     */
    this.comDayCqDamScene7ImplScene7UploadServiceImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.dam.scene7.uploadservice.activejobtimeout.label': opts['cqDamScene7UploadserviceActivejobtimeoutLabel'],
        'cq.dam.scene7.uploadservice.connectionmaxperroute.label': opts['cqDamScene7UploadserviceConnectionmaxperrouteLabel'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamScene7ImplScene7UploadServiceImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7UploadServiceImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.getCacheExpirationUnit 
     * @param {Number} opts.getCacheExpirationValue 
     * @param {module:api/ConfigmgrApi~comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo}
     */
    this.comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'getCacheExpirationUnit': opts['getCacheExpirationUnit'],
        'getCacheExpirationValue': opts['getCacheExpirationValue'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.stock.integration.impl.cache.StockCacheConfigurationServiceImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamStockIntegrationImplConfigurationStockConfiguration operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamStockIntegrationImplConfigurationStockConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {String} opts.locale 
     * @param {String} opts.imsConfig 
     * @param {module:api/ConfigmgrApi~comDayCqDamStockIntegrationImplConfigurationStockConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo}
     */
    this.comDayCqDamStockIntegrationImplConfigurationStockConfiguration = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'name': opts['name'],
        'locale': opts['locale'],
        'imsConfig': opts['imsConfig'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.stock.integration.impl.configuration.StockConfigurationImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamVideoImplServletVideoTestServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamVideoImplServletVideoTestServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamVideoImplServletVideoTestServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.enabled 
     * @param {module:api/ConfigmgrApi~comDayCqDamVideoImplServletVideoTestServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamVideoImplServletVideoTestServletInfo}
     */
    this.comDayCqDamVideoImplServletVideoTestServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'enabled': opts['enabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqDamVideoImplServletVideoTestServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.video.impl.servlet.VideoTestServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqExtwidgetServletsImageSpriteServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqExtwidgetServletsImageSpriteServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqExtwidgetServletsImageSpriteServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.maxWidth 
     * @param {Number} opts.maxHeight 
     * @param {module:api/ConfigmgrApi~comDayCqExtwidgetServletsImageSpriteServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqExtwidgetServletsImageSpriteServletInfo}
     */
    this.comDayCqExtwidgetServletsImageSpriteServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'maxWidth': opts['maxWidth'],
        'maxHeight': opts['maxHeight'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqExtwidgetServletsImageSpriteServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.extwidget.servlets.ImageSpriteServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqImageInternalFontFontHelper operation.
     * @callback module:api/ConfigmgrApi~comDayCqImageInternalFontFontHelperCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqImageInternalFontFontHelperInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.fontpath 
     * @param {Number} opts.oversamplingFactor 
     * @param {module:api/ConfigmgrApi~comDayCqImageInternalFontFontHelperCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqImageInternalFontFontHelperInfo}
     */
    this.comDayCqImageInternalFontFontHelper = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'oversamplingFactor': opts['oversamplingFactor'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'fontpath': {
          value: opts['fontpath'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqImageInternalFontFontHelperInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.image.internal.font.FontHelper', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqJcrclustersupportClusterStartLevelController operation.
     * @callback module:api/ConfigmgrApi~comDayCqJcrclustersupportClusterStartLevelControllerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqJcrclustersupportClusterStartLevelControllerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.clusterLevelEnable 
     * @param {Number} opts.clusterMasterLevel 
     * @param {Number} opts.clusterSlaveLevel 
     * @param {module:api/ConfigmgrApi~comDayCqJcrclustersupportClusterStartLevelControllerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqJcrclustersupportClusterStartLevelControllerInfo}
     */
    this.comDayCqJcrclustersupportClusterStartLevelController = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cluster.level.enable': opts['clusterLevelEnable'],
        'cluster.master.level': opts['clusterMasterLevel'],
        'cluster.slave.level': opts['clusterSlaveLevel'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqJcrclustersupportClusterStartLevelControllerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.jcrclustersupport.ClusterStartLevelController', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqMailerDefaultMailService operation.
     * @callback module:api/ConfigmgrApi~comDayCqMailerDefaultMailServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqMailerDefaultMailServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.smtpHost 
     * @param {Number} opts.smtpPort 
     * @param {String} opts.smtpUser 
     * @param {String} opts.smtpPassword 
     * @param {String} opts.fromAddress 
     * @param {Boolean} opts.smtpSsl 
     * @param {Boolean} opts.smtpStarttls 
     * @param {Boolean} opts.debugEmail 
     * @param {module:api/ConfigmgrApi~comDayCqMailerDefaultMailServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqMailerDefaultMailServiceInfo}
     */
    this.comDayCqMailerDefaultMailService = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'smtp.host': opts['smtpHost'],
        'smtp.port': opts['smtpPort'],
        'smtp.user': opts['smtpUser'],
        'smtp.password': opts['smtpPassword'],
        'from.address': opts['fromAddress'],
        'smtp.ssl': opts['smtpSsl'],
        'smtp.starttls': opts['smtpStarttls'],
        'debug.email': opts['debugEmail'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqMailerDefaultMailServiceInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.mailer.DefaultMailService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqMailerImplCqMailingService operation.
     * @callback module:api/ConfigmgrApi~comDayCqMailerImplCqMailingServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqMailerImplCqMailingServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.maxRecipientCount 
     * @param {module:api/ConfigmgrApi~comDayCqMailerImplCqMailingServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqMailerImplCqMailingServiceInfo}
     */
    this.comDayCqMailerImplCqMailingService = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'max.recipient.count': opts['maxRecipientCount'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqMailerImplCqMailingServiceInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.mailer.impl.CqMailingService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqMailerImplEmailCqEmailTemplateFactory operation.
     * @callback module:api/ConfigmgrApi~comDayCqMailerImplEmailCqEmailTemplateFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.mailerEmailCharset 
     * @param {module:api/ConfigmgrApi~comDayCqMailerImplEmailCqEmailTemplateFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo}
     */
    this.comDayCqMailerImplEmailCqEmailTemplateFactory = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'mailer.email.charset': opts['mailerEmailCharset'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.mailer.impl.email.CqEmailTemplateFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqMailerImplEmailCqRetrieverTemplateFactory operation.
     * @callback module:api/ConfigmgrApi~comDayCqMailerImplEmailCqRetrieverTemplateFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.mailerEmailEmbed 
     * @param {String} opts.mailerEmailCharset 
     * @param {String} opts.mailerEmailRetrieverUserID 
     * @param {String} opts.mailerEmailRetrieverUserPWD 
     * @param {module:api/ConfigmgrApi~comDayCqMailerImplEmailCqRetrieverTemplateFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo}
     */
    this.comDayCqMailerImplEmailCqRetrieverTemplateFactory = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'mailer.email.embed': opts['mailerEmailEmbed'],
        'mailer.email.charset': opts['mailerEmailCharset'],
        'mailer.email.retrieverUserID': opts['mailerEmailRetrieverUserID'],
        'mailer.email.retrieverUserPWD': opts['mailerEmailRetrieverUserPWD'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.mailer.impl.email.CqRetrieverTemplateFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqMcmCampaignImplIntegrationConfigImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqMcmCampaignImplIntegrationConfigImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqMcmCampaignImplIntegrationConfigImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.aemMcmCampaignFormConstraints 
     * @param {String} opts.aemMcmCampaignPublicUrl 
     * @param {Boolean} opts.aemMcmCampaignRelaxedSSL 
     * @param {module:api/ConfigmgrApi~comDayCqMcmCampaignImplIntegrationConfigImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqMcmCampaignImplIntegrationConfigImplInfo}
     */
    this.comDayCqMcmCampaignImplIntegrationConfigImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'aem.mcm.campaign.publicUrl': opts['aemMcmCampaignPublicUrl'],
        'aem.mcm.campaign.relaxedSSL': opts['aemMcmCampaignRelaxedSSL'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'aem.mcm.campaign.formConstraints': {
          value: opts['aemMcmCampaignFormConstraints'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqMcmCampaignImplIntegrationConfigImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.mcm.campaign.impl.IntegrationConfigImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqMcmCampaignImporterPersonalizedTextHandlerFactory operation.
     * @callback module:api/ConfigmgrApi~comDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.tagpattern 
     * @param {module:api/ConfigmgrApi~comDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo}
     */
    this.comDayCqMcmCampaignImporterPersonalizedTextHandlerFactory = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'service.ranking': opts['serviceRanking'],
        'tagpattern': opts['tagpattern'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.mcm.campaign.importer.PersonalizedTextHandlerFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqMcmCoreNewsletterNewsletterEmailServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqMcmCoreNewsletterNewsletterEmailServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.fromAddress 
     * @param {String} opts.senderHost 
     * @param {String} opts.maxBounceCount 
     * @param {module:api/ConfigmgrApi~comDayCqMcmCoreNewsletterNewsletterEmailServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo}
     */
    this.comDayCqMcmCoreNewsletterNewsletterEmailServiceImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'from.address': opts['fromAddress'],
        'sender.host': opts['senderHost'],
        'max.bounce.count': opts['maxBounceCount'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.mcm.core.newsletter.NewsletterEmailServiceImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqMcmImplMCMConfiguration operation.
     * @callback module:api/ConfigmgrApi~comDayCqMcmImplMCMConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqMcmImplMCMConfigurationInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.experienceIndirection 
     * @param {Array.<String>} opts.touchpointIndirection 
     * @param {module:api/ConfigmgrApi~comDayCqMcmImplMCMConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqMcmImplMCMConfigurationInfo}
     */
    this.comDayCqMcmImplMCMConfiguration = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'experience.indirection': {
          value: opts['experienceIndirection'],
          collectionFormat: 'multi'
        },
        'touchpoint.indirection': {
          value: opts['touchpointIndirection'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqMcmImplMCMConfigurationInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.mcm.impl.MCMConfiguration', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen operation.
     * @callback module:api/ConfigmgrApi~comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.tagpattern 
     * @param {String} opts.componentResourceType 
     * @param {module:api/ConfigmgrApi~comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo}
     */
    this.comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'service.ranking': opts['serviceRanking'],
        'tagpattern': opts['tagpattern'],
        'component.resourceType': opts['componentResourceType'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.ClickThroughComponentTagHandlerFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug operation.
     * @callback module:api/ConfigmgrApi~comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.tagpattern 
     * @param {String} opts.componentResourceType 
     * @param {module:api/ConfigmgrApi~comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo}
     */
    this.comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'service.ranking': opts['serviceRanking'],
        'tagpattern': opts['tagpattern'],
        'component.resourceType': opts['componentResourceType'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.GraphicalClickThroughComponentTagHandlerFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent operation.
     * @callback module:api/ConfigmgrApi~comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.tagpattern 
     * @param {module:api/ConfigmgrApi~comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo}
     */
    this.comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'service.ranking': opts['serviceRanking'],
        'tagpattern': opts['tagpattern'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.LeadFormCTAComponentTagHandlerFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa operation.
     * @callback module:api/ConfigmgrApi~comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.tagpattern 
     * @param {module:api/ConfigmgrApi~comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo}
     */
    this.comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'service.ranking': opts['serviceRanking'],
        'tagpattern': opts['tagpattern'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.MBoxExperienceTagHandlerFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH operation.
     * @callback module:api/ConfigmgrApi~comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.tagpattern 
     * @param {String} opts.componentResourceType 
     * @param {module:api/ConfigmgrApi~comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo}
     */
    this.comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'service.ranking': opts['serviceRanking'],
        'tagpattern': opts['tagpattern'],
        'component.resourceType': opts['componentResourceType'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.TargetComponentTagHandlerFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqNotificationImplNotificationServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqNotificationImplNotificationServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqNotificationImplNotificationServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.eventFilter 
     * @param {module:api/ConfigmgrApi~comDayCqNotificationImplNotificationServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqNotificationImplNotificationServiceImplInfo}
     */
    this.comDayCqNotificationImplNotificationServiceImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'event.filter': opts['eventFilter'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqNotificationImplNotificationServiceImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.notification.impl.NotificationServiceImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqPersonalizationImplServletsTargetingConfigurationServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqPersonalizationImplServletsTargetingConfigurationServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.forcelocation 
     * @param {module:api/ConfigmgrApi~comDayCqPersonalizationImplServletsTargetingConfigurationServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo}
     */
    this.comDayCqPersonalizationImplServletsTargetingConfigurationServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'forcelocation': opts['forcelocation'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.personalization.impl.servlets.TargetingConfigurationServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqPollingImporterImplManagedPollConfigImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqPollingImporterImplManagedPollConfigImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqPollingImporterImplManagedPollConfigImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.id 
     * @param {Boolean} opts.enabled 
     * @param {Boolean} opts.reference 
     * @param {Number} opts.interval 
     * @param {String} opts.expression 
     * @param {String} opts.source 
     * @param {String} opts.target 
     * @param {String} opts.login 
     * @param {String} opts.password 
     * @param {module:api/ConfigmgrApi~comDayCqPollingImporterImplManagedPollConfigImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqPollingImporterImplManagedPollConfigImplInfo}
     */
    this.comDayCqPollingImporterImplManagedPollConfigImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'id': opts['id'],
        'enabled': opts['enabled'],
        'reference': opts['reference'],
        'interval': opts['interval'],
        'expression': opts['expression'],
        'source': opts['source'],
        'target': opts['target'],
        'login': opts['login'],
        'password': opts['password'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqPollingImporterImplManagedPollConfigImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollConfigImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqPollingImporterImplManagedPollingImporterImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqPollingImporterImplManagedPollingImporterImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqPollingImporterImplManagedPollingImporterImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.importerUser 
     * @param {module:api/ConfigmgrApi~comDayCqPollingImporterImplManagedPollingImporterImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqPollingImporterImplManagedPollingImporterImplInfo}
     */
    this.comDayCqPollingImporterImplManagedPollingImporterImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'importer.user': opts['importerUser'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqPollingImporterImplManagedPollingImporterImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollingImporterImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqPollingImporterImplPollingImporterImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqPollingImporterImplPollingImporterImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqPollingImporterImplPollingImporterImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.importerMinInterval 
     * @param {String} opts.importerUser 
     * @param {Array.<String>} opts.excludePaths 
     * @param {Array.<String>} opts.includePaths 
     * @param {module:api/ConfigmgrApi~comDayCqPollingImporterImplPollingImporterImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqPollingImporterImplPollingImporterImplInfo}
     */
    this.comDayCqPollingImporterImplPollingImporterImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'importer.min.interval': opts['importerMinInterval'],
        'importer.user': opts['importerUser'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'exclude.paths': {
          value: opts['excludePaths'],
          collectionFormat: 'multi'
        },
        'include.paths': {
          value: opts['includePaths'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqPollingImporterImplPollingImporterImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.polling.importer.impl.PollingImporterImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqReplicationAuditReplicationEventListener operation.
     * @callback module:api/ConfigmgrApi~comDayCqReplicationAuditReplicationEventListenerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqReplicationAuditReplicationEventListenerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {module:api/ConfigmgrApi~comDayCqReplicationAuditReplicationEventListenerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqReplicationAuditReplicationEventListenerInfo}
     */
    this.comDayCqReplicationAuditReplicationEventListener = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'service.ranking': opts['serviceRanking'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqReplicationAuditReplicationEventListenerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.replication.audit.ReplicationEventListener', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqReplicationContentStaticContentBuilder operation.
     * @callback module:api/ConfigmgrApi~comDayCqReplicationContentStaticContentBuilderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqReplicationContentStaticContentBuilderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.host 
     * @param {Number} opts.port 
     * @param {module:api/ConfigmgrApi~comDayCqReplicationContentStaticContentBuilderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqReplicationContentStaticContentBuilderInfo}
     */
    this.comDayCqReplicationContentStaticContentBuilder = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'host': opts['host'],
        'port': opts['port'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqReplicationContentStaticContentBuilderInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.replication.content.StaticContentBuilder', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqReplicationImplAgentManagerImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqReplicationImplAgentManagerImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqReplicationImplAgentManagerImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.jobTopics 
     * @param {String} opts.serviceUserTarget 
     * @param {String} opts.agentProviderTarget 
     * @param {module:api/ConfigmgrApi~comDayCqReplicationImplAgentManagerImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqReplicationImplAgentManagerImplInfo}
     */
    this.comDayCqReplicationImplAgentManagerImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'job.topics': opts['jobTopics'],
        'serviceUser.target': opts['serviceUserTarget'],
        'agentProvider.target': opts['agentProviderTarget'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqReplicationImplAgentManagerImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.replication.impl.AgentManagerImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqReplicationImplContentDurboBinaryLessContentBuilder operation.
     * @callback module:api/ConfigmgrApi~comDayCqReplicationImplContentDurboBinaryLessContentBuilderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.binaryThreshold 
     * @param {module:api/ConfigmgrApi~comDayCqReplicationImplContentDurboBinaryLessContentBuilderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo}
     */
    this.comDayCqReplicationImplContentDurboBinaryLessContentBuilder = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'binary.threshold': opts['binaryThreshold'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.replication.impl.content.durbo.BinaryLessContentBuilder', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqReplicationImplContentDurboDurboImportConfigurationProv operation.
     * @callback module:api/ConfigmgrApi~comDayCqReplicationImplContentDurboDurboImportConfigurationProvCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.preserveHierarchyNodes 
     * @param {Boolean} opts.ignoreVersioning 
     * @param {Boolean} opts.importAcl 
     * @param {Number} opts.saveThreshold 
     * @param {Boolean} opts.preserveUserPaths 
     * @param {Boolean} opts.preserveUuid 
     * @param {Array.<String>} opts.preserveUuidNodetypes 
     * @param {Array.<String>} opts.preserveUuidSubtrees 
     * @param {Boolean} opts.autoCommit 
     * @param {module:api/ConfigmgrApi~comDayCqReplicationImplContentDurboDurboImportConfigurationProvCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo}
     */
    this.comDayCqReplicationImplContentDurboDurboImportConfigurationProv = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'preserve.hierarchy.nodes': opts['preserveHierarchyNodes'],
        'ignore.versioning': opts['ignoreVersioning'],
        'import.acl': opts['importAcl'],
        'save.threshold': opts['saveThreshold'],
        'preserve.user.paths': opts['preserveUserPaths'],
        'preserve.uuid': opts['preserveUuid'],
        'auto.commit': opts['autoCommit'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'preserve.uuid.nodetypes': {
          value: opts['preserveUuidNodetypes'],
          collectionFormat: 'multi'
        },
        'preserve.uuid.subtrees': {
          value: opts['preserveUuidSubtrees'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.replication.impl.content.durbo.DurboImportConfigurationProviderService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqReplicationImplReplicationContentFactoryProviderImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqReplicationImplReplicationContentFactoryProviderImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.replicationContentUseFileStorage 
     * @param {Number} opts.replicationContentMaxCommitAttempts 
     * @param {module:api/ConfigmgrApi~comDayCqReplicationImplReplicationContentFactoryProviderImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo}
     */
    this.comDayCqReplicationImplReplicationContentFactoryProviderImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'replication.content.useFileStorage': opts['replicationContentUseFileStorage'],
        'replication.content.maxCommitAttempts': opts['replicationContentMaxCommitAttempts'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.replication.impl.ReplicationContentFactoryProviderImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqReplicationImplReplicationReceiverImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqReplicationImplReplicationReceiverImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqReplicationImplReplicationReceiverImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.receiverTmpfileThreshold 
     * @param {Boolean} opts.receiverPackagesUseInstall 
     * @param {module:api/ConfigmgrApi~comDayCqReplicationImplReplicationReceiverImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqReplicationImplReplicationReceiverImplInfo}
     */
    this.comDayCqReplicationImplReplicationReceiverImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'receiver.tmpfile.threshold': opts['receiverTmpfileThreshold'],
        'receiver.packages.use.install': opts['receiverPackagesUseInstall'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqReplicationImplReplicationReceiverImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.replication.impl.ReplicationReceiverImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqReplicationImplReplicatorImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqReplicationImplReplicatorImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqReplicationImplReplicatorImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.distributeEvents 
     * @param {module:api/ConfigmgrApi~comDayCqReplicationImplReplicatorImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqReplicationImplReplicatorImplInfo}
     */
    this.comDayCqReplicationImplReplicatorImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'distribute_events': opts['distributeEvents'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqReplicationImplReplicatorImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.replication.impl.ReplicatorImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqReplicationImplReverseReplicator operation.
     * @callback module:api/ConfigmgrApi~comDayCqReplicationImplReverseReplicatorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqReplicationImplReverseReplicatorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.schedulerPeriod 
     * @param {module:api/ConfigmgrApi~comDayCqReplicationImplReverseReplicatorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqReplicationImplReverseReplicatorInfo}
     */
    this.comDayCqReplicationImplReverseReplicator = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'scheduler.period': opts['schedulerPeriod'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqReplicationImplReverseReplicatorInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.replication.impl.ReverseReplicator', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqReplicationImplTransportBinaryLessTransportHandler operation.
     * @callback module:api/ConfigmgrApi~comDayCqReplicationImplTransportBinaryLessTransportHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.disabledCipherSuites 
     * @param {Array.<String>} opts.enabledCipherSuites 
     * @param {module:api/ConfigmgrApi~comDayCqReplicationImplTransportBinaryLessTransportHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo}
     */
    this.comDayCqReplicationImplTransportBinaryLessTransportHandler = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'disabled.cipher.suites': {
          value: opts['disabledCipherSuites'],
          collectionFormat: 'multi'
        },
        'enabled.cipher.suites': {
          value: opts['enabledCipherSuites'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.replication.impl.transport.BinaryLessTransportHandler', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqReplicationImplTransportHttp operation.
     * @callback module:api/ConfigmgrApi~comDayCqReplicationImplTransportHttpCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqReplicationImplTransportHttpInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.disabledCipherSuites 
     * @param {Array.<String>} opts.enabledCipherSuites 
     * @param {module:api/ConfigmgrApi~comDayCqReplicationImplTransportHttpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqReplicationImplTransportHttpInfo}
     */
    this.comDayCqReplicationImplTransportHttp = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'disabled.cipher.suites': {
          value: opts['disabledCipherSuites'],
          collectionFormat: 'multi'
        },
        'enabled.cipher.suites': {
          value: opts['enabledCipherSuites'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqReplicationImplTransportHttpInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.replication.impl.transport.Http', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqReportingImplCacheCacheImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqReportingImplCacheCacheImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqReportingImplCacheCacheImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.repcacheEnable 
     * @param {Number} opts.repcacheTtl 
     * @param {Number} opts.repcacheMax 
     * @param {module:api/ConfigmgrApi~comDayCqReportingImplCacheCacheImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqReportingImplCacheCacheImplInfo}
     */
    this.comDayCqReportingImplCacheCacheImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'repcache.enable': opts['repcacheEnable'],
        'repcache.ttl': opts['repcacheTtl'],
        'repcache.max': opts['repcacheMax'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqReportingImplCacheCacheImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.reporting.impl.cache.CacheImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqReportingImplConfigServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqReportingImplConfigServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqReportingImplConfigServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.repconfTimezone 
     * @param {String} opts.repconfLocale 
     * @param {String} opts.repconfSnapshots 
     * @param {String} opts.repconfRepdir 
     * @param {Number} opts.repconfHourofday 
     * @param {Number} opts.repconfMinofhour 
     * @param {Number} opts.repconfMaxrows 
     * @param {Boolean} opts.repconfFakedata 
     * @param {String} opts.repconfSnapshotuser 
     * @param {Boolean} opts.repconfEnforcesnapshotuser 
     * @param {module:api/ConfigmgrApi~comDayCqReportingImplConfigServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqReportingImplConfigServiceImplInfo}
     */
    this.comDayCqReportingImplConfigServiceImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'repconf.timezone': opts['repconfTimezone'],
        'repconf.locale': opts['repconfLocale'],
        'repconf.snapshots': opts['repconfSnapshots'],
        'repconf.repdir': opts['repconfRepdir'],
        'repconf.hourofday': opts['repconfHourofday'],
        'repconf.minofhour': opts['repconfMinofhour'],
        'repconf.maxrows': opts['repconfMaxrows'],
        'repconf.fakedata': opts['repconfFakedata'],
        'repconf.snapshotuser': opts['repconfSnapshotuser'],
        'repconf.enforcesnapshotuser': opts['repconfEnforcesnapshotuser'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqReportingImplConfigServiceImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.reporting.impl.ConfigServiceImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqReportingImplRLogAnalyzer operation.
     * @callback module:api/ConfigmgrApi~comDayCqReportingImplRLogAnalyzerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqReportingImplRLogAnalyzerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.requestLogOutput 
     * @param {module:api/ConfigmgrApi~comDayCqReportingImplRLogAnalyzerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqReportingImplRLogAnalyzerInfo}
     */
    this.comDayCqReportingImplRLogAnalyzer = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'request.log.output': opts['requestLogOutput'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqReportingImplRLogAnalyzerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.reporting.impl.RLogAnalyzer', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqRewriterLinkcheckerImplLinkCheckerImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqRewriterLinkcheckerImplLinkCheckerImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.schedulerPeriod 
     * @param {Boolean} opts.schedulerConcurrent 
     * @param {Number} opts.serviceBadLinkToleranceInterval 
     * @param {Array.<String>} opts.serviceCheckOverridePatterns 
     * @param {Boolean} opts.serviceCacheBrokenInternalLinks 
     * @param {Array.<String>} opts.serviceSpecialLinkPrefix 
     * @param {Array.<String>} opts.serviceSpecialLinkPatterns 
     * @param {module:api/ConfigmgrApi~comDayCqRewriterLinkcheckerImplLinkCheckerImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo}
     */
    this.comDayCqRewriterLinkcheckerImplLinkCheckerImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'scheduler.period': opts['schedulerPeriod'],
        'scheduler.concurrent': opts['schedulerConcurrent'],
        'service.bad_link_tolerance_interval': opts['serviceBadLinkToleranceInterval'],
        'service.cache_broken_internal_links': opts['serviceCacheBrokenInternalLinks'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'service.check_override_patterns': {
          value: opts['serviceCheckOverridePatterns'],
          collectionFormat: 'multi'
        },
        'service.special_link_prefix': {
          value: opts['serviceSpecialLinkPrefix'],
          collectionFormat: 'multi'
        },
        'service.special_link_patterns': {
          value: opts['serviceSpecialLinkPatterns'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqRewriterLinkcheckerImplLinkCheckerTask operation.
     * @callback module:api/ConfigmgrApi~comDayCqRewriterLinkcheckerImplLinkCheckerTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.schedulerPeriod 
     * @param {Boolean} opts.schedulerConcurrent 
     * @param {Number} opts.goodLinkTestInterval 
     * @param {Number} opts.badLinkTestInterval 
     * @param {Number} opts.linkUnusedInterval 
     * @param {Number} opts.connectionTimeout 
     * @param {module:api/ConfigmgrApi~comDayCqRewriterLinkcheckerImplLinkCheckerTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo}
     */
    this.comDayCqRewriterLinkcheckerImplLinkCheckerTask = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'scheduler.period': opts['schedulerPeriod'],
        'scheduler.concurrent': opts['schedulerConcurrent'],
        'good_link_test_interval': opts['goodLinkTestInterval'],
        'bad_link_test_interval': opts['badLinkTestInterval'],
        'link_unused_interval': opts['linkUnusedInterval'],
        'connection.timeout': opts['connectionTimeout'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTask', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory operation.
     * @callback module:api/ConfigmgrApi~comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.linkcheckertransformerDisableRewriting 
     * @param {Boolean} opts.linkcheckertransformerDisableChecking 
     * @param {Number} opts.linkcheckertransformerMapCacheSize 
     * @param {Boolean} opts.linkcheckertransformerStrictExtensionCheck 
     * @param {Boolean} opts.linkcheckertransformerStripHtmltExtension 
     * @param {Array.<String>} opts.linkcheckertransformerRewriteElements 
     * @param {Array.<String>} opts.linkcheckertransformerStripExtensionPathBlacklist 
     * @param {module:api/ConfigmgrApi~comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo}
     */
    this.comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'linkcheckertransformer.disableRewriting': opts['linkcheckertransformerDisableRewriting'],
        'linkcheckertransformer.disableChecking': opts['linkcheckertransformerDisableChecking'],
        'linkcheckertransformer.mapCacheSize': opts['linkcheckertransformerMapCacheSize'],
        'linkcheckertransformer.strictExtensionCheck': opts['linkcheckertransformerStrictExtensionCheck'],
        'linkcheckertransformer.stripHtmltExtension': opts['linkcheckertransformerStripHtmltExtension'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'linkcheckertransformer.rewriteElements': {
          value: opts['linkcheckertransformerRewriteElements'],
          collectionFormat: 'multi'
        },
        'linkcheckertransformer.stripExtensionPathBlacklist': {
          value: opts['linkcheckertransformerStripExtensionPathBlacklist'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTransformerFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqRewriterLinkcheckerImplLinkInfoStorageImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqRewriterLinkcheckerImplLinkInfoStorageImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceMaxLinksPerHost 
     * @param {Boolean} opts.serviceSaveExternalLinkReferences 
     * @param {module:api/ConfigmgrApi~comDayCqRewriterLinkcheckerImplLinkInfoStorageImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo}
     */
    this.comDayCqRewriterLinkcheckerImplLinkInfoStorageImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'service.max_links_per_host': opts['serviceMaxLinksPerHost'],
        'service.save_external_link_references': opts['serviceSaveExternalLinkReferences'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkInfoStorageImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqRewriterProcessorImplHtmlParserFactory operation.
     * @callback module:api/ConfigmgrApi~comDayCqRewriterProcessorImplHtmlParserFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqRewriterProcessorImplHtmlParserFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.htmlparserProcessTags 
     * @param {Boolean} opts.htmlparserPreserveCamelCase 
     * @param {module:api/ConfigmgrApi~comDayCqRewriterProcessorImplHtmlParserFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqRewriterProcessorImplHtmlParserFactoryInfo}
     */
    this.comDayCqRewriterProcessorImplHtmlParserFactory = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'htmlparser.preserveCamelCase': opts['htmlparserPreserveCamelCase'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'htmlparser.processTags': {
          value: opts['htmlparserProcessTags'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqRewriterProcessorImplHtmlParserFactoryInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.rewriter.processor.impl.HtmlParserFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqSearchImplBuilderQueryBuilderImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqSearchImplBuilderQueryBuilderImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqSearchImplBuilderQueryBuilderImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.excerptProperties 
     * @param {Number} opts.cacheMaxEntries 
     * @param {Number} opts.cacheEntryLifetime 
     * @param {Boolean} opts.xpathUnion 
     * @param {module:api/ConfigmgrApi~comDayCqSearchImplBuilderQueryBuilderImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqSearchImplBuilderQueryBuilderImplInfo}
     */
    this.comDayCqSearchImplBuilderQueryBuilderImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cache.max.entries': opts['cacheMaxEntries'],
        'cache.entry.lifetime': opts['cacheEntryLifetime'],
        'xpath.union': opts['xpathUnion'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'excerpt.properties': {
          value: opts['excerptProperties'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqSearchImplBuilderQueryBuilderImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.search.impl.builder.QueryBuilderImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqSearchSuggestImplSuggestionIndexManagerImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqSearchSuggestImplSuggestionIndexManagerImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.pathBuilderTarget 
     * @param {String} opts.suggestBasepath 
     * @param {module:api/ConfigmgrApi~comDayCqSearchSuggestImplSuggestionIndexManagerImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo}
     */
    this.comDayCqSearchSuggestImplSuggestionIndexManagerImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'pathBuilder.target': opts['pathBuilderTarget'],
        'suggest.basepath': opts['suggestBasepath'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.search.suggest.impl.SuggestionIndexManagerImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqSearchpromoteImplPublishSearchPromoteConfigHandler operation.
     * @callback module:api/ConfigmgrApi~comDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.cqSearchpromoteConfighandlerEnabled 
     * @param {module:api/ConfigmgrApi~comDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo}
     */
    this.comDayCqSearchpromoteImplPublishSearchPromoteConfigHandler = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.searchpromote.confighandler.enabled': opts['cqSearchpromoteConfighandlerEnabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.searchpromote.impl.PublishSearchPromoteConfigHandler', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqSearchpromoteImplSearchPromoteServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqSearchpromoteImplSearchPromoteServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.cqSearchpromoteConfigurationServerUri 
     * @param {String} opts.cqSearchpromoteConfigurationEnvironment 
     * @param {Number} opts.connectionTimeout 
     * @param {Number} opts.socketTimeout 
     * @param {module:api/ConfigmgrApi~comDayCqSearchpromoteImplSearchPromoteServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo}
     */
    this.comDayCqSearchpromoteImplSearchPromoteServiceImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.searchpromote.configuration.server.uri': opts['cqSearchpromoteConfigurationServerUri'],
        'cq.searchpromote.configuration.environment': opts['cqSearchpromoteConfigurationEnvironment'],
        'connection.timeout': opts['connectionTimeout'],
        'socket.timeout': opts['socketTimeout'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.searchpromote.impl.SearchPromoteServiceImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqSecurityACLSetup operation.
     * @callback module:api/ConfigmgrApi~comDayCqSecurityACLSetupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqSecurityACLSetupInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.cqAclsetupRules 
     * @param {module:api/ConfigmgrApi~comDayCqSecurityACLSetupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqSecurityACLSetupInfo}
     */
    this.comDayCqSecurityACLSetup = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'cq.aclsetup.rules': {
          value: opts['cqAclsetupRules'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqSecurityACLSetupInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.security.ACLSetup', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqStatisticsImplStatisticsServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqStatisticsImplStatisticsServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqStatisticsImplStatisticsServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.schedulerPeriod 
     * @param {Boolean} opts.schedulerConcurrent 
     * @param {String} opts.path 
     * @param {String} opts.workspace 
     * @param {String} opts.keywordsPath 
     * @param {Boolean} opts.asyncEntries 
     * @param {module:api/ConfigmgrApi~comDayCqStatisticsImplStatisticsServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqStatisticsImplStatisticsServiceImplInfo}
     */
    this.comDayCqStatisticsImplStatisticsServiceImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'scheduler.period': opts['schedulerPeriod'],
        'scheduler.concurrent': opts['schedulerConcurrent'],
        'path': opts['path'],
        'workspace': opts['workspace'],
        'keywordsPath': opts['keywordsPath'],
        'asyncEntries': opts['asyncEntries'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqStatisticsImplStatisticsServiceImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.statistics.impl.StatisticsServiceImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqTaggingImplJcrTagManagerFactoryImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqTaggingImplJcrTagManagerFactoryImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqTaggingImplJcrTagManagerFactoryImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.validationEnabled 
     * @param {module:api/ConfigmgrApi~comDayCqTaggingImplJcrTagManagerFactoryImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqTaggingImplJcrTagManagerFactoryImplInfo}
     */
    this.comDayCqTaggingImplJcrTagManagerFactoryImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'validation.enabled': opts['validationEnabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqTaggingImplJcrTagManagerFactoryImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.tagging.impl.JcrTagManagerFactoryImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqTaggingImplSearchTagPredicateEvaluator operation.
     * @callback module:api/ConfigmgrApi~comDayCqTaggingImplSearchTagPredicateEvaluatorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.ignorePath 
     * @param {module:api/ConfigmgrApi~comDayCqTaggingImplSearchTagPredicateEvaluatorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo}
     */
    this.comDayCqTaggingImplSearchTagPredicateEvaluator = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'ignore_path': opts['ignorePath'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.tagging.impl.search.TagPredicateEvaluator', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqTaggingImplTagGarbageCollector operation.
     * @callback module:api/ConfigmgrApi~comDayCqTaggingImplTagGarbageCollectorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqTaggingImplTagGarbageCollectorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.schedulerExpression 
     * @param {module:api/ConfigmgrApi~comDayCqTaggingImplTagGarbageCollectorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqTaggingImplTagGarbageCollectorInfo}
     */
    this.comDayCqTaggingImplTagGarbageCollector = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'scheduler.expression': opts['schedulerExpression'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqTaggingImplTagGarbageCollectorInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.tagging.impl.TagGarbageCollector', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmContentsyncImplHandlerPagesUpdateHandler operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmContentsyncImplHandlerPagesUpdateHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.cqPagesupdatehandlerImageresourcetypes 
     * @param {module:api/ConfigmgrApi~comDayCqWcmContentsyncImplHandlerPagesUpdateHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo}
     */
    this.comDayCqWcmContentsyncImplHandlerPagesUpdateHandler = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'cq.pagesupdatehandler.imageresourcetypes': {
          value: opts['cqPagesupdatehandlerImageresourcetypes'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.contentsync.impl.handler.PagesUpdateHandler', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.cqContentsyncPathrewritertransformerMappingLinks 
     * @param {Array.<String>} opts.cqContentsyncPathrewritertransformerMappingClientlibs 
     * @param {Array.<String>} opts.cqContentsyncPathrewritertransformerMappingImages 
     * @param {String} opts.cqContentsyncPathrewritertransformerAttributePattern 
     * @param {String} opts.cqContentsyncPathrewritertransformerClientlibraryPattern 
     * @param {String} opts.cqContentsyncPathrewritertransformerClientlibraryReplace 
     * @param {module:api/ConfigmgrApi~comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo}
     */
    this.comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.contentsync.pathrewritertransformer.attribute.pattern': opts['cqContentsyncPathrewritertransformerAttributePattern'],
        'cq.contentsync.pathrewritertransformer.clientlibrary.pattern': opts['cqContentsyncPathrewritertransformerClientlibraryPattern'],
        'cq.contentsync.pathrewritertransformer.clientlibrary.replace': opts['cqContentsyncPathrewritertransformerClientlibraryReplace'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'cq.contentsync.pathrewritertransformer.mapping.links': {
          value: opts['cqContentsyncPathrewritertransformerMappingLinks'],
          collectionFormat: 'multi'
        },
        'cq.contentsync.pathrewritertransformer.mapping.clientlibs': {
          value: opts['cqContentsyncPathrewritertransformerMappingClientlibs'],
          collectionFormat: 'multi'
        },
        'cq.contentsync.pathrewritertransformer.mapping.images': {
          value: opts['cqContentsyncPathrewritertransformerMappingImages'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.contentsync.impl.rewriter.PathRewriterTransformerFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreImplAuthoringUIModeServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreImplAuthoringUIModeServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.authoringUIModeServiceDefault 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreImplAuthoringUIModeServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo}
     */
    this.comDayCqWcmCoreImplAuthoringUIModeServiceImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'authoringUIModeService.default': opts['authoringUIModeServiceDefault'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.impl.AuthoringUIModeServiceImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreImplCommandsWCMCommandServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreImplCommandsWCMCommandServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreImplCommandsWCMCommandServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.wcmcommandservletDeleteWhitelist 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreImplCommandsWCMCommandServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreImplCommandsWCMCommandServletInfo}
     */
    this.comDayCqWcmCoreImplCommandsWCMCommandServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'wcmcommandservlet.delete_whitelist': {
          value: opts['wcmcommandservletDeleteWhitelist'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmCoreImplCommandsWCMCommandServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.impl.commands.WCMCommandServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.dimDefaultMode 
     * @param {Boolean} opts.dimAppcacheEnabled 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo}
     */
    this.comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'dim.default.mode': opts['dimDefaultMode'],
        'dim.appcache.enabled': opts['dimAppcacheEnabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.impl.devicedetection.DeviceIdentificationModeImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreImplEventPageEventAuditListener operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreImplEventPageEventAuditListenerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreImplEventPageEventAuditListenerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.configured 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreImplEventPageEventAuditListenerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreImplEventPageEventAuditListenerInfo}
     */
    this.comDayCqWcmCoreImplEventPageEventAuditListener = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'configured': opts['configured'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmCoreImplEventPageEventAuditListenerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.impl.event.PageEventAuditListener', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreImplEventPagePostProcessor operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreImplEventPagePostProcessorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreImplEventPagePostProcessorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.paths 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreImplEventPagePostProcessorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreImplEventPagePostProcessorInfo}
     */
    this.comDayCqWcmCoreImplEventPagePostProcessor = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'paths': {
          value: opts['paths'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmCoreImplEventPagePostProcessorInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.impl.event.PagePostProcessor', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreImplEventRepositoryChangeEventListener operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreImplEventRepositoryChangeEventListenerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.paths 
     * @param {Array.<String>} opts.excludedPaths 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreImplEventRepositoryChangeEventListenerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo}
     */
    this.comDayCqWcmCoreImplEventRepositoryChangeEventListener = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'paths': {
          value: opts['paths'],
          collectionFormat: 'multi'
        },
        'excludedPaths': {
          value: opts['excludedPaths'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.impl.event.RepositoryChangeEventListener', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreImplEventTemplatePostProcessor operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreImplEventTemplatePostProcessorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreImplEventTemplatePostProcessorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.paths 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreImplEventTemplatePostProcessorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreImplEventTemplatePostProcessorInfo}
     */
    this.comDayCqWcmCoreImplEventTemplatePostProcessor = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'paths': opts['paths'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmCoreImplEventTemplatePostProcessorInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.impl.event.TemplatePostProcessor', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreImplLanguageManagerImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreImplLanguageManagerImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreImplLanguageManagerImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.langmgrListPath 
     * @param {Array.<String>} opts.langmgrCountryDefault 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreImplLanguageManagerImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreImplLanguageManagerImplInfo}
     */
    this.comDayCqWcmCoreImplLanguageManagerImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'langmgr.list.path': opts['langmgrListPath'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'langmgr.country.default': {
          value: opts['langmgrCountryDefault'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmCoreImplLanguageManagerImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.impl.LanguageManagerImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.linkExpiredPrefix 
     * @param {Boolean} opts.linkExpiredRemove 
     * @param {String} opts.linkExpiredSuffix 
     * @param {String} opts.linkInvalidPrefix 
     * @param {Boolean} opts.linkInvalidRemove 
     * @param {String} opts.linkInvalidSuffix 
     * @param {String} opts.linkPredatedPrefix 
     * @param {Boolean} opts.linkPredatedRemove 
     * @param {String} opts.linkPredatedSuffix 
     * @param {Array.<String>} opts.linkWcmmodes 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo}
     */
    this.comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'link.expired.prefix': opts['linkExpiredPrefix'],
        'link.expired.remove': opts['linkExpiredRemove'],
        'link.expired.suffix': opts['linkExpiredSuffix'],
        'link.invalid.prefix': opts['linkInvalidPrefix'],
        'link.invalid.remove': opts['linkInvalidRemove'],
        'link.invalid.suffix': opts['linkInvalidSuffix'],
        'link.predated.prefix': opts['linkPredatedPrefix'],
        'link.predated.remove': opts['linkPredatedRemove'],
        'link.predated.suffix': opts['linkPredatedSuffix'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'link.wcmmodes': {
          value: opts['linkWcmmodes'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.impl.LinkCheckerConfigurationFactoryImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreImplPagePageInfoAggregatorImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreImplPagePageInfoAggregatorImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.pageInfoProviderPropertyRegexDefault 
     * @param {String} opts.pageInfoProviderPropertyName 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreImplPagePageInfoAggregatorImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo}
     */
    this.comDayCqWcmCoreImplPagePageInfoAggregatorImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'page.info.provider.property.regex.default': opts['pageInfoProviderPropertyRegexDefault'],
        'page.info.provider.property.name': opts['pageInfoProviderPropertyName'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.impl.page.PageInfoAggregatorImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreImplPagePageManagerFactoryImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreImplPagePageManagerFactoryImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.illegalCharMapping 
     * @param {Boolean} opts.pageSubTreeActivationCheck 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreImplPagePageManagerFactoryImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo}
     */
    this.comDayCqWcmCoreImplPagePageManagerFactoryImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'illegalCharMapping': opts['illegalCharMapping'],
        'pageSubTreeActivationCheck': opts['pageSubTreeActivationCheck'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.impl.page.PageManagerFactoryImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreImplReferencesContentContentReferenceConfig operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreImplReferencesContentContentReferenceConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.contentReferenceConfigResourceTypes 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreImplReferencesContentContentReferenceConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo}
     */
    this.comDayCqWcmCoreImplReferencesContentContentReferenceConfig = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'contentReferenceConfig.resourceTypes': {
          value: opts['contentReferenceConfigResourceTypes'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.impl.references.content.ContentReferenceConfig', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreImplServletsContentfinderAssetViewHandler operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreImplServletsContentfinderAssetViewHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.damShowexpired 
     * @param {Boolean} opts.damShowhidden 
     * @param {Boolean} opts.tagTitleSearch 
     * @param {String} opts.guessTotal 
     * @param {String} opts.damExpiryProperty 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreImplServletsContentfinderAssetViewHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo}
     */
    this.comDayCqWcmCoreImplServletsContentfinderAssetViewHandler = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'dam.showexpired': opts['damShowexpired'],
        'dam.showhidden': opts['damShowhidden'],
        'tagTitleSearch': opts['tagTitleSearch'],
        'guessTotal': opts['guessTotal'],
        'dam.expiryProperty': opts['damExpiryProperty'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.AssetViewHandler', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.itemResourceTypes 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo}
     */
    this.comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'item.resource.types': {
          value: opts['itemResourceTypes'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.connector.ConnectorViewHandler', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreImplServletsContentfinderPageViewHandler operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreImplServletsContentfinderPageViewHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.guessTotal 
     * @param {Boolean} opts.tagTitleSearch 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreImplServletsContentfinderPageViewHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo}
     */
    this.comDayCqWcmCoreImplServletsContentfinderPageViewHandler = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'guessTotal': opts['guessTotal'],
        'tagTitleSearch': opts['tagTitleSearch'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.PageViewHandler', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreImplServletsFindReplaceServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreImplServletsFindReplaceServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreImplServletsFindReplaceServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.scope 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreImplServletsFindReplaceServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreImplServletsFindReplaceServletInfo}
     */
    this.comDayCqWcmCoreImplServletsFindReplaceServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'scope': {
          value: opts['scope'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmCoreImplServletsFindReplaceServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.FindReplaceServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreImplServletsReferenceSearchServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreImplServletsReferenceSearchServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreImplServletsReferenceSearchServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.referencesearchservletMaxReferencesPerPage 
     * @param {Number} opts.referencesearchservletMaxPages 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreImplServletsReferenceSearchServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreImplServletsReferenceSearchServletInfo}
     */
    this.comDayCqWcmCoreImplServletsReferenceSearchServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'referencesearchservlet.maxReferencesPerPage': opts['referencesearchservletMaxReferencesPerPage'],
        'referencesearchservlet.maxPages': opts['referencesearchservletMaxPages'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmCoreImplServletsReferenceSearchServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ReferenceSearchServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreImplServletsThumbnailServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreImplServletsThumbnailServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreImplServletsThumbnailServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.workspace 
     * @param {Array.<String>} opts.dimensions 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreImplServletsThumbnailServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreImplServletsThumbnailServletInfo}
     */
    this.comDayCqWcmCoreImplServletsThumbnailServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'workspace': opts['workspace'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'dimensions': {
          value: opts['dimensions'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmCoreImplServletsThumbnailServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ThumbnailServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreImplUtilsDefaultPageNameValidator operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreImplUtilsDefaultPageNameValidatorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.nonValidChars 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreImplUtilsDefaultPageNameValidatorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo}
     */
    this.comDayCqWcmCoreImplUtilsDefaultPageNameValidator = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'nonValidChars': opts['nonValidChars'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.impl.utils.DefaultPageNameValidator', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreImplVariantsPageVariantsProviderImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreImplVariantsPageVariantsProviderImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.defaultExternalizerDomain 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreImplVariantsPageVariantsProviderImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo}
     */
    this.comDayCqWcmCoreImplVariantsPageVariantsProviderImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'default.externalizer.domain': opts['defaultExternalizerDomain'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.impl.variants.PageVariantsProviderImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreImplVersionManagerImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreImplVersionManagerImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreImplVersionManagerImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.versionmanagerCreateVersionOnActivation 
     * @param {Boolean} opts.versionmanagerPurgingEnabled 
     * @param {Array.<String>} opts.versionmanagerPurgePaths 
     * @param {Array.<String>} opts.versionmanagerIvPaths 
     * @param {Number} opts.versionmanagerMaxAgeDays 
     * @param {Number} opts.versionmanagerMaxNumberVersions 
     * @param {Number} opts.versionmanagerMinNumberVersions 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreImplVersionManagerImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreImplVersionManagerImplInfo}
     */
    this.comDayCqWcmCoreImplVersionManagerImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'versionmanager.createVersionOnActivation': opts['versionmanagerCreateVersionOnActivation'],
        'versionmanager.purgingEnabled': opts['versionmanagerPurgingEnabled'],
        'versionmanager.maxAgeDays': opts['versionmanagerMaxAgeDays'],
        'versionmanager.maxNumberVersions': opts['versionmanagerMaxNumberVersions'],
        'versionmanager.minNumberVersions': opts['versionmanagerMinNumberVersions'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'versionmanager.purgePaths': {
          value: opts['versionmanagerPurgePaths'],
          collectionFormat: 'multi'
        },
        'versionmanager.ivPaths': {
          value: opts['versionmanagerIvPaths'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmCoreImplVersionManagerImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.impl.VersionManagerImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreImplVersionPurgeTask operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreImplVersionPurgeTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreImplVersionPurgeTaskInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.versionpurgePaths 
     * @param {Boolean} opts.versionpurgeRecursive 
     * @param {Number} opts.versionpurgeMaxVersions 
     * @param {Number} opts.versionpurgeMinVersions 
     * @param {Number} opts.versionpurgeMaxAgeDays 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreImplVersionPurgeTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreImplVersionPurgeTaskInfo}
     */
    this.comDayCqWcmCoreImplVersionPurgeTask = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'versionpurge.recursive': opts['versionpurgeRecursive'],
        'versionpurge.maxVersions': opts['versionpurgeMaxVersions'],
        'versionpurge.minVersions': opts['versionpurgeMinVersions'],
        'versionpurge.maxAgeDays': opts['versionpurgeMaxAgeDays'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'versionpurge.paths': {
          value: opts['versionpurgePaths'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmCoreImplVersionPurgeTaskInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.impl.VersionPurgeTask', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreImplWCMDebugFilter operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreImplWCMDebugFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreImplWCMDebugFilterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.wcmdbgfilterEnabled 
     * @param {Boolean} opts.wcmdbgfilterJspDebug 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreImplWCMDebugFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreImplWCMDebugFilterInfo}
     */
    this.comDayCqWcmCoreImplWCMDebugFilter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'wcmdbgfilter.enabled': opts['wcmdbgfilterEnabled'],
        'wcmdbgfilter.jspDebug': opts['wcmdbgfilterJspDebug'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmCoreImplWCMDebugFilterInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.impl.WCMDebugFilter', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreImplWCMDeveloperModeFilter operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreImplWCMDeveloperModeFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.wcmdevmodefilterEnabled 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreImplWCMDeveloperModeFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo}
     */
    this.comDayCqWcmCoreImplWCMDeveloperModeFilter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'wcmdevmodefilter.enabled': opts['wcmdevmodefilterEnabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.impl.WCMDeveloperModeFilter', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreImplWarpTimeWarpFilter operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreImplWarpTimeWarpFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreImplWarpTimeWarpFilterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.filterOrder 
     * @param {String} opts.filterScope 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreImplWarpTimeWarpFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreImplWarpTimeWarpFilterInfo}
     */
    this.comDayCqWcmCoreImplWarpTimeWarpFilter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'filter.order': opts['filterOrder'],
        'filter.scope': opts['filterScope'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmCoreImplWarpTimeWarpFilterInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.impl.warp.TimeWarpFilter', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreMvtMVTStatisticsImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreMvtMVTStatisticsImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreMvtMVTStatisticsImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.mvtstatisticsTrackingurl 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreMvtMVTStatisticsImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreMvtMVTStatisticsImplInfo}
     */
    this.comDayCqWcmCoreMvtMVTStatisticsImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'mvtstatistics.trackingurl': opts['mvtstatisticsTrackingurl'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmCoreMvtMVTStatisticsImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.mvt.MVTStatisticsImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreStatsPageViewStatisticsImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreStatsPageViewStatisticsImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreStatsPageViewStatisticsImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.pageviewstatisticsTrackingurl 
     * @param {String} opts.pageviewstatisticsTrackingscriptEnabled 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreStatsPageViewStatisticsImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreStatsPageViewStatisticsImplInfo}
     */
    this.comDayCqWcmCoreStatsPageViewStatisticsImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'pageviewstatistics.trackingurl': opts['pageviewstatisticsTrackingurl'],
        'pageviewstatistics.trackingscript.enabled': opts['pageviewstatisticsTrackingscriptEnabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmCoreStatsPageViewStatisticsImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.stats.PageViewStatisticsImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreWCMRequestFilter operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreWCMRequestFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreWCMRequestFilterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.wcmfilterMode 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreWCMRequestFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreWCMRequestFilterInfo}
     */
    this.comDayCqWcmCoreWCMRequestFilter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'wcmfilter.mode': opts['wcmfilterMode'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmCoreWCMRequestFilterInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.WCMRequestFilter', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmDesignimporterDesignPackageImporter operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmDesignimporterDesignPackageImporterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmDesignimporterDesignPackageImporterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.extractFilter 
     * @param {module:api/ConfigmgrApi~comDayCqWcmDesignimporterDesignPackageImporterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmDesignimporterDesignPackageImporterInfo}
     */
    this.comDayCqWcmDesignimporterDesignPackageImporter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'extract.filter': {
          value: opts['extractFilter'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmDesignimporterDesignPackageImporterInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.designimporter.DesignPackageImporter', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmDesignimporterImplCanvasBuilderImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmDesignimporterImplCanvasBuilderImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.filepattern 
     * @param {Boolean} opts.buildPageNodes 
     * @param {Boolean} opts.buildClientLibs 
     * @param {Boolean} opts.buildCanvasComponent 
     * @param {module:api/ConfigmgrApi~comDayCqWcmDesignimporterImplCanvasBuilderImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo}
     */
    this.comDayCqWcmDesignimporterImplCanvasBuilderImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'filepattern': opts['filepattern'],
        'build.page.nodes': opts['buildPageNodes'],
        'build.client.libs': opts['buildClientLibs'],
        'build.canvas.component': opts['buildCanvasComponent'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasBuilderImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmDesignimporterImplCanvasPageDeleteHandler operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmDesignimporterImplCanvasPageDeleteHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.minThreadPoolSize 
     * @param {Number} opts.maxThreadPoolSize 
     * @param {module:api/ConfigmgrApi~comDayCqWcmDesignimporterImplCanvasPageDeleteHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo}
     */
    this.comDayCqWcmDesignimporterImplCanvasPageDeleteHandler = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'minThreadPoolSize': opts['minThreadPoolSize'],
        'maxThreadPoolSize': opts['maxThreadPoolSize'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasPageDeleteHandler', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmDesignimporterImplEntryPreprocessorImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmDesignimporterImplEntryPreprocessorImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.searchPattern 
     * @param {String} opts.replacePattern 
     * @param {module:api/ConfigmgrApi~comDayCqWcmDesignimporterImplEntryPreprocessorImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo}
     */
    this.comDayCqWcmDesignimporterImplEntryPreprocessorImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'search.pattern': opts['searchPattern'],
        'replace.pattern': opts['replacePattern'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.designimporter.impl.EntryPreprocessorImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmDesignimporterImplMobileCanvasBuilderImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmDesignimporterImplMobileCanvasBuilderImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.filepattern 
     * @param {Array.<String>} opts.deviceGroups 
     * @param {Boolean} opts.buildPageNodes 
     * @param {Boolean} opts.buildClientLibs 
     * @param {Boolean} opts.buildCanvasComponent 
     * @param {module:api/ConfigmgrApi~comDayCqWcmDesignimporterImplMobileCanvasBuilderImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo}
     */
    this.comDayCqWcmDesignimporterImplMobileCanvasBuilderImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'filepattern': opts['filepattern'],
        'build.page.nodes': opts['buildPageNodes'],
        'build.client.libs': opts['buildClientLibs'],
        'build.canvas.component': opts['buildCanvasComponent'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'device.groups': {
          value: opts['deviceGroups'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.designimporter.impl.MobileCanvasBuilderImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.tagpattern 
     * @param {module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo}
     */
    this.comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'service.ranking': opts['serviceRanking'],
        'tagpattern': opts['tagpattern'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.CanvasComponentTagHandlerFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.tagpattern 
     * @param {module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo}
     */
    this.comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'service.ranking': opts['serviceRanking'],
        'tagpattern': opts['tagpattern'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultComponentTagHandlerFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.tagpattern 
     * @param {module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo}
     */
    this.comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'service.ranking': opts['serviceRanking'],
        'tagpattern': opts['tagpattern'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultTagHandlerFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.tagpattern 
     * @param {module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo}
     */
    this.comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'service.ranking': opts['serviceRanking'],
        'tagpattern': opts['tagpattern'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.HeadTagHandlerFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.tagpattern 
     * @param {module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo}
     */
    this.comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'service.ranking': opts['serviceRanking'],
        'tagpattern': opts['tagpattern'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.IFrameTagHandlerFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.tagpattern 
     * @param {String} opts.componentResourceType 
     * @param {module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo}
     */
    this.comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'service.ranking': opts['serviceRanking'],
        'tagpattern': opts['tagpattern'],
        'component.resourceType': opts['componentResourceType'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImageComponentTagHandlerFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.tagpattern 
     * @param {module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo}
     */
    this.comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'service.ranking': opts['serviceRanking'],
        'tagpattern': opts['tagpattern'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImgTagHandlerFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.tagpattern 
     * @param {module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo}
     */
    this.comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'service.ranking': opts['serviceRanking'],
        'tagpattern': opts['tagpattern'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.InlineScriptTagHandlerFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.tagpattern 
     * @param {module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo}
     */
    this.comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'service.ranking': opts['serviceRanking'],
        'tagpattern': opts['tagpattern'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.LinkTagHandlerFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.tagpattern 
     * @param {module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo}
     */
    this.comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'service.ranking': opts['serviceRanking'],
        'tagpattern': opts['tagpattern'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.MetaTagHandlerFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.tagpattern 
     * @param {module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo}
     */
    this.comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'service.ranking': opts['serviceRanking'],
        'tagpattern': opts['tagpattern'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.NonScriptTagHandlerFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.tagpattern 
     * @param {String} opts.componentResourceType 
     * @param {module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo}
     */
    this.comDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'service.ranking': opts['serviceRanking'],
        'tagpattern': opts['tagpattern'],
        'component.resourceType': opts['componentResourceType'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ParsysComponentTagHandlerFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.tagpattern 
     * @param {module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo}
     */
    this.comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'service.ranking': opts['serviceRanking'],
        'tagpattern': opts['tagpattern'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ScriptTagHandlerFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.tagpattern 
     * @param {module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo}
     */
    this.comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'service.ranking': opts['serviceRanking'],
        'tagpattern': opts['tagpattern'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.StyleTagHandlerFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.tagpattern 
     * @param {String} opts.componentResourceType 
     * @param {module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo}
     */
    this.comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'service.ranking': opts['serviceRanking'],
        'tagpattern': opts['tagpattern'],
        'component.resourceType': opts['componentResourceType'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TextComponentTagHandlerFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.tagpattern 
     * @param {String} opts.componentResourceType 
     * @param {module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo}
     */
    this.comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'service.ranking': opts['serviceRanking'],
        'tagpattern': opts['tagpattern'],
        'component.resourceType': opts['componentResourceType'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleComponentTagHandlerFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.tagpattern 
     * @param {module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo}
     */
    this.comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'service.ranking': opts['serviceRanking'],
        'tagpattern': opts['tagpattern'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleTagHandlerFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmFoundationFormsImplFormChooserServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmFoundationFormsImplFormChooserServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmFoundationFormsImplFormChooserServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.serviceName 
     * @param {String} opts.slingServletResourceTypes 
     * @param {String} opts.slingServletSelectors 
     * @param {Array.<String>} opts.slingServletMethods 
     * @param {Boolean} opts.formsFormchooserservletAdvansesearchRequire 
     * @param {module:api/ConfigmgrApi~comDayCqWcmFoundationFormsImplFormChooserServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmFoundationFormsImplFormChooserServletInfo}
     */
    this.comDayCqWcmFoundationFormsImplFormChooserServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'service.name': opts['serviceName'],
        'sling.servlet.resourceTypes': opts['slingServletResourceTypes'],
        'sling.servlet.selectors': opts['slingServletSelectors'],
        'forms.formchooserservlet.advansesearch.require': opts['formsFormchooserservletAdvansesearchRequire'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'sling.servlet.methods': {
          value: opts['slingServletMethods'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmFoundationFormsImplFormChooserServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormChooserServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmFoundationFormsImplFormParagraphPostProcessor operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmFoundationFormsImplFormParagraphPostProcessorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.formsFormparagraphpostprocessorEnabled 
     * @param {Array.<String>} opts.formsFormparagraphpostprocessorFormresourcetypes 
     * @param {module:api/ConfigmgrApi~comDayCqWcmFoundationFormsImplFormParagraphPostProcessorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo}
     */
    this.comDayCqWcmFoundationFormsImplFormParagraphPostProcessor = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'forms.formparagraphpostprocessor.enabled': opts['formsFormparagraphpostprocessorEnabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'forms.formparagraphpostprocessor.formresourcetypes': {
          value: opts['formsFormparagraphpostprocessorFormresourcetypes'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormParagraphPostProcessor', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmFoundationFormsImplFormsHandlingServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmFoundationFormsImplFormsHandlingServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.nameWhitelist 
     * @param {Boolean} opts.allowExpressions 
     * @param {module:api/ConfigmgrApi~comDayCqWcmFoundationFormsImplFormsHandlingServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo}
     */
    this.comDayCqWcmFoundationFormsImplFormsHandlingServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'name.whitelist': opts['nameWhitelist'],
        'allow.expressions': opts['allowExpressions'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormsHandlingServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmFoundationFormsImplMailServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmFoundationFormsImplMailServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmFoundationFormsImplMailServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.slingServletResourceTypes 
     * @param {String} opts.slingServletSelectors 
     * @param {Array.<String>} opts.resourceWhitelist 
     * @param {String} opts.resourceBlacklist 
     * @param {module:api/ConfigmgrApi~comDayCqWcmFoundationFormsImplMailServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmFoundationFormsImplMailServletInfo}
     */
    this.comDayCqWcmFoundationFormsImplMailServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'sling.servlet.resourceTypes': opts['slingServletResourceTypes'],
        'sling.servlet.selectors': opts['slingServletSelectors'],
        'resource.blacklist': opts['resourceBlacklist'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'resource.whitelist': {
          value: opts['resourceWhitelist'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmFoundationFormsImplMailServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.MailServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmFoundationImplAdaptiveImageComponentServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmFoundationImplAdaptiveImageComponentServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.adaptSupportedWidths 
     * @param {module:api/ConfigmgrApi~comDayCqWcmFoundationImplAdaptiveImageComponentServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo}
     */
    this.comDayCqWcmFoundationImplAdaptiveImageComponentServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'adapt.supported.widths': {
          value: opts['adaptSupportedWidths'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.foundation.impl.AdaptiveImageComponentServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmFoundationImplHTTPAuthHandler operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmFoundationImplHTTPAuthHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmFoundationImplHTTPAuthHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.path 
     * @param {Boolean} opts.authHttpNologin 
     * @param {String} opts.authHttpRealm 
     * @param {String} opts.authDefaultLoginpage 
     * @param {Array.<String>} opts.authCredForm 
     * @param {Array.<String>} opts.authCredUtf8 
     * @param {module:api/ConfigmgrApi~comDayCqWcmFoundationImplHTTPAuthHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmFoundationImplHTTPAuthHandlerInfo}
     */
    this.comDayCqWcmFoundationImplHTTPAuthHandler = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'path': opts['path'],
        'auth.http.nologin': opts['authHttpNologin'],
        'auth.http.realm': opts['authHttpRealm'],
        'auth.default.loginpage': opts['authDefaultLoginpage'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'auth.cred.form': {
          value: opts['authCredForm'],
          collectionFormat: 'multi'
        },
        'auth.cred.utf8': {
          value: opts['authCredUtf8'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmFoundationImplHTTPAuthHandlerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.foundation.impl.HTTPAuthHandler', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmFoundationImplPageImpressionsTracker operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmFoundationImplPageImpressionsTrackerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmFoundationImplPageImpressionsTrackerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.slingAuthRequirements 
     * @param {module:api/ConfigmgrApi~comDayCqWcmFoundationImplPageImpressionsTrackerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmFoundationImplPageImpressionsTrackerInfo}
     */
    this.comDayCqWcmFoundationImplPageImpressionsTracker = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'sling.auth.requirements': opts['slingAuthRequirements'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmFoundationImplPageImpressionsTrackerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.foundation.impl.PageImpressionsTracker', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmFoundationImplPageRedirectServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmFoundationImplPageRedirectServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmFoundationImplPageRedirectServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.excludedResourceTypes 
     * @param {module:api/ConfigmgrApi~comDayCqWcmFoundationImplPageRedirectServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmFoundationImplPageRedirectServletInfo}
     */
    this.comDayCqWcmFoundationImplPageRedirectServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'excluded.resource.types': {
          value: opts['excludedResourceTypes'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmFoundationImplPageRedirectServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.foundation.impl.PageRedirectServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.defaultAttachmentTypeBlacklist 
     * @param {Array.<String>} opts.baselineAttachmentTypeBlacklist 
     * @param {module:api/ConfigmgrApi~comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo}
     */
    this.comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'default.attachment.type.blacklist': {
          value: opts['defaultAttachmentTypeBlacklist'],
          collectionFormat: 'multi'
        },
        'baseline.attachment.type.blacklist': {
          value: opts['baselineAttachmentTypeBlacklist'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.foundation.security.impl.DefaultAttachmentTypeBlacklistService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.parameterWhitelist 
     * @param {Array.<String>} opts.parameterWhitelistPrefixes 
     * @param {Array.<String>} opts.binaryParameterWhitelist 
     * @param {Array.<String>} opts.modifierWhitelist 
     * @param {Array.<String>} opts.operationWhitelist 
     * @param {Array.<String>} opts.operationWhitelistPrefixes 
     * @param {Array.<String>} opts.typehintWhitelist 
     * @param {Array.<String>} opts.resourcetypeWhitelist 
     * @param {module:api/ConfigmgrApi~comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo}
     */
    this.comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'parameter.whitelist': {
          value: opts['parameterWhitelist'],
          collectionFormat: 'multi'
        },
        'parameter.whitelist.prefixes': {
          value: opts['parameterWhitelistPrefixes'],
          collectionFormat: 'multi'
        },
        'binary.parameter.whitelist': {
          value: opts['binaryParameterWhitelist'],
          collectionFormat: 'multi'
        },
        'modifier.whitelist': {
          value: opts['modifierWhitelist'],
          collectionFormat: 'multi'
        },
        'operation.whitelist': {
          value: opts['operationWhitelist'],
          collectionFormat: 'multi'
        },
        'operation.whitelist.prefixes': {
          value: opts['operationWhitelistPrefixes'],
          collectionFormat: 'multi'
        },
        'typehint.whitelist': {
          value: opts['typehintWhitelist'],
          collectionFormat: 'multi'
        },
        'resourcetype.whitelist': {
          value: opts['resourcetypeWhitelist'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.foundation.security.impl.SaferSlingPostValidatorImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.deviceInfoTransformerEnabled 
     * @param {String} opts.deviceInfoTransformerCssStyle 
     * @param {module:api/ConfigmgrApi~comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo}
     */
    this.comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'device.info.transformer.enabled': opts['deviceInfoTransformerEnabled'],
        'device.info.transformer.css.style': opts['deviceInfoTransformerCssStyle'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.mobile.core.impl.device.DeviceInfoTransformerFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmMobileCoreImplRedirectRedirectFilter operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmMobileCoreImplRedirectRedirectFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.redirectEnabled 
     * @param {Boolean} opts.redirectStatsEnabled 
     * @param {Array.<String>} opts.redirectExtensions 
     * @param {Array.<String>} opts.redirectPaths 
     * @param {module:api/ConfigmgrApi~comDayCqWcmMobileCoreImplRedirectRedirectFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo}
     */
    this.comDayCqWcmMobileCoreImplRedirectRedirectFilter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'redirect.enabled': opts['redirectEnabled'],
        'redirect.stats.enabled': opts['redirectStatsEnabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'redirect.extensions': {
          value: opts['redirectExtensions'],
          collectionFormat: 'multi'
        },
        'redirect.paths': {
          value: opts['redirectPaths'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.mobile.core.impl.redirect.RedirectFilter', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmMsmImplActionsContentCopyActionFactory operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmMsmImplActionsContentCopyActionFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.cqWcmMsmActionExcludednodetypes 
     * @param {Array.<String>} opts.cqWcmMsmActionExcludedparagraphitems 
     * @param {Array.<String>} opts.cqWcmMsmActionExcludedprops 
     * @param {String} opts.contentcopyactionOrderStyle 
     * @param {module:api/ConfigmgrApi~comDayCqWcmMsmImplActionsContentCopyActionFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo}
     */
    this.comDayCqWcmMsmImplActionsContentCopyActionFactory = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'contentcopyaction.order.style': opts['contentcopyactionOrderStyle'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'cq.wcm.msm.action.excludednodetypes': {
          value: opts['cqWcmMsmActionExcludednodetypes'],
          collectionFormat: 'multi'
        },
        'cq.wcm.msm.action.excludedparagraphitems': {
          value: opts['cqWcmMsmActionExcludedparagraphitems'],
          collectionFormat: 'multi'
        },
        'cq.wcm.msm.action.excludedprops': {
          value: opts['cqWcmMsmActionExcludedprops'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentCopyActionFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmMsmImplActionsContentDeleteActionFactory operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmMsmImplActionsContentDeleteActionFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.cqWcmMsmActionExcludednodetypes 
     * @param {Array.<String>} opts.cqWcmMsmActionExcludedparagraphitems 
     * @param {Array.<String>} opts.cqWcmMsmActionExcludedprops 
     * @param {module:api/ConfigmgrApi~comDayCqWcmMsmImplActionsContentDeleteActionFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo}
     */
    this.comDayCqWcmMsmImplActionsContentDeleteActionFactory = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'cq.wcm.msm.action.excludednodetypes': {
          value: opts['cqWcmMsmActionExcludednodetypes'],
          collectionFormat: 'multi'
        },
        'cq.wcm.msm.action.excludedparagraphitems': {
          value: opts['cqWcmMsmActionExcludedparagraphitems'],
          collectionFormat: 'multi'
        },
        'cq.wcm.msm.action.excludedprops': {
          value: opts['cqWcmMsmActionExcludedprops'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentDeleteActionFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmMsmImplActionsContentUpdateActionFactory operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmMsmImplActionsContentUpdateActionFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.cqWcmMsmActionExcludednodetypes 
     * @param {Array.<String>} opts.cqWcmMsmActionExcludedparagraphitems 
     * @param {Array.<String>} opts.cqWcmMsmActionExcludedprops 
     * @param {Array.<String>} opts.cqWcmMsmActionIgnoredMixin 
     * @param {module:api/ConfigmgrApi~comDayCqWcmMsmImplActionsContentUpdateActionFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo}
     */
    this.comDayCqWcmMsmImplActionsContentUpdateActionFactory = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'cq.wcm.msm.action.excludednodetypes': {
          value: opts['cqWcmMsmActionExcludednodetypes'],
          collectionFormat: 'multi'
        },
        'cq.wcm.msm.action.excludedparagraphitems': {
          value: opts['cqWcmMsmActionExcludedparagraphitems'],
          collectionFormat: 'multi'
        },
        'cq.wcm.msm.action.excludedprops': {
          value: opts['cqWcmMsmActionExcludedprops'],
          collectionFormat: 'multi'
        },
        'cq.wcm.msm.action.ignoredMixin': {
          value: opts['cqWcmMsmActionIgnoredMixin'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentUpdateActionFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmMsmImplActionsOrderChildrenActionFactory operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmMsmImplActionsOrderChildrenActionFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.cqWcmMsmActionExcludednodetypes 
     * @param {Array.<String>} opts.cqWcmMsmActionExcludedparagraphitems 
     * @param {Array.<String>} opts.cqWcmMsmActionExcludedprops 
     * @param {module:api/ConfigmgrApi~comDayCqWcmMsmImplActionsOrderChildrenActionFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo}
     */
    this.comDayCqWcmMsmImplActionsOrderChildrenActionFactory = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'cq.wcm.msm.action.excludednodetypes': {
          value: opts['cqWcmMsmActionExcludednodetypes'],
          collectionFormat: 'multi'
        },
        'cq.wcm.msm.action.excludedparagraphitems': {
          value: opts['cqWcmMsmActionExcludedparagraphitems'],
          collectionFormat: 'multi'
        },
        'cq.wcm.msm.action.excludedprops': {
          value: opts['cqWcmMsmActionExcludedprops'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.OrderChildrenActionFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmMsmImplActionsPageMoveActionFactory operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmMsmImplActionsPageMoveActionFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.cqWcmMsmActionExcludednodetypes 
     * @param {Array.<String>} opts.cqWcmMsmActionExcludedparagraphitems 
     * @param {Array.<String>} opts.cqWcmMsmActionExcludedprops 
     * @param {Boolean} opts.cqWcmMsmImplActionsPagemovePropReferenceUpdate 
     * @param {module:api/ConfigmgrApi~comDayCqWcmMsmImplActionsPageMoveActionFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo}
     */
    this.comDayCqWcmMsmImplActionsPageMoveActionFactory = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.wcm.msm.impl.actions.pagemove.prop_referenceUpdate': opts['cqWcmMsmImplActionsPagemovePropReferenceUpdate'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'cq.wcm.msm.action.excludednodetypes': {
          value: opts['cqWcmMsmActionExcludednodetypes'],
          collectionFormat: 'multi'
        },
        'cq.wcm.msm.action.excludedparagraphitems': {
          value: opts['cqWcmMsmActionExcludedparagraphitems'],
          collectionFormat: 'multi'
        },
        'cq.wcm.msm.action.excludedprops': {
          value: opts['cqWcmMsmActionExcludedprops'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.PageMoveActionFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmMsmImplActionsReferencesUpdateActionFactory operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmMsmImplActionsReferencesUpdateActionFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.cqWcmMsmActionExcludednodetypes 
     * @param {Array.<String>} opts.cqWcmMsmActionExcludedparagraphitems 
     * @param {Array.<String>} opts.cqWcmMsmActionExcludedprops 
     * @param {Boolean} opts.cqWcmMsmImplActionReferencesupdatePropUpdateNested 
     * @param {module:api/ConfigmgrApi~comDayCqWcmMsmImplActionsReferencesUpdateActionFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo}
     */
    this.comDayCqWcmMsmImplActionsReferencesUpdateActionFactory = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.wcm.msm.impl.action.referencesupdate.prop_updateNested': opts['cqWcmMsmImplActionReferencesupdatePropUpdateNested'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'cq.wcm.msm.action.excludednodetypes': {
          value: opts['cqWcmMsmActionExcludednodetypes'],
          collectionFormat: 'multi'
        },
        'cq.wcm.msm.action.excludedparagraphitems': {
          value: opts['cqWcmMsmActionExcludedparagraphitems'],
          collectionFormat: 'multi'
        },
        'cq.wcm.msm.action.excludedprops': {
          value: opts['cqWcmMsmActionExcludedprops'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ReferencesUpdateActionFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmMsmImplActionsVersionCopyActionFactory operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmMsmImplActionsVersionCopyActionFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.cqWcmMsmActionExcludednodetypes 
     * @param {Array.<String>} opts.cqWcmMsmActionExcludedparagraphitems 
     * @param {Array.<String>} opts.cqWcmMsmActionExcludedprops 
     * @param {module:api/ConfigmgrApi~comDayCqWcmMsmImplActionsVersionCopyActionFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo}
     */
    this.comDayCqWcmMsmImplActionsVersionCopyActionFactory = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'cq.wcm.msm.action.excludednodetypes': {
          value: opts['cqWcmMsmActionExcludednodetypes'],
          collectionFormat: 'multi'
        },
        'cq.wcm.msm.action.excludedparagraphitems': {
          value: opts['cqWcmMsmActionExcludedparagraphitems'],
          collectionFormat: 'multi'
        },
        'cq.wcm.msm.action.excludedprops': {
          value: opts['cqWcmMsmActionExcludedprops'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.VersionCopyActionFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmMsmImplLiveRelationshipManagerImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmMsmImplLiveRelationshipManagerImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.liverelationshipmgrRelationsconfigDefault 
     * @param {module:api/ConfigmgrApi~comDayCqWcmMsmImplLiveRelationshipManagerImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo}
     */
    this.comDayCqWcmMsmImplLiveRelationshipManagerImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'liverelationshipmgr.relationsconfig.default': opts['liverelationshipmgrRelationsconfigDefault'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.msm.impl.LiveRelationshipManagerImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmMsmImplRolloutManagerImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmMsmImplRolloutManagerImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmMsmImplRolloutManagerImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.eventFilter 
     * @param {Array.<String>} opts.rolloutmgrExcludedpropsDefault 
     * @param {Array.<String>} opts.rolloutmgrExcludedparagraphpropsDefault 
     * @param {Array.<String>} opts.rolloutmgrExcludednodetypesDefault 
     * @param {Number} opts.rolloutmgrThreadpoolMaxsize 
     * @param {Number} opts.rolloutmgrThreadpoolMaxshutdowntime 
     * @param {String} opts.rolloutmgrThreadpoolPriority 
     * @param {Number} opts.rolloutmgrCommitSize 
     * @param {Boolean} opts.rolloutmgrConflicthandlingEnabled 
     * @param {module:api/ConfigmgrApi~comDayCqWcmMsmImplRolloutManagerImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmMsmImplRolloutManagerImplInfo}
     */
    this.comDayCqWcmMsmImplRolloutManagerImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'event.filter': opts['eventFilter'],
        'rolloutmgr.threadpool.maxsize': opts['rolloutmgrThreadpoolMaxsize'],
        'rolloutmgr.threadpool.maxshutdowntime': opts['rolloutmgrThreadpoolMaxshutdowntime'],
        'rolloutmgr.threadpool.priority': opts['rolloutmgrThreadpoolPriority'],
        'rolloutmgr.commit.size': opts['rolloutmgrCommitSize'],
        'rolloutmgr.conflicthandling.enabled': opts['rolloutmgrConflicthandlingEnabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'rolloutmgr.excludedprops.default': {
          value: opts['rolloutmgrExcludedpropsDefault'],
          collectionFormat: 'multi'
        },
        'rolloutmgr.excludedparagraphprops.default': {
          value: opts['rolloutmgrExcludedparagraphpropsDefault'],
          collectionFormat: 'multi'
        },
        'rolloutmgr.excludednodetypes.default': {
          value: opts['rolloutmgrExcludednodetypesDefault'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmMsmImplRolloutManagerImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.msm.impl.RolloutManagerImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmMsmImplServletsAuditLogServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmMsmImplServletsAuditLogServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmMsmImplServletsAuditLogServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.auditlogservletDefaultEventsCount 
     * @param {String} opts.auditlogservletDefaultPath 
     * @param {module:api/ConfigmgrApi~comDayCqWcmMsmImplServletsAuditLogServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmMsmImplServletsAuditLogServletInfo}
     */
    this.comDayCqWcmMsmImplServletsAuditLogServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'auditlogservlet.default.events.count': opts['auditlogservletDefaultEventsCount'],
        'auditlogservlet.default.path': opts['auditlogservletDefaultPath'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmMsmImplServletsAuditLogServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.msm.impl.servlets.AuditLogServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmNotificationEmailImplEmailChannel operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmNotificationEmailImplEmailChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmNotificationEmailImplEmailChannelInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.emailFrom 
     * @param {module:api/ConfigmgrApi~comDayCqWcmNotificationEmailImplEmailChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmNotificationEmailImplEmailChannelInfo}
     */
    this.comDayCqWcmNotificationEmailImplEmailChannel = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'email.from': opts['emailFrom'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmNotificationEmailImplEmailChannelInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.notification.email.impl.EmailChannel', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmNotificationImplNotificationManagerImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmNotificationImplNotificationManagerImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmNotificationImplNotificationManagerImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.eventTopics 
     * @param {module:api/ConfigmgrApi~comDayCqWcmNotificationImplNotificationManagerImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmNotificationImplNotificationManagerImplInfo}
     */
    this.comDayCqWcmNotificationImplNotificationManagerImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'event.topics': {
          value: opts['eventTopics'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmNotificationImplNotificationManagerImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.notification.impl.NotificationManagerImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmScriptingImplBVPManager operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmScriptingImplBVPManagerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmScriptingImplBVPManagerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.comDayCqWcmScriptingBvpScriptEngines 
     * @param {module:api/ConfigmgrApi~comDayCqWcmScriptingImplBVPManagerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmScriptingImplBVPManagerInfo}
     */
    this.comDayCqWcmScriptingImplBVPManager = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'com.day.cq.wcm.scripting.bvp.script.engines': {
          value: opts['comDayCqWcmScriptingBvpScriptEngines'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmScriptingImplBVPManagerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.scripting.impl.BVPManager', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmUndoUndoConfig operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmUndoUndoConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmUndoUndoConfigInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.cqWcmUndoEnabled 
     * @param {String} opts.cqWcmUndoPath 
     * @param {Number} opts.cqWcmUndoValidity 
     * @param {Number} opts.cqWcmUndoSteps 
     * @param {String} opts.cqWcmUndoPersistence 
     * @param {Boolean} opts.cqWcmUndoPersistenceMode 
     * @param {String} opts.cqWcmUndoMarkermode 
     * @param {Array.<String>} opts.cqWcmUndoWhitelist 
     * @param {Array.<String>} opts.cqWcmUndoBlacklist 
     * @param {module:api/ConfigmgrApi~comDayCqWcmUndoUndoConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmUndoUndoConfigInfo}
     */
    this.comDayCqWcmUndoUndoConfig = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cq.wcm.undo.enabled': opts['cqWcmUndoEnabled'],
        'cq.wcm.undo.path': opts['cqWcmUndoPath'],
        'cq.wcm.undo.validity': opts['cqWcmUndoValidity'],
        'cq.wcm.undo.steps': opts['cqWcmUndoSteps'],
        'cq.wcm.undo.persistence': opts['cqWcmUndoPersistence'],
        'cq.wcm.undo.persistence.mode': opts['cqWcmUndoPersistenceMode'],
        'cq.wcm.undo.markermode': opts['cqWcmUndoMarkermode'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'cq.wcm.undo.whitelist': {
          value: opts['cqWcmUndoWhitelist'],
          collectionFormat: 'multi'
        },
        'cq.wcm.undo.blacklist': {
          value: opts['cqWcmUndoBlacklist'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmUndoUndoConfigInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.undo.UndoConfig', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmWebservicesupportImplReplicationEventListener operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmWebservicesupportImplReplicationEventListenerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.flushAgents 
     * @param {module:api/ConfigmgrApi~comDayCqWcmWebservicesupportImplReplicationEventListenerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo}
     */
    this.comDayCqWcmWebservicesupportImplReplicationEventListener = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'Flush agents': {
          value: opts['flushAgents'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.webservicesupport.impl.ReplicationEventListener', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmWorkflowImplWcmWorkflowServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmWorkflowImplWcmWorkflowServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.eventFilter 
     * @param {Number} opts.minThreadPoolSize 
     * @param {Number} opts.maxThreadPoolSize 
     * @param {Boolean} opts.cqWcmWorkflowTerminateOnActivate 
     * @param {Array.<String>} opts.cqWcmWorklfowTerminateExclusionList 
     * @param {module:api/ConfigmgrApi~comDayCqWcmWorkflowImplWcmWorkflowServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo}
     */
    this.comDayCqWcmWorkflowImplWcmWorkflowServiceImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'event.filter': opts['eventFilter'],
        'minThreadPoolSize': opts['minThreadPoolSize'],
        'maxThreadPoolSize': opts['maxThreadPoolSize'],
        'cq.wcm.workflow.terminate.on.activate': opts['cqWcmWorkflowTerminateOnActivate'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'cq.wcm.worklfow.terminate.exclusion.list': {
          value: opts['cqWcmWorklfowTerminateExclusionList'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.workflow.impl.WcmWorkflowServiceImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmWorkflowImplWorkflowPackageInfoProvider operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmWorkflowImplWorkflowPackageInfoProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.workflowpackageinfoproviderFilter 
     * @param {String} opts.workflowpackageinfoproviderFilterRootpath 
     * @param {module:api/ConfigmgrApi~comDayCqWcmWorkflowImplWorkflowPackageInfoProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo}
     */
    this.comDayCqWcmWorkflowImplWorkflowPackageInfoProvider = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'workflowpackageinfoprovider.filter.rootpath': opts['workflowpackageinfoproviderFilterRootpath'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'workflowpackageinfoprovider.filter': {
          value: opts['workflowpackageinfoproviderFilter'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.workflow.impl.WorkflowPackageInfoProvider', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWidgetImplHtmlLibraryManagerImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqWidgetImplHtmlLibraryManagerImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWidgetImplHtmlLibraryManagerImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.htmllibmanagerClientmanager 
     * @param {Boolean} opts.htmllibmanagerDebug 
     * @param {Boolean} opts.htmllibmanagerDebugConsole 
     * @param {String} opts.htmllibmanagerDebugInitJs 
     * @param {String} opts.htmllibmanagerDefaultthemename 
     * @param {String} opts.htmllibmanagerDefaultuserthemename 
     * @param {String} opts.htmllibmanagerFirebuglitePath 
     * @param {Boolean} opts.htmllibmanagerForceCQUrlInfo 
     * @param {Boolean} opts.htmllibmanagerGzip 
     * @param {Number} opts.htmllibmanagerMaxage 
     * @param {Number} opts.htmllibmanagerMaxDataUriSize 
     * @param {Boolean} opts.htmllibmanagerMinify 
     * @param {Array.<String>} opts.htmllibmanagerPathList 
     * @param {Boolean} opts.htmllibmanagerTiming 
     * @param {module:api/ConfigmgrApi~comDayCqWidgetImplHtmlLibraryManagerImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWidgetImplHtmlLibraryManagerImplInfo}
     */
    this.comDayCqWidgetImplHtmlLibraryManagerImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'htmllibmanager.clientmanager': opts['htmllibmanagerClientmanager'],
        'htmllibmanager.debug': opts['htmllibmanagerDebug'],
        'htmllibmanager.debug.console': opts['htmllibmanagerDebugConsole'],
        'htmllibmanager.debug.init.js': opts['htmllibmanagerDebugInitJs'],
        'htmllibmanager.defaultthemename': opts['htmllibmanagerDefaultthemename'],
        'htmllibmanager.defaultuserthemename': opts['htmllibmanagerDefaultuserthemename'],
        'htmllibmanager.firebuglite.path': opts['htmllibmanagerFirebuglitePath'],
        'htmllibmanager.forceCQUrlInfo': opts['htmllibmanagerForceCQUrlInfo'],
        'htmllibmanager.gzip': opts['htmllibmanagerGzip'],
        'htmllibmanager.maxage': opts['htmllibmanagerMaxage'],
        'htmllibmanager.maxDataUriSize': opts['htmllibmanagerMaxDataUriSize'],
        'htmllibmanager.minify': opts['htmllibmanagerMinify'],
        'htmllibmanager.timing': opts['htmllibmanagerTiming'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'htmllibmanager.path.list': {
          value: opts['htmllibmanagerPathList'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWidgetImplHtmlLibraryManagerImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.widget.impl.HtmlLibraryManagerImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWidgetImplWidgetExtensionProviderImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqWidgetImplWidgetExtensionProviderImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWidgetImplWidgetExtensionProviderImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.extendableWidgets 
     * @param {Boolean} opts.widgetextensionproviderDebug 
     * @param {module:api/ConfigmgrApi~comDayCqWidgetImplWidgetExtensionProviderImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWidgetImplWidgetExtensionProviderImplInfo}
     */
    this.comDayCqWidgetImplWidgetExtensionProviderImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'widgetextensionprovider.debug': opts['widgetextensionproviderDebug'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'extendable.widgets': {
          value: opts['extendableWidgets'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWidgetImplWidgetExtensionProviderImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.widget.impl.WidgetExtensionProviderImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWorkflowImplEmailEMailNotificationService operation.
     * @callback module:api/ConfigmgrApi~comDayCqWorkflowImplEmailEMailNotificationServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWorkflowImplEmailEMailNotificationServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.fromAddress 
     * @param {String} opts.hostPrefix 
     * @param {Boolean} opts.notifyOnabort 
     * @param {Boolean} opts.notifyOncomplete 
     * @param {Boolean} opts.notifyOncontainercomplete 
     * @param {Boolean} opts.notifyUseronly 
     * @param {module:api/ConfigmgrApi~comDayCqWorkflowImplEmailEMailNotificationServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWorkflowImplEmailEMailNotificationServiceInfo}
     */
    this.comDayCqWorkflowImplEmailEMailNotificationService = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'from.address': opts['fromAddress'],
        'host.prefix': opts['hostPrefix'],
        'notify.onabort': opts['notifyOnabort'],
        'notify.oncomplete': opts['notifyOncomplete'],
        'notify.oncontainercomplete': opts['notifyOncontainercomplete'],
        'notify.useronly': opts['notifyUseronly'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWorkflowImplEmailEMailNotificationServiceInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.workflow.impl.email.EMailNotificationService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWorkflowImplEmailTaskEMailNotificationService operation.
     * @callback module:api/ConfigmgrApi~comDayCqWorkflowImplEmailTaskEMailNotificationServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.notifyOnupdate 
     * @param {Boolean} opts.notifyOncomplete 
     * @param {module:api/ConfigmgrApi~comDayCqWorkflowImplEmailTaskEMailNotificationServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo}
     */
    this.comDayCqWorkflowImplEmailTaskEMailNotificationService = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'notify.onupdate': opts['notifyOnupdate'],
        'notify.oncomplete': opts['notifyOncomplete'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.workflow.impl.email.TaskEMailNotificationService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCrxSecurityTokenImplImplTokenAuthenticationHandler operation.
     * @callback module:api/ConfigmgrApi~comDayCrxSecurityTokenImplImplTokenAuthenticationHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.path 
     * @param {String} opts.tokenRequiredAttr 
     * @param {String} opts.tokenAlternateUrl 
     * @param {Boolean} opts.tokenEncapsulated 
     * @param {Array.<String>} opts.skipTokenRefresh 
     * @param {module:api/ConfigmgrApi~comDayCrxSecurityTokenImplImplTokenAuthenticationHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo}
     */
    this.comDayCrxSecurityTokenImplImplTokenAuthenticationHandler = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'path': opts['path'],
        'token.required.attr': opts['tokenRequiredAttr'],
        'token.alternate.url': opts['tokenAlternateUrl'],
        'token.encapsulated': opts['tokenEncapsulated'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'skip.token.refresh': {
          value: opts['skipTokenRefresh'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.crx.security.token.impl.impl.TokenAuthenticationHandler', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCrxSecurityTokenImplTokenCleanupTask operation.
     * @callback module:api/ConfigmgrApi~comDayCrxSecurityTokenImplTokenCleanupTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCrxSecurityTokenImplTokenCleanupTaskInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.enableTokenCleanupTask 
     * @param {String} opts.schedulerExpression 
     * @param {Number} opts.batchSize 
     * @param {module:api/ConfigmgrApi~comDayCrxSecurityTokenImplTokenCleanupTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCrxSecurityTokenImplTokenCleanupTaskInfo}
     */
    this.comDayCrxSecurityTokenImplTokenCleanupTask = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'enable.token.cleanup.task': opts['enableTokenCleanupTask'],
        'scheduler.expression': opts['schedulerExpression'],
        'batch.size': opts['batchSize'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = ComDayCrxSecurityTokenImplTokenCleanupTaskInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.crx.security.token.impl.TokenCleanupTask', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the guideLocalizationService operation.
     * @callback module:api/ConfigmgrApi~guideLocalizationServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GuideLocalizationServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.supportedLocales 
     * @param {Array.<String>} opts.localizableProperties 
     * @param {module:api/ConfigmgrApi~guideLocalizationServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GuideLocalizationServiceInfo}
     */
    this.guideLocalizationService = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'supportedLocales': {
          value: opts['supportedLocales'],
          collectionFormat: 'multi'
        },
        'Localizable Properties': {
          value: opts['localizableProperties'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = GuideLocalizationServiceInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/Guide Localization Service', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the messagingUserComponentFactory operation.
     * @callback module:api/ConfigmgrApi~messagingUserComponentFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessagingUserComponentFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.priority 
     * @param {module:api/ConfigmgrApi~messagingUserComponentFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessagingUserComponentFactoryInfo}
     */
    this.messagingUserComponentFactory = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'priority': opts['priority'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = MessagingUserComponentFactoryInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/MessagingUserComponentFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheAriesJmxFrameworkStateConfig operation.
     * @callback module:api/ConfigmgrApi~orgApacheAriesJmxFrameworkStateConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheAriesJmxFrameworkStateConfigInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.attributeChangeNotificationEnabled 
     * @param {module:api/ConfigmgrApi~orgApacheAriesJmxFrameworkStateConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheAriesJmxFrameworkStateConfigInfo}
     */
    this.orgApacheAriesJmxFrameworkStateConfig = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'attributeChangeNotificationEnabled': opts['attributeChangeNotificationEnabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheAriesJmxFrameworkStateConfigInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.aries.jmx.framework.StateConfig', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheFelixEventadminImplEventAdmin operation.
     * @callback module:api/ConfigmgrApi~orgApacheFelixEventadminImplEventAdminCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheFelixEventadminImplEventAdminInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.orgApacheFelixEventadminThreadPoolSize 
     * @param {Number} opts.orgApacheFelixEventadminAsyncToSyncThreadRatio 
     * @param {Number} opts.orgApacheFelixEventadminTimeout 
     * @param {Boolean} opts.orgApacheFelixEventadminRequireTopic 
     * @param {Array.<String>} opts.orgApacheFelixEventadminIgnoreTimeout 
     * @param {Array.<String>} opts.orgApacheFelixEventadminIgnoreTopic 
     * @param {module:api/ConfigmgrApi~orgApacheFelixEventadminImplEventAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheFelixEventadminImplEventAdminInfo}
     */
    this.orgApacheFelixEventadminImplEventAdmin = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'org.apache.felix.eventadmin.ThreadPoolSize': opts['orgApacheFelixEventadminThreadPoolSize'],
        'org.apache.felix.eventadmin.AsyncToSyncThreadRatio': opts['orgApacheFelixEventadminAsyncToSyncThreadRatio'],
        'org.apache.felix.eventadmin.Timeout': opts['orgApacheFelixEventadminTimeout'],
        'org.apache.felix.eventadmin.RequireTopic': opts['orgApacheFelixEventadminRequireTopic'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'org.apache.felix.eventadmin.IgnoreTimeout': {
          value: opts['orgApacheFelixEventadminIgnoreTimeout'],
          collectionFormat: 'multi'
        },
        'org.apache.felix.eventadmin.IgnoreTopic': {
          value: opts['orgApacheFelixEventadminIgnoreTopic'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheFelixEventadminImplEventAdminInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.felix.eventadmin.impl.EventAdmin', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheFelixHttp operation.
     * @callback module:api/ConfigmgrApi~orgApacheFelixHttpCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheFelixHttpInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.orgApacheFelixHttpHost 
     * @param {Boolean} opts.orgApacheFelixHttpEnable 
     * @param {Number} opts.orgOsgiServiceHttpPort 
     * @param {Number} opts.orgApacheFelixHttpTimeout 
     * @param {Boolean} opts.orgApacheFelixHttpsEnable 
     * @param {Number} opts.orgOsgiServiceHttpPortSecure 
     * @param {String} opts.orgApacheFelixHttpsKeystore 
     * @param {String} opts.orgApacheFelixHttpsKeystorePassword 
     * @param {String} opts.orgApacheFelixHttpsKeystoreKeyPassword 
     * @param {String} opts.orgApacheFelixHttpsTruststore 
     * @param {String} opts.orgApacheFelixHttpsTruststorePassword 
     * @param {String} opts.orgApacheFelixHttpsClientcertificate 
     * @param {String} opts.orgApacheFelixHttpContextPath 
     * @param {Boolean} opts.orgApacheFelixHttpMbeans 
     * @param {Number} opts.orgApacheFelixHttpSessionTimeout 
     * @param {Number} opts.orgApacheFelixHttpJettyThreadpoolMax 
     * @param {Number} opts.orgApacheFelixHttpJettyAcceptors 
     * @param {Number} opts.orgApacheFelixHttpJettySelectors 
     * @param {Number} opts.orgApacheFelixHttpJettyHeaderBufferSize 
     * @param {Number} opts.orgApacheFelixHttpJettyRequestBufferSize 
     * @param {Number} opts.orgApacheFelixHttpJettyResponseBufferSize 
     * @param {Number} opts.orgApacheFelixHttpJettyMaxFormSize 
     * @param {Array.<String>} opts.orgApacheFelixHttpPathExclusions 
     * @param {Array.<String>} opts.orgApacheFelixHttpsJettyCiphersuitesExcluded 
     * @param {Array.<String>} opts.orgApacheFelixHttpsJettyCiphersuitesIncluded 
     * @param {Boolean} opts.orgApacheFelixHttpJettySendServerHeader 
     * @param {Array.<String>} opts.orgApacheFelixHttpsJettyProtocolsIncluded 
     * @param {Array.<String>} opts.orgApacheFelixHttpsJettyProtocolsExcluded 
     * @param {Boolean} opts.orgApacheFelixProxyLoadBalancerConnectionEnable 
     * @param {Boolean} opts.orgApacheFelixHttpsJettyRenegotiateAllowed 
     * @param {Boolean} opts.orgApacheFelixHttpsJettySessionCookieHttpOnly 
     * @param {Boolean} opts.orgApacheFelixHttpsJettySessionCookieSecure 
     * @param {String} opts.orgEclipseJettyServletSessionIdPathParameterName 
     * @param {Boolean} opts.orgEclipseJettyServletCheckingRemoteSessionIdEncoding 
     * @param {String} opts.orgEclipseJettyServletSessionCookie 
     * @param {String} opts.orgEclipseJettyServletSessionDomain 
     * @param {String} opts.orgEclipseJettyServletSessionPath 
     * @param {Number} opts.orgEclipseJettyServletMaxAge 
     * @param {String} opts.orgApacheFelixHttpName 
     * @param {Boolean} opts.orgApacheFelixJettyGziphandlerEnable 
     * @param {Number} opts.orgApacheFelixJettyGzipMinGzipSize 
     * @param {Number} opts.orgApacheFelixJettyGzipCompressionLevel 
     * @param {Number} opts.orgApacheFelixJettyGzipInflateBufferSize 
     * @param {Boolean} opts.orgApacheFelixJettyGzipSyncFlush 
     * @param {Array.<String>} opts.orgApacheFelixJettyGzipExcludedUserAgents 
     * @param {Array.<String>} opts.orgApacheFelixJettyGzipIncludedMethods 
     * @param {Array.<String>} opts.orgApacheFelixJettyGzipExcludedMethods 
     * @param {Array.<String>} opts.orgApacheFelixJettyGzipIncludedPaths 
     * @param {Array.<String>} opts.orgApacheFelixJettyGzipExcludedPaths 
     * @param {Array.<String>} opts.orgApacheFelixJettyGzipIncludedMimeTypes 
     * @param {Array.<String>} opts.orgApacheFelixJettyGzipExcludedMimeTypes 
     * @param {Boolean} opts.orgApacheFelixHttpSessionInvalidate 
     * @param {Boolean} opts.orgApacheFelixHttpSessionUniqueid 
     * @param {module:api/ConfigmgrApi~orgApacheFelixHttpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheFelixHttpInfo}
     */
    this.orgApacheFelixHttp = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'org.apache.felix.http.host': opts['orgApacheFelixHttpHost'],
        'org.apache.felix.http.enable': opts['orgApacheFelixHttpEnable'],
        'org.osgi.service.http.port': opts['orgOsgiServiceHttpPort'],
        'org.apache.felix.http.timeout': opts['orgApacheFelixHttpTimeout'],
        'org.apache.felix.https.enable': opts['orgApacheFelixHttpsEnable'],
        'org.osgi.service.http.port.secure': opts['orgOsgiServiceHttpPortSecure'],
        'org.apache.felix.https.keystore': opts['orgApacheFelixHttpsKeystore'],
        'org.apache.felix.https.keystore.password': opts['orgApacheFelixHttpsKeystorePassword'],
        'org.apache.felix.https.keystore.key.password': opts['orgApacheFelixHttpsKeystoreKeyPassword'],
        'org.apache.felix.https.truststore': opts['orgApacheFelixHttpsTruststore'],
        'org.apache.felix.https.truststore.password': opts['orgApacheFelixHttpsTruststorePassword'],
        'org.apache.felix.https.clientcertificate': opts['orgApacheFelixHttpsClientcertificate'],
        'org.apache.felix.http.context_path': opts['orgApacheFelixHttpContextPath'],
        'org.apache.felix.http.mbeans': opts['orgApacheFelixHttpMbeans'],
        'org.apache.felix.http.session.timeout': opts['orgApacheFelixHttpSessionTimeout'],
        'org.apache.felix.http.jetty.threadpool.max': opts['orgApacheFelixHttpJettyThreadpoolMax'],
        'org.apache.felix.http.jetty.acceptors': opts['orgApacheFelixHttpJettyAcceptors'],
        'org.apache.felix.http.jetty.selectors': opts['orgApacheFelixHttpJettySelectors'],
        'org.apache.felix.http.jetty.headerBufferSize': opts['orgApacheFelixHttpJettyHeaderBufferSize'],
        'org.apache.felix.http.jetty.requestBufferSize': opts['orgApacheFelixHttpJettyRequestBufferSize'],
        'org.apache.felix.http.jetty.responseBufferSize': opts['orgApacheFelixHttpJettyResponseBufferSize'],
        'org.apache.felix.http.jetty.maxFormSize': opts['orgApacheFelixHttpJettyMaxFormSize'],
        'org.apache.felix.http.jetty.sendServerHeader': opts['orgApacheFelixHttpJettySendServerHeader'],
        'org.apache.felix.proxy.load.balancer.connection.enable': opts['orgApacheFelixProxyLoadBalancerConnectionEnable'],
        'org.apache.felix.https.jetty.renegotiateAllowed': opts['orgApacheFelixHttpsJettyRenegotiateAllowed'],
        'org.apache.felix.https.jetty.session.cookie.httpOnly': opts['orgApacheFelixHttpsJettySessionCookieHttpOnly'],
        'org.apache.felix.https.jetty.session.cookie.secure': opts['orgApacheFelixHttpsJettySessionCookieSecure'],
        'org.eclipse.jetty.servlet.SessionIdPathParameterName': opts['orgEclipseJettyServletSessionIdPathParameterName'],
        'org.eclipse.jetty.servlet.CheckingRemoteSessionIdEncoding': opts['orgEclipseJettyServletCheckingRemoteSessionIdEncoding'],
        'org.eclipse.jetty.servlet.SessionCookie': opts['orgEclipseJettyServletSessionCookie'],
        'org.eclipse.jetty.servlet.SessionDomain': opts['orgEclipseJettyServletSessionDomain'],
        'org.eclipse.jetty.servlet.SessionPath': opts['orgEclipseJettyServletSessionPath'],
        'org.eclipse.jetty.servlet.MaxAge': opts['orgEclipseJettyServletMaxAge'],
        'org.apache.felix.http.name': opts['orgApacheFelixHttpName'],
        'org.apache.felix.jetty.gziphandler.enable': opts['orgApacheFelixJettyGziphandlerEnable'],
        'org.apache.felix.jetty.gzip.minGzipSize': opts['orgApacheFelixJettyGzipMinGzipSize'],
        'org.apache.felix.jetty.gzip.compressionLevel': opts['orgApacheFelixJettyGzipCompressionLevel'],
        'org.apache.felix.jetty.gzip.inflateBufferSize': opts['orgApacheFelixJettyGzipInflateBufferSize'],
        'org.apache.felix.jetty.gzip.syncFlush': opts['orgApacheFelixJettyGzipSyncFlush'],
        'org.apache.felix.http.session.invalidate': opts['orgApacheFelixHttpSessionInvalidate'],
        'org.apache.felix.http.session.uniqueid': opts['orgApacheFelixHttpSessionUniqueid'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'org.apache.felix.http.path_exclusions': {
          value: opts['orgApacheFelixHttpPathExclusions'],
          collectionFormat: 'multi'
        },
        'org.apache.felix.https.jetty.ciphersuites.excluded': {
          value: opts['orgApacheFelixHttpsJettyCiphersuitesExcluded'],
          collectionFormat: 'multi'
        },
        'org.apache.felix.https.jetty.ciphersuites.included': {
          value: opts['orgApacheFelixHttpsJettyCiphersuitesIncluded'],
          collectionFormat: 'multi'
        },
        'org.apache.felix.https.jetty.protocols.included': {
          value: opts['orgApacheFelixHttpsJettyProtocolsIncluded'],
          collectionFormat: 'multi'
        },
        'org.apache.felix.https.jetty.protocols.excluded': {
          value: opts['orgApacheFelixHttpsJettyProtocolsExcluded'],
          collectionFormat: 'multi'
        },
        'org.apache.felix.jetty.gzip.excludedUserAgents': {
          value: opts['orgApacheFelixJettyGzipExcludedUserAgents'],
          collectionFormat: 'multi'
        },
        'org.apache.felix.jetty.gzip.includedMethods': {
          value: opts['orgApacheFelixJettyGzipIncludedMethods'],
          collectionFormat: 'multi'
        },
        'org.apache.felix.jetty.gzip.excludedMethods': {
          value: opts['orgApacheFelixJettyGzipExcludedMethods'],
          collectionFormat: 'multi'
        },
        'org.apache.felix.jetty.gzip.includedPaths': {
          value: opts['orgApacheFelixJettyGzipIncludedPaths'],
          collectionFormat: 'multi'
        },
        'org.apache.felix.jetty.gzip.excludedPaths': {
          value: opts['orgApacheFelixJettyGzipExcludedPaths'],
          collectionFormat: 'multi'
        },
        'org.apache.felix.jetty.gzip.includedMimeTypes': {
          value: opts['orgApacheFelixJettyGzipIncludedMimeTypes'],
          collectionFormat: 'multi'
        },
        'org.apache.felix.jetty.gzip.excludedMimeTypes': {
          value: opts['orgApacheFelixJettyGzipExcludedMimeTypes'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheFelixHttpInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.felix.http', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheFelixHttpSslfilterSslFilter operation.
     * @callback module:api/ConfigmgrApi~orgApacheFelixHttpSslfilterSslFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheFelixHttpSslfilterSslFilterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.sslForwardHeader 
     * @param {String} opts.sslForwardValue 
     * @param {String} opts.sslForwardCertHeader 
     * @param {Boolean} opts.rewriteAbsoluteUrls 
     * @param {module:api/ConfigmgrApi~orgApacheFelixHttpSslfilterSslFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheFelixHttpSslfilterSslFilterInfo}
     */
    this.orgApacheFelixHttpSslfilterSslFilter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'ssl-forward.header': opts['sslForwardHeader'],
        'ssl-forward.value': opts['sslForwardValue'],
        'ssl-forward-cert.header': opts['sslForwardCertHeader'],
        'rewrite.absolute.urls': opts['rewriteAbsoluteUrls'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheFelixHttpSslfilterSslFilterInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.felix.http.sslfilter.SslFilter', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheFelixJaasConfigurationFactory operation.
     * @callback module:api/ConfigmgrApi~orgApacheFelixJaasConfigurationFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheFelixJaasConfigurationFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.jaasControlFlag 
     * @param {Number} opts.jaasRanking 
     * @param {String} opts.jaasRealmName 
     * @param {String} opts.jaasClassname 
     * @param {Array.<String>} opts.jaasOptions 
     * @param {module:api/ConfigmgrApi~orgApacheFelixJaasConfigurationFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheFelixJaasConfigurationFactoryInfo}
     */
    this.orgApacheFelixJaasConfigurationFactory = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'jaas.controlFlag': opts['jaasControlFlag'],
        'jaas.ranking': opts['jaasRanking'],
        'jaas.realmName': opts['jaasRealmName'],
        'jaas.classname': opts['jaasClassname'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'jaas.options': {
          value: opts['jaasOptions'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheFelixJaasConfigurationFactoryInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.felix.jaas.Configuration.factory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheFelixJaasConfigurationSpi operation.
     * @callback module:api/ConfigmgrApi~orgApacheFelixJaasConfigurationSpiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheFelixJaasConfigurationSpiInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.jaasDefaultRealmName 
     * @param {String} opts.jaasConfigProviderName 
     * @param {String} opts.jaasGlobalConfigPolicy 
     * @param {module:api/ConfigmgrApi~orgApacheFelixJaasConfigurationSpiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheFelixJaasConfigurationSpiInfo}
     */
    this.orgApacheFelixJaasConfigurationSpi = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'jaas.defaultRealmName': opts['jaasDefaultRealmName'],
        'jaas.configProviderName': opts['jaasConfigProviderName'],
        'jaas.globalConfigPolicy': opts['jaasGlobalConfigPolicy'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheFelixJaasConfigurationSpiInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.felix.jaas.ConfigurationSpi', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheFelixScrScrService operation.
     * @callback module:api/ConfigmgrApi~orgApacheFelixScrScrServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheFelixScrScrServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.dsLoglevel 
     * @param {Boolean} opts.dsFactoryEnabled 
     * @param {Boolean} opts.dsDelayedKeepInstances 
     * @param {Number} opts.dsLockTimeoutMilliseconds 
     * @param {Number} opts.dsStopTimeoutMilliseconds 
     * @param {Boolean} opts.dsGlobalExtender 
     * @param {module:api/ConfigmgrApi~orgApacheFelixScrScrServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheFelixScrScrServiceInfo}
     */
    this.orgApacheFelixScrScrService = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'ds.loglevel': opts['dsLoglevel'],
        'ds.factory.enabled': opts['dsFactoryEnabled'],
        'ds.delayed.keepInstances': opts['dsDelayedKeepInstances'],
        'ds.lock.timeout.milliseconds': opts['dsLockTimeoutMilliseconds'],
        'ds.stop.timeout.milliseconds': opts['dsStopTimeoutMilliseconds'],
        'ds.global.extender': opts['dsGlobalExtender'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheFelixScrScrServiceInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.felix.scr.ScrService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheFelixSystemreadyImplComponentsCheck operation.
     * @callback module:api/ConfigmgrApi~orgApacheFelixSystemreadyImplComponentsCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheFelixSystemreadyImplComponentsCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.componentsList 
     * @param {String} opts.type 
     * @param {module:api/ConfigmgrApi~orgApacheFelixSystemreadyImplComponentsCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheFelixSystemreadyImplComponentsCheckInfo}
     */
    this.orgApacheFelixSystemreadyImplComponentsCheck = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'type': opts['type'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'components.list': {
          value: opts['componentsList'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheFelixSystemreadyImplComponentsCheckInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.felix.systemready.impl.ComponentsCheck', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheFelixSystemreadyImplFrameworkStartCheck operation.
     * @callback module:api/ConfigmgrApi~orgApacheFelixSystemreadyImplFrameworkStartCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.timeout 
     * @param {Number} opts.targetStartLevel 
     * @param {String} opts.targetStartLevelPropName 
     * @param {String} opts.type 
     * @param {module:api/ConfigmgrApi~orgApacheFelixSystemreadyImplFrameworkStartCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo}
     */
    this.orgApacheFelixSystemreadyImplFrameworkStartCheck = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'timeout': opts['timeout'],
        'target.start.level': opts['targetStartLevel'],
        'target.start.level.prop.name': opts['targetStartLevelPropName'],
        'type': opts['type'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.felix.systemready.impl.FrameworkStartCheck', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheFelixSystemreadyImplServicesCheck operation.
     * @callback module:api/ConfigmgrApi~orgApacheFelixSystemreadyImplServicesCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheFelixSystemreadyImplServicesCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.servicesList 
     * @param {String} opts.type 
     * @param {module:api/ConfigmgrApi~orgApacheFelixSystemreadyImplServicesCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheFelixSystemreadyImplServicesCheckInfo}
     */
    this.orgApacheFelixSystemreadyImplServicesCheck = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'type': opts['type'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'services.list': {
          value: opts['servicesList'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheFelixSystemreadyImplServicesCheckInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.felix.systemready.impl.ServicesCheck', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheFelixSystemreadyImplServletSystemAliveServlet operation.
     * @callback module:api/ConfigmgrApi~orgApacheFelixSystemreadyImplServletSystemAliveServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.osgiHttpWhiteboardServletPattern 
     * @param {String} opts.osgiHttpWhiteboardContextSelect 
     * @param {module:api/ConfigmgrApi~orgApacheFelixSystemreadyImplServletSystemAliveServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo}
     */
    this.orgApacheFelixSystemreadyImplServletSystemAliveServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'osgi.http.whiteboard.servlet.pattern': opts['osgiHttpWhiteboardServletPattern'],
        'osgi.http.whiteboard.context.select': opts['osgiHttpWhiteboardContextSelect'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemAliveServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheFelixSystemreadyImplServletSystemReadyServlet operation.
     * @callback module:api/ConfigmgrApi~orgApacheFelixSystemreadyImplServletSystemReadyServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.osgiHttpWhiteboardServletPattern 
     * @param {String} opts.osgiHttpWhiteboardContextSelect 
     * @param {module:api/ConfigmgrApi~orgApacheFelixSystemreadyImplServletSystemReadyServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo}
     */
    this.orgApacheFelixSystemreadyImplServletSystemReadyServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'osgi.http.whiteboard.servlet.pattern': opts['osgiHttpWhiteboardServletPattern'],
        'osgi.http.whiteboard.context.select': opts['osgiHttpWhiteboardContextSelect'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemReadyServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheFelixSystemreadySystemReadyMonitor operation.
     * @callback module:api/ConfigmgrApi~orgApacheFelixSystemreadySystemReadyMonitorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheFelixSystemreadySystemReadyMonitorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.pollInterval 
     * @param {module:api/ConfigmgrApi~orgApacheFelixSystemreadySystemReadyMonitorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheFelixSystemreadySystemReadyMonitorInfo}
     */
    this.orgApacheFelixSystemreadySystemReadyMonitor = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'poll.interval': opts['pollInterval'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheFelixSystemreadySystemReadyMonitorInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.felix.systemready.SystemReadyMonitor', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheFelixWebconsoleInternalServletOsgiManager operation.
     * @callback module:api/ConfigmgrApi~orgApacheFelixWebconsoleInternalServletOsgiManagerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.managerRoot 
     * @param {String} opts.httpServiceFilter 
     * @param {String} opts.defaultRender 
     * @param {String} opts.realm 
     * @param {String} opts.username 
     * @param {String} opts.password 
     * @param {String} opts.category 
     * @param {String} opts.locale 
     * @param {Number} opts.loglevel 
     * @param {String} opts.plugins 
     * @param {module:api/ConfigmgrApi~orgApacheFelixWebconsoleInternalServletOsgiManagerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo}
     */
    this.orgApacheFelixWebconsoleInternalServletOsgiManager = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'manager.root': opts['managerRoot'],
        'http.service.filter': opts['httpServiceFilter'],
        'default.render': opts['defaultRender'],
        'realm': opts['realm'],
        'username': opts['username'],
        'password': opts['password'],
        'category': opts['category'],
        'locale': opts['locale'],
        'loglevel': opts['loglevel'],
        'plugins': opts['plugins'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.felix.webconsole.internal.servlet.OsgiManager', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheFelixWebconsolePluginsEventInternalPluginServlet operation.
     * @callback module:api/ConfigmgrApi~orgApacheFelixWebconsolePluginsEventInternalPluginServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.maxSize 
     * @param {module:api/ConfigmgrApi~orgApacheFelixWebconsolePluginsEventInternalPluginServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo}
     */
    this.orgApacheFelixWebconsolePluginsEventInternalPluginServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'max.size': opts['maxSize'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.felix.webconsole.plugins.event.internal.PluginServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo operation.
     * @callback module:api/ConfigmgrApi~orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.felixMemoryusageDumpThreshold 
     * @param {Number} opts.felixMemoryusageDumpInterval 
     * @param {String} opts.felixMemoryusageDumpLocation 
     * @param {module:api/ConfigmgrApi~orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo}
     */
    this.orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'felix.memoryusage.dump.threshold': opts['felixMemoryusageDumpThreshold'],
        'felix.memoryusage.dump.interval': opts['felixMemoryusageDumpInterval'],
        'felix.memoryusage.dump.location': opts['felixMemoryusageDumpLocation'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.felix.webconsole.plugins.memoryusage.internal.MemoryUsageConfigurator', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheHttpProxyconfigurator operation.
     * @callback module:api/ConfigmgrApi~orgApacheHttpProxyconfiguratorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheHttpProxyconfiguratorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.proxyEnabled 
     * @param {String} opts.proxyHost 
     * @param {Number} opts.proxyPort 
     * @param {String} opts.proxyUser 
     * @param {String} opts.proxyPassword 
     * @param {Array.<String>} opts.proxyExceptions 
     * @param {module:api/ConfigmgrApi~orgApacheHttpProxyconfiguratorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheHttpProxyconfiguratorInfo}
     */
    this.orgApacheHttpProxyconfigurator = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'proxy.enabled': opts['proxyEnabled'],
        'proxy.host': opts['proxyHost'],
        'proxy.port': opts['proxyPort'],
        'proxy.user': opts['proxyUser'],
        'proxy.password': opts['proxyPassword'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'proxy.exceptions': {
          value: opts['proxyExceptions'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheHttpProxyconfiguratorInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.http.proxyconfigurator', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.dir 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo}
     */
    this.orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'dir': opts['dir'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreTextProviderService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.path 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo}
     */
    this.orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'path': opts['path'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.FileDataStore', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.mongouri 
     * @param {String} opts.db 
     * @param {Boolean} opts.socketKeepAlive 
     * @param {Number} opts.cache 
     * @param {Number} opts.nodeCachePercentage 
     * @param {Number} opts.prevDocCachePercentage 
     * @param {Number} opts.childrenCachePercentage 
     * @param {Number} opts.diffCachePercentage 
     * @param {Number} opts.cacheSegmentCount 
     * @param {Number} opts.cacheStackMoveDistance 
     * @param {Number} opts.blobCacheSize 
     * @param {String} opts.persistentCache 
     * @param {String} opts.journalCache 
     * @param {Boolean} opts.customBlobStore 
     * @param {Number} opts.journalGCInterval 
     * @param {Number} opts.journalGCMaxAge 
     * @param {Boolean} opts.prefetchExternalChanges 
     * @param {String} opts.role 
     * @param {Number} opts.versionGcMaxAgeInSecs 
     * @param {String} opts.versionGCExpression 
     * @param {Number} opts.versionGCTimeLimitInSecs 
     * @param {Number} opts.blobGcMaxAgeInSecs 
     * @param {Number} opts.blobTrackSnapshotIntervalInSecs 
     * @param {String} opts.repositoryHome 
     * @param {Number} opts.maxReplicationLagInSecs 
     * @param {String} opts.documentStoreType 
     * @param {Boolean} opts.bundlingDisabled 
     * @param {Number} opts.updateLimit 
     * @param {Array.<String>} opts.persistentCacheIncludes 
     * @param {String} opts.leaseCheckMode 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo}
     */
    this.orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'mongouri': opts['mongouri'],
        'db': opts['db'],
        'socketKeepAlive': opts['socketKeepAlive'],
        'cache': opts['cache'],
        'nodeCachePercentage': opts['nodeCachePercentage'],
        'prevDocCachePercentage': opts['prevDocCachePercentage'],
        'childrenCachePercentage': opts['childrenCachePercentage'],
        'diffCachePercentage': opts['diffCachePercentage'],
        'cacheSegmentCount': opts['cacheSegmentCount'],
        'cacheStackMoveDistance': opts['cacheStackMoveDistance'],
        'blobCacheSize': opts['blobCacheSize'],
        'persistentCache': opts['persistentCache'],
        'journalCache': opts['journalCache'],
        'customBlobStore': opts['customBlobStore'],
        'journalGCInterval': opts['journalGCInterval'],
        'journalGCMaxAge': opts['journalGCMaxAge'],
        'prefetchExternalChanges': opts['prefetchExternalChanges'],
        'role': opts['role'],
        'versionGcMaxAgeInSecs': opts['versionGcMaxAgeInSecs'],
        'versionGCExpression': opts['versionGCExpression'],
        'versionGCTimeLimitInSecs': opts['versionGCTimeLimitInSecs'],
        'blobGcMaxAgeInSecs': opts['blobGcMaxAgeInSecs'],
        'blobTrackSnapshotIntervalInSecs': opts['blobTrackSnapshotIntervalInSecs'],
        'repository.home': opts['repositoryHome'],
        'maxReplicationLagInSecs': opts['maxReplicationLagInSecs'],
        'documentStoreType': opts['documentStoreType'],
        'bundlingDisabled': opts['bundlingDisabled'],
        'updateLimit': opts['updateLimit'],
        'leaseCheckMode': opts['leaseCheckMode'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'persistentCacheIncludes': {
          value: opts['persistentCacheIncludes'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.persistentCacheIncludes 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo}
     */
    this.orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'persistentCacheIncludes': {
          value: opts['persistentCacheIncludes'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreServicePreset', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.includedPaths 
     * @param {Boolean} opts.enableAsyncObserver 
     * @param {Number} opts.observerQueueSize 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo}
     */
    this.orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'enableAsyncObserver': opts['enableAsyncObserver'],
        'observerQueueSize': opts['observerQueueSize'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'includedPaths': {
          value: opts['includedPaths'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.secondary.SecondaryStoreCacheService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakPluginsIndexAsyncIndexerService operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.asyncConfigs 
     * @param {Number} opts.leaseTimeOutMinutes 
     * @param {Number} opts.failingIndexTimeoutSeconds 
     * @param {Number} opts.errorWarnIntervalSeconds 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo}
     */
    this.orgApacheJackrabbitOakPluginsIndexAsyncIndexerService = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'leaseTimeOutMinutes': opts['leaseTimeOutMinutes'],
        'failingIndexTimeoutSeconds': opts['failingIndexTimeoutSeconds'],
        'errorWarnIntervalSeconds': opts['errorWarnIntervalSeconds'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'asyncConfigs': {
          value: opts['asyncConfigs'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.AsyncIndexerService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.disabled 
     * @param {Boolean} opts.debug 
     * @param {String} opts.localIndexDir 
     * @param {Boolean} opts.enableOpenIndexAsync 
     * @param {Number} opts.threadPoolSize 
     * @param {Boolean} opts.prefetchIndexFiles 
     * @param {Number} opts.extractedTextCacheSizeInMB 
     * @param {Number} opts.extractedTextCacheExpiryInSecs 
     * @param {Boolean} opts.alwaysUsePreExtractedCache 
     * @param {Number} opts.booleanClauseLimit 
     * @param {Boolean} opts.enableHybridIndexing 
     * @param {Number} opts.hybridQueueSize 
     * @param {Boolean} opts.disableStoredIndexDefinition 
     * @param {Boolean} opts.deletedBlobsCollectionEnabled 
     * @param {Number} opts.propIndexCleanerIntervalInSecs 
     * @param {Boolean} opts.enableSingleBlobIndexFiles 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo}
     */
    this.orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'disabled': opts['disabled'],
        'debug': opts['debug'],
        'localIndexDir': opts['localIndexDir'],
        'enableOpenIndexAsync': opts['enableOpenIndexAsync'],
        'threadPoolSize': opts['threadPoolSize'],
        'prefetchIndexFiles': opts['prefetchIndexFiles'],
        'extractedTextCacheSizeInMB': opts['extractedTextCacheSizeInMB'],
        'extractedTextCacheExpiryInSecs': opts['extractedTextCacheExpiryInSecs'],
        'alwaysUsePreExtractedCache': opts['alwaysUsePreExtractedCache'],
        'booleanClauseLimit': opts['booleanClauseLimit'],
        'enableHybridIndexing': opts['enableHybridIndexing'],
        'hybridQueueSize': opts['hybridQueueSize'],
        'disableStoredIndexDefinition': opts['disableStoredIndexDefinition'],
        'deletedBlobsCollectionEnabled': opts['deletedBlobsCollectionEnabled'],
        'propIndexCleanerIntervalInSecs': opts['propIndexCleanerIntervalInSecs'],
        'enableSingleBlobIndexFiles': opts['enableSingleBlobIndexFiles'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexProviderService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.solrHomePath 
     * @param {String} opts.solrCoreName 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo}
     */
    this.orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'solr.home.path': opts['solrHomePath'],
        'solr.core.name': opts['solrCoreName'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.EmbeddedSolrServerConfigurationProvider', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.enabled 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo}
     */
    this.orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'enabled': opts['enabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.NodeStateSolrServersObserverService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.pathDescField 
     * @param {String} opts.pathChildField 
     * @param {String} opts.pathParentField 
     * @param {String} opts.pathExactField 
     * @param {String} opts.catchAllField 
     * @param {String} opts.collapsedPathField 
     * @param {String} opts.pathDepthField 
     * @param {String} opts.commitPolicy 
     * @param {Number} opts.rows 
     * @param {Boolean} opts.pathRestrictions 
     * @param {Boolean} opts.propertyRestrictions 
     * @param {Boolean} opts.primarytypesRestrictions 
     * @param {Array.<String>} opts.ignoredProperties 
     * @param {Array.<String>} opts.usedProperties 
     * @param {Array.<String>} opts.typeMappings 
     * @param {Array.<String>} opts.propertyMappings 
     * @param {Boolean} opts.collapseJcrcontentNodes 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo}
     */
    this.orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'path.desc.field': opts['pathDescField'],
        'path.child.field': opts['pathChildField'],
        'path.parent.field': opts['pathParentField'],
        'path.exact.field': opts['pathExactField'],
        'catch.all.field': opts['catchAllField'],
        'collapsed.path.field': opts['collapsedPathField'],
        'path.depth.field': opts['pathDepthField'],
        'commit.policy': opts['commitPolicy'],
        'rows': opts['rows'],
        'path.restrictions': opts['pathRestrictions'],
        'property.restrictions': opts['propertyRestrictions'],
        'primarytypes.restrictions': opts['primarytypesRestrictions'],
        'collapse.jcrcontent.nodes': opts['collapseJcrcontentNodes'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'ignored.properties': {
          value: opts['ignoredProperties'],
          collectionFormat: 'multi'
        },
        'used.properties': {
          value: opts['usedProperties'],
          collectionFormat: 'multi'
        },
        'type.mappings': {
          value: opts['typeMappings'],
          collectionFormat: 'multi'
        },
        'property.mappings': {
          value: opts['propertyMappings'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.OakSolrConfigurationProviderService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.solrHttpUrl 
     * @param {String} opts.solrZkHost 
     * @param {String} opts.solrCollection 
     * @param {Number} opts.solrSocketTimeout 
     * @param {Number} opts.solrConnectionTimeout 
     * @param {Number} opts.solrShardsNo 
     * @param {Number} opts.solrReplicationFactor 
     * @param {String} opts.solrConfDir 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo}
     */
    this.orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'solr.http.url': opts['solrHttpUrl'],
        'solr.zk.host': opts['solrZkHost'],
        'solr.collection': opts['solrCollection'],
        'solr.socket.timeout': opts['solrSocketTimeout'],
        'solr.connection.timeout': opts['solrConnectionTimeout'],
        'solr.shards.no': opts['solrShardsNo'],
        'solr.replication.factor': opts['solrReplicationFactor'],
        'solr.conf.dir': opts['solrConfDir'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.RemoteSolrServerConfigurationProvider', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.queryAggregation 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo}
     */
    this.orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'query.aggregation': opts['queryAggregation'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrQueryIndexProviderService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.serverType 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo}
     */
    this.orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'server.type': opts['serverType'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrServerProviderService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.providerType 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo}
     */
    this.orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'providerType': opts['providerType'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.metric.StatisticsProviderFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakPluginsObservationChangeCollectorProvider operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsObservationChangeCollectorProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.maxItems 
     * @param {Number} opts.maxPathDepth 
     * @param {Boolean} opts.enabled 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsObservationChangeCollectorProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo}
     */
    this.orgApacheJackrabbitOakPluginsObservationChangeCollectorProvider = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'maxItems': opts['maxItems'],
        'maxPathDepth': opts['maxPathDepth'],
        'enabled': opts['enabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.observation.ChangeCollectorProvider', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakQueryQueryEngineSettingsService operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakQueryQueryEngineSettingsServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.queryLimitInMemory 
     * @param {Number} opts.queryLimitReads 
     * @param {Boolean} opts.queryFailTraversal 
     * @param {Boolean} opts.fastQuerySize 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakQueryQueryEngineSettingsServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo}
     */
    this.orgApacheJackrabbitOakQueryQueryEngineSettingsService = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'queryLimitInMemory': opts['queryLimitInMemory'],
        'queryLimitReads': opts['queryLimitReads'],
        'queryFailTraversal': opts['queryFailTraversal'],
        'fastQuerySize': opts['fastQuerySize'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.query.QueryEngineSettingsService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.orgApacheJackrabbitOakAuthenticationAppName 
     * @param {String} opts.orgApacheJackrabbitOakAuthenticationConfigSpiName 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo}
     */
    this.orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'org.apache.jackrabbit.oak.authentication.appName': opts['orgApacheJackrabbitOakAuthenticationAppName'],
        'org.apache.jackrabbit.oak.authentication.configSpiName': opts['orgApacheJackrabbitOakAuthenticationConfigSpiName'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.AuthenticationConfigurationImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.providerName 
     * @param {String} opts.hostName 
     * @param {Number} opts.hostPort 
     * @param {Boolean} opts.hostSsl 
     * @param {Boolean} opts.hostTls 
     * @param {Boolean} opts.hostNoCertCheck 
     * @param {String} opts.bindDn 
     * @param {String} opts.bindPassword 
     * @param {String} opts.searchTimeout 
     * @param {Number} opts.adminPoolMaxActive 
     * @param {Boolean} opts.adminPoolLookupOnValidate 
     * @param {Number} opts.userPoolMaxActive 
     * @param {Boolean} opts.userPoolLookupOnValidate 
     * @param {String} opts.userBaseDN 
     * @param {Array.<String>} opts.userObjectclass 
     * @param {String} opts.userIdAttribute 
     * @param {String} opts.userExtraFilter 
     * @param {Boolean} opts.userMakeDnPath 
     * @param {String} opts.groupBaseDN 
     * @param {Array.<String>} opts.groupObjectclass 
     * @param {String} opts.groupNameAttribute 
     * @param {String} opts.groupExtraFilter 
     * @param {Boolean} opts.groupMakeDnPath 
     * @param {String} opts.groupMemberAttribute 
     * @param {Boolean} opts.useUidForExtId 
     * @param {Array.<String>} opts.customattributes 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo}
     */
    this.orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'provider.name': opts['providerName'],
        'host.name': opts['hostName'],
        'host.port': opts['hostPort'],
        'host.ssl': opts['hostSsl'],
        'host.tls': opts['hostTls'],
        'host.noCertCheck': opts['hostNoCertCheck'],
        'bind.dn': opts['bindDn'],
        'bind.password': opts['bindPassword'],
        'searchTimeout': opts['searchTimeout'],
        'adminPool.maxActive': opts['adminPoolMaxActive'],
        'adminPool.lookupOnValidate': opts['adminPoolLookupOnValidate'],
        'userPool.maxActive': opts['userPoolMaxActive'],
        'userPool.lookupOnValidate': opts['userPoolLookupOnValidate'],
        'user.baseDN': opts['userBaseDN'],
        'user.idAttribute': opts['userIdAttribute'],
        'user.extraFilter': opts['userExtraFilter'],
        'user.makeDnPath': opts['userMakeDnPath'],
        'group.baseDN': opts['groupBaseDN'],
        'group.nameAttribute': opts['groupNameAttribute'],
        'group.extraFilter': opts['groupExtraFilter'],
        'group.makeDnPath': opts['groupMakeDnPath'],
        'group.memberAttribute': opts['groupMemberAttribute'],
        'useUidForExtId': opts['useUidForExtId'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'user.objectclass': {
          value: opts['userObjectclass'],
          collectionFormat: 'multi'
        },
        'group.objectclass': {
          value: opts['groupObjectclass'],
          collectionFormat: 'multi'
        },
        'customattributes': {
          value: opts['customattributes'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.ldap.impl.LdapIdentityProvider', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.tokenExpiration 
     * @param {String} opts.tokenLength 
     * @param {Boolean} opts.tokenRefresh 
     * @param {Number} opts.tokenCleanupThreshold 
     * @param {String} opts.passwordHashAlgorithm 
     * @param {Number} opts.passwordHashIterations 
     * @param {Number} opts.passwordSaltSize 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo}
     */
    this.orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'tokenExpiration': opts['tokenExpiration'],
        'tokenLength': opts['tokenLength'],
        'tokenRefresh': opts['tokenRefresh'],
        'tokenCleanupThreshold': opts['tokenCleanupThreshold'],
        'passwordHashAlgorithm': opts['passwordHashAlgorithm'],
        'passwordHashIterations': opts['passwordHashIterations'],
        'passwordSaltSize': opts['passwordSaltSize'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.token.TokenConfigurationImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.permissionsJr2 
     * @param {String} opts.importBehavior 
     * @param {Array.<String>} opts.readPaths 
     * @param {Array.<String>} opts.administrativePrincipals 
     * @param {Number} opts.configurationRanking 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo}
     */
    this.orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'permissionsJr2': opts['permissionsJr2'],
        'importBehavior': opts['importBehavior'],
        'configurationRanking': opts['configurationRanking'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'readPaths': {
          value: opts['readPaths'],
          collectionFormat: 'multi'
        },
        'administrativePrincipals': {
          value: opts['administrativePrincipals'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.security.authorization.AuthorizationConfigurationImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.requiredServicePids 
     * @param {String} opts.authorizationCompositionType 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo}
     */
    this.orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'authorizationCompositionType': opts['authorizationCompositionType'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'requiredServicePids': {
          value: opts['requiredServicePids'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.security.internal.SecurityProviderRegistration', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.length 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo}
     */
    this.orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'length': opts['length'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.security.user.RandomAuthorizableNodeName', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakSecurityUserUserConfigurationImpl operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakSecurityUserUserConfigurationImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.usersPath 
     * @param {String} opts.groupsPath 
     * @param {String} opts.systemRelativePath 
     * @param {Number} opts.defaultDepth 
     * @param {String} opts.importBehavior 
     * @param {String} opts.passwordHashAlgorithm 
     * @param {Number} opts.passwordHashIterations 
     * @param {Number} opts.passwordSaltSize 
     * @param {Boolean} opts.omitAdminPw 
     * @param {Boolean} opts.supportAutoSave 
     * @param {Number} opts.passwordMaxAge 
     * @param {Boolean} opts.initialPasswordChange 
     * @param {Number} opts.passwordHistorySize 
     * @param {Boolean} opts.passwordExpiryForAdmin 
     * @param {Number} opts.cacheExpiration 
     * @param {Boolean} opts.enableRFC7613UsercaseMappedProfile 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakSecurityUserUserConfigurationImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo}
     */
    this.orgApacheJackrabbitOakSecurityUserUserConfigurationImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'usersPath': opts['usersPath'],
        'groupsPath': opts['groupsPath'],
        'systemRelativePath': opts['systemRelativePath'],
        'defaultDepth': opts['defaultDepth'],
        'importBehavior': opts['importBehavior'],
        'passwordHashAlgorithm': opts['passwordHashAlgorithm'],
        'passwordHashIterations': opts['passwordHashIterations'],
        'passwordSaltSize': opts['passwordSaltSize'],
        'omitAdminPw': opts['omitAdminPw'],
        'supportAutoSave': opts['supportAutoSave'],
        'passwordMaxAge': opts['passwordMaxAge'],
        'initialPasswordChange': opts['initialPasswordChange'],
        'passwordHistorySize': opts['passwordHistorySize'],
        'passwordExpiryForAdmin': opts['passwordExpiryForAdmin'],
        'cacheExpiration': opts['cacheExpiration'],
        'enableRFC7613UsercaseMappedProfile': opts['enableRFC7613UsercaseMappedProfile'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.security.user.UserConfigurationImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.accountName 
     * @param {String} opts.containerName 
     * @param {String} opts.accessKey 
     * @param {String} opts.rootPath 
     * @param {String} opts.connectionURL 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo}
     */
    this.orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'accountName': opts['accountName'],
        'containerName': opts['containerName'],
        'accessKey': opts['accessKey'],
        'rootPath': opts['rootPath'],
        'connectionURL': opts['connectionURL'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.segment.azure.AzureSegmentStoreService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakSegmentSegmentNodeStoreFactory operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.repositoryHome 
     * @param {String} opts.tarmkMode 
     * @param {Number} opts.tarmkSize 
     * @param {Number} opts.segmentCacheSize 
     * @param {Number} opts.stringCacheSize 
     * @param {Number} opts.templateCacheSize 
     * @param {Number} opts.stringDeduplicationCacheSize 
     * @param {Number} opts.templateDeduplicationCacheSize 
     * @param {Number} opts.nodeDeduplicationCacheSize 
     * @param {Boolean} opts.pauseCompaction 
     * @param {Number} opts.compactionRetryCount 
     * @param {Number} opts.compactionForceTimeout 
     * @param {Number} opts.compactionSizeDeltaEstimation 
     * @param {Boolean} opts.compactionDisableEstimation 
     * @param {Number} opts.compactionRetainedGenerations 
     * @param {Number} opts.compactionMemoryThreshold 
     * @param {Number} opts.compactionProgressLog 
     * @param {Boolean} opts.standby 
     * @param {Boolean} opts.customBlobStore 
     * @param {Boolean} opts.customSegmentStore 
     * @param {Boolean} opts.splitPersistence 
     * @param {String} opts.repositoryBackupDir 
     * @param {Number} opts.blobGcMaxAgeInSecs 
     * @param {Number} opts.blobTrackSnapshotIntervalInSecs 
     * @param {String} opts.role 
     * @param {Boolean} opts.registerDescriptors 
     * @param {Boolean} opts.dispatchChanges 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo}
     */
    this.orgApacheJackrabbitOakSegmentSegmentNodeStoreFactory = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'repository.home': opts['repositoryHome'],
        'tarmk.mode': opts['tarmkMode'],
        'tarmk.size': opts['tarmkSize'],
        'segmentCache.size': opts['segmentCacheSize'],
        'stringCache.size': opts['stringCacheSize'],
        'templateCache.size': opts['templateCacheSize'],
        'stringDeduplicationCache.size': opts['stringDeduplicationCacheSize'],
        'templateDeduplicationCache.size': opts['templateDeduplicationCacheSize'],
        'nodeDeduplicationCache.size': opts['nodeDeduplicationCacheSize'],
        'pauseCompaction': opts['pauseCompaction'],
        'compaction.retryCount': opts['compactionRetryCount'],
        'compaction.force.timeout': opts['compactionForceTimeout'],
        'compaction.sizeDeltaEstimation': opts['compactionSizeDeltaEstimation'],
        'compaction.disableEstimation': opts['compactionDisableEstimation'],
        'compaction.retainedGenerations': opts['compactionRetainedGenerations'],
        'compaction.memoryThreshold': opts['compactionMemoryThreshold'],
        'compaction.progressLog': opts['compactionProgressLog'],
        'standby': opts['standby'],
        'customBlobStore': opts['customBlobStore'],
        'customSegmentStore': opts['customSegmentStore'],
        'splitPersistence': opts['splitPersistence'],
        'repository.backup.dir': opts['repositoryBackupDir'],
        'blobGcMaxAgeInSecs': opts['blobGcMaxAgeInSecs'],
        'blobTrackSnapshotIntervalInSecs': opts['blobTrackSnapshotIntervalInSecs'],
        'role': opts['role'],
        'registerDescriptors': opts['registerDescriptors'],
        'dispatchChanges': opts['dispatchChanges'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.commitsTrackerWriterGroups 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo}
     */
    this.orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'commitsTrackerWriterGroups': {
          value: opts['commitsTrackerWriterGroups'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreMonitorService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakSegmentSegmentNodeStoreService operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakSegmentSegmentNodeStoreServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.repositoryHome 
     * @param {String} opts.tarmkMode 
     * @param {Number} opts.tarmkSize 
     * @param {Number} opts.segmentCacheSize 
     * @param {Number} opts.stringCacheSize 
     * @param {Number} opts.templateCacheSize 
     * @param {Number} opts.stringDeduplicationCacheSize 
     * @param {Number} opts.templateDeduplicationCacheSize 
     * @param {Number} opts.nodeDeduplicationCacheSize 
     * @param {Boolean} opts.pauseCompaction 
     * @param {Number} opts.compactionRetryCount 
     * @param {Number} opts.compactionForceTimeout 
     * @param {Number} opts.compactionSizeDeltaEstimation 
     * @param {Boolean} opts.compactionDisableEstimation 
     * @param {Number} opts.compactionRetainedGenerations 
     * @param {Number} opts.compactionMemoryThreshold 
     * @param {Number} opts.compactionProgressLog 
     * @param {Boolean} opts.standby 
     * @param {Boolean} opts.customBlobStore 
     * @param {Boolean} opts.customSegmentStore 
     * @param {Boolean} opts.splitPersistence 
     * @param {String} opts.repositoryBackupDir 
     * @param {Number} opts.blobGcMaxAgeInSecs 
     * @param {Number} opts.blobTrackSnapshotIntervalInSecs 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakSegmentSegmentNodeStoreServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo}
     */
    this.orgApacheJackrabbitOakSegmentSegmentNodeStoreService = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'repository.home': opts['repositoryHome'],
        'tarmk.mode': opts['tarmkMode'],
        'tarmk.size': opts['tarmkSize'],
        'segmentCache.size': opts['segmentCacheSize'],
        'stringCache.size': opts['stringCacheSize'],
        'templateCache.size': opts['templateCacheSize'],
        'stringDeduplicationCache.size': opts['stringDeduplicationCacheSize'],
        'templateDeduplicationCache.size': opts['templateDeduplicationCacheSize'],
        'nodeDeduplicationCache.size': opts['nodeDeduplicationCacheSize'],
        'pauseCompaction': opts['pauseCompaction'],
        'compaction.retryCount': opts['compactionRetryCount'],
        'compaction.force.timeout': opts['compactionForceTimeout'],
        'compaction.sizeDeltaEstimation': opts['compactionSizeDeltaEstimation'],
        'compaction.disableEstimation': opts['compactionDisableEstimation'],
        'compaction.retainedGenerations': opts['compactionRetainedGenerations'],
        'compaction.memoryThreshold': opts['compactionMemoryThreshold'],
        'compaction.progressLog': opts['compactionProgressLog'],
        'standby': opts['standby'],
        'customBlobStore': opts['customBlobStore'],
        'customSegmentStore': opts['customSegmentStore'],
        'splitPersistence': opts['splitPersistence'],
        'repository.backup.dir': opts['repositoryBackupDir'],
        'blobGcMaxAgeInSecs': opts['blobGcMaxAgeInSecs'],
        'blobTrackSnapshotIntervalInSecs': opts['blobTrackSnapshotIntervalInSecs'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.orgApacheSlingInstallerConfigurationPersist 
     * @param {String} opts.mode 
     * @param {Number} opts.port 
     * @param {String} opts.primaryHost 
     * @param {Number} opts.interval 
     * @param {Array.<String>} opts.primaryAllowedClientIpRanges 
     * @param {Boolean} opts.secure 
     * @param {Number} opts.standbyReadtimeout 
     * @param {Boolean} opts.standbyAutoclean 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo}
     */
    this.orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'org.apache.sling.installer.configuration.persist': opts['orgApacheSlingInstallerConfigurationPersist'],
        'mode': opts['mode'],
        'port': opts['port'],
        'primary.host': opts['primaryHost'],
        'interval': opts['interval'],
        'secure': opts['secure'],
        'standby.readtimeout': opts['standbyReadtimeout'],
        'standby.autoclean': opts['standbyAutoclean'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'primary.allowed-client-ip-ranges': {
          value: opts['primaryAllowedClientIpRanges'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.segment.standby.store.StandbyStoreService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.handlerName 
     * @param {String} opts.userExpirationTime 
     * @param {Array.<String>} opts.userAutoMembership 
     * @param {Array.<String>} opts.userPropertyMapping 
     * @param {String} opts.userPathPrefix 
     * @param {String} opts.userMembershipExpTime 
     * @param {Number} opts.userMembershipNestingDepth 
     * @param {Boolean} opts.userDynamicMembership 
     * @param {Boolean} opts.userDisableMissing 
     * @param {String} opts.groupExpirationTime 
     * @param {Array.<String>} opts.groupAutoMembership 
     * @param {Array.<String>} opts.groupPropertyMapping 
     * @param {String} opts.groupPathPrefix 
     * @param {Boolean} opts.enableRFC7613UsercaseMappedProfile 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo}
     */
    this.orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'handler.name': opts['handlerName'],
        'user.expirationTime': opts['userExpirationTime'],
        'user.pathPrefix': opts['userPathPrefix'],
        'user.membershipExpTime': opts['userMembershipExpTime'],
        'user.membershipNestingDepth': opts['userMembershipNestingDepth'],
        'user.dynamicMembership': opts['userDynamicMembership'],
        'user.disableMissing': opts['userDisableMissing'],
        'group.expirationTime': opts['groupExpirationTime'],
        'group.pathPrefix': opts['groupPathPrefix'],
        'enableRFC7613UsercaseMappedProfile': opts['enableRFC7613UsercaseMappedProfile'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'user.autoMembership': {
          value: opts['userAutoMembership'],
          collectionFormat: 'multi'
        },
        'user.propertyMapping': {
          value: opts['userPropertyMapping'],
          collectionFormat: 'multi'
        },
        'group.autoMembership': {
          value: opts['groupAutoMembership'],
          collectionFormat: 'multi'
        },
        'group.propertyMapping': {
          value: opts['groupPropertyMapping'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.DefaultSyncHandler', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.jaasRanking 
     * @param {String} opts.jaasControlFlag 
     * @param {String} opts.jaasRealmName 
     * @param {String} opts.idpName 
     * @param {String} opts.syncHandlerName 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo}
     */
    this.orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'jaas.ranking': opts['jaasRanking'],
        'jaas.controlFlag': opts['jaasControlFlag'],
        'jaas.realmName': opts['jaasRealmName'],
        'idp.name': opts['idpName'],
        'sync.handlerName': opts['syncHandlerName'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.ExternalLoginModuleFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.protectExternalId 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo}
     */
    this.orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'protectExternalId': opts['protectExternalId'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.principal.ExternalPrincipalConfiguration', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.cugSupportedPaths 
     * @param {Boolean} opts.cugEnabled 
     * @param {Number} opts.configurationRanking 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo}
     */
    this.orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'cugEnabled': opts['cugEnabled'],
        'configurationRanking': opts['configurationRanking'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'cugSupportedPaths': {
          value: opts['cugSupportedPaths'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugConfiguration', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.principalNames 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo}
     */
    this.orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'principalNames': {
          value: opts['principalNames'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugExcludeImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.enabledActions 
     * @param {Array.<String>} opts.userPrivilegeNames 
     * @param {Array.<String>} opts.groupPrivilegeNames 
     * @param {String} opts.constraint 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo}
     */
    this.orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'enabledActions': opts['enabledActions'],
        'constraint': opts['constraint'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'userPrivilegeNames': {
          value: opts['userPrivilegeNames'],
          collectionFormat: 'multi'
        },
        'groupPrivilegeNames': {
          value: opts['groupPrivilegeNames'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.user.action.DefaultAuthorizableActionProvider', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitVaultPackagingImplPackagingImpl operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitVaultPackagingImplPackagingImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.packageRoots 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitVaultPackagingImplPackagingImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo}
     */
    this.orgApacheJackrabbitVaultPackagingImplPackagingImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'packageRoots': {
          value: opts['packageRoots'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.vault.packaging.impl.PackagingImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.homePath 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo}
     */
    this.orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'homePath': opts['homePath'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.vault.packaging.registry.impl.FSPackageRegistry', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingAuthCoreImplLogoutServlet operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingAuthCoreImplLogoutServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingAuthCoreImplLogoutServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.slingServletMethods 
     * @param {String} opts.slingServletPaths 
     * @param {module:api/ConfigmgrApi~orgApacheSlingAuthCoreImplLogoutServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingAuthCoreImplLogoutServletInfo}
     */
    this.orgApacheSlingAuthCoreImplLogoutServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'sling.servlet.paths': opts['slingServletPaths'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'sling.servlet.methods': {
          value: opts['slingServletMethods'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingAuthCoreImplLogoutServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.auth.core.impl.LogoutServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingCaconfigImplConfigurationBindingsValueProvider operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingCaconfigImplConfigurationBindingsValueProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.enabled 
     * @param {module:api/ConfigmgrApi~orgApacheSlingCaconfigImplConfigurationBindingsValueProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo}
     */
    this.orgApacheSlingCaconfigImplConfigurationBindingsValueProvider = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'enabled': opts['enabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationBindingsValueProvider', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingCaconfigImplConfigurationResolverImpl operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingCaconfigImplConfigurationResolverImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingCaconfigImplConfigurationResolverImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.configBucketNames 
     * @param {module:api/ConfigmgrApi~orgApacheSlingCaconfigImplConfigurationResolverImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingCaconfigImplConfigurationResolverImplInfo}
     */
    this.orgApacheSlingCaconfigImplConfigurationResolverImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'configBucketNames': {
          value: opts['configBucketNames'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingCaconfigImplConfigurationResolverImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationResolverImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.enabled 
     * @param {Array.<String>} opts.configPropertyInheritancePropertyNames 
     * @param {module:api/ConfigmgrApi~orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo}
     */
    this.orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'enabled': opts['enabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'configPropertyInheritancePropertyNames': {
          value: opts['configPropertyInheritancePropertyNames'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationInheritanceStrategy', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.enabled 
     * @param {module:api/ConfigmgrApi~orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo}
     */
    this.orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'enabled': opts['enabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationPersistenceStrategy', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.description 
     * @param {Array.<String>} opts.overrides 
     * @param {Boolean} opts.enabled 
     * @param {Number} opts.serviceRanking 
     * @param {module:api/ConfigmgrApi~orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo}
     */
    this.orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'description': opts['description'],
        'enabled': opts['enabled'],
        'service.ranking': opts['serviceRanking'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'overrides': {
          value: opts['overrides'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.caconfig.impl.override.OsgiConfigurationOverrideProvider', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.enabled 
     * @param {Number} opts.serviceRanking 
     * @param {module:api/ConfigmgrApi~orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo}
     */
    this.orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'enabled': opts['enabled'],
        'service.ranking': opts['serviceRanking'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.caconfig.impl.override.SystemPropertyConfigurationOverrideProvider', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingCaconfigManagementImplConfigurationManagementSetti operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingCaconfigManagementImplConfigurationManagementSettiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.ignorePropertyNameRegex 
     * @param {Array.<String>} opts.configCollectionPropertiesResourceNames 
     * @param {module:api/ConfigmgrApi~orgApacheSlingCaconfigManagementImplConfigurationManagementSettiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo}
     */
    this.orgApacheSlingCaconfigManagementImplConfigurationManagementSetti = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'ignorePropertyNameRegex': {
          value: opts['ignorePropertyNameRegex'],
          collectionFormat: 'multi'
        },
        'configCollectionPropertiesResourceNames': {
          value: opts['configCollectionPropertiesResourceNames'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.caconfig.management.impl.ConfigurationManagementSettingsImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.enabled 
     * @param {String} opts.configPath 
     * @param {Array.<String>} opts.fallbackPaths 
     * @param {Array.<String>} opts.configCollectionInheritancePropertyNames 
     * @param {module:api/ConfigmgrApi~orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo}
     */
    this.orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'enabled': opts['enabled'],
        'configPath': opts['configPath'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'fallbackPaths': {
          value: opts['fallbackPaths'],
          collectionFormat: 'multi'
        },
        'configCollectionInheritancePropertyNames': {
          value: opts['configCollectionInheritancePropertyNames'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultConfigurationResourceResolvingStrategy', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.enabled 
     * @param {Array.<String>} opts.configRefResourceNames 
     * @param {Array.<String>} opts.configRefPropertyNames 
     * @param {Number} opts.serviceRanking 
     * @param {module:api/ConfigmgrApi~orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo}
     */
    this.orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'enabled': opts['enabled'],
        'service.ranking': opts['serviceRanking'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'configRefResourceNames': {
          value: opts['configRefResourceNames'],
          collectionFormat: 'multi'
        },
        'configRefPropertyNames': {
          value: opts['configRefPropertyNames'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultContextPathStrategy', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingCommonsHtmlInternalTagsoupHtmlParser operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingCommonsHtmlInternalTagsoupHtmlParserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.parserFeatures 
     * @param {module:api/ConfigmgrApi~orgApacheSlingCommonsHtmlInternalTagsoupHtmlParserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo}
     */
    this.orgApacheSlingCommonsHtmlInternalTagsoupHtmlParser = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'parser.features': {
          value: opts['parserFeatures'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.commons.html.internal.TagsoupHtmlParser', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingCommonsLogLogManager operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingCommonsLogLogManagerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingCommonsLogLogManagerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.orgApacheSlingCommonsLogLevel 
     * @param {String} opts.orgApacheSlingCommonsLogFile 
     * @param {Number} opts.orgApacheSlingCommonsLogFileNumber 
     * @param {String} opts.orgApacheSlingCommonsLogFileSize 
     * @param {String} opts.orgApacheSlingCommonsLogPattern 
     * @param {String} opts.orgApacheSlingCommonsLogConfigurationFile 
     * @param {Boolean} opts.orgApacheSlingCommonsLogPackagingDataEnabled 
     * @param {Number} opts.orgApacheSlingCommonsLogMaxCallerDataDepth 
     * @param {Number} opts.orgApacheSlingCommonsLogMaxOldFileCountInDump 
     * @param {Number} opts.orgApacheSlingCommonsLogNumOfLines 
     * @param {module:api/ConfigmgrApi~orgApacheSlingCommonsLogLogManagerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingCommonsLogLogManagerInfo}
     */
    this.orgApacheSlingCommonsLogLogManager = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'org.apache.sling.commons.log.level': opts['orgApacheSlingCommonsLogLevel'],
        'org.apache.sling.commons.log.file': opts['orgApacheSlingCommonsLogFile'],
        'org.apache.sling.commons.log.file.number': opts['orgApacheSlingCommonsLogFileNumber'],
        'org.apache.sling.commons.log.file.size': opts['orgApacheSlingCommonsLogFileSize'],
        'org.apache.sling.commons.log.pattern': opts['orgApacheSlingCommonsLogPattern'],
        'org.apache.sling.commons.log.configurationFile': opts['orgApacheSlingCommonsLogConfigurationFile'],
        'org.apache.sling.commons.log.packagingDataEnabled': opts['orgApacheSlingCommonsLogPackagingDataEnabled'],
        'org.apache.sling.commons.log.maxCallerDataDepth': opts['orgApacheSlingCommonsLogMaxCallerDataDepth'],
        'org.apache.sling.commons.log.maxOldFileCountInDump': opts['orgApacheSlingCommonsLogMaxOldFileCountInDump'],
        'org.apache.sling.commons.log.numOfLines': opts['orgApacheSlingCommonsLogNumOfLines'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingCommonsLogLogManagerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.commons.log.LogManager', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingCommonsLogLogManagerFactoryConfig operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingCommonsLogLogManagerFactoryConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.orgApacheSlingCommonsLogLevel 
     * @param {String} opts.orgApacheSlingCommonsLogFile 
     * @param {String} opts.orgApacheSlingCommonsLogPattern 
     * @param {Array.<String>} opts.orgApacheSlingCommonsLogNames 
     * @param {Boolean} opts.orgApacheSlingCommonsLogAdditiv 
     * @param {module:api/ConfigmgrApi~orgApacheSlingCommonsLogLogManagerFactoryConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo}
     */
    this.orgApacheSlingCommonsLogLogManagerFactoryConfig = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'org.apache.sling.commons.log.level': opts['orgApacheSlingCommonsLogLevel'],
        'org.apache.sling.commons.log.file': opts['orgApacheSlingCommonsLogFile'],
        'org.apache.sling.commons.log.pattern': opts['orgApacheSlingCommonsLogPattern'],
        'org.apache.sling.commons.log.additiv': opts['orgApacheSlingCommonsLogAdditiv'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'org.apache.sling.commons.log.names': {
          value: opts['orgApacheSlingCommonsLogNames'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.config', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingCommonsLogLogManagerFactoryWriter operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingCommonsLogLogManagerFactoryWriterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.orgApacheSlingCommonsLogFile 
     * @param {Number} opts.orgApacheSlingCommonsLogFileNumber 
     * @param {String} opts.orgApacheSlingCommonsLogFileSize 
     * @param {Boolean} opts.orgApacheSlingCommonsLogFileBuffered 
     * @param {module:api/ConfigmgrApi~orgApacheSlingCommonsLogLogManagerFactoryWriterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo}
     */
    this.orgApacheSlingCommonsLogLogManagerFactoryWriter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'org.apache.sling.commons.log.file': opts['orgApacheSlingCommonsLogFile'],
        'org.apache.sling.commons.log.file.number': opts['orgApacheSlingCommonsLogFileNumber'],
        'org.apache.sling.commons.log.file.size': opts['orgApacheSlingCommonsLogFileSize'],
        'org.apache.sling.commons.log.file.buffered': opts['orgApacheSlingCommonsLogFileBuffered'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.writer', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingCommonsMetricsInternalLogReporter operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingCommonsMetricsInternalLogReporterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingCommonsMetricsInternalLogReporterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.period 
     * @param {String} opts.timeUnit 
     * @param {String} opts.level 
     * @param {String} opts.loggerName 
     * @param {String} opts.prefix 
     * @param {String} opts.pattern 
     * @param {String} opts.registryName 
     * @param {module:api/ConfigmgrApi~orgApacheSlingCommonsMetricsInternalLogReporterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingCommonsMetricsInternalLogReporterInfo}
     */
    this.orgApacheSlingCommonsMetricsInternalLogReporter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'period': opts['period'],
        'timeUnit': opts['timeUnit'],
        'level': opts['level'],
        'loggerName': opts['loggerName'],
        'prefix': opts['prefix'],
        'pattern': opts['pattern'],
        'registryName': opts['registryName'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingCommonsMetricsInternalLogReporterInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.commons.metrics.internal.LogReporter', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.datasources 
     * @param {Number} opts.step 
     * @param {Array.<String>} opts.archives 
     * @param {String} opts.path 
     * @param {module:api/ConfigmgrApi~orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo}
     */
    this.orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'step': opts['step'],
        'path': opts['path'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'datasources': {
          value: opts['datasources'],
          collectionFormat: 'multi'
        },
        'archives': {
          value: opts['archives'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.commons.metrics.rrd4j.impl.CodahaleMetricsReporter', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingCommonsMimeInternalMimeTypeServiceImpl operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingCommonsMimeInternalMimeTypeServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.mimeTypes 
     * @param {module:api/ConfigmgrApi~orgApacheSlingCommonsMimeInternalMimeTypeServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo}
     */
    this.orgApacheSlingCommonsMimeInternalMimeTypeServiceImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'mime.types': {
          value: opts['mimeTypes'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.commons.mime.internal.MimeTypeServiceImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingCommonsSchedulerImplQuartzScheduler operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingCommonsSchedulerImplQuartzSchedulerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.poolName 
     * @param {Array.<String>} opts.allowedPoolNames 
     * @param {Boolean} opts.schedulerUseleaderforsingle 
     * @param {Array.<String>} opts.metricsFilters 
     * @param {Number} opts.slowThresholdMillis 
     * @param {module:api/ConfigmgrApi~orgApacheSlingCommonsSchedulerImplQuartzSchedulerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo}
     */
    this.orgApacheSlingCommonsSchedulerImplQuartzScheduler = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'poolName': opts['poolName'],
        'scheduler.useleaderforsingle': opts['schedulerUseleaderforsingle'],
        'slowThresholdMillis': opts['slowThresholdMillis'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'allowedPoolNames': {
          value: opts['allowedPoolNames'],
          collectionFormat: 'multi'
        },
        'metrics.filters': {
          value: opts['metricsFilters'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.commons.scheduler.impl.QuartzScheduler', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingCommonsSchedulerImplSchedulerHealthCheck operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingCommonsSchedulerImplSchedulerHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.maxQuartzJobDurationAcceptable 
     * @param {module:api/ConfigmgrApi~orgApacheSlingCommonsSchedulerImplSchedulerHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo}
     */
    this.orgApacheSlingCommonsSchedulerImplSchedulerHealthCheck = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'max.quartzJob.duration.acceptable': opts['maxQuartzJobDurationAcceptable'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.commons.scheduler.impl.SchedulerHealthCheck', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {Number} opts.minPoolSize 
     * @param {Number} opts.maxPoolSize 
     * @param {Number} opts.queueSize 
     * @param {Number} opts.maxThreadAge 
     * @param {Number} opts.keepAliveTime 
     * @param {String} opts.blockPolicy 
     * @param {Boolean} opts.shutdownGraceful 
     * @param {Boolean} opts.daemon 
     * @param {Number} opts.shutdownWaitTime 
     * @param {String} opts.priority 
     * @param {module:api/ConfigmgrApi~orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo}
     */
    this.orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'name': opts['name'],
        'minPoolSize': opts['minPoolSize'],
        'maxPoolSize': opts['maxPoolSize'],
        'queueSize': opts['queueSize'],
        'maxThreadAge': opts['maxThreadAge'],
        'keepAliveTime': opts['keepAliveTime'],
        'blockPolicy': opts['blockPolicy'],
        'shutdownGraceful': opts['shutdownGraceful'],
        'daemon': opts['daemon'],
        'shutdownWaitTime': opts['shutdownWaitTime'],
        'priority': opts['priority'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.commons.threads.impl.DefaultThreadPool.factory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDatasourceDataSourceFactory operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDatasourceDataSourceFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDatasourceDataSourceFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.datasourceName 
     * @param {String} opts.datasourceSvcPropName 
     * @param {String} opts.driverClassName 
     * @param {String} opts.url 
     * @param {String} opts.username 
     * @param {String} opts.password 
     * @param {String} opts.defaultAutoCommit 
     * @param {String} opts.defaultReadOnly 
     * @param {String} opts.defaultTransactionIsolation 
     * @param {String} opts.defaultCatalog 
     * @param {Number} opts.maxActive 
     * @param {Number} opts.maxIdle 
     * @param {Number} opts.minIdle 
     * @param {Number} opts.initialSize 
     * @param {Number} opts.maxWait 
     * @param {Number} opts.maxAge 
     * @param {Boolean} opts.testOnBorrow 
     * @param {Boolean} opts.testOnReturn 
     * @param {Boolean} opts.testWhileIdle 
     * @param {String} opts.validationQuery 
     * @param {Number} opts.validationQueryTimeout 
     * @param {Number} opts.timeBetweenEvictionRunsMillis 
     * @param {Number} opts.minEvictableIdleTimeMillis 
     * @param {String} opts.connectionProperties 
     * @param {String} opts.initSQL 
     * @param {String} opts.jdbcInterceptors 
     * @param {Number} opts.validationInterval 
     * @param {Boolean} opts.logValidationErrors 
     * @param {Array.<String>} opts.datasourceSvcProperties 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDatasourceDataSourceFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDatasourceDataSourceFactoryInfo}
     */
    this.orgApacheSlingDatasourceDataSourceFactory = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'datasource.name': opts['datasourceName'],
        'datasource.svc.prop.name': opts['datasourceSvcPropName'],
        'driverClassName': opts['driverClassName'],
        'url': opts['url'],
        'username': opts['username'],
        'password': opts['password'],
        'defaultAutoCommit': opts['defaultAutoCommit'],
        'defaultReadOnly': opts['defaultReadOnly'],
        'defaultTransactionIsolation': opts['defaultTransactionIsolation'],
        'defaultCatalog': opts['defaultCatalog'],
        'maxActive': opts['maxActive'],
        'maxIdle': opts['maxIdle'],
        'minIdle': opts['minIdle'],
        'initialSize': opts['initialSize'],
        'maxWait': opts['maxWait'],
        'maxAge': opts['maxAge'],
        'testOnBorrow': opts['testOnBorrow'],
        'testOnReturn': opts['testOnReturn'],
        'testWhileIdle': opts['testWhileIdle'],
        'validationQuery': opts['validationQuery'],
        'validationQueryTimeout': opts['validationQueryTimeout'],
        'timeBetweenEvictionRunsMillis': opts['timeBetweenEvictionRunsMillis'],
        'minEvictableIdleTimeMillis': opts['minEvictableIdleTimeMillis'],
        'connectionProperties': opts['connectionProperties'],
        'initSQL': opts['initSQL'],
        'jdbcInterceptors': opts['jdbcInterceptors'],
        'validationInterval': opts['validationInterval'],
        'logValidationErrors': opts['logValidationErrors'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'datasource.svc.properties': {
          value: opts['datasourceSvcProperties'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingDatasourceDataSourceFactoryInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.datasource.DataSourceFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDatasourceJNDIDataSourceFactory operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDatasourceJNDIDataSourceFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.datasourceName 
     * @param {String} opts.datasourceSvcPropName 
     * @param {String} opts.datasourceJndiName 
     * @param {Array.<String>} opts.jndiProperties 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDatasourceJNDIDataSourceFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo}
     */
    this.orgApacheSlingDatasourceJNDIDataSourceFactory = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'datasource.name': opts['datasourceName'],
        'datasource.svc.prop.name': opts['datasourceSvcPropName'],
        'datasource.jndi.name': opts['datasourceJndiName'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'jndi.properties': {
          value: opts['jndiProperties'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.datasource.JNDIDataSourceFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDiscoveryOakConfig operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDiscoveryOakConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDiscoveryOakConfigInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.connectorPingTimeout 
     * @param {Number} opts.connectorPingInterval 
     * @param {Number} opts.discoveryLiteCheckInterval 
     * @param {Number} opts.clusterSyncServiceTimeout 
     * @param {Number} opts.clusterSyncServiceInterval 
     * @param {Boolean} opts.enableSyncToken 
     * @param {Number} opts.minEventDelay 
     * @param {Number} opts.socketConnectTimeout 
     * @param {Number} opts.soTimeout 
     * @param {Array.<String>} opts.topologyConnectorUrls 
     * @param {Array.<String>} opts.topologyConnectorWhitelist 
     * @param {Boolean} opts.autoStopLocalLoopEnabled 
     * @param {Boolean} opts.gzipConnectorRequestsEnabled 
     * @param {Boolean} opts.hmacEnabled 
     * @param {Boolean} opts.enableEncryption 
     * @param {String} opts.sharedKey 
     * @param {Number} opts.hmacSharedKeyTTL 
     * @param {String} opts.backoffStandbyFactor 
     * @param {String} opts.backoffStableFactor 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDiscoveryOakConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDiscoveryOakConfigInfo}
     */
    this.orgApacheSlingDiscoveryOakConfig = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'connectorPingTimeout': opts['connectorPingTimeout'],
        'connectorPingInterval': opts['connectorPingInterval'],
        'discoveryLiteCheckInterval': opts['discoveryLiteCheckInterval'],
        'clusterSyncServiceTimeout': opts['clusterSyncServiceTimeout'],
        'clusterSyncServiceInterval': opts['clusterSyncServiceInterval'],
        'enableSyncToken': opts['enableSyncToken'],
        'minEventDelay': opts['minEventDelay'],
        'socketConnectTimeout': opts['socketConnectTimeout'],
        'soTimeout': opts['soTimeout'],
        'autoStopLocalLoopEnabled': opts['autoStopLocalLoopEnabled'],
        'gzipConnectorRequestsEnabled': opts['gzipConnectorRequestsEnabled'],
        'hmacEnabled': opts['hmacEnabled'],
        'enableEncryption': opts['enableEncryption'],
        'sharedKey': opts['sharedKey'],
        'hmacSharedKeyTTL': opts['hmacSharedKeyTTL'],
        'backoffStandbyFactor': opts['backoffStandbyFactor'],
        'backoffStableFactor': opts['backoffStableFactor'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'topologyConnectorUrls': {
          value: opts['topologyConnectorUrls'],
          collectionFormat: 'multi'
        },
        'topologyConnectorWhitelist': {
          value: opts['topologyConnectorWhitelist'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingDiscoveryOakConfigInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.discovery.oak.Config', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.hcName 
     * @param {Array.<String>} opts.hcTags 
     * @param {String} opts.hcMbeanName 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo}
     */
    this.orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'hc.name': opts['hcName'],
        'hc.mbean.name': opts['hcMbeanName'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'hc.tags': {
          value: opts['hcTags'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.discovery.oak.SynchronizedClocksHealthCheck', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDistributionAgentImplForwardDistributionAgentFacto operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {String} opts.title 
     * @param {String} opts.details 
     * @param {Boolean} opts.enabled 
     * @param {String} opts.serviceName 
     * @param {String} opts.logLevel 
     * @param {Array.<String>} opts.allowedRoots 
     * @param {Boolean} opts.queueProcessingEnabled 
     * @param {Array.<String>} opts.packageImporterEndpoints 
     * @param {Array.<String>} opts.passiveQueues 
     * @param {Array.<String>} opts.priorityQueues 
     * @param {String} opts.retryStrategy 
     * @param {Number} opts.retryAttempts 
     * @param {String} opts.requestAuthorizationStrategyTarget 
     * @param {String} opts.transportSecretProviderTarget 
     * @param {String} opts.packageBuilderTarget 
     * @param {String} opts.triggersTarget 
     * @param {String} opts.queueProvider 
     * @param {Boolean} opts.asyncDelivery 
     * @param {Number} opts.httpConnTimeout 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo}
     */
    this.orgApacheSlingDistributionAgentImplForwardDistributionAgentFacto = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'name': opts['name'],
        'title': opts['title'],
        'details': opts['details'],
        'enabled': opts['enabled'],
        'serviceName': opts['serviceName'],
        'log.level': opts['logLevel'],
        'queue.processing.enabled': opts['queueProcessingEnabled'],
        'retry.strategy': opts['retryStrategy'],
        'retry.attempts': opts['retryAttempts'],
        'requestAuthorizationStrategy.target': opts['requestAuthorizationStrategyTarget'],
        'transportSecretProvider.target': opts['transportSecretProviderTarget'],
        'packageBuilder.target': opts['packageBuilderTarget'],
        'triggers.target': opts['triggersTarget'],
        'queue.provider': opts['queueProvider'],
        'async.delivery': opts['asyncDelivery'],
        'http.conn.timeout': opts['httpConnTimeout'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'allowed.roots': {
          value: opts['allowedRoots'],
          collectionFormat: 'multi'
        },
        'packageImporter.endpoints': {
          value: opts['packageImporterEndpoints'],
          collectionFormat: 'multi'
        },
        'passiveQueues': {
          value: opts['passiveQueues'],
          collectionFormat: 'multi'
        },
        'priorityQueues': {
          value: opts['priorityQueues'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.distribution.agent.impl.ForwardDistributionAgentFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestACallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {String} opts.jcrPrivilege 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestACallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo}
     */
    this.orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'name': opts['name'],
        'jcrPrivilege': opts['jcrPrivilege'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.distribution.agent.impl.PrivilegeDistributionRequestAuthorizationStrategyFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDistributionAgentImplQueueDistributionAgentFactory operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {String} opts.title 
     * @param {String} opts.details 
     * @param {Boolean} opts.enabled 
     * @param {String} opts.serviceName 
     * @param {String} opts.logLevel 
     * @param {Array.<String>} opts.allowedRoots 
     * @param {String} opts.requestAuthorizationStrategyTarget 
     * @param {String} opts.queueProviderFactoryTarget 
     * @param {String} opts.packageBuilderTarget 
     * @param {String} opts.triggersTarget 
     * @param {Array.<String>} opts.priorityQueues 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo}
     */
    this.orgApacheSlingDistributionAgentImplQueueDistributionAgentFactory = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'name': opts['name'],
        'title': opts['title'],
        'details': opts['details'],
        'enabled': opts['enabled'],
        'serviceName': opts['serviceName'],
        'log.level': opts['logLevel'],
        'requestAuthorizationStrategy.target': opts['requestAuthorizationStrategyTarget'],
        'queueProviderFactory.target': opts['queueProviderFactoryTarget'],
        'packageBuilder.target': opts['packageBuilderTarget'],
        'triggers.target': opts['triggersTarget'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'allowed.roots': {
          value: opts['allowedRoots'],
          collectionFormat: 'multi'
        },
        'priorityQueues': {
          value: opts['priorityQueues'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.distribution.agent.impl.QueueDistributionAgentFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDistributionAgentImplReverseDistributionAgentFacto operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDistributionAgentImplReverseDistributionAgentFactoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {String} opts.title 
     * @param {String} opts.details 
     * @param {Boolean} opts.enabled 
     * @param {String} opts.serviceName 
     * @param {String} opts.logLevel 
     * @param {Boolean} opts.queueProcessingEnabled 
     * @param {Array.<String>} opts.packageExporterEndpoints 
     * @param {Number} opts.pullItems 
     * @param {Number} opts.httpConnTimeout 
     * @param {String} opts.requestAuthorizationStrategyTarget 
     * @param {String} opts.transportSecretProviderTarget 
     * @param {String} opts.packageBuilderTarget 
     * @param {String} opts.triggersTarget 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDistributionAgentImplReverseDistributionAgentFactoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo}
     */
    this.orgApacheSlingDistributionAgentImplReverseDistributionAgentFacto = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'name': opts['name'],
        'title': opts['title'],
        'details': opts['details'],
        'enabled': opts['enabled'],
        'serviceName': opts['serviceName'],
        'log.level': opts['logLevel'],
        'queue.processing.enabled': opts['queueProcessingEnabled'],
        'pull.items': opts['pullItems'],
        'http.conn.timeout': opts['httpConnTimeout'],
        'requestAuthorizationStrategy.target': opts['requestAuthorizationStrategyTarget'],
        'transportSecretProvider.target': opts['transportSecretProviderTarget'],
        'packageBuilder.target': opts['packageBuilderTarget'],
        'triggers.target': opts['triggersTarget'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'packageExporter.endpoints': {
          value: opts['packageExporterEndpoints'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.distribution.agent.impl.ReverseDistributionAgentFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {String} opts.title 
     * @param {String} opts.details 
     * @param {Boolean} opts.enabled 
     * @param {String} opts.serviceName 
     * @param {String} opts.logLevel 
     * @param {Boolean} opts.queueProcessingEnabled 
     * @param {String} opts.packageExporterTarget 
     * @param {String} opts.packageImporterTarget 
     * @param {String} opts.requestAuthorizationStrategyTarget 
     * @param {String} opts.triggersTarget 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo}
     */
    this.orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'name': opts['name'],
        'title': opts['title'],
        'details': opts['details'],
        'enabled': opts['enabled'],
        'serviceName': opts['serviceName'],
        'log.level': opts['logLevel'],
        'queue.processing.enabled': opts['queueProcessingEnabled'],
        'packageExporter.target': opts['packageExporterTarget'],
        'packageImporter.target': opts['packageImporterTarget'],
        'requestAuthorizationStrategy.target': opts['requestAuthorizationStrategyTarget'],
        'triggers.target': opts['triggersTarget'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.distribution.agent.impl.SimpleDistributionAgentFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDistributionAgentImplSyncDistributionAgentFactory operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {String} opts.title 
     * @param {String} opts.details 
     * @param {Boolean} opts.enabled 
     * @param {String} opts.serviceName 
     * @param {String} opts.logLevel 
     * @param {Boolean} opts.queueProcessingEnabled 
     * @param {Array.<String>} opts.passiveQueues 
     * @param {Array.<String>} opts.packageExporterEndpoints 
     * @param {Array.<String>} opts.packageImporterEndpoints 
     * @param {String} opts.retryStrategy 
     * @param {Number} opts.retryAttempts 
     * @param {Number} opts.pullItems 
     * @param {Number} opts.httpConnTimeout 
     * @param {String} opts.requestAuthorizationStrategyTarget 
     * @param {String} opts.transportSecretProviderTarget 
     * @param {String} opts.packageBuilderTarget 
     * @param {String} opts.triggersTarget 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo}
     */
    this.orgApacheSlingDistributionAgentImplSyncDistributionAgentFactory = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'name': opts['name'],
        'title': opts['title'],
        'details': opts['details'],
        'enabled': opts['enabled'],
        'serviceName': opts['serviceName'],
        'log.level': opts['logLevel'],
        'queue.processing.enabled': opts['queueProcessingEnabled'],
        'retry.strategy': opts['retryStrategy'],
        'retry.attempts': opts['retryAttempts'],
        'pull.items': opts['pullItems'],
        'http.conn.timeout': opts['httpConnTimeout'],
        'requestAuthorizationStrategy.target': opts['requestAuthorizationStrategyTarget'],
        'transportSecretProvider.target': opts['transportSecretProviderTarget'],
        'packageBuilder.target': opts['packageBuilderTarget'],
        'triggers.target': opts['triggersTarget'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'passiveQueues': {
          value: opts['passiveQueues'],
          collectionFormat: 'multi'
        },
        'packageExporter.endpoints': {
          value: opts['packageExporterEndpoints'],
          collectionFormat: 'multi'
        },
        'packageImporter.endpoints': {
          value: opts['packageImporterEndpoints'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.distribution.agent.impl.SyncDistributionAgentFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDistributionMonitorDistributionQueueHealthCheck operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDistributionMonitorDistributionQueueHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.hcName 
     * @param {Array.<String>} opts.hcTags 
     * @param {String} opts.hcMbeanName 
     * @param {Number} opts.numberOfRetriesAllowed 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDistributionMonitorDistributionQueueHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo}
     */
    this.orgApacheSlingDistributionMonitorDistributionQueueHealthCheck = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'hc.name': opts['hcName'],
        'hc.mbean.name': opts['hcMbeanName'],
        'numberOfRetriesAllowed': opts['numberOfRetriesAllowed'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'hc.tags': {
          value: opts['hcTags'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.distribution.monitor.DistributionQueueHealthCheck', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDistributionPackagingImplExporterAgentDistributio operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDistributionPackagingImplExporterAgentDistributioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {String} opts.queue 
     * @param {Boolean} opts.dropInvalidItems 
     * @param {String} opts.agentTarget 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDistributionPackagingImplExporterAgentDistributioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo}
     */
    this.orgApacheSlingDistributionPackagingImplExporterAgentDistributio = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'name': opts['name'],
        'queue': opts['queue'],
        'drop.invalid.items': opts['dropInvalidItems'],
        'agent.target': opts['agentTarget'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.AgentDistributionPackageExporterFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDistributionPackagingImplExporterLocalDistributio operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDistributionPackagingImplExporterLocalDistributioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {String} opts.packageBuilderTarget 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDistributionPackagingImplExporterLocalDistributioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo}
     */
    this.orgApacheSlingDistributionPackagingImplExporterLocalDistributio = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'name': opts['name'],
        'packageBuilder.target': opts['packageBuilderTarget'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.LocalDistributionPackageExporterFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDistributionPackagingImplExporterRemoteDistributi operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDistributionPackagingImplExporterRemoteDistributiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {Array.<String>} opts.endpoints 
     * @param {Number} opts.pullItems 
     * @param {String} opts.packageBuilderTarget 
     * @param {String} opts.transportSecretProviderTarget 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDistributionPackagingImplExporterRemoteDistributiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo}
     */
    this.orgApacheSlingDistributionPackagingImplExporterRemoteDistributi = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'name': opts['name'],
        'pull.items': opts['pullItems'],
        'packageBuilder.target': opts['packageBuilderTarget'],
        'transportSecretProvider.target': opts['transportSecretProviderTarget'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'endpoints': {
          value: opts['endpoints'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.RemoteDistributionPackageExporterFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDistributionPackagingImplImporterLocalDistributio operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDistributionPackagingImplImporterLocalDistributioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {String} opts.packageBuilderTarget 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDistributionPackagingImplImporterLocalDistributioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo}
     */
    this.orgApacheSlingDistributionPackagingImplImporterLocalDistributio = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'name': opts['name'],
        'packageBuilder.target': opts['packageBuilderTarget'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.LocalDistributionPackageImporterFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDistributionPackagingImplImporterRemoteDistributi operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDistributionPackagingImplImporterRemoteDistributiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {Array.<String>} opts.endpoints 
     * @param {String} opts.transportSecretProviderTarget 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDistributionPackagingImplImporterRemoteDistributiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo}
     */
    this.orgApacheSlingDistributionPackagingImplImporterRemoteDistributi = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'name': opts['name'],
        'transportSecretProvider.target': opts['transportSecretProviderTarget'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'endpoints': {
          value: opts['endpoints'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RemoteDistributionPackageImporterFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDistributionPackagingImplImporterRepositoryDistri operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDistributionPackagingImplImporterRepositoryDistriCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {String} opts.serviceName 
     * @param {String} opts.path 
     * @param {String} opts.privilegeName 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDistributionPackagingImplImporterRepositoryDistriCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo}
     */
    this.orgApacheSlingDistributionPackagingImplImporterRepositoryDistri = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'name': opts['name'],
        'service.name': opts['serviceName'],
        'path': opts['path'],
        'privilege.name': opts['privilegeName'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RepositoryDistributionPackageImporterFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDistributionResourcesImplDistributionConfiguration operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDistributionResourcesImplDistributionConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.providerRoots 
     * @param {String} opts.kind 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDistributionResourcesImplDistributionConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo}
     */
    this.orgApacheSlingDistributionResourcesImplDistributionConfiguration = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'provider.roots': opts['providerRoots'],
        'kind': opts['kind'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionConfigurationResourceProviderFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDistributionResourcesImplDistributionServiceResour operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDistributionResourcesImplDistributionServiceResourCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.providerRoots 
     * @param {String} opts.kind 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDistributionResourcesImplDistributionServiceResourCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo}
     */
    this.orgApacheSlingDistributionResourcesImplDistributionServiceResour = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'provider.roots': opts['providerRoots'],
        'kind': opts['kind'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionServiceResourceProviderFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDistributionSerializationImplDistributionPackageBu operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDistributionSerializationImplDistributionPackageBuCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {String} opts.type 
     * @param {String} opts.formatTarget 
     * @param {String} opts.tempFsFolder 
     * @param {Number} opts.fileThreshold 
     * @param {String} opts.memoryUnit 
     * @param {Boolean} opts.useOffHeapMemory 
     * @param {String} opts.digestAlgorithm 
     * @param {Number} opts.monitoringQueueSize 
     * @param {Number} opts.cleanupDelay 
     * @param {Array.<String>} opts.packageFilters 
     * @param {Array.<String>} opts.propertyFilters 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDistributionSerializationImplDistributionPackageBuCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo}
     */
    this.orgApacheSlingDistributionSerializationImplDistributionPackageBu = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'name': opts['name'],
        'type': opts['type'],
        'format.target': opts['formatTarget'],
        'tempFsFolder': opts['tempFsFolder'],
        'fileThreshold': opts['fileThreshold'],
        'memoryUnit': opts['memoryUnit'],
        'useOffHeapMemory': opts['useOffHeapMemory'],
        'digestAlgorithm': opts['digestAlgorithm'],
        'monitoringQueueSize': opts['monitoringQueueSize'],
        'cleanupDelay': opts['cleanupDelay'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'package.filters': {
          value: opts['packageFilters'],
          collectionFormat: 'multi'
        },
        'property.filters': {
          value: opts['propertyFilters'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.distribution.serialization.impl.DistributionPackageBuilderFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDistributionSerializationImplVltVaultDistribution operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDistributionSerializationImplVltVaultDistributionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {String} opts.type 
     * @param {String} opts.importMode 
     * @param {String} opts.aclHandling 
     * @param {String} opts.packageRoots 
     * @param {Array.<String>} opts.packageFilters 
     * @param {Array.<String>} opts.propertyFilters 
     * @param {String} opts.tempFsFolder 
     * @param {Boolean} opts.useBinaryReferences 
     * @param {Number} opts.autoSaveThreshold 
     * @param {Number} opts.cleanupDelay 
     * @param {Number} opts.fileThreshold 
     * @param {String} opts.MEGA_BYTES 
     * @param {Boolean} opts.useOffHeapMemory 
     * @param {String} opts.digestAlgorithm 
     * @param {Number} opts.monitoringQueueSize 
     * @param {Array.<String>} opts.pathsMapping 
     * @param {Boolean} opts.strictImport 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDistributionSerializationImplVltVaultDistributionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo}
     */
    this.orgApacheSlingDistributionSerializationImplVltVaultDistribution = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'name': opts['name'],
        'type': opts['type'],
        'importMode': opts['importMode'],
        'aclHandling': opts['aclHandling'],
        'package.roots': opts['packageRoots'],
        'tempFsFolder': opts['tempFsFolder'],
        'useBinaryReferences': opts['useBinaryReferences'],
        'autoSaveThreshold': opts['autoSaveThreshold'],
        'cleanupDelay': opts['cleanupDelay'],
        'fileThreshold': opts['fileThreshold'],
        'MEGA_BYTES': opts['MEGA_BYTES'],
        'useOffHeapMemory': opts['useOffHeapMemory'],
        'digestAlgorithm': opts['digestAlgorithm'],
        'monitoringQueueSize': opts['monitoringQueueSize'],
        'strictImport': opts['strictImport'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'package.filters': {
          value: opts['packageFilters'],
          collectionFormat: 'multi'
        },
        'property.filters': {
          value: opts['propertyFilters'],
          collectionFormat: 'multi'
        },
        'pathsMapping': {
          value: opts['pathsMapping'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.distribution.serialization.impl.vlt.VaultDistributionPackageBuilderFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDistributionTransportImplUserCredentialsDistributi operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDistributionTransportImplUserCredentialsDistributiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {String} opts.username 
     * @param {String} opts.password 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDistributionTransportImplUserCredentialsDistributiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo}
     */
    this.orgApacheSlingDistributionTransportImplUserCredentialsDistributi = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'name': opts['name'],
        'username': opts['username'],
        'password': opts['password'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.distribution.transport.impl.UserCredentialsDistributionTransportSecretProvider', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDistributionTriggerImplDistributionEventDistribute operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDistributionTriggerImplDistributionEventDistributeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {String} opts.path 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDistributionTriggerImplDistributionEventDistributeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo}
     */
    this.orgApacheSlingDistributionTriggerImplDistributionEventDistribute = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'name': opts['name'],
        'path': opts['path'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.distribution.trigger.impl.DistributionEventDistributeDistributionTriggerFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {String} opts.path 
     * @param {Array.<String>} opts.ignoredPathsPatterns 
     * @param {String} opts.serviceName 
     * @param {Boolean} opts.deep 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo}
     */
    this.orgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'name': opts['name'],
        'path': opts['path'],
        'serviceName': opts['serviceName'],
        'deep': opts['deep'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'ignoredPathsPatterns': {
          value: opts['ignoredPathsPatterns'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.distribution.trigger.impl.JcrEventDistributionTriggerFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {String} opts.path 
     * @param {String} opts.serviceName 
     * @param {String} opts.nuggetsPath 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo}
     */
    this.orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'name': opts['name'],
        'path': opts['path'],
        'serviceName': opts['serviceName'],
        'nuggetsPath': opts['nuggetsPath'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.distribution.trigger.impl.PersistedJcrEventDistributionTriggerFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {String} opts.endpoint 
     * @param {String} opts.transportSecretProviderTarget 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo}
     */
    this.orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'name': opts['name'],
        'endpoint': opts['endpoint'],
        'transportSecretProvider.target': opts['transportSecretProviderTarget'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.distribution.trigger.impl.RemoteEventDistributionTriggerFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDistributionTriggerImplResourceEventDistributionTr operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDistributionTriggerImplResourceEventDistributionTrCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {String} opts.path 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDistributionTriggerImplResourceEventDistributionTrCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo}
     */
    this.orgApacheSlingDistributionTriggerImplResourceEventDistributionTr = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'name': opts['name'],
        'path': opts['path'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.distribution.trigger.impl.ResourceEventDistributionTriggerFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDistributionTriggerImplScheduledDistributionTrigge operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDistributionTriggerImplScheduledDistributionTriggeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {String} opts.path 
     * @param {String} opts.seconds 
     * @param {String} opts.serviceName 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDistributionTriggerImplScheduledDistributionTriggeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo}
     */
    this.orgApacheSlingDistributionTriggerImplScheduledDistributionTrigge = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'name': opts['name'],
        'path': opts['path'],
        'seconds': opts['seconds'],
        'serviceName': opts['serviceName'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.distribution.trigger.impl.ScheduledDistributionTriggerFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingEngineImplAuthSlingAuthenticator operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingEngineImplAuthSlingAuthenticatorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.osgiHttpWhiteboardContextSelect 
     * @param {String} opts.osgiHttpWhiteboardListener 
     * @param {String} opts.authSudoCookie 
     * @param {String} opts.authSudoParameter 
     * @param {Boolean} opts.authAnnonymous 
     * @param {Array.<String>} opts.slingAuthRequirements 
     * @param {String} opts.slingAuthAnonymousUser 
     * @param {String} opts.slingAuthAnonymousPassword 
     * @param {String} opts.authHttp 
     * @param {String} opts.authHttpRealm 
     * @param {Array.<String>} opts.authUriSuffix 
     * @param {module:api/ConfigmgrApi~orgApacheSlingEngineImplAuthSlingAuthenticatorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo}
     */
    this.orgApacheSlingEngineImplAuthSlingAuthenticator = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'osgi.http.whiteboard.context.select': opts['osgiHttpWhiteboardContextSelect'],
        'osgi.http.whiteboard.listener': opts['osgiHttpWhiteboardListener'],
        'auth.sudo.cookie': opts['authSudoCookie'],
        'auth.sudo.parameter': opts['authSudoParameter'],
        'auth.annonymous': opts['authAnnonymous'],
        'sling.auth.anonymous.user': opts['slingAuthAnonymousUser'],
        'sling.auth.anonymous.password': opts['slingAuthAnonymousPassword'],
        'auth.http': opts['authHttp'],
        'auth.http.realm': opts['authHttpRealm'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'sling.auth.requirements': {
          value: opts['slingAuthRequirements'],
          collectionFormat: 'multi'
        },
        'auth.uri.suffix': {
          value: opts['authUriSuffix'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.engine.impl.auth.SlingAuthenticator', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.extensions 
     * @param {Number} opts.minDurationMs 
     * @param {Number} opts.maxDurationMs 
     * @param {Boolean} opts.compactLogFormat 
     * @param {module:api/ConfigmgrApi~orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo}
     */
    this.orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'minDurationMs': opts['minDurationMs'],
        'maxDurationMs': opts['maxDurationMs'],
        'compactLogFormat': opts['compactLogFormat'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'extensions': {
          value: opts['extensions'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.engine.impl.debug.RequestProgressTrackerLogFilter', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingEngineImplLogRequestLogger operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingEngineImplLogRequestLoggerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingEngineImplLogRequestLoggerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.requestLogOutput 
     * @param {Number} opts.requestLogOutputtype 
     * @param {Boolean} opts.requestLogEnabled 
     * @param {String} opts.accessLogOutput 
     * @param {Number} opts.accessLogOutputtype 
     * @param {Boolean} opts.accessLogEnabled 
     * @param {module:api/ConfigmgrApi~orgApacheSlingEngineImplLogRequestLoggerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingEngineImplLogRequestLoggerInfo}
     */
    this.orgApacheSlingEngineImplLogRequestLogger = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'request.log.output': opts['requestLogOutput'],
        'request.log.outputtype': opts['requestLogOutputtype'],
        'request.log.enabled': opts['requestLogEnabled'],
        'access.log.output': opts['accessLogOutput'],
        'access.log.outputtype': opts['accessLogOutputtype'],
        'access.log.enabled': opts['accessLogEnabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingEngineImplLogRequestLoggerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.engine.impl.log.RequestLogger', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingEngineImplLogRequestLoggerService operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingEngineImplLogRequestLoggerServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingEngineImplLogRequestLoggerServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.requestLogServiceFormat 
     * @param {String} opts.requestLogServiceOutput 
     * @param {Number} opts.requestLogServiceOutputtype 
     * @param {Boolean} opts.requestLogServiceOnentry 
     * @param {module:api/ConfigmgrApi~orgApacheSlingEngineImplLogRequestLoggerServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingEngineImplLogRequestLoggerServiceInfo}
     */
    this.orgApacheSlingEngineImplLogRequestLoggerService = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'request.log.service.format': opts['requestLogServiceFormat'],
        'request.log.service.output': opts['requestLogServiceOutput'],
        'request.log.service.outputtype': opts['requestLogServiceOutputtype'],
        'request.log.service.onentry': opts['requestLogServiceOnentry'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingEngineImplLogRequestLoggerServiceInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.engine.impl.log.RequestLoggerService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingEngineImplSlingMainServlet operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingEngineImplSlingMainServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingEngineImplSlingMainServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.slingMaxCalls 
     * @param {Number} opts.slingMaxInclusions 
     * @param {Boolean} opts.slingTraceAllow 
     * @param {Number} opts.slingMaxRecordRequests 
     * @param {Array.<String>} opts.slingStorePatternRequests 
     * @param {String} opts.slingServerinfo 
     * @param {Array.<String>} opts.slingAdditionalResponseHeaders 
     * @param {module:api/ConfigmgrApi~orgApacheSlingEngineImplSlingMainServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingEngineImplSlingMainServletInfo}
     */
    this.orgApacheSlingEngineImplSlingMainServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'sling.max.calls': opts['slingMaxCalls'],
        'sling.max.inclusions': opts['slingMaxInclusions'],
        'sling.trace.allow': opts['slingTraceAllow'],
        'sling.max.record.requests': opts['slingMaxRecordRequests'],
        'sling.serverinfo': opts['slingServerinfo'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'sling.store.pattern.requests': {
          value: opts['slingStorePatternRequests'],
          collectionFormat: 'multi'
        },
        'sling.additional.response.headers': {
          value: opts['slingAdditionalResponseHeaders'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingEngineImplSlingMainServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.engine.impl.SlingMainServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingEngineParameters operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingEngineParametersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingEngineParametersInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.slingDefaultParameterEncoding 
     * @param {Number} opts.slingDefaultMaxParameters 
     * @param {String} opts.fileLocation 
     * @param {Number} opts.fileThreshold 
     * @param {Number} opts.fileMax 
     * @param {Number} opts.requestMax 
     * @param {Boolean} opts.slingDefaultParameterCheckForAdditionalContainerParameters 
     * @param {module:api/ConfigmgrApi~orgApacheSlingEngineParametersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingEngineParametersInfo}
     */
    this.orgApacheSlingEngineParameters = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'sling.default.parameter.encoding': opts['slingDefaultParameterEncoding'],
        'sling.default.max.parameters': opts['slingDefaultMaxParameters'],
        'file.location': opts['fileLocation'],
        'file.threshold': opts['fileThreshold'],
        'file.max': opts['fileMax'],
        'request.max': opts['requestMax'],
        'sling.default.parameter.checkForAdditionalContainerParameters': opts['slingDefaultParameterCheckForAdditionalContainerParameters'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingEngineParametersInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.engine.parameters', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingEventImplEventingThreadPool operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingEventImplEventingThreadPoolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingEventImplEventingThreadPoolInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.minPoolSize 
     * @param {module:api/ConfigmgrApi~orgApacheSlingEventImplEventingThreadPoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingEventImplEventingThreadPoolInfo}
     */
    this.orgApacheSlingEventImplEventingThreadPool = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'minPoolSize': opts['minPoolSize'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingEventImplEventingThreadPoolInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.event.impl.EventingThreadPool', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingEventImplJobsDefaultJobManager operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingEventImplJobsDefaultJobManagerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingEventImplJobsDefaultJobManagerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.queuePriority 
     * @param {Number} opts.queueRetries 
     * @param {Number} opts.queueRetrydelay 
     * @param {Number} opts.queueMaxparallel 
     * @param {module:api/ConfigmgrApi~orgApacheSlingEventImplJobsDefaultJobManagerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingEventImplJobsDefaultJobManagerInfo}
     */
    this.orgApacheSlingEventImplJobsDefaultJobManager = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'queue.priority': opts['queuePriority'],
        'queue.retries': opts['queueRetries'],
        'queue.retrydelay': opts['queueRetrydelay'],
        'queue.maxparallel': opts['queueMaxparallel'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingEventImplJobsDefaultJobManagerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.event.impl.jobs.DefaultJobManager', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingEventImplJobsJcrPersistenceHandler operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingEventImplJobsJcrPersistenceHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.jobConsumermanagerDisableDistribution 
     * @param {Number} opts.startupDelay 
     * @param {Number} opts.cleanupPeriod 
     * @param {module:api/ConfigmgrApi~orgApacheSlingEventImplJobsJcrPersistenceHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo}
     */
    this.orgApacheSlingEventImplJobsJcrPersistenceHandler = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'job.consumermanager.disableDistribution': opts['jobConsumermanagerDisableDistribution'],
        'startup.delay': opts['startupDelay'],
        'cleanup.period': opts['cleanupPeriod'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.event.impl.jobs.jcr.PersistenceHandler', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingEventImplJobsJobConsumerManager operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingEventImplJobsJobConsumerManagerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingEventImplJobsJobConsumerManagerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.orgApacheSlingInstallerConfigurationPersist 
     * @param {Array.<String>} opts.jobConsumermanagerWhitelist 
     * @param {Array.<String>} opts.jobConsumermanagerBlacklist 
     * @param {module:api/ConfigmgrApi~orgApacheSlingEventImplJobsJobConsumerManagerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingEventImplJobsJobConsumerManagerInfo}
     */
    this.orgApacheSlingEventImplJobsJobConsumerManager = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'org.apache.sling.installer.configuration.persist': opts['orgApacheSlingInstallerConfigurationPersist'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'job.consumermanager.whitelist': {
          value: opts['jobConsumermanagerWhitelist'],
          collectionFormat: 'multi'
        },
        'job.consumermanager.blacklist': {
          value: opts['jobConsumermanagerBlacklist'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingEventImplJobsJobConsumerManagerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.event.impl.jobs.JobConsumerManager', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingEventJobsQueueConfiguration operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingEventJobsQueueConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingEventJobsQueueConfigurationInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.queueName 
     * @param {Array.<String>} opts.queueTopics 
     * @param {String} opts.queueType 
     * @param {String} opts.queuePriority 
     * @param {Number} opts.queueRetries 
     * @param {Number} opts.queueRetrydelay 
     * @param {Number} opts.queueMaxparallel 
     * @param {Boolean} opts.queueKeepJobs 
     * @param {Boolean} opts.queuePreferRunOnCreationInstance 
     * @param {Number} opts.queueThreadPoolSize 
     * @param {Number} opts.serviceRanking 
     * @param {module:api/ConfigmgrApi~orgApacheSlingEventJobsQueueConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingEventJobsQueueConfigurationInfo}
     */
    this.orgApacheSlingEventJobsQueueConfiguration = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'queue.name': opts['queueName'],
        'queue.type': opts['queueType'],
        'queue.priority': opts['queuePriority'],
        'queue.retries': opts['queueRetries'],
        'queue.retrydelay': opts['queueRetrydelay'],
        'queue.maxparallel': opts['queueMaxparallel'],
        'queue.keepJobs': opts['queueKeepJobs'],
        'queue.preferRunOnCreationInstance': opts['queuePreferRunOnCreationInstance'],
        'queue.threadPoolSize': opts['queueThreadPoolSize'],
        'service.ranking': opts['serviceRanking'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'queue.topics': {
          value: opts['queueTopics'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingEventJobsQueueConfigurationInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.event.jobs.QueueConfiguration', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.users 
     * @param {Array.<String>} opts.groups 
     * @param {module:api/ConfigmgrApi~orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo}
     */
    this.orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'users': {
          value: opts['users'],
          collectionFormat: 'multi'
        },
        'groups': {
          value: opts['groups'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.extensions.webconsolesecurityprovider.internal.SlingWebConsoleSecurityProvider', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingFeatureflagsFeature operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingFeatureflagsFeatureCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingFeatureflagsFeatureInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {String} opts.description 
     * @param {Boolean} opts.enabled 
     * @param {module:api/ConfigmgrApi~orgApacheSlingFeatureflagsFeatureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingFeatureflagsFeatureInfo}
     */
    this.orgApacheSlingFeatureflagsFeature = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'name': opts['name'],
        'description': opts['description'],
        'enabled': opts['enabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingFeatureflagsFeatureInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.featureflags.Feature', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingFeatureflagsImplConfiguredFeature operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingFeatureflagsImplConfiguredFeatureCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {String} opts.description 
     * @param {Boolean} opts.enabled 
     * @param {module:api/ConfigmgrApi~orgApacheSlingFeatureflagsImplConfiguredFeatureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo}
     */
    this.orgApacheSlingFeatureflagsImplConfiguredFeature = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'name': opts['name'],
        'description': opts['description'],
        'enabled': opts['enabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.featureflags.impl.ConfiguredFeature', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingHapiImplHApiUtilImpl operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingHapiImplHApiUtilImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingHapiImplHApiUtilImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.orgApacheSlingHapiToolsResourcetype 
     * @param {String} opts.orgApacheSlingHapiToolsCollectionresourcetype 
     * @param {Array.<String>} opts.orgApacheSlingHapiToolsSearchpaths 
     * @param {String} opts.orgApacheSlingHapiToolsExternalurl 
     * @param {Boolean} opts.orgApacheSlingHapiToolsEnabled 
     * @param {module:api/ConfigmgrApi~orgApacheSlingHapiImplHApiUtilImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingHapiImplHApiUtilImplInfo}
     */
    this.orgApacheSlingHapiImplHApiUtilImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'org.apache.sling.hapi.tools.resourcetype': opts['orgApacheSlingHapiToolsResourcetype'],
        'org.apache.sling.hapi.tools.collectionresourcetype': opts['orgApacheSlingHapiToolsCollectionresourcetype'],
        'org.apache.sling.hapi.tools.externalurl': opts['orgApacheSlingHapiToolsExternalurl'],
        'org.apache.sling.hapi.tools.enabled': opts['orgApacheSlingHapiToolsEnabled'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'org.apache.sling.hapi.tools.searchpaths': {
          value: opts['orgApacheSlingHapiToolsSearchpaths'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingHapiImplHApiUtilImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.hapi.impl.HApiUtilImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingHcCoreImplCompositeHealthCheck operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingHcCoreImplCompositeHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingHcCoreImplCompositeHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.hcName 
     * @param {Array.<String>} opts.hcTags 
     * @param {String} opts.hcMbeanName 
     * @param {Array.<String>} opts.filterTags 
     * @param {Boolean} opts.filterCombineTagsWithOr 
     * @param {module:api/ConfigmgrApi~orgApacheSlingHcCoreImplCompositeHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingHcCoreImplCompositeHealthCheckInfo}
     */
    this.orgApacheSlingHcCoreImplCompositeHealthCheck = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'hc.name': opts['hcName'],
        'hc.mbean.name': opts['hcMbeanName'],
        'filter.combineTagsWithOr': opts['filterCombineTagsWithOr'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'hc.tags': {
          value: opts['hcTags'],
          collectionFormat: 'multi'
        },
        'filter.tags': {
          value: opts['filterTags'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingHcCoreImplCompositeHealthCheckInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.hc.core.impl.CompositeHealthCheck', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.timeoutInMs 
     * @param {Number} opts.longRunningFutureThresholdForCriticalMs 
     * @param {Number} opts.resultCacheTtlInMs 
     * @param {module:api/ConfigmgrApi~orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo}
     */
    this.orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'timeoutInMs': opts['timeoutInMs'],
        'longRunningFutureThresholdForCriticalMs': opts['longRunningFutureThresholdForCriticalMs'],
        'resultCacheTtlInMs': opts['resultCacheTtlInMs'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.hc.core.impl.executor.HealthCheckExecutorImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingHcCoreImplJmxAttributeHealthCheck operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingHcCoreImplJmxAttributeHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.hcName 
     * @param {Array.<String>} opts.hcTags 
     * @param {String} opts.hcMbeanName 
     * @param {String} opts.mbeanName 
     * @param {String} opts.attributeName 
     * @param {String} opts.attributeValueConstraint 
     * @param {module:api/ConfigmgrApi~orgApacheSlingHcCoreImplJmxAttributeHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo}
     */
    this.orgApacheSlingHcCoreImplJmxAttributeHealthCheck = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'hc.name': opts['hcName'],
        'hc.mbean.name': opts['hcMbeanName'],
        'mbean.name': opts['mbeanName'],
        'attribute.name': opts['attributeName'],
        'attribute.value.constraint': opts['attributeValueConstraint'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'hc.tags': {
          value: opts['hcTags'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.hc.core.impl.JmxAttributeHealthCheck', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingHcCoreImplScriptableHealthCheck operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingHcCoreImplScriptableHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingHcCoreImplScriptableHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.hcName 
     * @param {Array.<String>} opts.hcTags 
     * @param {String} opts.hcMbeanName 
     * @param {String} opts.expression 
     * @param {String} opts.languageExtension 
     * @param {module:api/ConfigmgrApi~orgApacheSlingHcCoreImplScriptableHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingHcCoreImplScriptableHealthCheckInfo}
     */
    this.orgApacheSlingHcCoreImplScriptableHealthCheck = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'hc.name': opts['hcName'],
        'hc.mbean.name': opts['hcMbeanName'],
        'expression': opts['expression'],
        'language.extension': opts['languageExtension'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'hc.tags': {
          value: opts['hcTags'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingHcCoreImplScriptableHealthCheckInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.hc.core.impl.ScriptableHealthCheck', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingHcCoreImplServletHealthCheckExecutorServlet operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingHcCoreImplServletHealthCheckExecutorServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.servletPath 
     * @param {Boolean} opts.disabled 
     * @param {String} opts.corsAccessControlAllowOrigin 
     * @param {module:api/ConfigmgrApi~orgApacheSlingHcCoreImplServletHealthCheckExecutorServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo}
     */
    this.orgApacheSlingHcCoreImplServletHealthCheckExecutorServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'servletPath': opts['servletPath'],
        'disabled': opts['disabled'],
        'cors.accessControlAllowOrigin': opts['corsAccessControlAllowOrigin'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.hc.core.impl.servlet.HealthCheckExecutorServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingHcCoreImplServletResultTxtVerboseSerializer operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingHcCoreImplServletResultTxtVerboseSerializerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.totalWidth 
     * @param {Number} opts.colWidthName 
     * @param {Number} opts.colWidthResult 
     * @param {Number} opts.colWidthTiming 
     * @param {module:api/ConfigmgrApi~orgApacheSlingHcCoreImplServletResultTxtVerboseSerializerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo}
     */
    this.orgApacheSlingHcCoreImplServletResultTxtVerboseSerializer = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'totalWidth': opts['totalWidth'],
        'colWidthName': opts['colWidthName'],
        'colWidthResult': opts['colWidthResult'],
        'colWidthTiming': opts['colWidthTiming'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.hc.core.impl.servlet.ResultTxtVerboseSerializer', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingI18nImplI18NFilter operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingI18nImplI18NFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingI18nImplI18NFilterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {Array.<String>} opts.slingFilterScope 
     * @param {module:api/ConfigmgrApi~orgApacheSlingI18nImplI18NFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingI18nImplI18NFilterInfo}
     */
    this.orgApacheSlingI18nImplI18NFilter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'service.ranking': opts['serviceRanking'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'sling.filter.scope': {
          value: opts['slingFilterScope'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingI18nImplI18NFilterInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.i18n.impl.I18NFilter', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingI18nImplJcrResourceBundleProvider operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingI18nImplJcrResourceBundleProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingI18nImplJcrResourceBundleProviderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.localeDefault 
     * @param {Boolean} opts.preloadBundles 
     * @param {Number} opts.invalidationDelay 
     * @param {module:api/ConfigmgrApi~orgApacheSlingI18nImplJcrResourceBundleProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingI18nImplJcrResourceBundleProviderInfo}
     */
    this.orgApacheSlingI18nImplJcrResourceBundleProvider = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'locale.default': opts['localeDefault'],
        'preload.bundles': opts['preloadBundles'],
        'invalidation.delay': opts['invalidationDelay'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingI18nImplJcrResourceBundleProviderInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.i18n.impl.JcrResourceBundleProvider', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingInstallerProviderJcrImplJcrInstaller operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingInstallerProviderJcrImplJcrInstallerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.handlerSchemes 
     * @param {String} opts.slingJcrinstallFolderNameRegexp 
     * @param {Number} opts.slingJcrinstallFolderMaxDepth 
     * @param {Array.<String>} opts.slingJcrinstallSearchPath 
     * @param {String} opts.slingJcrinstallNewConfigPath 
     * @param {String} opts.slingJcrinstallSignalPath 
     * @param {Boolean} opts.slingJcrinstallEnableWriteback 
     * @param {module:api/ConfigmgrApi~orgApacheSlingInstallerProviderJcrImplJcrInstallerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo}
     */
    this.orgApacheSlingInstallerProviderJcrImplJcrInstaller = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'sling.jcrinstall.folder.name.regexp': opts['slingJcrinstallFolderNameRegexp'],
        'sling.jcrinstall.folder.max.depth': opts['slingJcrinstallFolderMaxDepth'],
        'sling.jcrinstall.new.config.path': opts['slingJcrinstallNewConfigPath'],
        'sling.jcrinstall.signal.path': opts['slingJcrinstallSignalPath'],
        'sling.jcrinstall.enable.writeback': opts['slingJcrinstallEnableWriteback'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'handler.schemes': {
          value: opts['handlerSchemes'],
          collectionFormat: 'multi'
        },
        'sling.jcrinstall.search.path': {
          value: opts['slingJcrinstallSearchPath'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.installer.provider.jcr.impl.JcrInstaller', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingJcrBaseInternalLoginAdminWhitelist operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingJcrBaseInternalLoginAdminWhitelistCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.whitelistBypass 
     * @param {String} opts.whitelistBundlesRegexp 
     * @param {module:api/ConfigmgrApi~orgApacheSlingJcrBaseInternalLoginAdminWhitelistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo}
     */
    this.orgApacheSlingJcrBaseInternalLoginAdminWhitelist = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'whitelist.bypass': opts['whitelistBypass'],
        'whitelist.bundles.regexp': opts['whitelistBundlesRegexp'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.whitelistName 
     * @param {Array.<String>} opts.whitelistBundles 
     * @param {module:api/ConfigmgrApi~orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo}
     */
    this.orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'whitelist.name': opts['whitelistName'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'whitelist.bundles': {
          value: opts['whitelistBundles'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist.fragment', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingJcrDavexImplServletsSlingDavExServlet operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingJcrDavexImplServletsSlingDavExServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.alias 
     * @param {Boolean} opts.davCreateAbsoluteUri 
     * @param {String} opts.davProtectedhandlers 
     * @param {module:api/ConfigmgrApi~orgApacheSlingJcrDavexImplServletsSlingDavExServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo}
     */
    this.orgApacheSlingJcrDavexImplServletsSlingDavExServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'alias': opts['alias'],
        'dav.create-absolute-uri': opts['davCreateAbsoluteUri'],
        'dav.protectedhandlers': opts['davProtectedhandlers'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingJcrJackrabbitServerJndiRegistrationSupport operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingJcrJackrabbitServerJndiRegistrationSupportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.javaNamingFactoryInitial 
     * @param {String} opts.javaNamingProviderUrl 
     * @param {module:api/ConfigmgrApi~orgApacheSlingJcrJackrabbitServerJndiRegistrationSupportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo}
     */
    this.orgApacheSlingJcrJackrabbitServerJndiRegistrationSupport = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'java.naming.factory.initial': opts['javaNamingFactoryInitial'],
        'java.naming.provider.url': opts['javaNamingProviderUrl'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.JndiRegistrationSupport', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingJcrJackrabbitServerRmiRegistrationSupport operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingJcrJackrabbitServerRmiRegistrationSupportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.port 
     * @param {module:api/ConfigmgrApi~orgApacheSlingJcrJackrabbitServerRmiRegistrationSupportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo}
     */
    this.orgApacheSlingJcrJackrabbitServerRmiRegistrationSupport = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'port': opts['port'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.RmiRegistrationSupport', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingJcrRepoinitImplRepositoryInitializer operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingJcrRepoinitImplRepositoryInitializerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.references 
     * @param {module:api/ConfigmgrApi~orgApacheSlingJcrRepoinitImplRepositoryInitializerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo}
     */
    this.orgApacheSlingJcrRepoinitImplRepositoryInitializer = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'references': {
          value: opts['references'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.jcr.repoinit.impl.RepositoryInitializer', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingJcrRepoinitRepositoryInitializer operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingJcrRepoinitRepositoryInitializerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingJcrRepoinitRepositoryInitializerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.references 
     * @param {Array.<String>} opts.scripts 
     * @param {module:api/ConfigmgrApi~orgApacheSlingJcrRepoinitRepositoryInitializerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingJcrRepoinitRepositoryInitializerInfo}
     */
    this.orgApacheSlingJcrRepoinitRepositoryInitializer = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'references': {
          value: opts['references'],
          collectionFormat: 'multi'
        },
        'scripts': {
          value: opts['scripts'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingJcrRepoinitRepositoryInitializerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.jcr.repoinit.RepositoryInitializer', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.resourceResolverSearchpath 
     * @param {Boolean} opts.resourceResolverManglenamespaces 
     * @param {Boolean} opts.resourceResolverAllowDirect 
     * @param {Array.<String>} opts.resourceResolverRequiredProviders 
     * @param {Array.<String>} opts.resourceResolverRequiredProvidernames 
     * @param {Array.<String>} opts.resourceResolverVirtual 
     * @param {Array.<String>} opts.resourceResolverMapping 
     * @param {String} opts.resourceResolverMapLocation 
     * @param {Array.<String>} opts.resourceResolverMapObservation 
     * @param {Number} opts.resourceResolverDefaultVanityRedirectStatus 
     * @param {Boolean} opts.resourceResolverEnableVanitypath 
     * @param {Number} opts.resourceResolverVanitypathMaxEntries 
     * @param {Boolean} opts.resourceResolverVanitypathMaxEntriesStartup 
     * @param {Number} opts.resourceResolverVanitypathBloomfilterMaxBytes 
     * @param {Boolean} opts.resourceResolverOptimizeAliasResolution 
     * @param {Array.<String>} opts.resourceResolverVanitypathWhitelist 
     * @param {Array.<String>} opts.resourceResolverVanitypathBlacklist 
     * @param {Boolean} opts.resourceResolverVanityPrecedence 
     * @param {Boolean} opts.resourceResolverProviderhandlingParanoid 
     * @param {Boolean} opts.resourceResolverLogClosing 
     * @param {Boolean} opts.resourceResolverLogUnclosed 
     * @param {module:api/ConfigmgrApi~orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo}
     */
    this.orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'resource.resolver.manglenamespaces': opts['resourceResolverManglenamespaces'],
        'resource.resolver.allowDirect': opts['resourceResolverAllowDirect'],
        'resource.resolver.map.location': opts['resourceResolverMapLocation'],
        'resource.resolver.default.vanity.redirect.status': opts['resourceResolverDefaultVanityRedirectStatus'],
        'resource.resolver.enable.vanitypath': opts['resourceResolverEnableVanitypath'],
        'resource.resolver.vanitypath.maxEntries': opts['resourceResolverVanitypathMaxEntries'],
        'resource.resolver.vanitypath.maxEntries.startup': opts['resourceResolverVanitypathMaxEntriesStartup'],
        'resource.resolver.vanitypath.bloomfilter.maxBytes': opts['resourceResolverVanitypathBloomfilterMaxBytes'],
        'resource.resolver.optimize.alias.resolution': opts['resourceResolverOptimizeAliasResolution'],
        'resource.resolver.vanity.precedence': opts['resourceResolverVanityPrecedence'],
        'resource.resolver.providerhandling.paranoid': opts['resourceResolverProviderhandlingParanoid'],
        'resource.resolver.log.closing': opts['resourceResolverLogClosing'],
        'resource.resolver.log.unclosed': opts['resourceResolverLogUnclosed'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'resource.resolver.searchpath': {
          value: opts['resourceResolverSearchpath'],
          collectionFormat: 'multi'
        },
        'resource.resolver.required.providers': {
          value: opts['resourceResolverRequiredProviders'],
          collectionFormat: 'multi'
        },
        'resource.resolver.required.providernames': {
          value: opts['resourceResolverRequiredProvidernames'],
          collectionFormat: 'multi'
        },
        'resource.resolver.virtual': {
          value: opts['resourceResolverVirtual'],
          collectionFormat: 'multi'
        },
        'resource.resolver.mapping': {
          value: opts['resourceResolverMapping'],
          collectionFormat: 'multi'
        },
        'resource.resolver.map.observation': {
          value: opts['resourceResolverMapObservation'],
          collectionFormat: 'multi'
        },
        'resource.resolver.vanitypath.whitelist': {
          value: opts['resourceResolverVanitypathWhitelist'],
          collectionFormat: 'multi'
        },
        'resource.resolver.vanitypath.blacklist': {
          value: opts['resourceResolverVanitypathBlacklist'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrResourceResolverFactoryImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingJcrResourceInternalJcrSystemUserValidator operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingJcrResourceInternalJcrSystemUserValidatorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.allowOnlySystemUser 
     * @param {module:api/ConfigmgrApi~orgApacheSlingJcrResourceInternalJcrSystemUserValidatorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo}
     */
    this.orgApacheSlingJcrResourceInternalJcrSystemUserValidator = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'allow.only.system.user': opts['allowOnlySystemUser'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrSystemUserValidator', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.path 
     * @param {String} opts.checkpathPrefix 
     * @param {String} opts.jcrPath 
     * @param {module:api/ConfigmgrApi~orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo}
     */
    this.orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'path': opts['path'],
        'checkpath.prefix': opts['checkpathPrefix'],
        'jcrPath': opts['jcrPath'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.jcr.resourcesecurity.impl.ResourceAccessGateFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingJcrWebdavImplHandlerDefaultHandlerService operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.typeCollections 
     * @param {String} opts.typeNoncollections 
     * @param {String} opts.typeContent 
     * @param {module:api/ConfigmgrApi~orgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo}
     */
    this.orgApacheSlingJcrWebdavImplHandlerDefaultHandlerService = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'service.ranking': opts['serviceRanking'],
        'type.collections': opts['typeCollections'],
        'type.noncollections': opts['typeNoncollections'],
        'type.content': opts['typeContent'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DefaultHandlerService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {module:api/ConfigmgrApi~orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo}
     */
    this.orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'service.ranking': opts['serviceRanking'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DirListingExportHandlerService', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingJcrWebdavImplServletsSimpleWebDavServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.davRoot 
     * @param {Boolean} opts.davCreateAbsoluteUri 
     * @param {String} opts.davRealm 
     * @param {Array.<String>} opts.collectionTypes 
     * @param {Array.<String>} opts.filterPrefixes 
     * @param {String} opts.filterTypes 
     * @param {String} opts.filterUris 
     * @param {String} opts.typeCollections 
     * @param {String} opts.typeNoncollections 
     * @param {String} opts.typeContent 
     * @param {module:api/ConfigmgrApi~orgApacheSlingJcrWebdavImplServletsSimpleWebDavServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo}
     */
    this.orgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'dav.root': opts['davRoot'],
        'dav.create-absolute-uri': opts['davCreateAbsoluteUri'],
        'dav.realm': opts['davRealm'],
        'filter.types': opts['filterTypes'],
        'filter.uris': opts['filterUris'],
        'type.collections': opts['typeCollections'],
        'type.noncollections': opts['typeNoncollections'],
        'type.content': opts['typeContent'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'collection.types': {
          value: opts['collectionTypes'],
          collectionFormat: 'multi'
        },
        'filter.prefixes': {
          value: opts['filterPrefixes'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.jcr.webdav.impl.servlets.SimpleWebDavServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingJmxProviderImplJMXResourceProvider operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingJmxProviderImplJMXResourceProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingJmxProviderImplJMXResourceProviderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.providerRoots 
     * @param {module:api/ConfigmgrApi~orgApacheSlingJmxProviderImplJMXResourceProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingJmxProviderImplJMXResourceProviderInfo}
     */
    this.orgApacheSlingJmxProviderImplJMXResourceProvider = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'provider.roots': opts['providerRoots'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingJmxProviderImplJMXResourceProviderInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.jmx.provider.impl.JMXResourceProvider', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingModelsImplModelAdapterFactory operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingModelsImplModelAdapterFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingModelsImplModelAdapterFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.osgiHttpWhiteboardListener 
     * @param {String} opts.osgiHttpWhiteboardContextSelect 
     * @param {Number} opts.maxRecursionDepth 
     * @param {Number} opts.cleanupJobPeriod 
     * @param {module:api/ConfigmgrApi~orgApacheSlingModelsImplModelAdapterFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingModelsImplModelAdapterFactoryInfo}
     */
    this.orgApacheSlingModelsImplModelAdapterFactory = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'osgi.http.whiteboard.listener': opts['osgiHttpWhiteboardListener'],
        'osgi.http.whiteboard.context.select': opts['osgiHttpWhiteboardContextSelect'],
        'max.recursion.depth': opts['maxRecursionDepth'],
        'cleanup.job.period': opts['cleanupJobPeriod'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingModelsImplModelAdapterFactoryInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.models.impl.ModelAdapterFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingModelsJacksonexporterImplResourceModuleProvider operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingModelsJacksonexporterImplResourceModuleProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.maxRecursionLevels 
     * @param {module:api/ConfigmgrApi~orgApacheSlingModelsJacksonexporterImplResourceModuleProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo}
     */
    this.orgApacheSlingModelsJacksonexporterImplResourceModuleProvider = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'max.recursion.levels': opts['maxRecursionLevels'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.models.jacksonexporter.impl.ResourceModuleProvider', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.felixInventoryPrinterName 
     * @param {String} opts.felixInventoryPrinterTitle 
     * @param {String} opts.path 
     * @param {module:api/ConfigmgrApi~orgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo}
     */
    this.orgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'felix.inventory.printer.name': opts['felixInventoryPrinterName'],
        'felix.inventory.printer.title': opts['felixInventoryPrinterTitle'],
        'path': opts['path'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.resource.inventory.impl.ResourceInventoryPrinterFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingResourcemergerImplMergedResourceProviderFactory operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingResourcemergerImplMergedResourceProviderFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.mergeRoot 
     * @param {Boolean} opts.mergeReadOnly 
     * @param {module:api/ConfigmgrApi~orgApacheSlingResourcemergerImplMergedResourceProviderFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo}
     */
    this.orgApacheSlingResourcemergerImplMergedResourceProviderFactory = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'merge.root': opts['mergeRoot'],
        'merge.readOnly': opts['mergeReadOnly'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.resourcemerger.impl.MergedResourceProviderFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingResourcemergerPickerOverriding operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingResourcemergerPickerOverridingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingResourcemergerPickerOverridingInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.mergeRoot 
     * @param {Boolean} opts.mergeReadOnly 
     * @param {module:api/ConfigmgrApi~orgApacheSlingResourcemergerPickerOverridingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingResourcemergerPickerOverridingInfo}
     */
    this.orgApacheSlingResourcemergerPickerOverriding = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'merge.root': opts['mergeRoot'],
        'merge.readOnly': opts['mergeReadOnly'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingResourcemergerPickerOverridingInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.resourcemerger.picker.overriding', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingScriptingCoreImplScriptCacheImpl operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingScriptingCoreImplScriptCacheImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingScriptingCoreImplScriptCacheImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.orgApacheSlingScriptingCacheSize 
     * @param {Array.<String>} opts.orgApacheSlingScriptingCacheAdditionalExtensions 
     * @param {module:api/ConfigmgrApi~orgApacheSlingScriptingCoreImplScriptCacheImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingScriptingCoreImplScriptCacheImplInfo}
     */
    this.orgApacheSlingScriptingCoreImplScriptCacheImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'org.apache.sling.scripting.cache.size': opts['orgApacheSlingScriptingCacheSize'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'org.apache.sling.scripting.cache.additional_extensions': {
          value: opts['orgApacheSlingScriptingCacheAdditionalExtensions'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingScriptingCoreImplScriptCacheImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptCacheImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingScriptingCoreImplScriptingResourceResolverProvider operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingScriptingCoreImplScriptingResourceResolverProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.logStacktraceOnclose 
     * @param {module:api/ConfigmgrApi~orgApacheSlingScriptingCoreImplScriptingResourceResolverProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo}
     */
    this.orgApacheSlingScriptingCoreImplScriptingResourceResolverProvider = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'log.stacktrace.onclose': opts['logStacktraceOnclose'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptingResourceResolverProviderImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingScriptingJavaImplJavaScriptEngineFactory operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingScriptingJavaImplJavaScriptEngineFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.javaClassdebuginfo 
     * @param {String} opts.javaJavaEncoding 
     * @param {String} opts.javaCompilerSourceVM 
     * @param {String} opts.javaCompilerTargetVM 
     * @param {module:api/ConfigmgrApi~orgApacheSlingScriptingJavaImplJavaScriptEngineFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo}
     */
    this.orgApacheSlingScriptingJavaImplJavaScriptEngineFactory = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'java.classdebuginfo': opts['javaClassdebuginfo'],
        'java.javaEncoding': opts['javaJavaEncoding'],
        'java.compilerSourceVM': opts['javaCompilerSourceVM'],
        'java.compilerTargetVM': opts['javaCompilerTargetVM'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.scripting.java.impl.JavaScriptEngineFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.orgApacheSlingScriptingJavascriptRhinoOptLevel 
     * @param {module:api/ConfigmgrApi~orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo}
     */
    this.orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'org.apache.sling.scripting.javascript.rhino.optLevel': opts['orgApacheSlingScriptingJavascriptRhinoOptLevel'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.scripting.javascript.internal.RhinoJavaScriptEngineFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingScriptingJspJspScriptEngineFactory operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingScriptingJspJspScriptEngineFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.jasperCompilerTargetVM 
     * @param {String} opts.jasperCompilerSourceVM 
     * @param {Boolean} opts.jasperClassdebuginfo 
     * @param {Boolean} opts.jasperEnablePooling 
     * @param {String} opts.jasperIeClassId 
     * @param {Boolean} opts.jasperGenStringAsCharArray 
     * @param {Boolean} opts.jasperKeepgenerated 
     * @param {Boolean} opts.jasperMappedfile 
     * @param {Boolean} opts.jasperTrimSpaces 
     * @param {Boolean} opts.jasperDisplaySourceFragments 
     * @param {Boolean} opts.defaultIsSession 
     * @param {module:api/ConfigmgrApi~orgApacheSlingScriptingJspJspScriptEngineFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo}
     */
    this.orgApacheSlingScriptingJspJspScriptEngineFactory = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'jasper.compilerTargetVM': opts['jasperCompilerTargetVM'],
        'jasper.compilerSourceVM': opts['jasperCompilerSourceVM'],
        'jasper.classdebuginfo': opts['jasperClassdebuginfo'],
        'jasper.enablePooling': opts['jasperEnablePooling'],
        'jasper.ieClassId': opts['jasperIeClassId'],
        'jasper.genStringAsCharArray': opts['jasperGenStringAsCharArray'],
        'jasper.keepgenerated': opts['jasperKeepgenerated'],
        'jasper.mappedfile': opts['jasperMappedfile'],
        'jasper.trimSpaces': opts['jasperTrimSpaces'],
        'jasper.displaySourceFragments': opts['jasperDisplaySourceFragments'],
        'default.is.session': opts['defaultIsSession'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.scripting.jsp.JspScriptEngineFactory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.orgApacheSlingScriptingSightlyJsBindings 
     * @param {module:api/ConfigmgrApi~orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo}
     */
    this.orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'org.apache.sling.scripting.sightly.js.bindings': {
          value: opts['orgApacheSlingScriptingSightlyJsBindings'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.scripting.sightly.js.impl.jsapi.SlyBindingsValuesProvider', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingSecurityImplContentDispositionFilter operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingSecurityImplContentDispositionFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingSecurityImplContentDispositionFilterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.slingContentDispositionPaths 
     * @param {Array.<String>} opts.slingContentDispositionExcludedPaths 
     * @param {Boolean} opts.slingContentDispositionAllPaths 
     * @param {module:api/ConfigmgrApi~orgApacheSlingSecurityImplContentDispositionFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingSecurityImplContentDispositionFilterInfo}
     */
    this.orgApacheSlingSecurityImplContentDispositionFilter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'sling.content.disposition.all.paths': opts['slingContentDispositionAllPaths'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'sling.content.disposition.paths': {
          value: opts['slingContentDispositionPaths'],
          collectionFormat: 'multi'
        },
        'sling.content.disposition.excluded.paths': {
          value: opts['slingContentDispositionExcludedPaths'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingSecurityImplContentDispositionFilterInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.security.impl.ContentDispositionFilter', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingSecurityImplReferrerFilter operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingSecurityImplReferrerFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingSecurityImplReferrerFilterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.allowEmpty 
     * @param {Array.<String>} opts.allowHosts 
     * @param {Array.<String>} opts.allowHostsRegexp 
     * @param {Array.<String>} opts.filterMethods 
     * @param {Array.<String>} opts.excludeAgentsRegexp 
     * @param {module:api/ConfigmgrApi~orgApacheSlingSecurityImplReferrerFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingSecurityImplReferrerFilterInfo}
     */
    this.orgApacheSlingSecurityImplReferrerFilter = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'allow.empty': opts['allowEmpty'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'allow.hosts': {
          value: opts['allowHosts'],
          collectionFormat: 'multi'
        },
        'allow.hosts.regexp': {
          value: opts['allowHostsRegexp'],
          collectionFormat: 'multi'
        },
        'filter.methods': {
          value: opts['filterMethods'],
          collectionFormat: 'multi'
        },
        'exclude.agents.regexp': {
          value: opts['excludeAgentsRegexp'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingSecurityImplReferrerFilterInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.security.impl.ReferrerFilter', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingServiceusermappingImplServiceUserMapperImpl operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingServiceusermappingImplServiceUserMapperImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.userMapping 
     * @param {String} opts.userDefault 
     * @param {Boolean} opts.userEnableDefaultMapping 
     * @param {Boolean} opts.requireValidation 
     * @param {module:api/ConfigmgrApi~orgApacheSlingServiceusermappingImplServiceUserMapperImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo}
     */
    this.orgApacheSlingServiceusermappingImplServiceUserMapperImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'user.default': opts['userDefault'],
        'user.enable.default.mapping': opts['userEnableDefaultMapping'],
        'require.validation': opts['requireValidation'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'user.mapping': {
          value: opts['userMapping'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingServiceusermappingImplServiceUserMapperImplAmended operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {Array.<String>} opts.userMapping 
     * @param {module:api/ConfigmgrApi~orgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo}
     */
    this.orgApacheSlingServiceusermappingImplServiceUserMapperImplAmended = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'service.ranking': opts['serviceRanking'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'user.mapping': {
          value: opts['userMapping'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl.amended', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingServletsGetDefaultGetServlet operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingServletsGetDefaultGetServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingServletsGetDefaultGetServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.aliases 
     * @param {Boolean} opts.index 
     * @param {Array.<String>} opts.indexFiles 
     * @param {Boolean} opts.enableHtml 
     * @param {Boolean} opts.enableJson 
     * @param {Boolean} opts.enableTxt 
     * @param {Boolean} opts.enableXml 
     * @param {Number} opts.jsonMaximumresults 
     * @param {Boolean} opts.ecmaSuport 
     * @param {module:api/ConfigmgrApi~orgApacheSlingServletsGetDefaultGetServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingServletsGetDefaultGetServletInfo}
     */
    this.orgApacheSlingServletsGetDefaultGetServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'index': opts['index'],
        'enable.html': opts['enableHtml'],
        'enable.json': opts['enableJson'],
        'enable.txt': opts['enableTxt'],
        'enable.xml': opts['enableXml'],
        'json.maximumresults': opts['jsonMaximumresults'],
        'ecmaSuport': opts['ecmaSuport'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'aliases': {
          value: opts['aliases'],
          collectionFormat: 'multi'
        },
        'index.files': {
          value: opts['indexFiles'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingServletsGetDefaultGetServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.servlets.get.DefaultGetServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingServletsGetImplVersionVersionInfoServlet operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingServletsGetImplVersionVersionInfoServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.slingServletSelectors 
     * @param {Boolean} opts.ecmaSuport 
     * @param {module:api/ConfigmgrApi~orgApacheSlingServletsGetImplVersionVersionInfoServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo}
     */
    this.orgApacheSlingServletsGetImplVersionVersionInfoServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'ecmaSuport': opts['ecmaSuport'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'sling.servlet.selectors': {
          value: opts['slingServletSelectors'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.servlets.get.impl.version.VersionInfoServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingServletsPostImplHelperChunkCleanUpTask operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingServletsPostImplHelperChunkCleanUpTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.schedulerExpression 
     * @param {Boolean} opts.schedulerConcurrent 
     * @param {Number} opts.chunkCleanupAge 
     * @param {module:api/ConfigmgrApi~orgApacheSlingServletsPostImplHelperChunkCleanUpTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo}
     */
    this.orgApacheSlingServletsPostImplHelperChunkCleanUpTask = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'scheduler.expression': opts['schedulerExpression'],
        'scheduler.concurrent': opts['schedulerConcurrent'],
        'chunk.cleanup.age': opts['chunkCleanupAge'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.servlets.post.impl.helper.ChunkCleanUpTask', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingServletsPostImplSlingPostServlet operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingServletsPostImplSlingPostServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingServletsPostImplSlingPostServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.servletPostDateFormats 
     * @param {Array.<String>} opts.servletPostNodeNameHints 
     * @param {Number} opts.servletPostNodeNameMaxLength 
     * @param {Boolean} opts.servletPostCheckinNewVersionableNodes 
     * @param {Boolean} opts.servletPostAutoCheckout 
     * @param {Boolean} opts.servletPostAutoCheckin 
     * @param {String} opts.servletPostIgnorePattern 
     * @param {module:api/ConfigmgrApi~orgApacheSlingServletsPostImplSlingPostServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingServletsPostImplSlingPostServletInfo}
     */
    this.orgApacheSlingServletsPostImplSlingPostServlet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'servlet.post.nodeNameMaxLength': opts['servletPostNodeNameMaxLength'],
        'servlet.post.checkinNewVersionableNodes': opts['servletPostCheckinNewVersionableNodes'],
        'servlet.post.autoCheckout': opts['servletPostAutoCheckout'],
        'servlet.post.autoCheckin': opts['servletPostAutoCheckin'],
        'servlet.post.ignorePattern': opts['servletPostIgnorePattern'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'servlet.post.dateFormats': {
          value: opts['servletPostDateFormats'],
          collectionFormat: 'multi'
        },
        'servlet.post.nodeNameHints': {
          value: opts['servletPostNodeNameHints'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingServletsPostImplSlingPostServletInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.servlets.post.impl.SlingPostServlet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingServletsResolverSlingServletResolver operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingServletsResolverSlingServletResolverCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingServletsResolverSlingServletResolverInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.servletresolverServletRoot 
     * @param {Number} opts.servletresolverCacheSize 
     * @param {Array.<String>} opts.servletresolverPaths 
     * @param {Array.<String>} opts.servletresolverDefaultExtensions 
     * @param {module:api/ConfigmgrApi~orgApacheSlingServletsResolverSlingServletResolverCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingServletsResolverSlingServletResolverInfo}
     */
    this.orgApacheSlingServletsResolverSlingServletResolver = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'servletresolver.servletRoot': opts['servletresolverServletRoot'],
        'servletresolver.cacheSize': opts['servletresolverCacheSize'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'servletresolver.paths': {
          value: opts['servletresolverPaths'],
          collectionFormat: 'multi'
        },
        'servletresolver.defaultExtensions': {
          value: opts['servletresolverDefaultExtensions'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingServletsResolverSlingServletResolverInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.servlets.resolver.SlingServletResolver', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingSettingsImplSlingSettingsServiceImpl operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingSettingsImplSlingSettingsServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.slingName 
     * @param {String} opts.slingDescription 
     * @param {module:api/ConfigmgrApi~orgApacheSlingSettingsImplSlingSettingsServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo}
     */
    this.orgApacheSlingSettingsImplSlingSettingsServiceImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'sling.name': opts['slingName'],
        'sling.description': opts['slingDescription'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.settings.impl.SlingSettingsServiceImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingStartupfilterImplStartupFilterImpl operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingStartupfilterImplStartupFilterImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingStartupfilterImplStartupFilterImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.activeByDefault 
     * @param {String} opts.defaultMessage 
     * @param {module:api/ConfigmgrApi~orgApacheSlingStartupfilterImplStartupFilterImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingStartupfilterImplStartupFilterImplInfo}
     */
    this.orgApacheSlingStartupfilterImplStartupFilterImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'active.by.default': opts['activeByDefault'],
        'default.message': opts['defaultMessage'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingStartupfilterImplStartupFilterImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.startupfilter.impl.StartupFilterImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingTenantInternalTenantProviderImpl operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingTenantInternalTenantProviderImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingTenantInternalTenantProviderImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.tenantRoot 
     * @param {Array.<String>} opts.tenantPathMatcher 
     * @param {module:api/ConfigmgrApi~orgApacheSlingTenantInternalTenantProviderImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingTenantInternalTenantProviderImplInfo}
     */
    this.orgApacheSlingTenantInternalTenantProviderImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'tenant.root': opts['tenantRoot'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'tenant.path.matcher': {
          value: opts['tenantPathMatcher'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingTenantInternalTenantProviderImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.tenant.internal.TenantProviderImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingTracerInternalLogTracer operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingTracerInternalLogTracerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingTracerInternalLogTracerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.tracerSets 
     * @param {Boolean} opts.enabled 
     * @param {Boolean} opts.servletEnabled 
     * @param {Number} opts.recordingCacheSizeInMB 
     * @param {Number} opts.recordingCacheDurationInSecs 
     * @param {Boolean} opts.recordingCompressionEnabled 
     * @param {Boolean} opts.gzipResponse 
     * @param {module:api/ConfigmgrApi~orgApacheSlingTracerInternalLogTracerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingTracerInternalLogTracerInfo}
     */
    this.orgApacheSlingTracerInternalLogTracer = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'enabled': opts['enabled'],
        'servletEnabled': opts['servletEnabled'],
        'recordingCacheSizeInMB': opts['recordingCacheSizeInMB'],
        'recordingCacheDurationInSecs': opts['recordingCacheDurationInSecs'],
        'recordingCompressionEnabled': opts['recordingCompressionEnabled'],
        'gzipResponse': opts['gzipResponse'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
        'tracerSets': {
          value: opts['tracerSets'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingTracerInternalLogTracerInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.tracer.internal.LogTracer', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingXssImplXSSFilterImpl operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingXssImplXSSFilterImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingXssImplXSSFilterImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.policyPath 
     * @param {module:api/ConfigmgrApi~orgApacheSlingXssImplXSSFilterImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingXssImplXSSFilterImplInfo}
     */
    this.orgApacheSlingXssImplXSSFilterImpl = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'policyPath': opts['policyPath'],
      };
      var collectionQueryParams = {
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = OrgApacheSlingXssImplXSSFilterImplInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.xss.impl.XSSFilterImpl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
