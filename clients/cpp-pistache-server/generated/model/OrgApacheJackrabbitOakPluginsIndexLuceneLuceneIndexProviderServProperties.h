/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties.h
 *
 * 
 */

#ifndef OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties_H_
#define OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties_H_


#include "ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties
    : public ModelBase
{
public:
    OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties();
    virtual ~OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties members

    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getDisabled() const;
    void setDisabled(ConfigNodePropertyBoolean const& value);
    bool disabledIsSet() const;
    void unsetDisabled();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getDebug() const;
    void setDebug(ConfigNodePropertyBoolean const& value);
    bool debugIsSet() const;
    void unsetDebug();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getLocalIndexDir() const;
    void setLocalIndexDir(ConfigNodePropertyString const& value);
    bool localIndexDirIsSet() const;
    void unsetLocalIndexDir();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getEnableOpenIndexAsync() const;
    void setEnableOpenIndexAsync(ConfigNodePropertyBoolean const& value);
    bool enableOpenIndexAsyncIsSet() const;
    void unsetEnableOpenIndexAsync();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getThreadPoolSize() const;
    void setThreadPoolSize(ConfigNodePropertyInteger const& value);
    bool threadPoolSizeIsSet() const;
    void unsetThreadPoolSize();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getPrefetchIndexFiles() const;
    void setPrefetchIndexFiles(ConfigNodePropertyBoolean const& value);
    bool prefetchIndexFilesIsSet() const;
    void unsetPrefetchIndexFiles();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getExtractedTextCacheSizeInMB() const;
    void setExtractedTextCacheSizeInMB(ConfigNodePropertyInteger const& value);
    bool extractedTextCacheSizeInMBIsSet() const;
    void unsetExtractedTextCacheSizeInMB();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getExtractedTextCacheExpiryInSecs() const;
    void setExtractedTextCacheExpiryInSecs(ConfigNodePropertyInteger const& value);
    bool extractedTextCacheExpiryInSecsIsSet() const;
    void unsetExtractedTextCacheExpiryInSecs();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getAlwaysUsePreExtractedCache() const;
    void setAlwaysUsePreExtractedCache(ConfigNodePropertyBoolean const& value);
    bool alwaysUsePreExtractedCacheIsSet() const;
    void unsetAlwaysUsePreExtractedCache();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getBooleanClauseLimit() const;
    void setBooleanClauseLimit(ConfigNodePropertyInteger const& value);
    bool booleanClauseLimitIsSet() const;
    void unsetBooleanClauseLimit();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getEnableHybridIndexing() const;
    void setEnableHybridIndexing(ConfigNodePropertyBoolean const& value);
    bool enableHybridIndexingIsSet() const;
    void unsetEnableHybridIndexing();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getHybridQueueSize() const;
    void setHybridQueueSize(ConfigNodePropertyInteger const& value);
    bool hybridQueueSizeIsSet() const;
    void unsetHybridQueueSize();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getDisableStoredIndexDefinition() const;
    void setDisableStoredIndexDefinition(ConfigNodePropertyBoolean const& value);
    bool disableStoredIndexDefinitionIsSet() const;
    void unsetDisableStoredIndexDefinition();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getDeletedBlobsCollectionEnabled() const;
    void setDeletedBlobsCollectionEnabled(ConfigNodePropertyBoolean const& value);
    bool deletedBlobsCollectionEnabledIsSet() const;
    void unsetDeletedBlobsCollectionEnabled();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getPropIndexCleanerIntervalInSecs() const;
    void setPropIndexCleanerIntervalInSecs(ConfigNodePropertyInteger const& value);
    bool propIndexCleanerIntervalInSecsIsSet() const;
    void unsetPropIndexCleanerIntervalInSecs();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getEnableSingleBlobIndexFiles() const;
    void setEnableSingleBlobIndexFiles(ConfigNodePropertyBoolean const& value);
    bool enableSingleBlobIndexFilesIsSet() const;
    void unsetEnableSingleBlobIndexFiles();

protected:
    ConfigNodePropertyBoolean m_Disabled;
    bool m_DisabledIsSet;
    ConfigNodePropertyBoolean m_Debug;
    bool m_DebugIsSet;
    ConfigNodePropertyString m_LocalIndexDir;
    bool m_LocalIndexDirIsSet;
    ConfigNodePropertyBoolean m_EnableOpenIndexAsync;
    bool m_EnableOpenIndexAsyncIsSet;
    ConfigNodePropertyInteger m_ThreadPoolSize;
    bool m_ThreadPoolSizeIsSet;
    ConfigNodePropertyBoolean m_PrefetchIndexFiles;
    bool m_PrefetchIndexFilesIsSet;
    ConfigNodePropertyInteger m_ExtractedTextCacheSizeInMB;
    bool m_ExtractedTextCacheSizeInMBIsSet;
    ConfigNodePropertyInteger m_ExtractedTextCacheExpiryInSecs;
    bool m_ExtractedTextCacheExpiryInSecsIsSet;
    ConfigNodePropertyBoolean m_AlwaysUsePreExtractedCache;
    bool m_AlwaysUsePreExtractedCacheIsSet;
    ConfigNodePropertyInteger m_BooleanClauseLimit;
    bool m_BooleanClauseLimitIsSet;
    ConfigNodePropertyBoolean m_EnableHybridIndexing;
    bool m_EnableHybridIndexingIsSet;
    ConfigNodePropertyInteger m_HybridQueueSize;
    bool m_HybridQueueSizeIsSet;
    ConfigNodePropertyBoolean m_DisableStoredIndexDefinition;
    bool m_DisableStoredIndexDefinitionIsSet;
    ConfigNodePropertyBoolean m_DeletedBlobsCollectionEnabled;
    bool m_DeletedBlobsCollectionEnabledIsSet;
    ConfigNodePropertyInteger m_PropIndexCleanerIntervalInSecs;
    bool m_PropIndexCleanerIntervalInSecsIsSet;
    ConfigNodePropertyBoolean m_EnableSingleBlobIndexFiles;
    bool m_EnableSingleBlobIndexFilesIsSet;
};

}
}
}
}

#endif /* OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties_H_ */
