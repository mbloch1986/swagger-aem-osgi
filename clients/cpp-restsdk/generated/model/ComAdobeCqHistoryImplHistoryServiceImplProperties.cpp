/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeCqHistoryImplHistoryServiceImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeCqHistoryImplHistoryServiceImplProperties::ComAdobeCqHistoryImplHistoryServiceImplProperties()
{
    m_History_service_resourceTypesIsSet = false;
    m_History_service_pathFilterIsSet = false;
}

ComAdobeCqHistoryImplHistoryServiceImplProperties::~ComAdobeCqHistoryImplHistoryServiceImplProperties()
{
}

void ComAdobeCqHistoryImplHistoryServiceImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeCqHistoryImplHistoryServiceImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_History_service_resourceTypesIsSet)
    {
        val[utility::conversions::to_string_t("history.service.resourceTypes")] = ModelBase::toJson(m_History_service_resourceTypes);
    }
    if(m_History_service_pathFilterIsSet)
    {
        val[utility::conversions::to_string_t("history.service.pathFilter")] = ModelBase::toJson(m_History_service_pathFilter);
    }

    return val;
}

void ComAdobeCqHistoryImplHistoryServiceImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("history.service.resourceTypes")))
    {
        if(!val[utility::conversions::to_string_t("history.service.resourceTypes")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("history.service.resourceTypes")]);
            setHistoryServiceResourceTypes( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("history.service.pathFilter")))
    {
        if(!val[utility::conversions::to_string_t("history.service.pathFilter")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("history.service.pathFilter")]);
            setHistoryServicePathFilter( newItem );
        }
    }
}

void ComAdobeCqHistoryImplHistoryServiceImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_History_service_resourceTypesIsSet)
    {
        if (m_History_service_resourceTypes.get())
        {
            m_History_service_resourceTypes->toMultipart(multipart, utility::conversions::to_string_t("history.service.resourceTypes."));
        }
    }
    if(m_History_service_pathFilterIsSet)
    {
        if (m_History_service_pathFilter.get())
        {
            m_History_service_pathFilter->toMultipart(multipart, utility::conversions::to_string_t("history.service.pathFilter."));
        }
    }
}

void ComAdobeCqHistoryImplHistoryServiceImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("history.service.resourceTypes")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("history.service.resourceTypes")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("history.service.resourceTypes."));
            setHistoryServiceResourceTypes( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("history.service.pathFilter")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("history.service.pathFilter")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("history.service.pathFilter."));
            setHistoryServicePathFilter( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqHistoryImplHistoryServiceImplProperties::getHistoryServiceResourceTypes() const
{
    return m_History_service_resourceTypes;
}


void ComAdobeCqHistoryImplHistoryServiceImplProperties::setHistoryServiceResourceTypes(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_History_service_resourceTypes = value;
    m_History_service_resourceTypesIsSet = true;
}
bool ComAdobeCqHistoryImplHistoryServiceImplProperties::historyServiceResourceTypesIsSet() const
{
    return m_History_service_resourceTypesIsSet;
}

void ComAdobeCqHistoryImplHistoryServiceImplProperties::unsetHistory_service_resourceTypes()
{
    m_History_service_resourceTypesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqHistoryImplHistoryServiceImplProperties::getHistoryServicePathFilter() const
{
    return m_History_service_pathFilter;
}


void ComAdobeCqHistoryImplHistoryServiceImplProperties::setHistoryServicePathFilter(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_History_service_pathFilter = value;
    m_History_service_pathFilterIsSet = true;
}
bool ComAdobeCqHistoryImplHistoryServiceImplProperties::historyServicePathFilterIsSet() const
{
    return m_History_service_pathFilterIsSet;
}

void ComAdobeCqHistoryImplHistoryServiceImplProperties::unsetHistory_service_pathFilter()
{
    m_History_service_pathFilterIsSet = false;
}

}
}
}
}

