/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import org.openapitools.client.model.ConfigNodePropertyBoolean;
import org.openapitools.client.model.ConfigNodePropertyDropDown;
import org.openapitools.client.model.ConfigNodePropertyInteger;
import org.openapitools.client.model.ConfigNodePropertyString;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties {
  
  @SerializedName("name")
  private ConfigNodePropertyString name = null;
  @SerializedName("minPoolSize")
  private ConfigNodePropertyInteger minPoolSize = null;
  @SerializedName("maxPoolSize")
  private ConfigNodePropertyInteger maxPoolSize = null;
  @SerializedName("queueSize")
  private ConfigNodePropertyInteger queueSize = null;
  @SerializedName("maxThreadAge")
  private ConfigNodePropertyInteger maxThreadAge = null;
  @SerializedName("keepAliveTime")
  private ConfigNodePropertyInteger keepAliveTime = null;
  @SerializedName("blockPolicy")
  private ConfigNodePropertyDropDown blockPolicy = null;
  @SerializedName("shutdownGraceful")
  private ConfigNodePropertyBoolean shutdownGraceful = null;
  @SerializedName("daemon")
  private ConfigNodePropertyBoolean daemon = null;
  @SerializedName("shutdownWaitTime")
  private ConfigNodePropertyInteger shutdownWaitTime = null;
  @SerializedName("priority")
  private ConfigNodePropertyDropDown priority = null;

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyString getName() {
    return name;
  }
  public void setName(ConfigNodePropertyString name) {
    this.name = name;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyInteger getMinPoolSize() {
    return minPoolSize;
  }
  public void setMinPoolSize(ConfigNodePropertyInteger minPoolSize) {
    this.minPoolSize = minPoolSize;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyInteger getMaxPoolSize() {
    return maxPoolSize;
  }
  public void setMaxPoolSize(ConfigNodePropertyInteger maxPoolSize) {
    this.maxPoolSize = maxPoolSize;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyInteger getQueueSize() {
    return queueSize;
  }
  public void setQueueSize(ConfigNodePropertyInteger queueSize) {
    this.queueSize = queueSize;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyInteger getMaxThreadAge() {
    return maxThreadAge;
  }
  public void setMaxThreadAge(ConfigNodePropertyInteger maxThreadAge) {
    this.maxThreadAge = maxThreadAge;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyInteger getKeepAliveTime() {
    return keepAliveTime;
  }
  public void setKeepAliveTime(ConfigNodePropertyInteger keepAliveTime) {
    this.keepAliveTime = keepAliveTime;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyDropDown getBlockPolicy() {
    return blockPolicy;
  }
  public void setBlockPolicy(ConfigNodePropertyDropDown blockPolicy) {
    this.blockPolicy = blockPolicy;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyBoolean getShutdownGraceful() {
    return shutdownGraceful;
  }
  public void setShutdownGraceful(ConfigNodePropertyBoolean shutdownGraceful) {
    this.shutdownGraceful = shutdownGraceful;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyBoolean getDaemon() {
    return daemon;
  }
  public void setDaemon(ConfigNodePropertyBoolean daemon) {
    this.daemon = daemon;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyInteger getShutdownWaitTime() {
    return shutdownWaitTime;
  }
  public void setShutdownWaitTime(ConfigNodePropertyInteger shutdownWaitTime) {
    this.shutdownWaitTime = shutdownWaitTime;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyDropDown getPriority() {
    return priority;
  }
  public void setPriority(ConfigNodePropertyDropDown priority) {
    this.priority = priority;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties = (OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties) o;
    return (this.name == null ? orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.name == null : this.name.equals(orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.name)) &&
        (this.minPoolSize == null ? orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.minPoolSize == null : this.minPoolSize.equals(orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.minPoolSize)) &&
        (this.maxPoolSize == null ? orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.maxPoolSize == null : this.maxPoolSize.equals(orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.maxPoolSize)) &&
        (this.queueSize == null ? orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.queueSize == null : this.queueSize.equals(orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.queueSize)) &&
        (this.maxThreadAge == null ? orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.maxThreadAge == null : this.maxThreadAge.equals(orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.maxThreadAge)) &&
        (this.keepAliveTime == null ? orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.keepAliveTime == null : this.keepAliveTime.equals(orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.keepAliveTime)) &&
        (this.blockPolicy == null ? orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.blockPolicy == null : this.blockPolicy.equals(orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.blockPolicy)) &&
        (this.shutdownGraceful == null ? orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.shutdownGraceful == null : this.shutdownGraceful.equals(orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.shutdownGraceful)) &&
        (this.daemon == null ? orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.daemon == null : this.daemon.equals(orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.daemon)) &&
        (this.shutdownWaitTime == null ? orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.shutdownWaitTime == null : this.shutdownWaitTime.equals(orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.shutdownWaitTime)) &&
        (this.priority == null ? orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.priority == null : this.priority.equals(orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.priority));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.name == null ? 0: this.name.hashCode());
    result = 31 * result + (this.minPoolSize == null ? 0: this.minPoolSize.hashCode());
    result = 31 * result + (this.maxPoolSize == null ? 0: this.maxPoolSize.hashCode());
    result = 31 * result + (this.queueSize == null ? 0: this.queueSize.hashCode());
    result = 31 * result + (this.maxThreadAge == null ? 0: this.maxThreadAge.hashCode());
    result = 31 * result + (this.keepAliveTime == null ? 0: this.keepAliveTime.hashCode());
    result = 31 * result + (this.blockPolicy == null ? 0: this.blockPolicy.hashCode());
    result = 31 * result + (this.shutdownGraceful == null ? 0: this.shutdownGraceful.hashCode());
    result = 31 * result + (this.daemon == null ? 0: this.daemon.hashCode());
    result = 31 * result + (this.shutdownWaitTime == null ? 0: this.shutdownWaitTime.hashCode());
    result = 31 * result + (this.priority == null ? 0: this.priority.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties {\n");
    
    sb.append("  name: ").append(name).append("\n");
    sb.append("  minPoolSize: ").append(minPoolSize).append("\n");
    sb.append("  maxPoolSize: ").append(maxPoolSize).append("\n");
    sb.append("  queueSize: ").append(queueSize).append("\n");
    sb.append("  maxThreadAge: ").append(maxThreadAge).append("\n");
    sb.append("  keepAliveTime: ").append(keepAliveTime).append("\n");
    sb.append("  blockPolicy: ").append(blockPolicy).append("\n");
    sb.append("  shutdownGraceful: ").append(shutdownGraceful).append("\n");
    sb.append("  daemon: ").append(daemon).append("\n");
    sb.append("  shutdownWaitTime: ").append(shutdownWaitTime).append("\n");
    sb.append("  priority: ").append(priority).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
