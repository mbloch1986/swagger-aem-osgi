/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties()
{
    m_AsyncConfigsIsSet = false;
    m_LeaseTimeOutMinutesIsSet = false;
    m_FailingIndexTimeoutSecondsIsSet = false;
    m_ErrorWarnIntervalSecondsIsSet = false;
}

OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::~OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties()
{
}

void OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_AsyncConfigsIsSet)
    {
        val[utility::conversions::to_string_t("asyncConfigs")] = ModelBase::toJson(m_AsyncConfigs);
    }
    if(m_LeaseTimeOutMinutesIsSet)
    {
        val[utility::conversions::to_string_t("leaseTimeOutMinutes")] = ModelBase::toJson(m_LeaseTimeOutMinutes);
    }
    if(m_FailingIndexTimeoutSecondsIsSet)
    {
        val[utility::conversions::to_string_t("failingIndexTimeoutSeconds")] = ModelBase::toJson(m_FailingIndexTimeoutSeconds);
    }
    if(m_ErrorWarnIntervalSecondsIsSet)
    {
        val[utility::conversions::to_string_t("errorWarnIntervalSeconds")] = ModelBase::toJson(m_ErrorWarnIntervalSeconds);
    }

    return val;
}

void OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("asyncConfigs")))
    {
        if(!val[utility::conversions::to_string_t("asyncConfigs")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("asyncConfigs")]);
            setAsyncConfigs( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("leaseTimeOutMinutes")))
    {
        if(!val[utility::conversions::to_string_t("leaseTimeOutMinutes")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("leaseTimeOutMinutes")]);
            setLeaseTimeOutMinutes( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("failingIndexTimeoutSeconds")))
    {
        if(!val[utility::conversions::to_string_t("failingIndexTimeoutSeconds")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("failingIndexTimeoutSeconds")]);
            setFailingIndexTimeoutSeconds( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("errorWarnIntervalSeconds")))
    {
        if(!val[utility::conversions::to_string_t("errorWarnIntervalSeconds")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("errorWarnIntervalSeconds")]);
            setErrorWarnIntervalSeconds( newItem );
        }
    }
}

void OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_AsyncConfigsIsSet)
    {
        if (m_AsyncConfigs.get())
        {
            m_AsyncConfigs->toMultipart(multipart, utility::conversions::to_string_t("asyncConfigs."));
        }
    }
    if(m_LeaseTimeOutMinutesIsSet)
    {
        if (m_LeaseTimeOutMinutes.get())
        {
            m_LeaseTimeOutMinutes->toMultipart(multipart, utility::conversions::to_string_t("leaseTimeOutMinutes."));
        }
    }
    if(m_FailingIndexTimeoutSecondsIsSet)
    {
        if (m_FailingIndexTimeoutSeconds.get())
        {
            m_FailingIndexTimeoutSeconds->toMultipart(multipart, utility::conversions::to_string_t("failingIndexTimeoutSeconds."));
        }
    }
    if(m_ErrorWarnIntervalSecondsIsSet)
    {
        if (m_ErrorWarnIntervalSeconds.get())
        {
            m_ErrorWarnIntervalSeconds->toMultipart(multipart, utility::conversions::to_string_t("errorWarnIntervalSeconds."));
        }
    }
}

void OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("asyncConfigs")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("asyncConfigs")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("asyncConfigs."));
            setAsyncConfigs( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("leaseTimeOutMinutes")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("leaseTimeOutMinutes")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("leaseTimeOutMinutes."));
            setLeaseTimeOutMinutes( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("failingIndexTimeoutSeconds")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("failingIndexTimeoutSeconds")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("failingIndexTimeoutSeconds."));
            setFailingIndexTimeoutSeconds( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("errorWarnIntervalSeconds")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("errorWarnIntervalSeconds")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("errorWarnIntervalSeconds."));
            setErrorWarnIntervalSeconds( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::getAsyncConfigs() const
{
    return m_AsyncConfigs;
}


void OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::setAsyncConfigs(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_AsyncConfigs = value;
    m_AsyncConfigsIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::asyncConfigsIsSet() const
{
    return m_AsyncConfigsIsSet;
}

void OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::unsetAsyncConfigs()
{
    m_AsyncConfigsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::getLeaseTimeOutMinutes() const
{
    return m_LeaseTimeOutMinutes;
}


void OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::setLeaseTimeOutMinutes(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_LeaseTimeOutMinutes = value;
    m_LeaseTimeOutMinutesIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::leaseTimeOutMinutesIsSet() const
{
    return m_LeaseTimeOutMinutesIsSet;
}

void OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::unsetLeaseTimeOutMinutes()
{
    m_LeaseTimeOutMinutesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::getFailingIndexTimeoutSeconds() const
{
    return m_FailingIndexTimeoutSeconds;
}


void OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::setFailingIndexTimeoutSeconds(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_FailingIndexTimeoutSeconds = value;
    m_FailingIndexTimeoutSecondsIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::failingIndexTimeoutSecondsIsSet() const
{
    return m_FailingIndexTimeoutSecondsIsSet;
}

void OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::unsetFailingIndexTimeoutSeconds()
{
    m_FailingIndexTimeoutSecondsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::getErrorWarnIntervalSeconds() const
{
    return m_ErrorWarnIntervalSeconds;
}


void OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::setErrorWarnIntervalSeconds(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_ErrorWarnIntervalSeconds = value;
    m_ErrorWarnIntervalSecondsIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::errorWarnIntervalSecondsIsSet() const
{
    return m_ErrorWarnIntervalSecondsIsSet;
}

void OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties::unsetErrorWarnIntervalSeconds()
{
    m_ErrorWarnIntervalSecondsIsSet = false;
}

}
}
}
}

