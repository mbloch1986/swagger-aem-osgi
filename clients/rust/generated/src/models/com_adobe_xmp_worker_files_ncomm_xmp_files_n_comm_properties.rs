/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeXmpWorkerFilesNcommXmpFilesNCommProperties {
  #[serde(rename = "maxConnections")]
  max_connections: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "maxRequests")]
  max_requests: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "requestTimeout")]
  request_timeout: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "logDir")]
  log_dir: Option<::models::ConfigNodePropertyString>
}

impl ComAdobeXmpWorkerFilesNcommXmpFilesNCommProperties {
  pub fn new() -> ComAdobeXmpWorkerFilesNcommXmpFilesNCommProperties {
    ComAdobeXmpWorkerFilesNcommXmpFilesNCommProperties {
      max_connections: None,
      max_requests: None,
      request_timeout: None,
      log_dir: None
    }
  }

  pub fn set_max_connections(&mut self, max_connections: ::models::ConfigNodePropertyString) {
    self.max_connections = Some(max_connections);
  }

  pub fn with_max_connections(mut self, max_connections: ::models::ConfigNodePropertyString) -> ComAdobeXmpWorkerFilesNcommXmpFilesNCommProperties {
    self.max_connections = Some(max_connections);
    self
  }

  pub fn max_connections(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.max_connections.as_ref()
  }

  pub fn reset_max_connections(&mut self) {
    self.max_connections = None;
  }

  pub fn set_max_requests(&mut self, max_requests: ::models::ConfigNodePropertyString) {
    self.max_requests = Some(max_requests);
  }

  pub fn with_max_requests(mut self, max_requests: ::models::ConfigNodePropertyString) -> ComAdobeXmpWorkerFilesNcommXmpFilesNCommProperties {
    self.max_requests = Some(max_requests);
    self
  }

  pub fn max_requests(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.max_requests.as_ref()
  }

  pub fn reset_max_requests(&mut self) {
    self.max_requests = None;
  }

  pub fn set_request_timeout(&mut self, request_timeout: ::models::ConfigNodePropertyString) {
    self.request_timeout = Some(request_timeout);
  }

  pub fn with_request_timeout(mut self, request_timeout: ::models::ConfigNodePropertyString) -> ComAdobeXmpWorkerFilesNcommXmpFilesNCommProperties {
    self.request_timeout = Some(request_timeout);
    self
  }

  pub fn request_timeout(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.request_timeout.as_ref()
  }

  pub fn reset_request_timeout(&mut self) {
    self.request_timeout = None;
  }

  pub fn set_log_dir(&mut self, log_dir: ::models::ConfigNodePropertyString) {
    self.log_dir = Some(log_dir);
  }

  pub fn with_log_dir(mut self, log_dir: ::models::ConfigNodePropertyString) -> ComAdobeXmpWorkerFilesNcommXmpFilesNCommProperties {
    self.log_dir = Some(log_dir);
    self
  }

  pub fn log_dir(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.log_dir.as_ref()
  }

  pub fn reset_log_dir(&mut self) {
    self.log_dir = None;
  }

}



