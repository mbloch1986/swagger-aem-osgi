/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties()
{
    m_Jdbc_driver_classIsSet = false;
    m_Jdbc_connection_uriIsSet = false;
    m_Jdbc_usernameIsSet = false;
    m_Jdbc_passwordIsSet = false;
    m_Jdbc_validation_queryIsSet = false;
    m_Default_readonlyIsSet = false;
    m_Default_autocommitIsSet = false;
    m_Pool_sizeIsSet = false;
    m_Pool_max_wait_msecIsSet = false;
    m_Datasource_nameIsSet = false;
    m_Datasource_svc_propertiesIsSet = false;
}

ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::~ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties()
{
}

void ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Jdbc_driver_classIsSet)
    {
        val[utility::conversions::to_string_t("jdbc.driver.class")] = ModelBase::toJson(m_Jdbc_driver_class);
    }
    if(m_Jdbc_connection_uriIsSet)
    {
        val[utility::conversions::to_string_t("jdbc.connection.uri")] = ModelBase::toJson(m_Jdbc_connection_uri);
    }
    if(m_Jdbc_usernameIsSet)
    {
        val[utility::conversions::to_string_t("jdbc.username")] = ModelBase::toJson(m_Jdbc_username);
    }
    if(m_Jdbc_passwordIsSet)
    {
        val[utility::conversions::to_string_t("jdbc.password")] = ModelBase::toJson(m_Jdbc_password);
    }
    if(m_Jdbc_validation_queryIsSet)
    {
        val[utility::conversions::to_string_t("jdbc.validation.query")] = ModelBase::toJson(m_Jdbc_validation_query);
    }
    if(m_Default_readonlyIsSet)
    {
        val[utility::conversions::to_string_t("default.readonly")] = ModelBase::toJson(m_Default_readonly);
    }
    if(m_Default_autocommitIsSet)
    {
        val[utility::conversions::to_string_t("default.autocommit")] = ModelBase::toJson(m_Default_autocommit);
    }
    if(m_Pool_sizeIsSet)
    {
        val[utility::conversions::to_string_t("pool.size")] = ModelBase::toJson(m_Pool_size);
    }
    if(m_Pool_max_wait_msecIsSet)
    {
        val[utility::conversions::to_string_t("pool.max.wait.msec")] = ModelBase::toJson(m_Pool_max_wait_msec);
    }
    if(m_Datasource_nameIsSet)
    {
        val[utility::conversions::to_string_t("datasource.name")] = ModelBase::toJson(m_Datasource_name);
    }
    if(m_Datasource_svc_propertiesIsSet)
    {
        val[utility::conversions::to_string_t("datasource.svc.properties")] = ModelBase::toJson(m_Datasource_svc_properties);
    }

    return val;
}

void ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("jdbc.driver.class")))
    {
        if(!val[utility::conversions::to_string_t("jdbc.driver.class")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("jdbc.driver.class")]);
            setJdbcDriverClass( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("jdbc.connection.uri")))
    {
        if(!val[utility::conversions::to_string_t("jdbc.connection.uri")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("jdbc.connection.uri")]);
            setJdbcConnectionUri( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("jdbc.username")))
    {
        if(!val[utility::conversions::to_string_t("jdbc.username")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("jdbc.username")]);
            setJdbcUsername( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("jdbc.password")))
    {
        if(!val[utility::conversions::to_string_t("jdbc.password")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("jdbc.password")]);
            setJdbcPassword( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("jdbc.validation.query")))
    {
        if(!val[utility::conversions::to_string_t("jdbc.validation.query")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("jdbc.validation.query")]);
            setJdbcValidationQuery( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("default.readonly")))
    {
        if(!val[utility::conversions::to_string_t("default.readonly")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("default.readonly")]);
            setDefaultReadonly( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("default.autocommit")))
    {
        if(!val[utility::conversions::to_string_t("default.autocommit")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("default.autocommit")]);
            setDefaultAutocommit( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pool.size")))
    {
        if(!val[utility::conversions::to_string_t("pool.size")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("pool.size")]);
            setPoolSize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pool.max.wait.msec")))
    {
        if(!val[utility::conversions::to_string_t("pool.max.wait.msec")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("pool.max.wait.msec")]);
            setPoolMaxWaitMsec( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("datasource.name")))
    {
        if(!val[utility::conversions::to_string_t("datasource.name")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("datasource.name")]);
            setDatasourceName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("datasource.svc.properties")))
    {
        if(!val[utility::conversions::to_string_t("datasource.svc.properties")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("datasource.svc.properties")]);
            setDatasourceSvcProperties( newItem );
        }
    }
}

void ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Jdbc_driver_classIsSet)
    {
        if (m_Jdbc_driver_class.get())
        {
            m_Jdbc_driver_class->toMultipart(multipart, utility::conversions::to_string_t("jdbc.driver.class."));
        }
    }
    if(m_Jdbc_connection_uriIsSet)
    {
        if (m_Jdbc_connection_uri.get())
        {
            m_Jdbc_connection_uri->toMultipart(multipart, utility::conversions::to_string_t("jdbc.connection.uri."));
        }
    }
    if(m_Jdbc_usernameIsSet)
    {
        if (m_Jdbc_username.get())
        {
            m_Jdbc_username->toMultipart(multipart, utility::conversions::to_string_t("jdbc.username."));
        }
    }
    if(m_Jdbc_passwordIsSet)
    {
        if (m_Jdbc_password.get())
        {
            m_Jdbc_password->toMultipart(multipart, utility::conversions::to_string_t("jdbc.password."));
        }
    }
    if(m_Jdbc_validation_queryIsSet)
    {
        if (m_Jdbc_validation_query.get())
        {
            m_Jdbc_validation_query->toMultipart(multipart, utility::conversions::to_string_t("jdbc.validation.query."));
        }
    }
    if(m_Default_readonlyIsSet)
    {
        if (m_Default_readonly.get())
        {
            m_Default_readonly->toMultipart(multipart, utility::conversions::to_string_t("default.readonly."));
        }
    }
    if(m_Default_autocommitIsSet)
    {
        if (m_Default_autocommit.get())
        {
            m_Default_autocommit->toMultipart(multipart, utility::conversions::to_string_t("default.autocommit."));
        }
    }
    if(m_Pool_sizeIsSet)
    {
        if (m_Pool_size.get())
        {
            m_Pool_size->toMultipart(multipart, utility::conversions::to_string_t("pool.size."));
        }
    }
    if(m_Pool_max_wait_msecIsSet)
    {
        if (m_Pool_max_wait_msec.get())
        {
            m_Pool_max_wait_msec->toMultipart(multipart, utility::conversions::to_string_t("pool.max.wait.msec."));
        }
    }
    if(m_Datasource_nameIsSet)
    {
        if (m_Datasource_name.get())
        {
            m_Datasource_name->toMultipart(multipart, utility::conversions::to_string_t("datasource.name."));
        }
    }
    if(m_Datasource_svc_propertiesIsSet)
    {
        if (m_Datasource_svc_properties.get())
        {
            m_Datasource_svc_properties->toMultipart(multipart, utility::conversions::to_string_t("datasource.svc.properties."));
        }
    }
}

void ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("jdbc.driver.class")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("jdbc.driver.class")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("jdbc.driver.class."));
            setJdbcDriverClass( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("jdbc.connection.uri")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("jdbc.connection.uri")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("jdbc.connection.uri."));
            setJdbcConnectionUri( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("jdbc.username")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("jdbc.username")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("jdbc.username."));
            setJdbcUsername( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("jdbc.password")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("jdbc.password")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("jdbc.password."));
            setJdbcPassword( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("jdbc.validation.query")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("jdbc.validation.query")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("jdbc.validation.query."));
            setJdbcValidationQuery( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("default.readonly")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("default.readonly")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("default.readonly."));
            setDefaultReadonly( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("default.autocommit")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("default.autocommit")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("default.autocommit."));
            setDefaultAutocommit( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pool.size")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("pool.size")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("pool.size."));
            setPoolSize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pool.max.wait.msec")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("pool.max.wait.msec")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("pool.max.wait.msec."));
            setPoolMaxWaitMsec( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("datasource.name")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("datasource.name")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("datasource.name."));
            setDatasourceName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("datasource.svc.properties")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("datasource.svc.properties")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("datasource.svc.properties."));
            setDatasourceSvcProperties( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::getJdbcDriverClass() const
{
    return m_Jdbc_driver_class;
}


void ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::setJdbcDriverClass(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Jdbc_driver_class = value;
    m_Jdbc_driver_classIsSet = true;
}
bool ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::jdbcDriverClassIsSet() const
{
    return m_Jdbc_driver_classIsSet;
}

void ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::unsetJdbc_driver_class()
{
    m_Jdbc_driver_classIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::getJdbcConnectionUri() const
{
    return m_Jdbc_connection_uri;
}


void ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::setJdbcConnectionUri(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Jdbc_connection_uri = value;
    m_Jdbc_connection_uriIsSet = true;
}
bool ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::jdbcConnectionUriIsSet() const
{
    return m_Jdbc_connection_uriIsSet;
}

void ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::unsetJdbc_connection_uri()
{
    m_Jdbc_connection_uriIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::getJdbcUsername() const
{
    return m_Jdbc_username;
}


void ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::setJdbcUsername(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Jdbc_username = value;
    m_Jdbc_usernameIsSet = true;
}
bool ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::jdbcUsernameIsSet() const
{
    return m_Jdbc_usernameIsSet;
}

void ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::unsetJdbc_username()
{
    m_Jdbc_usernameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::getJdbcPassword() const
{
    return m_Jdbc_password;
}


void ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::setJdbcPassword(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Jdbc_password = value;
    m_Jdbc_passwordIsSet = true;
}
bool ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::jdbcPasswordIsSet() const
{
    return m_Jdbc_passwordIsSet;
}

void ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::unsetJdbc_password()
{
    m_Jdbc_passwordIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::getJdbcValidationQuery() const
{
    return m_Jdbc_validation_query;
}


void ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::setJdbcValidationQuery(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Jdbc_validation_query = value;
    m_Jdbc_validation_queryIsSet = true;
}
bool ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::jdbcValidationQueryIsSet() const
{
    return m_Jdbc_validation_queryIsSet;
}

void ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::unsetJdbc_validation_query()
{
    m_Jdbc_validation_queryIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::getDefaultReadonly() const
{
    return m_Default_readonly;
}


void ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::setDefaultReadonly(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Default_readonly = value;
    m_Default_readonlyIsSet = true;
}
bool ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::defaultReadonlyIsSet() const
{
    return m_Default_readonlyIsSet;
}

void ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::unsetDefault_readonly()
{
    m_Default_readonlyIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::getDefaultAutocommit() const
{
    return m_Default_autocommit;
}


void ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::setDefaultAutocommit(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Default_autocommit = value;
    m_Default_autocommitIsSet = true;
}
bool ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::defaultAutocommitIsSet() const
{
    return m_Default_autocommitIsSet;
}

void ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::unsetDefault_autocommit()
{
    m_Default_autocommitIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::getPoolSize() const
{
    return m_Pool_size;
}


void ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::setPoolSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Pool_size = value;
    m_Pool_sizeIsSet = true;
}
bool ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::poolSizeIsSet() const
{
    return m_Pool_sizeIsSet;
}

void ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::unsetPool_size()
{
    m_Pool_sizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::getPoolMaxWaitMsec() const
{
    return m_Pool_max_wait_msec;
}


void ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::setPoolMaxWaitMsec(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Pool_max_wait_msec = value;
    m_Pool_max_wait_msecIsSet = true;
}
bool ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::poolMaxWaitMsecIsSet() const
{
    return m_Pool_max_wait_msecIsSet;
}

void ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::unsetPool_max_wait_msec()
{
    m_Pool_max_wait_msecIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::getDatasourceName() const
{
    return m_Datasource_name;
}


void ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::setDatasourceName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Datasource_name = value;
    m_Datasource_nameIsSet = true;
}
bool ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::datasourceNameIsSet() const
{
    return m_Datasource_nameIsSet;
}

void ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::unsetDatasource_name()
{
    m_Datasource_nameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::getDatasourceSvcProperties() const
{
    return m_Datasource_svc_properties;
}


void ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::setDatasourceSvcProperties(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Datasource_svc_properties = value;
    m_Datasource_svc_propertiesIsSet = true;
}
bool ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::datasourceSvcPropertiesIsSet() const
{
    return m_Datasource_svc_propertiesIsSet;
}

void ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::unsetDatasource_svc_properties()
{
    m_Datasource_svc_propertiesIsSet = false;
}

}
}
}
}

