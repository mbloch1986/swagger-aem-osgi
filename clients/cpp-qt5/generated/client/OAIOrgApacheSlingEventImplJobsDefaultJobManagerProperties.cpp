/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingEventImplJobsDefaultJobManagerProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingEventImplJobsDefaultJobManagerProperties::OAIOrgApacheSlingEventImplJobsDefaultJobManagerProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheSlingEventImplJobsDefaultJobManagerProperties::OAIOrgApacheSlingEventImplJobsDefaultJobManagerProperties() {
    init();
}

OAIOrgApacheSlingEventImplJobsDefaultJobManagerProperties::~OAIOrgApacheSlingEventImplJobsDefaultJobManagerProperties() {
    this->cleanup();
}

void
OAIOrgApacheSlingEventImplJobsDefaultJobManagerProperties::init() {
    queue_priority = new OAIConfigNodePropertyDropDown();
    m_queue_priority_isSet = false;
    queue_retries = new OAIConfigNodePropertyInteger();
    m_queue_retries_isSet = false;
    queue_retrydelay = new OAIConfigNodePropertyInteger();
    m_queue_retrydelay_isSet = false;
    queue_maxparallel = new OAIConfigNodePropertyInteger();
    m_queue_maxparallel_isSet = false;
}

void
OAIOrgApacheSlingEventImplJobsDefaultJobManagerProperties::cleanup() {
    if(queue_priority != nullptr) { 
        delete queue_priority;
    }
    if(queue_retries != nullptr) { 
        delete queue_retries;
    }
    if(queue_retrydelay != nullptr) { 
        delete queue_retrydelay;
    }
    if(queue_maxparallel != nullptr) { 
        delete queue_maxparallel;
    }
}

OAIOrgApacheSlingEventImplJobsDefaultJobManagerProperties*
OAIOrgApacheSlingEventImplJobsDefaultJobManagerProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheSlingEventImplJobsDefaultJobManagerProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&queue_priority, pJson["queue.priority"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
    ::OpenAPI::setValue(&queue_retries, pJson["queue.retries"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&queue_retrydelay, pJson["queue.retrydelay"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&queue_maxparallel, pJson["queue.maxparallel"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
}

QString
OAIOrgApacheSlingEventImplJobsDefaultJobManagerProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingEventImplJobsDefaultJobManagerProperties::asJsonObject() {
    QJsonObject obj;
    if((queue_priority != nullptr) && (queue_priority->isSet())){
        toJsonValue(QString("queue.priority"), queue_priority, obj, QString("OAIConfigNodePropertyDropDown"));
    }
    if((queue_retries != nullptr) && (queue_retries->isSet())){
        toJsonValue(QString("queue.retries"), queue_retries, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((queue_retrydelay != nullptr) && (queue_retrydelay->isSet())){
        toJsonValue(QString("queue.retrydelay"), queue_retrydelay, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((queue_maxparallel != nullptr) && (queue_maxparallel->isSet())){
        toJsonValue(QString("queue.maxparallel"), queue_maxparallel, obj, QString("OAIConfigNodePropertyInteger"));
    }

    return obj;
}

OAIConfigNodePropertyDropDown*
OAIOrgApacheSlingEventImplJobsDefaultJobManagerProperties::getQueuePriority() {
    return queue_priority;
}
void
OAIOrgApacheSlingEventImplJobsDefaultJobManagerProperties::setQueuePriority(OAIConfigNodePropertyDropDown* queue_priority) {
    this->queue_priority = queue_priority;
    this->m_queue_priority_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingEventImplJobsDefaultJobManagerProperties::getQueueRetries() {
    return queue_retries;
}
void
OAIOrgApacheSlingEventImplJobsDefaultJobManagerProperties::setQueueRetries(OAIConfigNodePropertyInteger* queue_retries) {
    this->queue_retries = queue_retries;
    this->m_queue_retries_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingEventImplJobsDefaultJobManagerProperties::getQueueRetrydelay() {
    return queue_retrydelay;
}
void
OAIOrgApacheSlingEventImplJobsDefaultJobManagerProperties::setQueueRetrydelay(OAIConfigNodePropertyInteger* queue_retrydelay) {
    this->queue_retrydelay = queue_retrydelay;
    this->m_queue_retrydelay_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingEventImplJobsDefaultJobManagerProperties::getQueueMaxparallel() {
    return queue_maxparallel;
}
void
OAIOrgApacheSlingEventImplJobsDefaultJobManagerProperties::setQueueMaxparallel(OAIConfigNodePropertyInteger* queue_maxparallel) {
    this->queue_maxparallel = queue_maxparallel;
    this->m_queue_maxparallel_isSet = true;
}


bool
OAIOrgApacheSlingEventImplJobsDefaultJobManagerProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(queue_priority != nullptr && queue_priority->isSet()){ isObjectUpdated = true; break;}
        if(queue_retries != nullptr && queue_retries->isSet()){ isObjectUpdated = true; break;}
        if(queue_retrydelay != nullptr && queue_retrydelay->isSet()){ isObjectUpdated = true; break;}
        if(queue_maxparallel != nullptr && queue_maxparallel->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

