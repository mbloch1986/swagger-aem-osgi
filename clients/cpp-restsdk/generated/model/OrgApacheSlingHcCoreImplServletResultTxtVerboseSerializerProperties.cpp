/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties()
{
    m_TotalWidthIsSet = false;
    m_ColWidthNameIsSet = false;
    m_ColWidthResultIsSet = false;
    m_ColWidthTimingIsSet = false;
}

OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::~OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties()
{
}

void OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_TotalWidthIsSet)
    {
        val[utility::conversions::to_string_t("totalWidth")] = ModelBase::toJson(m_TotalWidth);
    }
    if(m_ColWidthNameIsSet)
    {
        val[utility::conversions::to_string_t("colWidthName")] = ModelBase::toJson(m_ColWidthName);
    }
    if(m_ColWidthResultIsSet)
    {
        val[utility::conversions::to_string_t("colWidthResult")] = ModelBase::toJson(m_ColWidthResult);
    }
    if(m_ColWidthTimingIsSet)
    {
        val[utility::conversions::to_string_t("colWidthTiming")] = ModelBase::toJson(m_ColWidthTiming);
    }

    return val;
}

void OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("totalWidth")))
    {
        if(!val[utility::conversions::to_string_t("totalWidth")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("totalWidth")]);
            setTotalWidth( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("colWidthName")))
    {
        if(!val[utility::conversions::to_string_t("colWidthName")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("colWidthName")]);
            setColWidthName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("colWidthResult")))
    {
        if(!val[utility::conversions::to_string_t("colWidthResult")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("colWidthResult")]);
            setColWidthResult( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("colWidthTiming")))
    {
        if(!val[utility::conversions::to_string_t("colWidthTiming")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("colWidthTiming")]);
            setColWidthTiming( newItem );
        }
    }
}

void OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_TotalWidthIsSet)
    {
        if (m_TotalWidth.get())
        {
            m_TotalWidth->toMultipart(multipart, utility::conversions::to_string_t("totalWidth."));
        }
    }
    if(m_ColWidthNameIsSet)
    {
        if (m_ColWidthName.get())
        {
            m_ColWidthName->toMultipart(multipart, utility::conversions::to_string_t("colWidthName."));
        }
    }
    if(m_ColWidthResultIsSet)
    {
        if (m_ColWidthResult.get())
        {
            m_ColWidthResult->toMultipart(multipart, utility::conversions::to_string_t("colWidthResult."));
        }
    }
    if(m_ColWidthTimingIsSet)
    {
        if (m_ColWidthTiming.get())
        {
            m_ColWidthTiming->toMultipart(multipart, utility::conversions::to_string_t("colWidthTiming."));
        }
    }
}

void OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("totalWidth")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("totalWidth")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("totalWidth."));
            setTotalWidth( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("colWidthName")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("colWidthName")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("colWidthName."));
            setColWidthName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("colWidthResult")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("colWidthResult")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("colWidthResult."));
            setColWidthResult( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("colWidthTiming")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("colWidthTiming")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("colWidthTiming."));
            setColWidthTiming( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::getTotalWidth() const
{
    return m_TotalWidth;
}


void OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::setTotalWidth(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_TotalWidth = value;
    m_TotalWidthIsSet = true;
}
bool OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::totalWidthIsSet() const
{
    return m_TotalWidthIsSet;
}

void OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::unsetTotalWidth()
{
    m_TotalWidthIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::getColWidthName() const
{
    return m_ColWidthName;
}


void OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::setColWidthName(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_ColWidthName = value;
    m_ColWidthNameIsSet = true;
}
bool OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::colWidthNameIsSet() const
{
    return m_ColWidthNameIsSet;
}

void OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::unsetColWidthName()
{
    m_ColWidthNameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::getColWidthResult() const
{
    return m_ColWidthResult;
}


void OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::setColWidthResult(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_ColWidthResult = value;
    m_ColWidthResultIsSet = true;
}
bool OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::colWidthResultIsSet() const
{
    return m_ColWidthResultIsSet;
}

void OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::unsetColWidthResult()
{
    m_ColWidthResultIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::getColWidthTiming() const
{
    return m_ColWidthTiming;
}


void OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::setColWidthTiming(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_ColWidthTiming = value;
    m_ColWidthTimingIsSet = true;
}
bool OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::colWidthTimingIsSet() const
{
    return m_ColWidthTimingIsSet;
}

void OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::unsetColWidthTiming()
{
    m_ColWidthTimingIsSet = false;
}

}
}
}
}

