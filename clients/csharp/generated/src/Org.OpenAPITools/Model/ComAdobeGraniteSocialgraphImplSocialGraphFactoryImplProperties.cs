/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties
    /// </summary>
    [DataContract]
    public partial class ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties :  IEquatable<ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties" /> class.
        /// </summary>
        /// <param name="group2memberRelationshipOutgoing">group2memberRelationshipOutgoing.</param>
        /// <param name="group2memberExcludedOutgoing">group2memberExcludedOutgoing.</param>
        /// <param name="group2memberRelationshipIncoming">group2memberRelationshipIncoming.</param>
        /// <param name="group2memberExcludedIncoming">group2memberExcludedIncoming.</param>
        public ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties(ConfigNodePropertyString group2memberRelationshipOutgoing = default(ConfigNodePropertyString), ConfigNodePropertyArray group2memberExcludedOutgoing = default(ConfigNodePropertyArray), ConfigNodePropertyString group2memberRelationshipIncoming = default(ConfigNodePropertyString), ConfigNodePropertyArray group2memberExcludedIncoming = default(ConfigNodePropertyArray))
        {
            this.Group2memberRelationshipOutgoing = group2memberRelationshipOutgoing;
            this.Group2memberExcludedOutgoing = group2memberExcludedOutgoing;
            this.Group2memberRelationshipIncoming = group2memberRelationshipIncoming;
            this.Group2memberExcludedIncoming = group2memberExcludedIncoming;
        }
        
        /// <summary>
        /// Gets or Sets Group2memberRelationshipOutgoing
        /// </summary>
        [DataMember(Name="group2member.relationship.outgoing", EmitDefaultValue=false)]
        public ConfigNodePropertyString Group2memberRelationshipOutgoing { get; set; }

        /// <summary>
        /// Gets or Sets Group2memberExcludedOutgoing
        /// </summary>
        [DataMember(Name="group2member.excluded.outgoing", EmitDefaultValue=false)]
        public ConfigNodePropertyArray Group2memberExcludedOutgoing { get; set; }

        /// <summary>
        /// Gets or Sets Group2memberRelationshipIncoming
        /// </summary>
        [DataMember(Name="group2member.relationship.incoming", EmitDefaultValue=false)]
        public ConfigNodePropertyString Group2memberRelationshipIncoming { get; set; }

        /// <summary>
        /// Gets or Sets Group2memberExcludedIncoming
        /// </summary>
        [DataMember(Name="group2member.excluded.incoming", EmitDefaultValue=false)]
        public ConfigNodePropertyArray Group2memberExcludedIncoming { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties {\n");
            sb.Append("  Group2memberRelationshipOutgoing: ").Append(Group2memberRelationshipOutgoing).Append("\n");
            sb.Append("  Group2memberExcludedOutgoing: ").Append(Group2memberExcludedOutgoing).Append("\n");
            sb.Append("  Group2memberRelationshipIncoming: ").Append(Group2memberRelationshipIncoming).Append("\n");
            sb.Append("  Group2memberExcludedIncoming: ").Append(Group2memberExcludedIncoming).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties);
        }

        /// <summary>
        /// Returns true if ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Group2memberRelationshipOutgoing == input.Group2memberRelationshipOutgoing ||
                    (this.Group2memberRelationshipOutgoing != null &&
                    this.Group2memberRelationshipOutgoing.Equals(input.Group2memberRelationshipOutgoing))
                ) && 
                (
                    this.Group2memberExcludedOutgoing == input.Group2memberExcludedOutgoing ||
                    (this.Group2memberExcludedOutgoing != null &&
                    this.Group2memberExcludedOutgoing.Equals(input.Group2memberExcludedOutgoing))
                ) && 
                (
                    this.Group2memberRelationshipIncoming == input.Group2memberRelationshipIncoming ||
                    (this.Group2memberRelationshipIncoming != null &&
                    this.Group2memberRelationshipIncoming.Equals(input.Group2memberRelationshipIncoming))
                ) && 
                (
                    this.Group2memberExcludedIncoming == input.Group2memberExcludedIncoming ||
                    (this.Group2memberExcludedIncoming != null &&
                    this.Group2memberExcludedIncoming.Equals(input.Group2memberExcludedIncoming))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Group2memberRelationshipOutgoing != null)
                    hashCode = hashCode * 59 + this.Group2memberRelationshipOutgoing.GetHashCode();
                if (this.Group2memberExcludedOutgoing != null)
                    hashCode = hashCode * 59 + this.Group2memberExcludedOutgoing.GetHashCode();
                if (this.Group2memberRelationshipIncoming != null)
                    hashCode = hashCode * 59 + this.Group2memberRelationshipIncoming.GetHashCode();
                if (this.Group2memberExcludedIncoming != null)
                    hashCode = hashCode * 59 + this.Group2memberExcludedIncoming.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
