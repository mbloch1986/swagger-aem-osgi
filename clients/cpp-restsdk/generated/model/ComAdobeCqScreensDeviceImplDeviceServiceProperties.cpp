/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeCqScreensDeviceImplDeviceServiceProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeCqScreensDeviceImplDeviceServiceProperties::ComAdobeCqScreensDeviceImplDeviceServiceProperties()
{
    m_Com_adobe_aem_screens_player_pingfrequencyIsSet = false;
    m_Com_adobe_aem_screens_device_pasword_specialcharsIsSet = false;
    m_Com_adobe_aem_screens_device_pasword_minlowercasecharsIsSet = false;
    m_Com_adobe_aem_screens_device_pasword_minuppercasecharsIsSet = false;
    m_Com_adobe_aem_screens_device_pasword_minnumbercharsIsSet = false;
    m_Com_adobe_aem_screens_device_pasword_minspecialcharsIsSet = false;
    m_Com_adobe_aem_screens_device_pasword_minlengthIsSet = false;
}

ComAdobeCqScreensDeviceImplDeviceServiceProperties::~ComAdobeCqScreensDeviceImplDeviceServiceProperties()
{
}

void ComAdobeCqScreensDeviceImplDeviceServiceProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeCqScreensDeviceImplDeviceServiceProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Com_adobe_aem_screens_player_pingfrequencyIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.aem.screens.player.pingfrequency")] = ModelBase::toJson(m_Com_adobe_aem_screens_player_pingfrequency);
    }
    if(m_Com_adobe_aem_screens_device_pasword_specialcharsIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.aem.screens.device.pasword.specialchars")] = ModelBase::toJson(m_Com_adobe_aem_screens_device_pasword_specialchars);
    }
    if(m_Com_adobe_aem_screens_device_pasword_minlowercasecharsIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.aem.screens.device.pasword.minlowercasechars")] = ModelBase::toJson(m_Com_adobe_aem_screens_device_pasword_minlowercasechars);
    }
    if(m_Com_adobe_aem_screens_device_pasword_minuppercasecharsIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.aem.screens.device.pasword.minuppercasechars")] = ModelBase::toJson(m_Com_adobe_aem_screens_device_pasword_minuppercasechars);
    }
    if(m_Com_adobe_aem_screens_device_pasword_minnumbercharsIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.aem.screens.device.pasword.minnumberchars")] = ModelBase::toJson(m_Com_adobe_aem_screens_device_pasword_minnumberchars);
    }
    if(m_Com_adobe_aem_screens_device_pasword_minspecialcharsIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.aem.screens.device.pasword.minspecialchars")] = ModelBase::toJson(m_Com_adobe_aem_screens_device_pasword_minspecialchars);
    }
    if(m_Com_adobe_aem_screens_device_pasword_minlengthIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.aem.screens.device.pasword.minlength")] = ModelBase::toJson(m_Com_adobe_aem_screens_device_pasword_minlength);
    }

    return val;
}

void ComAdobeCqScreensDeviceImplDeviceServiceProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("com.adobe.aem.screens.player.pingfrequency")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.aem.screens.player.pingfrequency")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.aem.screens.player.pingfrequency")]);
            setComAdobeAemScreensPlayerPingfrequency( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.aem.screens.device.pasword.specialchars")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.aem.screens.device.pasword.specialchars")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.aem.screens.device.pasword.specialchars")]);
            setComAdobeAemScreensDevicePaswordSpecialchars( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.aem.screens.device.pasword.minlowercasechars")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.aem.screens.device.pasword.minlowercasechars")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.aem.screens.device.pasword.minlowercasechars")]);
            setComAdobeAemScreensDevicePaswordMinlowercasechars( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.aem.screens.device.pasword.minuppercasechars")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.aem.screens.device.pasword.minuppercasechars")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.aem.screens.device.pasword.minuppercasechars")]);
            setComAdobeAemScreensDevicePaswordMinuppercasechars( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.aem.screens.device.pasword.minnumberchars")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.aem.screens.device.pasword.minnumberchars")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.aem.screens.device.pasword.minnumberchars")]);
            setComAdobeAemScreensDevicePaswordMinnumberchars( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.aem.screens.device.pasword.minspecialchars")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.aem.screens.device.pasword.minspecialchars")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.aem.screens.device.pasword.minspecialchars")]);
            setComAdobeAemScreensDevicePaswordMinspecialchars( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.aem.screens.device.pasword.minlength")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.aem.screens.device.pasword.minlength")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.aem.screens.device.pasword.minlength")]);
            setComAdobeAemScreensDevicePaswordMinlength( newItem );
        }
    }
}

void ComAdobeCqScreensDeviceImplDeviceServiceProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Com_adobe_aem_screens_player_pingfrequencyIsSet)
    {
        if (m_Com_adobe_aem_screens_player_pingfrequency.get())
        {
            m_Com_adobe_aem_screens_player_pingfrequency->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.aem.screens.player.pingfrequency."));
        }
    }
    if(m_Com_adobe_aem_screens_device_pasword_specialcharsIsSet)
    {
        if (m_Com_adobe_aem_screens_device_pasword_specialchars.get())
        {
            m_Com_adobe_aem_screens_device_pasword_specialchars->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.aem.screens.device.pasword.specialchars."));
        }
    }
    if(m_Com_adobe_aem_screens_device_pasword_minlowercasecharsIsSet)
    {
        if (m_Com_adobe_aem_screens_device_pasword_minlowercasechars.get())
        {
            m_Com_adobe_aem_screens_device_pasword_minlowercasechars->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.aem.screens.device.pasword.minlowercasechars."));
        }
    }
    if(m_Com_adobe_aem_screens_device_pasword_minuppercasecharsIsSet)
    {
        if (m_Com_adobe_aem_screens_device_pasword_minuppercasechars.get())
        {
            m_Com_adobe_aem_screens_device_pasword_minuppercasechars->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.aem.screens.device.pasword.minuppercasechars."));
        }
    }
    if(m_Com_adobe_aem_screens_device_pasword_minnumbercharsIsSet)
    {
        if (m_Com_adobe_aem_screens_device_pasword_minnumberchars.get())
        {
            m_Com_adobe_aem_screens_device_pasword_minnumberchars->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.aem.screens.device.pasword.minnumberchars."));
        }
    }
    if(m_Com_adobe_aem_screens_device_pasword_minspecialcharsIsSet)
    {
        if (m_Com_adobe_aem_screens_device_pasword_minspecialchars.get())
        {
            m_Com_adobe_aem_screens_device_pasword_minspecialchars->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.aem.screens.device.pasword.minspecialchars."));
        }
    }
    if(m_Com_adobe_aem_screens_device_pasword_minlengthIsSet)
    {
        if (m_Com_adobe_aem_screens_device_pasword_minlength.get())
        {
            m_Com_adobe_aem_screens_device_pasword_minlength->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.aem.screens.device.pasword.minlength."));
        }
    }
}

void ComAdobeCqScreensDeviceImplDeviceServiceProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.aem.screens.player.pingfrequency")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.aem.screens.player.pingfrequency")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.aem.screens.player.pingfrequency."));
            setComAdobeAemScreensPlayerPingfrequency( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.aem.screens.device.pasword.specialchars")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.aem.screens.device.pasword.specialchars")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.aem.screens.device.pasword.specialchars."));
            setComAdobeAemScreensDevicePaswordSpecialchars( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.aem.screens.device.pasword.minlowercasechars")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.aem.screens.device.pasword.minlowercasechars")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.aem.screens.device.pasword.minlowercasechars."));
            setComAdobeAemScreensDevicePaswordMinlowercasechars( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.aem.screens.device.pasword.minuppercasechars")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.aem.screens.device.pasword.minuppercasechars")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.aem.screens.device.pasword.minuppercasechars."));
            setComAdobeAemScreensDevicePaswordMinuppercasechars( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.aem.screens.device.pasword.minnumberchars")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.aem.screens.device.pasword.minnumberchars")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.aem.screens.device.pasword.minnumberchars."));
            setComAdobeAemScreensDevicePaswordMinnumberchars( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.aem.screens.device.pasword.minspecialchars")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.aem.screens.device.pasword.minspecialchars")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.aem.screens.device.pasword.minspecialchars."));
            setComAdobeAemScreensDevicePaswordMinspecialchars( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.aem.screens.device.pasword.minlength")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.aem.screens.device.pasword.minlength")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.aem.screens.device.pasword.minlength."));
            setComAdobeAemScreensDevicePaswordMinlength( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqScreensDeviceImplDeviceServiceProperties::getComAdobeAemScreensPlayerPingfrequency() const
{
    return m_Com_adobe_aem_screens_player_pingfrequency;
}


void ComAdobeCqScreensDeviceImplDeviceServiceProperties::setComAdobeAemScreensPlayerPingfrequency(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Com_adobe_aem_screens_player_pingfrequency = value;
    m_Com_adobe_aem_screens_player_pingfrequencyIsSet = true;
}
bool ComAdobeCqScreensDeviceImplDeviceServiceProperties::comAdobeAemScreensPlayerPingfrequencyIsSet() const
{
    return m_Com_adobe_aem_screens_player_pingfrequencyIsSet;
}

void ComAdobeCqScreensDeviceImplDeviceServiceProperties::unsetCom_adobe_aem_screens_player_pingfrequency()
{
    m_Com_adobe_aem_screens_player_pingfrequencyIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqScreensDeviceImplDeviceServiceProperties::getComAdobeAemScreensDevicePaswordSpecialchars() const
{
    return m_Com_adobe_aem_screens_device_pasword_specialchars;
}


void ComAdobeCqScreensDeviceImplDeviceServiceProperties::setComAdobeAemScreensDevicePaswordSpecialchars(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_aem_screens_device_pasword_specialchars = value;
    m_Com_adobe_aem_screens_device_pasword_specialcharsIsSet = true;
}
bool ComAdobeCqScreensDeviceImplDeviceServiceProperties::comAdobeAemScreensDevicePaswordSpecialcharsIsSet() const
{
    return m_Com_adobe_aem_screens_device_pasword_specialcharsIsSet;
}

void ComAdobeCqScreensDeviceImplDeviceServiceProperties::unsetCom_adobe_aem_screens_device_pasword_specialchars()
{
    m_Com_adobe_aem_screens_device_pasword_specialcharsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqScreensDeviceImplDeviceServiceProperties::getComAdobeAemScreensDevicePaswordMinlowercasechars() const
{
    return m_Com_adobe_aem_screens_device_pasword_minlowercasechars;
}


void ComAdobeCqScreensDeviceImplDeviceServiceProperties::setComAdobeAemScreensDevicePaswordMinlowercasechars(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Com_adobe_aem_screens_device_pasword_minlowercasechars = value;
    m_Com_adobe_aem_screens_device_pasword_minlowercasecharsIsSet = true;
}
bool ComAdobeCqScreensDeviceImplDeviceServiceProperties::comAdobeAemScreensDevicePaswordMinlowercasecharsIsSet() const
{
    return m_Com_adobe_aem_screens_device_pasword_minlowercasecharsIsSet;
}

void ComAdobeCqScreensDeviceImplDeviceServiceProperties::unsetCom_adobe_aem_screens_device_pasword_minlowercasechars()
{
    m_Com_adobe_aem_screens_device_pasword_minlowercasecharsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqScreensDeviceImplDeviceServiceProperties::getComAdobeAemScreensDevicePaswordMinuppercasechars() const
{
    return m_Com_adobe_aem_screens_device_pasword_minuppercasechars;
}


void ComAdobeCqScreensDeviceImplDeviceServiceProperties::setComAdobeAemScreensDevicePaswordMinuppercasechars(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Com_adobe_aem_screens_device_pasword_minuppercasechars = value;
    m_Com_adobe_aem_screens_device_pasword_minuppercasecharsIsSet = true;
}
bool ComAdobeCqScreensDeviceImplDeviceServiceProperties::comAdobeAemScreensDevicePaswordMinuppercasecharsIsSet() const
{
    return m_Com_adobe_aem_screens_device_pasword_minuppercasecharsIsSet;
}

void ComAdobeCqScreensDeviceImplDeviceServiceProperties::unsetCom_adobe_aem_screens_device_pasword_minuppercasechars()
{
    m_Com_adobe_aem_screens_device_pasword_minuppercasecharsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqScreensDeviceImplDeviceServiceProperties::getComAdobeAemScreensDevicePaswordMinnumberchars() const
{
    return m_Com_adobe_aem_screens_device_pasword_minnumberchars;
}


void ComAdobeCqScreensDeviceImplDeviceServiceProperties::setComAdobeAemScreensDevicePaswordMinnumberchars(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Com_adobe_aem_screens_device_pasword_minnumberchars = value;
    m_Com_adobe_aem_screens_device_pasword_minnumbercharsIsSet = true;
}
bool ComAdobeCqScreensDeviceImplDeviceServiceProperties::comAdobeAemScreensDevicePaswordMinnumbercharsIsSet() const
{
    return m_Com_adobe_aem_screens_device_pasword_minnumbercharsIsSet;
}

void ComAdobeCqScreensDeviceImplDeviceServiceProperties::unsetCom_adobe_aem_screens_device_pasword_minnumberchars()
{
    m_Com_adobe_aem_screens_device_pasword_minnumbercharsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqScreensDeviceImplDeviceServiceProperties::getComAdobeAemScreensDevicePaswordMinspecialchars() const
{
    return m_Com_adobe_aem_screens_device_pasword_minspecialchars;
}


void ComAdobeCqScreensDeviceImplDeviceServiceProperties::setComAdobeAemScreensDevicePaswordMinspecialchars(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Com_adobe_aem_screens_device_pasword_minspecialchars = value;
    m_Com_adobe_aem_screens_device_pasword_minspecialcharsIsSet = true;
}
bool ComAdobeCqScreensDeviceImplDeviceServiceProperties::comAdobeAemScreensDevicePaswordMinspecialcharsIsSet() const
{
    return m_Com_adobe_aem_screens_device_pasword_minspecialcharsIsSet;
}

void ComAdobeCqScreensDeviceImplDeviceServiceProperties::unsetCom_adobe_aem_screens_device_pasword_minspecialchars()
{
    m_Com_adobe_aem_screens_device_pasword_minspecialcharsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqScreensDeviceImplDeviceServiceProperties::getComAdobeAemScreensDevicePaswordMinlength() const
{
    return m_Com_adobe_aem_screens_device_pasword_minlength;
}


void ComAdobeCqScreensDeviceImplDeviceServiceProperties::setComAdobeAemScreensDevicePaswordMinlength(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Com_adobe_aem_screens_device_pasword_minlength = value;
    m_Com_adobe_aem_screens_device_pasword_minlengthIsSet = true;
}
bool ComAdobeCqScreensDeviceImplDeviceServiceProperties::comAdobeAemScreensDevicePaswordMinlengthIsSet() const
{
    return m_Com_adobe_aem_screens_device_pasword_minlengthIsSet;
}

void ComAdobeCqScreensDeviceImplDeviceServiceProperties::unsetCom_adobe_aem_screens_device_pasword_minlength()
{
    m_Com_adobe_aem_screens_device_pasword_minlengthIsSet = false;
}

}
}
}
}

