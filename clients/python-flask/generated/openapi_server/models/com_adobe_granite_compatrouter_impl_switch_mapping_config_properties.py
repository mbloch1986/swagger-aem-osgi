# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.config_node_property_array import ConfigNodePropertyArray  # noqa: F401,E501
from openapi_server.models.config_node_property_string import ConfigNodePropertyString  # noqa: F401,E501
from openapi_server import util


class ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group: ConfigNodePropertyString=None, ids: ConfigNodePropertyArray=None):  # noqa: E501
        """ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties - a model defined in OpenAPI

        :param group: The group of this ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties.  # noqa: E501
        :type group: ConfigNodePropertyString
        :param ids: The ids of this ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties.  # noqa: E501
        :type ids: ConfigNodePropertyArray
        """
        self.openapi_types = {
            'group': ConfigNodePropertyString,
            'ids': ConfigNodePropertyArray
        }

        self.attribute_map = {
            'group': 'group',
            'ids': 'ids'
        }

        self._group = group
        self._ids = ids

    @classmethod
    def from_dict(cls, dikt) -> 'ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The comAdobeGraniteCompatrouterImplSwitchMappingConfigProperties of this ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties.  # noqa: E501
        :rtype: ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group(self) -> ConfigNodePropertyString:
        """Gets the group of this ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties.


        :return: The group of this ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties.
        :rtype: ConfigNodePropertyString
        """
        return self._group

    @group.setter
    def group(self, group: ConfigNodePropertyString):
        """Sets the group of this ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties.


        :param group: The group of this ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties.
        :type group: ConfigNodePropertyString
        """

        self._group = group

    @property
    def ids(self) -> ConfigNodePropertyArray:
        """Gets the ids of this ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties.


        :return: The ids of this ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties.
        :rtype: ConfigNodePropertyArray
        """
        return self._ids

    @ids.setter
    def ids(self, ids: ConfigNodePropertyArray):
        """Sets the ids of this ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties.


        :param ids: The ids of this ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties.
        :type ids: ConfigNodePropertyArray
        """

        self._ids = ids
