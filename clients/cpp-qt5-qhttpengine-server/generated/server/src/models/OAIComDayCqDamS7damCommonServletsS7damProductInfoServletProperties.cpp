/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqDamS7damCommonServletsS7damProductInfoServletProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqDamS7damCommonServletsS7damProductInfoServletProperties::OAIComDayCqDamS7damCommonServletsS7damProductInfoServletProperties(QString json) {
    this->fromJson(json);
}

OAIComDayCqDamS7damCommonServletsS7damProductInfoServletProperties::OAIComDayCqDamS7damCommonServletsS7damProductInfoServletProperties() {
    this->init();
}

OAIComDayCqDamS7damCommonServletsS7damProductInfoServletProperties::~OAIComDayCqDamS7damCommonServletsS7damProductInfoServletProperties() {
    
}

void
OAIComDayCqDamS7damCommonServletsS7damProductInfoServletProperties::init() {
    m_sling_servlet_paths_isSet = false;
    m_sling_servlet_methods_isSet = false;
}

void
OAIComDayCqDamS7damCommonServletsS7damProductInfoServletProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComDayCqDamS7damCommonServletsS7damProductInfoServletProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(sling_servlet_paths, json[QString("sling.servlet.paths")]);
    
    ::OpenAPI::fromJsonValue(sling_servlet_methods, json[QString("sling.servlet.methods")]);
    
}

QString
OAIComDayCqDamS7damCommonServletsS7damProductInfoServletProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqDamS7damCommonServletsS7damProductInfoServletProperties::asJsonObject() const {
    QJsonObject obj;
	if(sling_servlet_paths.isSet()){
        obj.insert(QString("sling.servlet.paths"), ::OpenAPI::toJsonValue(sling_servlet_paths));
    }
	if(sling_servlet_methods.isSet()){
        obj.insert(QString("sling.servlet.methods"), ::OpenAPI::toJsonValue(sling_servlet_methods));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIComDayCqDamS7damCommonServletsS7damProductInfoServletProperties::getSlingServletPaths() const {
    return sling_servlet_paths;
}
void
OAIComDayCqDamS7damCommonServletsS7damProductInfoServletProperties::setSlingServletPaths(const OAIConfigNodePropertyString &sling_servlet_paths) {
    this->sling_servlet_paths = sling_servlet_paths;
    this->m_sling_servlet_paths_isSet = true;
}

OAIConfigNodePropertyString
OAIComDayCqDamS7damCommonServletsS7damProductInfoServletProperties::getSlingServletMethods() const {
    return sling_servlet_methods;
}
void
OAIComDayCqDamS7damCommonServletsS7damProductInfoServletProperties::setSlingServletMethods(const OAIConfigNodePropertyString &sling_servlet_methods) {
    this->sling_servlet_methods = sling_servlet_methods;
    this->m_sling_servlet_methods_isSet = true;
}


bool
OAIComDayCqDamS7damCommonServletsS7damProductInfoServletProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(sling_servlet_paths.isSet()){ isObjectUpdated = true; break;}
    
        if(sling_servlet_methods.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

