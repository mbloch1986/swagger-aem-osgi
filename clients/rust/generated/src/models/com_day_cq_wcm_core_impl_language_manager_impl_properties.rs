/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplLanguageManagerImplProperties {
  #[serde(rename = "langmgr.list.path")]
  langmgr_list_path: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "langmgr.country.default")]
  langmgr_country_default: Option<::models::ConfigNodePropertyArray>
}

impl ComDayCqWcmCoreImplLanguageManagerImplProperties {
  pub fn new() -> ComDayCqWcmCoreImplLanguageManagerImplProperties {
    ComDayCqWcmCoreImplLanguageManagerImplProperties {
      langmgr_list_path: None,
      langmgr_country_default: None
    }
  }

  pub fn set_langmgr_list_path(&mut self, langmgr_list_path: ::models::ConfigNodePropertyString) {
    self.langmgr_list_path = Some(langmgr_list_path);
  }

  pub fn with_langmgr_list_path(mut self, langmgr_list_path: ::models::ConfigNodePropertyString) -> ComDayCqWcmCoreImplLanguageManagerImplProperties {
    self.langmgr_list_path = Some(langmgr_list_path);
    self
  }

  pub fn langmgr_list_path(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.langmgr_list_path.as_ref()
  }

  pub fn reset_langmgr_list_path(&mut self) {
    self.langmgr_list_path = None;
  }

  pub fn set_langmgr_country_default(&mut self, langmgr_country_default: ::models::ConfigNodePropertyArray) {
    self.langmgr_country_default = Some(langmgr_country_default);
  }

  pub fn with_langmgr_country_default(mut self, langmgr_country_default: ::models::ConfigNodePropertyArray) -> ComDayCqWcmCoreImplLanguageManagerImplProperties {
    self.langmgr_country_default = Some(langmgr_country_default);
    self
  }

  pub fn langmgr_country_default(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.langmgr_country_default.as_ref()
  }

  pub fn reset_langmgr_country_default(&mut self) {
    self.langmgr_country_default = None;
  }

}



