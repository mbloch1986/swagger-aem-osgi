/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OrgApacheSlingEngineParametersProperties : IEquatable<OrgApacheSlingEngineParametersProperties>
    { 
        /// <summary>
        /// Gets or Sets SlingDefaultParameterEncoding
        /// </summary>
        [DataMember(Name="sling.default.parameter.encoding")]
        public ConfigNodePropertyString SlingDefaultParameterEncoding { get; set; }

        /// <summary>
        /// Gets or Sets SlingDefaultMaxParameters
        /// </summary>
        [DataMember(Name="sling.default.max.parameters")]
        public ConfigNodePropertyInteger SlingDefaultMaxParameters { get; set; }

        /// <summary>
        /// Gets or Sets FileLocation
        /// </summary>
        [DataMember(Name="file.location")]
        public ConfigNodePropertyString FileLocation { get; set; }

        /// <summary>
        /// Gets or Sets FileThreshold
        /// </summary>
        [DataMember(Name="file.threshold")]
        public ConfigNodePropertyInteger FileThreshold { get; set; }

        /// <summary>
        /// Gets or Sets FileMax
        /// </summary>
        [DataMember(Name="file.max")]
        public ConfigNodePropertyInteger FileMax { get; set; }

        /// <summary>
        /// Gets or Sets RequestMax
        /// </summary>
        [DataMember(Name="request.max")]
        public ConfigNodePropertyInteger RequestMax { get; set; }

        /// <summary>
        /// Gets or Sets SlingDefaultParameterCheckForAdditionalContainerParameters
        /// </summary>
        [DataMember(Name="sling.default.parameter.checkForAdditionalContainerParameters")]
        public ConfigNodePropertyBoolean SlingDefaultParameterCheckForAdditionalContainerParameters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheSlingEngineParametersProperties {\n");
            sb.Append("  SlingDefaultParameterEncoding: ").Append(SlingDefaultParameterEncoding).Append("\n");
            sb.Append("  SlingDefaultMaxParameters: ").Append(SlingDefaultMaxParameters).Append("\n");
            sb.Append("  FileLocation: ").Append(FileLocation).Append("\n");
            sb.Append("  FileThreshold: ").Append(FileThreshold).Append("\n");
            sb.Append("  FileMax: ").Append(FileMax).Append("\n");
            sb.Append("  RequestMax: ").Append(RequestMax).Append("\n");
            sb.Append("  SlingDefaultParameterCheckForAdditionalContainerParameters: ").Append(SlingDefaultParameterCheckForAdditionalContainerParameters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrgApacheSlingEngineParametersProperties)obj);
        }

        /// <summary>
        /// Returns true if OrgApacheSlingEngineParametersProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of OrgApacheSlingEngineParametersProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheSlingEngineParametersProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SlingDefaultParameterEncoding == other.SlingDefaultParameterEncoding ||
                    SlingDefaultParameterEncoding != null &&
                    SlingDefaultParameterEncoding.Equals(other.SlingDefaultParameterEncoding)
                ) && 
                (
                    SlingDefaultMaxParameters == other.SlingDefaultMaxParameters ||
                    SlingDefaultMaxParameters != null &&
                    SlingDefaultMaxParameters.Equals(other.SlingDefaultMaxParameters)
                ) && 
                (
                    FileLocation == other.FileLocation ||
                    FileLocation != null &&
                    FileLocation.Equals(other.FileLocation)
                ) && 
                (
                    FileThreshold == other.FileThreshold ||
                    FileThreshold != null &&
                    FileThreshold.Equals(other.FileThreshold)
                ) && 
                (
                    FileMax == other.FileMax ||
                    FileMax != null &&
                    FileMax.Equals(other.FileMax)
                ) && 
                (
                    RequestMax == other.RequestMax ||
                    RequestMax != null &&
                    RequestMax.Equals(other.RequestMax)
                ) && 
                (
                    SlingDefaultParameterCheckForAdditionalContainerParameters == other.SlingDefaultParameterCheckForAdditionalContainerParameters ||
                    SlingDefaultParameterCheckForAdditionalContainerParameters != null &&
                    SlingDefaultParameterCheckForAdditionalContainerParameters.Equals(other.SlingDefaultParameterCheckForAdditionalContainerParameters)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (SlingDefaultParameterEncoding != null)
                    hashCode = hashCode * 59 + SlingDefaultParameterEncoding.GetHashCode();
                    if (SlingDefaultMaxParameters != null)
                    hashCode = hashCode * 59 + SlingDefaultMaxParameters.GetHashCode();
                    if (FileLocation != null)
                    hashCode = hashCode * 59 + FileLocation.GetHashCode();
                    if (FileThreshold != null)
                    hashCode = hashCode * 59 + FileThreshold.GetHashCode();
                    if (FileMax != null)
                    hashCode = hashCode * 59 + FileMax.GetHashCode();
                    if (RequestMax != null)
                    hashCode = hashCode * 59 + RequestMax.GetHashCode();
                    if (SlingDefaultParameterCheckForAdditionalContainerParameters != null)
                    hashCode = hashCode * 59 + SlingDefaultParameterCheckForAdditionalContainerParameters.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrgApacheSlingEngineParametersProperties left, OrgApacheSlingEngineParametersProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrgApacheSlingEngineParametersProperties left, OrgApacheSlingEngineParametersProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
