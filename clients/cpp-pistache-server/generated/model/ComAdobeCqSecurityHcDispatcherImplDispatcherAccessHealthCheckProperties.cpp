/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties()
{
    m_Hc_tagsIsSet = false;
    m_Dispatcher_addressIsSet = false;
    m_Dispatcher_filter_allowedIsSet = false;
    m_Dispatcher_filter_blockedIsSet = false;
    
}

ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::~ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties()
{
}

void ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Hc_tagsIsSet)
    {
        val["hc.tags"] = ModelBase::toJson(m_Hc_tags);
    }
    if(m_Dispatcher_addressIsSet)
    {
        val["dispatcher.address"] = ModelBase::toJson(m_Dispatcher_address);
    }
    if(m_Dispatcher_filter_allowedIsSet)
    {
        val["dispatcher.filter.allowed"] = ModelBase::toJson(m_Dispatcher_filter_allowed);
    }
    if(m_Dispatcher_filter_blockedIsSet)
    {
        val["dispatcher.filter.blocked"] = ModelBase::toJson(m_Dispatcher_filter_blocked);
    }
    

    return val;
}

void ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::fromJson(nlohmann::json& val)
{
    if(val.find("hc.tags") != val.end())
    {
        if(!val["hc.tags"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["hc.tags"]);
            setHcTags( newItem );
        }
        
    }
    if(val.find("dispatcher.address") != val.end())
    {
        if(!val["dispatcher.address"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["dispatcher.address"]);
            setDispatcherAddress( newItem );
        }
        
    }
    if(val.find("dispatcher.filter.allowed") != val.end())
    {
        if(!val["dispatcher.filter.allowed"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["dispatcher.filter.allowed"]);
            setDispatcherFilterAllowed( newItem );
        }
        
    }
    if(val.find("dispatcher.filter.blocked") != val.end())
    {
        if(!val["dispatcher.filter.blocked"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["dispatcher.filter.blocked"]);
            setDispatcherFilterBlocked( newItem );
        }
        
    }
    
}


ConfigNodePropertyArray ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::getHcTags() const
{
    return m_Hc_tags;
}
void ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::setHcTags(ConfigNodePropertyArray const& value)
{
    m_Hc_tags = value;
    m_Hc_tagsIsSet = true;
}
bool ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::hcTagsIsSet() const
{
    return m_Hc_tagsIsSet;
}
void ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::unsetHc_tags()
{
    m_Hc_tagsIsSet = false;
}
ConfigNodePropertyString ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::getDispatcherAddress() const
{
    return m_Dispatcher_address;
}
void ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::setDispatcherAddress(ConfigNodePropertyString const& value)
{
    m_Dispatcher_address = value;
    m_Dispatcher_addressIsSet = true;
}
bool ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::dispatcherAddressIsSet() const
{
    return m_Dispatcher_addressIsSet;
}
void ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::unsetDispatcher_address()
{
    m_Dispatcher_addressIsSet = false;
}
ConfigNodePropertyArray ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::getDispatcherFilterAllowed() const
{
    return m_Dispatcher_filter_allowed;
}
void ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::setDispatcherFilterAllowed(ConfigNodePropertyArray const& value)
{
    m_Dispatcher_filter_allowed = value;
    m_Dispatcher_filter_allowedIsSet = true;
}
bool ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::dispatcherFilterAllowedIsSet() const
{
    return m_Dispatcher_filter_allowedIsSet;
}
void ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::unsetDispatcher_filter_allowed()
{
    m_Dispatcher_filter_allowedIsSet = false;
}
ConfigNodePropertyArray ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::getDispatcherFilterBlocked() const
{
    return m_Dispatcher_filter_blocked;
}
void ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::setDispatcherFilterBlocked(ConfigNodePropertyArray const& value)
{
    m_Dispatcher_filter_blocked = value;
    m_Dispatcher_filter_blockedIsSet = true;
}
bool ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::dispatcherFilterBlockedIsSet() const
{
    return m_Dispatcher_filter_blockedIsSet;
}
void ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::unsetDispatcher_filter_blocked()
{
    m_Dispatcher_filter_blockedIsSet = false;
}

}
}
}
}

