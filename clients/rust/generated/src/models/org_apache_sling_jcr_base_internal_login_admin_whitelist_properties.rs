/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties {
  #[serde(rename = "whitelist.bypass")]
  whitelist_bypass: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "whitelist.bundles.regexp")]
  whitelist_bundles_regexp: Option<::models::ConfigNodePropertyString>
}

impl OrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties {
  pub fn new() -> OrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties {
    OrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties {
      whitelist_bypass: None,
      whitelist_bundles_regexp: None
    }
  }

  pub fn set_whitelist_bypass(&mut self, whitelist_bypass: ::models::ConfigNodePropertyBoolean) {
    self.whitelist_bypass = Some(whitelist_bypass);
  }

  pub fn with_whitelist_bypass(mut self, whitelist_bypass: ::models::ConfigNodePropertyBoolean) -> OrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties {
    self.whitelist_bypass = Some(whitelist_bypass);
    self
  }

  pub fn whitelist_bypass(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.whitelist_bypass.as_ref()
  }

  pub fn reset_whitelist_bypass(&mut self) {
    self.whitelist_bypass = None;
  }

  pub fn set_whitelist_bundles_regexp(&mut self, whitelist_bundles_regexp: ::models::ConfigNodePropertyString) {
    self.whitelist_bundles_regexp = Some(whitelist_bundles_regexp);
  }

  pub fn with_whitelist_bundles_regexp(mut self, whitelist_bundles_regexp: ::models::ConfigNodePropertyString) -> OrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties {
    self.whitelist_bundles_regexp = Some(whitelist_bundles_regexp);
    self
  }

  pub fn whitelist_bundles_regexp(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.whitelist_bundles_regexp.as_ref()
  }

  pub fn reset_whitelist_bundles_regexp(&mut self) {
    self.whitelist_bundles_regexp = None;
  }

}



