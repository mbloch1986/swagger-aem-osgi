/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties()
{
    m_Message_propertiesIsSet = false;
    m_MessageBoxSizeLimitIsSet = false;
    m_MessageCountLimitIsSet = false;
    m_NotifyFailureIsSet = false;
    m_FailureMessageFromIsSet = false;
    m_FailureTemplatePathIsSet = false;
    m_MaxRetriesIsSet = false;
    m_MinWaitBetweenRetriesIsSet = false;
    m_CountUpdatePoolSizeIsSet = false;
    m_Inbox_pathIsSet = false;
    m_Sentitems_pathIsSet = false;
    m_SupportAttachmentsIsSet = false;
    m_SupportGroupMessagingIsSet = false;
    m_MaxTotalRecipientsIsSet = false;
    m_BatchSizeIsSet = false;
    m_MaxTotalAttachmentSizeIsSet = false;
    m_AttachmentTypeBlacklistIsSet = false;
    m_AllowedAttachmentTypesIsSet = false;
    m_ServiceSelectorIsSet = false;
    m_FieldWhitelistIsSet = false;
}

ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::~ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties()
{
}

void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Message_propertiesIsSet)
    {
        val[utility::conversions::to_string_t("message.properties")] = ModelBase::toJson(m_Message_properties);
    }
    if(m_MessageBoxSizeLimitIsSet)
    {
        val[utility::conversions::to_string_t("messageBoxSizeLimit")] = ModelBase::toJson(m_MessageBoxSizeLimit);
    }
    if(m_MessageCountLimitIsSet)
    {
        val[utility::conversions::to_string_t("messageCountLimit")] = ModelBase::toJson(m_MessageCountLimit);
    }
    if(m_NotifyFailureIsSet)
    {
        val[utility::conversions::to_string_t("notifyFailure")] = ModelBase::toJson(m_NotifyFailure);
    }
    if(m_FailureMessageFromIsSet)
    {
        val[utility::conversions::to_string_t("failureMessageFrom")] = ModelBase::toJson(m_FailureMessageFrom);
    }
    if(m_FailureTemplatePathIsSet)
    {
        val[utility::conversions::to_string_t("failureTemplatePath")] = ModelBase::toJson(m_FailureTemplatePath);
    }
    if(m_MaxRetriesIsSet)
    {
        val[utility::conversions::to_string_t("maxRetries")] = ModelBase::toJson(m_MaxRetries);
    }
    if(m_MinWaitBetweenRetriesIsSet)
    {
        val[utility::conversions::to_string_t("minWaitBetweenRetries")] = ModelBase::toJson(m_MinWaitBetweenRetries);
    }
    if(m_CountUpdatePoolSizeIsSet)
    {
        val[utility::conversions::to_string_t("countUpdatePoolSize")] = ModelBase::toJson(m_CountUpdatePoolSize);
    }
    if(m_Inbox_pathIsSet)
    {
        val[utility::conversions::to_string_t("inbox.path")] = ModelBase::toJson(m_Inbox_path);
    }
    if(m_Sentitems_pathIsSet)
    {
        val[utility::conversions::to_string_t("sentitems.path")] = ModelBase::toJson(m_Sentitems_path);
    }
    if(m_SupportAttachmentsIsSet)
    {
        val[utility::conversions::to_string_t("supportAttachments")] = ModelBase::toJson(m_SupportAttachments);
    }
    if(m_SupportGroupMessagingIsSet)
    {
        val[utility::conversions::to_string_t("supportGroupMessaging")] = ModelBase::toJson(m_SupportGroupMessaging);
    }
    if(m_MaxTotalRecipientsIsSet)
    {
        val[utility::conversions::to_string_t("maxTotalRecipients")] = ModelBase::toJson(m_MaxTotalRecipients);
    }
    if(m_BatchSizeIsSet)
    {
        val[utility::conversions::to_string_t("batchSize")] = ModelBase::toJson(m_BatchSize);
    }
    if(m_MaxTotalAttachmentSizeIsSet)
    {
        val[utility::conversions::to_string_t("maxTotalAttachmentSize")] = ModelBase::toJson(m_MaxTotalAttachmentSize);
    }
    if(m_AttachmentTypeBlacklistIsSet)
    {
        val[utility::conversions::to_string_t("attachmentTypeBlacklist")] = ModelBase::toJson(m_AttachmentTypeBlacklist);
    }
    if(m_AllowedAttachmentTypesIsSet)
    {
        val[utility::conversions::to_string_t("allowedAttachmentTypes")] = ModelBase::toJson(m_AllowedAttachmentTypes);
    }
    if(m_ServiceSelectorIsSet)
    {
        val[utility::conversions::to_string_t("serviceSelector")] = ModelBase::toJson(m_ServiceSelector);
    }
    if(m_FieldWhitelistIsSet)
    {
        val[utility::conversions::to_string_t("fieldWhitelist")] = ModelBase::toJson(m_FieldWhitelist);
    }

    return val;
}

void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("message.properties")))
    {
        if(!val[utility::conversions::to_string_t("message.properties")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("message.properties")]);
            setMessageProperties( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("messageBoxSizeLimit")))
    {
        if(!val[utility::conversions::to_string_t("messageBoxSizeLimit")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("messageBoxSizeLimit")]);
            setMessageBoxSizeLimit( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("messageCountLimit")))
    {
        if(!val[utility::conversions::to_string_t("messageCountLimit")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("messageCountLimit")]);
            setMessageCountLimit( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("notifyFailure")))
    {
        if(!val[utility::conversions::to_string_t("notifyFailure")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("notifyFailure")]);
            setNotifyFailure( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("failureMessageFrom")))
    {
        if(!val[utility::conversions::to_string_t("failureMessageFrom")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("failureMessageFrom")]);
            setFailureMessageFrom( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("failureTemplatePath")))
    {
        if(!val[utility::conversions::to_string_t("failureTemplatePath")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("failureTemplatePath")]);
            setFailureTemplatePath( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("maxRetries")))
    {
        if(!val[utility::conversions::to_string_t("maxRetries")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("maxRetries")]);
            setMaxRetries( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("minWaitBetweenRetries")))
    {
        if(!val[utility::conversions::to_string_t("minWaitBetweenRetries")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("minWaitBetweenRetries")]);
            setMinWaitBetweenRetries( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("countUpdatePoolSize")))
    {
        if(!val[utility::conversions::to_string_t("countUpdatePoolSize")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("countUpdatePoolSize")]);
            setCountUpdatePoolSize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("inbox.path")))
    {
        if(!val[utility::conversions::to_string_t("inbox.path")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("inbox.path")]);
            setInboxPath( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sentitems.path")))
    {
        if(!val[utility::conversions::to_string_t("sentitems.path")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("sentitems.path")]);
            setSentitemsPath( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("supportAttachments")))
    {
        if(!val[utility::conversions::to_string_t("supportAttachments")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("supportAttachments")]);
            setSupportAttachments( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("supportGroupMessaging")))
    {
        if(!val[utility::conversions::to_string_t("supportGroupMessaging")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("supportGroupMessaging")]);
            setSupportGroupMessaging( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("maxTotalRecipients")))
    {
        if(!val[utility::conversions::to_string_t("maxTotalRecipients")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("maxTotalRecipients")]);
            setMaxTotalRecipients( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("batchSize")))
    {
        if(!val[utility::conversions::to_string_t("batchSize")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("batchSize")]);
            setBatchSize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("maxTotalAttachmentSize")))
    {
        if(!val[utility::conversions::to_string_t("maxTotalAttachmentSize")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("maxTotalAttachmentSize")]);
            setMaxTotalAttachmentSize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("attachmentTypeBlacklist")))
    {
        if(!val[utility::conversions::to_string_t("attachmentTypeBlacklist")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("attachmentTypeBlacklist")]);
            setAttachmentTypeBlacklist( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("allowedAttachmentTypes")))
    {
        if(!val[utility::conversions::to_string_t("allowedAttachmentTypes")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("allowedAttachmentTypes")]);
            setAllowedAttachmentTypes( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("serviceSelector")))
    {
        if(!val[utility::conversions::to_string_t("serviceSelector")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("serviceSelector")]);
            setServiceSelector( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("fieldWhitelist")))
    {
        if(!val[utility::conversions::to_string_t("fieldWhitelist")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("fieldWhitelist")]);
            setFieldWhitelist( newItem );
        }
    }
}

void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Message_propertiesIsSet)
    {
        if (m_Message_properties.get())
        {
            m_Message_properties->toMultipart(multipart, utility::conversions::to_string_t("message.properties."));
        }
    }
    if(m_MessageBoxSizeLimitIsSet)
    {
        if (m_MessageBoxSizeLimit.get())
        {
            m_MessageBoxSizeLimit->toMultipart(multipart, utility::conversions::to_string_t("messageBoxSizeLimit."));
        }
    }
    if(m_MessageCountLimitIsSet)
    {
        if (m_MessageCountLimit.get())
        {
            m_MessageCountLimit->toMultipart(multipart, utility::conversions::to_string_t("messageCountLimit."));
        }
    }
    if(m_NotifyFailureIsSet)
    {
        if (m_NotifyFailure.get())
        {
            m_NotifyFailure->toMultipart(multipart, utility::conversions::to_string_t("notifyFailure."));
        }
    }
    if(m_FailureMessageFromIsSet)
    {
        if (m_FailureMessageFrom.get())
        {
            m_FailureMessageFrom->toMultipart(multipart, utility::conversions::to_string_t("failureMessageFrom."));
        }
    }
    if(m_FailureTemplatePathIsSet)
    {
        if (m_FailureTemplatePath.get())
        {
            m_FailureTemplatePath->toMultipart(multipart, utility::conversions::to_string_t("failureTemplatePath."));
        }
    }
    if(m_MaxRetriesIsSet)
    {
        if (m_MaxRetries.get())
        {
            m_MaxRetries->toMultipart(multipart, utility::conversions::to_string_t("maxRetries."));
        }
    }
    if(m_MinWaitBetweenRetriesIsSet)
    {
        if (m_MinWaitBetweenRetries.get())
        {
            m_MinWaitBetweenRetries->toMultipart(multipart, utility::conversions::to_string_t("minWaitBetweenRetries."));
        }
    }
    if(m_CountUpdatePoolSizeIsSet)
    {
        if (m_CountUpdatePoolSize.get())
        {
            m_CountUpdatePoolSize->toMultipart(multipart, utility::conversions::to_string_t("countUpdatePoolSize."));
        }
    }
    if(m_Inbox_pathIsSet)
    {
        if (m_Inbox_path.get())
        {
            m_Inbox_path->toMultipart(multipart, utility::conversions::to_string_t("inbox.path."));
        }
    }
    if(m_Sentitems_pathIsSet)
    {
        if (m_Sentitems_path.get())
        {
            m_Sentitems_path->toMultipart(multipart, utility::conversions::to_string_t("sentitems.path."));
        }
    }
    if(m_SupportAttachmentsIsSet)
    {
        if (m_SupportAttachments.get())
        {
            m_SupportAttachments->toMultipart(multipart, utility::conversions::to_string_t("supportAttachments."));
        }
    }
    if(m_SupportGroupMessagingIsSet)
    {
        if (m_SupportGroupMessaging.get())
        {
            m_SupportGroupMessaging->toMultipart(multipart, utility::conversions::to_string_t("supportGroupMessaging."));
        }
    }
    if(m_MaxTotalRecipientsIsSet)
    {
        if (m_MaxTotalRecipients.get())
        {
            m_MaxTotalRecipients->toMultipart(multipart, utility::conversions::to_string_t("maxTotalRecipients."));
        }
    }
    if(m_BatchSizeIsSet)
    {
        if (m_BatchSize.get())
        {
            m_BatchSize->toMultipart(multipart, utility::conversions::to_string_t("batchSize."));
        }
    }
    if(m_MaxTotalAttachmentSizeIsSet)
    {
        if (m_MaxTotalAttachmentSize.get())
        {
            m_MaxTotalAttachmentSize->toMultipart(multipart, utility::conversions::to_string_t("maxTotalAttachmentSize."));
        }
    }
    if(m_AttachmentTypeBlacklistIsSet)
    {
        if (m_AttachmentTypeBlacklist.get())
        {
            m_AttachmentTypeBlacklist->toMultipart(multipart, utility::conversions::to_string_t("attachmentTypeBlacklist."));
        }
    }
    if(m_AllowedAttachmentTypesIsSet)
    {
        if (m_AllowedAttachmentTypes.get())
        {
            m_AllowedAttachmentTypes->toMultipart(multipart, utility::conversions::to_string_t("allowedAttachmentTypes."));
        }
    }
    if(m_ServiceSelectorIsSet)
    {
        if (m_ServiceSelector.get())
        {
            m_ServiceSelector->toMultipart(multipart, utility::conversions::to_string_t("serviceSelector."));
        }
    }
    if(m_FieldWhitelistIsSet)
    {
        if (m_FieldWhitelist.get())
        {
            m_FieldWhitelist->toMultipart(multipart, utility::conversions::to_string_t("fieldWhitelist."));
        }
    }
}

void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("message.properties")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("message.properties")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("message.properties."));
            setMessageProperties( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("messageBoxSizeLimit")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("messageBoxSizeLimit")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("messageBoxSizeLimit."));
            setMessageBoxSizeLimit( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("messageCountLimit")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("messageCountLimit")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("messageCountLimit."));
            setMessageCountLimit( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("notifyFailure")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("notifyFailure")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("notifyFailure."));
            setNotifyFailure( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("failureMessageFrom")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("failureMessageFrom")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("failureMessageFrom."));
            setFailureMessageFrom( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("failureTemplatePath")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("failureTemplatePath")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("failureTemplatePath."));
            setFailureTemplatePath( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("maxRetries")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("maxRetries")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("maxRetries."));
            setMaxRetries( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("minWaitBetweenRetries")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("minWaitBetweenRetries")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("minWaitBetweenRetries."));
            setMinWaitBetweenRetries( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("countUpdatePoolSize")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("countUpdatePoolSize")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("countUpdatePoolSize."));
            setCountUpdatePoolSize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("inbox.path")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("inbox.path")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("inbox.path."));
            setInboxPath( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sentitems.path")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("sentitems.path")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("sentitems.path."));
            setSentitemsPath( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("supportAttachments")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("supportAttachments")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("supportAttachments."));
            setSupportAttachments( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("supportGroupMessaging")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("supportGroupMessaging")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("supportGroupMessaging."));
            setSupportGroupMessaging( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("maxTotalRecipients")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("maxTotalRecipients")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("maxTotalRecipients."));
            setMaxTotalRecipients( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("batchSize")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("batchSize")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("batchSize."));
            setBatchSize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("maxTotalAttachmentSize")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("maxTotalAttachmentSize")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("maxTotalAttachmentSize."));
            setMaxTotalAttachmentSize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("attachmentTypeBlacklist")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("attachmentTypeBlacklist")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("attachmentTypeBlacklist."));
            setAttachmentTypeBlacklist( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("allowedAttachmentTypes")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("allowedAttachmentTypes")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("allowedAttachmentTypes."));
            setAllowedAttachmentTypes( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("serviceSelector")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("serviceSelector")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("serviceSelector."));
            setServiceSelector( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fieldWhitelist")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("fieldWhitelist")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("fieldWhitelist."));
            setFieldWhitelist( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getMessageProperties() const
{
    return m_Message_properties;
}


void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setMessageProperties(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Message_properties = value;
    m_Message_propertiesIsSet = true;
}
bool ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::messagePropertiesIsSet() const
{
    return m_Message_propertiesIsSet;
}

void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::unsetMessage_properties()
{
    m_Message_propertiesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getMessageBoxSizeLimit() const
{
    return m_MessageBoxSizeLimit;
}


void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setMessageBoxSizeLimit(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_MessageBoxSizeLimit = value;
    m_MessageBoxSizeLimitIsSet = true;
}
bool ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::messageBoxSizeLimitIsSet() const
{
    return m_MessageBoxSizeLimitIsSet;
}

void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::unsetMessageBoxSizeLimit()
{
    m_MessageBoxSizeLimitIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getMessageCountLimit() const
{
    return m_MessageCountLimit;
}


void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setMessageCountLimit(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_MessageCountLimit = value;
    m_MessageCountLimitIsSet = true;
}
bool ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::messageCountLimitIsSet() const
{
    return m_MessageCountLimitIsSet;
}

void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::unsetMessageCountLimit()
{
    m_MessageCountLimitIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getNotifyFailure() const
{
    return m_NotifyFailure;
}


void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setNotifyFailure(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_NotifyFailure = value;
    m_NotifyFailureIsSet = true;
}
bool ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::notifyFailureIsSet() const
{
    return m_NotifyFailureIsSet;
}

void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::unsetNotifyFailure()
{
    m_NotifyFailureIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getFailureMessageFrom() const
{
    return m_FailureMessageFrom;
}


void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setFailureMessageFrom(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_FailureMessageFrom = value;
    m_FailureMessageFromIsSet = true;
}
bool ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::failureMessageFromIsSet() const
{
    return m_FailureMessageFromIsSet;
}

void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::unsetFailureMessageFrom()
{
    m_FailureMessageFromIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getFailureTemplatePath() const
{
    return m_FailureTemplatePath;
}


void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setFailureTemplatePath(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_FailureTemplatePath = value;
    m_FailureTemplatePathIsSet = true;
}
bool ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::failureTemplatePathIsSet() const
{
    return m_FailureTemplatePathIsSet;
}

void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::unsetFailureTemplatePath()
{
    m_FailureTemplatePathIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getMaxRetries() const
{
    return m_MaxRetries;
}


void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setMaxRetries(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_MaxRetries = value;
    m_MaxRetriesIsSet = true;
}
bool ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::maxRetriesIsSet() const
{
    return m_MaxRetriesIsSet;
}

void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::unsetMaxRetries()
{
    m_MaxRetriesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getMinWaitBetweenRetries() const
{
    return m_MinWaitBetweenRetries;
}


void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setMinWaitBetweenRetries(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_MinWaitBetweenRetries = value;
    m_MinWaitBetweenRetriesIsSet = true;
}
bool ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::minWaitBetweenRetriesIsSet() const
{
    return m_MinWaitBetweenRetriesIsSet;
}

void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::unsetMinWaitBetweenRetries()
{
    m_MinWaitBetweenRetriesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getCountUpdatePoolSize() const
{
    return m_CountUpdatePoolSize;
}


void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setCountUpdatePoolSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_CountUpdatePoolSize = value;
    m_CountUpdatePoolSizeIsSet = true;
}
bool ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::countUpdatePoolSizeIsSet() const
{
    return m_CountUpdatePoolSizeIsSet;
}

void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::unsetCountUpdatePoolSize()
{
    m_CountUpdatePoolSizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getInboxPath() const
{
    return m_Inbox_path;
}


void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setInboxPath(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Inbox_path = value;
    m_Inbox_pathIsSet = true;
}
bool ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::inboxPathIsSet() const
{
    return m_Inbox_pathIsSet;
}

void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::unsetInbox_path()
{
    m_Inbox_pathIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getSentitemsPath() const
{
    return m_Sentitems_path;
}


void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setSentitemsPath(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Sentitems_path = value;
    m_Sentitems_pathIsSet = true;
}
bool ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::sentitemsPathIsSet() const
{
    return m_Sentitems_pathIsSet;
}

void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::unsetSentitems_path()
{
    m_Sentitems_pathIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getSupportAttachments() const
{
    return m_SupportAttachments;
}


void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setSupportAttachments(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_SupportAttachments = value;
    m_SupportAttachmentsIsSet = true;
}
bool ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::supportAttachmentsIsSet() const
{
    return m_SupportAttachmentsIsSet;
}

void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::unsetSupportAttachments()
{
    m_SupportAttachmentsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getSupportGroupMessaging() const
{
    return m_SupportGroupMessaging;
}


void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setSupportGroupMessaging(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_SupportGroupMessaging = value;
    m_SupportGroupMessagingIsSet = true;
}
bool ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::supportGroupMessagingIsSet() const
{
    return m_SupportGroupMessagingIsSet;
}

void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::unsetSupportGroupMessaging()
{
    m_SupportGroupMessagingIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getMaxTotalRecipients() const
{
    return m_MaxTotalRecipients;
}


void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setMaxTotalRecipients(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_MaxTotalRecipients = value;
    m_MaxTotalRecipientsIsSet = true;
}
bool ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::maxTotalRecipientsIsSet() const
{
    return m_MaxTotalRecipientsIsSet;
}

void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::unsetMaxTotalRecipients()
{
    m_MaxTotalRecipientsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getBatchSize() const
{
    return m_BatchSize;
}


void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setBatchSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_BatchSize = value;
    m_BatchSizeIsSet = true;
}
bool ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::batchSizeIsSet() const
{
    return m_BatchSizeIsSet;
}

void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::unsetBatchSize()
{
    m_BatchSizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getMaxTotalAttachmentSize() const
{
    return m_MaxTotalAttachmentSize;
}


void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setMaxTotalAttachmentSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_MaxTotalAttachmentSize = value;
    m_MaxTotalAttachmentSizeIsSet = true;
}
bool ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::maxTotalAttachmentSizeIsSet() const
{
    return m_MaxTotalAttachmentSizeIsSet;
}

void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::unsetMaxTotalAttachmentSize()
{
    m_MaxTotalAttachmentSizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getAttachmentTypeBlacklist() const
{
    return m_AttachmentTypeBlacklist;
}


void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setAttachmentTypeBlacklist(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_AttachmentTypeBlacklist = value;
    m_AttachmentTypeBlacklistIsSet = true;
}
bool ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::attachmentTypeBlacklistIsSet() const
{
    return m_AttachmentTypeBlacklistIsSet;
}

void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::unsetAttachmentTypeBlacklist()
{
    m_AttachmentTypeBlacklistIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getAllowedAttachmentTypes() const
{
    return m_AllowedAttachmentTypes;
}


void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setAllowedAttachmentTypes(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_AllowedAttachmentTypes = value;
    m_AllowedAttachmentTypesIsSet = true;
}
bool ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::allowedAttachmentTypesIsSet() const
{
    return m_AllowedAttachmentTypesIsSet;
}

void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::unsetAllowedAttachmentTypes()
{
    m_AllowedAttachmentTypesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getServiceSelector() const
{
    return m_ServiceSelector;
}


void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setServiceSelector(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_ServiceSelector = value;
    m_ServiceSelectorIsSet = true;
}
bool ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::serviceSelectorIsSet() const
{
    return m_ServiceSelectorIsSet;
}

void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::unsetServiceSelector()
{
    m_ServiceSelectorIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getFieldWhitelist() const
{
    return m_FieldWhitelist;
}


void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setFieldWhitelist(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_FieldWhitelist = value;
    m_FieldWhitelistIsSet = true;
}
bool ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::fieldWhitelistIsSet() const
{
    return m_FieldWhitelistIsSet;
}

void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::unsetFieldWhitelist()
{
    m_FieldWhitelistIsSet = false;
}

}
}
}
}

