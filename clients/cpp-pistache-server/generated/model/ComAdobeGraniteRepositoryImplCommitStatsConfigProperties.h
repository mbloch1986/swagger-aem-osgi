/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ComAdobeGraniteRepositoryImplCommitStatsConfigProperties.h
 *
 * 
 */

#ifndef ComAdobeGraniteRepositoryImplCommitStatsConfigProperties_H_
#define ComAdobeGraniteRepositoryImplCommitStatsConfigProperties_H_


#include "ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComAdobeGraniteRepositoryImplCommitStatsConfigProperties
    : public ModelBase
{
public:
    ComAdobeGraniteRepositoryImplCommitStatsConfigProperties();
    virtual ~ComAdobeGraniteRepositoryImplCommitStatsConfigProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// ComAdobeGraniteRepositoryImplCommitStatsConfigProperties members

    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getEnabled() const;
    void setEnabled(ConfigNodePropertyBoolean const& value);
    bool enabledIsSet() const;
    void unsetEnabled();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getIntervalSeconds() const;
    void setIntervalSeconds(ConfigNodePropertyInteger const& value);
    bool intervalSecondsIsSet() const;
    void unsetIntervalSeconds();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getCommitsPerIntervalThreshold() const;
    void setCommitsPerIntervalThreshold(ConfigNodePropertyInteger const& value);
    bool commitsPerIntervalThresholdIsSet() const;
    void unsetCommitsPerIntervalThreshold();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getMaxLocationLength() const;
    void setMaxLocationLength(ConfigNodePropertyInteger const& value);
    bool maxLocationLengthIsSet() const;
    void unsetMaxLocationLength();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getMaxDetailsShown() const;
    void setMaxDetailsShown(ConfigNodePropertyInteger const& value);
    bool maxDetailsShownIsSet() const;
    void unsetMaxDetailsShown();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getMinDetailsPercentage() const;
    void setMinDetailsPercentage(ConfigNodePropertyInteger const& value);
    bool minDetailsPercentageIsSet() const;
    void unsetMinDetailsPercentage();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyArray getThreadMatchers() const;
    void setThreadMatchers(ConfigNodePropertyArray const& value);
    bool threadMatchersIsSet() const;
    void unsetThreadMatchers();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getMaxGreedyDepth() const;
    void setMaxGreedyDepth(ConfigNodePropertyInteger const& value);
    bool maxGreedyDepthIsSet() const;
    void unsetMaxGreedyDepth();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getGreedyStackMatchers() const;
    void setGreedyStackMatchers(ConfigNodePropertyString const& value);
    bool greedyStackMatchersIsSet() const;
    void unsetGreedyStackMatchers();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyArray getStackFilters() const;
    void setStackFilters(ConfigNodePropertyArray const& value);
    bool stackFiltersIsSet() const;
    void unsetStackFilters();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyArray getStackMatchers() const;
    void setStackMatchers(ConfigNodePropertyArray const& value);
    bool stackMatchersIsSet() const;
    void unsetStackMatchers();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyArray getStackCategorizers() const;
    void setStackCategorizers(ConfigNodePropertyArray const& value);
    bool stackCategorizersIsSet() const;
    void unsetStackCategorizers();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyArray getStackShorteners() const;
    void setStackShorteners(ConfigNodePropertyArray const& value);
    bool stackShortenersIsSet() const;
    void unsetStackShorteners();

protected:
    ConfigNodePropertyBoolean m_Enabled;
    bool m_EnabledIsSet;
    ConfigNodePropertyInteger m_IntervalSeconds;
    bool m_IntervalSecondsIsSet;
    ConfigNodePropertyInteger m_CommitsPerIntervalThreshold;
    bool m_CommitsPerIntervalThresholdIsSet;
    ConfigNodePropertyInteger m_MaxLocationLength;
    bool m_MaxLocationLengthIsSet;
    ConfigNodePropertyInteger m_MaxDetailsShown;
    bool m_MaxDetailsShownIsSet;
    ConfigNodePropertyInteger m_MinDetailsPercentage;
    bool m_MinDetailsPercentageIsSet;
    ConfigNodePropertyArray m_ThreadMatchers;
    bool m_ThreadMatchersIsSet;
    ConfigNodePropertyInteger m_MaxGreedyDepth;
    bool m_MaxGreedyDepthIsSet;
    ConfigNodePropertyString m_GreedyStackMatchers;
    bool m_GreedyStackMatchersIsSet;
    ConfigNodePropertyArray m_StackFilters;
    bool m_StackFiltersIsSet;
    ConfigNodePropertyArray m_StackMatchers;
    bool m_StackMatchersIsSet;
    ConfigNodePropertyArray m_StackCategorizers;
    bool m_StackCategorizersIsSet;
    ConfigNodePropertyArray m_StackShorteners;
    bool m_StackShortenersIsSet;
};

}
}
}
}

#endif /* ComAdobeGraniteRepositoryImplCommitStatsConfigProperties_H_ */
