/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OrgApacheHttpProxyconfiguratorProperties
    /// </summary>
    [DataContract]
    public partial class OrgApacheHttpProxyconfiguratorProperties :  IEquatable<OrgApacheHttpProxyconfiguratorProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgApacheHttpProxyconfiguratorProperties" /> class.
        /// </summary>
        /// <param name="proxyEnabled">proxyEnabled.</param>
        /// <param name="proxyHost">proxyHost.</param>
        /// <param name="proxyPort">proxyPort.</param>
        /// <param name="proxyUser">proxyUser.</param>
        /// <param name="proxyPassword">proxyPassword.</param>
        /// <param name="proxyExceptions">proxyExceptions.</param>
        public OrgApacheHttpProxyconfiguratorProperties(ConfigNodePropertyBoolean proxyEnabled = default(ConfigNodePropertyBoolean), ConfigNodePropertyString proxyHost = default(ConfigNodePropertyString), ConfigNodePropertyInteger proxyPort = default(ConfigNodePropertyInteger), ConfigNodePropertyString proxyUser = default(ConfigNodePropertyString), ConfigNodePropertyString proxyPassword = default(ConfigNodePropertyString), ConfigNodePropertyArray proxyExceptions = default(ConfigNodePropertyArray))
        {
            this.ProxyEnabled = proxyEnabled;
            this.ProxyHost = proxyHost;
            this.ProxyPort = proxyPort;
            this.ProxyUser = proxyUser;
            this.ProxyPassword = proxyPassword;
            this.ProxyExceptions = proxyExceptions;
        }
        
        /// <summary>
        /// Gets or Sets ProxyEnabled
        /// </summary>
        [DataMember(Name="proxy.enabled", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean ProxyEnabled { get; set; }

        /// <summary>
        /// Gets or Sets ProxyHost
        /// </summary>
        [DataMember(Name="proxy.host", EmitDefaultValue=false)]
        public ConfigNodePropertyString ProxyHost { get; set; }

        /// <summary>
        /// Gets or Sets ProxyPort
        /// </summary>
        [DataMember(Name="proxy.port", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger ProxyPort { get; set; }

        /// <summary>
        /// Gets or Sets ProxyUser
        /// </summary>
        [DataMember(Name="proxy.user", EmitDefaultValue=false)]
        public ConfigNodePropertyString ProxyUser { get; set; }

        /// <summary>
        /// Gets or Sets ProxyPassword
        /// </summary>
        [DataMember(Name="proxy.password", EmitDefaultValue=false)]
        public ConfigNodePropertyString ProxyPassword { get; set; }

        /// <summary>
        /// Gets or Sets ProxyExceptions
        /// </summary>
        [DataMember(Name="proxy.exceptions", EmitDefaultValue=false)]
        public ConfigNodePropertyArray ProxyExceptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheHttpProxyconfiguratorProperties {\n");
            sb.Append("  ProxyEnabled: ").Append(ProxyEnabled).Append("\n");
            sb.Append("  ProxyHost: ").Append(ProxyHost).Append("\n");
            sb.Append("  ProxyPort: ").Append(ProxyPort).Append("\n");
            sb.Append("  ProxyUser: ").Append(ProxyUser).Append("\n");
            sb.Append("  ProxyPassword: ").Append(ProxyPassword).Append("\n");
            sb.Append("  ProxyExceptions: ").Append(ProxyExceptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrgApacheHttpProxyconfiguratorProperties);
        }

        /// <summary>
        /// Returns true if OrgApacheHttpProxyconfiguratorProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of OrgApacheHttpProxyconfiguratorProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheHttpProxyconfiguratorProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProxyEnabled == input.ProxyEnabled ||
                    (this.ProxyEnabled != null &&
                    this.ProxyEnabled.Equals(input.ProxyEnabled))
                ) && 
                (
                    this.ProxyHost == input.ProxyHost ||
                    (this.ProxyHost != null &&
                    this.ProxyHost.Equals(input.ProxyHost))
                ) && 
                (
                    this.ProxyPort == input.ProxyPort ||
                    (this.ProxyPort != null &&
                    this.ProxyPort.Equals(input.ProxyPort))
                ) && 
                (
                    this.ProxyUser == input.ProxyUser ||
                    (this.ProxyUser != null &&
                    this.ProxyUser.Equals(input.ProxyUser))
                ) && 
                (
                    this.ProxyPassword == input.ProxyPassword ||
                    (this.ProxyPassword != null &&
                    this.ProxyPassword.Equals(input.ProxyPassword))
                ) && 
                (
                    this.ProxyExceptions == input.ProxyExceptions ||
                    (this.ProxyExceptions != null &&
                    this.ProxyExceptions.Equals(input.ProxyExceptions))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProxyEnabled != null)
                    hashCode = hashCode * 59 + this.ProxyEnabled.GetHashCode();
                if (this.ProxyHost != null)
                    hashCode = hashCode * 59 + this.ProxyHost.GetHashCode();
                if (this.ProxyPort != null)
                    hashCode = hashCode * 59 + this.ProxyPort.GetHashCode();
                if (this.ProxyUser != null)
                    hashCode = hashCode * 59 + this.ProxyUser.GetHashCode();
                if (this.ProxyPassword != null)
                    hashCode = hashCode * 59 + this.ProxyPassword.GetHashCode();
                if (this.ProxyExceptions != null)
                    hashCode = hashCode * 59 + this.ProxyExceptions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
