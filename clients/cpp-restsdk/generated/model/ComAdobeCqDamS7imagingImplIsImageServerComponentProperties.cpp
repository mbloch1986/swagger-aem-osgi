/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeCqDamS7imagingImplIsImageServerComponentProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::ComAdobeCqDamS7imagingImplIsImageServerComponentProperties()
{
    m_TcpPortIsSet = false;
    m_AllowRemoteAccessIsSet = false;
    m_MaxRenderRgnPixelsIsSet = false;
    m_MaxMessageSizeIsSet = false;
    m_RandomAccessUrlTimeoutIsSet = false;
    m_WorkerThreadsIsSet = false;
}

ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::~ComAdobeCqDamS7imagingImplIsImageServerComponentProperties()
{
}

void ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_TcpPortIsSet)
    {
        val[utility::conversions::to_string_t("TcpPort")] = ModelBase::toJson(m_TcpPort);
    }
    if(m_AllowRemoteAccessIsSet)
    {
        val[utility::conversions::to_string_t("AllowRemoteAccess")] = ModelBase::toJson(m_AllowRemoteAccess);
    }
    if(m_MaxRenderRgnPixelsIsSet)
    {
        val[utility::conversions::to_string_t("MaxRenderRgnPixels")] = ModelBase::toJson(m_MaxRenderRgnPixels);
    }
    if(m_MaxMessageSizeIsSet)
    {
        val[utility::conversions::to_string_t("MaxMessageSize")] = ModelBase::toJson(m_MaxMessageSize);
    }
    if(m_RandomAccessUrlTimeoutIsSet)
    {
        val[utility::conversions::to_string_t("RandomAccessUrlTimeout")] = ModelBase::toJson(m_RandomAccessUrlTimeout);
    }
    if(m_WorkerThreadsIsSet)
    {
        val[utility::conversions::to_string_t("WorkerThreads")] = ModelBase::toJson(m_WorkerThreads);
    }

    return val;
}

void ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("TcpPort")))
    {
        if(!val[utility::conversions::to_string_t("TcpPort")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("TcpPort")]);
            setTcpPort( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("AllowRemoteAccess")))
    {
        if(!val[utility::conversions::to_string_t("AllowRemoteAccess")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("AllowRemoteAccess")]);
            setAllowRemoteAccess( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("MaxRenderRgnPixels")))
    {
        if(!val[utility::conversions::to_string_t("MaxRenderRgnPixels")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("MaxRenderRgnPixels")]);
            setMaxRenderRgnPixels( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("MaxMessageSize")))
    {
        if(!val[utility::conversions::to_string_t("MaxMessageSize")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("MaxMessageSize")]);
            setMaxMessageSize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("RandomAccessUrlTimeout")))
    {
        if(!val[utility::conversions::to_string_t("RandomAccessUrlTimeout")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("RandomAccessUrlTimeout")]);
            setRandomAccessUrlTimeout( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("WorkerThreads")))
    {
        if(!val[utility::conversions::to_string_t("WorkerThreads")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("WorkerThreads")]);
            setWorkerThreads( newItem );
        }
    }
}

void ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_TcpPortIsSet)
    {
        if (m_TcpPort.get())
        {
            m_TcpPort->toMultipart(multipart, utility::conversions::to_string_t("TcpPort."));
        }
    }
    if(m_AllowRemoteAccessIsSet)
    {
        if (m_AllowRemoteAccess.get())
        {
            m_AllowRemoteAccess->toMultipart(multipart, utility::conversions::to_string_t("AllowRemoteAccess."));
        }
    }
    if(m_MaxRenderRgnPixelsIsSet)
    {
        if (m_MaxRenderRgnPixels.get())
        {
            m_MaxRenderRgnPixels->toMultipart(multipart, utility::conversions::to_string_t("MaxRenderRgnPixels."));
        }
    }
    if(m_MaxMessageSizeIsSet)
    {
        if (m_MaxMessageSize.get())
        {
            m_MaxMessageSize->toMultipart(multipart, utility::conversions::to_string_t("MaxMessageSize."));
        }
    }
    if(m_RandomAccessUrlTimeoutIsSet)
    {
        if (m_RandomAccessUrlTimeout.get())
        {
            m_RandomAccessUrlTimeout->toMultipart(multipart, utility::conversions::to_string_t("RandomAccessUrlTimeout."));
        }
    }
    if(m_WorkerThreadsIsSet)
    {
        if (m_WorkerThreads.get())
        {
            m_WorkerThreads->toMultipart(multipart, utility::conversions::to_string_t("WorkerThreads."));
        }
    }
}

void ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("TcpPort")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("TcpPort")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("TcpPort."));
            setTcpPort( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("AllowRemoteAccess")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("AllowRemoteAccess")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("AllowRemoteAccess."));
            setAllowRemoteAccess( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("MaxRenderRgnPixels")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("MaxRenderRgnPixels")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("MaxRenderRgnPixels."));
            setMaxRenderRgnPixels( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("MaxMessageSize")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("MaxMessageSize")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("MaxMessageSize."));
            setMaxMessageSize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("RandomAccessUrlTimeout")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("RandomAccessUrlTimeout")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("RandomAccessUrlTimeout."));
            setRandomAccessUrlTimeout( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("WorkerThreads")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("WorkerThreads")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("WorkerThreads."));
            setWorkerThreads( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::getTcpPort() const
{
    return m_TcpPort;
}


void ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::setTcpPort(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_TcpPort = value;
    m_TcpPortIsSet = true;
}
bool ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::tcpPortIsSet() const
{
    return m_TcpPortIsSet;
}

void ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::unsetTcpPort()
{
    m_TcpPortIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::getAllowRemoteAccess() const
{
    return m_AllowRemoteAccess;
}


void ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::setAllowRemoteAccess(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_AllowRemoteAccess = value;
    m_AllowRemoteAccessIsSet = true;
}
bool ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::allowRemoteAccessIsSet() const
{
    return m_AllowRemoteAccessIsSet;
}

void ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::unsetAllowRemoteAccess()
{
    m_AllowRemoteAccessIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::getMaxRenderRgnPixels() const
{
    return m_MaxRenderRgnPixels;
}


void ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::setMaxRenderRgnPixels(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_MaxRenderRgnPixels = value;
    m_MaxRenderRgnPixelsIsSet = true;
}
bool ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::maxRenderRgnPixelsIsSet() const
{
    return m_MaxRenderRgnPixelsIsSet;
}

void ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::unsetMaxRenderRgnPixels()
{
    m_MaxRenderRgnPixelsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::getMaxMessageSize() const
{
    return m_MaxMessageSize;
}


void ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::setMaxMessageSize(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_MaxMessageSize = value;
    m_MaxMessageSizeIsSet = true;
}
bool ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::maxMessageSizeIsSet() const
{
    return m_MaxMessageSizeIsSet;
}

void ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::unsetMaxMessageSize()
{
    m_MaxMessageSizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::getRandomAccessUrlTimeout() const
{
    return m_RandomAccessUrlTimeout;
}


void ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::setRandomAccessUrlTimeout(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_RandomAccessUrlTimeout = value;
    m_RandomAccessUrlTimeoutIsSet = true;
}
bool ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::randomAccessUrlTimeoutIsSet() const
{
    return m_RandomAccessUrlTimeoutIsSet;
}

void ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::unsetRandomAccessUrlTimeout()
{
    m_RandomAccessUrlTimeoutIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::getWorkerThreads() const
{
    return m_WorkerThreads;
}


void ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::setWorkerThreads(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_WorkerThreads = value;
    m_WorkerThreadsIsSet = true;
}
bool ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::workerThreadsIsSet() const
{
    return m_WorkerThreadsIsSet;
}

void ComAdobeCqDamS7imagingImplIsImageServerComponentProperties::unsetWorkerThreads()
{
    m_WorkerThreadsIsSet = false;
}

}
}
}
}

