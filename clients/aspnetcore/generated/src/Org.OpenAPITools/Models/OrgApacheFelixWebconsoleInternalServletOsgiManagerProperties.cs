/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties : IEquatable<OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties>
    { 
        /// <summary>
        /// Gets or Sets ManagerRoot
        /// </summary>
        [DataMember(Name="manager.root")]
        public ConfigNodePropertyString ManagerRoot { get; set; }

        /// <summary>
        /// Gets or Sets HttpServiceFilter
        /// </summary>
        [DataMember(Name="http.service.filter")]
        public ConfigNodePropertyString HttpServiceFilter { get; set; }

        /// <summary>
        /// Gets or Sets DefaultRender
        /// </summary>
        [DataMember(Name="default.render")]
        public ConfigNodePropertyString DefaultRender { get; set; }

        /// <summary>
        /// Gets or Sets Realm
        /// </summary>
        [DataMember(Name="realm")]
        public ConfigNodePropertyString Realm { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name="username")]
        public ConfigNodePropertyString Username { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name="password")]
        public ConfigNodePropertyString Password { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name="category")]
        public ConfigNodePropertyString Category { get; set; }

        /// <summary>
        /// Gets or Sets Locale
        /// </summary>
        [DataMember(Name="locale")]
        public ConfigNodePropertyString Locale { get; set; }

        /// <summary>
        /// Gets or Sets Loglevel
        /// </summary>
        [DataMember(Name="loglevel")]
        public ConfigNodePropertyDropDown Loglevel { get; set; }

        /// <summary>
        /// Gets or Sets Plugins
        /// </summary>
        [DataMember(Name="plugins")]
        public ConfigNodePropertyDropDown Plugins { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties {\n");
            sb.Append("  ManagerRoot: ").Append(ManagerRoot).Append("\n");
            sb.Append("  HttpServiceFilter: ").Append(HttpServiceFilter).Append("\n");
            sb.Append("  DefaultRender: ").Append(DefaultRender).Append("\n");
            sb.Append("  Realm: ").Append(Realm).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("  Loglevel: ").Append(Loglevel).Append("\n");
            sb.Append("  Plugins: ").Append(Plugins).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties)obj);
        }

        /// <summary>
        /// Returns true if OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ManagerRoot == other.ManagerRoot ||
                    ManagerRoot != null &&
                    ManagerRoot.Equals(other.ManagerRoot)
                ) && 
                (
                    HttpServiceFilter == other.HttpServiceFilter ||
                    HttpServiceFilter != null &&
                    HttpServiceFilter.Equals(other.HttpServiceFilter)
                ) && 
                (
                    DefaultRender == other.DefaultRender ||
                    DefaultRender != null &&
                    DefaultRender.Equals(other.DefaultRender)
                ) && 
                (
                    Realm == other.Realm ||
                    Realm != null &&
                    Realm.Equals(other.Realm)
                ) && 
                (
                    Username == other.Username ||
                    Username != null &&
                    Username.Equals(other.Username)
                ) && 
                (
                    Password == other.Password ||
                    Password != null &&
                    Password.Equals(other.Password)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.Equals(other.Category)
                ) && 
                (
                    Locale == other.Locale ||
                    Locale != null &&
                    Locale.Equals(other.Locale)
                ) && 
                (
                    Loglevel == other.Loglevel ||
                    Loglevel != null &&
                    Loglevel.Equals(other.Loglevel)
                ) && 
                (
                    Plugins == other.Plugins ||
                    Plugins != null &&
                    Plugins.Equals(other.Plugins)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ManagerRoot != null)
                    hashCode = hashCode * 59 + ManagerRoot.GetHashCode();
                    if (HttpServiceFilter != null)
                    hashCode = hashCode * 59 + HttpServiceFilter.GetHashCode();
                    if (DefaultRender != null)
                    hashCode = hashCode * 59 + DefaultRender.GetHashCode();
                    if (Realm != null)
                    hashCode = hashCode * 59 + Realm.GetHashCode();
                    if (Username != null)
                    hashCode = hashCode * 59 + Username.GetHashCode();
                    if (Password != null)
                    hashCode = hashCode * 59 + Password.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (Locale != null)
                    hashCode = hashCode * 59 + Locale.GetHashCode();
                    if (Loglevel != null)
                    hashCode = hashCode * 59 + Loglevel.GetHashCode();
                    if (Plugins != null)
                    hashCode = hashCode * 59 + Plugins.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties left, OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties left, OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
