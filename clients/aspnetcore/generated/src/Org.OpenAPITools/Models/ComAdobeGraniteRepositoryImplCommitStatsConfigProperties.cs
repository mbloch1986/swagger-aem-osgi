/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ComAdobeGraniteRepositoryImplCommitStatsConfigProperties : IEquatable<ComAdobeGraniteRepositoryImplCommitStatsConfigProperties>
    { 
        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name="enabled")]
        public ConfigNodePropertyBoolean Enabled { get; set; }

        /// <summary>
        /// Gets or Sets IntervalSeconds
        /// </summary>
        [DataMember(Name="intervalSeconds")]
        public ConfigNodePropertyInteger IntervalSeconds { get; set; }

        /// <summary>
        /// Gets or Sets CommitsPerIntervalThreshold
        /// </summary>
        [DataMember(Name="commitsPerIntervalThreshold")]
        public ConfigNodePropertyInteger CommitsPerIntervalThreshold { get; set; }

        /// <summary>
        /// Gets or Sets MaxLocationLength
        /// </summary>
        [DataMember(Name="maxLocationLength")]
        public ConfigNodePropertyInteger MaxLocationLength { get; set; }

        /// <summary>
        /// Gets or Sets MaxDetailsShown
        /// </summary>
        [DataMember(Name="maxDetailsShown")]
        public ConfigNodePropertyInteger MaxDetailsShown { get; set; }

        /// <summary>
        /// Gets or Sets MinDetailsPercentage
        /// </summary>
        [DataMember(Name="minDetailsPercentage")]
        public ConfigNodePropertyInteger MinDetailsPercentage { get; set; }

        /// <summary>
        /// Gets or Sets ThreadMatchers
        /// </summary>
        [DataMember(Name="threadMatchers")]
        public ConfigNodePropertyArray ThreadMatchers { get; set; }

        /// <summary>
        /// Gets or Sets MaxGreedyDepth
        /// </summary>
        [DataMember(Name="maxGreedyDepth")]
        public ConfigNodePropertyInteger MaxGreedyDepth { get; set; }

        /// <summary>
        /// Gets or Sets GreedyStackMatchers
        /// </summary>
        [DataMember(Name="greedyStackMatchers")]
        public ConfigNodePropertyString GreedyStackMatchers { get; set; }

        /// <summary>
        /// Gets or Sets StackFilters
        /// </summary>
        [DataMember(Name="stackFilters")]
        public ConfigNodePropertyArray StackFilters { get; set; }

        /// <summary>
        /// Gets or Sets StackMatchers
        /// </summary>
        [DataMember(Name="stackMatchers")]
        public ConfigNodePropertyArray StackMatchers { get; set; }

        /// <summary>
        /// Gets or Sets StackCategorizers
        /// </summary>
        [DataMember(Name="stackCategorizers")]
        public ConfigNodePropertyArray StackCategorizers { get; set; }

        /// <summary>
        /// Gets or Sets StackShorteners
        /// </summary>
        [DataMember(Name="stackShorteners")]
        public ConfigNodePropertyArray StackShorteners { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeGraniteRepositoryImplCommitStatsConfigProperties {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  IntervalSeconds: ").Append(IntervalSeconds).Append("\n");
            sb.Append("  CommitsPerIntervalThreshold: ").Append(CommitsPerIntervalThreshold).Append("\n");
            sb.Append("  MaxLocationLength: ").Append(MaxLocationLength).Append("\n");
            sb.Append("  MaxDetailsShown: ").Append(MaxDetailsShown).Append("\n");
            sb.Append("  MinDetailsPercentage: ").Append(MinDetailsPercentage).Append("\n");
            sb.Append("  ThreadMatchers: ").Append(ThreadMatchers).Append("\n");
            sb.Append("  MaxGreedyDepth: ").Append(MaxGreedyDepth).Append("\n");
            sb.Append("  GreedyStackMatchers: ").Append(GreedyStackMatchers).Append("\n");
            sb.Append("  StackFilters: ").Append(StackFilters).Append("\n");
            sb.Append("  StackMatchers: ").Append(StackMatchers).Append("\n");
            sb.Append("  StackCategorizers: ").Append(StackCategorizers).Append("\n");
            sb.Append("  StackShorteners: ").Append(StackShorteners).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComAdobeGraniteRepositoryImplCommitStatsConfigProperties)obj);
        }

        /// <summary>
        /// Returns true if ComAdobeGraniteRepositoryImplCommitStatsConfigProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ComAdobeGraniteRepositoryImplCommitStatsConfigProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeGraniteRepositoryImplCommitStatsConfigProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Enabled == other.Enabled ||
                    Enabled != null &&
                    Enabled.Equals(other.Enabled)
                ) && 
                (
                    IntervalSeconds == other.IntervalSeconds ||
                    IntervalSeconds != null &&
                    IntervalSeconds.Equals(other.IntervalSeconds)
                ) && 
                (
                    CommitsPerIntervalThreshold == other.CommitsPerIntervalThreshold ||
                    CommitsPerIntervalThreshold != null &&
                    CommitsPerIntervalThreshold.Equals(other.CommitsPerIntervalThreshold)
                ) && 
                (
                    MaxLocationLength == other.MaxLocationLength ||
                    MaxLocationLength != null &&
                    MaxLocationLength.Equals(other.MaxLocationLength)
                ) && 
                (
                    MaxDetailsShown == other.MaxDetailsShown ||
                    MaxDetailsShown != null &&
                    MaxDetailsShown.Equals(other.MaxDetailsShown)
                ) && 
                (
                    MinDetailsPercentage == other.MinDetailsPercentage ||
                    MinDetailsPercentage != null &&
                    MinDetailsPercentage.Equals(other.MinDetailsPercentage)
                ) && 
                (
                    ThreadMatchers == other.ThreadMatchers ||
                    ThreadMatchers != null &&
                    ThreadMatchers.Equals(other.ThreadMatchers)
                ) && 
                (
                    MaxGreedyDepth == other.MaxGreedyDepth ||
                    MaxGreedyDepth != null &&
                    MaxGreedyDepth.Equals(other.MaxGreedyDepth)
                ) && 
                (
                    GreedyStackMatchers == other.GreedyStackMatchers ||
                    GreedyStackMatchers != null &&
                    GreedyStackMatchers.Equals(other.GreedyStackMatchers)
                ) && 
                (
                    StackFilters == other.StackFilters ||
                    StackFilters != null &&
                    StackFilters.Equals(other.StackFilters)
                ) && 
                (
                    StackMatchers == other.StackMatchers ||
                    StackMatchers != null &&
                    StackMatchers.Equals(other.StackMatchers)
                ) && 
                (
                    StackCategorizers == other.StackCategorizers ||
                    StackCategorizers != null &&
                    StackCategorizers.Equals(other.StackCategorizers)
                ) && 
                (
                    StackShorteners == other.StackShorteners ||
                    StackShorteners != null &&
                    StackShorteners.Equals(other.StackShorteners)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Enabled != null)
                    hashCode = hashCode * 59 + Enabled.GetHashCode();
                    if (IntervalSeconds != null)
                    hashCode = hashCode * 59 + IntervalSeconds.GetHashCode();
                    if (CommitsPerIntervalThreshold != null)
                    hashCode = hashCode * 59 + CommitsPerIntervalThreshold.GetHashCode();
                    if (MaxLocationLength != null)
                    hashCode = hashCode * 59 + MaxLocationLength.GetHashCode();
                    if (MaxDetailsShown != null)
                    hashCode = hashCode * 59 + MaxDetailsShown.GetHashCode();
                    if (MinDetailsPercentage != null)
                    hashCode = hashCode * 59 + MinDetailsPercentage.GetHashCode();
                    if (ThreadMatchers != null)
                    hashCode = hashCode * 59 + ThreadMatchers.GetHashCode();
                    if (MaxGreedyDepth != null)
                    hashCode = hashCode * 59 + MaxGreedyDepth.GetHashCode();
                    if (GreedyStackMatchers != null)
                    hashCode = hashCode * 59 + GreedyStackMatchers.GetHashCode();
                    if (StackFilters != null)
                    hashCode = hashCode * 59 + StackFilters.GetHashCode();
                    if (StackMatchers != null)
                    hashCode = hashCode * 59 + StackMatchers.GetHashCode();
                    if (StackCategorizers != null)
                    hashCode = hashCode * 59 + StackCategorizers.GetHashCode();
                    if (StackShorteners != null)
                    hashCode = hashCode * 59 + StackShorteners.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComAdobeGraniteRepositoryImplCommitStatsConfigProperties left, ComAdobeGraniteRepositoryImplCommitStatsConfigProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComAdobeGraniteRepositoryImplCommitStatsConfigProperties left, ComAdobeGraniteRepositoryImplCommitStatsConfigProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
