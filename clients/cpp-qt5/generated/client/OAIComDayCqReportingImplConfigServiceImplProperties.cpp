/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqReportingImplConfigServiceImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqReportingImplConfigServiceImplProperties::OAIComDayCqReportingImplConfigServiceImplProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComDayCqReportingImplConfigServiceImplProperties::OAIComDayCqReportingImplConfigServiceImplProperties() {
    init();
}

OAIComDayCqReportingImplConfigServiceImplProperties::~OAIComDayCqReportingImplConfigServiceImplProperties() {
    this->cleanup();
}

void
OAIComDayCqReportingImplConfigServiceImplProperties::init() {
    repconf_timezone = new OAIConfigNodePropertyString();
    m_repconf_timezone_isSet = false;
    repconf_locale = new OAIConfigNodePropertyString();
    m_repconf_locale_isSet = false;
    repconf_snapshots = new OAIConfigNodePropertyString();
    m_repconf_snapshots_isSet = false;
    repconf_repdir = new OAIConfigNodePropertyString();
    m_repconf_repdir_isSet = false;
    repconf_hourofday = new OAIConfigNodePropertyInteger();
    m_repconf_hourofday_isSet = false;
    repconf_minofhour = new OAIConfigNodePropertyInteger();
    m_repconf_minofhour_isSet = false;
    repconf_maxrows = new OAIConfigNodePropertyInteger();
    m_repconf_maxrows_isSet = false;
    repconf_fakedata = new OAIConfigNodePropertyBoolean();
    m_repconf_fakedata_isSet = false;
    repconf_snapshotuser = new OAIConfigNodePropertyString();
    m_repconf_snapshotuser_isSet = false;
    repconf_enforcesnapshotuser = new OAIConfigNodePropertyBoolean();
    m_repconf_enforcesnapshotuser_isSet = false;
}

void
OAIComDayCqReportingImplConfigServiceImplProperties::cleanup() {
    if(repconf_timezone != nullptr) { 
        delete repconf_timezone;
    }
    if(repconf_locale != nullptr) { 
        delete repconf_locale;
    }
    if(repconf_snapshots != nullptr) { 
        delete repconf_snapshots;
    }
    if(repconf_repdir != nullptr) { 
        delete repconf_repdir;
    }
    if(repconf_hourofday != nullptr) { 
        delete repconf_hourofday;
    }
    if(repconf_minofhour != nullptr) { 
        delete repconf_minofhour;
    }
    if(repconf_maxrows != nullptr) { 
        delete repconf_maxrows;
    }
    if(repconf_fakedata != nullptr) { 
        delete repconf_fakedata;
    }
    if(repconf_snapshotuser != nullptr) { 
        delete repconf_snapshotuser;
    }
    if(repconf_enforcesnapshotuser != nullptr) { 
        delete repconf_enforcesnapshotuser;
    }
}

OAIComDayCqReportingImplConfigServiceImplProperties*
OAIComDayCqReportingImplConfigServiceImplProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComDayCqReportingImplConfigServiceImplProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&repconf_timezone, pJson["repconf.timezone"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&repconf_locale, pJson["repconf.locale"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&repconf_snapshots, pJson["repconf.snapshots"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&repconf_repdir, pJson["repconf.repdir"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&repconf_hourofday, pJson["repconf.hourofday"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&repconf_minofhour, pJson["repconf.minofhour"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&repconf_maxrows, pJson["repconf.maxrows"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&repconf_fakedata, pJson["repconf.fakedata"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&repconf_snapshotuser, pJson["repconf.snapshotuser"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&repconf_enforcesnapshotuser, pJson["repconf.enforcesnapshotuser"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
}

QString
OAIComDayCqReportingImplConfigServiceImplProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqReportingImplConfigServiceImplProperties::asJsonObject() {
    QJsonObject obj;
    if((repconf_timezone != nullptr) && (repconf_timezone->isSet())){
        toJsonValue(QString("repconf.timezone"), repconf_timezone, obj, QString("OAIConfigNodePropertyString"));
    }
    if((repconf_locale != nullptr) && (repconf_locale->isSet())){
        toJsonValue(QString("repconf.locale"), repconf_locale, obj, QString("OAIConfigNodePropertyString"));
    }
    if((repconf_snapshots != nullptr) && (repconf_snapshots->isSet())){
        toJsonValue(QString("repconf.snapshots"), repconf_snapshots, obj, QString("OAIConfigNodePropertyString"));
    }
    if((repconf_repdir != nullptr) && (repconf_repdir->isSet())){
        toJsonValue(QString("repconf.repdir"), repconf_repdir, obj, QString("OAIConfigNodePropertyString"));
    }
    if((repconf_hourofday != nullptr) && (repconf_hourofday->isSet())){
        toJsonValue(QString("repconf.hourofday"), repconf_hourofday, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((repconf_minofhour != nullptr) && (repconf_minofhour->isSet())){
        toJsonValue(QString("repconf.minofhour"), repconf_minofhour, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((repconf_maxrows != nullptr) && (repconf_maxrows->isSet())){
        toJsonValue(QString("repconf.maxrows"), repconf_maxrows, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((repconf_fakedata != nullptr) && (repconf_fakedata->isSet())){
        toJsonValue(QString("repconf.fakedata"), repconf_fakedata, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((repconf_snapshotuser != nullptr) && (repconf_snapshotuser->isSet())){
        toJsonValue(QString("repconf.snapshotuser"), repconf_snapshotuser, obj, QString("OAIConfigNodePropertyString"));
    }
    if((repconf_enforcesnapshotuser != nullptr) && (repconf_enforcesnapshotuser->isSet())){
        toJsonValue(QString("repconf.enforcesnapshotuser"), repconf_enforcesnapshotuser, obj, QString("OAIConfigNodePropertyBoolean"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIComDayCqReportingImplConfigServiceImplProperties::getRepconfTimezone() {
    return repconf_timezone;
}
void
OAIComDayCqReportingImplConfigServiceImplProperties::setRepconfTimezone(OAIConfigNodePropertyString* repconf_timezone) {
    this->repconf_timezone = repconf_timezone;
    this->m_repconf_timezone_isSet = true;
}

OAIConfigNodePropertyString*
OAIComDayCqReportingImplConfigServiceImplProperties::getRepconfLocale() {
    return repconf_locale;
}
void
OAIComDayCqReportingImplConfigServiceImplProperties::setRepconfLocale(OAIConfigNodePropertyString* repconf_locale) {
    this->repconf_locale = repconf_locale;
    this->m_repconf_locale_isSet = true;
}

OAIConfigNodePropertyString*
OAIComDayCqReportingImplConfigServiceImplProperties::getRepconfSnapshots() {
    return repconf_snapshots;
}
void
OAIComDayCqReportingImplConfigServiceImplProperties::setRepconfSnapshots(OAIConfigNodePropertyString* repconf_snapshots) {
    this->repconf_snapshots = repconf_snapshots;
    this->m_repconf_snapshots_isSet = true;
}

OAIConfigNodePropertyString*
OAIComDayCqReportingImplConfigServiceImplProperties::getRepconfRepdir() {
    return repconf_repdir;
}
void
OAIComDayCqReportingImplConfigServiceImplProperties::setRepconfRepdir(OAIConfigNodePropertyString* repconf_repdir) {
    this->repconf_repdir = repconf_repdir;
    this->m_repconf_repdir_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComDayCqReportingImplConfigServiceImplProperties::getRepconfHourofday() {
    return repconf_hourofday;
}
void
OAIComDayCqReportingImplConfigServiceImplProperties::setRepconfHourofday(OAIConfigNodePropertyInteger* repconf_hourofday) {
    this->repconf_hourofday = repconf_hourofday;
    this->m_repconf_hourofday_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComDayCqReportingImplConfigServiceImplProperties::getRepconfMinofhour() {
    return repconf_minofhour;
}
void
OAIComDayCqReportingImplConfigServiceImplProperties::setRepconfMinofhour(OAIConfigNodePropertyInteger* repconf_minofhour) {
    this->repconf_minofhour = repconf_minofhour;
    this->m_repconf_minofhour_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComDayCqReportingImplConfigServiceImplProperties::getRepconfMaxrows() {
    return repconf_maxrows;
}
void
OAIComDayCqReportingImplConfigServiceImplProperties::setRepconfMaxrows(OAIConfigNodePropertyInteger* repconf_maxrows) {
    this->repconf_maxrows = repconf_maxrows;
    this->m_repconf_maxrows_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComDayCqReportingImplConfigServiceImplProperties::getRepconfFakedata() {
    return repconf_fakedata;
}
void
OAIComDayCqReportingImplConfigServiceImplProperties::setRepconfFakedata(OAIConfigNodePropertyBoolean* repconf_fakedata) {
    this->repconf_fakedata = repconf_fakedata;
    this->m_repconf_fakedata_isSet = true;
}

OAIConfigNodePropertyString*
OAIComDayCqReportingImplConfigServiceImplProperties::getRepconfSnapshotuser() {
    return repconf_snapshotuser;
}
void
OAIComDayCqReportingImplConfigServiceImplProperties::setRepconfSnapshotuser(OAIConfigNodePropertyString* repconf_snapshotuser) {
    this->repconf_snapshotuser = repconf_snapshotuser;
    this->m_repconf_snapshotuser_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComDayCqReportingImplConfigServiceImplProperties::getRepconfEnforcesnapshotuser() {
    return repconf_enforcesnapshotuser;
}
void
OAIComDayCqReportingImplConfigServiceImplProperties::setRepconfEnforcesnapshotuser(OAIConfigNodePropertyBoolean* repconf_enforcesnapshotuser) {
    this->repconf_enforcesnapshotuser = repconf_enforcesnapshotuser;
    this->m_repconf_enforcesnapshotuser_isSet = true;
}


bool
OAIComDayCqReportingImplConfigServiceImplProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(repconf_timezone != nullptr && repconf_timezone->isSet()){ isObjectUpdated = true; break;}
        if(repconf_locale != nullptr && repconf_locale->isSet()){ isObjectUpdated = true; break;}
        if(repconf_snapshots != nullptr && repconf_snapshots->isSet()){ isObjectUpdated = true; break;}
        if(repconf_repdir != nullptr && repconf_repdir->isSet()){ isObjectUpdated = true; break;}
        if(repconf_hourofday != nullptr && repconf_hourofday->isSet()){ isObjectUpdated = true; break;}
        if(repconf_minofhour != nullptr && repconf_minofhour->isSet()){ isObjectUpdated = true; break;}
        if(repconf_maxrows != nullptr && repconf_maxrows->isSet()){ isObjectUpdated = true; break;}
        if(repconf_fakedata != nullptr && repconf_fakedata->isSet()){ isObjectUpdated = true; break;}
        if(repconf_snapshotuser != nullptr && repconf_snapshotuser->isSet()){ isObjectUpdated = true; break;}
        if(repconf_enforcesnapshotuser != nullptr && repconf_enforcesnapshotuser->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

