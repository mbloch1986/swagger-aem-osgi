/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::OAIComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::OAIComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties() {
    init();
}

OAIComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::~OAIComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties() {
    this->cleanup();
}

void
OAIComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::init() {
    granite_workflowinbox_sort_property_name = new OAIConfigNodePropertyDropDown();
    m_granite_workflowinbox_sort_property_name_isSet = false;
    granite_workflowinbox_sort_order = new OAIConfigNodePropertyString();
    m_granite_workflowinbox_sort_order_isSet = false;
    cq_workflow_job_retry = new OAIConfigNodePropertyInteger();
    m_cq_workflow_job_retry_isSet = false;
    cq_workflow_superuser = new OAIConfigNodePropertyArray();
    m_cq_workflow_superuser_isSet = false;
    granite_workflow_inbox_query_size = new OAIConfigNodePropertyInteger();
    m_granite_workflow_inbox_query_size_isSet = false;
    granite_workflow_admin_user_group_filter = new OAIConfigNodePropertyBoolean();
    m_granite_workflow_admin_user_group_filter_isSet = false;
    granite_workflow_enforce_workitem_assignee_permissions = new OAIConfigNodePropertyBoolean();
    m_granite_workflow_enforce_workitem_assignee_permissions_isSet = false;
    granite_workflow_enforce_workflow_initiator_permissions = new OAIConfigNodePropertyBoolean();
    m_granite_workflow_enforce_workflow_initiator_permissions_isSet = false;
    granite_workflow_inject_tenant_id_in_job_topics = new OAIConfigNodePropertyBoolean();
    m_granite_workflow_inject_tenant_id_in_job_topics_isSet = false;
    granite_workflow_max_purge_save_threshold = new OAIConfigNodePropertyInteger();
    m_granite_workflow_max_purge_save_threshold_isSet = false;
    granite_workflow_max_purge_query_count = new OAIConfigNodePropertyInteger();
    m_granite_workflow_max_purge_query_count_isSet = false;
}

void
OAIComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::cleanup() {
    if(granite_workflowinbox_sort_property_name != nullptr) { 
        delete granite_workflowinbox_sort_property_name;
    }
    if(granite_workflowinbox_sort_order != nullptr) { 
        delete granite_workflowinbox_sort_order;
    }
    if(cq_workflow_job_retry != nullptr) { 
        delete cq_workflow_job_retry;
    }
    if(cq_workflow_superuser != nullptr) { 
        delete cq_workflow_superuser;
    }
    if(granite_workflow_inbox_query_size != nullptr) { 
        delete granite_workflow_inbox_query_size;
    }
    if(granite_workflow_admin_user_group_filter != nullptr) { 
        delete granite_workflow_admin_user_group_filter;
    }
    if(granite_workflow_enforce_workitem_assignee_permissions != nullptr) { 
        delete granite_workflow_enforce_workitem_assignee_permissions;
    }
    if(granite_workflow_enforce_workflow_initiator_permissions != nullptr) { 
        delete granite_workflow_enforce_workflow_initiator_permissions;
    }
    if(granite_workflow_inject_tenant_id_in_job_topics != nullptr) { 
        delete granite_workflow_inject_tenant_id_in_job_topics;
    }
    if(granite_workflow_max_purge_save_threshold != nullptr) { 
        delete granite_workflow_max_purge_save_threshold;
    }
    if(granite_workflow_max_purge_query_count != nullptr) { 
        delete granite_workflow_max_purge_query_count;
    }
}

OAIComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties*
OAIComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&granite_workflowinbox_sort_property_name, pJson["granite.workflowinbox.sort.propertyName"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
    ::OpenAPI::setValue(&granite_workflowinbox_sort_order, pJson["granite.workflowinbox.sort.order"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&cq_workflow_job_retry, pJson["cq.workflow.job.retry"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&cq_workflow_superuser, pJson["cq.workflow.superuser"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&granite_workflow_inbox_query_size, pJson["granite.workflow.inboxQuerySize"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&granite_workflow_admin_user_group_filter, pJson["granite.workflow.adminUserGroupFilter"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&granite_workflow_enforce_workitem_assignee_permissions, pJson["granite.workflow.enforceWorkitemAssigneePermissions"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&granite_workflow_enforce_workflow_initiator_permissions, pJson["granite.workflow.enforceWorkflowInitiatorPermissions"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&granite_workflow_inject_tenant_id_in_job_topics, pJson["granite.workflow.injectTenantIdInJobTopics"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&granite_workflow_max_purge_save_threshold, pJson["granite.workflow.maxPurgeSaveThreshold"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&granite_workflow_max_purge_query_count, pJson["granite.workflow.maxPurgeQueryCount"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
}

QString
OAIComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::asJsonObject() {
    QJsonObject obj;
    if((granite_workflowinbox_sort_property_name != nullptr) && (granite_workflowinbox_sort_property_name->isSet())){
        toJsonValue(QString("granite.workflowinbox.sort.propertyName"), granite_workflowinbox_sort_property_name, obj, QString("OAIConfigNodePropertyDropDown"));
    }
    if((granite_workflowinbox_sort_order != nullptr) && (granite_workflowinbox_sort_order->isSet())){
        toJsonValue(QString("granite.workflowinbox.sort.order"), granite_workflowinbox_sort_order, obj, QString("OAIConfigNodePropertyString"));
    }
    if((cq_workflow_job_retry != nullptr) && (cq_workflow_job_retry->isSet())){
        toJsonValue(QString("cq.workflow.job.retry"), cq_workflow_job_retry, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((cq_workflow_superuser != nullptr) && (cq_workflow_superuser->isSet())){
        toJsonValue(QString("cq.workflow.superuser"), cq_workflow_superuser, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((granite_workflow_inbox_query_size != nullptr) && (granite_workflow_inbox_query_size->isSet())){
        toJsonValue(QString("granite.workflow.inboxQuerySize"), granite_workflow_inbox_query_size, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((granite_workflow_admin_user_group_filter != nullptr) && (granite_workflow_admin_user_group_filter->isSet())){
        toJsonValue(QString("granite.workflow.adminUserGroupFilter"), granite_workflow_admin_user_group_filter, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((granite_workflow_enforce_workitem_assignee_permissions != nullptr) && (granite_workflow_enforce_workitem_assignee_permissions->isSet())){
        toJsonValue(QString("granite.workflow.enforceWorkitemAssigneePermissions"), granite_workflow_enforce_workitem_assignee_permissions, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((granite_workflow_enforce_workflow_initiator_permissions != nullptr) && (granite_workflow_enforce_workflow_initiator_permissions->isSet())){
        toJsonValue(QString("granite.workflow.enforceWorkflowInitiatorPermissions"), granite_workflow_enforce_workflow_initiator_permissions, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((granite_workflow_inject_tenant_id_in_job_topics != nullptr) && (granite_workflow_inject_tenant_id_in_job_topics->isSet())){
        toJsonValue(QString("granite.workflow.injectTenantIdInJobTopics"), granite_workflow_inject_tenant_id_in_job_topics, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((granite_workflow_max_purge_save_threshold != nullptr) && (granite_workflow_max_purge_save_threshold->isSet())){
        toJsonValue(QString("granite.workflow.maxPurgeSaveThreshold"), granite_workflow_max_purge_save_threshold, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((granite_workflow_max_purge_query_count != nullptr) && (granite_workflow_max_purge_query_count->isSet())){
        toJsonValue(QString("granite.workflow.maxPurgeQueryCount"), granite_workflow_max_purge_query_count, obj, QString("OAIConfigNodePropertyInteger"));
    }

    return obj;
}

OAIConfigNodePropertyDropDown*
OAIComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::getGraniteWorkflowinboxSortPropertyName() {
    return granite_workflowinbox_sort_property_name;
}
void
OAIComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::setGraniteWorkflowinboxSortPropertyName(OAIConfigNodePropertyDropDown* granite_workflowinbox_sort_property_name) {
    this->granite_workflowinbox_sort_property_name = granite_workflowinbox_sort_property_name;
    this->m_granite_workflowinbox_sort_property_name_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::getGraniteWorkflowinboxSortOrder() {
    return granite_workflowinbox_sort_order;
}
void
OAIComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::setGraniteWorkflowinboxSortOrder(OAIConfigNodePropertyString* granite_workflowinbox_sort_order) {
    this->granite_workflowinbox_sort_order = granite_workflowinbox_sort_order;
    this->m_granite_workflowinbox_sort_order_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::getCqWorkflowJobRetry() {
    return cq_workflow_job_retry;
}
void
OAIComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::setCqWorkflowJobRetry(OAIConfigNodePropertyInteger* cq_workflow_job_retry) {
    this->cq_workflow_job_retry = cq_workflow_job_retry;
    this->m_cq_workflow_job_retry_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::getCqWorkflowSuperuser() {
    return cq_workflow_superuser;
}
void
OAIComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::setCqWorkflowSuperuser(OAIConfigNodePropertyArray* cq_workflow_superuser) {
    this->cq_workflow_superuser = cq_workflow_superuser;
    this->m_cq_workflow_superuser_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::getGraniteWorkflowInboxQuerySize() {
    return granite_workflow_inbox_query_size;
}
void
OAIComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::setGraniteWorkflowInboxQuerySize(OAIConfigNodePropertyInteger* granite_workflow_inbox_query_size) {
    this->granite_workflow_inbox_query_size = granite_workflow_inbox_query_size;
    this->m_granite_workflow_inbox_query_size_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::getGraniteWorkflowAdminUserGroupFilter() {
    return granite_workflow_admin_user_group_filter;
}
void
OAIComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::setGraniteWorkflowAdminUserGroupFilter(OAIConfigNodePropertyBoolean* granite_workflow_admin_user_group_filter) {
    this->granite_workflow_admin_user_group_filter = granite_workflow_admin_user_group_filter;
    this->m_granite_workflow_admin_user_group_filter_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::getGraniteWorkflowEnforceWorkitemAssigneePermissions() {
    return granite_workflow_enforce_workitem_assignee_permissions;
}
void
OAIComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::setGraniteWorkflowEnforceWorkitemAssigneePermissions(OAIConfigNodePropertyBoolean* granite_workflow_enforce_workitem_assignee_permissions) {
    this->granite_workflow_enforce_workitem_assignee_permissions = granite_workflow_enforce_workitem_assignee_permissions;
    this->m_granite_workflow_enforce_workitem_assignee_permissions_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::getGraniteWorkflowEnforceWorkflowInitiatorPermissions() {
    return granite_workflow_enforce_workflow_initiator_permissions;
}
void
OAIComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::setGraniteWorkflowEnforceWorkflowInitiatorPermissions(OAIConfigNodePropertyBoolean* granite_workflow_enforce_workflow_initiator_permissions) {
    this->granite_workflow_enforce_workflow_initiator_permissions = granite_workflow_enforce_workflow_initiator_permissions;
    this->m_granite_workflow_enforce_workflow_initiator_permissions_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::getGraniteWorkflowInjectTenantIdInJobTopics() {
    return granite_workflow_inject_tenant_id_in_job_topics;
}
void
OAIComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::setGraniteWorkflowInjectTenantIdInJobTopics(OAIConfigNodePropertyBoolean* granite_workflow_inject_tenant_id_in_job_topics) {
    this->granite_workflow_inject_tenant_id_in_job_topics = granite_workflow_inject_tenant_id_in_job_topics;
    this->m_granite_workflow_inject_tenant_id_in_job_topics_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::getGraniteWorkflowMaxPurgeSaveThreshold() {
    return granite_workflow_max_purge_save_threshold;
}
void
OAIComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::setGraniteWorkflowMaxPurgeSaveThreshold(OAIConfigNodePropertyInteger* granite_workflow_max_purge_save_threshold) {
    this->granite_workflow_max_purge_save_threshold = granite_workflow_max_purge_save_threshold;
    this->m_granite_workflow_max_purge_save_threshold_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::getGraniteWorkflowMaxPurgeQueryCount() {
    return granite_workflow_max_purge_query_count;
}
void
OAIComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::setGraniteWorkflowMaxPurgeQueryCount(OAIConfigNodePropertyInteger* granite_workflow_max_purge_query_count) {
    this->granite_workflow_max_purge_query_count = granite_workflow_max_purge_query_count;
    this->m_granite_workflow_max_purge_query_count_isSet = true;
}


bool
OAIComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(granite_workflowinbox_sort_property_name != nullptr && granite_workflowinbox_sort_property_name->isSet()){ isObjectUpdated = true; break;}
        if(granite_workflowinbox_sort_order != nullptr && granite_workflowinbox_sort_order->isSet()){ isObjectUpdated = true; break;}
        if(cq_workflow_job_retry != nullptr && cq_workflow_job_retry->isSet()){ isObjectUpdated = true; break;}
        if(cq_workflow_superuser != nullptr && cq_workflow_superuser->isSet()){ isObjectUpdated = true; break;}
        if(granite_workflow_inbox_query_size != nullptr && granite_workflow_inbox_query_size->isSet()){ isObjectUpdated = true; break;}
        if(granite_workflow_admin_user_group_filter != nullptr && granite_workflow_admin_user_group_filter->isSet()){ isObjectUpdated = true; break;}
        if(granite_workflow_enforce_workitem_assignee_permissions != nullptr && granite_workflow_enforce_workitem_assignee_permissions->isSet()){ isObjectUpdated = true; break;}
        if(granite_workflow_enforce_workflow_initiator_permissions != nullptr && granite_workflow_enforce_workflow_initiator_permissions->isSet()){ isObjectUpdated = true; break;}
        if(granite_workflow_inject_tenant_id_in_job_topics != nullptr && granite_workflow_inject_tenant_id_in_job_topics->isSet()){ isObjectUpdated = true; break;}
        if(granite_workflow_max_purge_save_threshold != nullptr && granite_workflow_max_purge_save_threshold->isSet()){ isObjectUpdated = true; break;}
        if(granite_workflow_max_purge_query_count != nullptr && granite_workflow_max_purge_query_count->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

