/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties::OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties::OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties() {
    init();
}

OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties::~OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties() {
    this->cleanup();
}

void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties::init() {
    solr_home_path = new OAIConfigNodePropertyString();
    m_solr_home_path_isSet = false;
    solr_core_name = new OAIConfigNodePropertyString();
    m_solr_core_name_isSet = false;
}

void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties::cleanup() {
    if(solr_home_path != nullptr) { 
        delete solr_home_path;
    }
    if(solr_core_name != nullptr) { 
        delete solr_core_name;
    }
}

OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties*
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&solr_home_path, pJson["solr.home.path"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&solr_core_name, pJson["solr.core.name"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties::asJsonObject() {
    QJsonObject obj;
    if((solr_home_path != nullptr) && (solr_home_path->isSet())){
        toJsonValue(QString("solr.home.path"), solr_home_path, obj, QString("OAIConfigNodePropertyString"));
    }
    if((solr_core_name != nullptr) && (solr_core_name->isSet())){
        toJsonValue(QString("solr.core.name"), solr_core_name, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties::getSolrHomePath() {
    return solr_home_path;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties::setSolrHomePath(OAIConfigNodePropertyString* solr_home_path) {
    this->solr_home_path = solr_home_path;
    this->m_solr_home_path_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties::getSolrCoreName() {
    return solr_core_name;
}
void
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties::setSolrCoreName(OAIConfigNodePropertyString* solr_core_name) {
    this->solr_core_name = solr_core_name;
    this->m_solr_core_name_isSet = true;
}


bool
OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(solr_home_path != nullptr && solr_home_path->isSet()){ isObjectUpdated = true; break;}
        if(solr_core_name != nullptr && solr_core_name->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

