/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "ConfigmgrApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

ConfigmgrApi::ConfigmgrApi(Pistache::Address addr)
    : httpEndpoint(addr)
{ };

void ConfigmgrApi::init(size_t thr = 2) {
    auto opts = Pistache::Http::Endpoint::options()
        .threads(thr)
        .flags(Pistache::Tcp::Options::InstallSignalHandler);
    httpEndpoint.init(opts);
    setupRoutes();
}

void ConfigmgrApi::start() {
    httpEndpoint.setHandler(router.handler());
    httpEndpoint.serve();
}

void ConfigmgrApi::shutdown() {
    httpEndpoint.shutdown();
}

void ConfigmgrApi::setupRoutes() {
    using namespace Pistache::Rest;

    Routes::Post(router, base + "/system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Configuration", Routes::bind(&ConfigmgrApi::adaptive_form_and_interactive_communication_web_channel_configuration_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Theme Configuration", Routes::bind(&ConfigmgrApi::adaptive_form_and_interactive_communication_web_channel_theme_configur_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/Analytics Component Query Cache Service", Routes::bind(&ConfigmgrApi::analytics_component_query_cache_service_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/Apache Sling Health Check Result HTML Serializer", Routes::bind(&ConfigmgrApi::apache_sling_health_check_result_html_serializer_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.aem.formsndocuments.config.AEMFormsManagerConfiguration", Routes::bind(&ConfigmgrApi::com_adobe_aem_formsndocuments_config_aem_forms_manager_configuration_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.aem.transaction.core.impl.TransactionRecorder", Routes::bind(&ConfigmgrApi::com_adobe_aem_transaction_core_impl_transaction_recorder_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.DeprecateIndexesHC", Routes::bind(&ConfigmgrApi::com_adobe_aem_upgrade_prechecks_hc_impl_deprecate_indexes_hc_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.ReplicationAgentsDisabledHC", Routes::bind(&ConfigmgrApi::com_adobe_aem_upgrade_prechecks_hc_impl_replication_agents_disabled_hc_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.aem.upgrade.prechecks.mbean.impl.PreUpgradeTasksMBeanImpl", Routes::bind(&ConfigmgrApi::com_adobe_aem_upgrade_prechecks_mbean_impl_pre_upgrade_tasks_m_bean_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.aem.upgrade.prechecks.tasks.impl.ConsistencyCheckTaskImpl", Routes::bind(&ConfigmgrApi::com_adobe_aem_upgrade_prechecks_tasks_impl_consistency_check_task_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.account.api.AccountManagementService", Routes::bind(&ConfigmgrApi::com_adobe_cq_account_api_account_management_service_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.account.impl.AccountManagementServlet", Routes::bind(&ConfigmgrApi::com_adobe_cq_account_impl_account_management_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.address.impl.location.LocationListServlet", Routes::bind(&ConfigmgrApi::com_adobe_cq_address_impl_location_location_list_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.audit.purge.Dam", Routes::bind(&ConfigmgrApi::com_adobe_cq_audit_purge_dam_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.audit.purge.Pages", Routes::bind(&ConfigmgrApi::com_adobe_cq_audit_purge_pages_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.audit.purge.Replication", Routes::bind(&ConfigmgrApi::com_adobe_cq_audit_purge_replication_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.AWSCloudFrontRewriter", Routes::bind(&ConfigmgrApi::com_adobe_cq_cdn_rewriter_impl_aws_cloud_front_rewriter_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNConfigServiceImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_cdn_rewriter_impl_cdn_config_service_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNRewriter", Routes::bind(&ConfigmgrApi::com_adobe_cq_cdn_rewriter_impl_cdn_rewriter_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.cloudconfig.core.impl.ConfigurationReplicationEventHandler", Routes::bind(&ConfigmgrApi::com_adobe_cq_cloudconfig_core_impl_configuration_replication_event_handle_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.commerce.impl.asset.DynamicImageHandler", Routes::bind(&ConfigmgrApi::com_adobe_cq_commerce_impl_asset_dynamic_image_handler_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.commerce.impl.asset.ProductAssetHandlerProviderImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_commerce_impl_asset_product_asset_handler_provider_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.commerce.impl.asset.StaticImageHandler", Routes::bind(&ConfigmgrApi::com_adobe_cq_commerce_impl_asset_static_image_handler_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.commerce.impl.asset.VideoHandler", Routes::bind(&ConfigmgrApi::com_adobe_cq_commerce_impl_asset_video_handler_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.commerce.impl.promotion.PromotionManagerImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_commerce_impl_promotion_promotion_manager_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.commerce.pim.impl.cataloggenerator.CatalogGeneratorImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_commerce_pim_impl_cataloggenerator_catalog_generator_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.commerce.pim.impl.PageEventListener", Routes::bind(&ConfigmgrApi::com_adobe_cq_commerce_pim_impl_page_event_listener_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.commerce.pim.impl.productfeed.ProductFeedServiceImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_commerce_pim_impl_productfeed_product_feed_service_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.contentinsight.impl.ReportingServicesSettingsProvider", Routes::bind(&ConfigmgrApi::com_adobe_cq_contentinsight_impl_reporting_services_settings_provider_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.BrightEdgeProxyServlet", Routes::bind(&ConfigmgrApi::com_adobe_cq_contentinsight_impl_servlets_bright_edge_proxy_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.ReportingServicesProxyServlet", Routes::bind(&ConfigmgrApi::com_adobe_cq_contentinsight_impl_servlets_reporting_services_proxy_servle_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.dam.cfm.impl.component.ComponentConfigImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_dam_cfm_impl_component_component_config_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.dam.cfm.impl.conf.FeatureConfigImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_dam_cfm_impl_conf_feature_config_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.AssetProcessor", Routes::bind(&ConfigmgrApi::com_adobe_cq_dam_cfm_impl_content_rewriter_asset_processor_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.ParRangeFilter", Routes::bind(&ConfigmgrApi::com_adobe_cq_dam_cfm_impl_content_rewriter_par_range_filter_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.PayloadFilter", Routes::bind(&ConfigmgrApi::com_adobe_cq_dam_cfm_impl_content_rewriter_payload_filter_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.dam.dm.process.image.PTiffManagerImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_dam_dm_process_image_p_tiff_manager_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.dam.ips.impl.replication.trigger.ReplicateOnModifyWorker", Routes::bind(&ConfigmgrApi::com_adobe_cq_dam_ips_impl_replication_trigger_replicate_on_modify_worker_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.dam.mac.sync.helper.impl.MACSyncClientImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_dam_mac_sync_helper_impl_mac_sync_client_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.dam.mac.sync.impl.DAMSyncServiceImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_dam_mac_sync_impl_dam_sync_service_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.dam.processor.nui.impl.NuiAssetProcessor", Routes::bind(&ConfigmgrApi::com_adobe_cq_dam_processor_nui_impl_nui_asset_processor_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.is.ImageServerComponent", Routes::bind(&ConfigmgrApi::com_adobe_cq_dam_s7imaging_impl_is_image_server_component_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.ps.PlatformServerServlet", Routes::bind(&ConfigmgrApi::com_adobe_cq_dam_s7imaging_impl_ps_platform_server_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.AssetIOHandler", Routes::bind(&ConfigmgrApi::com_adobe_cq_dam_webdav_impl_io_asset_io_handler_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.DamWebdavVersionLinkingJob", Routes::bind(&ConfigmgrApi::com_adobe_cq_dam_webdav_impl_io_dam_webdav_version_linking_job_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.SpecialFilesHandler", Routes::bind(&ConfigmgrApi::com_adobe_cq_dam_webdav_impl_io_special_files_handler_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.deserfw.impl.DeserializationFirewallImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_deserfw_impl_deserialization_firewall_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.dtm.impl.service.DTMWebServiceImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_dtm_impl_service_dtm_web_service_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.dtm.impl.servlets.DTMDeployHookServlet", Routes::bind(&ConfigmgrApi::com_adobe_cq_dtm_impl_servlets_dtm_deploy_hook_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.dtm.reactor.impl.service.WebServiceImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_dtm_reactor_impl_service_web_service_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.experiencelog.impl.ExperienceLogConfigServlet", Routes::bind(&ConfigmgrApi::com_adobe_cq_experiencelog_impl_experience_log_config_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.hc.ContentPackagesHealthCheck", Routes::bind(&ConfigmgrApi::com_adobe_cq_hc_content_packages_health_check_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.history.impl.HistoryRequestFilter", Routes::bind(&ConfigmgrApi::com_adobe_cq_history_impl_history_request_filter_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.history.impl.HistoryServiceImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_history_impl_history_service_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.inbox.impl.typeprovider.ItemTypeProvider", Routes::bind(&ConfigmgrApi::com_adobe_cq_inbox_impl_typeprovider_item_type_provider_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.projects.impl.servlet.ProjectImageServlet", Routes::bind(&ConfigmgrApi::com_adobe_cq_projects_impl_servlet_project_image_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.projects.purge.Scheduler", Routes::bind(&ConfigmgrApi::com_adobe_cq_projects_purge_scheduler_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.scheduled.exporter.impl.ScheduledExporterImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_scheduled_exporter_impl_scheduled_exporter_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.screens.analytics.impl.ScreensAnalyticsServiceImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_screens_analytics_impl_screens_analytics_service_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.screens.device.impl.DeviceService", Routes::bind(&ConfigmgrApi::com_adobe_cq_screens_device_impl_device_service_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.screens.device.registration.impl.RegistrationServiceImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_screens_device_registration_impl_registration_service_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.screens.impl.handler.ChannelsUpdateHandler", Routes::bind(&ConfigmgrApi::com_adobe_cq_screens_impl_handler_channels_update_handler_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.screens.impl.jobs.DistributedDevicesStatiUpdateJob", Routes::bind(&ConfigmgrApi::com_adobe_cq_screens_impl_jobs_distributed_devices_stati_update_job_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.screens.impl.remote.impl.DistributedHttpClientImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_screens_impl_remote_impl_distributed_http_client_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.screens.impl.ScreensChannelPostProcessor", Routes::bind(&ConfigmgrApi::com_adobe_cq_screens_impl_screens_channel_post_processor_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.screens.mq.activemq.impl.ArtemisJMSProvider", Routes::bind(&ConfigmgrApi::com_adobe_cq_screens_mq_activemq_impl_artemis_jms_provider_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.OfflineContentServiceImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_screens_offlinecontent_impl_offline_content_service_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.screens.segmentation.impl.SegmentationFeatureFlag", Routes::bind(&ConfigmgrApi::com_adobe_cq_screens_segmentation_impl_segmentation_feature_flag_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.HtmlLibraryManagerConfigHealthCheck", Routes::bind(&ConfigmgrApi::com_adobe_cq_security_hc_bundles_impl_html_library_manager_config_health_ch_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.WcmFilterHealthCheck", Routes::bind(&ConfigmgrApi::com_adobe_cq_security_hc_bundles_impl_wcm_filter_health_check_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.security.hc.dispatcher.impl.DispatcherAccessHealthCheck", Routes::bind(&ConfigmgrApi::com_adobe_cq_security_hc_dispatcher_impl_dispatcher_access_health_check_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.security.hc.packages.impl.ExampleContentHealthCheck", Routes::bind(&ConfigmgrApi::com_adobe_cq_security_hc_packages_impl_example_content_health_check_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.security.hc.webserver.impl.ClickjackingHealthCheck", Routes::bind(&ConfigmgrApi::com_adobe_cq_security_hc_webserver_impl_clickjacking_health_check_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.accountverification.impl.AccountManagementConfigImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_accountverification_impl_account_management_config_im_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityComponentFactoryImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_activitystreams_client_impl_social_activity_componen_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityStreamComponentFactory", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_activitystreams_client_impl_social_activity_stream_co_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.EventListenerHandler", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_activitystreams_listener_impl_event_listener_handler_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ModerationEventExtension", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_activitystreams_listener_impl_moderation_event_exten_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.RatingEventActivitySuppressor", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_activitystreams_listener_impl_rating_event_activity_s_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ResourceActivityStreamProviderFactory", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_activitystreams_listener_impl_resource_activity_stre_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.calendar.client.endpoints.impl.CalendarOperationsImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_calendar_client_endpoints_impl_calendar_operations_i_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.calendar.client.operationextensions.EventAttachment", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_calendar_client_operationextensions_event_attachmen_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.calendar.servlets.TimeZoneServlet", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_calendar_servlets_time_zone_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentDeleteEventActivitySuppressor", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_commons_comments_endpoints_impl_comment_delete_event_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentOperationService", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_commons_comments_endpoints_impl_comment_operation_se_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.TranslationOperationService", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_commons_comments_endpoints_impl_translation_operati_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.commons.comments.listing.impl.SearchCommentSocialComponentListProvider", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_commons_comments_listing_impl_search_comment_social_c_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.commons.comments.scheduler.impl.SearchScheduledPosts", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_commons_comments_scheduler_impl_search_scheduled_pos_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.commons.cors.CORSAuthenticationFilter", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_commons_cors_cors_authentication_filter_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.AndroidEmailClientProvider", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_commons_emailreply_impl_android_email_client_provider_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailBuilderImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_commons_emailreply_impl_comment_email_builder_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailEventListener", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_commons_emailreply_impl_comment_email_event_listener_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CustomEmailClientProvider", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_commons_emailreply_impl_custom_email_client_provider_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailQuotedTextPatternsImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_commons_emailreply_impl_email_quoted_text_patterns_imp_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyConfigurationImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_commons_emailreply_impl_email_reply_configuration_imp_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyImporter", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_commons_emailreply_impl_email_reply_importer_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.GmailEmailClientProvider", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_commons_emailreply_impl_gmail_email_client_provider_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.IOSEmailClientProvider", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_commons_emailreply_impl_ios_email_client_provider_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.MacmailEmailClientProvider", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_commons_emailreply_impl_macmail_email_client_provider_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.OutLookEmailClientProvider", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_commons_emailreply_impl_out_look_email_client_provider_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.UnknownEmailClientProvider", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_commons_emailreply_impl_unknown_email_client_provider_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.YahooEmailClientProvider", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_commons_emailreply_impl_yahoo_email_client_provider_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.commons.maintainance.impl.DeleteTempUGCImageUploads", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_commons_maintainance_impl_delete_temp_ugc_image_upload_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.commons.ugclimiter.impl.UGCLimiterServiceImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_commons_ugclimiter_impl_ugc_limiter_service_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.commons.ugclimitsconfig.impl.CommunityUserUGCLimitsConfigImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_commons_ugclimitsconfig_impl_community_user_ugc_limit_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.FacebookProviderImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_connect_oauth_impl_facebook_provider_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthAuthenticationHandler", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_connect_oauth_impl_social_o_auth_authentication_handle_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthUserProfileMapper", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_connect_oauth_impl_social_o_auth_user_profile_mapper_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.TwitterProviderImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_connect_oauth_impl_twitter_provider_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.content.fragments.services.impl.CommunitiesFragmentCreationServiceImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_content_fragments_services_impl_communities_fragmen_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.datastore.as.impl.ASResourceProviderFactory", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_datastore_as_impl_as_resource_provider_factory_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.datastore.op.impl.SocialMSResourceProviderFactory", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_datastore_op_impl_social_ms_resource_provider_factory_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.datastore.rdb.impl.SocialRDBResourceProviderFactory", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_datastore_rdb_impl_social_rdb_resource_provider_factor_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementLearningPathAdaptorFactory", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_enablement_adaptors_enablement_learning_path_adaptor_f_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementResourceAdaptorFactory", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_enablement_adaptors_enablement_resource_adaptor_facto_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.enablement.learningpath.endpoints.impl.EnablementLearningPathModelOperationService", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_enablement_learningpath_endpoints_impl_enablement_l_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.enablement.resource.endpoints.impl.EnablementResourceModelOperationService", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_enablement_resource_endpoints_impl_enablement_resou_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.enablement.services.impl.AuthorMarkerImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_enablement_services_impl_author_marker_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.FilelibraryDownloadGetServlet", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_filelibrary_client_endpoints_filelibrary_download_ge_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.impl.FileLibraryOperationsService", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_filelibrary_client_endpoints_impl_file_library_opera_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.forum.client.endpoints.impl.ForumOperationsService", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_forum_client_endpoints_impl_forum_operations_service_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.forum.dispatcher.impl.FlushOperations", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_forum_dispatcher_impl_flush_operations_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.group.client.impl.CommunityGroupCollectionComponentFactory", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_group_client_impl_community_group_collection_componen_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.group.impl.GroupServiceImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_group_impl_group_service_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.handlebars.GuavaTemplateCacheImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_handlebars_guava_template_cache_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.ideation.client.endpoints.impl.IdeationOperationsService", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_ideation_client_endpoints_impl_ideation_operations_s_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.journal.client.endpoints.impl.JournalOperationsService", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_journal_client_endpoints_impl_journal_operations_ser_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberGroupProfileOperationService", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_members_endpoints_impl_community_member_group_profile_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberUserProfileOperationService", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_members_endpoints_impl_community_member_user_profile_o_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.members.impl.CommunityMemberGroupProfileComponentFactory", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_members_impl_community_member_group_profile_component_f_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.messaging.client.endpoints.impl.MessagingOperationsServiceImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_messaging_client_endpoints_impl_messaging_operation_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.FilterGroupSocialComponentFactory", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_moderation_dashboard_api_filter_group_social_componen_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.ModerationDashboardSocialComponentFactory", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_moderation_dashboard_api_moderation_dashboard_social_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.UserDetailsSocialComponentFactory", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_moderation_dashboard_api_user_details_social_componen_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.internal.impl.FilterGroupSocialComponentFactoryV2", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_moderation_dashboard_internal_impl_filter_group_soci_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.notifications.impl.MentionsRouter", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_notifications_impl_mentions_router_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationManagerImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_notifications_impl_notification_manager_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationsRouter", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_notifications_impl_notifications_router_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.qna.client.endpoints.impl.QnaForumOperationsService", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_qna_client_endpoints_impl_qna_forum_operations_servic_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportImporterServiceImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_i_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportManagementServiceImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_m_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.SiteTrendReportSocialComponentFactory", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_reporting_analytics_services_impl_site_trend_report_s_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.review.client.endpoints.impl.ReviewOperationsService", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_review_client_endpoints_impl_review_operations_servi_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.scf.core.operations.impl.SocialOperationsServlet", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_scf_core_operations_impl_social_operations_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.scf.endpoints.impl.DefaultSocialGetServlet", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_scf_endpoints_impl_default_social_get_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.scoring.impl.ScoringEventListener", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_scoring_impl_scoring_event_listener_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.serviceusers.internal.impl.ServiceUserWrapperImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_serviceusers_internal_impl_service_user_wrapper_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.site.endpoints.impl.SiteOperationService", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_site_endpoints_impl_site_operation_service_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.site.impl.AnalyticsComponentConfigurationServiceImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_site_impl_analytics_component_configuration_service_im_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.site.impl.SiteConfiguratorImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_site_impl_site_configurator_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.srp.impl.SocialSolrConnector", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_srp_impl_social_solr_connector_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.sync.impl.DiffChangesObserver", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_sync_impl_diff_changes_observer_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.sync.impl.GroupSyncListenerImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_sync_impl_group_sync_listener_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.sync.impl.PublisherSyncServiceImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_sync_impl_publisher_sync_service_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.sync.impl.UserSyncListenerImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_sync_impl_user_sync_listener_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.translation.impl.TranslationServiceConfigManager", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_translation_impl_translation_service_config_manager_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.translation.impl.UGCLanguageDetector", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_translation_impl_ugc_language_detector_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.ugcbase.dispatcher.impl.FlushServiceImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_ugcbase_dispatcher_impl_flush_service_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.AysncReverseReplicatorImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_ugcbase_impl_aysnc_reverse_replicator_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.PublisherConfigurationImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_ugcbase_impl_publisher_configuration_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.SocialUtilsImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_ugcbase_impl_social_utils_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.AutoModerationImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_ugcbase_moderation_impl_auto_moderation_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.SentimentProcess", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_ugcbase_moderation_impl_sentiment_process_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.DefaultAttachmentTypeBlacklistService", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_ugcbase_security_impl_default_attachment_type_blackli_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.SaferSlingPostValidatorImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_ugcbase_security_impl_safer_sling_post_validator_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.user.endpoints.impl.UsersGroupFromPublishServlet", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_user_endpoints_impl_users_group_from_publish_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.social.user.impl.transport.HttpToPublisher", Routes::bind(&ConfigmgrApi::com_adobe_cq_social_user_impl_transport_http_to_publisher_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.ui.wcm.commons.internal.servlets.rte.RTEFilterServletFactory.amended", Routes::bind(&ConfigmgrApi::com_adobe_cq_ui_wcm_commons_internal_servlets_rte_rte_filter_servlet_fact_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeContentCleanup", Routes::bind(&ConfigmgrApi::com_adobe_cq_upgrades_cleanup_impl_upgrade_content_cleanup_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeInstallFolderCleanup", Routes::bind(&ConfigmgrApi::com_adobe_cq_upgrades_cleanup_impl_upgrade_install_folder_cleanup_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncDeleteConfigProviderService", Routes::bind(&ConfigmgrApi::com_adobe_cq_wcm_jobs_async_impl_async_delete_config_provider_service_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncJobCleanUpTask", Routes::bind(&ConfigmgrApi::com_adobe_cq_wcm_jobs_async_impl_async_job_clean_up_task_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncMoveConfigProviderService", Routes::bind(&ConfigmgrApi::com_adobe_cq_wcm_jobs_async_impl_async_move_config_provider_service_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncPageMoveConfigProviderService", Routes::bind(&ConfigmgrApi::com_adobe_cq_wcm_jobs_async_impl_async_page_move_config_provider_service_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.wcm.launches.impl.LaunchesEventHandler", Routes::bind(&ConfigmgrApi::com_adobe_cq_wcm_launches_impl_launches_event_handler_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.wcm.mobile.qrcode.servlet.QRCodeImageGenerator", Routes::bind(&ConfigmgrApi::com_adobe_cq_wcm_mobile_qrcode_servlet_qr_code_image_generator_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.wcm.style.internal.ComponentStyleInfoCacheImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_wcm_style_internal_component_style_info_cache_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.cq.wcm.translation.impl.TranslationPlatformConfigurationImpl", Routes::bind(&ConfigmgrApi::com_adobe_cq_wcm_translation_impl_translation_platform_configuration_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.fd.fp.config.FormsPortalDraftsandSubmissionConfigService", Routes::bind(&ConfigmgrApi::com_adobe_fd_fp_config_forms_portal_draftsand_submission_config_service_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.fd.fp.config.FormsPortalSchedulerService", Routes::bind(&ConfigmgrApi::com_adobe_fd_fp_config_forms_portal_scheduler_service_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.forms.common.service.impl.DefaultDataProvider", Routes::bind(&ConfigmgrApi::com_adobe_forms_common_service_impl_default_data_provider_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.forms.common.service.impl.FormsCommonConfigurationServiceImpl", Routes::bind(&ConfigmgrApi::com_adobe_forms_common_service_impl_forms_common_configuration_service_imp_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.forms.common.servlet.TempCleanUpTask", Routes::bind(&ConfigmgrApi::com_adobe_forms_common_servlet_temp_clean_up_task_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.acp.platform.PlatformServlet", Routes::bind(&ConfigmgrApi::com_adobe_granite_acp_platform_platform_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.activitystreams.impl.ActivityManagerImpl", Routes::bind(&ConfigmgrApi::com_adobe_granite_activitystreams_impl_activity_manager_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.analyzer.base.SystemStatusServlet", Routes::bind(&ConfigmgrApi::com_adobe_granite_analyzer_base_system_status_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.analyzer.scripts.compile.AllScriptsCompilerServlet", Routes::bind(&ConfigmgrApi::com_adobe_granite_analyzer_scripts_compile_all_scripts_compiler_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.apicontroller.FilterResolverHookFactory", Routes::bind(&ConfigmgrApi::com_adobe_granite_apicontroller_filter_resolver_hook_factory_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.auth.cert.impl.ClientCertAuthHandler", Routes::bind(&ConfigmgrApi::com_adobe_granite_auth_cert_impl_client_cert_auth_handler_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.auth.ims", Routes::bind(&ConfigmgrApi::com_adobe_granite_auth_ims_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.auth.ims.impl.ExternalUserIdMappingProviderExtension", Routes::bind(&ConfigmgrApi::com_adobe_granite_auth_ims_impl_external_user_id_mapping_provider_extension_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSAccessTokenRequestCustomizerImpl", Routes::bind(&ConfigmgrApi::com_adobe_granite_auth_ims_impl_ims_access_token_request_customizer_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSInstanceCredentialsValidator", Routes::bind(&ConfigmgrApi::com_adobe_granite_auth_ims_impl_ims_instance_credentials_validator_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSProviderImpl", Routes::bind(&ConfigmgrApi::com_adobe_granite_auth_ims_impl_ims_provider_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.auth.ims.impl.ImsConfigProviderImpl", Routes::bind(&ConfigmgrApi::com_adobe_granite_auth_ims_impl_ims_config_provider_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.auth.oauth.accesstoken.provider", Routes::bind(&ConfigmgrApi::com_adobe_granite_auth_oauth_accesstoken_provider_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.BearerAuthenticationHandler", Routes::bind(&ConfigmgrApi::com_adobe_granite_auth_oauth_impl_bearer_authentication_handler_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.DefaultTokenValidatorImpl", Routes::bind(&ConfigmgrApi::com_adobe_granite_auth_oauth_impl_default_token_validator_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.FacebookProviderImpl", Routes::bind(&ConfigmgrApi::com_adobe_granite_auth_oauth_impl_facebook_provider_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.GithubProviderImpl", Routes::bind(&ConfigmgrApi::com_adobe_granite_auth_oauth_impl_github_provider_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.GraniteProvider", Routes::bind(&ConfigmgrApi::com_adobe_granite_auth_oauth_impl_granite_provider_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManager", Routes::bind(&ConfigmgrApi::com_adobe_granite_auth_oauth_impl_helper_provider_config_manager_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManagerInternal", Routes::bind(&ConfigmgrApi::com_adobe_granite_auth_oauth_impl_helper_provider_config_manager_internal_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.OAuthAuthenticationHandler", Routes::bind(&ConfigmgrApi::com_adobe_granite_auth_oauth_impl_o_auth_authentication_handler_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.TwitterProviderImpl", Routes::bind(&ConfigmgrApi::com_adobe_granite_auth_oauth_impl_twitter_provider_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.auth.oauth.provider", Routes::bind(&ConfigmgrApi::com_adobe_granite_auth_oauth_provider_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.auth.requirement.impl.DefaultRequirementHandler", Routes::bind(&ConfigmgrApi::com_adobe_granite_auth_requirement_impl_default_requirement_handler_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler", Routes::bind(&ConfigmgrApi::com_adobe_granite_auth_saml_saml_authentication_handler_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.auth.sso.impl.SsoAuthenticationHandler", Routes::bind(&ConfigmgrApi::com_adobe_granite_auth_sso_impl_sso_authentication_handler_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.CodeCacheHealthCheck", Routes::bind(&ConfigmgrApi::com_adobe_granite_bundles_hc_impl_code_cache_health_check_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.CrxdeSupportBundleHealthCheck", Routes::bind(&ConfigmgrApi::com_adobe_granite_bundles_hc_impl_crxde_support_bundle_health_check_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.DavExBundleHealthCheck", Routes::bind(&ConfigmgrApi::com_adobe_granite_bundles_hc_impl_dav_ex_bundle_health_check_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.InactiveBundlesHealthCheck", Routes::bind(&ConfigmgrApi::com_adobe_granite_bundles_hc_impl_inactive_bundles_health_check_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.JobsHealthCheck", Routes::bind(&ConfigmgrApi::com_adobe_granite_bundles_hc_impl_jobs_health_check_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingGetServletHealthCheck", Routes::bind(&ConfigmgrApi::com_adobe_granite_bundles_hc_impl_sling_get_servlet_health_check_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJavaScriptHandlerHealthCheck", Routes::bind(&ConfigmgrApi::com_adobe_granite_bundles_hc_impl_sling_java_script_handler_health_check_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJspScriptHandlerHealthCheck", Routes::bind(&ConfigmgrApi::com_adobe_granite_bundles_hc_impl_sling_jsp_script_handler_health_check_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingReferrerFilterHealthCheck", Routes::bind(&ConfigmgrApi::com_adobe_granite_bundles_hc_impl_sling_referrer_filter_health_check_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.WebDavBundleHealthCheck", Routes::bind(&ConfigmgrApi::com_adobe_granite_bundles_hc_impl_web_dav_bundle_health_check_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.comments.internal.CommentReplicationContentFilterFactory", Routes::bind(&ConfigmgrApi::com_adobe_granite_comments_internal_comment_replication_content_filter_fac_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.compatrouter.impl.CompatSwitchingServiceImpl", Routes::bind(&ConfigmgrApi::com_adobe_granite_compatrouter_impl_compat_switching_service_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.compatrouter.impl.RoutingConfig", Routes::bind(&ConfigmgrApi::com_adobe_granite_compatrouter_impl_routing_config_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.compatrouter.impl.SwitchMappingConfig", Routes::bind(&ConfigmgrApi::com_adobe_granite_compatrouter_impl_switch_mapping_config_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.conf.impl.RuntimeAwareConfigurationResourceResolvingStrategy", Routes::bind(&ConfigmgrApi::com_adobe_granite_conf_impl_runtime_aware_configuration_resource_resolving_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.contexthub.impl.ContextHubImpl", Routes::bind(&ConfigmgrApi::com_adobe_granite_contexthub_impl_context_hub_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.cors.impl.CORSPolicyImpl", Routes::bind(&ConfigmgrApi::com_adobe_granite_cors_impl_cors_policy_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.csrf.impl.CSRFFilter", Routes::bind(&ConfigmgrApi::com_adobe_granite_csrf_impl_csrf_filter_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.csrf.impl.CSRFServlet", Routes::bind(&ConfigmgrApi::com_adobe_granite_csrf_impl_csrf_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.distribution.core.impl.CryptoDistributionTransportSecretProvider", Routes::bind(&ConfigmgrApi::com_adobe_granite_distribution_core_impl_crypto_distribution_transport_se_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffChangesObserver", Routes::bind(&ConfigmgrApi::com_adobe_granite_distribution_core_impl_diff_diff_changes_observer_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffEventListener", Routes::bind(&ConfigmgrApi::com_adobe_granite_distribution_core_impl_diff_diff_event_listener_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.distribution.core.impl.DistributionToReplicationEventTransformer", Routes::bind(&ConfigmgrApi::com_adobe_granite_distribution_core_impl_distribution_to_replication_even_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.adapters.ReplicationAgentProvider", Routes::bind(&ConfigmgrApi::com_adobe_granite_distribution_core_impl_replication_adapters_replicat_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.DistributionTransportHandler", Routes::bind(&ConfigmgrApi::com_adobe_granite_distribution_core_impl_replication_distribution_trans_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.distribution.core.impl.transport.AccessTokenDistributionTransportSecretProvider", Routes::bind(&ConfigmgrApi::com_adobe_granite_distribution_core_impl_transport_access_token_distribu_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.frags.impl.CheckHttpHeaderFlag", Routes::bind(&ConfigmgrApi::com_adobe_granite_frags_impl_check_http_header_flag_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.frags.impl.RandomFeature", Routes::bind(&ConfigmgrApi::com_adobe_granite_frags_impl_random_feature_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.httpcache.file.FileCacheStore", Routes::bind(&ConfigmgrApi::com_adobe_granite_httpcache_file_file_cache_store_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.httpcache.impl.OuterCacheFilter", Routes::bind(&ConfigmgrApi::com_adobe_granite_httpcache_impl_outer_cache_filter_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.i18n.impl.bundle.PseudoTranslations", Routes::bind(&ConfigmgrApi::com_adobe_granite_i18n_impl_bundle_pseudo_translations_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.i18n.impl.PreferencesLocaleResolverService", Routes::bind(&ConfigmgrApi::com_adobe_granite_i18n_impl_preferences_locale_resolver_service_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.infocollector.InfoCollector", Routes::bind(&ConfigmgrApi::com_adobe_granite_infocollector_info_collector_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.jetty.ssl.internal.GraniteSslConnectorFactory", Routes::bind(&ConfigmgrApi::com_adobe_granite_jetty_ssl_internal_granite_ssl_connector_factory_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.license.impl.LicenseCheckFilter", Routes::bind(&ConfigmgrApi::com_adobe_granite_license_impl_license_check_filter_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.logging.impl.LogAnalyserImpl", Routes::bind(&ConfigmgrApi::com_adobe_granite_logging_impl_log_analyser_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.logging.impl.LogErrorHealthCheck", Routes::bind(&ConfigmgrApi::com_adobe_granite_logging_impl_log_error_health_check_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.DataStoreGarbageCollectionTask", Routes::bind(&ConfigmgrApi::com_adobe_granite_maintenance_crx_impl_data_store_garbage_collection_task_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.LuceneBinariesCleanupTask", Routes::bind(&ConfigmgrApi::com_adobe_granite_maintenance_crx_impl_lucene_binaries_cleanup_task_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.RevisionCleanupTask", Routes::bind(&ConfigmgrApi::com_adobe_granite_maintenance_crx_impl_revision_cleanup_task_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.monitoring.impl.ScriptConfigImpl", Routes::bind(&ConfigmgrApi::com_adobe_granite_monitoring_impl_script_config_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.oauth.server.auth.impl.OAuth2ServerAuthenticationHandler", Routes::bind(&ConfigmgrApi::com_adobe_granite_oauth_server_auth_impl_o_auth2_server_authentication_han_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.oauth.server.impl.AccessTokenCleanupTask", Routes::bind(&ConfigmgrApi::com_adobe_granite_oauth_server_impl_access_token_cleanup_task_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2ClientRevocationServlet", Routes::bind(&ConfigmgrApi::com_adobe_granite_oauth_server_impl_o_auth2_client_revocation_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2RevocationEndpointServlet", Routes::bind(&ConfigmgrApi::com_adobe_granite_oauth_server_impl_o_auth2_revocation_endpoint_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenEndpointServlet", Routes::bind(&ConfigmgrApi::com_adobe_granite_oauth_server_impl_o_auth2_token_endpoint_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenRevocationServlet", Routes::bind(&ConfigmgrApi::com_adobe_granite_oauth_server_impl_o_auth2_token_revocation_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingConfigurator", Routes::bind(&ConfigmgrApi::com_adobe_granite_offloading_impl_offloading_configurator_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobCloner", Routes::bind(&ConfigmgrApi::com_adobe_granite_offloading_impl_offloading_job_cloner_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobOffloader", Routes::bind(&ConfigmgrApi::com_adobe_granite_offloading_impl_offloading_job_offloader_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingAgentManager", Routes::bind(&ConfigmgrApi::com_adobe_granite_offloading_impl_transporter_offloading_agent_manager_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingDefaultTransporter", Routes::bind(&ConfigmgrApi::com_adobe_granite_offloading_impl_transporter_offloading_default_transpo_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.omnisearch.impl.core.OmniSearchServiceImpl", Routes::bind(&ConfigmgrApi::com_adobe_granite_omnisearch_impl_core_omni_search_service_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.optout.impl.OptOutServiceImpl", Routes::bind(&ConfigmgrApi::com_adobe_granite_optout_impl_opt_out_service_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.queries.impl.hc.AsyncIndexHealthCheck", Routes::bind(&ConfigmgrApi::com_adobe_granite_queries_impl_hc_async_index_health_check_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.queries.impl.hc.LargeIndexHealthCheck", Routes::bind(&ConfigmgrApi::com_adobe_granite_queries_impl_hc_large_index_health_check_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueriesStatusHealthCheck", Routes::bind(&ConfigmgrApi::com_adobe_granite_queries_impl_hc_queries_status_health_check_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryHealthCheckMetrics", Routes::bind(&ConfigmgrApi::com_adobe_granite_queries_impl_hc_query_health_check_metrics_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryLimitsHealthCheck", Routes::bind(&ConfigmgrApi::com_adobe_granite_queries_impl_hc_query_limits_health_check_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationQueueHealthCheck", Routes::bind(&ConfigmgrApi::com_adobe_granite_replication_hc_impl_replication_queue_health_check_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationTransportUsersHealthCheck", Routes::bind(&ConfigmgrApi::com_adobe_granite_replication_hc_impl_replication_transport_users_health_c_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.repository.hc.impl.AuthorizableNodeNameHealthCheck", Routes::bind(&ConfigmgrApi::com_adobe_granite_repository_hc_impl_authorizable_node_name_health_check_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.repository.hc.impl.content.sling.SlingContentHealthCheck", Routes::bind(&ConfigmgrApi::com_adobe_granite_repository_hc_impl_content_sling_sling_content_health_c_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.repository.hc.impl.ContinuousRGCHealthCheck", Routes::bind(&ConfigmgrApi::com_adobe_granite_repository_hc_impl_continuous_rgc_health_check_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultAccessUserProfileHealthCheck", Routes::bind(&ConfigmgrApi::com_adobe_granite_repository_hc_impl_default_access_user_profile_health_che_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultLoginsHealthCheck", Routes::bind(&ConfigmgrApi::com_adobe_granite_repository_hc_impl_default_logins_health_check_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.repository.hc.impl.DiskSpaceHealthCheck", Routes::bind(&ConfigmgrApi::com_adobe_granite_repository_hc_impl_disk_space_health_check_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.repository.hc.impl.ObservationQueueLengthHealthCheck", Routes::bind(&ConfigmgrApi::com_adobe_granite_repository_hc_impl_observation_queue_length_health_check_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.repository.impl.CommitStatsConfig", Routes::bind(&ConfigmgrApi::com_adobe_granite_repository_impl_commit_stats_config_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.repository.ServiceUserConfiguration", Routes::bind(&ConfigmgrApi::com_adobe_granite_repository_service_user_configuration_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.requests.logging.impl.hc.RequestsStatusHealthCheckImpl", Routes::bind(&ConfigmgrApi::com_adobe_granite_requests_logging_impl_hc_requests_status_health_check_im_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.resourcestatus.impl.CompositeStatusType", Routes::bind(&ConfigmgrApi::com_adobe_granite_resourcestatus_impl_composite_status_type_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.resourcestatus.impl.StatusResourceProviderImpl", Routes::bind(&ConfigmgrApi::com_adobe_granite_resourcestatus_impl_status_resource_provider_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.rest.assets.impl.AssetContentDispositionFilter", Routes::bind(&ConfigmgrApi::com_adobe_granite_rest_assets_impl_asset_content_disposition_filter_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.rest.impl.ApiEndpointResourceProviderFactoryImpl", Routes::bind(&ConfigmgrApi::com_adobe_granite_rest_impl_api_endpoint_resource_provider_factory_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.rest.impl.servlet.DefaultGETServlet", Routes::bind(&ConfigmgrApi::com_adobe_granite_rest_impl_servlet_default_get_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.security.user.ui.internal.servlets.SSLConfigurationServlet", Routes::bind(&ConfigmgrApi::com_adobe_granite_security_user_ui_internal_servlets_ssl_configuration_s_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.security.user.UserPropertiesService", Routes::bind(&ConfigmgrApi::com_adobe_granite_security_user_user_properties_service_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.socialgraph.impl.SocialGraphFactoryImpl", Routes::bind(&ConfigmgrApi::com_adobe_granite_socialgraph_impl_social_graph_factory_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.system.monitoring.impl.SystemStatsMBeanImpl", Routes::bind(&ConfigmgrApi::com_adobe_granite_system_monitoring_impl_system_stats_m_bean_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskAdapterFactory", Routes::bind(&ConfigmgrApi::com_adobe_granite_taskmanagement_impl_jcr_task_adapter_factory_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskArchiveService", Routes::bind(&ConfigmgrApi::com_adobe_granite_taskmanagement_impl_jcr_task_archive_service_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.taskmanagement.impl.purge.TaskPurgeMaintenanceTask", Routes::bind(&ConfigmgrApi::com_adobe_granite_taskmanagement_impl_purge_task_purge_maintenance_task_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.taskmanagement.impl.service.TaskManagerAdapterFactory", Routes::bind(&ConfigmgrApi::com_adobe_granite_taskmanagement_impl_service_task_manager_adapter_factor_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.threaddump.ThreadDumpCollector", Routes::bind(&ConfigmgrApi::com_adobe_granite_threaddump_thread_dump_collector_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.translation.connector.msft.core.impl.MicrosoftTranslationServiceFactoryImpl", Routes::bind(&ConfigmgrApi::com_adobe_granite_translation_connector_msft_core_impl_microsoft_transl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.translation.core.impl.TranslationManagerImpl", Routes::bind(&ConfigmgrApi::com_adobe_granite_translation_core_impl_translation_manager_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.ui.clientlibs.impl.HtmlLibraryManagerImpl", Routes::bind(&ConfigmgrApi::com_adobe_granite_ui_clientlibs_impl_html_library_manager_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.workflow.console.frags.WorkflowWithdrawFeature", Routes::bind(&ConfigmgrApi::com_adobe_granite_workflow_console_frags_workflow_withdraw_feature_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.workflow.console.publish.WorkflowPublishEventService", Routes::bind(&ConfigmgrApi::com_adobe_granite_workflow_console_publish_workflow_publish_event_service_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.workflow.core.jcr.WorkflowBucketManager", Routes::bind(&ConfigmgrApi::com_adobe_granite_workflow_core_jcr_workflow_bucket_manager_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.workflow.core.job.ExternalProcessJobHandler", Routes::bind(&ConfigmgrApi::com_adobe_granite_workflow_core_job_external_process_job_handler_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.workflow.core.job.JobHandler", Routes::bind(&ConfigmgrApi::com_adobe_granite_workflow_core_job_job_handler_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.workflow.core.offloading.WorkflowOffloadingJobConsumer", Routes::bind(&ConfigmgrApi::com_adobe_granite_workflow_core_offloading_workflow_offloading_job_consum_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.workflow.core.PayloadMapCache", Routes::bind(&ConfigmgrApi::com_adobe_granite_workflow_core_payload_map_cache_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.workflow.core.payloadmap.PayloadMoveListener", Routes::bind(&ConfigmgrApi::com_adobe_granite_workflow_core_payloadmap_payload_move_listener_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.workflow.core.WorkflowConfig", Routes::bind(&ConfigmgrApi::com_adobe_granite_workflow_core_workflow_config_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.workflow.core.WorkflowSessionFactory", Routes::bind(&ConfigmgrApi::com_adobe_granite_workflow_core_workflow_session_factory_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.workflow.purge.Scheduler", Routes::bind(&ConfigmgrApi::com_adobe_granite_workflow_purge_scheduler_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.octopus.ncomm.bootstrap", Routes::bind(&ConfigmgrApi::com_adobe_octopus_ncomm_bootstrap_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.social.integrations.livefyre.user.pingforpull.impl.PingPullServlet", Routes::bind(&ConfigmgrApi::com_adobe_social_integrations_livefyre_user_pingforpull_impl_ping_pull_s_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.xmp.worker.files.ncomm.XMPFilesNComm", Routes::bind(&ConfigmgrApi::com_adobe_xmp_worker_files_ncomm_xmp_files_n_comm_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.commons.datasource.jdbcpool.JdbcPoolService", Routes::bind(&ConfigmgrApi::com_day_commons_datasource_jdbcpool_jdbc_pool_service_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.commons.httpclient", Routes::bind(&ConfigmgrApi::com_day_commons_httpclient_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.analytics.impl.StorePropertiesChangeListener", Routes::bind(&ConfigmgrApi::com_day_cq_analytics_impl_store_properties_change_listener_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.exporter.ClassificationsExporter", Routes::bind(&ConfigmgrApi::com_day_cq_analytics_sitecatalyst_impl_exporter_classifications_exporte_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.importer.ReportImporter", Routes::bind(&ConfigmgrApi::com_day_cq_analytics_sitecatalyst_impl_importer_report_importer_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystAdapterFactory", Routes::bind(&ConfigmgrApi::com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_adapter_factory_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystHttpClientImpl", Routes::bind(&ConfigmgrApi::com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_http_client_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.AccountOptionsUpdater", Routes::bind(&ConfigmgrApi::com_day_cq_analytics_testandtarget_impl_account_options_updater_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.DeleteAuthorActivityListener", Routes::bind(&ConfigmgrApi::com_day_cq_analytics_testandtarget_impl_delete_author_activity_listener_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.PushAuthorCampaignPageListener", Routes::bind(&ConfigmgrApi::com_day_cq_analytics_testandtarget_impl_push_author_campaign_page_listener_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.SegmentImporter", Routes::bind(&ConfigmgrApi::com_day_cq_analytics_testandtarget_impl_segment_importer_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.service.WebServiceImpl", Routes::bind(&ConfigmgrApi::com_day_cq_analytics_testandtarget_impl_service_web_service_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.servlets.AdminServerServlet", Routes::bind(&ConfigmgrApi::com_day_cq_analytics_testandtarget_impl_servlets_admin_server_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.TestandtargetHttpClientImpl", Routes::bind(&ConfigmgrApi::com_day_cq_analytics_testandtarget_impl_testandtarget_http_client_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.auth.impl.cug.CugSupportImpl", Routes::bind(&ConfigmgrApi::com_day_cq_auth_impl_cug_cug_support_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.auth.impl.LoginSelectorHandler", Routes::bind(&ConfigmgrApi::com_day_cq_auth_impl_login_selector_handler_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.commons.impl.ExternalizerImpl", Routes::bind(&ConfigmgrApi::com_day_cq_commons_impl_externalizer_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.commons.servlets.RootMappingServlet", Routes::bind(&ConfigmgrApi::com_day_cq_commons_servlets_root_mapping_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.CodeUpgradeExecutionConditionChecker", Routes::bind(&ConfigmgrApi::com_day_cq_compat_codeupgrade_impl_code_upgrade_execution_condition_checke_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.UpgradeTaskIgnoreList", Routes::bind(&ConfigmgrApi::com_day_cq_compat_codeupgrade_impl_upgrade_task_ignore_list_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.VersionRangeTaskIgnorelist", Routes::bind(&ConfigmgrApi::com_day_cq_compat_codeupgrade_impl_version_range_task_ignorelist_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.contentsync.impl.ContentSyncManagerImpl", Routes::bind(&ConfigmgrApi::com_day_cq_contentsync_impl_content_sync_manager_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.commons.handler.StandardImageHandler", Routes::bind(&ConfigmgrApi::com_day_cq_dam_commons_handler_standard_image_handler_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.commons.metadata.XmpFilterBlackWhite", Routes::bind(&ConfigmgrApi::com_day_cq_dam_commons_metadata_xmp_filter_black_white_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.commons.util.impl.AssetCacheImpl", Routes::bind(&ConfigmgrApi::com_day_cq_dam_commons_util_impl_asset_cache_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.core.impl.annotation.pdf.AnnotationPdfConfig", Routes::bind(&ConfigmgrApi::com_day_cq_dam_core_impl_annotation_pdf_annotation_pdf_config_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.core.impl.AssetMoveListener", Routes::bind(&ConfigmgrApi::com_day_cq_dam_core_impl_asset_move_listener_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.core.impl.assethome.AssetHomePageConfiguration", Routes::bind(&ConfigmgrApi::com_day_cq_dam_core_impl_assethome_asset_home_page_configuration_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.core.impl.assetlinkshare.AdhocAssetShareProxyServlet", Routes::bind(&ConfigmgrApi::com_day_cq_dam_core_impl_assetlinkshare_adhoc_asset_share_proxy_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.core.impl.cache.CQBufferedImageCache", Routes::bind(&ConfigmgrApi::com_day_cq_dam_core_impl_cache_cq_buffered_image_cache_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.core.impl.DamChangeEventListener", Routes::bind(&ConfigmgrApi::com_day_cq_dam_core_impl_dam_change_event_listener_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.core.impl.DamEventPurgeService", Routes::bind(&ConfigmgrApi::com_day_cq_dam_core_impl_dam_event_purge_service_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.core.impl.DamEventRecorderImpl", Routes::bind(&ConfigmgrApi::com_day_cq_dam_core_impl_dam_event_recorder_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.core.impl.event.DamEventAuditListener", Routes::bind(&ConfigmgrApi::com_day_cq_dam_core_impl_event_dam_event_audit_listener_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.core.impl.ExpiryNotificationJobImpl", Routes::bind(&ConfigmgrApi::com_day_cq_dam_core_impl_expiry_notification_job_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.core.impl.foldermetadataschema.FolderMetadataSchemaFeatureFlag", Routes::bind(&ConfigmgrApi::com_day_cq_dam_core_impl_foldermetadataschema_folder_metadata_schema_feat_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.core.impl.gfx.CommonsGfxRenderer", Routes::bind(&ConfigmgrApi::com_day_cq_dam_core_impl_gfx_commons_gfx_renderer_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.core.impl.handler.EPSFormatHandler", Routes::bind(&ConfigmgrApi::com_day_cq_dam_core_impl_handler_eps_format_handler_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.core.impl.handler.IndesignFormatHandler", Routes::bind(&ConfigmgrApi::com_day_cq_dam_core_impl_handler_indesign_format_handler_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.core.impl.handler.JpegHandler", Routes::bind(&ConfigmgrApi::com_day_cq_dam_core_impl_handler_jpeg_handler_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.core.impl.handler.xmp.NCommXMPHandler", Routes::bind(&ConfigmgrApi::com_day_cq_dam_core_impl_handler_xmp_n_comm_xmp_handler_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetIndexUpdateMonitor", Routes::bind(&ConfigmgrApi::com_day_cq_dam_core_impl_jmx_asset_index_update_monitor_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetMigrationMBeanImpl", Routes::bind(&ConfigmgrApi::com_day_cq_dam_core_impl_jmx_asset_migration_m_bean_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetUpdateMonitorImpl", Routes::bind(&ConfigmgrApi::com_day_cq_dam_core_impl_jmx_asset_update_monitor_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataexport.AsyncMetadataExportConfigProviderService", Routes::bind(&ConfigmgrApi::com_day_cq_dam_core_impl_jobs_metadataexport_async_metadata_export_config_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataimport.AsyncMetadataImportConfigProviderService", Routes::bind(&ConfigmgrApi::com_day_cq_dam_core_impl_jobs_metadataimport_async_metadata_import_config_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.core.impl.lightbox.LightboxServlet", Routes::bind(&ConfigmgrApi::com_day_cq_dam_core_impl_lightbox_lightbox_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.core.impl.metadata.editor.SelectComponentHandler", Routes::bind(&ConfigmgrApi::com_day_cq_dam_core_impl_metadata_editor_select_component_handler_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.core.impl.mimeType.AssetUploadRestrictionHelper", Routes::bind(&ConfigmgrApi::com_day_cq_dam_core_impl_mime_type_asset_upload_restriction_helper_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.core.impl.mimeType.DamMimeTypeServiceImpl", Routes::bind(&ConfigmgrApi::com_day_cq_dam_core_impl_mime_type_dam_mime_type_service_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.core.impl.MissingMetadataNotificationJob", Routes::bind(&ConfigmgrApi::com_day_cq_dam_core_impl_missing_metadata_notification_job_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.core.impl.process.SendTransientWorkflowCompletedEmailProcess", Routes::bind(&ConfigmgrApi::com_day_cq_dam_core_impl_process_send_transient_workflow_completed_email_pr_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.core.impl.process.TextExtractionProcess", Routes::bind(&ConfigmgrApi::com_day_cq_dam_core_impl_process_text_extraction_process_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.core.impl.RenditionMakerImpl", Routes::bind(&ConfigmgrApi::com_day_cq_dam_core_impl_rendition_maker_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportExportService", Routes::bind(&ConfigmgrApi::com_day_cq_dam_core_impl_reports_report_export_service_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportPurgeService", Routes::bind(&ConfigmgrApi::com_day_cq_dam_core_impl_reports_report_purge_service_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetDownloadServlet", Routes::bind(&ConfigmgrApi::com_day_cq_dam_core_impl_servlet_asset_download_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetStatusServlet", Routes::bind(&ConfigmgrApi::com_day_cq_dam_core_impl_servlet_asset_status_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetXMPSearchServlet", Routes::bind(&ConfigmgrApi::com_day_cq_dam_core_impl_servlet_asset_xmp_search_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.BatchMetadataServlet", Routes::bind(&ConfigmgrApi::com_day_cq_dam_core_impl_servlet_batch_metadata_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.BinaryProviderServlet", Routes::bind(&ConfigmgrApi::com_day_cq_dam_core_impl_servlet_binary_provider_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionServlet", Routes::bind(&ConfigmgrApi::com_day_cq_dam_core_impl_servlet_collection_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionsServlet", Routes::bind(&ConfigmgrApi::com_day_cq_dam_core_impl_servlet_collections_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CompanionServlet", Routes::bind(&ConfigmgrApi::com_day_cq_dam_core_impl_servlet_companion_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CreateAssetServlet", Routes::bind(&ConfigmgrApi::com_day_cq_dam_core_impl_servlet_create_asset_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.DamContentDispositionFilter", Routes::bind(&ConfigmgrApi::com_day_cq_dam_core_impl_servlet_dam_content_disposition_filter_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.GuidLookupFilter", Routes::bind(&ConfigmgrApi::com_day_cq_dam_core_impl_servlet_guid_lookup_filter_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.HealthCheckServlet", Routes::bind(&ConfigmgrApi::com_day_cq_dam_core_impl_servlet_health_check_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.MetadataGetServlet", Routes::bind(&ConfigmgrApi::com_day_cq_dam_core_impl_servlet_metadata_get_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.MultipleLicenseAcceptServlet", Routes::bind(&ConfigmgrApi::com_day_cq_dam_core_impl_servlet_multiple_license_accept_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.ResourceCollectionServlet", Routes::bind(&ConfigmgrApi::com_day_cq_dam_core_impl_servlet_resource_collection_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.core.impl.ui.preview.FolderPreviewUpdaterImpl", Routes::bind(&ConfigmgrApi::com_day_cq_dam_core_impl_ui_preview_folder_preview_updater_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.core.impl.unzip.UnzipConfig", Routes::bind(&ConfigmgrApi::com_day_cq_dam_core_impl_unzip_unzip_config_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.core.process.ExifToolExtractMetadataProcess", Routes::bind(&ConfigmgrApi::com_day_cq_dam_core_process_exif_tool_extract_metadata_process_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.core.process.ExtractMetadataProcess", Routes::bind(&ConfigmgrApi::com_day_cq_dam_core_process_extract_metadata_process_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.core.process.MetadataProcessorProcess", Routes::bind(&ConfigmgrApi::com_day_cq_dam_core_process_metadata_processor_process_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.handler.ffmpeg.LocatorImpl", Routes::bind(&ConfigmgrApi::com_day_cq_dam_handler_ffmpeg_locator_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.handler.gibson.fontmanager.impl.FontManagerServiceImpl", Routes::bind(&ConfigmgrApi::com_day_cq_dam_handler_gibson_fontmanager_impl_font_manager_service_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.handler.standard.pdf.PdfHandler", Routes::bind(&ConfigmgrApi::com_day_cq_dam_handler_standard_pdf_pdf_handler_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.handler.standard.ps.PostScriptHandler", Routes::bind(&ConfigmgrApi::com_day_cq_dam_handler_standard_ps_post_script_handler_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.handler.standard.psd.PsdHandler", Routes::bind(&ConfigmgrApi::com_day_cq_dam_handler_standard_psd_psd_handler_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.ids.impl.IDSJobProcessor", Routes::bind(&ConfigmgrApi::com_day_cq_dam_ids_impl_ids_job_processor_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.ids.impl.IDSPoolManagerImpl", Routes::bind(&ConfigmgrApi::com_day_cq_dam_ids_impl_ids_pool_manager_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.indd.impl.handler.IndesignXMPHandler", Routes::bind(&ConfigmgrApi::com_day_cq_dam_indd_impl_handler_indesign_xmp_handler_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.indd.impl.servlet.SnippetCreationServlet", Routes::bind(&ConfigmgrApi::com_day_cq_dam_indd_impl_servlet_snippet_creation_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.indd.process.INDDMediaExtractProcess", Routes::bind(&ConfigmgrApi::com_day_cq_dam_indd_process_indd_media_extract_process_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceDataHandlerImpl", Routes::bind(&ConfigmgrApi::com_day_cq_dam_performance_internal_asset_performance_data_handler_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceReportSyncJob", Routes::bind(&ConfigmgrApi::com_day_cq_dam_performance_internal_asset_performance_report_sync_job_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.pim.impl.sourcing.upload.process.ProductAssetsUploadProcess", Routes::bind(&ConfigmgrApi::com_day_cq_dam_pim_impl_sourcing_upload_process_product_assets_upload_pro_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.S7damDynamicMediaConfigEventListener", Routes::bind(&ConfigmgrApi::com_day_cq_dam_s7dam_common_analytics_impl_s7dam_dynamic_media_config_even_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.SiteCatalystReportRunner", Routes::bind(&ConfigmgrApi::com_day_cq_dam_s7dam_common_analytics_impl_site_catalyst_report_runner_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetCreateHandler", Routes::bind(&ConfigmgrApi::com_day_cq_dam_s7dam_common_post_servlets_set_create_handler_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetModifyHandler", Routes::bind(&ConfigmgrApi::com_day_cq_dam_s7dam_common_post_servlets_set_modify_handler_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.s7dam.common.process.VideoThumbnailDownloadProcess", Routes::bind(&ConfigmgrApi::com_day_cq_dam_s7dam_common_process_video_thumbnail_download_process_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.s7dam.common.S7damDamChangeEventListener", Routes::bind(&ConfigmgrApi::com_day_cq_dam_s7dam_common_s7dam_dam_change_event_listener_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.s7dam.common.servlets.S7damProductInfoServlet", Routes::bind(&ConfigmgrApi::com_day_cq_dam_s7dam_common_servlets_s7dam_product_info_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.s7dam.common.video.impl.VideoProxyClientServiceImpl", Routes::bind(&ConfigmgrApi::com_day_cq_dam_s7dam_common_video_impl_video_proxy_client_service_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7APIClientImpl", Routes::bind(&ConfigmgrApi::com_day_cq_dam_scene7_impl_scene7_api_client_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7AssetMimeTypeServiceImpl", Routes::bind(&ConfigmgrApi::com_day_cq_dam_scene7_impl_scene7_asset_mime_type_service_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7ConfigurationEventListener", Routes::bind(&ConfigmgrApi::com_day_cq_dam_scene7_impl_scene7_configuration_event_listener_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7DamChangeEventListener", Routes::bind(&ConfigmgrApi::com_day_cq_dam_scene7_impl_scene7_dam_change_event_listener_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7FlashTemplatesServiceImpl", Routes::bind(&ConfigmgrApi::com_day_cq_dam_scene7_impl_scene7_flash_templates_service_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7UploadServiceImpl", Routes::bind(&ConfigmgrApi::com_day_cq_dam_scene7_impl_scene7_upload_service_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.stock.integration.impl.cache.StockCacheConfigurationServiceImpl", Routes::bind(&ConfigmgrApi::com_day_cq_dam_stock_integration_impl_cache_stock_cache_configuration_ser_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.stock.integration.impl.configuration.StockConfigurationImpl", Routes::bind(&ConfigmgrApi::com_day_cq_dam_stock_integration_impl_configuration_stock_configuration_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.dam.video.impl.servlet.VideoTestServlet", Routes::bind(&ConfigmgrApi::com_day_cq_dam_video_impl_servlet_video_test_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.extwidget.servlets.ImageSpriteServlet", Routes::bind(&ConfigmgrApi::com_day_cq_extwidget_servlets_image_sprite_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.image.internal.font.FontHelper", Routes::bind(&ConfigmgrApi::com_day_cq_image_internal_font_font_helper_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.jcrclustersupport.ClusterStartLevelController", Routes::bind(&ConfigmgrApi::com_day_cq_jcrclustersupport_cluster_start_level_controller_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.mailer.DefaultMailService", Routes::bind(&ConfigmgrApi::com_day_cq_mailer_default_mail_service_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.mailer.impl.CqMailingService", Routes::bind(&ConfigmgrApi::com_day_cq_mailer_impl_cq_mailing_service_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.mailer.impl.email.CqEmailTemplateFactory", Routes::bind(&ConfigmgrApi::com_day_cq_mailer_impl_email_cq_email_template_factory_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.mailer.impl.email.CqRetrieverTemplateFactory", Routes::bind(&ConfigmgrApi::com_day_cq_mailer_impl_email_cq_retriever_template_factory_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.mcm.campaign.impl.IntegrationConfigImpl", Routes::bind(&ConfigmgrApi::com_day_cq_mcm_campaign_impl_integration_config_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.mcm.campaign.importer.PersonalizedTextHandlerFactory", Routes::bind(&ConfigmgrApi::com_day_cq_mcm_campaign_importer_personalized_text_handler_factory_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.mcm.core.newsletter.NewsletterEmailServiceImpl", Routes::bind(&ConfigmgrApi::com_day_cq_mcm_core_newsletter_newsletter_email_service_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.mcm.impl.MCMConfiguration", Routes::bind(&ConfigmgrApi::com_day_cq_mcm_impl_mcm_configuration_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.ClickThroughComponentTagHandlerFactory", Routes::bind(&ConfigmgrApi::com_day_cq_mcm_landingpage_parser_taghandlers_cta_click_through_componen_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.GraphicalClickThroughComponentTagHandlerFactory", Routes::bind(&ConfigmgrApi::com_day_cq_mcm_landingpage_parser_taghandlers_cta_graphical_click_throug_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.LeadFormCTAComponentTagHandlerFactory", Routes::bind(&ConfigmgrApi::com_day_cq_mcm_landingpage_parser_taghandlers_cta_lead_form_cta_component_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.MBoxExperienceTagHandlerFactory", Routes::bind(&ConfigmgrApi::com_day_cq_mcm_landingpage_parser_taghandlers_mbox_m_box_experience_tag_ha_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.TargetComponentTagHandlerFactory", Routes::bind(&ConfigmgrApi::com_day_cq_mcm_landingpage_parser_taghandlers_mbox_target_component_tag_h_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.notification.impl.NotificationServiceImpl", Routes::bind(&ConfigmgrApi::com_day_cq_notification_impl_notification_service_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.personalization.impl.servlets.TargetingConfigurationServlet", Routes::bind(&ConfigmgrApi::com_day_cq_personalization_impl_servlets_targeting_configuration_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollConfigImpl", Routes::bind(&ConfigmgrApi::com_day_cq_polling_importer_impl_managed_poll_config_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollingImporterImpl", Routes::bind(&ConfigmgrApi::com_day_cq_polling_importer_impl_managed_polling_importer_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.polling.importer.impl.PollingImporterImpl", Routes::bind(&ConfigmgrApi::com_day_cq_polling_importer_impl_polling_importer_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.replication.audit.ReplicationEventListener", Routes::bind(&ConfigmgrApi::com_day_cq_replication_audit_replication_event_listener_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.replication.content.StaticContentBuilder", Routes::bind(&ConfigmgrApi::com_day_cq_replication_content_static_content_builder_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.replication.impl.AgentManagerImpl", Routes::bind(&ConfigmgrApi::com_day_cq_replication_impl_agent_manager_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.replication.impl.content.durbo.BinaryLessContentBuilder", Routes::bind(&ConfigmgrApi::com_day_cq_replication_impl_content_durbo_binary_less_content_builder_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.replication.impl.content.durbo.DurboImportConfigurationProviderService", Routes::bind(&ConfigmgrApi::com_day_cq_replication_impl_content_durbo_durbo_import_configuration_prov_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.replication.impl.ReplicationContentFactoryProviderImpl", Routes::bind(&ConfigmgrApi::com_day_cq_replication_impl_replication_content_factory_provider_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.replication.impl.ReplicationReceiverImpl", Routes::bind(&ConfigmgrApi::com_day_cq_replication_impl_replication_receiver_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.replication.impl.ReplicatorImpl", Routes::bind(&ConfigmgrApi::com_day_cq_replication_impl_replicator_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.replication.impl.ReverseReplicator", Routes::bind(&ConfigmgrApi::com_day_cq_replication_impl_reverse_replicator_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.replication.impl.transport.BinaryLessTransportHandler", Routes::bind(&ConfigmgrApi::com_day_cq_replication_impl_transport_binary_less_transport_handler_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.replication.impl.transport.Http", Routes::bind(&ConfigmgrApi::com_day_cq_replication_impl_transport_http_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.reporting.impl.cache.CacheImpl", Routes::bind(&ConfigmgrApi::com_day_cq_reporting_impl_cache_cache_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.reporting.impl.ConfigServiceImpl", Routes::bind(&ConfigmgrApi::com_day_cq_reporting_impl_config_service_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.reporting.impl.RLogAnalyzer", Routes::bind(&ConfigmgrApi::com_day_cq_reporting_impl_r_log_analyzer_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerImpl", Routes::bind(&ConfigmgrApi::com_day_cq_rewriter_linkchecker_impl_link_checker_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTask", Routes::bind(&ConfigmgrApi::com_day_cq_rewriter_linkchecker_impl_link_checker_task_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTransformerFactory", Routes::bind(&ConfigmgrApi::com_day_cq_rewriter_linkchecker_impl_link_checker_transformer_factory_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkInfoStorageImpl", Routes::bind(&ConfigmgrApi::com_day_cq_rewriter_linkchecker_impl_link_info_storage_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.rewriter.processor.impl.HtmlParserFactory", Routes::bind(&ConfigmgrApi::com_day_cq_rewriter_processor_impl_html_parser_factory_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.search.impl.builder.QueryBuilderImpl", Routes::bind(&ConfigmgrApi::com_day_cq_search_impl_builder_query_builder_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.search.suggest.impl.SuggestionIndexManagerImpl", Routes::bind(&ConfigmgrApi::com_day_cq_search_suggest_impl_suggestion_index_manager_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.searchpromote.impl.PublishSearchPromoteConfigHandler", Routes::bind(&ConfigmgrApi::com_day_cq_searchpromote_impl_publish_search_promote_config_handler_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.searchpromote.impl.SearchPromoteServiceImpl", Routes::bind(&ConfigmgrApi::com_day_cq_searchpromote_impl_search_promote_service_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.security.ACLSetup", Routes::bind(&ConfigmgrApi::com_day_cq_security_acl_setup_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.statistics.impl.StatisticsServiceImpl", Routes::bind(&ConfigmgrApi::com_day_cq_statistics_impl_statistics_service_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.tagging.impl.JcrTagManagerFactoryImpl", Routes::bind(&ConfigmgrApi::com_day_cq_tagging_impl_jcr_tag_manager_factory_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.tagging.impl.search.TagPredicateEvaluator", Routes::bind(&ConfigmgrApi::com_day_cq_tagging_impl_search_tag_predicate_evaluator_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.tagging.impl.TagGarbageCollector", Routes::bind(&ConfigmgrApi::com_day_cq_tagging_impl_tag_garbage_collector_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.contentsync.impl.handler.PagesUpdateHandler", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_contentsync_impl_handler_pages_update_handler_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.contentsync.impl.rewriter.PathRewriterTransformerFactory", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_contentsync_impl_rewriter_path_rewriter_transformer_factor_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.core.impl.AuthoringUIModeServiceImpl", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_core_impl_authoring_ui_mode_service_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.core.impl.commands.WCMCommandServlet", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_core_impl_commands_wcm_command_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.core.impl.devicedetection.DeviceIdentificationModeImpl", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_core_impl_devicedetection_device_identification_mode_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.core.impl.event.PageEventAuditListener", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_core_impl_event_page_event_audit_listener_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.core.impl.event.PagePostProcessor", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_core_impl_event_page_post_processor_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.core.impl.event.RepositoryChangeEventListener", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_core_impl_event_repository_change_event_listener_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.core.impl.event.TemplatePostProcessor", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_core_impl_event_template_post_processor_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.core.impl.LanguageManagerImpl", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_core_impl_language_manager_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.core.impl.LinkCheckerConfigurationFactoryImpl", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_core_impl_link_checker_configuration_factory_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.core.impl.page.PageInfoAggregatorImpl", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_core_impl_page_page_info_aggregator_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.core.impl.page.PageManagerFactoryImpl", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_core_impl_page_page_manager_factory_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.core.impl.references.content.ContentReferenceConfig", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_core_impl_references_content_content_reference_config_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.AssetViewHandler", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_core_impl_servlets_contentfinder_asset_view_handler_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.connector.ConnectorViewHandler", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_core_impl_servlets_contentfinder_connector_connector_vie_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.PageViewHandler", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_core_impl_servlets_contentfinder_page_view_handler_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.FindReplaceServlet", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_core_impl_servlets_find_replace_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ReferenceSearchServlet", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_core_impl_servlets_reference_search_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ThumbnailServlet", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_core_impl_servlets_thumbnail_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.core.impl.utils.DefaultPageNameValidator", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_core_impl_utils_default_page_name_validator_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.core.impl.variants.PageVariantsProviderImpl", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_core_impl_variants_page_variants_provider_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.core.impl.VersionManagerImpl", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_core_impl_version_manager_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.core.impl.VersionPurgeTask", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_core_impl_version_purge_task_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.core.impl.WCMDebugFilter", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_core_impl_wcm_debug_filter_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.core.impl.WCMDeveloperModeFilter", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_core_impl_wcm_developer_mode_filter_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.core.impl.warp.TimeWarpFilter", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_core_impl_warp_time_warp_filter_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.core.mvt.MVTStatisticsImpl", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_core_mvt_mvt_statistics_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.core.stats.PageViewStatisticsImpl", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_core_stats_page_view_statistics_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.core.WCMRequestFilter", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_core_wcm_request_filter_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.designimporter.DesignPackageImporter", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_designimporter_design_package_importer_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasBuilderImpl", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_designimporter_impl_canvas_builder_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasPageDeleteHandler", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_designimporter_impl_canvas_page_delete_handler_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.designimporter.impl.EntryPreprocessorImpl", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_designimporter_impl_entry_preprocessor_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.designimporter.impl.MobileCanvasBuilderImpl", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_designimporter_impl_mobile_canvas_builder_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.CanvasComponentTagHandlerFactory", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_designimporter_parser_taghandlers_factory_canvas_compone_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultComponentTagHandlerFactory", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_compon_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultTagHandlerFactory", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_tag_han_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.HeadTagHandlerFactory", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_designimporter_parser_taghandlers_factory_head_tag_handle_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.IFrameTagHandlerFactory", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_designimporter_parser_taghandlers_factory_i_frame_tag_hand_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImageComponentTagHandlerFactory", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_designimporter_parser_taghandlers_factory_image_componen_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImgTagHandlerFactory", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_designimporter_parser_taghandlers_factory_img_tag_handler_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.InlineScriptTagHandlerFactory", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_designimporter_parser_taghandlers_factory_inline_script_t_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.LinkTagHandlerFactory", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_designimporter_parser_taghandlers_factory_link_tag_handle_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.MetaTagHandlerFactory", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_designimporter_parser_taghandlers_factory_meta_tag_handle_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.NonScriptTagHandlerFactory", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_designimporter_parser_taghandlers_factory_non_script_tag_h_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ParsysComponentTagHandlerFactory", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_designimporter_parser_taghandlers_factory_parsys_compone_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ScriptTagHandlerFactory", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_designimporter_parser_taghandlers_factory_script_tag_hand_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.StyleTagHandlerFactory", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_designimporter_parser_taghandlers_factory_style_tag_handl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TextComponentTagHandlerFactory", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_designimporter_parser_taghandlers_factory_text_component_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleComponentTagHandlerFactory", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_componen_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleTagHandlerFactory", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_tag_handl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormChooserServlet", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_foundation_forms_impl_form_chooser_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormParagraphPostProcessor", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_foundation_forms_impl_form_paragraph_post_processor_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormsHandlingServlet", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_foundation_forms_impl_forms_handling_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.MailServlet", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_foundation_forms_impl_mail_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.foundation.impl.AdaptiveImageComponentServlet", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_foundation_impl_adaptive_image_component_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.foundation.impl.HTTPAuthHandler", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_foundation_impl_http_auth_handler_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.foundation.impl.PageImpressionsTracker", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_foundation_impl_page_impressions_tracker_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.foundation.impl.PageRedirectServlet", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_foundation_impl_page_redirect_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.foundation.security.impl.DefaultAttachmentTypeBlacklistService", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_foundation_security_impl_default_attachment_type_blacklist_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.foundation.security.impl.SaferSlingPostValidatorImpl", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_foundation_security_impl_safer_sling_post_validator_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.mobile.core.impl.device.DeviceInfoTransformerFactory", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_mobile_core_impl_device_device_info_transformer_factory_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.mobile.core.impl.redirect.RedirectFilter", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_mobile_core_impl_redirect_redirect_filter_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentCopyActionFactory", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_msm_impl_actions_content_copy_action_factory_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentDeleteActionFactory", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_msm_impl_actions_content_delete_action_factory_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentUpdateActionFactory", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_msm_impl_actions_content_update_action_factory_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.OrderChildrenActionFactory", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_msm_impl_actions_order_children_action_factory_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.PageMoveActionFactory", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_msm_impl_actions_page_move_action_factory_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ReferencesUpdateActionFactory", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_msm_impl_actions_references_update_action_factory_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.VersionCopyActionFactory", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_msm_impl_actions_version_copy_action_factory_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.msm.impl.LiveRelationshipManagerImpl", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_msm_impl_live_relationship_manager_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.msm.impl.RolloutManagerImpl", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_msm_impl_rollout_manager_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.msm.impl.servlets.AuditLogServlet", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_msm_impl_servlets_audit_log_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.notification.email.impl.EmailChannel", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_notification_email_impl_email_channel_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.notification.impl.NotificationManagerImpl", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_notification_impl_notification_manager_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.scripting.impl.BVPManager", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_scripting_impl_bvp_manager_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.undo.UndoConfig", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_undo_undo_config_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.webservicesupport.impl.ReplicationEventListener", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_webservicesupport_impl_replication_event_listener_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.workflow.impl.WcmWorkflowServiceImpl", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_workflow_impl_wcm_workflow_service_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.wcm.workflow.impl.WorkflowPackageInfoProvider", Routes::bind(&ConfigmgrApi::com_day_cq_wcm_workflow_impl_workflow_package_info_provider_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.widget.impl.HtmlLibraryManagerImpl", Routes::bind(&ConfigmgrApi::com_day_cq_widget_impl_html_library_manager_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.widget.impl.WidgetExtensionProviderImpl", Routes::bind(&ConfigmgrApi::com_day_cq_widget_impl_widget_extension_provider_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.workflow.impl.email.EMailNotificationService", Routes::bind(&ConfigmgrApi::com_day_cq_workflow_impl_email_e_mail_notification_service_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.cq.workflow.impl.email.TaskEMailNotificationService", Routes::bind(&ConfigmgrApi::com_day_cq_workflow_impl_email_task_e_mail_notification_service_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.crx.security.token.impl.impl.TokenAuthenticationHandler", Routes::bind(&ConfigmgrApi::com_day_crx_security_token_impl_impl_token_authentication_handler_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.day.crx.security.token.impl.TokenCleanupTask", Routes::bind(&ConfigmgrApi::com_day_crx_security_token_impl_token_cleanup_task_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/Guide Localization Service", Routes::bind(&ConfigmgrApi::guide_localization_service_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/MessagingUserComponentFactory", Routes::bind(&ConfigmgrApi::messaging_user_component_factory_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.aries.jmx.framework.StateConfig", Routes::bind(&ConfigmgrApi::org_apache_aries_jmx_framework_state_config_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.felix.eventadmin.impl.EventAdmin", Routes::bind(&ConfigmgrApi::org_apache_felix_eventadmin_impl_event_admin_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.felix.http", Routes::bind(&ConfigmgrApi::org_apache_felix_http_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.felix.http.sslfilter.SslFilter", Routes::bind(&ConfigmgrApi::org_apache_felix_http_sslfilter_ssl_filter_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.felix.jaas.Configuration.factory", Routes::bind(&ConfigmgrApi::org_apache_felix_jaas_configuration_factory_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.felix.jaas.ConfigurationSpi", Routes::bind(&ConfigmgrApi::org_apache_felix_jaas_configuration_spi_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.felix.scr.ScrService", Routes::bind(&ConfigmgrApi::org_apache_felix_scr_scr_service_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.felix.systemready.impl.ComponentsCheck", Routes::bind(&ConfigmgrApi::org_apache_felix_systemready_impl_components_check_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.felix.systemready.impl.FrameworkStartCheck", Routes::bind(&ConfigmgrApi::org_apache_felix_systemready_impl_framework_start_check_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.felix.systemready.impl.ServicesCheck", Routes::bind(&ConfigmgrApi::org_apache_felix_systemready_impl_services_check_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemAliveServlet", Routes::bind(&ConfigmgrApi::org_apache_felix_systemready_impl_servlet_system_alive_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemReadyServlet", Routes::bind(&ConfigmgrApi::org_apache_felix_systemready_impl_servlet_system_ready_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.felix.systemready.SystemReadyMonitor", Routes::bind(&ConfigmgrApi::org_apache_felix_systemready_system_ready_monitor_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.felix.webconsole.internal.servlet.OsgiManager", Routes::bind(&ConfigmgrApi::org_apache_felix_webconsole_internal_servlet_osgi_manager_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.felix.webconsole.plugins.event.internal.PluginServlet", Routes::bind(&ConfigmgrApi::org_apache_felix_webconsole_plugins_event_internal_plugin_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.felix.webconsole.plugins.memoryusage.internal.MemoryUsageConfigurator", Routes::bind(&ConfigmgrApi::org_apache_felix_webconsole_plugins_memoryusage_internal_memory_usage_co_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.http.proxyconfigurator", Routes::bind(&ConfigmgrApi::org_apache_http_proxyconfigurator_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreTextProviderService", Routes::bind(&ConfigmgrApi::org_apache_jackrabbit_oak_plugins_blob_datastore_data_store_text_provider_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.FileDataStore", Routes::bind(&ConfigmgrApi::org_apache_jackrabbit_oak_plugins_blob_datastore_file_data_store_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreService", Routes::bind(&ConfigmgrApi::org_apache_jackrabbit_oak_plugins_document_document_node_store_service_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreServicePreset", Routes::bind(&ConfigmgrApi::org_apache_jackrabbit_oak_plugins_document_document_node_store_service_pre_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.secondary.SecondaryStoreCacheService", Routes::bind(&ConfigmgrApi::org_apache_jackrabbit_oak_plugins_document_secondary_secondary_store_cac_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.AsyncIndexerService", Routes::bind(&ConfigmgrApi::org_apache_jackrabbit_oak_plugins_index_async_indexer_service_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexProviderService", Routes::bind(&ConfigmgrApi::org_apache_jackrabbit_oak_plugins_index_lucene_lucene_index_provider_serv_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.EmbeddedSolrServerConfigurationProvider", Routes::bind(&ConfigmgrApi::org_apache_jackrabbit_oak_plugins_index_solr_osgi_embedded_solr_server_co_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.NodeStateSolrServersObserverService", Routes::bind(&ConfigmgrApi::org_apache_jackrabbit_oak_plugins_index_solr_osgi_node_state_solr_servers_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.OakSolrConfigurationProviderService", Routes::bind(&ConfigmgrApi::org_apache_jackrabbit_oak_plugins_index_solr_osgi_oak_solr_configuration_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.RemoteSolrServerConfigurationProvider", Routes::bind(&ConfigmgrApi::org_apache_jackrabbit_oak_plugins_index_solr_osgi_remote_solr_server_conf_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrQueryIndexProviderService", Routes::bind(&ConfigmgrApi::org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_query_index_provid_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrServerProviderService", Routes::bind(&ConfigmgrApi::org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_server_provider_se_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.metric.StatisticsProviderFactory", Routes::bind(&ConfigmgrApi::org_apache_jackrabbit_oak_plugins_metric_statistics_provider_factory_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.observation.ChangeCollectorProvider", Routes::bind(&ConfigmgrApi::org_apache_jackrabbit_oak_plugins_observation_change_collector_provider_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.jackrabbit.oak.query.QueryEngineSettingsService", Routes::bind(&ConfigmgrApi::org_apache_jackrabbit_oak_query_query_engine_settings_service_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.AuthenticationConfigurationImpl", Routes::bind(&ConfigmgrApi::org_apache_jackrabbit_oak_security_authentication_authentication_config_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.ldap.impl.LdapIdentityProvider", Routes::bind(&ConfigmgrApi::org_apache_jackrabbit_oak_security_authentication_ldap_impl_ldap_identi_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.token.TokenConfigurationImpl", Routes::bind(&ConfigmgrApi::org_apache_jackrabbit_oak_security_authentication_token_token_configura_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.jackrabbit.oak.security.authorization.AuthorizationConfigurationImpl", Routes::bind(&ConfigmgrApi::org_apache_jackrabbit_oak_security_authorization_authorization_configur_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.jackrabbit.oak.security.internal.SecurityProviderRegistration", Routes::bind(&ConfigmgrApi::org_apache_jackrabbit_oak_security_internal_security_provider_registrati_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.jackrabbit.oak.security.user.RandomAuthorizableNodeName", Routes::bind(&ConfigmgrApi::org_apache_jackrabbit_oak_security_user_random_authorizable_node_name_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.jackrabbit.oak.security.user.UserConfigurationImpl", Routes::bind(&ConfigmgrApi::org_apache_jackrabbit_oak_security_user_user_configuration_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.jackrabbit.oak.segment.azure.AzureSegmentStoreService", Routes::bind(&ConfigmgrApi::org_apache_jackrabbit_oak_segment_azure_azure_segment_store_service_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreFactory", Routes::bind(&ConfigmgrApi::org_apache_jackrabbit_oak_segment_segment_node_store_factory_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreMonitorService", Routes::bind(&ConfigmgrApi::org_apache_jackrabbit_oak_segment_segment_node_store_monitor_service_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreService", Routes::bind(&ConfigmgrApi::org_apache_jackrabbit_oak_segment_segment_node_store_service_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.jackrabbit.oak.segment.standby.store.StandbyStoreService", Routes::bind(&ConfigmgrApi::org_apache_jackrabbit_oak_segment_standby_store_standby_store_service_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.DefaultSyncHandler", Routes::bind(&ConfigmgrApi::org_apache_jackrabbit_oak_spi_security_authentication_external_impl_de_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.ExternalLoginModuleFactory", Routes::bind(&ConfigmgrApi::org_apache_jackrabbit_oak_spi_security_authentication_external_impl_ex_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.principal.ExternalPrincipalConfiguration", Routes::bind(&ConfigmgrApi::org_apache_jackrabbit_oak_spi_security_authentication_external_impl_pr_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugConfiguration", Routes::bind(&ConfigmgrApi::org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_confi_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugExcludeImpl", Routes::bind(&ConfigmgrApi::org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_exclu_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.user.action.DefaultAuthorizableActionProvider", Routes::bind(&ConfigmgrApi::org_apache_jackrabbit_oak_spi_security_user_action_default_authorizable_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.jackrabbit.vault.packaging.impl.PackagingImpl", Routes::bind(&ConfigmgrApi::org_apache_jackrabbit_vault_packaging_impl_packaging_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.jackrabbit.vault.packaging.registry.impl.FSPackageRegistry", Routes::bind(&ConfigmgrApi::org_apache_jackrabbit_vault_packaging_registry_impl_fs_package_registry_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.auth.core.impl.LogoutServlet", Routes::bind(&ConfigmgrApi::org_apache_sling_auth_core_impl_logout_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationBindingsValueProvider", Routes::bind(&ConfigmgrApi::org_apache_sling_caconfig_impl_configuration_bindings_value_provider_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationResolverImpl", Routes::bind(&ConfigmgrApi::org_apache_sling_caconfig_impl_configuration_resolver_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationInheritanceStrategy", Routes::bind(&ConfigmgrApi::org_apache_sling_caconfig_impl_def_default_configuration_inheritance_stra_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationPersistenceStrategy", Routes::bind(&ConfigmgrApi::org_apache_sling_caconfig_impl_def_default_configuration_persistence_stra_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.caconfig.impl.override.OsgiConfigurationOverrideProvider", Routes::bind(&ConfigmgrApi::org_apache_sling_caconfig_impl_override_osgi_configuration_override_provi_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.caconfig.impl.override.SystemPropertyConfigurationOverrideProvider", Routes::bind(&ConfigmgrApi::org_apache_sling_caconfig_impl_override_system_property_configuration_ove_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.caconfig.management.impl.ConfigurationManagementSettingsImpl", Routes::bind(&ConfigmgrApi::org_apache_sling_caconfig_management_impl_configuration_management_setti_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultConfigurationResourceResolvingStrategy", Routes::bind(&ConfigmgrApi::org_apache_sling_caconfig_resource_impl_def_default_configuration_resour_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultContextPathStrategy", Routes::bind(&ConfigmgrApi::org_apache_sling_caconfig_resource_impl_def_default_context_path_strategy_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.commons.html.internal.TagsoupHtmlParser", Routes::bind(&ConfigmgrApi::org_apache_sling_commons_html_internal_tagsoup_html_parser_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.commons.log.LogManager", Routes::bind(&ConfigmgrApi::org_apache_sling_commons_log_log_manager_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.config", Routes::bind(&ConfigmgrApi::org_apache_sling_commons_log_log_manager_factory_config_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.writer", Routes::bind(&ConfigmgrApi::org_apache_sling_commons_log_log_manager_factory_writer_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.commons.metrics.internal.LogReporter", Routes::bind(&ConfigmgrApi::org_apache_sling_commons_metrics_internal_log_reporter_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.commons.metrics.rrd4j.impl.CodahaleMetricsReporter", Routes::bind(&ConfigmgrApi::org_apache_sling_commons_metrics_rrd4j_impl_codahale_metrics_reporter_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.commons.mime.internal.MimeTypeServiceImpl", Routes::bind(&ConfigmgrApi::org_apache_sling_commons_mime_internal_mime_type_service_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.commons.scheduler.impl.QuartzScheduler", Routes::bind(&ConfigmgrApi::org_apache_sling_commons_scheduler_impl_quartz_scheduler_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.commons.scheduler.impl.SchedulerHealthCheck", Routes::bind(&ConfigmgrApi::org_apache_sling_commons_scheduler_impl_scheduler_health_check_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.commons.threads.impl.DefaultThreadPool.factory", Routes::bind(&ConfigmgrApi::org_apache_sling_commons_threads_impl_default_thread_pool_factory_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.datasource.DataSourceFactory", Routes::bind(&ConfigmgrApi::org_apache_sling_datasource_data_source_factory_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.datasource.JNDIDataSourceFactory", Routes::bind(&ConfigmgrApi::org_apache_sling_datasource_jndi_data_source_factory_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.discovery.oak.Config", Routes::bind(&ConfigmgrApi::org_apache_sling_discovery_oak_config_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.discovery.oak.SynchronizedClocksHealthCheck", Routes::bind(&ConfigmgrApi::org_apache_sling_discovery_oak_synchronized_clocks_health_check_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.distribution.agent.impl.ForwardDistributionAgentFactory", Routes::bind(&ConfigmgrApi::org_apache_sling_distribution_agent_impl_forward_distribution_agent_facto_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.distribution.agent.impl.PrivilegeDistributionRequestAuthorizationStrategyFactory", Routes::bind(&ConfigmgrApi::org_apache_sling_distribution_agent_impl_privilege_distribution_request_a_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.distribution.agent.impl.QueueDistributionAgentFactory", Routes::bind(&ConfigmgrApi::org_apache_sling_distribution_agent_impl_queue_distribution_agent_factory_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.distribution.agent.impl.ReverseDistributionAgentFactory", Routes::bind(&ConfigmgrApi::org_apache_sling_distribution_agent_impl_reverse_distribution_agent_facto_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.distribution.agent.impl.SimpleDistributionAgentFactory", Routes::bind(&ConfigmgrApi::org_apache_sling_distribution_agent_impl_simple_distribution_agent_factor_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.distribution.agent.impl.SyncDistributionAgentFactory", Routes::bind(&ConfigmgrApi::org_apache_sling_distribution_agent_impl_sync_distribution_agent_factory_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.distribution.monitor.DistributionQueueHealthCheck", Routes::bind(&ConfigmgrApi::org_apache_sling_distribution_monitor_distribution_queue_health_check_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.AgentDistributionPackageExporterFactory", Routes::bind(&ConfigmgrApi::org_apache_sling_distribution_packaging_impl_exporter_agent_distributio_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.LocalDistributionPackageExporterFactory", Routes::bind(&ConfigmgrApi::org_apache_sling_distribution_packaging_impl_exporter_local_distributio_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.RemoteDistributionPackageExporterFactory", Routes::bind(&ConfigmgrApi::org_apache_sling_distribution_packaging_impl_exporter_remote_distributi_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.LocalDistributionPackageImporterFactory", Routes::bind(&ConfigmgrApi::org_apache_sling_distribution_packaging_impl_importer_local_distributio_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RemoteDistributionPackageImporterFactory", Routes::bind(&ConfigmgrApi::org_apache_sling_distribution_packaging_impl_importer_remote_distributi_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RepositoryDistributionPackageImporterFactory", Routes::bind(&ConfigmgrApi::org_apache_sling_distribution_packaging_impl_importer_repository_distri_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionConfigurationResourceProviderFactory", Routes::bind(&ConfigmgrApi::org_apache_sling_distribution_resources_impl_distribution_configuration_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionServiceResourceProviderFactory", Routes::bind(&ConfigmgrApi::org_apache_sling_distribution_resources_impl_distribution_service_resour_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.distribution.serialization.impl.DistributionPackageBuilderFactory", Routes::bind(&ConfigmgrApi::org_apache_sling_distribution_serialization_impl_distribution_package_bu_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.distribution.serialization.impl.vlt.VaultDistributionPackageBuilderFactory", Routes::bind(&ConfigmgrApi::org_apache_sling_distribution_serialization_impl_vlt_vault_distribution_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.distribution.transport.impl.UserCredentialsDistributionTransportSecretProvider", Routes::bind(&ConfigmgrApi::org_apache_sling_distribution_transport_impl_user_credentials_distributi_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.DistributionEventDistributeDistributionTriggerFactory", Routes::bind(&ConfigmgrApi::org_apache_sling_distribution_trigger_impl_distribution_event_distribute_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.JcrEventDistributionTriggerFactory", Routes::bind(&ConfigmgrApi::org_apache_sling_distribution_trigger_impl_jcr_event_distribution_trigger_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.PersistedJcrEventDistributionTriggerFactory", Routes::bind(&ConfigmgrApi::org_apache_sling_distribution_trigger_impl_persisted_jcr_event_distributi_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.RemoteEventDistributionTriggerFactory", Routes::bind(&ConfigmgrApi::org_apache_sling_distribution_trigger_impl_remote_event_distribution_trig_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.ResourceEventDistributionTriggerFactory", Routes::bind(&ConfigmgrApi::org_apache_sling_distribution_trigger_impl_resource_event_distribution_tr_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.ScheduledDistributionTriggerFactory", Routes::bind(&ConfigmgrApi::org_apache_sling_distribution_trigger_impl_scheduled_distribution_trigge_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.engine.impl.auth.SlingAuthenticator", Routes::bind(&ConfigmgrApi::org_apache_sling_engine_impl_auth_sling_authenticator_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.engine.impl.debug.RequestProgressTrackerLogFilter", Routes::bind(&ConfigmgrApi::org_apache_sling_engine_impl_debug_request_progress_tracker_log_filter_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.engine.impl.log.RequestLogger", Routes::bind(&ConfigmgrApi::org_apache_sling_engine_impl_log_request_logger_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.engine.impl.log.RequestLoggerService", Routes::bind(&ConfigmgrApi::org_apache_sling_engine_impl_log_request_logger_service_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.engine.impl.SlingMainServlet", Routes::bind(&ConfigmgrApi::org_apache_sling_engine_impl_sling_main_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.engine.parameters", Routes::bind(&ConfigmgrApi::org_apache_sling_engine_parameters_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.event.impl.EventingThreadPool", Routes::bind(&ConfigmgrApi::org_apache_sling_event_impl_eventing_thread_pool_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.event.impl.jobs.DefaultJobManager", Routes::bind(&ConfigmgrApi::org_apache_sling_event_impl_jobs_default_job_manager_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.event.impl.jobs.jcr.PersistenceHandler", Routes::bind(&ConfigmgrApi::org_apache_sling_event_impl_jobs_jcr_persistence_handler_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.event.impl.jobs.JobConsumerManager", Routes::bind(&ConfigmgrApi::org_apache_sling_event_impl_jobs_job_consumer_manager_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.event.jobs.QueueConfiguration", Routes::bind(&ConfigmgrApi::org_apache_sling_event_jobs_queue_configuration_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.extensions.webconsolesecurityprovider.internal.SlingWebConsoleSecurityProvider", Routes::bind(&ConfigmgrApi::org_apache_sling_extensions_webconsolesecurityprovider_internal_sling_w_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.featureflags.Feature", Routes::bind(&ConfigmgrApi::org_apache_sling_featureflags_feature_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.featureflags.impl.ConfiguredFeature", Routes::bind(&ConfigmgrApi::org_apache_sling_featureflags_impl_configured_feature_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.hapi.impl.HApiUtilImpl", Routes::bind(&ConfigmgrApi::org_apache_sling_hapi_impl_h_api_util_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.hc.core.impl.CompositeHealthCheck", Routes::bind(&ConfigmgrApi::org_apache_sling_hc_core_impl_composite_health_check_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.hc.core.impl.executor.HealthCheckExecutorImpl", Routes::bind(&ConfigmgrApi::org_apache_sling_hc_core_impl_executor_health_check_executor_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.hc.core.impl.JmxAttributeHealthCheck", Routes::bind(&ConfigmgrApi::org_apache_sling_hc_core_impl_jmx_attribute_health_check_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.hc.core.impl.ScriptableHealthCheck", Routes::bind(&ConfigmgrApi::org_apache_sling_hc_core_impl_scriptable_health_check_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.hc.core.impl.servlet.HealthCheckExecutorServlet", Routes::bind(&ConfigmgrApi::org_apache_sling_hc_core_impl_servlet_health_check_executor_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.hc.core.impl.servlet.ResultTxtVerboseSerializer", Routes::bind(&ConfigmgrApi::org_apache_sling_hc_core_impl_servlet_result_txt_verbose_serializer_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.i18n.impl.I18NFilter", Routes::bind(&ConfigmgrApi::org_apache_sling_i18n_impl_i18_n_filter_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.i18n.impl.JcrResourceBundleProvider", Routes::bind(&ConfigmgrApi::org_apache_sling_i18n_impl_jcr_resource_bundle_provider_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.installer.provider.jcr.impl.JcrInstaller", Routes::bind(&ConfigmgrApi::org_apache_sling_installer_provider_jcr_impl_jcr_installer_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist", Routes::bind(&ConfigmgrApi::org_apache_sling_jcr_base_internal_login_admin_whitelist_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist.fragment", Routes::bind(&ConfigmgrApi::org_apache_sling_jcr_base_internal_login_admin_whitelist_fragment_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet", Routes::bind(&ConfigmgrApi::org_apache_sling_jcr_davex_impl_servlets_sling_dav_ex_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.JndiRegistrationSupport", Routes::bind(&ConfigmgrApi::org_apache_sling_jcr_jackrabbit_server_jndi_registration_support_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.RmiRegistrationSupport", Routes::bind(&ConfigmgrApi::org_apache_sling_jcr_jackrabbit_server_rmi_registration_support_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.jcr.repoinit.impl.RepositoryInitializer", Routes::bind(&ConfigmgrApi::org_apache_sling_jcr_repoinit_impl_repository_initializer_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.jcr.repoinit.RepositoryInitializer", Routes::bind(&ConfigmgrApi::org_apache_sling_jcr_repoinit_repository_initializer_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrResourceResolverFactoryImpl", Routes::bind(&ConfigmgrApi::org_apache_sling_jcr_resource_internal_jcr_resource_resolver_factory_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrSystemUserValidator", Routes::bind(&ConfigmgrApi::org_apache_sling_jcr_resource_internal_jcr_system_user_validator_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.jcr.resourcesecurity.impl.ResourceAccessGateFactory", Routes::bind(&ConfigmgrApi::org_apache_sling_jcr_resourcesecurity_impl_resource_access_gate_factory_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DefaultHandlerService", Routes::bind(&ConfigmgrApi::org_apache_sling_jcr_webdav_impl_handler_default_handler_service_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DirListingExportHandlerService", Routes::bind(&ConfigmgrApi::org_apache_sling_jcr_webdav_impl_handler_dir_listing_export_handler_servic_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.jcr.webdav.impl.servlets.SimpleWebDavServlet", Routes::bind(&ConfigmgrApi::org_apache_sling_jcr_webdav_impl_servlets_simple_web_dav_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.jmx.provider.impl.JMXResourceProvider", Routes::bind(&ConfigmgrApi::org_apache_sling_jmx_provider_impl_jmx_resource_provider_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.models.impl.ModelAdapterFactory", Routes::bind(&ConfigmgrApi::org_apache_sling_models_impl_model_adapter_factory_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.models.jacksonexporter.impl.ResourceModuleProvider", Routes::bind(&ConfigmgrApi::org_apache_sling_models_jacksonexporter_impl_resource_module_provider_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.resource.inventory.impl.ResourceInventoryPrinterFactory", Routes::bind(&ConfigmgrApi::org_apache_sling_resource_inventory_impl_resource_inventory_printer_facto_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.resourcemerger.impl.MergedResourceProviderFactory", Routes::bind(&ConfigmgrApi::org_apache_sling_resourcemerger_impl_merged_resource_provider_factory_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.resourcemerger.picker.overriding", Routes::bind(&ConfigmgrApi::org_apache_sling_resourcemerger_picker_overriding_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptCacheImpl", Routes::bind(&ConfigmgrApi::org_apache_sling_scripting_core_impl_script_cache_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptingResourceResolverProviderImpl", Routes::bind(&ConfigmgrApi::org_apache_sling_scripting_core_impl_scripting_resource_resolver_provider_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.scripting.java.impl.JavaScriptEngineFactory", Routes::bind(&ConfigmgrApi::org_apache_sling_scripting_java_impl_java_script_engine_factory_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.scripting.javascript.internal.RhinoJavaScriptEngineFactory", Routes::bind(&ConfigmgrApi::org_apache_sling_scripting_javascript_internal_rhino_java_script_engine_fa_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.scripting.jsp.JspScriptEngineFactory", Routes::bind(&ConfigmgrApi::org_apache_sling_scripting_jsp_jsp_script_engine_factory_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.scripting.sightly.js.impl.jsapi.SlyBindingsValuesProvider", Routes::bind(&ConfigmgrApi::org_apache_sling_scripting_sightly_js_impl_jsapi_sly_bindings_values_prov_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.security.impl.ContentDispositionFilter", Routes::bind(&ConfigmgrApi::org_apache_sling_security_impl_content_disposition_filter_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.security.impl.ReferrerFilter", Routes::bind(&ConfigmgrApi::org_apache_sling_security_impl_referrer_filter_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl", Routes::bind(&ConfigmgrApi::org_apache_sling_serviceusermapping_impl_service_user_mapper_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl.amended", Routes::bind(&ConfigmgrApi::org_apache_sling_serviceusermapping_impl_service_user_mapper_impl_amended_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.servlets.get.DefaultGetServlet", Routes::bind(&ConfigmgrApi::org_apache_sling_servlets_get_default_get_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.servlets.get.impl.version.VersionInfoServlet", Routes::bind(&ConfigmgrApi::org_apache_sling_servlets_get_impl_version_version_info_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.servlets.post.impl.helper.ChunkCleanUpTask", Routes::bind(&ConfigmgrApi::org_apache_sling_servlets_post_impl_helper_chunk_clean_up_task_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.servlets.post.impl.SlingPostServlet", Routes::bind(&ConfigmgrApi::org_apache_sling_servlets_post_impl_sling_post_servlet_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.servlets.resolver.SlingServletResolver", Routes::bind(&ConfigmgrApi::org_apache_sling_servlets_resolver_sling_servlet_resolver_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.settings.impl.SlingSettingsServiceImpl", Routes::bind(&ConfigmgrApi::org_apache_sling_settings_impl_sling_settings_service_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.startupfilter.impl.StartupFilterImpl", Routes::bind(&ConfigmgrApi::org_apache_sling_startupfilter_impl_startup_filter_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.tenant.internal.TenantProviderImpl", Routes::bind(&ConfigmgrApi::org_apache_sling_tenant_internal_tenant_provider_impl_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.tracer.internal.LogTracer", Routes::bind(&ConfigmgrApi::org_apache_sling_tracer_internal_log_tracer_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/org.apache.sling.xss.impl.XSSFilterImpl", Routes::bind(&ConfigmgrApi::org_apache_sling_xss_impl_xss_filter_impl_handler, this));

    // Default handler, called when a route is not found
    router.addCustomHandler(Routes::bind(&ConfigmgrApi::configmgr_api_default_handler, this));
}

void ConfigmgrApi::adaptive_form_and_interactive_communication_web_channel_configuration_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto showPlaceholder = request.query().get("showPlaceholder");
    auto maximumCacheEntries = request.query().get("maximumCacheEntries");
    auto afPeriodscriptingPeriodcompatversion = request.query().get("af.scripting.compatversion");
    auto makeFileNameUnique = request.query().get("makeFileNameUnique");
    auto generatingCompliantData = request.query().get("generatingCompliantData");
    
    try {
      this->adaptive_form_and_interactive_communication_web_channel_configuration(post, apply, delete, action, Dollarlocation, propertylist, showPlaceholder, maximumCacheEntries, afPeriodscriptingPeriodcompatversion, makeFileNameUnique, generatingCompliantData, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::adaptive_form_and_interactive_communication_web_channel_theme_configur_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto fontList = request.query().get("fontList");
    
    try {
      this->adaptive_form_and_interactive_communication_web_channel_theme_configur(post, apply, delete, action, Dollarlocation, propertylist, fontList, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::analytics_component_query_cache_service_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPeriodanalyticsPeriodcomponentPeriodqueryPeriodcachePeriodsize = request.query().get("cq.analytics.component.query.cache.size");
    
    try {
      this->analytics_component_query_cache_service(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodanalyticsPeriodcomponentPeriodqueryPeriodcachePeriodsize, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::apache_sling_health_check_result_html_serializer_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto styleString = request.query().get("styleString");
    
    try {
      this->apache_sling_health_check_result_html_serializer(post, apply, delete, action, Dollarlocation, propertylist, styleString, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_aem_formsndocuments_config_aem_forms_manager_configuration_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto formsManagerConfigPeriodincludeOOTBTemplates = request.query().get("formsManagerConfig.includeOOTBTemplates");
    auto formsManagerConfigPeriodincludeDeprecatedTemplates = request.query().get("formsManagerConfig.includeDeprecatedTemplates");
    
    try {
      this->com_adobe_aem_formsndocuments_config_aem_forms_manager_configuration(post, apply, delete, action, Dollarlocation, propertylist, formsManagerConfigPeriodincludeOOTBTemplates, formsManagerConfigPeriodincludeDeprecatedTemplates, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_aem_transaction_core_impl_transaction_recorder_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto isTransactionRecordingEnabled = request.query().get("isTransactionRecordingEnabled");
    
    try {
      this->com_adobe_aem_transaction_core_impl_transaction_recorder(post, apply, delete, action, Dollarlocation, propertylist, isTransactionRecordingEnabled, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_aem_upgrade_prechecks_hc_impl_deprecate_indexes_hc_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto hcPeriodname = request.query().get("hc.name");
    auto hcPeriodtags = request.query().get("hc.tags");
    auto hcPeriodmbeanPeriodname = request.query().get("hc.mbean.name");
    
    try {
      this->com_adobe_aem_upgrade_prechecks_hc_impl_deprecate_indexes_hc(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodname, hcPeriodtags, hcPeriodmbeanPeriodname, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_aem_upgrade_prechecks_hc_impl_replication_agents_disabled_hc_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto hcPeriodname = request.query().get("hc.name");
    auto hcPeriodtags = request.query().get("hc.tags");
    auto hcPeriodmbeanPeriodname = request.query().get("hc.mbean.name");
    
    try {
      this->com_adobe_aem_upgrade_prechecks_hc_impl_replication_agents_disabled_hc(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodname, hcPeriodtags, hcPeriodmbeanPeriodname, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_aem_upgrade_prechecks_mbean_impl_pre_upgrade_tasks_m_bean_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto preUpgradePeriodmaintenancePeriodtasks = request.query().get("pre-upgrade.maintenance.tasks");
    auto preUpgradePeriodhcPeriodtags = request.query().get("pre-upgrade.hc.tags");
    
    try {
      this->com_adobe_aem_upgrade_prechecks_mbean_impl_pre_upgrade_tasks_m_bean_impl(post, apply, delete, action, Dollarlocation, propertylist, preUpgradePeriodmaintenancePeriodtasks, preUpgradePeriodhcPeriodtags, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_aem_upgrade_prechecks_tasks_impl_consistency_check_task_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto rootPeriodpath = request.query().get("root.path");
    auto fixPeriodinconsistencies = request.query().get("fix.inconsistencies");
    
    try {
      this->com_adobe_aem_upgrade_prechecks_tasks_impl_consistency_check_task_impl(post, apply, delete, action, Dollarlocation, propertylist, rootPeriodpath, fixPeriodinconsistencies, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_account_api_account_management_service_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPeriodaccountmanagerPeriodtokenPeriodvalidityPeriodperiod = request.query().get("cq.accountmanager.token.validity.period");
    auto cqPeriodaccountmanagerPeriodconfigPeriodrequestnewaccountPeriodmail = request.query().get("cq.accountmanager.config.requestnewaccount.mail");
    auto cqPeriodaccountmanagerPeriodconfigPeriodrequestnewpwdPeriodmail = request.query().get("cq.accountmanager.config.requestnewpwd.mail");
    
    try {
      this->com_adobe_cq_account_api_account_management_service(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodaccountmanagerPeriodtokenPeriodvalidityPeriodperiod, cqPeriodaccountmanagerPeriodconfigPeriodrequestnewaccountPeriodmail, cqPeriodaccountmanagerPeriodconfigPeriodrequestnewpwdPeriodmail, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_account_impl_account_management_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPeriodaccountmanagerPeriodconfigPeriodinformnewaccountPeriodmail = request.query().get("cq.accountmanager.config.informnewaccount.mail");
    auto cqPeriodaccountmanagerPeriodconfigPeriodinformnewpwdPeriodmail = request.query().get("cq.accountmanager.config.informnewpwd.mail");
    
    try {
      this->com_adobe_cq_account_impl_account_management_servlet(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodaccountmanagerPeriodconfigPeriodinformnewaccountPeriodmail, cqPeriodaccountmanagerPeriodconfigPeriodinformnewpwdPeriodmail, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_address_impl_location_location_list_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPeriodaddressPeriodlocationPerioddefaultPeriodmaxResults = request.query().get("cq.address.location.default.maxResults");
    
    try {
      this->com_adobe_cq_address_impl_location_location_list_servlet(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodaddressPeriodlocationPerioddefaultPeriodmaxResults, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_audit_purge_dam_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto auditlogPeriodrulePeriodname = request.query().get("auditlog.rule.name");
    auto auditlogPeriodrulePeriodcontentpath = request.query().get("auditlog.rule.contentpath");
    auto auditlogPeriodrulePeriodminimumage = request.query().get("auditlog.rule.minimumage");
    auto auditlogPeriodrulePeriodtypes = request.query().get("auditlog.rule.types");
    
    try {
      this->com_adobe_cq_audit_purge_dam(post, apply, delete, action, Dollarlocation, propertylist, auditlogPeriodrulePeriodname, auditlogPeriodrulePeriodcontentpath, auditlogPeriodrulePeriodminimumage, auditlogPeriodrulePeriodtypes, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_audit_purge_pages_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto auditlogPeriodrulePeriodname = request.query().get("auditlog.rule.name");
    auto auditlogPeriodrulePeriodcontentpath = request.query().get("auditlog.rule.contentpath");
    auto auditlogPeriodrulePeriodminimumage = request.query().get("auditlog.rule.minimumage");
    auto auditlogPeriodrulePeriodtypes = request.query().get("auditlog.rule.types");
    
    try {
      this->com_adobe_cq_audit_purge_pages(post, apply, delete, action, Dollarlocation, propertylist, auditlogPeriodrulePeriodname, auditlogPeriodrulePeriodcontentpath, auditlogPeriodrulePeriodminimumage, auditlogPeriodrulePeriodtypes, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_audit_purge_replication_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto auditlogPeriodrulePeriodname = request.query().get("auditlog.rule.name");
    auto auditlogPeriodrulePeriodcontentpath = request.query().get("auditlog.rule.contentpath");
    auto auditlogPeriodrulePeriodminimumage = request.query().get("auditlog.rule.minimumage");
    auto auditlogPeriodrulePeriodtypes = request.query().get("auditlog.rule.types");
    
    try {
      this->com_adobe_cq_audit_purge_replication(post, apply, delete, action, Dollarlocation, propertylist, auditlogPeriodrulePeriodname, auditlogPeriodrulePeriodcontentpath, auditlogPeriodrulePeriodminimumage, auditlogPeriodrulePeriodtypes, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_cdn_rewriter_impl_aws_cloud_front_rewriter_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto servicePeriodranking = request.query().get("service.ranking");
    auto keypairPeriodid = request.query().get("keypair.id");
    auto keypairPeriodalias = request.query().get("keypair.alias");
    auto cdnrewriterPeriodattributes = request.query().get("cdnrewriter.attributes");
    auto cdnPeriodrewriterPerioddistributionPerioddomain = request.query().get("cdn.rewriter.distribution.domain");
    
    try {
      this->com_adobe_cq_cdn_rewriter_impl_aws_cloud_front_rewriter(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, keypairPeriodid, keypairPeriodalias, cdnrewriterPeriodattributes, cdnPeriodrewriterPerioddistributionPerioddomain, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_cdn_rewriter_impl_cdn_config_service_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cdnPeriodconfigPerioddistributionPerioddomain = request.query().get("cdn.config.distribution.domain");
    auto cdnPeriodconfigPeriodenablePeriodrewriting = request.query().get("cdn.config.enable.rewriting");
    auto cdnPeriodconfigPeriodpathPeriodprefixes = request.query().get("cdn.config.path.prefixes");
    auto cdnPeriodconfigPeriodcdnttl = request.query().get("cdn.config.cdnttl");
    auto cdnPeriodconfigPeriodapplicationPeriodprotocol = request.query().get("cdn.config.application.protocol");
    
    try {
      this->com_adobe_cq_cdn_rewriter_impl_cdn_config_service_impl(post, apply, delete, action, Dollarlocation, propertylist, cdnPeriodconfigPerioddistributionPerioddomain, cdnPeriodconfigPeriodenablePeriodrewriting, cdnPeriodconfigPeriodpathPeriodprefixes, cdnPeriodconfigPeriodcdnttl, cdnPeriodconfigPeriodapplicationPeriodprotocol, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_cdn_rewriter_impl_cdn_rewriter_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto servicePeriodranking = request.query().get("service.ranking");
    auto cdnrewriterPeriodattributes = request.query().get("cdnrewriter.attributes");
    auto cdnPeriodrewriterPerioddistributionPerioddomain = request.query().get("cdn.rewriter.distribution.domain");
    
    try {
      this->com_adobe_cq_cdn_rewriter_impl_cdn_rewriter(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, cdnrewriterPeriodattributes, cdnPeriodrewriterPerioddistributionPerioddomain, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_cloudconfig_core_impl_configuration_replication_event_handle_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto flushPeriodagents = request.query().get("flush.agents");
    
    try {
      this->com_adobe_cq_cloudconfig_core_impl_configuration_replication_event_handle(post, apply, delete, action, Dollarlocation, propertylist, flushPeriodagents, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_commerce_impl_asset_dynamic_image_handler_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPeriodcommercePeriodassetPeriodhandlerPeriodactive = request.query().get("cq.commerce.asset.handler.active");
    auto cqPeriodcommercePeriodassetPeriodhandlerPeriodname = request.query().get("cq.commerce.asset.handler.name");
    
    try {
      this->com_adobe_cq_commerce_impl_asset_dynamic_image_handler(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodcommercePeriodassetPeriodhandlerPeriodactive, cqPeriodcommercePeriodassetPeriodhandlerPeriodname, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_commerce_impl_asset_product_asset_handler_provider_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPeriodcommercePeriodassetPeriodhandlerPeriodfallback = request.query().get("cq.commerce.asset.handler.fallback");
    
    try {
      this->com_adobe_cq_commerce_impl_asset_product_asset_handler_provider_impl(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodcommercePeriodassetPeriodhandlerPeriodfallback, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_commerce_impl_asset_static_image_handler_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPeriodcommercePeriodassetPeriodhandlerPeriodactive = request.query().get("cq.commerce.asset.handler.active");
    auto cqPeriodcommercePeriodassetPeriodhandlerPeriodname = request.query().get("cq.commerce.asset.handler.name");
    
    try {
      this->com_adobe_cq_commerce_impl_asset_static_image_handler(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodcommercePeriodassetPeriodhandlerPeriodactive, cqPeriodcommercePeriodassetPeriodhandlerPeriodname, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_commerce_impl_asset_video_handler_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPeriodcommercePeriodassetPeriodhandlerPeriodactive = request.query().get("cq.commerce.asset.handler.active");
    auto cqPeriodcommercePeriodassetPeriodhandlerPeriodname = request.query().get("cq.commerce.asset.handler.name");
    
    try {
      this->com_adobe_cq_commerce_impl_asset_video_handler(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodcommercePeriodassetPeriodhandlerPeriodactive, cqPeriodcommercePeriodassetPeriodhandlerPeriodname, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_commerce_impl_promotion_promotion_manager_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPeriodcommercePeriodpromotionPeriodroot = request.query().get("cq.commerce.promotion.root");
    
    try {
      this->com_adobe_cq_commerce_impl_promotion_promotion_manager_impl(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodcommercePeriodpromotionPeriodroot, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_commerce_pim_impl_cataloggenerator_catalog_generator_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPeriodcommercePeriodcataloggeneratorPeriodbucketsize = request.query().get("cq.commerce.cataloggenerator.bucketsize");
    auto cqPeriodcommercePeriodcataloggeneratorPeriodbucketname = request.query().get("cq.commerce.cataloggenerator.bucketname");
    auto cqPeriodcommercePeriodcataloggeneratorPeriodexcludedtemplateproperties = request.query().get("cq.commerce.cataloggenerator.excludedtemplateproperties");
    
    try {
      this->com_adobe_cq_commerce_pim_impl_cataloggenerator_catalog_generator_impl(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodcommercePeriodcataloggeneratorPeriodbucketsize, cqPeriodcommercePeriodcataloggeneratorPeriodbucketname, cqPeriodcommercePeriodcataloggeneratorPeriodexcludedtemplateproperties, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_commerce_pim_impl_page_event_listener_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPeriodcommercePeriodpageeventlistenerPeriodenabled = request.query().get("cq.commerce.pageeventlistener.enabled");
    
    try {
      this->com_adobe_cq_commerce_pim_impl_page_event_listener(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodcommercePeriodpageeventlistenerPeriodenabled, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_commerce_pim_impl_productfeed_product_feed_service_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto feed_generator_algorithm = request.query().get("Feed generator algorithm");
    
    try {
      this->com_adobe_cq_commerce_pim_impl_productfeed_product_feed_service_impl(post, apply, delete, action, Dollarlocation, propertylist, feed_generator_algorithm, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_contentinsight_impl_reporting_services_settings_provider_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto reportingservicesPeriodurl = request.query().get("reportingservices.url");
    
    try {
      this->com_adobe_cq_contentinsight_impl_reporting_services_settings_provider(post, apply, delete, action, Dollarlocation, propertylist, reportingservicesPeriodurl, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_contentinsight_impl_servlets_bright_edge_proxy_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto brightedgePeriodurl = request.query().get("brightedge.url");
    
    try {
      this->com_adobe_cq_contentinsight_impl_servlets_bright_edge_proxy_servlet(post, apply, delete, action, Dollarlocation, propertylist, brightedgePeriodurl, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_contentinsight_impl_servlets_reporting_services_proxy_servle_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto reportingservicesPeriodproxyPeriodwhitelist = request.query().get("reportingservices.proxy.whitelist");
    
    try {
      this->com_adobe_cq_contentinsight_impl_servlets_reporting_services_proxy_servle(post, apply, delete, action, Dollarlocation, propertylist, reportingservicesPeriodproxyPeriodwhitelist, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_dam_cfm_impl_component_component_config_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto damPeriodcfmPeriodcomponentPeriodresourceType = request.query().get("dam.cfm.component.resourceType");
    auto damPeriodcfmPeriodcomponentPeriodfileReferenceProp = request.query().get("dam.cfm.component.fileReferenceProp");
    auto damPeriodcfmPeriodcomponentPeriodelementsProp = request.query().get("dam.cfm.component.elementsProp");
    auto damPeriodcfmPeriodcomponentPeriodvariationProp = request.query().get("dam.cfm.component.variationProp");
    
    try {
      this->com_adobe_cq_dam_cfm_impl_component_component_config_impl(post, apply, delete, action, Dollarlocation, propertylist, damPeriodcfmPeriodcomponentPeriodresourceType, damPeriodcfmPeriodcomponentPeriodfileReferenceProp, damPeriodcfmPeriodcomponentPeriodelementsProp, damPeriodcfmPeriodcomponentPeriodvariationProp, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_dam_cfm_impl_conf_feature_config_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto damPeriodcfmPeriodresourceTypes = request.query().get("dam.cfm.resourceTypes");
    auto damPeriodcfmPeriodreferenceProperties = request.query().get("dam.cfm.referenceProperties");
    
    try {
      this->com_adobe_cq_dam_cfm_impl_conf_feature_config_impl(post, apply, delete, action, Dollarlocation, propertylist, damPeriodcfmPeriodresourceTypes, damPeriodcfmPeriodreferenceProperties, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_dam_cfm_impl_content_rewriter_asset_processor_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto pipelinePeriodtype = request.query().get("pipeline.type");
    
    try {
      this->com_adobe_cq_dam_cfm_impl_content_rewriter_asset_processor(post, apply, delete, action, Dollarlocation, propertylist, pipelinePeriodtype, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_dam_cfm_impl_content_rewriter_par_range_filter_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto pipelinePeriodtype = request.query().get("pipeline.type");
    
    try {
      this->com_adobe_cq_dam_cfm_impl_content_rewriter_par_range_filter(post, apply, delete, action, Dollarlocation, propertylist, pipelinePeriodtype, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_dam_cfm_impl_content_rewriter_payload_filter_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto pipelinePeriodtype = request.query().get("pipeline.type");
    
    try {
      this->com_adobe_cq_dam_cfm_impl_content_rewriter_payload_filter(post, apply, delete, action, Dollarlocation, propertylist, pipelinePeriodtype, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_dam_dm_process_image_p_tiff_manager_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto maxMemory = request.query().get("maxMemory");
    
    try {
      this->com_adobe_cq_dam_dm_process_image_p_tiff_manager_impl(post, apply, delete, action, Dollarlocation, propertylist, maxMemory, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_dam_ips_impl_replication_trigger_replicate_on_modify_worker_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto dmreplicateonmodifyPeriodenabled = request.query().get("dmreplicateonmodify.enabled");
    auto dmreplicateonmodifyPeriodforcesyncdeletes = request.query().get("dmreplicateonmodify.forcesyncdeletes");
    
    try {
      this->com_adobe_cq_dam_ips_impl_replication_trigger_replicate_on_modify_worker(post, apply, delete, action, Dollarlocation, propertylist, dmreplicateonmodifyPeriodenabled, dmreplicateonmodifyPeriodforcesyncdeletes, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_dam_mac_sync_helper_impl_mac_sync_client_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto comPeriodadobePerioddamPeriodmacPeriodsyncPeriodclientPeriodsoPeriodtimeout = request.query().get("com.adobe.dam.mac.sync.client.so.timeout");
    
    try {
      this->com_adobe_cq_dam_mac_sync_helper_impl_mac_sync_client_impl(post, apply, delete, action, Dollarlocation, propertylist, comPeriodadobePerioddamPeriodmacPeriodsyncPeriodclientPeriodsoPeriodtimeout, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_dam_mac_sync_impl_dam_sync_service_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodregisteredPaths = request.query().get("com.adobe.cq.dam.mac.sync.damsyncservice.registered_paths");
    auto comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodsyncPeriodrenditions = request.query().get("com.adobe.cq.dam.mac.sync.damsyncservice.sync.renditions");
    auto comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodreplicatePeriodthreadPeriodwaitPeriodms = request.query().get("com.adobe.cq.dam.mac.sync.damsyncservice.replicate.thread.wait.ms");
    auto comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodplatform = request.query().get("com.adobe.cq.dam.mac.sync.damsyncservice.platform");
    
    try {
      this->com_adobe_cq_dam_mac_sync_impl_dam_sync_service_impl(post, apply, delete, action, Dollarlocation, propertylist, comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodregisteredPaths, comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodsyncPeriodrenditions, comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodreplicatePeriodthreadPeriodwaitPeriodms, comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodplatform, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_dam_processor_nui_impl_nui_asset_processor_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto nuiEnabled = request.query().get("nuiEnabled");
    auto nuiServiceUrl = request.query().get("nuiServiceUrl");
    auto nuiApiKey = request.query().get("nuiApiKey");
    
    try {
      this->com_adobe_cq_dam_processor_nui_impl_nui_asset_processor(post, apply, delete, action, Dollarlocation, propertylist, nuiEnabled, nuiServiceUrl, nuiApiKey, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_dam_s7imaging_impl_is_image_server_component_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto tcpPort = request.query().get("TcpPort");
    auto allowRemoteAccess = request.query().get("AllowRemoteAccess");
    auto maxRenderRgnPixels = request.query().get("MaxRenderRgnPixels");
    auto maxMessageSize = request.query().get("MaxMessageSize");
    auto randomAccessUrlTimeout = request.query().get("RandomAccessUrlTimeout");
    auto workerThreads = request.query().get("WorkerThreads");
    
    try {
      this->com_adobe_cq_dam_s7imaging_impl_is_image_server_component(post, apply, delete, action, Dollarlocation, propertylist, tcpPort, allowRemoteAccess, maxRenderRgnPixels, maxMessageSize, randomAccessUrlTimeout, workerThreads, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_dam_s7imaging_impl_ps_platform_server_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cachePeriodenable = request.query().get("cache.enable");
    auto cachePeriodrootPaths = request.query().get("cache.rootPaths");
    auto cachePeriodmaxSize = request.query().get("cache.maxSize");
    auto cachePeriodmaxEntries = request.query().get("cache.maxEntries");
    
    try {
      this->com_adobe_cq_dam_s7imaging_impl_ps_platform_server_servlet(post, apply, delete, action, Dollarlocation, propertylist, cachePeriodenable, cachePeriodrootPaths, cachePeriodmaxSize, cachePeriodmaxEntries, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_dam_webdav_impl_io_asset_io_handler_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto servicePeriodranking = request.query().get("service.ranking");
    auto pathPrefix = request.query().get("pathPrefix");
    auto createVersion = request.query().get("createVersion");
    
    try {
      this->com_adobe_cq_dam_webdav_impl_io_asset_io_handler(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, pathPrefix, createVersion, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_dam_webdav_impl_io_dam_webdav_version_linking_job_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodenable = request.query().get("cq.dam.webdav.version.linking.enable");
    auto cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodschedulerPeriodperiod = request.query().get("cq.dam.webdav.version.linking.scheduler.period");
    auto cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodstagingPeriodtimeout = request.query().get("cq.dam.webdav.version.linking.staging.timeout");
    
    try {
      this->com_adobe_cq_dam_webdav_impl_io_dam_webdav_version_linking_job(post, apply, delete, action, Dollarlocation, propertylist, cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodenable, cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodschedulerPeriodperiod, cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodstagingPeriodtimeout, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_dam_webdav_impl_io_special_files_handler_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto comPerioddayPeriodcqPerioddamPeriodcorePeriodimplPeriodioPeriodSpecialFilesHandlerPeriodfilepatters = request.query().get("com.day.cq.dam.core.impl.io.SpecialFilesHandler.filepatters");
    
    try {
      this->com_adobe_cq_dam_webdav_impl_io_special_files_handler(post, apply, delete, action, Dollarlocation, propertylist, comPerioddayPeriodcqPerioddamPeriodcorePeriodimplPeriodioPeriodSpecialFilesHandlerPeriodfilepatters, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_deserfw_impl_deserialization_firewall_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto firewallPerioddeserializationPeriodwhitelist = request.query().get("firewall.deserialization.whitelist");
    auto firewallPerioddeserializationPeriodblacklist = request.query().get("firewall.deserialization.blacklist");
    auto firewallPerioddeserializationPerioddiagnostics = request.query().get("firewall.deserialization.diagnostics");
    
    try {
      this->com_adobe_cq_deserfw_impl_deserialization_firewall_impl(post, apply, delete, action, Dollarlocation, propertylist, firewallPerioddeserializationPeriodwhitelist, firewallPerioddeserializationPeriodblacklist, firewallPerioddeserializationPerioddiagnostics, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_dtm_impl_service_dtm_web_service_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto connectionPeriodtimeout = request.query().get("connection.timeout");
    auto socketPeriodtimeout = request.query().get("socket.timeout");
    
    try {
      this->com_adobe_cq_dtm_impl_service_dtm_web_service_impl(post, apply, delete, action, Dollarlocation, propertylist, connectionPeriodtimeout, socketPeriodtimeout, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_dtm_impl_servlets_dtm_deploy_hook_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto dtmPeriodstagingPeriodipPeriodwhitelist = request.query().get("dtm.staging.ip.whitelist");
    auto dtmPeriodproductionPeriodipPeriodwhitelist = request.query().get("dtm.production.ip.whitelist");
    
    try {
      this->com_adobe_cq_dtm_impl_servlets_dtm_deploy_hook_servlet(post, apply, delete, action, Dollarlocation, propertylist, dtmPeriodstagingPeriodipPeriodwhitelist, dtmPeriodproductionPeriodipPeriodwhitelist, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_dtm_reactor_impl_service_web_service_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto endpointUri = request.query().get("endpointUri");
    auto connectionTimeout = request.query().get("connectionTimeout");
    auto socketTimeout = request.query().get("socketTimeout");
    
    try {
      this->com_adobe_cq_dtm_reactor_impl_service_web_service_impl(post, apply, delete, action, Dollarlocation, propertylist, endpointUri, connectionTimeout, socketTimeout, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_experiencelog_impl_experience_log_config_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto enabled = request.query().get("enabled");
    auto disabledForGroups = request.query().get("disabledForGroups");
    
    try {
      this->com_adobe_cq_experiencelog_impl_experience_log_config_servlet(post, apply, delete, action, Dollarlocation, propertylist, enabled, disabledForGroups, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_hc_content_packages_health_check_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto hcPeriodname = request.query().get("hc.name");
    auto hcPeriodtags = request.query().get("hc.tags");
    auto hcPeriodmbeanPeriodname = request.query().get("hc.mbean.name");
    auto packagePeriodnames = request.query().get("package.names");
    
    try {
      this->com_adobe_cq_hc_content_packages_health_check(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodname, hcPeriodtags, hcPeriodmbeanPeriodname, packagePeriodnames, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_history_impl_history_request_filter_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto historyPeriodrequestFilterPeriodexcludedSelectors = request.query().get("history.requestFilter.excludedSelectors");
    auto historyPeriodrequestFilterPeriodexcludedExtensions = request.query().get("history.requestFilter.excludedExtensions");
    
    try {
      this->com_adobe_cq_history_impl_history_request_filter(post, apply, delete, action, Dollarlocation, propertylist, historyPeriodrequestFilterPeriodexcludedSelectors, historyPeriodrequestFilterPeriodexcludedExtensions, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_history_impl_history_service_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto historyPeriodservicePeriodresourceTypes = request.query().get("history.service.resourceTypes");
    auto historyPeriodservicePeriodpathFilter = request.query().get("history.service.pathFilter");
    
    try {
      this->com_adobe_cq_history_impl_history_service_impl(post, apply, delete, action, Dollarlocation, propertylist, historyPeriodservicePeriodresourceTypes, historyPeriodservicePeriodpathFilter, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_inbox_impl_typeprovider_item_type_provider_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto inboxPeriodimplPeriodtypeproviderPeriodregistrypaths = request.query().get("inbox.impl.typeprovider.registrypaths");
    auto inboxPeriodimplPeriodtypeproviderPeriodlegacypaths = request.query().get("inbox.impl.typeprovider.legacypaths");
    auto inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodfailureitem = request.query().get("inbox.impl.typeprovider.defaulturl.failureitem");
    auto inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodworkitem = request.query().get("inbox.impl.typeprovider.defaulturl.workitem");
    auto inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodtask = request.query().get("inbox.impl.typeprovider.defaulturl.task");
    
    try {
      this->com_adobe_cq_inbox_impl_typeprovider_item_type_provider(post, apply, delete, action, Dollarlocation, propertylist, inboxPeriodimplPeriodtypeproviderPeriodregistrypaths, inboxPeriodimplPeriodtypeproviderPeriodlegacypaths, inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodfailureitem, inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodworkitem, inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodtask, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_projects_impl_servlet_project_image_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto imagePeriodquality = request.query().get("image.quality");
    auto imagePeriodsupportedPeriodresolutions = request.query().get("image.supported.resolutions");
    
    try {
      this->com_adobe_cq_projects_impl_servlet_project_image_servlet(post, apply, delete, action, Dollarlocation, propertylist, imagePeriodquality, imagePeriodsupportedPeriodresolutions, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_projects_purge_scheduler_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto scheduledpurgePeriodname = request.query().get("scheduledpurge.name");
    auto scheduledpurgePeriodpurgeActive = request.query().get("scheduledpurge.purgeActive");
    auto scheduledpurgePeriodtemplates = request.query().get("scheduledpurge.templates");
    auto scheduledpurgePeriodpurgeGroups = request.query().get("scheduledpurge.purgeGroups");
    auto scheduledpurgePeriodpurgeAssets = request.query().get("scheduledpurge.purgeAssets");
    auto scheduledpurgePeriodterminateRunningWorkflows = request.query().get("scheduledpurge.terminateRunningWorkflows");
    auto scheduledpurgePerioddaysold = request.query().get("scheduledpurge.daysold");
    auto scheduledpurgePeriodsaveThreshold = request.query().get("scheduledpurge.saveThreshold");
    
    try {
      this->com_adobe_cq_projects_purge_scheduler(post, apply, delete, action, Dollarlocation, propertylist, scheduledpurgePeriodname, scheduledpurgePeriodpurgeActive, scheduledpurgePeriodtemplates, scheduledpurgePeriodpurgeGroups, scheduledpurgePeriodpurgeAssets, scheduledpurgePeriodterminateRunningWorkflows, scheduledpurgePerioddaysold, scheduledpurgePeriodsaveThreshold, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_scheduled_exporter_impl_scheduled_exporter_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto includePeriodpaths = request.query().get("include.paths");
    auto exporterPerioduser = request.query().get("exporter.user");
    
    try {
      this->com_adobe_cq_scheduled_exporter_impl_scheduled_exporter_impl(post, apply, delete, action, Dollarlocation, propertylist, includePeriodpaths, exporterPerioduser, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_screens_analytics_impl_screens_analytics_service_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodurl = request.query().get("com.adobe.cq.screens.analytics.impl.url");
    auto comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodapikey = request.query().get("com.adobe.cq.screens.analytics.impl.apikey");
    auto comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodproject = request.query().get("com.adobe.cq.screens.analytics.impl.project");
    auto comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodenvironment = request.query().get("com.adobe.cq.screens.analytics.impl.environment");
    auto comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodsendFrequency = request.query().get("com.adobe.cq.screens.analytics.impl.sendFrequency");
    
    try {
      this->com_adobe_cq_screens_analytics_impl_screens_analytics_service_impl(post, apply, delete, action, Dollarlocation, propertylist, comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodurl, comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodapikey, comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodproject, comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodenvironment, comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodsendFrequency, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_screens_device_impl_device_service_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto comPeriodadobePeriodaemPeriodscreensPeriodplayerPeriodpingfrequency = request.query().get("com.adobe.aem.screens.player.pingfrequency");
    auto comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodspecialchars = request.query().get("com.adobe.aem.screens.device.pasword.specialchars");
    auto comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminlowercasechars = request.query().get("com.adobe.aem.screens.device.pasword.minlowercasechars");
    auto comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminuppercasechars = request.query().get("com.adobe.aem.screens.device.pasword.minuppercasechars");
    auto comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminnumberchars = request.query().get("com.adobe.aem.screens.device.pasword.minnumberchars");
    auto comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminspecialchars = request.query().get("com.adobe.aem.screens.device.pasword.minspecialchars");
    auto comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminlength = request.query().get("com.adobe.aem.screens.device.pasword.minlength");
    
    try {
      this->com_adobe_cq_screens_device_impl_device_service(post, apply, delete, action, Dollarlocation, propertylist, comPeriodadobePeriodaemPeriodscreensPeriodplayerPeriodpingfrequency, comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodspecialchars, comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminlowercasechars, comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminuppercasechars, comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminnumberchars, comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminspecialchars, comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminlength, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_screens_device_registration_impl_registration_service_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto deviceRegistrationTimeout = request.query().get("deviceRegistrationTimeout");
    
    try {
      this->com_adobe_cq_screens_device_registration_impl_registration_service_impl(post, apply, delete, action, Dollarlocation, propertylist, deviceRegistrationTimeout, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_screens_impl_handler_channels_update_handler_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPeriodpagesupdatehandlerPeriodimageresourcetypes = request.query().get("cq.pagesupdatehandler.imageresourcetypes");
    auto cqPeriodpagesupdatehandlerPeriodproductresourcetypes = request.query().get("cq.pagesupdatehandler.productresourcetypes");
    auto cqPeriodpagesupdatehandlerPeriodvideoresourcetypes = request.query().get("cq.pagesupdatehandler.videoresourcetypes");
    auto cqPeriodpagesupdatehandlerPerioddynamicsequenceresourcetypes = request.query().get("cq.pagesupdatehandler.dynamicsequenceresourcetypes");
    auto cqPeriodpagesupdatehandlerPeriodpreviewmodepaths = request.query().get("cq.pagesupdatehandler.previewmodepaths");
    
    try {
      this->com_adobe_cq_screens_impl_handler_channels_update_handler(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodpagesupdatehandlerPeriodimageresourcetypes, cqPeriodpagesupdatehandlerPeriodproductresourcetypes, cqPeriodpagesupdatehandlerPeriodvideoresourcetypes, cqPeriodpagesupdatehandlerPerioddynamicsequenceresourcetypes, cqPeriodpagesupdatehandlerPeriodpreviewmodepaths, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_screens_impl_jobs_distributed_devices_stati_update_job_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto schedulerPeriodexpression = request.query().get("scheduler.expression");
    
    try {
      this->com_adobe_cq_screens_impl_jobs_distributed_devices_stati_update_job(post, apply, delete, action, Dollarlocation, propertylist, schedulerPeriodexpression, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_screens_impl_remote_impl_distributed_http_client_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto comPeriodadobePeriodaemPeriodscreensPeriodimplPeriodremotePeriodrequestTimeout = request.query().get("com.adobe.aem.screens.impl.remote.request_timeout");
    
    try {
      this->com_adobe_cq_screens_impl_remote_impl_distributed_http_client_impl(post, apply, delete, action, Dollarlocation, propertylist, comPeriodadobePeriodaemPeriodscreensPeriodimplPeriodremotePeriodrequestTimeout, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_screens_impl_screens_channel_post_processor_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto screensPeriodchannelsPeriodpropertiesPeriodtoPeriodremove = request.query().get("screens.channels.properties.to.remove");
    
    try {
      this->com_adobe_cq_screens_impl_screens_channel_post_processor(post, apply, delete, action, Dollarlocation, propertylist, screensPeriodchannelsPeriodpropertiesPeriodtoPeriodremove, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodprojectPath = request.query().get("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.projectPath");
    auto comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodscheduleFrequency = request.query().get("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.scheduleFrequency");
    auto comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodpingTimeout = request.query().get("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.pingTimeout");
    auto comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodrecipients = request.query().get("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.recipients");
    auto comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodsmtpserver = request.query().get("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpserver");
    auto comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodsmtpport = request.query().get("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpport");
    auto comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodusetls = request.query().get("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.usetls");
    auto comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodusername = request.query().get("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.username");
    auto comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodpassword = request.query().get("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.password");
    
    try {
      this->com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl(post, apply, delete, action, Dollarlocation, propertylist, comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodprojectPath, comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodscheduleFrequency, comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodpingTimeout, comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodrecipients, comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodsmtpserver, comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodsmtpport, comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodusetls, comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodusername, comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodpassword, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_screens_mq_activemq_impl_artemis_jms_provider_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto servicePeriodranking = request.query().get("service.ranking");
    auto globalPeriodsize = request.query().get("global.size");
    auto maxPerioddiskPeriodusage = request.query().get("max.disk.usage");
    auto persistencePeriodenabled = request.query().get("persistence.enabled");
    auto threadPeriodpoolPeriodmaxPeriodsize = request.query().get("thread.pool.max.size");
    auto scheduledPeriodthreadPeriodpoolPeriodmaxPeriodsize = request.query().get("scheduled.thread.pool.max.size");
    auto gracefulPeriodshutdownPeriodtimeout = request.query().get("graceful.shutdown.timeout");
    auto queues = request.query().get("queues");
    auto topics = request.query().get("topics");
    auto addressesPeriodmaxPerioddeliveryPeriodattempts = request.query().get("addresses.max.delivery.attempts");
    auto addressesPeriodexpiryPerioddelay = request.query().get("addresses.expiry.delay");
    auto addressesPeriodaddressPeriodfullPeriodmessagePeriodpolicy = request.query().get("addresses.address.full.message.policy");
    auto addressesPeriodmaxPeriodsizePeriodbytes = request.query().get("addresses.max.size.bytes");
    auto addressesPeriodpagePeriodsizePeriodbytes = request.query().get("addresses.page.size.bytes");
    auto addressesPeriodpagePeriodcachePeriodmaxPeriodsize = request.query().get("addresses.page.cache.max.size");
    auto clusterPerioduser = request.query().get("cluster.user");
    auto clusterPeriodpassword = request.query().get("cluster.password");
    auto clusterPeriodcallPeriodtimeout = request.query().get("cluster.call.timeout");
    auto clusterPeriodcallPeriodfailoverPeriodtimeout = request.query().get("cluster.call.failover.timeout");
    auto clusterPeriodclientPeriodfailurePeriodcheckPeriodperiod = request.query().get("cluster.client.failure.check.period");
    auto clusterPeriodnotificationPeriodattempts = request.query().get("cluster.notification.attempts");
    auto clusterPeriodnotificationPeriodinterval = request.query().get("cluster.notification.interval");
    auto idPeriodcachePeriodsize = request.query().get("id.cache.size");
    auto clusterPeriodconfirmationPeriodwindowPeriodsize = request.query().get("cluster.confirmation.window.size");
    auto clusterPeriodconnectionPeriodttl = request.query().get("cluster.connection.ttl");
    auto clusterPeriodduplicatePerioddetection = request.query().get("cluster.duplicate.detection");
    auto clusterPeriodinitialPeriodconnectPeriodattempts = request.query().get("cluster.initial.connect.attempts");
    auto clusterPeriodmaxPeriodretryPeriodinterval = request.query().get("cluster.max.retry.interval");
    auto clusterPeriodminPeriodlargePeriodmessagePeriodsize = request.query().get("cluster.min.large.message.size");
    auto clusterPeriodproducerPeriodwindowPeriodsize = request.query().get("cluster.producer.window.size");
    auto clusterPeriodreconnectPeriodattempts = request.query().get("cluster.reconnect.attempts");
    auto clusterPeriodretryPeriodinterval = request.query().get("cluster.retry.interval");
    auto clusterPeriodretryPeriodintervalPeriodmultiplier = request.query().get("cluster.retry.interval.multiplier");
    
    try {
      this->com_adobe_cq_screens_mq_activemq_impl_artemis_jms_provider(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, globalPeriodsize, maxPerioddiskPeriodusage, persistencePeriodenabled, threadPeriodpoolPeriodmaxPeriodsize, scheduledPeriodthreadPeriodpoolPeriodmaxPeriodsize, gracefulPeriodshutdownPeriodtimeout, queues, topics, addressesPeriodmaxPerioddeliveryPeriodattempts, addressesPeriodexpiryPerioddelay, addressesPeriodaddressPeriodfullPeriodmessagePeriodpolicy, addressesPeriodmaxPeriodsizePeriodbytes, addressesPeriodpagePeriodsizePeriodbytes, addressesPeriodpagePeriodcachePeriodmaxPeriodsize, clusterPerioduser, clusterPeriodpassword, clusterPeriodcallPeriodtimeout, clusterPeriodcallPeriodfailoverPeriodtimeout, clusterPeriodclientPeriodfailurePeriodcheckPeriodperiod, clusterPeriodnotificationPeriodattempts, clusterPeriodnotificationPeriodinterval, idPeriodcachePeriodsize, clusterPeriodconfirmationPeriodwindowPeriodsize, clusterPeriodconnectionPeriodttl, clusterPeriodduplicatePerioddetection, clusterPeriodinitialPeriodconnectPeriodattempts, clusterPeriodmaxPeriodretryPeriodinterval, clusterPeriodminPeriodlargePeriodmessagePeriodsize, clusterPeriodproducerPeriodwindowPeriodsize, clusterPeriodreconnectPeriodattempts, clusterPeriodretryPeriodinterval, clusterPeriodretryPeriodintervalPeriodmultiplier, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto comPeriodadobePeriodcqPeriodscreensPeriodofflinecontentPeriodimplPeriodBulkOfflineUpdateServiceImplPeriodprojectPath = request.query().get("com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.projectPath");
    auto comPeriodadobePeriodcqPeriodscreensPeriodofflinecontentPeriodimplPeriodBulkOfflineUpdateServiceImplPeriodscheduleFrequency = request.query().get("com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.scheduleFrequency");
    
    try {
      this->com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl(post, apply, delete, action, Dollarlocation, propertylist, comPeriodadobePeriodcqPeriodscreensPeriodofflinecontentPeriodimplPeriodBulkOfflineUpdateServiceImplPeriodprojectPath, comPeriodadobePeriodcqPeriodscreensPeriodofflinecontentPeriodimplPeriodBulkOfflineUpdateServiceImplPeriodscheduleFrequency, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_screens_offlinecontent_impl_offline_content_service_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto disableSmartSync = request.query().get("disableSmartSync");
    
    try {
      this->com_adobe_cq_screens_offlinecontent_impl_offline_content_service_impl(post, apply, delete, action, Dollarlocation, propertylist, disableSmartSync, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_screens_segmentation_impl_segmentation_feature_flag_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto enableDataTriggeredContent = request.query().get("enableDataTriggeredContent");
    
    try {
      this->com_adobe_cq_screens_segmentation_impl_segmentation_feature_flag(post, apply, delete, action, Dollarlocation, propertylist, enableDataTriggeredContent, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_security_hc_bundles_impl_html_library_manager_config_health_ch_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto hcPeriodtags = request.query().get("hc.tags");
    
    try {
      this->com_adobe_cq_security_hc_bundles_impl_html_library_manager_config_health_ch(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_security_hc_bundles_impl_wcm_filter_health_check_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto hcPeriodtags = request.query().get("hc.tags");
    
    try {
      this->com_adobe_cq_security_hc_bundles_impl_wcm_filter_health_check(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_security_hc_dispatcher_impl_dispatcher_access_health_check_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto hcPeriodtags = request.query().get("hc.tags");
    auto dispatcherPeriodaddress = request.query().get("dispatcher.address");
    auto dispatcherPeriodfilterPeriodallowed = request.query().get("dispatcher.filter.allowed");
    auto dispatcherPeriodfilterPeriodblocked = request.query().get("dispatcher.filter.blocked");
    
    try {
      this->com_adobe_cq_security_hc_dispatcher_impl_dispatcher_access_health_check(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags, dispatcherPeriodaddress, dispatcherPeriodfilterPeriodallowed, dispatcherPeriodfilterPeriodblocked, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_security_hc_packages_impl_example_content_health_check_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto hcPeriodtags = request.query().get("hc.tags");
    
    try {
      this->com_adobe_cq_security_hc_packages_impl_example_content_health_check(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_security_hc_webserver_impl_clickjacking_health_check_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto hcPeriodtags = request.query().get("hc.tags");
    auto webserverPeriodaddress = request.query().get("webserver.address");
    
    try {
      this->com_adobe_cq_security_hc_webserver_impl_clickjacking_health_check(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags, webserverPeriodaddress, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_accountverification_impl_account_management_config_im_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto enable = request.query().get("enable");
    auto ttl1 = request.query().get("ttl1");
    auto ttl2 = request.query().get("ttl2");
    
    try {
      this->com_adobe_cq_social_accountverification_impl_account_management_config_im(post, apply, delete, action, Dollarlocation, propertylist, enable, ttl1, ttl2, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_activitystreams_client_impl_social_activity_componen_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto priority = request.query().get("priority");
    
    try {
      this->com_adobe_cq_social_activitystreams_client_impl_social_activity_componen(post, apply, delete, action, Dollarlocation, propertylist, priority, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_activitystreams_client_impl_social_activity_stream_co_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto priority = request.query().get("priority");
    
    try {
      this->com_adobe_cq_social_activitystreams_client_impl_social_activity_stream_co(post, apply, delete, action, Dollarlocation, propertylist, priority, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_activitystreams_listener_impl_event_listener_handler_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto eventPeriodtopics = request.query().get("event.topics");
    auto eventPeriodfilter = request.query().get("event.filter");
    
    try {
      this->com_adobe_cq_social_activitystreams_listener_impl_event_listener_handler(post, apply, delete, action, Dollarlocation, propertylist, eventPeriodtopics, eventPeriodfilter, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_activitystreams_listener_impl_moderation_event_exten_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto accepted = request.query().get("accepted");
    auto ranked = request.query().get("ranked");
    
    try {
      this->com_adobe_cq_social_activitystreams_listener_impl_moderation_event_exten(post, apply, delete, action, Dollarlocation, propertylist, accepted, ranked, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_activitystreams_listener_impl_rating_event_activity_s_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto ranking = request.query().get("ranking");
    auto enable = request.query().get("enable");
    
    try {
      this->com_adobe_cq_social_activitystreams_listener_impl_rating_event_activity_s(post, apply, delete, action, Dollarlocation, propertylist, ranking, enable, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_activitystreams_listener_impl_resource_activity_stre_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto streamPath = request.query().get("streamPath");
    auto streamName = request.query().get("streamName");
    
    try {
      this->com_adobe_cq_social_activitystreams_listener_impl_resource_activity_stre(post, apply, delete, action, Dollarlocation, propertylist, streamPath, streamName, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_calendar_client_endpoints_impl_calendar_operations_i_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto maxRetry = request.query().get("MaxRetry");
    auto fieldWhitelist = request.query().get("fieldWhitelist");
    auto attachmentTypeBlacklist = request.query().get("attachmentTypeBlacklist");
    
    try {
      this->com_adobe_cq_social_calendar_client_endpoints_impl_calendar_operations_i(post, apply, delete, action, Dollarlocation, propertylist, maxRetry, fieldWhitelist, attachmentTypeBlacklist, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_calendar_client_operationextensions_event_attachmen_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto attachmentTypeBlacklist = request.query().get("attachmentTypeBlacklist");
    auto extensionPeriodorder = request.query().get("extension.order");
    
    try {
      this->com_adobe_cq_social_calendar_client_operationextensions_event_attachmen(post, apply, delete, action, Dollarlocation, propertylist, attachmentTypeBlacklist, extensionPeriodorder, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_calendar_servlets_time_zone_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto timezonesPeriodexpirytime = request.query().get("timezones.expirytime");
    
    try {
      this->com_adobe_cq_social_calendar_servlets_time_zone_servlet(post, apply, delete, action, Dollarlocation, propertylist, timezonesPeriodexpirytime, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_commons_comments_endpoints_impl_comment_delete_event_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto ranking = request.query().get("ranking");
    
    try {
      this->com_adobe_cq_social_commons_comments_endpoints_impl_comment_delete_event(post, apply, delete, action, Dollarlocation, propertylist, ranking, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_commons_comments_endpoints_impl_comment_operation_se_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto fieldWhitelist = request.query().get("fieldWhitelist");
    auto attachmentTypeBlacklist = request.query().get("attachmentTypeBlacklist");
    
    try {
      this->com_adobe_cq_social_commons_comments_endpoints_impl_comment_operation_se(post, apply, delete, action, Dollarlocation, propertylist, fieldWhitelist, attachmentTypeBlacklist, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_commons_comments_endpoints_impl_translation_operati_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto fieldWhitelist = request.query().get("fieldWhitelist");
    auto attachmentTypeBlacklist = request.query().get("attachmentTypeBlacklist");
    
    try {
      this->com_adobe_cq_social_commons_comments_endpoints_impl_translation_operati(post, apply, delete, action, Dollarlocation, propertylist, fieldWhitelist, attachmentTypeBlacklist, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_commons_comments_listing_impl_search_comment_social_c_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto numUserLimit = request.query().get("numUserLimit");
    
    try {
      this->com_adobe_cq_social_commons_comments_listing_impl_search_comment_social_c(post, apply, delete, action, Dollarlocation, propertylist, numUserLimit, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_commons_comments_scheduler_impl_search_scheduled_pos_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto enableScheduledPostsSearch = request.query().get("enableScheduledPostsSearch");
    auto numberOfMinutes = request.query().get("numberOfMinutes");
    auto maxSearchLimit = request.query().get("maxSearchLimit");
    
    try {
      this->com_adobe_cq_social_commons_comments_scheduler_impl_search_scheduled_pos(post, apply, delete, action, Dollarlocation, propertylist, enableScheduledPostsSearch, numberOfMinutes, maxSearchLimit, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_commons_cors_cors_authentication_filter_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto corsPeriodenabling = request.query().get("cors.enabling");
    
    try {
      this->com_adobe_cq_social_commons_cors_cors_authentication_filter(post, apply, delete, action, Dollarlocation, propertylist, corsPeriodenabling, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_commons_emailreply_impl_android_email_client_provider_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto priorityOrder = request.query().get("priorityOrder");
    auto replyEmailPatterns = request.query().get("replyEmailPatterns");
    
    try {
      this->com_adobe_cq_social_commons_emailreply_impl_android_email_client_provider(post, apply, delete, action, Dollarlocation, propertylist, priorityOrder, replyEmailPatterns, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_commons_emailreply_impl_comment_email_builder_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto contextPeriodpath = request.query().get("context.path");
    
    try {
      this->com_adobe_cq_social_commons_emailreply_impl_comment_email_builder_impl(post, apply, delete, action, Dollarlocation, propertylist, contextPeriodpath, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_commons_emailreply_impl_comment_email_event_listener_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto eventPeriodtopics = request.query().get("event.topics");
    
    try {
      this->com_adobe_cq_social_commons_emailreply_impl_comment_email_event_listener(post, apply, delete, action, Dollarlocation, propertylist, eventPeriodtopics, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_commons_emailreply_impl_custom_email_client_provider_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto priorityOrder = request.query().get("priorityOrder");
    auto replyEmailPatterns = request.query().get("replyEmailPatterns");
    
    try {
      this->com_adobe_cq_social_commons_emailreply_impl_custom_email_client_provider(post, apply, delete, action, Dollarlocation, propertylist, priorityOrder, replyEmailPatterns, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_commons_emailreply_impl_email_quoted_text_patterns_imp_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto patternPeriodtime = request.query().get("pattern.time");
    auto patternPeriodnewline = request.query().get("pattern.newline");
    auto patternPerioddayOfMonth = request.query().get("pattern.dayOfMonth");
    auto patternPeriodmonth = request.query().get("pattern.month");
    auto patternPeriodyear = request.query().get("pattern.year");
    auto patternPerioddate = request.query().get("pattern.date");
    auto patternPerioddateTime = request.query().get("pattern.dateTime");
    auto patternPeriodemail = request.query().get("pattern.email");
    
    try {
      this->com_adobe_cq_social_commons_emailreply_impl_email_quoted_text_patterns_imp(post, apply, delete, action, Dollarlocation, propertylist, patternPeriodtime, patternPeriodnewline, patternPerioddayOfMonth, patternPeriodmonth, patternPeriodyear, patternPerioddate, patternPerioddateTime, patternPeriodemail, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_commons_emailreply_impl_email_reply_configuration_imp_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto emailPeriodname = request.query().get("email.name");
    auto emailPeriodcreatePostFromReply = request.query().get("email.createPostFromReply");
    auto emailPeriodaddCommentIdTo = request.query().get("email.addCommentIdTo");
    auto emailPeriodsubjectMaximumLength = request.query().get("email.subjectMaximumLength");
    auto emailPeriodreplyToAddress = request.query().get("email.replyToAddress");
    auto emailPeriodreplyToDelimiter = request.query().get("email.replyToDelimiter");
    auto emailPeriodtrackerIdPrefixInSubject = request.query().get("email.trackerIdPrefixInSubject");
    auto emailPeriodtrackerIdPrefixInBody = request.query().get("email.trackerIdPrefixInBody");
    auto emailPeriodasHTML = request.query().get("email.asHTML");
    auto emailPerioddefaultUserName = request.query().get("email.defaultUserName");
    auto emailPeriodtemplatesPeriodrootPath = request.query().get("email.templates.rootPath");
    
    try {
      this->com_adobe_cq_social_commons_emailreply_impl_email_reply_configuration_imp(post, apply, delete, action, Dollarlocation, propertylist, emailPeriodname, emailPeriodcreatePostFromReply, emailPeriodaddCommentIdTo, emailPeriodsubjectMaximumLength, emailPeriodreplyToAddress, emailPeriodreplyToDelimiter, emailPeriodtrackerIdPrefixInSubject, emailPeriodtrackerIdPrefixInBody, emailPeriodasHTML, emailPerioddefaultUserName, emailPeriodtemplatesPeriodrootPath, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_commons_emailreply_impl_email_reply_importer_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto connectProtocol = request.query().get("connectProtocol");
    
    try {
      this->com_adobe_cq_social_commons_emailreply_impl_email_reply_importer(post, apply, delete, action, Dollarlocation, propertylist, connectProtocol, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_commons_emailreply_impl_gmail_email_client_provider_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto priorityOrder = request.query().get("priorityOrder");
    auto replyEmailPatterns = request.query().get("replyEmailPatterns");
    
    try {
      this->com_adobe_cq_social_commons_emailreply_impl_gmail_email_client_provider(post, apply, delete, action, Dollarlocation, propertylist, priorityOrder, replyEmailPatterns, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_commons_emailreply_impl_ios_email_client_provider_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto priorityOrder = request.query().get("priorityOrder");
    auto replyEmailPatterns = request.query().get("replyEmailPatterns");
    
    try {
      this->com_adobe_cq_social_commons_emailreply_impl_ios_email_client_provider(post, apply, delete, action, Dollarlocation, propertylist, priorityOrder, replyEmailPatterns, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_commons_emailreply_impl_macmail_email_client_provider_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto priorityOrder = request.query().get("priorityOrder");
    auto replyEmailPatterns = request.query().get("replyEmailPatterns");
    
    try {
      this->com_adobe_cq_social_commons_emailreply_impl_macmail_email_client_provider(post, apply, delete, action, Dollarlocation, propertylist, priorityOrder, replyEmailPatterns, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_commons_emailreply_impl_out_look_email_client_provider_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto priorityOrder = request.query().get("priorityOrder");
    auto replyEmailPatterns = request.query().get("replyEmailPatterns");
    
    try {
      this->com_adobe_cq_social_commons_emailreply_impl_out_look_email_client_provider(post, apply, delete, action, Dollarlocation, propertylist, priorityOrder, replyEmailPatterns, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_commons_emailreply_impl_unknown_email_client_provider_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto replyEmailPatterns = request.query().get("replyEmailPatterns");
    auto priorityOrder = request.query().get("priorityOrder");
    
    try {
      this->com_adobe_cq_social_commons_emailreply_impl_unknown_email_client_provider(post, apply, delete, action, Dollarlocation, propertylist, replyEmailPatterns, priorityOrder, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_commons_emailreply_impl_yahoo_email_client_provider_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto priorityOrder = request.query().get("priorityOrder");
    auto replyEmailPatterns = request.query().get("replyEmailPatterns");
    
    try {
      this->com_adobe_cq_social_commons_emailreply_impl_yahoo_email_client_provider(post, apply, delete, action, Dollarlocation, propertylist, priorityOrder, replyEmailPatterns, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_commons_maintainance_impl_delete_temp_ugc_image_upload_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto numberOfDays = request.query().get("numberOfDays");
    auto ageOfFile = request.query().get("ageOfFile");
    
    try {
      this->com_adobe_cq_social_commons_maintainance_impl_delete_temp_ugc_image_upload(post, apply, delete, action, Dollarlocation, propertylist, numberOfDays, ageOfFile, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_commons_ugclimiter_impl_ugc_limiter_service_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto eventPeriodtopics = request.query().get("event.topics");
    auto eventPeriodfilter = request.query().get("event.filter");
    auto verbs = request.query().get("verbs");
    
    try {
      this->com_adobe_cq_social_commons_ugclimiter_impl_ugc_limiter_service_impl(post, apply, delete, action, Dollarlocation, propertylist, eventPeriodtopics, eventPeriodfilter, verbs, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_commons_ugclimitsconfig_impl_community_user_ugc_limit_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto enable = request.query().get("enable");
    auto uGCLimit = request.query().get("UGCLimit");
    auto ugcLimitDuration = request.query().get("ugcLimitDuration");
    auto domains = request.query().get("domains");
    auto toList = request.query().get("toList");
    
    try {
      this->com_adobe_cq_social_commons_ugclimitsconfig_impl_community_user_ugc_limit(post, apply, delete, action, Dollarlocation, propertylist, enable, uGCLimit, ugcLimitDuration, domains, toList, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_connect_oauth_impl_facebook_provider_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto oauthPeriodproviderPeriodid = request.query().get("oauth.provider.id");
    auto oauthPeriodcloudPeriodconfigPeriodroot = request.query().get("oauth.cloud.config.root");
    auto providerPeriodconfigPeriodroot = request.query().get("provider.config.root");
    auto providerPeriodconfigPeriodcreatePeriodtagsPeriodenabled = request.query().get("provider.config.create.tags.enabled");
    auto providerPeriodconfigPerioduserPeriodfolder = request.query().get("provider.config.user.folder");
    auto providerPeriodconfigPeriodfacebookPeriodfetchPeriodfields = request.query().get("provider.config.facebook.fetch.fields");
    auto providerPeriodconfigPeriodfacebookPeriodfields = request.query().get("provider.config.facebook.fields");
    auto providerPeriodconfigPeriodrefreshPerioduserdataPeriodenabled = request.query().get("provider.config.refresh.userdata.enabled");
    
    try {
      this->com_adobe_cq_social_connect_oauth_impl_facebook_provider_impl(post, apply, delete, action, Dollarlocation, propertylist, oauthPeriodproviderPeriodid, oauthPeriodcloudPeriodconfigPeriodroot, providerPeriodconfigPeriodroot, providerPeriodconfigPeriodcreatePeriodtagsPeriodenabled, providerPeriodconfigPerioduserPeriodfolder, providerPeriodconfigPeriodfacebookPeriodfetchPeriodfields, providerPeriodconfigPeriodfacebookPeriodfields, providerPeriodconfigPeriodrefreshPerioduserdataPeriodenabled, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_connect_oauth_impl_social_o_auth_authentication_handle_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto path = request.query().get("path");
    auto servicePeriodranking = request.query().get("service.ranking");
    
    try {
      this->com_adobe_cq_social_connect_oauth_impl_social_o_auth_authentication_handle(post, apply, delete, action, Dollarlocation, propertylist, path, servicePeriodranking, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_connect_oauth_impl_social_o_auth_user_profile_mapper_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto facebook = request.query().get("facebook");
    auto twitter = request.query().get("twitter");
    auto providerPeriodconfigPerioduserPeriodfolder = request.query().get("provider.config.user.folder");
    
    try {
      this->com_adobe_cq_social_connect_oauth_impl_social_o_auth_user_profile_mapper(post, apply, delete, action, Dollarlocation, propertylist, facebook, twitter, providerPeriodconfigPerioduserPeriodfolder, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_connect_oauth_impl_twitter_provider_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto oauthPeriodproviderPeriodid = request.query().get("oauth.provider.id");
    auto oauthPeriodcloudPeriodconfigPeriodroot = request.query().get("oauth.cloud.config.root");
    auto providerPeriodconfigPeriodroot = request.query().get("provider.config.root");
    auto providerPeriodconfigPerioduserPeriodfolder = request.query().get("provider.config.user.folder");
    auto providerPeriodconfigPeriodtwitterPeriodenablePeriodparams = request.query().get("provider.config.twitter.enable.params");
    auto providerPeriodconfigPeriodtwitterPeriodparams = request.query().get("provider.config.twitter.params");
    auto providerPeriodconfigPeriodrefreshPerioduserdataPeriodenabled = request.query().get("provider.config.refresh.userdata.enabled");
    
    try {
      this->com_adobe_cq_social_connect_oauth_impl_twitter_provider_impl(post, apply, delete, action, Dollarlocation, propertylist, oauthPeriodproviderPeriodid, oauthPeriodcloudPeriodconfigPeriodroot, providerPeriodconfigPeriodroot, providerPeriodconfigPerioduserPeriodfolder, providerPeriodconfigPeriodtwitterPeriodenablePeriodparams, providerPeriodconfigPeriodtwitterPeriodparams, providerPeriodconfigPeriodrefreshPerioduserdataPeriodenabled, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_content_fragments_services_impl_communities_fragmen_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPeriodsocialPeriodcontentPeriodfragmentsPeriodservicesPeriodenabled = request.query().get("cq.social.content.fragments.services.enabled");
    auto cqPeriodsocialPeriodcontentPeriodfragmentsPeriodservicesPeriodwaitTimeSeconds = request.query().get("cq.social.content.fragments.services.waitTimeSeconds");
    
    try {
      this->com_adobe_cq_social_content_fragments_services_impl_communities_fragmen(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodsocialPeriodcontentPeriodfragmentsPeriodservicesPeriodenabled, cqPeriodsocialPeriodcontentPeriodfragmentsPeriodservicesPeriodwaitTimeSeconds, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_datastore_as_impl_as_resource_provider_factory_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto versionPeriodid = request.query().get("version.id");
    auto cachePeriodon = request.query().get("cache.on");
    auto concurrencyPeriodlevel = request.query().get("concurrency.level");
    auto cachePeriodstartPeriodsize = request.query().get("cache.start.size");
    auto cachePeriodttl = request.query().get("cache.ttl");
    auto cachePeriodsize = request.query().get("cache.size");
    auto timePeriodlimit = request.query().get("time.limit");
    
    try {
      this->com_adobe_cq_social_datastore_as_impl_as_resource_provider_factory(post, apply, delete, action, Dollarlocation, propertylist, versionPeriodid, cachePeriodon, concurrencyPeriodlevel, cachePeriodstartPeriodsize, cachePeriodttl, cachePeriodsize, timePeriodlimit, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_datastore_op_impl_social_ms_resource_provider_factory_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto solrPeriodzkPeriodtimeout = request.query().get("solr.zk.timeout");
    auto solrPeriodcommit = request.query().get("solr.commit");
    auto cachePeriodon = request.query().get("cache.on");
    auto concurrencyPeriodlevel = request.query().get("concurrency.level");
    auto cachePeriodstartPeriodsize = request.query().get("cache.start.size");
    auto cachePeriodttl = request.query().get("cache.ttl");
    auto cachePeriodsize = request.query().get("cache.size");
    
    try {
      this->com_adobe_cq_social_datastore_op_impl_social_ms_resource_provider_factory(post, apply, delete, action, Dollarlocation, propertylist, solrPeriodzkPeriodtimeout, solrPeriodcommit, cachePeriodon, concurrencyPeriodlevel, cachePeriodstartPeriodsize, cachePeriodttl, cachePeriodsize, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_datastore_rdb_impl_social_rdb_resource_provider_factor_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto solrPeriodzkPeriodtimeout = request.query().get("solr.zk.timeout");
    auto solrPeriodcommit = request.query().get("solr.commit");
    auto cachePeriodon = request.query().get("cache.on");
    auto concurrencyPeriodlevel = request.query().get("concurrency.level");
    auto cachePeriodstartPeriodsize = request.query().get("cache.start.size");
    auto cachePeriodttl = request.query().get("cache.ttl");
    auto cachePeriodsize = request.query().get("cache.size");
    
    try {
      this->com_adobe_cq_social_datastore_rdb_impl_social_rdb_resource_provider_factor(post, apply, delete, action, Dollarlocation, propertylist, solrPeriodzkPeriodtimeout, solrPeriodcommit, cachePeriodon, concurrencyPeriodlevel, cachePeriodstartPeriodsize, cachePeriodttl, cachePeriodsize, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_enablement_adaptors_enablement_learning_path_adaptor_f_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto isMemberCheck = request.query().get("isMemberCheck");
    
    try {
      this->com_adobe_cq_social_enablement_adaptors_enablement_learning_path_adaptor_f(post, apply, delete, action, Dollarlocation, propertylist, isMemberCheck, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_enablement_adaptors_enablement_resource_adaptor_facto_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto isMemberCheck = request.query().get("isMemberCheck");
    
    try {
      this->com_adobe_cq_social_enablement_adaptors_enablement_resource_adaptor_facto(post, apply, delete, action, Dollarlocation, propertylist, isMemberCheck, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_enablement_learningpath_endpoints_impl_enablement_l_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto fieldWhitelist = request.query().get("fieldWhitelist");
    
    try {
      this->com_adobe_cq_social_enablement_learningpath_endpoints_impl_enablement_l(post, apply, delete, action, Dollarlocation, propertylist, fieldWhitelist, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_enablement_resource_endpoints_impl_enablement_resou_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto fieldWhitelist = request.query().get("fieldWhitelist");
    
    try {
      this->com_adobe_cq_social_enablement_resource_endpoints_impl_enablement_resou(post, apply, delete, action, Dollarlocation, propertylist, fieldWhitelist, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_enablement_services_impl_author_marker_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto servicePeriodranking = request.query().get("service.ranking");
    
    try {
      this->com_adobe_cq_social_enablement_services_impl_author_marker_impl(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_filelibrary_client_endpoints_filelibrary_download_ge_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto slingPeriodservletPeriodselectors = request.query().get("sling.servlet.selectors");
    auto slingPeriodservletPeriodextensions = request.query().get("sling.servlet.extensions");
    
    try {
      this->com_adobe_cq_social_filelibrary_client_endpoints_filelibrary_download_ge(post, apply, delete, action, Dollarlocation, propertylist, slingPeriodservletPeriodselectors, slingPeriodservletPeriodextensions, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_filelibrary_client_endpoints_impl_file_library_opera_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto fieldWhitelist = request.query().get("fieldWhitelist");
    auto attachmentTypeBlacklist = request.query().get("attachmentTypeBlacklist");
    
    try {
      this->com_adobe_cq_social_filelibrary_client_endpoints_impl_file_library_opera(post, apply, delete, action, Dollarlocation, propertylist, fieldWhitelist, attachmentTypeBlacklist, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_forum_client_endpoints_impl_forum_operations_service_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto fieldWhitelist = request.query().get("fieldWhitelist");
    auto attachmentTypeBlacklist = request.query().get("attachmentTypeBlacklist");
    
    try {
      this->com_adobe_cq_social_forum_client_endpoints_impl_forum_operations_service(post, apply, delete, action, Dollarlocation, propertylist, fieldWhitelist, attachmentTypeBlacklist, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_forum_dispatcher_impl_flush_operations_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto extensionPeriodorder = request.query().get("extension.order");
    auto flushPeriodforumontopic = request.query().get("flush.forumontopic");
    
    try {
      this->com_adobe_cq_social_forum_dispatcher_impl_flush_operations(post, apply, delete, action, Dollarlocation, propertylist, extensionPeriodorder, flushPeriodforumontopic, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_group_client_impl_community_group_collection_componen_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto groupPeriodlistingPeriodpaginationPeriodenable = request.query().get("group.listing.pagination.enable");
    auto groupPeriodlistingPeriodlazyloadingPeriodenable = request.query().get("group.listing.lazyloading.enable");
    auto pagePeriodsize = request.query().get("page.size");
    auto priority = request.query().get("priority");
    
    try {
      this->com_adobe_cq_social_group_client_impl_community_group_collection_componen(post, apply, delete, action, Dollarlocation, propertylist, groupPeriodlistingPeriodpaginationPeriodenable, groupPeriodlistingPeriodlazyloadingPeriodenable, pagePeriodsize, priority, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_group_impl_group_service_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto maxWaitTime = request.query().get("maxWaitTime");
    auto minWaitBetweenRetries = request.query().get("minWaitBetweenRetries");
    
    try {
      this->com_adobe_cq_social_group_impl_group_service_impl(post, apply, delete, action, Dollarlocation, propertylist, maxWaitTime, minWaitBetweenRetries, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_handlebars_guava_template_cache_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto parameterPeriodguavaPeriodcachePeriodenabled = request.query().get("parameter.guava.cache.enabled");
    auto parameterPeriodguavaPeriodcachePeriodparams = request.query().get("parameter.guava.cache.params");
    auto parameterPeriodguavaPeriodcachePeriodreload = request.query().get("parameter.guava.cache.reload");
    auto servicePeriodranking = request.query().get("service.ranking");
    
    try {
      this->com_adobe_cq_social_handlebars_guava_template_cache_impl(post, apply, delete, action, Dollarlocation, propertylist, parameterPeriodguavaPeriodcachePeriodenabled, parameterPeriodguavaPeriodcachePeriodparams, parameterPeriodguavaPeriodcachePeriodreload, servicePeriodranking, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_ideation_client_endpoints_impl_ideation_operations_s_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto fieldWhitelist = request.query().get("fieldWhitelist");
    auto attachmentTypeBlacklist = request.query().get("attachmentTypeBlacklist");
    
    try {
      this->com_adobe_cq_social_ideation_client_endpoints_impl_ideation_operations_s(post, apply, delete, action, Dollarlocation, propertylist, fieldWhitelist, attachmentTypeBlacklist, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_journal_client_endpoints_impl_journal_operations_ser_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto fieldWhitelist = request.query().get("fieldWhitelist");
    auto attachmentTypeBlacklist = request.query().get("attachmentTypeBlacklist");
    
    try {
      this->com_adobe_cq_social_journal_client_endpoints_impl_journal_operations_ser(post, apply, delete, action, Dollarlocation, propertylist, fieldWhitelist, attachmentTypeBlacklist, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_members_endpoints_impl_community_member_group_profile_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto fieldWhitelist = request.query().get("fieldWhitelist");
    
    try {
      this->com_adobe_cq_social_members_endpoints_impl_community_member_group_profile(post, apply, delete, action, Dollarlocation, propertylist, fieldWhitelist, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_members_endpoints_impl_community_member_user_profile_o_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto fieldWhitelist = request.query().get("fieldWhitelist");
    
    try {
      this->com_adobe_cq_social_members_endpoints_impl_community_member_user_profile_o(post, apply, delete, action, Dollarlocation, propertylist, fieldWhitelist, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_members_impl_community_member_group_profile_component_f_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto everyoneLimit = request.query().get("everyoneLimit");
    auto priority = request.query().get("priority");
    
    try {
      this->com_adobe_cq_social_members_impl_community_member_group_profile_component_f(post, apply, delete, action, Dollarlocation, propertylist, everyoneLimit, priority, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_messaging_client_endpoints_impl_messaging_operation_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto messagePeriodproperties = request.query().get("message.properties");
    auto messageBoxSizeLimit = request.query().get("messageBoxSizeLimit");
    auto messageCountLimit = request.query().get("messageCountLimit");
    auto notifyFailure = request.query().get("notifyFailure");
    auto failureMessageFrom = request.query().get("failureMessageFrom");
    auto failureTemplatePath = request.query().get("failureTemplatePath");
    auto maxRetries = request.query().get("maxRetries");
    auto minWaitBetweenRetries = request.query().get("minWaitBetweenRetries");
    auto countUpdatePoolSize = request.query().get("countUpdatePoolSize");
    auto inboxPeriodpath = request.query().get("inbox.path");
    auto sentitemsPeriodpath = request.query().get("sentitems.path");
    auto supportAttachments = request.query().get("supportAttachments");
    auto supportGroupMessaging = request.query().get("supportGroupMessaging");
    auto maxTotalRecipients = request.query().get("maxTotalRecipients");
    auto batchSize = request.query().get("batchSize");
    auto maxTotalAttachmentSize = request.query().get("maxTotalAttachmentSize");
    auto attachmentTypeBlacklist = request.query().get("attachmentTypeBlacklist");
    auto allowedAttachmentTypes = request.query().get("allowedAttachmentTypes");
    auto serviceSelector = request.query().get("serviceSelector");
    auto fieldWhitelist = request.query().get("fieldWhitelist");
    
    try {
      this->com_adobe_cq_social_messaging_client_endpoints_impl_messaging_operation(post, apply, delete, action, Dollarlocation, propertylist, messagePeriodproperties, messageBoxSizeLimit, messageCountLimit, notifyFailure, failureMessageFrom, failureTemplatePath, maxRetries, minWaitBetweenRetries, countUpdatePoolSize, inboxPeriodpath, sentitemsPeriodpath, supportAttachments, supportGroupMessaging, maxTotalRecipients, batchSize, maxTotalAttachmentSize, attachmentTypeBlacklist, allowedAttachmentTypes, serviceSelector, fieldWhitelist, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_moderation_dashboard_api_filter_group_social_componen_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto resourceTypePeriodfilters = request.query().get("resourceType.filters");
    auto priority = request.query().get("priority");
    
    try {
      this->com_adobe_cq_social_moderation_dashboard_api_filter_group_social_componen(post, apply, delete, action, Dollarlocation, propertylist, resourceTypePeriodfilters, priority, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_moderation_dashboard_api_moderation_dashboard_social_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto priority = request.query().get("priority");
    
    try {
      this->com_adobe_cq_social_moderation_dashboard_api_moderation_dashboard_social(post, apply, delete, action, Dollarlocation, propertylist, priority, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_moderation_dashboard_api_user_details_social_componen_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto priority = request.query().get("priority");
    
    try {
      this->com_adobe_cq_social_moderation_dashboard_api_user_details_social_componen(post, apply, delete, action, Dollarlocation, propertylist, priority, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_moderation_dashboard_internal_impl_filter_group_soci_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto resourceTypePeriodfilters = request.query().get("resourceType.filters");
    auto priority = request.query().get("priority");
    
    try {
      this->com_adobe_cq_social_moderation_dashboard_internal_impl_filter_group_soci(post, apply, delete, action, Dollarlocation, propertylist, resourceTypePeriodfilters, priority, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_notifications_impl_mentions_router_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto eventPeriodtopics = request.query().get("event.topics");
    auto eventPeriodfilter = request.query().get("event.filter");
    
    try {
      this->com_adobe_cq_social_notifications_impl_mentions_router(post, apply, delete, action, Dollarlocation, propertylist, eventPeriodtopics, eventPeriodfilter, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_notifications_impl_notification_manager_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto maxPeriodunreadPeriodnotificationPeriodcount = request.query().get("max.unread.notification.count");
    
    try {
      this->com_adobe_cq_social_notifications_impl_notification_manager_impl(post, apply, delete, action, Dollarlocation, propertylist, maxPeriodunreadPeriodnotificationPeriodcount, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_notifications_impl_notifications_router_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto eventPeriodtopics = request.query().get("event.topics");
    auto eventPeriodfilter = request.query().get("event.filter");
    
    try {
      this->com_adobe_cq_social_notifications_impl_notifications_router(post, apply, delete, action, Dollarlocation, propertylist, eventPeriodtopics, eventPeriodfilter, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_qna_client_endpoints_impl_qna_forum_operations_servic_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto fieldWhitelist = request.query().get("fieldWhitelist");
    auto attachmentTypeBlacklist = request.query().get("attachmentTypeBlacklist");
    
    try {
      this->com_adobe_cq_social_qna_client_endpoints_impl_qna_forum_operations_servic(post, apply, delete, action, Dollarlocation, propertylist, fieldWhitelist, attachmentTypeBlacklist, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_i_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPeriodsocialPeriodreportingPeriodanalyticsPeriodpollingPeriodimporterPeriodinterval = request.query().get("cq.social.reporting.analytics.polling.importer.interval");
    auto cqPeriodsocialPeriodreportingPeriodanalyticsPeriodpollingPeriodimporterPeriodpageSize = request.query().get("cq.social.reporting.analytics.polling.importer.pageSize");
    
    try {
      this->com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_i(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodsocialPeriodreportingPeriodanalyticsPeriodpollingPeriodimporterPeriodinterval, cqPeriodsocialPeriodreportingPeriodanalyticsPeriodpollingPeriodimporterPeriodpageSize, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_m_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto reportPeriodfetchPerioddelay = request.query().get("report.fetch.delay");
    
    try {
      this->com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_m(post, apply, delete, action, Dollarlocation, propertylist, reportPeriodfetchPerioddelay, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_reporting_analytics_services_impl_site_trend_report_s_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPeriodsocialPeriodconsolePeriodanalyticsPeriodsitesPeriodmapping = request.query().get("cq.social.console.analytics.sites.mapping");
    auto priority = request.query().get("priority");
    
    try {
      this->com_adobe_cq_social_reporting_analytics_services_impl_site_trend_report_s(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodsocialPeriodconsolePeriodanalyticsPeriodsitesPeriodmapping, priority, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_review_client_endpoints_impl_review_operations_servi_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto fieldWhitelist = request.query().get("fieldWhitelist");
    auto attachmentTypeBlacklist = request.query().get("attachmentTypeBlacklist");
    
    try {
      this->com_adobe_cq_social_review_client_endpoints_impl_review_operations_servi(post, apply, delete, action, Dollarlocation, propertylist, fieldWhitelist, attachmentTypeBlacklist, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_scf_core_operations_impl_social_operations_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto slingPeriodservletPeriodselectors = request.query().get("sling.servlet.selectors");
    auto slingPeriodservletPeriodextensions = request.query().get("sling.servlet.extensions");
    
    try {
      this->com_adobe_cq_social_scf_core_operations_impl_social_operations_servlet(post, apply, delete, action, Dollarlocation, propertylist, slingPeriodservletPeriodselectors, slingPeriodservletPeriodextensions, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_scf_endpoints_impl_default_social_get_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto slingPeriodservletPeriodselectors = request.query().get("sling.servlet.selectors");
    auto slingPeriodservletPeriodextensions = request.query().get("sling.servlet.extensions");
    
    try {
      this->com_adobe_cq_social_scf_endpoints_impl_default_social_get_servlet(post, apply, delete, action, Dollarlocation, propertylist, slingPeriodservletPeriodselectors, slingPeriodservletPeriodextensions, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_scoring_impl_scoring_event_listener_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto eventPeriodtopics = request.query().get("event.topics");
    auto eventPeriodfilter = request.query().get("event.filter");
    
    try {
      this->com_adobe_cq_social_scoring_impl_scoring_event_listener(post, apply, delete, action, Dollarlocation, propertylist, eventPeriodtopics, eventPeriodfilter, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_serviceusers_internal_impl_service_user_wrapper_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto enableFallback = request.query().get("enableFallback");
    
    try {
      this->com_adobe_cq_social_serviceusers_internal_impl_service_user_wrapper_impl(post, apply, delete, action, Dollarlocation, propertylist, enableFallback, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_site_endpoints_impl_site_operation_service_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto fieldWhitelist = request.query().get("fieldWhitelist");
    auto sitePathFilters = request.query().get("sitePathFilters");
    auto sitePackageGroup = request.query().get("sitePackageGroup");
    
    try {
      this->com_adobe_cq_social_site_endpoints_impl_site_operation_service(post, apply, delete, action, Dollarlocation, propertylist, fieldWhitelist, sitePathFilters, sitePackageGroup, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_site_impl_analytics_component_configuration_service_im_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPeriodsocialPeriodconsolePeriodanalyticsPeriodcomponents = request.query().get("cq.social.console.analytics.components");
    
    try {
      this->com_adobe_cq_social_site_impl_analytics_component_configuration_service_im(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodsocialPeriodconsolePeriodanalyticsPeriodcomponents, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_site_impl_site_configurator_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto componentsUsingTags = request.query().get("componentsUsingTags");
    
    try {
      this->com_adobe_cq_social_site_impl_site_configurator_impl(post, apply, delete, action, Dollarlocation, propertylist, componentsUsingTags, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_srp_impl_social_solr_connector_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto srpPeriodtype = request.query().get("srp.type");
    
    try {
      this->com_adobe_cq_social_srp_impl_social_solr_connector(post, apply, delete, action, Dollarlocation, propertylist, srpPeriodtype, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_sync_impl_diff_changes_observer_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto enabled = request.query().get("enabled");
    auto agentName = request.query().get("agentName");
    auto diffPath = request.query().get("diffPath");
    auto propertyNames = request.query().get("propertyNames");
    
    try {
      this->com_adobe_cq_social_sync_impl_diff_changes_observer(post, apply, delete, action, Dollarlocation, propertylist, enabled, agentName, diffPath, propertyNames, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_sync_impl_group_sync_listener_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto nodetypes = request.query().get("nodetypes");
    auto ignorableprops = request.query().get("ignorableprops");
    auto ignorablenodes = request.query().get("ignorablenodes");
    auto enabled = request.query().get("enabled");
    auto distfolders = request.query().get("distfolders");
    
    try {
      this->com_adobe_cq_social_sync_impl_group_sync_listener_impl(post, apply, delete, action, Dollarlocation, propertylist, nodetypes, ignorableprops, ignorablenodes, enabled, distfolders, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_sync_impl_publisher_sync_service_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto activeRunModes = request.query().get("activeRunModes");
    
    try {
      this->com_adobe_cq_social_sync_impl_publisher_sync_service_impl(post, apply, delete, action, Dollarlocation, propertylist, activeRunModes, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_sync_impl_user_sync_listener_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto nodetypes = request.query().get("nodetypes");
    auto ignorableprops = request.query().get("ignorableprops");
    auto ignorablenodes = request.query().get("ignorablenodes");
    auto enabled = request.query().get("enabled");
    auto distfolders = request.query().get("distfolders");
    
    try {
      this->com_adobe_cq_social_sync_impl_user_sync_listener_impl(post, apply, delete, action, Dollarlocation, propertylist, nodetypes, ignorableprops, ignorablenodes, enabled, distfolders, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_translation_impl_translation_service_config_manager_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto translatePeriodlanguage = request.query().get("translate.language");
    auto translatePerioddisplay = request.query().get("translate.display");
    auto translatePeriodattribution = request.query().get("translate.attribution");
    auto translatePeriodcaching = request.query().get("translate.caching");
    auto translatePeriodsmartPeriodrendering = request.query().get("translate.smart.rendering");
    auto translatePeriodcachingPeriodduration = request.query().get("translate.caching.duration");
    auto translatePeriodsessionPeriodsavePeriodinterval = request.query().get("translate.session.save.interval");
    auto translatePeriodsessionPeriodsavePeriodbatchLimit = request.query().get("translate.session.save.batchLimit");
    
    try {
      this->com_adobe_cq_social_translation_impl_translation_service_config_manager(post, apply, delete, action, Dollarlocation, propertylist, translatePeriodlanguage, translatePerioddisplay, translatePeriodattribution, translatePeriodcaching, translatePeriodsmartPeriodrendering, translatePeriodcachingPeriodduration, translatePeriodsessionPeriodsavePeriodinterval, translatePeriodsessionPeriodsavePeriodbatchLimit, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_translation_impl_ugc_language_detector_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto eventPeriodtopics = request.query().get("event.topics");
    auto eventPeriodfilter = request.query().get("event.filter");
    auto translatePeriodlistenerPeriodtype = request.query().get("translate.listener.type");
    auto translatePeriodpropertyPeriodlist = request.query().get("translate.property.list");
    auto poolSize = request.query().get("poolSize");
    auto maxPoolSize = request.query().get("maxPoolSize");
    auto queueSize = request.query().get("queueSize");
    auto keepAliveTime = request.query().get("keepAliveTime");
    
    try {
      this->com_adobe_cq_social_translation_impl_ugc_language_detector(post, apply, delete, action, Dollarlocation, propertylist, eventPeriodtopics, eventPeriodfilter, translatePeriodlistenerPeriodtype, translatePeriodpropertyPeriodlist, poolSize, maxPoolSize, queueSize, keepAliveTime, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_ugcbase_dispatcher_impl_flush_service_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto threadPoolSize = request.query().get("threadPoolSize");
    auto delayTime = request.query().get("delayTime");
    auto workerSleepTime = request.query().get("workerSleepTime");
    
    try {
      this->com_adobe_cq_social_ugcbase_dispatcher_impl_flush_service_impl(post, apply, delete, action, Dollarlocation, propertylist, threadPoolSize, delayTime, workerSleepTime, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_ugcbase_impl_aysnc_reverse_replicator_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto poolSize = request.query().get("poolSize");
    auto maxPoolSize = request.query().get("maxPoolSize");
    auto queueSize = request.query().get("queueSize");
    auto keepAliveTime = request.query().get("keepAliveTime");
    
    try {
      this->com_adobe_cq_social_ugcbase_impl_aysnc_reverse_replicator_impl(post, apply, delete, action, Dollarlocation, propertylist, poolSize, maxPoolSize, queueSize, keepAliveTime, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_ugcbase_impl_publisher_configuration_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto isPrimaryPublisher = request.query().get("isPrimaryPublisher");
    
    try {
      this->com_adobe_cq_social_ugcbase_impl_publisher_configuration_impl(post, apply, delete, action, Dollarlocation, propertylist, isPrimaryPublisher, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_ugcbase_impl_social_utils_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto legacyCloudUGCPathMapping = request.query().get("legacyCloudUGCPathMapping");
    
    try {
      this->com_adobe_cq_social_ugcbase_impl_social_utils_impl(post, apply, delete, action, Dollarlocation, propertylist, legacyCloudUGCPathMapping, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_ugcbase_moderation_impl_auto_moderation_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto automoderationPeriodsequence = request.query().get("automoderation.sequence");
    auto automoderationPeriodonfailurestop = request.query().get("automoderation.onfailurestop");
    
    try {
      this->com_adobe_cq_social_ugcbase_moderation_impl_auto_moderation_impl(post, apply, delete, action, Dollarlocation, propertylist, automoderationPeriodsequence, automoderationPeriodonfailurestop, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_ugcbase_moderation_impl_sentiment_process_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto watchwordsPeriodpositive = request.query().get("watchwords.positive");
    auto watchwordsPeriodnegative = request.query().get("watchwords.negative");
    auto watchwordsPeriodpath = request.query().get("watchwords.path");
    auto sentimentPeriodpath = request.query().get("sentiment.path");
    
    try {
      this->com_adobe_cq_social_ugcbase_moderation_impl_sentiment_process(post, apply, delete, action, Dollarlocation, propertylist, watchwordsPeriodpositive, watchwordsPeriodnegative, watchwordsPeriodpath, sentimentPeriodpath, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_ugcbase_security_impl_default_attachment_type_blackli_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto defaultPeriodattachmentPeriodtypePeriodblacklist = request.query().get("default.attachment.type.blacklist");
    auto baselinePeriodattachmentPeriodtypePeriodblacklist = request.query().get("baseline.attachment.type.blacklist");
    
    try {
      this->com_adobe_cq_social_ugcbase_security_impl_default_attachment_type_blackli(post, apply, delete, action, Dollarlocation, propertylist, defaultPeriodattachmentPeriodtypePeriodblacklist, baselinePeriodattachmentPeriodtypePeriodblacklist, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_ugcbase_security_impl_safer_sling_post_validator_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto parameterPeriodwhitelist = request.query().get("parameter.whitelist");
    auto parameterPeriodwhitelistPeriodprefixes = request.query().get("parameter.whitelist.prefixes");
    auto binaryPeriodparameterPeriodwhitelist = request.query().get("binary.parameter.whitelist");
    auto modifierPeriodwhitelist = request.query().get("modifier.whitelist");
    auto operationPeriodwhitelist = request.query().get("operation.whitelist");
    auto operationPeriodwhitelistPeriodprefixes = request.query().get("operation.whitelist.prefixes");
    auto typehintPeriodwhitelist = request.query().get("typehint.whitelist");
    auto resourcetypePeriodwhitelist = request.query().get("resourcetype.whitelist");
    
    try {
      this->com_adobe_cq_social_ugcbase_security_impl_safer_sling_post_validator_impl(post, apply, delete, action, Dollarlocation, propertylist, parameterPeriodwhitelist, parameterPeriodwhitelistPeriodprefixes, binaryPeriodparameterPeriodwhitelist, modifierPeriodwhitelist, operationPeriodwhitelist, operationPeriodwhitelistPeriodprefixes, typehintPeriodwhitelist, resourcetypePeriodwhitelist, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_user_endpoints_impl_users_group_from_publish_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto slingPeriodservletPeriodextensions = request.query().get("sling.servlet.extensions");
    auto slingPeriodservletPeriodpaths = request.query().get("sling.servlet.paths");
    auto slingPeriodservletPeriodmethods = request.query().get("sling.servlet.methods");
    
    try {
      this->com_adobe_cq_social_user_endpoints_impl_users_group_from_publish_servlet(post, apply, delete, action, Dollarlocation, propertylist, slingPeriodservletPeriodextensions, slingPeriodservletPeriodpaths, slingPeriodservletPeriodmethods, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_social_user_impl_transport_http_to_publisher_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto enable = request.query().get("enable");
    auto agentPeriodconfiguration = request.query().get("agent.configuration");
    auto contextPeriodpath = request.query().get("context.path");
    auto disabledPeriodcipherPeriodsuites = request.query().get("disabled.cipher.suites");
    auto enabledPeriodcipherPeriodsuites = request.query().get("enabled.cipher.suites");
    
    try {
      this->com_adobe_cq_social_user_impl_transport_http_to_publisher(post, apply, delete, action, Dollarlocation, propertylist, enable, agentPeriodconfiguration, contextPeriodpath, disabledPeriodcipherPeriodsuites, enabledPeriodcipherPeriodsuites, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_ui_wcm_commons_internal_servlets_rte_rte_filter_servlet_fact_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto resourcePeriodtypes = request.query().get("resource.types");
    
    try {
      this->com_adobe_cq_ui_wcm_commons_internal_servlets_rte_rte_filter_servlet_fact(post, apply, delete, action, Dollarlocation, propertylist, resourcePeriodtypes, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_upgrades_cleanup_impl_upgrade_content_cleanup_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto deletePeriodpathPeriodregexps = request.query().get("delete.path.regexps");
    auto deletePeriodsql2Periodquery = request.query().get("delete.sql2.query");
    
    try {
      this->com_adobe_cq_upgrades_cleanup_impl_upgrade_content_cleanup(post, apply, delete, action, Dollarlocation, propertylist, deletePeriodpathPeriodregexps, deletePeriodsql2Periodquery, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_upgrades_cleanup_impl_upgrade_install_folder_cleanup_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto deletePeriodnamePeriodregexps = request.query().get("delete.name.regexps");
    
    try {
      this->com_adobe_cq_upgrades_cleanup_impl_upgrade_install_folder_cleanup(post, apply, delete, action, Dollarlocation, propertylist, deletePeriodnamePeriodregexps, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_wcm_jobs_async_impl_async_delete_config_provider_service_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto threshold = request.query().get("threshold");
    auto jobTopicName = request.query().get("jobTopicName");
    auto emailEnabled = request.query().get("emailEnabled");
    
    try {
      this->com_adobe_cq_wcm_jobs_async_impl_async_delete_config_provider_service(post, apply, delete, action, Dollarlocation, propertylist, threshold, jobTopicName, emailEnabled, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_wcm_jobs_async_impl_async_job_clean_up_task_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto schedulerPeriodexpression = request.query().get("scheduler.expression");
    auto jobPeriodpurgePeriodthreshold = request.query().get("job.purge.threshold");
    auto jobPeriodpurgePeriodmaxPeriodjobs = request.query().get("job.purge.max.jobs");
    
    try {
      this->com_adobe_cq_wcm_jobs_async_impl_async_job_clean_up_task(post, apply, delete, action, Dollarlocation, propertylist, schedulerPeriodexpression, jobPeriodpurgePeriodthreshold, jobPeriodpurgePeriodmaxPeriodjobs, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_wcm_jobs_async_impl_async_move_config_provider_service_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto threshold = request.query().get("threshold");
    auto jobTopicName = request.query().get("jobTopicName");
    auto emailEnabled = request.query().get("emailEnabled");
    
    try {
      this->com_adobe_cq_wcm_jobs_async_impl_async_move_config_provider_service(post, apply, delete, action, Dollarlocation, propertylist, threshold, jobTopicName, emailEnabled, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_wcm_jobs_async_impl_async_page_move_config_provider_service_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto threshold = request.query().get("threshold");
    auto jobTopicName = request.query().get("jobTopicName");
    auto emailEnabled = request.query().get("emailEnabled");
    
    try {
      this->com_adobe_cq_wcm_jobs_async_impl_async_page_move_config_provider_service(post, apply, delete, action, Dollarlocation, propertylist, threshold, jobTopicName, emailEnabled, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_wcm_launches_impl_launches_event_handler_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto eventPeriodfilter = request.query().get("event.filter");
    auto launchesPeriodeventhandlerPeriodthreadpoolPeriodmaxsize = request.query().get("launches.eventhandler.threadpool.maxsize");
    auto launchesPeriodeventhandlerPeriodthreadpoolPeriodpriority = request.query().get("launches.eventhandler.threadpool.priority");
    auto launchesPeriodeventhandlerPeriodupdatelastmodification = request.query().get("launches.eventhandler.updatelastmodification");
    
    try {
      this->com_adobe_cq_wcm_launches_impl_launches_event_handler(post, apply, delete, action, Dollarlocation, propertylist, eventPeriodfilter, launchesPeriodeventhandlerPeriodthreadpoolPeriodmaxsize, launchesPeriodeventhandlerPeriodthreadpoolPeriodpriority, launchesPeriodeventhandlerPeriodupdatelastmodification, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_wcm_mobile_qrcode_servlet_qr_code_image_generator_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPeriodwcmPeriodqrcodePeriodservletPeriodwhitelist = request.query().get("cq.wcm.qrcode.servlet.whitelist");
    
    try {
      this->com_adobe_cq_wcm_mobile_qrcode_servlet_qr_code_image_generator(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodwcmPeriodqrcodePeriodservletPeriodwhitelist, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_wcm_style_internal_component_style_info_cache_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto size = request.query().get("size");
    
    try {
      this->com_adobe_cq_wcm_style_internal_component_style_info_cache_impl(post, apply, delete, action, Dollarlocation, propertylist, size, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_cq_wcm_translation_impl_translation_platform_configuration_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto syncTranslationStatePeriodschedulingFormat = request.query().get("syncTranslationState.schedulingFormat");
    auto schedulingRepeatTranslationPeriodschedulingFormat = request.query().get("schedulingRepeatTranslation.schedulingFormat");
    auto syncTranslationStatePeriodlockTimeoutInMinutes = request.query().get("syncTranslationState.lockTimeoutInMinutes");
    auto exportPeriodformat = request.query().get("export.format");
    
    try {
      this->com_adobe_cq_wcm_translation_impl_translation_platform_configuration_impl(post, apply, delete, action, Dollarlocation, propertylist, syncTranslationStatePeriodschedulingFormat, schedulingRepeatTranslationPeriodschedulingFormat, syncTranslationStatePeriodlockTimeoutInMinutes, exportPeriodformat, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_fd_fp_config_forms_portal_draftsand_submission_config_service_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto portalPeriodoutboxes = request.query().get("portal.outboxes");
    auto draftPerioddataPeriodservice = request.query().get("draft.data.service");
    auto draftPeriodmetadataPeriodservice = request.query().get("draft.metadata.service");
    auto submitPerioddataPeriodservice = request.query().get("submit.data.service");
    auto submitPeriodmetadataPeriodservice = request.query().get("submit.metadata.service");
    auto pendingSignPerioddataPeriodservice = request.query().get("pendingSign.data.service");
    auto pendingSignPeriodmetadataPeriodservice = request.query().get("pendingSign.metadata.service");
    
    try {
      this->com_adobe_fd_fp_config_forms_portal_draftsand_submission_config_service(post, apply, delete, action, Dollarlocation, propertylist, portalPeriodoutboxes, draftPerioddataPeriodservice, draftPeriodmetadataPeriodservice, submitPerioddataPeriodservice, submitPeriodmetadataPeriodservice, pendingSignPerioddataPeriodservice, pendingSignPeriodmetadataPeriodservice, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_fd_fp_config_forms_portal_scheduler_service_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto formportalPeriodinterval = request.query().get("formportal.interval");
    
    try {
      this->com_adobe_fd_fp_config_forms_portal_scheduler_service(post, apply, delete, action, Dollarlocation, propertylist, formportalPeriodinterval, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_forms_common_service_impl_default_data_provider_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto alloweddataFileLocations = request.query().get("alloweddataFileLocations");
    
    try {
      this->com_adobe_forms_common_service_impl_default_data_provider(post, apply, delete, action, Dollarlocation, propertylist, alloweddataFileLocations, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_forms_common_service_impl_forms_common_configuration_service_imp_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto tempStorageConfig = request.query().get("tempStorageConfig");
    
    try {
      this->com_adobe_forms_common_service_impl_forms_common_configuration_service_imp(post, apply, delete, action, Dollarlocation, propertylist, tempStorageConfig, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_forms_common_servlet_temp_clean_up_task_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto schedulerPeriodexpression = request.query().get("scheduler.expression");
    auto duration_for_Temporary_Storage = request.query().get("Duration for Temporary Storage");
    auto duration_for_Anonymous_Storage = request.query().get("Duration for Anonymous Storage");
    
    try {
      this->com_adobe_forms_common_servlet_temp_clean_up_task(post, apply, delete, action, Dollarlocation, propertylist, schedulerPeriodexpression, duration_for_Temporary_Storage, duration_for_Anonymous_Storage, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_acp_platform_platform_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto queryPeriodlimit = request.query().get("query.limit");
    auto filePeriodtypePeriodextensionPeriodmap = request.query().get("file.type.extension.map");
    
    try {
      this->com_adobe_granite_acp_platform_platform_servlet(post, apply, delete, action, Dollarlocation, propertylist, queryPeriodlimit, filePeriodtypePeriodextensionPeriodmap, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_activitystreams_impl_activity_manager_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto aggregatePeriodrelationships = request.query().get("aggregate.relationships");
    auto aggregatePerioddescendPeriodvirtual = request.query().get("aggregate.descend.virtual");
    
    try {
      this->com_adobe_granite_activitystreams_impl_activity_manager_impl(post, apply, delete, action, Dollarlocation, propertylist, aggregatePeriodrelationships, aggregatePerioddescendPeriodvirtual, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_analyzer_base_system_status_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto disabled = request.query().get("disabled");
    
    try {
      this->com_adobe_granite_analyzer_base_system_status_servlet(post, apply, delete, action, Dollarlocation, propertylist, disabled, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_analyzer_scripts_compile_all_scripts_compiler_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto disabled = request.query().get("disabled");
    
    try {
      this->com_adobe_granite_analyzer_scripts_compile_all_scripts_compiler_servlet(post, apply, delete, action, Dollarlocation, propertylist, disabled, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_apicontroller_filter_resolver_hook_factory_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto comPeriodadobePeriodcqPeriodcdnPeriodcdnRewriter = request.query().get("com.adobe.cq.cdn.cdn-rewriter");
    auto comPeriodadobePeriodcqPeriodcloudConfigPeriodcomponents = request.query().get("com.adobe.cq.cloud-config.components");
    auto comPeriodadobePeriodcqPeriodcloudConfigPeriodcore = request.query().get("com.adobe.cq.cloud-config.core");
    auto comPeriodadobePeriodcqPeriodcloudConfigPeriodui = request.query().get("com.adobe.cq.cloud-config.ui");
    auto comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodeditor = request.query().get("com.adobe.cq.com.adobe.cq.editor");
    auto comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodprojectsPeriodcore = request.query().get("com.adobe.cq.com.adobe.cq.projects.core");
    auto comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodprojectsPeriodwcmPeriodcore = request.query().get("com.adobe.cq.com.adobe.cq.projects.wcm.core");
    auto comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPerioduiPeriodcommons = request.query().get("com.adobe.cq.com.adobe.cq.ui.commons");
    auto comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodwcmPeriodstyle = request.query().get("com.adobe.cq.com.adobe.cq.wcm.style");
    auto comPeriodadobePeriodcqPeriodcqActivitymapIntegration = request.query().get("com.adobe.cq.cq-activitymap-integration");
    auto comPeriodadobePeriodcqPeriodcqContexthubCommons = request.query().get("com.adobe.cq.cq-contexthub-commons");
    auto comPeriodadobePeriodcqPeriodcqDtm = request.query().get("com.adobe.cq.cq-dtm");
    auto comPeriodadobePeriodcqPeriodcqHealthcheck = request.query().get("com.adobe.cq.cq-healthcheck");
    auto comPeriodadobePeriodcqPeriodcqMultisiteTargeting = request.query().get("com.adobe.cq.cq-multisite-targeting");
    auto comPeriodadobePeriodcqPeriodcqPreUpgradeCleanup = request.query().get("com.adobe.cq.cq-pre-upgrade-cleanup");
    auto comPeriodadobePeriodcqPeriodcqProductInfoProvider = request.query().get("com.adobe.cq.cq-product-info-provider");
    auto comPeriodadobePeriodcqPeriodcqRestSites = request.query().get("com.adobe.cq.cq-rest-sites");
    auto comPeriodadobePeriodcqPeriodcqSecurityHc = request.query().get("com.adobe.cq.cq-security-hc");
    auto comPeriodadobePeriodcqPerioddamPeriodcqDamSvgHandler = request.query().get("com.adobe.cq.dam.cq-dam-svg-handler");
    auto comPeriodadobePeriodcqPerioddamPeriodcqScene7Imaging = request.query().get("com.adobe.cq.dam.cq-scene7-imaging");
    auto comPeriodadobePeriodcqPerioddtmReactorPeriodcore = request.query().get("com.adobe.cq.dtm-reactor.core");
    auto comPeriodadobePeriodcqPerioddtmReactorPeriodui = request.query().get("com.adobe.cq.dtm-reactor.ui");
    auto comPeriodadobePeriodcqPeriodexpJspelResolver = request.query().get("com.adobe.cq.exp-jspel-resolver");
    auto comPeriodadobePeriodcqPeriodinboxPeriodcqInbox = request.query().get("com.adobe.cq.inbox.cq-inbox");
    auto comPeriodadobePeriodcqPeriodjsonSchemaParser = request.query().get("com.adobe.cq.json-schema-parser");
    auto comPeriodadobePeriodcqPeriodmediaPeriodcqMediaPublishingDpsFpCore = request.query().get("com.adobe.cq.media.cq-media-publishing-dps-fp-core");
    auto comPeriodadobePeriodcqPeriodmobilePeriodcqMobileCaas = request.query().get("com.adobe.cq.mobile.cq-mobile-caas");
    auto comPeriodadobePeriodcqPeriodmobilePeriodcqMobileIndexBuilder = request.query().get("com.adobe.cq.mobile.cq-mobile-index-builder");
    auto comPeriodadobePeriodcqPeriodmobilePeriodcqMobilePhonegapBuild = request.query().get("com.adobe.cq.mobile.cq-mobile-phonegap-build");
    auto comPeriodadobePeriodcqPeriodmyspell = request.query().get("com.adobe.cq.myspell");
    auto comPeriodadobePeriodcqPeriodsamplePeriodwePeriodretailPeriodcore = request.query().get("com.adobe.cq.sample.we.retail.core");
    auto comPeriodadobePeriodcqPeriodscreensPeriodcomPeriodadobePeriodcqPeriodscreensPerioddcc = request.query().get("com.adobe.cq.screens.com.adobe.cq.screens.dcc");
    auto comPeriodadobePeriodcqPeriodscreensPeriodcomPeriodadobePeriodcqPeriodscreensPeriodmqPeriodcore = request.query().get("com.adobe.cq.screens.com.adobe.cq.screens.mq.core");
    auto comPeriodadobePeriodcqPeriodsocialPeriodcqSocialAsProvider = request.query().get("com.adobe.cq.social.cq-social-as-provider");
    auto comPeriodadobePeriodcqPeriodsocialPeriodcqSocialBadgingBasicImpl = request.query().get("com.adobe.cq.social.cq-social-badging-basic-impl");
    auto comPeriodadobePeriodcqPeriodsocialPeriodcqSocialBadgingImpl = request.query().get("com.adobe.cq.social.cq-social-badging-impl");
    auto comPeriodadobePeriodcqPeriodsocialPeriodcqSocialCalendarImpl = request.query().get("com.adobe.cq.social.cq-social-calendar-impl");
    auto comPeriodadobePeriodcqPeriodsocialPeriodcqSocialContentFragmentsImpl = request.query().get("com.adobe.cq.social.cq-social-content-fragments-impl");
    auto comPeriodadobePeriodcqPeriodsocialPeriodcqSocialEnablementImpl = request.query().get("com.adobe.cq.social.cq-social-enablement-impl");
    auto comPeriodadobePeriodcqPeriodsocialPeriodcqSocialGraphImpl = request.query().get("com.adobe.cq.social.cq-social-graph-impl");
    auto comPeriodadobePeriodcqPeriodsocialPeriodcqSocialIdeationImpl = request.query().get("com.adobe.cq.social.cq-social-ideation-impl");
    auto comPeriodadobePeriodcqPeriodsocialPeriodcqSocialJcrProvider = request.query().get("com.adobe.cq.social.cq-social-jcr-provider");
    auto comPeriodadobePeriodcqPeriodsocialPeriodcqSocialMembersImpl = request.query().get("com.adobe.cq.social.cq-social-members-impl");
    auto comPeriodadobePeriodcqPeriodsocialPeriodcqSocialMsProvider = request.query().get("com.adobe.cq.social.cq-social-ms-provider");
    auto comPeriodadobePeriodcqPeriodsocialPeriodcqSocialNotificationsChannelsWeb = request.query().get("com.adobe.cq.social.cq-social-notifications-channels-web");
    auto comPeriodadobePeriodcqPeriodsocialPeriodcqSocialNotificationsImpl = request.query().get("com.adobe.cq.social.cq-social-notifications-impl");
    auto comPeriodadobePeriodcqPeriodsocialPeriodcqSocialRdbProvider = request.query().get("com.adobe.cq.social.cq-social-rdb-provider");
    auto comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScfImpl = request.query().get("com.adobe.cq.social.cq-social-scf-impl");
    auto comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScoringBasicImpl = request.query().get("com.adobe.cq.social.cq-social-scoring-basic-impl");
    auto comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScoringImpl = request.query().get("com.adobe.cq.social.cq-social-scoring-impl");
    auto comPeriodadobePeriodcqPeriodsocialPeriodcqSocialServiceusersImpl = request.query().get("com.adobe.cq.social.cq-social-serviceusers-impl");
    auto comPeriodadobePeriodcqPeriodsocialPeriodcqSocialSrpImpl = request.query().get("com.adobe.cq.social.cq-social-srp-impl");
    auto comPeriodadobePeriodcqPeriodsocialPeriodcqSocialUgcbaseImpl = request.query().get("com.adobe.cq.social.cq-social-ugcbase-impl");
    auto comPeriodadobePerioddamPeriodcqDamCfmImpl = request.query().get("com.adobe.dam.cq-dam-cfm-impl");
    auto comPeriodadobePeriodformsPeriodfoundationFormsFoundationBase = request.query().get("com.adobe.forms.foundation-forms-foundation-base");
    auto comPeriodadobePeriodgranitePeriodapicontroller = request.query().get("com.adobe.granite.apicontroller");
    auto comPeriodadobePeriodgranitePeriodassetPeriodcore = request.query().get("com.adobe.granite.asset.core");
    auto comPeriodadobePeriodgranitePeriodauthPeriodsso = request.query().get("com.adobe.granite.auth.sso");
    auto comPeriodadobePeriodgranitePeriodbundlesPeriodhcPeriodimpl = request.query().get("com.adobe.granite.bundles.hc.impl");
    auto comPeriodadobePeriodgranitePeriodcompatRouter = request.query().get("com.adobe.granite.compat-router");
    auto comPeriodadobePeriodgranitePeriodconf = request.query().get("com.adobe.granite.conf");
    auto comPeriodadobePeriodgranitePeriodconfPerioduiPeriodcore = request.query().get("com.adobe.granite.conf.ui.core");
    auto comPeriodadobePeriodgranitePeriodcors = request.query().get("com.adobe.granite.cors");
    auto comPeriodadobePeriodgranitePeriodcrxExplorer = request.query().get("com.adobe.granite.crx-explorer");
    auto comPeriodadobePeriodgranitePeriodcrxdeLite = request.query().get("com.adobe.granite.crxde-lite");
    auto comPeriodadobePeriodgranitePeriodcryptoPeriodconfig = request.query().get("com.adobe.granite.crypto.config");
    auto comPeriodadobePeriodgranitePeriodcryptoPeriodextension = request.query().get("com.adobe.granite.crypto.extension");
    auto comPeriodadobePeriodgranitePeriodcryptoPeriodfile = request.query().get("com.adobe.granite.crypto.file");
    auto comPeriodadobePeriodgranitePeriodcryptoPeriodjcr = request.query().get("com.adobe.granite.crypto.jcr");
    auto comPeriodadobePeriodgranitePeriodcsrf = request.query().get("com.adobe.granite.csrf");
    auto comPeriodadobePeriodgranitePerioddistributionPeriodcore = request.query().get("com.adobe.granite.distribution.core");
    auto comPeriodadobePeriodgranitePerioddropwizardPeriodmetrics = request.query().get("com.adobe.granite.dropwizard.metrics");
    auto comPeriodadobePeriodgranitePeriodfragsPeriodimpl = request.query().get("com.adobe.granite.frags.impl");
    auto comPeriodadobePeriodgranitePeriodgibson = request.query().get("com.adobe.granite.gibson");
    auto comPeriodadobePeriodgranitePeriodinfocollector = request.query().get("com.adobe.granite.infocollector");
    auto comPeriodadobePeriodgranitePeriodinstallerPeriodfactoryPeriodpackages = request.query().get("com.adobe.granite.installer.factory.packages");
    auto comPeriodadobePeriodgranitePeriodjettyPeriodssl = request.query().get("com.adobe.granite.jetty.ssl");
    auto comPeriodadobePeriodgranitePeriodjobsPeriodasync = request.query().get("com.adobe.granite.jobs.async");
    auto comPeriodadobePeriodgranitePeriodmaintenancePeriodoak = request.query().get("com.adobe.granite.maintenance.oak");
    auto comPeriodadobePeriodgranitePeriodmonitoringPeriodcore = request.query().get("com.adobe.granite.monitoring.core");
    auto comPeriodadobePeriodgranitePeriodqueries = request.query().get("com.adobe.granite.queries");
    auto comPeriodadobePeriodgranitePeriodreplicationPeriodhcPeriodimpl = request.query().get("com.adobe.granite.replication.hc.impl");
    auto comPeriodadobePeriodgranitePeriodrepositoryPeriodchecker = request.query().get("com.adobe.granite.repository.checker");
    auto comPeriodadobePeriodgranitePeriodrepositoryPeriodhcPeriodimpl = request.query().get("com.adobe.granite.repository.hc.impl");
    auto comPeriodadobePeriodgranitePeriodrestPeriodassets = request.query().get("com.adobe.granite.rest.assets");
    auto comPeriodadobePeriodgranitePeriodsecurityPeriodui = request.query().get("com.adobe.granite.security.ui");
    auto comPeriodadobePeriodgranitePeriodstartup = request.query().get("com.adobe.granite.startup");
    auto comPeriodadobePeriodgranitePeriodtagsoup = request.query().get("com.adobe.granite.tagsoup");
    auto comPeriodadobePeriodgranitePeriodtaskmanagementPeriodcore = request.query().get("com.adobe.granite.taskmanagement.core");
    auto comPeriodadobePeriodgranitePeriodtaskmanagementPeriodworkflow = request.query().get("com.adobe.granite.taskmanagement.workflow");
    auto comPeriodadobePeriodgranitePerioduiPeriodclientlibsPeriodcompilerPeriodless = request.query().get("com.adobe.granite.ui.clientlibs.compiler.less");
    auto comPeriodadobePeriodgranitePerioduiPeriodclientlibsPeriodprocessorPeriodgcc = request.query().get("com.adobe.granite.ui.clientlibs.processor.gcc");
    auto comPeriodadobePeriodgranitePeriodwebconsolePeriodplugins = request.query().get("com.adobe.granite.webconsole.plugins");
    auto comPeriodadobePeriodgranitePeriodworkflowPeriodconsole = request.query().get("com.adobe.granite.workflow.console");
    auto comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodlinux = request.query().get("com.adobe.xmp.worker.files.native.fragment.linux");
    auto comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodmacosx = request.query().get("com.adobe.xmp.worker.files.native.fragment.macosx");
    auto comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodwin = request.query().get("com.adobe.xmp.worker.files.native.fragment.win");
    auto comPerioddayPeriodcommonsPeriodosgiPeriodwrapperPeriodsimpleJndi = request.query().get("com.day.commons.osgi.wrapper.simple-jndi");
    auto comPerioddayPeriodcqPeriodcqAuthhandler = request.query().get("com.day.cq.cq-authhandler");
    auto comPerioddayPeriodcqPeriodcqCompatConfigupdate = request.query().get("com.day.cq.cq-compat-configupdate");
    auto comPerioddayPeriodcqPeriodcqLicensebranding = request.query().get("com.day.cq.cq-licensebranding");
    auto comPerioddayPeriodcqPeriodcqNotifcationImpl = request.query().get("com.day.cq.cq-notifcation-impl");
    auto comPerioddayPeriodcqPeriodcqReplicationAudit = request.query().get("com.day.cq.cq-replication-audit");
    auto comPerioddayPeriodcqPeriodcqSearchExt = request.query().get("com.day.cq.cq-search-ext");
    auto comPerioddayPeriodcqPerioddamPeriodcqDamAnnotationPrint = request.query().get("com.day.cq.dam.cq-dam-annotation-print");
    auto comPerioddayPeriodcqPerioddamPeriodcqDamAssetUsage = request.query().get("com.day.cq.dam.cq-dam-asset-usage");
    auto comPerioddayPeriodcqPerioddamPeriodcqDamS7dam = request.query().get("com.day.cq.dam.cq-dam-s7dam");
    auto comPerioddayPeriodcqPerioddamPeriodcqDamSimilaritysearch = request.query().get("com.day.cq.dam.cq-dam-similaritysearch");
    auto comPerioddayPeriodcqPerioddamPerioddamWebdavSupport = request.query().get("com.day.cq.dam.dam-webdav-support");
    auto comPerioddayPeriodcqPeriodpreUpgradeTasks = request.query().get("com.day.cq.pre-upgrade-tasks");
    auto comPerioddayPeriodcqPeriodreplicationPeriodextensions = request.query().get("com.day.cq.replication.extensions");
    auto comPerioddayPeriodcqPeriodwcmPeriodcqMsmCore = request.query().get("com.day.cq.wcm.cq-msm-core");
    auto comPerioddayPeriodcqPeriodwcmPeriodcqWcmTranslation = request.query().get("com.day.cq.wcm.cq-wcm-translation");
    auto dayCommonsJrawio = request.query().get("day-commons-jrawio");
    auto orgPeriodapachePeriodariesPeriodjmxPeriodwhiteboard = request.query().get("org.apache.aries.jmx.whiteboard");
    auto orgPeriodapachePeriodfelixPeriodhttpPeriodsslfilter = request.query().get("org.apache.felix.http.sslfilter");
    auto orgPeriodapachePeriodfelixPeriodorgPeriodapachePeriodfelixPeriodthreaddump = request.query().get("org.apache.felix.org.apache.felix.threaddump");
    auto orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodds = request.query().get("org.apache.felix.webconsole.plugins.ds");
    auto orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodevent = request.query().get("org.apache.felix.webconsole.plugins.event");
    auto orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodmemoryusage = request.query().get("org.apache.felix.webconsole.plugins.memoryusage");
    auto orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodpackageadmin = request.query().get("org.apache.felix.webconsole.plugins.packageadmin");
    auto orgPeriodapachePeriodjackrabbitPeriodoakAuthLdap = request.query().get("org.apache.jackrabbit.oak-auth-ldap");
    auto orgPeriodapachePeriodjackrabbitPeriodoakSegmentTar = request.query().get("org.apache.jackrabbit.oak-segment-tar");
    auto orgPeriodapachePeriodjackrabbitPeriodoakSolrOsgi = request.query().get("org.apache.jackrabbit.oak-solr-osgi");
    auto orgPeriodapachePeriodslingPeriodbundleresourcePeriodimpl = request.query().get("org.apache.sling.bundleresource.impl");
    auto orgPeriodapachePeriodslingPeriodcommonsPeriodfsclassloader = request.query().get("org.apache.sling.commons.fsclassloader");
    auto orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodwebconsole = request.query().get("org.apache.sling.commons.log.webconsole");
    auto orgPeriodapachePeriodslingPerioddatasource = request.query().get("org.apache.sling.datasource");
    auto orgPeriodapachePeriodslingPerioddiscoveryPeriodbase = request.query().get("org.apache.sling.discovery.base");
    auto orgPeriodapachePeriodslingPerioddiscoveryPeriodoak = request.query().get("org.apache.sling.discovery.oak");
    auto orgPeriodapachePeriodslingPerioddiscoveryPeriodsupport = request.query().get("org.apache.sling.discovery.support");
    auto orgPeriodapachePeriodslingPerioddistributionPeriodapi = request.query().get("org.apache.sling.distribution.api");
    auto orgPeriodapachePeriodslingPerioddistributionPeriodcore = request.query().get("org.apache.sling.distribution.core");
    auto orgPeriodapachePeriodslingPeriodextensionsPeriodwebconsolesecurityprovider = request.query().get("org.apache.sling.extensions.webconsolesecurityprovider");
    auto orgPeriodapachePeriodslingPeriodhcPeriodwebconsole = request.query().get("org.apache.sling.hc.webconsole");
    auto orgPeriodapachePeriodslingPeriodinstallerPeriodconsole = request.query().get("org.apache.sling.installer.console");
    auto orgPeriodapachePeriodslingPeriodinstallerPeriodproviderPeriodfile = request.query().get("org.apache.sling.installer.provider.file");
    auto orgPeriodapachePeriodslingPeriodinstallerPeriodproviderPeriodjcr = request.query().get("org.apache.sling.installer.provider.jcr");
    auto orgPeriodapachePeriodslingPeriodjcrPerioddavex = request.query().get("org.apache.sling.jcr.davex");
    auto orgPeriodapachePeriodslingPeriodjcrPeriodresourcesecurity = request.query().get("org.apache.sling.jcr.resourcesecurity");
    auto orgPeriodapachePeriodslingPeriodjmxPeriodprovider = request.query().get("org.apache.sling.jmx.provider");
    auto orgPeriodapachePeriodslingPeriodlaunchpadPeriodinstaller = request.query().get("org.apache.sling.launchpad.installer");
    auto orgPeriodapachePeriodslingPeriodmodelsPeriodimpl = request.query().get("org.apache.sling.models.impl");
    auto orgPeriodapachePeriodslingPeriodrepoinitPeriodparser = request.query().get("org.apache.sling.repoinit.parser");
    auto orgPeriodapachePeriodslingPeriodresourcePeriodinventory = request.query().get("org.apache.sling.resource.inventory");
    auto orgPeriodapachePeriodslingPeriodresourceresolver = request.query().get("org.apache.sling.resourceresolver");
    auto orgPeriodapachePeriodslingPeriodscriptingPeriodjavascript = request.query().get("org.apache.sling.scripting.javascript");
    auto orgPeriodapachePeriodslingPeriodscriptingPeriodjst = request.query().get("org.apache.sling.scripting.jst");
    auto orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodjsPeriodprovider = request.query().get("org.apache.sling.scripting.sightly.js.provider");
    auto orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodmodelsPeriodprovider = request.query().get("org.apache.sling.scripting.sightly.models.provider");
    auto orgPeriodapachePeriodslingPeriodsecurity = request.query().get("org.apache.sling.security");
    auto orgPeriodapachePeriodslingPeriodservletsPeriodcompat = request.query().get("org.apache.sling.servlets.compat");
    auto orgPeriodapachePeriodslingPeriodservletsPeriodget = request.query().get("org.apache.sling.servlets.get");
    auto orgPeriodapachePeriodslingPeriodstartupfilterPerioddisabler = request.query().get("org.apache.sling.startupfilter.disabler");
    auto orgPeriodapachePeriodslingPeriodtracer = request.query().get("org.apache.sling.tracer");
    auto wePeriodretailPeriodclientPeriodappPeriodcore = request.query().get("we.retail.client.app.core");
    
    try {
      this->com_adobe_granite_apicontroller_filter_resolver_hook_factory(post, apply, delete, action, Dollarlocation, propertylist, comPeriodadobePeriodcqPeriodcdnPeriodcdnRewriter, comPeriodadobePeriodcqPeriodcloudConfigPeriodcomponents, comPeriodadobePeriodcqPeriodcloudConfigPeriodcore, comPeriodadobePeriodcqPeriodcloudConfigPeriodui, comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodeditor, comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodprojectsPeriodcore, comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodprojectsPeriodwcmPeriodcore, comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPerioduiPeriodcommons, comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodwcmPeriodstyle, comPeriodadobePeriodcqPeriodcqActivitymapIntegration, comPeriodadobePeriodcqPeriodcqContexthubCommons, comPeriodadobePeriodcqPeriodcqDtm, comPeriodadobePeriodcqPeriodcqHealthcheck, comPeriodadobePeriodcqPeriodcqMultisiteTargeting, comPeriodadobePeriodcqPeriodcqPreUpgradeCleanup, comPeriodadobePeriodcqPeriodcqProductInfoProvider, comPeriodadobePeriodcqPeriodcqRestSites, comPeriodadobePeriodcqPeriodcqSecurityHc, comPeriodadobePeriodcqPerioddamPeriodcqDamSvgHandler, comPeriodadobePeriodcqPerioddamPeriodcqScene7Imaging, comPeriodadobePeriodcqPerioddtmReactorPeriodcore, comPeriodadobePeriodcqPerioddtmReactorPeriodui, comPeriodadobePeriodcqPeriodexpJspelResolver, comPeriodadobePeriodcqPeriodinboxPeriodcqInbox, comPeriodadobePeriodcqPeriodjsonSchemaParser, comPeriodadobePeriodcqPeriodmediaPeriodcqMediaPublishingDpsFpCore, comPeriodadobePeriodcqPeriodmobilePeriodcqMobileCaas, comPeriodadobePeriodcqPeriodmobilePeriodcqMobileIndexBuilder, comPeriodadobePeriodcqPeriodmobilePeriodcqMobilePhonegapBuild, comPeriodadobePeriodcqPeriodmyspell, comPeriodadobePeriodcqPeriodsamplePeriodwePeriodretailPeriodcore, comPeriodadobePeriodcqPeriodscreensPeriodcomPeriodadobePeriodcqPeriodscreensPerioddcc, comPeriodadobePeriodcqPeriodscreensPeriodcomPeriodadobePeriodcqPeriodscreensPeriodmqPeriodcore, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialAsProvider, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialBadgingBasicImpl, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialBadgingImpl, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialCalendarImpl, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialContentFragmentsImpl, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialEnablementImpl, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialGraphImpl, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialIdeationImpl, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialJcrProvider, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialMembersImpl, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialMsProvider, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialNotificationsChannelsWeb, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialNotificationsImpl, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialRdbProvider, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScfImpl, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScoringBasicImpl, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScoringImpl, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialServiceusersImpl, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialSrpImpl, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialUgcbaseImpl, comPeriodadobePerioddamPeriodcqDamCfmImpl, comPeriodadobePeriodformsPeriodfoundationFormsFoundationBase, comPeriodadobePeriodgranitePeriodapicontroller, comPeriodadobePeriodgranitePeriodassetPeriodcore, comPeriodadobePeriodgranitePeriodauthPeriodsso, comPeriodadobePeriodgranitePeriodbundlesPeriodhcPeriodimpl, comPeriodadobePeriodgranitePeriodcompatRouter, comPeriodadobePeriodgranitePeriodconf, comPeriodadobePeriodgranitePeriodconfPerioduiPeriodcore, comPeriodadobePeriodgranitePeriodcors, comPeriodadobePeriodgranitePeriodcrxExplorer, comPeriodadobePeriodgranitePeriodcrxdeLite, comPeriodadobePeriodgranitePeriodcryptoPeriodconfig, comPeriodadobePeriodgranitePeriodcryptoPeriodextension, comPeriodadobePeriodgranitePeriodcryptoPeriodfile, comPeriodadobePeriodgranitePeriodcryptoPeriodjcr, comPeriodadobePeriodgranitePeriodcsrf, comPeriodadobePeriodgranitePerioddistributionPeriodcore, comPeriodadobePeriodgranitePerioddropwizardPeriodmetrics, comPeriodadobePeriodgranitePeriodfragsPeriodimpl, comPeriodadobePeriodgranitePeriodgibson, comPeriodadobePeriodgranitePeriodinfocollector, comPeriodadobePeriodgranitePeriodinstallerPeriodfactoryPeriodpackages, comPeriodadobePeriodgranitePeriodjettyPeriodssl, comPeriodadobePeriodgranitePeriodjobsPeriodasync, comPeriodadobePeriodgranitePeriodmaintenancePeriodoak, comPeriodadobePeriodgranitePeriodmonitoringPeriodcore, comPeriodadobePeriodgranitePeriodqueries, comPeriodadobePeriodgranitePeriodreplicationPeriodhcPeriodimpl, comPeriodadobePeriodgranitePeriodrepositoryPeriodchecker, comPeriodadobePeriodgranitePeriodrepositoryPeriodhcPeriodimpl, comPeriodadobePeriodgranitePeriodrestPeriodassets, comPeriodadobePeriodgranitePeriodsecurityPeriodui, comPeriodadobePeriodgranitePeriodstartup, comPeriodadobePeriodgranitePeriodtagsoup, comPeriodadobePeriodgranitePeriodtaskmanagementPeriodcore, comPeriodadobePeriodgranitePeriodtaskmanagementPeriodworkflow, comPeriodadobePeriodgranitePerioduiPeriodclientlibsPeriodcompilerPeriodless, comPeriodadobePeriodgranitePerioduiPeriodclientlibsPeriodprocessorPeriodgcc, comPeriodadobePeriodgranitePeriodwebconsolePeriodplugins, comPeriodadobePeriodgranitePeriodworkflowPeriodconsole, comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodlinux, comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodmacosx, comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodwin, comPerioddayPeriodcommonsPeriodosgiPeriodwrapperPeriodsimpleJndi, comPerioddayPeriodcqPeriodcqAuthhandler, comPerioddayPeriodcqPeriodcqCompatConfigupdate, comPerioddayPeriodcqPeriodcqLicensebranding, comPerioddayPeriodcqPeriodcqNotifcationImpl, comPerioddayPeriodcqPeriodcqReplicationAudit, comPerioddayPeriodcqPeriodcqSearchExt, comPerioddayPeriodcqPerioddamPeriodcqDamAnnotationPrint, comPerioddayPeriodcqPerioddamPeriodcqDamAssetUsage, comPerioddayPeriodcqPerioddamPeriodcqDamS7dam, comPerioddayPeriodcqPerioddamPeriodcqDamSimilaritysearch, comPerioddayPeriodcqPerioddamPerioddamWebdavSupport, comPerioddayPeriodcqPeriodpreUpgradeTasks, comPerioddayPeriodcqPeriodreplicationPeriodextensions, comPerioddayPeriodcqPeriodwcmPeriodcqMsmCore, comPerioddayPeriodcqPeriodwcmPeriodcqWcmTranslation, dayCommonsJrawio, orgPeriodapachePeriodariesPeriodjmxPeriodwhiteboard, orgPeriodapachePeriodfelixPeriodhttpPeriodsslfilter, orgPeriodapachePeriodfelixPeriodorgPeriodapachePeriodfelixPeriodthreaddump, orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodds, orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodevent, orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodmemoryusage, orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodpackageadmin, orgPeriodapachePeriodjackrabbitPeriodoakAuthLdap, orgPeriodapachePeriodjackrabbitPeriodoakSegmentTar, orgPeriodapachePeriodjackrabbitPeriodoakSolrOsgi, orgPeriodapachePeriodslingPeriodbundleresourcePeriodimpl, orgPeriodapachePeriodslingPeriodcommonsPeriodfsclassloader, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodwebconsole, orgPeriodapachePeriodslingPerioddatasource, orgPeriodapachePeriodslingPerioddiscoveryPeriodbase, orgPeriodapachePeriodslingPerioddiscoveryPeriodoak, orgPeriodapachePeriodslingPerioddiscoveryPeriodsupport, orgPeriodapachePeriodslingPerioddistributionPeriodapi, orgPeriodapachePeriodslingPerioddistributionPeriodcore, orgPeriodapachePeriodslingPeriodextensionsPeriodwebconsolesecurityprovider, orgPeriodapachePeriodslingPeriodhcPeriodwebconsole, orgPeriodapachePeriodslingPeriodinstallerPeriodconsole, orgPeriodapachePeriodslingPeriodinstallerPeriodproviderPeriodfile, orgPeriodapachePeriodslingPeriodinstallerPeriodproviderPeriodjcr, orgPeriodapachePeriodslingPeriodjcrPerioddavex, orgPeriodapachePeriodslingPeriodjcrPeriodresourcesecurity, orgPeriodapachePeriodslingPeriodjmxPeriodprovider, orgPeriodapachePeriodslingPeriodlaunchpadPeriodinstaller, orgPeriodapachePeriodslingPeriodmodelsPeriodimpl, orgPeriodapachePeriodslingPeriodrepoinitPeriodparser, orgPeriodapachePeriodslingPeriodresourcePeriodinventory, orgPeriodapachePeriodslingPeriodresourceresolver, orgPeriodapachePeriodslingPeriodscriptingPeriodjavascript, orgPeriodapachePeriodslingPeriodscriptingPeriodjst, orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodjsPeriodprovider, orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodmodelsPeriodprovider, orgPeriodapachePeriodslingPeriodsecurity, orgPeriodapachePeriodslingPeriodservletsPeriodcompat, orgPeriodapachePeriodslingPeriodservletsPeriodget, orgPeriodapachePeriodslingPeriodstartupfilterPerioddisabler, orgPeriodapachePeriodslingPeriodtracer, wePeriodretailPeriodclientPeriodappPeriodcore, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_auth_cert_impl_client_cert_auth_handler_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto path = request.query().get("path");
    auto servicePeriodranking = request.query().get("service.ranking");
    
    try {
      this->com_adobe_granite_auth_cert_impl_client_cert_auth_handler(post, apply, delete, action, Dollarlocation, propertylist, path, servicePeriodranking, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_auth_ims_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto configid = request.query().get("configid");
    auto scope = request.query().get("scope");
    
    try {
      this->com_adobe_granite_auth_ims(post, apply, delete, action, Dollarlocation, propertylist, configid, scope, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_auth_ims_impl_external_user_id_mapping_provider_extension_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto oauthPeriodproviderPeriodid = request.query().get("oauth.provider.id");
    
    try {
      this->com_adobe_granite_auth_ims_impl_external_user_id_mapping_provider_extension(post, apply, delete, action, Dollarlocation, propertylist, oauthPeriodproviderPeriodid, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_auth_ims_impl_ims_access_token_request_customizer_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto authPeriodimsPeriodclientPeriodsecret = request.query().get("auth.ims.client.secret");
    auto customizerPeriodtype = request.query().get("customizer.type");
    
    try {
      this->com_adobe_granite_auth_ims_impl_ims_access_token_request_customizer_impl(post, apply, delete, action, Dollarlocation, propertylist, authPeriodimsPeriodclientPeriodsecret, customizerPeriodtype, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_auth_ims_impl_ims_instance_credentials_validator_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto oauthPeriodproviderPeriodid = request.query().get("oauth.provider.id");
    
    try {
      this->com_adobe_granite_auth_ims_impl_ims_instance_credentials_validator(post, apply, delete, action, Dollarlocation, propertylist, oauthPeriodproviderPeriodid, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_auth_ims_impl_ims_provider_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto oauthPeriodproviderPeriodid = request.query().get("oauth.provider.id");
    auto oauthPeriodproviderPeriodimsPeriodauthorizationPeriodurl = request.query().get("oauth.provider.ims.authorization.url");
    auto oauthPeriodproviderPeriodimsPeriodtokenPeriodurl = request.query().get("oauth.provider.ims.token.url");
    auto oauthPeriodproviderPeriodimsPeriodprofilePeriodurl = request.query().get("oauth.provider.ims.profile.url");
    auto oauthPeriodproviderPeriodimsPeriodextendedPerioddetailsPeriodurls = request.query().get("oauth.provider.ims.extended.details.urls");
    auto oauthPeriodproviderPeriodimsPeriodvalidatePeriodtokenPeriodurl = request.query().get("oauth.provider.ims.validate.token.url");
    auto oauthPeriodproviderPeriodimsPeriodsessionPeriodproperty = request.query().get("oauth.provider.ims.session.property");
    auto oauthPeriodproviderPeriodimsPeriodservicePeriodtokenPeriodclientPeriodid = request.query().get("oauth.provider.ims.service.token.client.id");
    auto oauthPeriodproviderPeriodimsPeriodservicePeriodtokenPeriodclientPeriodsecret = request.query().get("oauth.provider.ims.service.token.client.secret");
    auto oauthPeriodproviderPeriodimsPeriodservicePeriodtoken = request.query().get("oauth.provider.ims.service.token");
    auto imsPeriodorgPeriodref = request.query().get("ims.org.ref");
    auto imsPeriodgroupPeriodmapping = request.query().get("ims.group.mapping");
    auto oauthPeriodproviderPeriodimsPeriodonlyPeriodlicensePeriodgroup = request.query().get("oauth.provider.ims.only.license.group");
    
    try {
      this->com_adobe_granite_auth_ims_impl_ims_provider_impl(post, apply, delete, action, Dollarlocation, propertylist, oauthPeriodproviderPeriodid, oauthPeriodproviderPeriodimsPeriodauthorizationPeriodurl, oauthPeriodproviderPeriodimsPeriodtokenPeriodurl, oauthPeriodproviderPeriodimsPeriodprofilePeriodurl, oauthPeriodproviderPeriodimsPeriodextendedPerioddetailsPeriodurls, oauthPeriodproviderPeriodimsPeriodvalidatePeriodtokenPeriodurl, oauthPeriodproviderPeriodimsPeriodsessionPeriodproperty, oauthPeriodproviderPeriodimsPeriodservicePeriodtokenPeriodclientPeriodid, oauthPeriodproviderPeriodimsPeriodservicePeriodtokenPeriodclientPeriodsecret, oauthPeriodproviderPeriodimsPeriodservicePeriodtoken, imsPeriodorgPeriodref, imsPeriodgroupPeriodmapping, oauthPeriodproviderPeriodimsPeriodonlyPeriodlicensePeriodgroup, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_auth_ims_impl_ims_config_provider_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto oauthPeriodconfigmanagerPeriodimsPeriodconfigid = request.query().get("oauth.configmanager.ims.configid");
    auto imsPeriodowningEntity = request.query().get("ims.owningEntity");
    auto aemPeriodinstanceId = request.query().get("aem.instanceId");
    auto imsPeriodserviceCode = request.query().get("ims.serviceCode");
    
    try {
      this->com_adobe_granite_auth_ims_impl_ims_config_provider_impl(post, apply, delete, action, Dollarlocation, propertylist, oauthPeriodconfigmanagerPeriodimsPeriodconfigid, imsPeriodowningEntity, aemPeriodinstanceId, imsPeriodserviceCode, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_auth_oauth_accesstoken_provider_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto name = request.query().get("name");
    auto authPeriodtokenPeriodproviderPeriodtitle = request.query().get("auth.token.provider.title");
    auto authPeriodtokenPeriodproviderPerioddefaultPeriodclaims = request.query().get("auth.token.provider.default.claims");
    auto authPeriodtokenPeriodproviderPeriodendpoint = request.query().get("auth.token.provider.endpoint");
    auto authPeriodaccessPeriodtokenPeriodrequest = request.query().get("auth.access.token.request");
    auto authPeriodtokenPeriodproviderPeriodkeypairPeriodalias = request.query().get("auth.token.provider.keypair.alias");
    auto authPeriodtokenPeriodproviderPeriodconnPeriodtimeout = request.query().get("auth.token.provider.conn.timeout");
    auto authPeriodtokenPeriodproviderPeriodsoPeriodtimeout = request.query().get("auth.token.provider.so.timeout");
    auto authPeriodtokenPeriodproviderPeriodclientPeriodid = request.query().get("auth.token.provider.client.id");
    auto authPeriodtokenPeriodproviderPeriodscope = request.query().get("auth.token.provider.scope");
    auto authPeriodtokenPeriodproviderPeriodreusePeriodaccessPeriodtoken = request.query().get("auth.token.provider.reuse.access.token");
    auto authPeriodtokenPeriodproviderPeriodrelaxedPeriodssl = request.query().get("auth.token.provider.relaxed.ssl");
    auto tokenPeriodrequestPeriodcustomizerPeriodtype = request.query().get("token.request.customizer.type");
    auto authPeriodtokenPeriodvalidatorPeriodtype = request.query().get("auth.token.validator.type");
    
    try {
      this->com_adobe_granite_auth_oauth_accesstoken_provider(post, apply, delete, action, Dollarlocation, propertylist, name, authPeriodtokenPeriodproviderPeriodtitle, authPeriodtokenPeriodproviderPerioddefaultPeriodclaims, authPeriodtokenPeriodproviderPeriodendpoint, authPeriodaccessPeriodtokenPeriodrequest, authPeriodtokenPeriodproviderPeriodkeypairPeriodalias, authPeriodtokenPeriodproviderPeriodconnPeriodtimeout, authPeriodtokenPeriodproviderPeriodsoPeriodtimeout, authPeriodtokenPeriodproviderPeriodclientPeriodid, authPeriodtokenPeriodproviderPeriodscope, authPeriodtokenPeriodproviderPeriodreusePeriodaccessPeriodtoken, authPeriodtokenPeriodproviderPeriodrelaxedPeriodssl, tokenPeriodrequestPeriodcustomizerPeriodtype, authPeriodtokenPeriodvalidatorPeriodtype, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_auth_oauth_impl_bearer_authentication_handler_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto path = request.query().get("path");
    auto oauthPeriodclientIdsPeriodallowed = request.query().get("oauth.clientIds.allowed");
    auto authPeriodbearerPeriodsyncPeriodims = request.query().get("auth.bearer.sync.ims");
    auto authPeriodtokenRequestParameter = request.query().get("auth.tokenRequestParameter");
    auto oauthPeriodbearerPeriodconfigid = request.query().get("oauth.bearer.configid");
    auto oauthPeriodjwtPeriodsupport = request.query().get("oauth.jwt.support");
    
    try {
      this->com_adobe_granite_auth_oauth_impl_bearer_authentication_handler(post, apply, delete, action, Dollarlocation, propertylist, path, oauthPeriodclientIdsPeriodallowed, authPeriodbearerPeriodsyncPeriodims, authPeriodtokenRequestParameter, oauthPeriodbearerPeriodconfigid, oauthPeriodjwtPeriodsupport, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_auth_oauth_impl_default_token_validator_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto authPeriodtokenPeriodvalidatorPeriodtype = request.query().get("auth.token.validator.type");
    
    try {
      this->com_adobe_granite_auth_oauth_impl_default_token_validator_impl(post, apply, delete, action, Dollarlocation, propertylist, authPeriodtokenPeriodvalidatorPeriodtype, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_auth_oauth_impl_facebook_provider_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto oauthPeriodproviderPeriodid = request.query().get("oauth.provider.id");
    
    try {
      this->com_adobe_granite_auth_oauth_impl_facebook_provider_impl(post, apply, delete, action, Dollarlocation, propertylist, oauthPeriodproviderPeriodid, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_auth_oauth_impl_github_provider_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto oauthPeriodproviderPeriodid = request.query().get("oauth.provider.id");
    auto oauthPeriodproviderPeriodgithubPeriodauthorizationPeriodurl = request.query().get("oauth.provider.github.authorization.url");
    auto oauthPeriodproviderPeriodgithubPeriodtokenPeriodurl = request.query().get("oauth.provider.github.token.url");
    auto oauthPeriodproviderPeriodgithubPeriodprofilePeriodurl = request.query().get("oauth.provider.github.profile.url");
    
    try {
      this->com_adobe_granite_auth_oauth_impl_github_provider_impl(post, apply, delete, action, Dollarlocation, propertylist, oauthPeriodproviderPeriodid, oauthPeriodproviderPeriodgithubPeriodauthorizationPeriodurl, oauthPeriodproviderPeriodgithubPeriodtokenPeriodurl, oauthPeriodproviderPeriodgithubPeriodprofilePeriodurl, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_auth_oauth_impl_granite_provider_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto oauthPeriodproviderPeriodid = request.query().get("oauth.provider.id");
    auto oauthPeriodproviderPeriodgranitePeriodauthorizationPeriodurl = request.query().get("oauth.provider.granite.authorization.url");
    auto oauthPeriodproviderPeriodgranitePeriodtokenPeriodurl = request.query().get("oauth.provider.granite.token.url");
    auto oauthPeriodproviderPeriodgranitePeriodprofilePeriodurl = request.query().get("oauth.provider.granite.profile.url");
    auto oauthPeriodproviderPeriodgranitePeriodextendedPerioddetailsPeriodurls = request.query().get("oauth.provider.granite.extended.details.urls");
    
    try {
      this->com_adobe_granite_auth_oauth_impl_granite_provider(post, apply, delete, action, Dollarlocation, propertylist, oauthPeriodproviderPeriodid, oauthPeriodproviderPeriodgranitePeriodauthorizationPeriodurl, oauthPeriodproviderPeriodgranitePeriodtokenPeriodurl, oauthPeriodproviderPeriodgranitePeriodprofilePeriodurl, oauthPeriodproviderPeriodgranitePeriodextendedPerioddetailsPeriodurls, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_auth_oauth_impl_helper_provider_config_manager_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto oauthPeriodcookiePeriodloginPeriodtimeout = request.query().get("oauth.cookie.login.timeout");
    auto oauthPeriodcookiePeriodmaxPeriodage = request.query().get("oauth.cookie.max.age");
    
    try {
      this->com_adobe_granite_auth_oauth_impl_helper_provider_config_manager(post, apply, delete, action, Dollarlocation, propertylist, oauthPeriodcookiePeriodloginPeriodtimeout, oauthPeriodcookiePeriodmaxPeriodage, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_auth_oauth_impl_helper_provider_config_manager_internal_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto oauthPeriodcookiePeriodloginPeriodtimeout = request.query().get("oauth.cookie.login.timeout");
    auto oauthPeriodcookiePeriodmaxPeriodage = request.query().get("oauth.cookie.max.age");
    
    try {
      this->com_adobe_granite_auth_oauth_impl_helper_provider_config_manager_internal(post, apply, delete, action, Dollarlocation, propertylist, oauthPeriodcookiePeriodloginPeriodtimeout, oauthPeriodcookiePeriodmaxPeriodage, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_auth_oauth_impl_o_auth_authentication_handler_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto path = request.query().get("path");
    
    try {
      this->com_adobe_granite_auth_oauth_impl_o_auth_authentication_handler(post, apply, delete, action, Dollarlocation, propertylist, path, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_auth_oauth_impl_twitter_provider_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto oauthPeriodproviderPeriodid = request.query().get("oauth.provider.id");
    
    try {
      this->com_adobe_granite_auth_oauth_impl_twitter_provider_impl(post, apply, delete, action, Dollarlocation, propertylist, oauthPeriodproviderPeriodid, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_auth_oauth_provider_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto oauthPeriodconfigPeriodid = request.query().get("oauth.config.id");
    auto oauthPeriodclientPeriodid = request.query().get("oauth.client.id");
    auto oauthPeriodclientPeriodsecret = request.query().get("oauth.client.secret");
    auto oauthPeriodscope = request.query().get("oauth.scope");
    auto oauthPeriodconfigPeriodproviderPeriodid = request.query().get("oauth.config.provider.id");
    auto oauthPeriodcreatePeriodusers = request.query().get("oauth.create.users");
    auto oauthPerioduseridPeriodproperty = request.query().get("oauth.userid.property");
    auto forcePeriodstrictPeriodusernamePeriodmatching = request.query().get("force.strict.username.matching");
    auto oauthPeriodencodePerioduserids = request.query().get("oauth.encode.userids");
    auto oauthPeriodhashPerioduserids = request.query().get("oauth.hash.userids");
    auto oauthPeriodcallBackUrl = request.query().get("oauth.callBackUrl");
    auto oauthPeriodaccessPeriodtokenPeriodpersist = request.query().get("oauth.access.token.persist");
    auto oauthPeriodaccessPeriodtokenPeriodpersistPeriodcookie = request.query().get("oauth.access.token.persist.cookie");
    auto oauthPeriodcsrfPeriodstatePeriodprotection = request.query().get("oauth.csrf.state.protection");
    auto oauthPeriodredirectPeriodrequestPeriodparams = request.query().get("oauth.redirect.request.params");
    auto oauthPeriodconfigPeriodsiblingsPeriodallow = request.query().get("oauth.config.siblings.allow");
    
    try {
      this->com_adobe_granite_auth_oauth_provider(post, apply, delete, action, Dollarlocation, propertylist, oauthPeriodconfigPeriodid, oauthPeriodclientPeriodid, oauthPeriodclientPeriodsecret, oauthPeriodscope, oauthPeriodconfigPeriodproviderPeriodid, oauthPeriodcreatePeriodusers, oauthPerioduseridPeriodproperty, forcePeriodstrictPeriodusernamePeriodmatching, oauthPeriodencodePerioduserids, oauthPeriodhashPerioduserids, oauthPeriodcallBackUrl, oauthPeriodaccessPeriodtokenPeriodpersist, oauthPeriodaccessPeriodtokenPeriodpersistPeriodcookie, oauthPeriodcsrfPeriodstatePeriodprotection, oauthPeriodredirectPeriodrequestPeriodparams, oauthPeriodconfigPeriodsiblingsPeriodallow, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_auth_requirement_impl_default_requirement_handler_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto supportedPaths = request.query().get("supportedPaths");
    
    try {
      this->com_adobe_granite_auth_requirement_impl_default_requirement_handler(post, apply, delete, action, Dollarlocation, propertylist, supportedPaths, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_auth_saml_saml_authentication_handler_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto path = request.query().get("path");
    auto servicePeriodranking = request.query().get("service.ranking");
    auto idpUrl = request.query().get("idpUrl");
    auto idpCertAlias = request.query().get("idpCertAlias");
    auto idpHttpRedirect = request.query().get("idpHttpRedirect");
    auto serviceProviderEntityId = request.query().get("serviceProviderEntityId");
    auto assertionConsumerServiceURL = request.query().get("assertionConsumerServiceURL");
    auto spPrivateKeyAlias = request.query().get("spPrivateKeyAlias");
    auto keyStorePassword = request.query().get("keyStorePassword");
    auto defaultRedirectUrl = request.query().get("defaultRedirectUrl");
    auto userIDAttribute = request.query().get("userIDAttribute");
    auto useEncryption = request.query().get("useEncryption");
    auto createUser = request.query().get("createUser");
    auto userIntermediatePath = request.query().get("userIntermediatePath");
    auto addGroupMemberships = request.query().get("addGroupMemberships");
    auto groupMembershipAttribute = request.query().get("groupMembershipAttribute");
    auto defaultGroups = request.query().get("defaultGroups");
    auto nameIdFormat = request.query().get("nameIdFormat");
    auto synchronizeAttributes = request.query().get("synchronizeAttributes");
    auto handleLogout = request.query().get("handleLogout");
    auto logoutUrl = request.query().get("logoutUrl");
    auto clockTolerance = request.query().get("clockTolerance");
    auto digestMethod = request.query().get("digestMethod");
    auto signatureMethod = request.query().get("signatureMethod");
    auto identitySyncType = request.query().get("identitySyncType");
    auto idpIdentifier = request.query().get("idpIdentifier");
    
    try {
      this->com_adobe_granite_auth_saml_saml_authentication_handler(post, apply, delete, action, Dollarlocation, propertylist, path, servicePeriodranking, idpUrl, idpCertAlias, idpHttpRedirect, serviceProviderEntityId, assertionConsumerServiceURL, spPrivateKeyAlias, keyStorePassword, defaultRedirectUrl, userIDAttribute, useEncryption, createUser, userIntermediatePath, addGroupMemberships, groupMembershipAttribute, defaultGroups, nameIdFormat, synchronizeAttributes, handleLogout, logoutUrl, clockTolerance, digestMethod, signatureMethod, identitySyncType, idpIdentifier, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_auth_sso_impl_sso_authentication_handler_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto path = request.query().get("path");
    auto servicePeriodranking = request.query().get("service.ranking");
    auto jaasPeriodcontrolFlag = request.query().get("jaas.controlFlag");
    auto jaasPeriodrealmName = request.query().get("jaas.realmName");
    auto jaasPeriodranking = request.query().get("jaas.ranking");
    auto headers = request.query().get("headers");
    auto cookies = request.query().get("cookies");
    auto parameters = request.query().get("parameters");
    auto usermap = request.query().get("usermap");
    auto format = request.query().get("format");
    auto trustedCredentialsAttribute = request.query().get("trustedCredentialsAttribute");
    
    try {
      this->com_adobe_granite_auth_sso_impl_sso_authentication_handler(post, apply, delete, action, Dollarlocation, propertylist, path, servicePeriodranking, jaasPeriodcontrolFlag, jaasPeriodrealmName, jaasPeriodranking, headers, cookies, parameters, usermap, format, trustedCredentialsAttribute, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_bundles_hc_impl_code_cache_health_check_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto hcPeriodtags = request.query().get("hc.tags");
    auto minimumPeriodcodePeriodcachePeriodsize = request.query().get("minimum.code.cache.size");
    
    try {
      this->com_adobe_granite_bundles_hc_impl_code_cache_health_check(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags, minimumPeriodcodePeriodcachePeriodsize, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_bundles_hc_impl_crxde_support_bundle_health_check_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto hcPeriodtags = request.query().get("hc.tags");
    
    try {
      this->com_adobe_granite_bundles_hc_impl_crxde_support_bundle_health_check(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_bundles_hc_impl_dav_ex_bundle_health_check_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto hcPeriodtags = request.query().get("hc.tags");
    
    try {
      this->com_adobe_granite_bundles_hc_impl_dav_ex_bundle_health_check(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_bundles_hc_impl_inactive_bundles_health_check_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto hcPeriodtags = request.query().get("hc.tags");
    auto ignoredPeriodbundles = request.query().get("ignored.bundles");
    
    try {
      this->com_adobe_granite_bundles_hc_impl_inactive_bundles_health_check(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags, ignoredPeriodbundles, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_bundles_hc_impl_jobs_health_check_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto hcPeriodtags = request.query().get("hc.tags");
    auto maxPeriodqueuedPeriodjobs = request.query().get("max.queued.jobs");
    
    try {
      this->com_adobe_granite_bundles_hc_impl_jobs_health_check(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags, maxPeriodqueuedPeriodjobs, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_bundles_hc_impl_sling_get_servlet_health_check_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto hcPeriodtags = request.query().get("hc.tags");
    
    try {
      this->com_adobe_granite_bundles_hc_impl_sling_get_servlet_health_check(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_bundles_hc_impl_sling_java_script_handler_health_check_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto hcPeriodtags = request.query().get("hc.tags");
    
    try {
      this->com_adobe_granite_bundles_hc_impl_sling_java_script_handler_health_check(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_bundles_hc_impl_sling_jsp_script_handler_health_check_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto hcPeriodtags = request.query().get("hc.tags");
    
    try {
      this->com_adobe_granite_bundles_hc_impl_sling_jsp_script_handler_health_check(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_bundles_hc_impl_sling_referrer_filter_health_check_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto hcPeriodtags = request.query().get("hc.tags");
    
    try {
      this->com_adobe_granite_bundles_hc_impl_sling_referrer_filter_health_check(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_bundles_hc_impl_web_dav_bundle_health_check_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto hcPeriodtags = request.query().get("hc.tags");
    
    try {
      this->com_adobe_granite_bundles_hc_impl_web_dav_bundle_health_check(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_comments_internal_comment_replication_content_filter_fac_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto replicatePeriodcommentPeriodresourceTypes = request.query().get("replicate.comment.resourceTypes");
    
    try {
      this->com_adobe_granite_comments_internal_comment_replication_content_filter_fac(post, apply, delete, action, Dollarlocation, propertylist, replicatePeriodcommentPeriodresourceTypes, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_compatrouter_impl_compat_switching_service_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto compatgroups = request.query().get("compatgroups");
    auto enabled = request.query().get("enabled");
    
    try {
      this->com_adobe_granite_compatrouter_impl_compat_switching_service_impl(post, apply, delete, action, Dollarlocation, propertylist, compatgroups, enabled, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_compatrouter_impl_routing_config_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto id = request.query().get("id");
    auto compatPath = request.query().get("compatPath");
    auto newPath = request.query().get("newPath");
    
    try {
      this->com_adobe_granite_compatrouter_impl_routing_config(post, apply, delete, action, Dollarlocation, propertylist, id, compatPath, newPath, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_compatrouter_impl_switch_mapping_config_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto group = request.query().get("group");
    auto ids = request.query().get("ids");
    
    try {
      this->com_adobe_granite_compatrouter_impl_switch_mapping_config(post, apply, delete, action, Dollarlocation, propertylist, group, ids, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_conf_impl_runtime_aware_configuration_resource_resolving_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto enabled = request.query().get("enabled");
    auto fallbackPaths = request.query().get("fallbackPaths");
    
    try {
      this->com_adobe_granite_conf_impl_runtime_aware_configuration_resource_resolving(post, apply, delete, action, Dollarlocation, propertylist, enabled, fallbackPaths, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_contexthub_impl_context_hub_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto comPeriodadobePeriodgranitePeriodcontexthubPeriodsilentMode = request.query().get("com.adobe.granite.contexthub.silent_mode");
    auto comPeriodadobePeriodgranitePeriodcontexthubPeriodshowUi = request.query().get("com.adobe.granite.contexthub.show_ui");
    
    try {
      this->com_adobe_granite_contexthub_impl_context_hub_impl(post, apply, delete, action, Dollarlocation, propertylist, comPeriodadobePeriodgranitePeriodcontexthubPeriodsilentMode, comPeriodadobePeriodgranitePeriodcontexthubPeriodshowUi, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_cors_impl_cors_policy_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto alloworigin = request.query().get("alloworigin");
    auto alloworiginregexp = request.query().get("alloworiginregexp");
    auto allowedpaths = request.query().get("allowedpaths");
    auto exposedheaders = request.query().get("exposedheaders");
    auto maxage = request.query().get("maxage");
    auto supportedheaders = request.query().get("supportedheaders");
    auto supportedmethods = request.query().get("supportedmethods");
    auto supportscredentials = request.query().get("supportscredentials");
    
    try {
      this->com_adobe_granite_cors_impl_cors_policy_impl(post, apply, delete, action, Dollarlocation, propertylist, alloworigin, alloworiginregexp, allowedpaths, exposedheaders, maxage, supportedheaders, supportedmethods, supportscredentials, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_csrf_impl_csrf_filter_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto filterPeriodmethods = request.query().get("filter.methods");
    auto filterPeriodenablePeriodsafePerioduserPeriodagents = request.query().get("filter.enable.safe.user.agents");
    auto filterPeriodsafePerioduserPeriodagents = request.query().get("filter.safe.user.agents");
    auto filterPeriodexcludedPeriodpaths = request.query().get("filter.excluded.paths");
    
    try {
      this->com_adobe_granite_csrf_impl_csrf_filter(post, apply, delete, action, Dollarlocation, propertylist, filterPeriodmethods, filterPeriodenablePeriodsafePerioduserPeriodagents, filterPeriodsafePerioduserPeriodagents, filterPeriodexcludedPeriodpaths, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_csrf_impl_csrf_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto csrfPeriodtokenPeriodexpiresPeriodin = request.query().get("csrf.token.expires.in");
    auto slingPeriodauthPeriodrequirements = request.query().get("sling.auth.requirements");
    
    try {
      this->com_adobe_granite_csrf_impl_csrf_servlet(post, apply, delete, action, Dollarlocation, propertylist, csrfPeriodtokenPeriodexpiresPeriodin, slingPeriodauthPeriodrequirements, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_distribution_core_impl_crypto_distribution_transport_se_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto name = request.query().get("name");
    auto username = request.query().get("username");
    auto encryptedPassword = request.query().get("encryptedPassword");
    
    try {
      this->com_adobe_granite_distribution_core_impl_crypto_distribution_transport_se(post, apply, delete, action, Dollarlocation, propertylist, name, username, encryptedPassword, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_distribution_core_impl_diff_diff_changes_observer_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto enabled = request.query().get("enabled");
    auto agentName = request.query().get("agentName");
    auto diffPath = request.query().get("diffPath");
    auto observedPath = request.query().get("observedPath");
    auto serviceName = request.query().get("serviceName");
    auto propertyNames = request.query().get("propertyNames");
    auto distributionDelay = request.query().get("distributionDelay");
    auto serviceUserPeriodtarget = request.query().get("serviceUser.target");
    
    try {
      this->com_adobe_granite_distribution_core_impl_diff_diff_changes_observer(post, apply, delete, action, Dollarlocation, propertylist, enabled, agentName, diffPath, observedPath, serviceName, propertyNames, distributionDelay, serviceUserPeriodtarget, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_distribution_core_impl_diff_diff_event_listener_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto diffPath = request.query().get("diffPath");
    auto serviceName = request.query().get("serviceName");
    auto serviceUserPeriodtarget = request.query().get("serviceUser.target");
    
    try {
      this->com_adobe_granite_distribution_core_impl_diff_diff_event_listener(post, apply, delete, action, Dollarlocation, propertylist, diffPath, serviceName, serviceUserPeriodtarget, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_distribution_core_impl_distribution_to_replication_even_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto importerPeriodname = request.query().get("importer.name");
    
    try {
      this->com_adobe_granite_distribution_core_impl_distribution_to_replication_even(post, apply, delete, action, Dollarlocation, propertylist, importerPeriodname, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_distribution_core_impl_replication_adapters_replicat_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto providerName = request.query().get("providerName");
    auto forwardPeriodrequests = request.query().get("forward.requests");
    
    try {
      this->com_adobe_granite_distribution_core_impl_replication_adapters_replicat(post, apply, delete, action, Dollarlocation, propertylist, providerName, forwardPeriodrequests, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_distribution_core_impl_replication_distribution_trans_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto forwardPeriodrequests = request.query().get("forward.requests");
    
    try {
      this->com_adobe_granite_distribution_core_impl_replication_distribution_trans(post, apply, delete, action, Dollarlocation, propertylist, forwardPeriodrequests, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_distribution_core_impl_transport_access_token_distribu_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto name = request.query().get("name");
    auto serviceName = request.query().get("serviceName");
    auto userId = request.query().get("userId");
    auto accessTokenProviderPeriodtarget = request.query().get("accessTokenProvider.target");
    
    try {
      this->com_adobe_granite_distribution_core_impl_transport_access_token_distribu(post, apply, delete, action, Dollarlocation, propertylist, name, serviceName, userId, accessTokenProviderPeriodtarget, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_frags_impl_check_http_header_flag_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto featurePeriodname = request.query().get("feature.name");
    auto featurePerioddescription = request.query().get("feature.description");
    auto httpPeriodheaderPeriodname = request.query().get("http.header.name");
    auto httpPeriodheaderPeriodvaluepattern = request.query().get("http.header.valuepattern");
    
    try {
      this->com_adobe_granite_frags_impl_check_http_header_flag(post, apply, delete, action, Dollarlocation, propertylist, featurePeriodname, featurePerioddescription, httpPeriodheaderPeriodname, httpPeriodheaderPeriodvaluepattern, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_frags_impl_random_feature_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto featurePeriodname = request.query().get("feature.name");
    auto featurePerioddescription = request.query().get("feature.description");
    auto activePeriodpercentage = request.query().get("active.percentage");
    auto cookiePeriodname = request.query().get("cookie.name");
    auto cookiePeriodmaxAge = request.query().get("cookie.maxAge");
    
    try {
      this->com_adobe_granite_frags_impl_random_feature(post, apply, delete, action, Dollarlocation, propertylist, featurePeriodname, featurePerioddescription, activePeriodpercentage, cookiePeriodname, cookiePeriodmaxAge, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_httpcache_file_file_cache_store_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto comPeriodadobePeriodgranitePeriodhttpcachePeriodfilePerioddocumentRoot = request.query().get("com.adobe.granite.httpcache.file.documentRoot");
    auto comPeriodadobePeriodgranitePeriodhttpcachePeriodfilePeriodincludeHost = request.query().get("com.adobe.granite.httpcache.file.includeHost");
    
    try {
      this->com_adobe_granite_httpcache_file_file_cache_store(post, apply, delete, action, Dollarlocation, propertylist, comPeriodadobePeriodgranitePeriodhttpcachePeriodfilePerioddocumentRoot, comPeriodadobePeriodgranitePeriodhttpcachePeriodfilePeriodincludeHost, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_httpcache_impl_outer_cache_filter_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto comPeriodadobePeriodgranitePeriodhttpcachePeriodurlPeriodpaths = request.query().get("com.adobe.granite.httpcache.url.paths");
    
    try {
      this->com_adobe_granite_httpcache_impl_outer_cache_filter(post, apply, delete, action, Dollarlocation, propertylist, comPeriodadobePeriodgranitePeriodhttpcachePeriodurlPeriodpaths, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_i18n_impl_bundle_pseudo_translations_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto pseudoPeriodpatterns = request.query().get("pseudo.patterns");
    
    try {
      this->com_adobe_granite_i18n_impl_bundle_pseudo_translations(post, apply, delete, action, Dollarlocation, propertylist, pseudoPeriodpatterns, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_i18n_impl_preferences_locale_resolver_service_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto securityPeriodpreferencesPeriodname = request.query().get("security.preferences.name");
    
    try {
      this->com_adobe_granite_i18n_impl_preferences_locale_resolver_service(post, apply, delete, action, Dollarlocation, propertylist, securityPeriodpreferencesPeriodname, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_infocollector_info_collector_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto granitePeriodinfocollectorPeriodincludeThreadDumps = request.query().get("granite.infocollector.includeThreadDumps");
    auto granitePeriodinfocollectorPeriodincludeHeapDump = request.query().get("granite.infocollector.includeHeapDump");
    
    try {
      this->com_adobe_granite_infocollector_info_collector(post, apply, delete, action, Dollarlocation, propertylist, granitePeriodinfocollectorPeriodincludeThreadDumps, granitePeriodinfocollectorPeriodincludeHeapDump, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_jetty_ssl_internal_granite_ssl_connector_factory_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodport = request.query().get("com.adobe.granite.jetty.ssl.port");
    auto comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodkeystorePerioduser = request.query().get("com.adobe.granite.jetty.ssl.keystore.user");
    auto comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodkeystorePeriodpassword = request.query().get("com.adobe.granite.jetty.ssl.keystore.password");
    auto comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodciphersuitesPeriodexcluded = request.query().get("com.adobe.granite.jetty.ssl.ciphersuites.excluded");
    auto comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodciphersuitesPeriodincluded = request.query().get("com.adobe.granite.jetty.ssl.ciphersuites.included");
    auto comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodclientPeriodcertificate = request.query().get("com.adobe.granite.jetty.ssl.client.certificate");
    
    try {
      this->com_adobe_granite_jetty_ssl_internal_granite_ssl_connector_factory(post, apply, delete, action, Dollarlocation, propertylist, comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodport, comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodkeystorePerioduser, comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodkeystorePeriodpassword, comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodciphersuitesPeriodexcluded, comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodciphersuitesPeriodincluded, comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodclientPeriodcertificate, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_license_impl_license_check_filter_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto checkInternval = request.query().get("checkInternval");
    auto excludeIds = request.query().get("excludeIds");
    auto encryptPing = request.query().get("encryptPing");
    
    try {
      this->com_adobe_granite_license_impl_license_check_filter(post, apply, delete, action, Dollarlocation, propertylist, checkInternval, excludeIds, encryptPing, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_logging_impl_log_analyser_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto messagesPeriodqueuePeriodsize = request.query().get("messages.queue.size");
    auto loggerPeriodconfig = request.query().get("logger.config");
    auto messagesPeriodsize = request.query().get("messages.size");
    
    try {
      this->com_adobe_granite_logging_impl_log_analyser_impl(post, apply, delete, action, Dollarlocation, propertylist, messagesPeriodqueuePeriodsize, loggerPeriodconfig, messagesPeriodsize, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_logging_impl_log_error_health_check_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto hcPeriodtags = request.query().get("hc.tags");
    
    try {
      this->com_adobe_granite_logging_impl_log_error_health_check(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_maintenance_crx_impl_data_store_garbage_collection_task_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto granitePeriodmaintenancePeriodmandatory = request.query().get("granite.maintenance.mandatory");
    auto jobPeriodtopics = request.query().get("job.topics");
    
    try {
      this->com_adobe_granite_maintenance_crx_impl_data_store_garbage_collection_task(post, apply, delete, action, Dollarlocation, propertylist, granitePeriodmaintenancePeriodmandatory, jobPeriodtopics, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_maintenance_crx_impl_lucene_binaries_cleanup_task_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto jobPeriodtopics = request.query().get("job.topics");
    
    try {
      this->com_adobe_granite_maintenance_crx_impl_lucene_binaries_cleanup_task(post, apply, delete, action, Dollarlocation, propertylist, jobPeriodtopics, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_maintenance_crx_impl_revision_cleanup_task_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto fullPeriodgcPerioddays = request.query().get("full.gc.days");
    
    try {
      this->com_adobe_granite_maintenance_crx_impl_revision_cleanup_task(post, apply, delete, action, Dollarlocation, propertylist, fullPeriodgcPerioddays, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_monitoring_impl_script_config_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto scriptPeriodfilename = request.query().get("script.filename");
    auto scriptPerioddisplay = request.query().get("script.display");
    auto scriptPeriodpath = request.query().get("script.path");
    auto scriptPeriodplatform = request.query().get("script.platform");
    auto interval = request.query().get("interval");
    auto jmxdomain = request.query().get("jmxdomain");
    
    try {
      this->com_adobe_granite_monitoring_impl_script_config_impl(post, apply, delete, action, Dollarlocation, propertylist, scriptPeriodfilename, scriptPerioddisplay, scriptPeriodpath, scriptPeriodplatform, interval, jmxdomain, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_oauth_server_auth_impl_o_auth2_server_authentication_han_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto path = request.query().get("path");
    auto jaasPeriodcontrolFlag = request.query().get("jaas.controlFlag");
    auto jaasPeriodrealmName = request.query().get("jaas.realmName");
    auto jaasPeriodranking = request.query().get("jaas.ranking");
    auto oauthPeriodofflinePeriodvalidation = request.query().get("oauth.offline.validation");
    
    try {
      this->com_adobe_granite_oauth_server_auth_impl_o_auth2_server_authentication_han(post, apply, delete, action, Dollarlocation, propertylist, path, jaasPeriodcontrolFlag, jaasPeriodrealmName, jaasPeriodranking, oauthPeriodofflinePeriodvalidation, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_oauth_server_impl_access_token_cleanup_task_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto schedulerPeriodexpression = request.query().get("scheduler.expression");
    
    try {
      this->com_adobe_granite_oauth_server_impl_access_token_cleanup_task(post, apply, delete, action, Dollarlocation, propertylist, schedulerPeriodexpression, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_oauth_server_impl_o_auth2_client_revocation_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto oauthPeriodclientPeriodrevocationPeriodactive = request.query().get("oauth.client.revocation.active");
    
    try {
      this->com_adobe_granite_oauth_server_impl_o_auth2_client_revocation_servlet(post, apply, delete, action, Dollarlocation, propertylist, oauthPeriodclientPeriodrevocationPeriodactive, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_oauth_server_impl_o_auth2_revocation_endpoint_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto slingPeriodservletPeriodpaths = request.query().get("sling.servlet.paths");
    auto oauthPeriodrevocationPeriodactive = request.query().get("oauth.revocation.active");
    
    try {
      this->com_adobe_granite_oauth_server_impl_o_auth2_revocation_endpoint_servlet(post, apply, delete, action, Dollarlocation, propertylist, slingPeriodservletPeriodpaths, oauthPeriodrevocationPeriodactive, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_oauth_server_impl_o_auth2_token_endpoint_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto oauthPeriodissuer = request.query().get("oauth.issuer");
    auto oauthPeriodaccessPeriodtokenPeriodexpiresPeriodin = request.query().get("oauth.access.token.expires.in");
    auto osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern = request.query().get("osgi.http.whiteboard.servlet.pattern");
    auto osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect = request.query().get("osgi.http.whiteboard.context.select");
    
    try {
      this->com_adobe_granite_oauth_server_impl_o_auth2_token_endpoint_servlet(post, apply, delete, action, Dollarlocation, propertylist, oauthPeriodissuer, oauthPeriodaccessPeriodtokenPeriodexpiresPeriodin, osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern, osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_oauth_server_impl_o_auth2_token_revocation_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto oauthPeriodtokenPeriodrevocationPeriodactive = request.query().get("oauth.token.revocation.active");
    
    try {
      this->com_adobe_granite_oauth_server_impl_o_auth2_token_revocation_servlet(post, apply, delete, action, Dollarlocation, propertylist, oauthPeriodtokenPeriodrevocationPeriodactive, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_offloading_impl_offloading_configurator_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto offloadingPeriodtransporter = request.query().get("offloading.transporter");
    auto offloadingPeriodcleanupPeriodpayload = request.query().get("offloading.cleanup.payload");
    
    try {
      this->com_adobe_granite_offloading_impl_offloading_configurator(post, apply, delete, action, Dollarlocation, propertylist, offloadingPeriodtransporter, offloadingPeriodcleanupPeriodpayload, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_offloading_impl_offloading_job_cloner_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto offloadingPeriodjobclonerPeriodenabled = request.query().get("offloading.jobcloner.enabled");
    
    try {
      this->com_adobe_granite_offloading_impl_offloading_job_cloner(post, apply, delete, action, Dollarlocation, propertylist, offloadingPeriodjobclonerPeriodenabled, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_offloading_impl_offloading_job_offloader_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto offloadingPeriodoffloaderPeriodenabled = request.query().get("offloading.offloader.enabled");
    
    try {
      this->com_adobe_granite_offloading_impl_offloading_job_offloader(post, apply, delete, action, Dollarlocation, propertylist, offloadingPeriodoffloaderPeriodenabled, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_offloading_impl_transporter_offloading_agent_manager_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto offloadingPeriodagentmanagerPeriodenabled = request.query().get("offloading.agentmanager.enabled");
    
    try {
      this->com_adobe_granite_offloading_impl_transporter_offloading_agent_manager(post, apply, delete, action, Dollarlocation, propertylist, offloadingPeriodagentmanagerPeriodenabled, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_offloading_impl_transporter_offloading_default_transpo_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto defaultPeriodtransportPeriodagentToWorkerPeriodprefix = request.query().get("default.transport.agent-to-worker.prefix");
    auto defaultPeriodtransportPeriodagentToMasterPeriodprefix = request.query().get("default.transport.agent-to-master.prefix");
    auto defaultPeriodtransportPeriodinputPeriodpackage = request.query().get("default.transport.input.package");
    auto defaultPeriodtransportPeriodoutputPeriodpackage = request.query().get("default.transport.output.package");
    auto defaultPeriodtransportPeriodreplicationPeriodsynchronous = request.query().get("default.transport.replication.synchronous");
    auto defaultPeriodtransportPeriodcontentpackage = request.query().get("default.transport.contentpackage");
    auto offloadingPeriodtransporterPerioddefaultPeriodenabled = request.query().get("offloading.transporter.default.enabled");
    
    try {
      this->com_adobe_granite_offloading_impl_transporter_offloading_default_transpo(post, apply, delete, action, Dollarlocation, propertylist, defaultPeriodtransportPeriodagentToWorkerPeriodprefix, defaultPeriodtransportPeriodagentToMasterPeriodprefix, defaultPeriodtransportPeriodinputPeriodpackage, defaultPeriodtransportPeriodoutputPeriodpackage, defaultPeriodtransportPeriodreplicationPeriodsynchronous, defaultPeriodtransportPeriodcontentpackage, offloadingPeriodtransporterPerioddefaultPeriodenabled, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_omnisearch_impl_core_omni_search_service_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto omnisearchPeriodsuggestionPeriodrequiretextPeriodmin = request.query().get("omnisearch.suggestion.requiretext.min");
    auto omnisearchPeriodsuggestionPeriodspellcheckPeriodrequire = request.query().get("omnisearch.suggestion.spellcheck.require");
    
    try {
      this->com_adobe_granite_omnisearch_impl_core_omni_search_service_impl(post, apply, delete, action, Dollarlocation, propertylist, omnisearchPeriodsuggestionPeriodrequiretextPeriodmin, omnisearchPeriodsuggestionPeriodspellcheckPeriodrequire, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_optout_impl_opt_out_service_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto optoutPeriodcookies = request.query().get("optout.cookies");
    auto optoutPeriodheaders = request.query().get("optout.headers");
    auto optoutPeriodwhitelistPeriodcookies = request.query().get("optout.whitelist.cookies");
    
    try {
      this->com_adobe_granite_optout_impl_opt_out_service_impl(post, apply, delete, action, Dollarlocation, propertylist, optoutPeriodcookies, optoutPeriodheaders, optoutPeriodwhitelistPeriodcookies, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_queries_impl_hc_async_index_health_check_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto indexingPeriodcriticalPeriodthreshold = request.query().get("indexing.critical.threshold");
    auto indexingPeriodwarnPeriodthreshold = request.query().get("indexing.warn.threshold");
    auto hcPeriodtags = request.query().get("hc.tags");
    
    try {
      this->com_adobe_granite_queries_impl_hc_async_index_health_check(post, apply, delete, action, Dollarlocation, propertylist, indexingPeriodcriticalPeriodthreshold, indexingPeriodwarnPeriodthreshold, hcPeriodtags, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_queries_impl_hc_large_index_health_check_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto largePeriodindexPeriodcriticalPeriodthreshold = request.query().get("large.index.critical.threshold");
    auto largePeriodindexPeriodwarnPeriodthreshold = request.query().get("large.index.warn.threshold");
    auto hcPeriodtags = request.query().get("hc.tags");
    
    try {
      this->com_adobe_granite_queries_impl_hc_large_index_health_check(post, apply, delete, action, Dollarlocation, propertylist, largePeriodindexPeriodcriticalPeriodthreshold, largePeriodindexPeriodwarnPeriodthreshold, hcPeriodtags, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_queries_impl_hc_queries_status_health_check_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto hcPeriodtags = request.query().get("hc.tags");
    
    try {
      this->com_adobe_granite_queries_impl_hc_queries_status_health_check(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_queries_impl_hc_query_health_check_metrics_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto getPeriod = request.query().get("getPeriod");
    
    try {
      this->com_adobe_granite_queries_impl_hc_query_health_check_metrics(post, apply, delete, action, Dollarlocation, propertylist, getPeriod, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_queries_impl_hc_query_limits_health_check_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto hcPeriodtags = request.query().get("hc.tags");
    
    try {
      this->com_adobe_granite_queries_impl_hc_query_limits_health_check(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_replication_hc_impl_replication_queue_health_check_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto numberPeriodofPeriodretriesPeriodallowed = request.query().get("number.of.retries.allowed");
    auto hcPeriodtags = request.query().get("hc.tags");
    
    try {
      this->com_adobe_granite_replication_hc_impl_replication_queue_health_check(post, apply, delete, action, Dollarlocation, propertylist, numberPeriodofPeriodretriesPeriodallowed, hcPeriodtags, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_replication_hc_impl_replication_transport_users_health_c_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto hcPeriodtags = request.query().get("hc.tags");
    
    try {
      this->com_adobe_granite_replication_hc_impl_replication_transport_users_health_c(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_repository_hc_impl_authorizable_node_name_health_check_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto hcPeriodtags = request.query().get("hc.tags");
    
    try {
      this->com_adobe_granite_repository_hc_impl_authorizable_node_name_health_check(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_repository_hc_impl_content_sling_sling_content_health_c_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto hcPeriodtags = request.query().get("hc.tags");
    auto excludePeriodsearchPeriodpath = request.query().get("exclude.search.path");
    
    try {
      this->com_adobe_granite_repository_hc_impl_content_sling_sling_content_health_c(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags, excludePeriodsearchPeriodpath, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_repository_hc_impl_continuous_rgc_health_check_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto hcPeriodtags = request.query().get("hc.tags");
    
    try {
      this->com_adobe_granite_repository_hc_impl_continuous_rgc_health_check(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_repository_hc_impl_default_access_user_profile_health_che_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto hcPeriodtags = request.query().get("hc.tags");
    
    try {
      this->com_adobe_granite_repository_hc_impl_default_access_user_profile_health_che(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_repository_hc_impl_default_logins_health_check_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto hcPeriodtags = request.query().get("hc.tags");
    auto accountPeriodlogins = request.query().get("account.logins");
    auto consolePeriodlogins = request.query().get("console.logins");
    
    try {
      this->com_adobe_granite_repository_hc_impl_default_logins_health_check(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags, accountPeriodlogins, consolePeriodlogins, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_repository_hc_impl_disk_space_health_check_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto hcPeriodtags = request.query().get("hc.tags");
    auto diskPeriodspacePeriodwarnPeriodthreshold = request.query().get("disk.space.warn.threshold");
    auto diskPeriodspacePerioderrorPeriodthreshold = request.query().get("disk.space.error.threshold");
    
    try {
      this->com_adobe_granite_repository_hc_impl_disk_space_health_check(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags, diskPeriodspacePeriodwarnPeriodthreshold, diskPeriodspacePerioderrorPeriodthreshold, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_repository_hc_impl_observation_queue_length_health_check_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto hcPeriodtags = request.query().get("hc.tags");
    
    try {
      this->com_adobe_granite_repository_hc_impl_observation_queue_length_health_check(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_repository_impl_commit_stats_config_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto enabled = request.query().get("enabled");
    auto intervalSeconds = request.query().get("intervalSeconds");
    auto commitsPerIntervalThreshold = request.query().get("commitsPerIntervalThreshold");
    auto maxLocationLength = request.query().get("maxLocationLength");
    auto maxDetailsShown = request.query().get("maxDetailsShown");
    auto minDetailsPercentage = request.query().get("minDetailsPercentage");
    auto threadMatchers = request.query().get("threadMatchers");
    auto maxGreedyDepth = request.query().get("maxGreedyDepth");
    auto greedyStackMatchers = request.query().get("greedyStackMatchers");
    auto stackFilters = request.query().get("stackFilters");
    auto stackMatchers = request.query().get("stackMatchers");
    auto stackCategorizers = request.query().get("stackCategorizers");
    auto stackShorteners = request.query().get("stackShorteners");
    
    try {
      this->com_adobe_granite_repository_impl_commit_stats_config(post, apply, delete, action, Dollarlocation, propertylist, enabled, intervalSeconds, commitsPerIntervalThreshold, maxLocationLength, maxDetailsShown, minDetailsPercentage, threadMatchers, maxGreedyDepth, greedyStackMatchers, stackFilters, stackMatchers, stackCategorizers, stackShorteners, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_repository_service_user_configuration_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto servicePeriodranking = request.query().get("service.ranking");
    auto serviceusersPeriodsimpleSubjectPopulation = request.query().get("serviceusers.simpleSubjectPopulation");
    auto serviceusersPeriodlist = request.query().get("serviceusers.list");
    
    try {
      this->com_adobe_granite_repository_service_user_configuration(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, serviceusersPeriodsimpleSubjectPopulation, serviceusersPeriodlist, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_requests_logging_impl_hc_requests_status_health_check_im_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto hcPeriodtags = request.query().get("hc.tags");
    
    try {
      this->com_adobe_granite_requests_logging_impl_hc_requests_status_health_check_im(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_resourcestatus_impl_composite_status_type_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto name = request.query().get("name");
    auto types = request.query().get("types");
    
    try {
      this->com_adobe_granite_resourcestatus_impl_composite_status_type(post, apply, delete, action, Dollarlocation, propertylist, name, types, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_resourcestatus_impl_status_resource_provider_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto providerPeriodroot = request.query().get("provider.root");
    
    try {
      this->com_adobe_granite_resourcestatus_impl_status_resource_provider_impl(post, apply, delete, action, Dollarlocation, propertylist, providerPeriodroot, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_rest_assets_impl_asset_content_disposition_filter_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto mimePeriodallowEmpty = request.query().get("mime.allowEmpty");
    auto mimePeriodallowed = request.query().get("mime.allowed");
    
    try {
      this->com_adobe_granite_rest_assets_impl_asset_content_disposition_filter(post, apply, delete, action, Dollarlocation, propertylist, mimePeriodallowEmpty, mimePeriodallowed, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_rest_impl_api_endpoint_resource_provider_factory_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto providerPeriodroots = request.query().get("provider.roots");
    
    try {
      this->com_adobe_granite_rest_impl_api_endpoint_resource_provider_factory_impl(post, apply, delete, action, Dollarlocation, propertylist, providerPeriodroots, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_rest_impl_servlet_default_get_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto defaultPeriodlimit = request.query().get("default.limit");
    auto usePeriodabsolutePerioduri = request.query().get("use.absolute.uri");
    
    try {
      this->com_adobe_granite_rest_impl_servlet_default_get_servlet(post, apply, delete, action, Dollarlocation, propertylist, defaultPeriodlimit, usePeriodabsolutePerioduri, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_security_user_ui_internal_servlets_ssl_configuration_s_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto hcPeriodtags = request.query().get("hc.tags");
    
    try {
      this->com_adobe_granite_security_user_ui_internal_servlets_ssl_configuration_s(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_security_user_user_properties_service_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto adapterPeriodcondition = request.query().get("adapter.condition");
    auto granitePerioduserpropertiesPeriodnodetypes = request.query().get("granite.userproperties.nodetypes");
    auto granitePerioduserpropertiesPeriodresourcetypes = request.query().get("granite.userproperties.resourcetypes");
    
    try {
      this->com_adobe_granite_security_user_user_properties_service(post, apply, delete, action, Dollarlocation, propertylist, adapterPeriodcondition, granitePerioduserpropertiesPeriodnodetypes, granitePerioduserpropertiesPeriodresourcetypes, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_socialgraph_impl_social_graph_factory_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto group2memberPeriodrelationshipPeriodoutgoing = request.query().get("group2member.relationship.outgoing");
    auto group2memberPeriodexcludedPeriodoutgoing = request.query().get("group2member.excluded.outgoing");
    auto group2memberPeriodrelationshipPeriodincoming = request.query().get("group2member.relationship.incoming");
    auto group2memberPeriodexcludedPeriodincoming = request.query().get("group2member.excluded.incoming");
    
    try {
      this->com_adobe_granite_socialgraph_impl_social_graph_factory_impl(post, apply, delete, action, Dollarlocation, propertylist, group2memberPeriodrelationshipPeriodoutgoing, group2memberPeriodexcludedPeriodoutgoing, group2memberPeriodrelationshipPeriodincoming, group2memberPeriodexcludedPeriodincoming, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_system_monitoring_impl_system_stats_m_bean_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto schedulerPeriodexpression = request.query().get("scheduler.expression");
    auto jmxPeriodobjectname = request.query().get("jmx.objectname");
    
    try {
      this->com_adobe_granite_system_monitoring_impl_system_stats_m_bean_impl(post, apply, delete, action, Dollarlocation, propertylist, schedulerPeriodexpression, jmxPeriodobjectname, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_taskmanagement_impl_jcr_task_adapter_factory_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto adapterPeriodcondition = request.query().get("adapter.condition");
    
    try {
      this->com_adobe_granite_taskmanagement_impl_jcr_task_adapter_factory(post, apply, delete, action, Dollarlocation, propertylist, adapterPeriodcondition, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_taskmanagement_impl_jcr_task_archive_service_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto archivingPeriodenabled = request.query().get("archiving.enabled");
    auto schedulerPeriodexpression = request.query().get("scheduler.expression");
    auto archivePeriodsincePerioddaysPeriodcompleted = request.query().get("archive.since.days.completed");
    
    try {
      this->com_adobe_granite_taskmanagement_impl_jcr_task_archive_service(post, apply, delete, action, Dollarlocation, propertylist, archivingPeriodenabled, schedulerPeriodexpression, archivePeriodsincePerioddaysPeriodcompleted, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_taskmanagement_impl_purge_task_purge_maintenance_task_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto purgeCompleted = request.query().get("purgeCompleted");
    auto completedAge = request.query().get("completedAge");
    auto purgeActive = request.query().get("purgeActive");
    auto activeAge = request.query().get("activeAge");
    auto saveThreshold = request.query().get("saveThreshold");
    
    try {
      this->com_adobe_granite_taskmanagement_impl_purge_task_purge_maintenance_task(post, apply, delete, action, Dollarlocation, propertylist, purgeCompleted, completedAge, purgeActive, activeAge, saveThreshold, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_taskmanagement_impl_service_task_manager_adapter_factor_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto adapterPeriodcondition = request.query().get("adapter.condition");
    auto taskmanagerPeriodadmingroups = request.query().get("taskmanager.admingroups");
    
    try {
      this->com_adobe_granite_taskmanagement_impl_service_task_manager_adapter_factor(post, apply, delete, action, Dollarlocation, propertylist, adapterPeriodcondition, taskmanagerPeriodadmingroups, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_threaddump_thread_dump_collector_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto schedulerPeriodperiod = request.query().get("scheduler.period");
    auto schedulerPeriodrunOn = request.query().get("scheduler.runOn");
    auto granitePeriodthreaddumpPeriodenabled = request.query().get("granite.threaddump.enabled");
    auto granitePeriodthreaddumpPerioddumpsPerFile = request.query().get("granite.threaddump.dumpsPerFile");
    auto granitePeriodthreaddumpPeriodenableGzipCompression = request.query().get("granite.threaddump.enableGzipCompression");
    auto granitePeriodthreaddumpPeriodenableDirectoriesCompression = request.query().get("granite.threaddump.enableDirectoriesCompression");
    auto granitePeriodthreaddumpPeriodenableJStack = request.query().get("granite.threaddump.enableJStack");
    auto granitePeriodthreaddumpPeriodmaxBackupDays = request.query().get("granite.threaddump.maxBackupDays");
    auto granitePeriodthreaddumpPeriodbackupCleanTrigger = request.query().get("granite.threaddump.backupCleanTrigger");
    
    try {
      this->com_adobe_granite_threaddump_thread_dump_collector(post, apply, delete, action, Dollarlocation, propertylist, schedulerPeriodperiod, schedulerPeriodrunOn, granitePeriodthreaddumpPeriodenabled, granitePeriodthreaddumpPerioddumpsPerFile, granitePeriodthreaddumpPeriodenableGzipCompression, granitePeriodthreaddumpPeriodenableDirectoriesCompression, granitePeriodthreaddumpPeriodenableJStack, granitePeriodthreaddumpPeriodmaxBackupDays, granitePeriodthreaddumpPeriodbackupCleanTrigger, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_translation_connector_msft_core_impl_microsoft_transl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto translationFactory = request.query().get("translationFactory");
    auto defaultConnectorLabel = request.query().get("defaultConnectorLabel");
    auto defaultConnectorAttribution = request.query().get("defaultConnectorAttribution");
    auto defaultConnectorWorkspaceId = request.query().get("defaultConnectorWorkspaceId");
    auto defaultConnectorSubscriptionKey = request.query().get("defaultConnectorSubscriptionKey");
    auto languageMapLocation = request.query().get("languageMapLocation");
    auto categoryMapLocation = request.query().get("categoryMapLocation");
    auto retryAttempts = request.query().get("retryAttempts");
    auto timeoutCount = request.query().get("timeoutCount");
    
    try {
      this->com_adobe_granite_translation_connector_msft_core_impl_microsoft_transl(post, apply, delete, action, Dollarlocation, propertylist, translationFactory, defaultConnectorLabel, defaultConnectorAttribution, defaultConnectorWorkspaceId, defaultConnectorSubscriptionKey, languageMapLocation, categoryMapLocation, retryAttempts, timeoutCount, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_translation_core_impl_translation_manager_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto defaultConnectorName = request.query().get("defaultConnectorName");
    auto defaultCategory = request.query().get("defaultCategory");
    
    try {
      this->com_adobe_granite_translation_core_impl_translation_manager_impl(post, apply, delete, action, Dollarlocation, propertylist, defaultConnectorName, defaultCategory, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_ui_clientlibs_impl_html_library_manager_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto htmllibmanagerPeriodtiming = request.query().get("htmllibmanager.timing");
    auto htmllibmanagerPerioddebugPeriodinitPeriodjs = request.query().get("htmllibmanager.debug.init.js");
    auto htmllibmanagerPeriodminify = request.query().get("htmllibmanager.minify");
    auto htmllibmanagerPerioddebug = request.query().get("htmllibmanager.debug");
    auto htmllibmanagerPeriodgzip = request.query().get("htmllibmanager.gzip");
    auto htmllibmanagerPeriodmaxDataUriSize = request.query().get("htmllibmanager.maxDataUriSize");
    auto htmllibmanagerPeriodmaxage = request.query().get("htmllibmanager.maxage");
    auto htmllibmanagerPeriodforceCQUrlInfo = request.query().get("htmllibmanager.forceCQUrlInfo");
    auto htmllibmanagerPerioddefaultthemename = request.query().get("htmllibmanager.defaultthemename");
    auto htmllibmanagerPerioddefaultuserthemename = request.query().get("htmllibmanager.defaultuserthemename");
    auto htmllibmanagerPeriodclientmanager = request.query().get("htmllibmanager.clientmanager");
    auto htmllibmanagerPeriodpathPeriodlist = request.query().get("htmllibmanager.path.list");
    auto htmllibmanagerPeriodexcludedPeriodpathPeriodlist = request.query().get("htmllibmanager.excluded.path.list");
    auto htmllibmanagerPeriodprocessorPeriodjs = request.query().get("htmllibmanager.processor.js");
    auto htmllibmanagerPeriodprocessorPeriodcss = request.query().get("htmllibmanager.processor.css");
    auto htmllibmanagerPeriodlongcachePeriodpatterns = request.query().get("htmllibmanager.longcache.patterns");
    auto htmllibmanagerPeriodlongcachePeriodformat = request.query().get("htmllibmanager.longcache.format");
    auto htmllibmanagerPerioduseFileSystemOutputCache = request.query().get("htmllibmanager.useFileSystemOutputCache");
    auto htmllibmanagerPeriodfileSystemOutputCacheLocation = request.query().get("htmllibmanager.fileSystemOutputCacheLocation");
    auto htmllibmanagerPerioddisablePeriodreplacement = request.query().get("htmllibmanager.disable.replacement");
    
    try {
      this->com_adobe_granite_ui_clientlibs_impl_html_library_manager_impl(post, apply, delete, action, Dollarlocation, propertylist, htmllibmanagerPeriodtiming, htmllibmanagerPerioddebugPeriodinitPeriodjs, htmllibmanagerPeriodminify, htmllibmanagerPerioddebug, htmllibmanagerPeriodgzip, htmllibmanagerPeriodmaxDataUriSize, htmllibmanagerPeriodmaxage, htmllibmanagerPeriodforceCQUrlInfo, htmllibmanagerPerioddefaultthemename, htmllibmanagerPerioddefaultuserthemename, htmllibmanagerPeriodclientmanager, htmllibmanagerPeriodpathPeriodlist, htmllibmanagerPeriodexcludedPeriodpathPeriodlist, htmllibmanagerPeriodprocessorPeriodjs, htmllibmanagerPeriodprocessorPeriodcss, htmllibmanagerPeriodlongcachePeriodpatterns, htmllibmanagerPeriodlongcachePeriodformat, htmllibmanagerPerioduseFileSystemOutputCache, htmllibmanagerPeriodfileSystemOutputCacheLocation, htmllibmanagerPerioddisablePeriodreplacement, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_workflow_console_frags_workflow_withdraw_feature_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto enabled = request.query().get("enabled");
    
    try {
      this->com_adobe_granite_workflow_console_frags_workflow_withdraw_feature(post, apply, delete, action, Dollarlocation, propertylist, enabled, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_workflow_console_publish_workflow_publish_event_service_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto granitePeriodworkflowPeriodWorkflowPublishEventServicePeriodenabled = request.query().get("granite.workflow.WorkflowPublishEventService.enabled");
    
    try {
      this->com_adobe_granite_workflow_console_publish_workflow_publish_event_service(post, apply, delete, action, Dollarlocation, propertylist, granitePeriodworkflowPeriodWorkflowPublishEventServicePeriodenabled, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_workflow_core_jcr_workflow_bucket_manager_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto bucketSize = request.query().get("bucketSize");
    
    try {
      this->com_adobe_granite_workflow_core_jcr_workflow_bucket_manager(post, apply, delete, action, Dollarlocation, propertylist, bucketSize, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_workflow_core_job_external_process_job_handler_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto defaultPeriodtimeout = request.query().get("default.timeout");
    auto maxPeriodtimeout = request.query().get("max.timeout");
    auto defaultPeriodperiod = request.query().get("default.period");
    
    try {
      this->com_adobe_granite_workflow_core_job_external_process_job_handler(post, apply, delete, action, Dollarlocation, propertylist, defaultPeriodtimeout, maxPeriodtimeout, defaultPeriodperiod, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_workflow_core_job_job_handler_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto jobPeriodtopics = request.query().get("job.topics");
    auto allowPeriodselfPeriodprocessPeriodtermination = request.query().get("allow.self.process.termination");
    
    try {
      this->com_adobe_granite_workflow_core_job_job_handler(post, apply, delete, action, Dollarlocation, propertylist, jobPeriodtopics, allowPeriodselfPeriodprocessPeriodtermination, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_workflow_core_offloading_workflow_offloading_job_consum_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto jobPeriodtopics = request.query().get("job.topics");
    
    try {
      this->com_adobe_granite_workflow_core_offloading_workflow_offloading_job_consum(post, apply, delete, action, Dollarlocation, propertylist, jobPeriodtopics, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_workflow_core_payload_map_cache_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto getSystemWorkflowModels = request.query().get("getSystemWorkflowModels");
    auto getPackageRootPath = request.query().get("getPackageRootPath");
    
    try {
      this->com_adobe_granite_workflow_core_payload_map_cache(post, apply, delete, action, Dollarlocation, propertylist, getSystemWorkflowModels, getPackageRootPath, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_workflow_core_payloadmap_payload_move_listener_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto payloadPeriodmovePeriodwhitePeriodlist = request.query().get("payload.move.white.list");
    auto payloadPeriodmovePeriodhandlePeriodfromPeriodworkflowPeriodprocess = request.query().get("payload.move.handle.from.workflow.process");
    
    try {
      this->com_adobe_granite_workflow_core_payloadmap_payload_move_listener(post, apply, delete, action, Dollarlocation, propertylist, payloadPeriodmovePeriodwhitePeriodlist, payloadPeriodmovePeriodhandlePeriodfromPeriodworkflowPeriodprocess, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_workflow_core_workflow_config_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPeriodworkflowPeriodconfigPeriodworkflowPeriodpackagesPeriodrootPeriodpath = request.query().get("cq.workflow.config.workflow.packages.root.path");
    auto cqPeriodworkflowPeriodconfigPeriodworkflowPeriodprocessPeriodlegacyPeriodmode = request.query().get("cq.workflow.config.workflow.process.legacy.mode");
    auto cqPeriodworkflowPeriodconfigPeriodallowPeriodlocking = request.query().get("cq.workflow.config.allow.locking");
    
    try {
      this->com_adobe_granite_workflow_core_workflow_config(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodworkflowPeriodconfigPeriodworkflowPeriodpackagesPeriodrootPeriodpath, cqPeriodworkflowPeriodconfigPeriodworkflowPeriodprocessPeriodlegacyPeriodmode, cqPeriodworkflowPeriodconfigPeriodallowPeriodlocking, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_workflow_core_workflow_session_factory_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto granitePeriodworkflowinboxPeriodsortPeriodpropertyName = request.query().get("granite.workflowinbox.sort.propertyName");
    auto granitePeriodworkflowinboxPeriodsortPeriodorder = request.query().get("granite.workflowinbox.sort.order");
    auto cqPeriodworkflowPeriodjobPeriodretry = request.query().get("cq.workflow.job.retry");
    auto cqPeriodworkflowPeriodsuperuser = request.query().get("cq.workflow.superuser");
    auto granitePeriodworkflowPeriodinboxQuerySize = request.query().get("granite.workflow.inboxQuerySize");
    auto granitePeriodworkflowPeriodadminUserGroupFilter = request.query().get("granite.workflow.adminUserGroupFilter");
    auto granitePeriodworkflowPeriodenforceWorkitemAssigneePermissions = request.query().get("granite.workflow.enforceWorkitemAssigneePermissions");
    auto granitePeriodworkflowPeriodenforceWorkflowInitiatorPermissions = request.query().get("granite.workflow.enforceWorkflowInitiatorPermissions");
    auto granitePeriodworkflowPeriodinjectTenantIdInJobTopics = request.query().get("granite.workflow.injectTenantIdInJobTopics");
    auto granitePeriodworkflowPeriodmaxPurgeSaveThreshold = request.query().get("granite.workflow.maxPurgeSaveThreshold");
    auto granitePeriodworkflowPeriodmaxPurgeQueryCount = request.query().get("granite.workflow.maxPurgeQueryCount");
    
    try {
      this->com_adobe_granite_workflow_core_workflow_session_factory(post, apply, delete, action, Dollarlocation, propertylist, granitePeriodworkflowinboxPeriodsortPeriodpropertyName, granitePeriodworkflowinboxPeriodsortPeriodorder, cqPeriodworkflowPeriodjobPeriodretry, cqPeriodworkflowPeriodsuperuser, granitePeriodworkflowPeriodinboxQuerySize, granitePeriodworkflowPeriodadminUserGroupFilter, granitePeriodworkflowPeriodenforceWorkitemAssigneePermissions, granitePeriodworkflowPeriodenforceWorkflowInitiatorPermissions, granitePeriodworkflowPeriodinjectTenantIdInJobTopics, granitePeriodworkflowPeriodmaxPurgeSaveThreshold, granitePeriodworkflowPeriodmaxPurgeQueryCount, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_granite_workflow_purge_scheduler_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto scheduledpurgePeriodname = request.query().get("scheduledpurge.name");
    auto scheduledpurgePeriodworkflowStatus = request.query().get("scheduledpurge.workflowStatus");
    auto scheduledpurgePeriodmodelIds = request.query().get("scheduledpurge.modelIds");
    auto scheduledpurgePerioddaysold = request.query().get("scheduledpurge.daysold");
    
    try {
      this->com_adobe_granite_workflow_purge_scheduler(post, apply, delete, action, Dollarlocation, propertylist, scheduledpurgePeriodname, scheduledpurgePeriodworkflowStatus, scheduledpurgePeriodmodelIds, scheduledpurgePerioddaysold, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_octopus_ncomm_bootstrap_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto maxConnections = request.query().get("maxConnections");
    auto maxRequests = request.query().get("maxRequests");
    auto requestTimeout = request.query().get("requestTimeout");
    auto requestRetries = request.query().get("requestRetries");
    auto launchTimeout = request.query().get("launchTimeout");
    
    try {
      this->com_adobe_octopus_ncomm_bootstrap(post, apply, delete, action, Dollarlocation, propertylist, maxConnections, maxRequests, requestTimeout, requestRetries, launchTimeout, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_social_integrations_livefyre_user_pingforpull_impl_ping_pull_s_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto communitiesPeriodintegrationPeriodlivefyrePeriodslingPeriodeventPeriodfilter = request.query().get("communities.integration.livefyre.sling.event.filter");
    
    try {
      this->com_adobe_social_integrations_livefyre_user_pingforpull_impl_ping_pull_s(post, apply, delete, action, Dollarlocation, propertylist, communitiesPeriodintegrationPeriodlivefyrePeriodslingPeriodeventPeriodfilter, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_adobe_xmp_worker_files_ncomm_xmp_files_n_comm_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto maxConnections = request.query().get("maxConnections");
    auto maxRequests = request.query().get("maxRequests");
    auto requestTimeout = request.query().get("requestTimeout");
    auto logDir = request.query().get("logDir");
    
    try {
      this->com_adobe_xmp_worker_files_ncomm_xmp_files_n_comm(post, apply, delete, action, Dollarlocation, propertylist, maxConnections, maxRequests, requestTimeout, logDir, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_commons_datasource_jdbcpool_jdbc_pool_service_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto jdbcPerioddriverPeriodclass = request.query().get("jdbc.driver.class");
    auto jdbcPeriodconnectionPerioduri = request.query().get("jdbc.connection.uri");
    auto jdbcPeriodusername = request.query().get("jdbc.username");
    auto jdbcPeriodpassword = request.query().get("jdbc.password");
    auto jdbcPeriodvalidationPeriodquery = request.query().get("jdbc.validation.query");
    auto defaultPeriodreadonly = request.query().get("default.readonly");
    auto defaultPeriodautocommit = request.query().get("default.autocommit");
    auto poolPeriodsize = request.query().get("pool.size");
    auto poolPeriodmaxPeriodwaitPeriodmsec = request.query().get("pool.max.wait.msec");
    auto datasourcePeriodname = request.query().get("datasource.name");
    auto datasourcePeriodsvcPeriodproperties = request.query().get("datasource.svc.properties");
    
    try {
      this->com_day_commons_datasource_jdbcpool_jdbc_pool_service(post, apply, delete, action, Dollarlocation, propertylist, jdbcPerioddriverPeriodclass, jdbcPeriodconnectionPerioduri, jdbcPeriodusername, jdbcPeriodpassword, jdbcPeriodvalidationPeriodquery, defaultPeriodreadonly, defaultPeriodautocommit, poolPeriodsize, poolPeriodmaxPeriodwaitPeriodmsec, datasourcePeriodname, datasourcePeriodsvcPeriodproperties, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_commons_httpclient_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto proxyPeriodenabled = request.query().get("proxy.enabled");
    auto proxyPeriodhost = request.query().get("proxy.host");
    auto proxyPerioduser = request.query().get("proxy.user");
    auto proxyPeriodpassword = request.query().get("proxy.password");
    auto proxyPeriodntlmPeriodhost = request.query().get("proxy.ntlm.host");
    auto proxyPeriodntlmPerioddomain = request.query().get("proxy.ntlm.domain");
    auto proxyPeriodexceptions = request.query().get("proxy.exceptions");
    
    try {
      this->com_day_commons_httpclient(post, apply, delete, action, Dollarlocation, propertylist, proxyPeriodenabled, proxyPeriodhost, proxyPerioduser, proxyPeriodpassword, proxyPeriodntlmPeriodhost, proxyPeriodntlmPerioddomain, proxyPeriodexceptions, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_analytics_impl_store_properties_change_listener_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPeriodstorePeriodlistenerPeriodadditionalStorePaths = request.query().get("cq.store.listener.additionalStorePaths");
    
    try {
      this->com_day_cq_analytics_impl_store_properties_change_listener(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodstorePeriodlistenerPeriodadditionalStorePaths, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_analytics_sitecatalyst_impl_exporter_classifications_exporte_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto allowedPeriodpaths = request.query().get("allowed.paths");
    auto cqPeriodanalyticsPeriodsaintPeriodexporterPeriodpagesize = request.query().get("cq.analytics.saint.exporter.pagesize");
    
    try {
      this->com_day_cq_analytics_sitecatalyst_impl_exporter_classifications_exporte(post, apply, delete, action, Dollarlocation, propertylist, allowedPeriodpaths, cqPeriodanalyticsPeriodsaintPeriodexporterPeriodpagesize, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_analytics_sitecatalyst_impl_importer_report_importer_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto reportPeriodfetchPeriodattempts = request.query().get("report.fetch.attempts");
    auto reportPeriodfetchPerioddelay = request.query().get("report.fetch.delay");
    
    try {
      this->com_day_cq_analytics_sitecatalyst_impl_importer_report_importer(post, apply, delete, action, Dollarlocation, propertylist, reportPeriodfetchPeriodattempts, reportPeriodfetchPerioddelay, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_adapter_factory_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPeriodanalyticsPeriodadapterfactoryPeriodcontextstores = request.query().get("cq.analytics.adapterfactory.contextstores");
    
    try {
      this->com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_adapter_factory(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodanalyticsPeriodadapterfactoryPeriodcontextstores, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_http_client_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPeriodanalyticsPeriodsitecatalystPeriodservicePerioddatacenterPeriodurl = request.query().get("cq.analytics.sitecatalyst.service.datacenter.url");
    auto devhostnamepatterns = request.query().get("devhostnamepatterns");
    auto connectionPeriodtimeout = request.query().get("connection.timeout");
    auto socketPeriodtimeout = request.query().get("socket.timeout");
    
    try {
      this->com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_http_client_impl(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodanalyticsPeriodsitecatalystPeriodservicePerioddatacenterPeriodurl, devhostnamepatterns, connectionPeriodtimeout, socketPeriodtimeout, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_analytics_testandtarget_impl_account_options_updater_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPeriodanalyticsPeriodtestandtargetPeriodaccountoptionsupdaterPeriodenabled = request.query().get("cq.analytics.testandtarget.accountoptionsupdater.enabled");
    
    try {
      this->com_day_cq_analytics_testandtarget_impl_account_options_updater(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodanalyticsPeriodtestandtargetPeriodaccountoptionsupdaterPeriodenabled, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_analytics_testandtarget_impl_delete_author_activity_listener_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPeriodanalyticsPeriodtestandtargetPerioddeleteauthoractivitylistenerPeriodenabled = request.query().get("cq.analytics.testandtarget.deleteauthoractivitylistener.enabled");
    
    try {
      this->com_day_cq_analytics_testandtarget_impl_delete_author_activity_listener(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodanalyticsPeriodtestandtargetPerioddeleteauthoractivitylistenerPeriodenabled, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_analytics_testandtarget_impl_push_author_campaign_page_listener_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPeriodanalyticsPeriodtestandtargetPeriodpushauthorcampaignpagelistenerPeriodenabled = request.query().get("cq.analytics.testandtarget.pushauthorcampaignpagelistener.enabled");
    
    try {
      this->com_day_cq_analytics_testandtarget_impl_push_author_campaign_page_listener(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodanalyticsPeriodtestandtargetPeriodpushauthorcampaignpagelistenerPeriodenabled, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_analytics_testandtarget_impl_segment_importer_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPeriodanalyticsPeriodtestandtargetPeriodsegmentimporterPeriodenabled = request.query().get("cq.analytics.testandtarget.segmentimporter.enabled");
    
    try {
      this->com_day_cq_analytics_testandtarget_impl_segment_importer(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodanalyticsPeriodtestandtargetPeriodsegmentimporterPeriodenabled, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_analytics_testandtarget_impl_service_web_service_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto endpointUri = request.query().get("endpointUri");
    auto connectionTimeout = request.query().get("connectionTimeout");
    auto socketTimeout = request.query().get("socketTimeout");
    
    try {
      this->com_day_cq_analytics_testandtarget_impl_service_web_service_impl(post, apply, delete, action, Dollarlocation, propertylist, endpointUri, connectionTimeout, socketTimeout, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_analytics_testandtarget_impl_servlets_admin_server_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto testandtargetPeriodendpointPeriodurl = request.query().get("testandtarget.endpoint.url");
    
    try {
      this->com_day_cq_analytics_testandtarget_impl_servlets_admin_server_servlet(post, apply, delete, action, Dollarlocation, propertylist, testandtargetPeriodendpointPeriodurl, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_analytics_testandtarget_impl_testandtarget_http_client_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPeriodanalyticsPeriodtestandtargetPeriodapiPeriodurl = request.query().get("cq.analytics.testandtarget.api.url");
    auto cqPeriodanalyticsPeriodtestandtargetPeriodtimeout = request.query().get("cq.analytics.testandtarget.timeout");
    auto cqPeriodanalyticsPeriodtestandtargetPeriodsockettimeout = request.query().get("cq.analytics.testandtarget.sockettimeout");
    auto cqPeriodanalyticsPeriodtestandtargetPeriodrecommendationsPeriodurlPeriodreplace = request.query().get("cq.analytics.testandtarget.recommendations.url.replace");
    auto cqPeriodanalyticsPeriodtestandtargetPeriodrecommendationsPeriodurlPeriodreplacewith = request.query().get("cq.analytics.testandtarget.recommendations.url.replacewith");
    
    try {
      this->com_day_cq_analytics_testandtarget_impl_testandtarget_http_client_impl(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodanalyticsPeriodtestandtargetPeriodapiPeriodurl, cqPeriodanalyticsPeriodtestandtargetPeriodtimeout, cqPeriodanalyticsPeriodtestandtargetPeriodsockettimeout, cqPeriodanalyticsPeriodtestandtargetPeriodrecommendationsPeriodurlPeriodreplace, cqPeriodanalyticsPeriodtestandtargetPeriodrecommendationsPeriodurlPeriodreplacewith, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_auth_impl_cug_cug_support_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cugPeriodexemptedPeriodprincipals = request.query().get("cug.exempted.principals");
    auto cugPeriodenabled = request.query().get("cug.enabled");
    auto cugPeriodprincipalsPeriodregex = request.query().get("cug.principals.regex");
    auto cugPeriodprincipalsPeriodreplacement = request.query().get("cug.principals.replacement");
    
    try {
      this->com_day_cq_auth_impl_cug_cug_support_impl(post, apply, delete, action, Dollarlocation, propertylist, cugPeriodexemptedPeriodprincipals, cugPeriodenabled, cugPeriodprincipalsPeriodregex, cugPeriodprincipalsPeriodreplacement, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_auth_impl_login_selector_handler_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto path = request.query().get("path");
    auto servicePeriodranking = request.query().get("service.ranking");
    auto authPeriodloginselectorPeriodmappings = request.query().get("auth.loginselector.mappings");
    auto authPeriodloginselectorPeriodchangepwPeriodmappings = request.query().get("auth.loginselector.changepw.mappings");
    auto authPeriodloginselectorPerioddefaultloginpage = request.query().get("auth.loginselector.defaultloginpage");
    auto authPeriodloginselectorPerioddefaultchangepwpage = request.query().get("auth.loginselector.defaultchangepwpage");
    auto authPeriodloginselectorPeriodhandle = request.query().get("auth.loginselector.handle");
    auto authPeriodloginselectorPeriodhandlePeriodallPeriodextensions = request.query().get("auth.loginselector.handle.all.extensions");
    
    try {
      this->com_day_cq_auth_impl_login_selector_handler(post, apply, delete, action, Dollarlocation, propertylist, path, servicePeriodranking, authPeriodloginselectorPeriodmappings, authPeriodloginselectorPeriodchangepwPeriodmappings, authPeriodloginselectorPerioddefaultloginpage, authPeriodloginselectorPerioddefaultchangepwpage, authPeriodloginselectorPeriodhandle, authPeriodloginselectorPeriodhandlePeriodallPeriodextensions, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_commons_impl_externalizer_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto externalizerPerioddomains = request.query().get("externalizer.domains");
    auto externalizerPeriodhost = request.query().get("externalizer.host");
    auto externalizerPeriodcontextpath = request.query().get("externalizer.contextpath");
    auto externalizerPeriodencodedpath = request.query().get("externalizer.encodedpath");
    
    try {
      this->com_day_cq_commons_impl_externalizer_impl(post, apply, delete, action, Dollarlocation, propertylist, externalizerPerioddomains, externalizerPeriodhost, externalizerPeriodcontextpath, externalizerPeriodencodedpath, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_commons_servlets_root_mapping_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto rootmappingPeriodtarget = request.query().get("rootmapping.target");
    
    try {
      this->com_day_cq_commons_servlets_root_mapping_servlet(post, apply, delete, action, Dollarlocation, propertylist, rootmappingPeriodtarget, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_compat_codeupgrade_impl_code_upgrade_execution_condition_checke_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto codeupgradetasks = request.query().get("codeupgradetasks");
    auto codeupgradetaskfilters = request.query().get("codeupgradetaskfilters");
    
    try {
      this->com_day_cq_compat_codeupgrade_impl_code_upgrade_execution_condition_checke(post, apply, delete, action, Dollarlocation, propertylist, codeupgradetasks, codeupgradetaskfilters, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_compat_codeupgrade_impl_upgrade_task_ignore_list_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto upgradeTaskIgnoreList = request.query().get("upgradeTaskIgnoreList");
    
    try {
      this->com_day_cq_compat_codeupgrade_impl_upgrade_task_ignore_list(post, apply, delete, action, Dollarlocation, propertylist, upgradeTaskIgnoreList, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_compat_codeupgrade_impl_version_range_task_ignorelist_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto effectiveBundleListPath = request.query().get("effectiveBundleListPath");
    
    try {
      this->com_day_cq_compat_codeupgrade_impl_version_range_task_ignorelist(post, apply, delete, action, Dollarlocation, propertylist, effectiveBundleListPath, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_contentsync_impl_content_sync_manager_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto contentsyncPeriodfallbackPeriodauthorizable = request.query().get("contentsync.fallback.authorizable");
    auto contentsyncPeriodfallbackPeriodupdateuser = request.query().get("contentsync.fallback.updateuser");
    
    try {
      this->com_day_cq_contentsync_impl_content_sync_manager_impl(post, apply, delete, action, Dollarlocation, propertylist, contentsyncPeriodfallbackPeriodauthorizable, contentsyncPeriodfallbackPeriodupdateuser, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_commons_handler_standard_image_handler_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto largeFileThreshold = request.query().get("large_file_threshold");
    auto largeCommentThreshold = request.query().get("large_comment_threshold");
    auto cqPerioddamPeriodenablePeriodextPeriodmetaPeriodextraction = request.query().get("cq.dam.enable.ext.meta.extraction");
    
    try {
      this->com_day_cq_dam_commons_handler_standard_image_handler(post, apply, delete, action, Dollarlocation, propertylist, largeFileThreshold, largeCommentThreshold, cqPerioddamPeriodenablePeriodextPeriodmetaPeriodextraction, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_commons_metadata_xmp_filter_black_white_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto xmpPeriodfilterPeriodapplyWhitelist = request.query().get("xmp.filter.apply_whitelist");
    auto xmpPeriodfilterPeriodwhitelist = request.query().get("xmp.filter.whitelist");
    auto xmpPeriodfilterPeriodapplyBlacklist = request.query().get("xmp.filter.apply_blacklist");
    auto xmpPeriodfilterPeriodblacklist = request.query().get("xmp.filter.blacklist");
    
    try {
      this->com_day_cq_dam_commons_metadata_xmp_filter_black_white(post, apply, delete, action, Dollarlocation, propertylist, xmpPeriodfilterPeriodapplyWhitelist, xmpPeriodfilterPeriodwhitelist, xmpPeriodfilterPeriodapplyBlacklist, xmpPeriodfilterPeriodblacklist, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_commons_util_impl_asset_cache_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto largePeriodfilePeriodmin = request.query().get("large.file.min");
    auto cachePeriodapply = request.query().get("cache.apply");
    auto mimePeriodtypes = request.query().get("mime.types");
    
    try {
      this->com_day_cq_dam_commons_util_impl_asset_cache_impl(post, apply, delete, action, Dollarlocation, propertylist, largePeriodfilePeriodmin, cachePeriodapply, mimePeriodtypes, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_core_impl_annotation_pdf_annotation_pdf_config_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodwidth = request.query().get("cq.dam.config.annotation.pdf.document.width");
    auto cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodheight = request.query().get("cq.dam.config.annotation.pdf.document.height");
    auto cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodpaddingPeriodhorizontal = request.query().get("cq.dam.config.annotation.pdf.document.padding.horizontal");
    auto cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodpaddingPeriodvertical = request.query().get("cq.dam.config.annotation.pdf.document.padding.vertical");
    auto cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodsize = request.query().get("cq.dam.config.annotation.pdf.font.size");
    auto cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodcolor = request.query().get("cq.dam.config.annotation.pdf.font.color");
    auto cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodfamily = request.query().get("cq.dam.config.annotation.pdf.font.family");
    auto cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodlight = request.query().get("cq.dam.config.annotation.pdf.font.light");
    auto cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodmarginTextImage = request.query().get("cq.dam.config.annotation.pdf.marginTextImage");
    auto cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodminImageHeight = request.query().get("cq.dam.config.annotation.pdf.minImageHeight");
    auto cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodwidth = request.query().get("cq.dam.config.annotation.pdf.reviewStatus.width");
    auto cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodapproved = request.query().get("cq.dam.config.annotation.pdf.reviewStatus.color.approved");
    auto cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodrejected = request.query().get("cq.dam.config.annotation.pdf.reviewStatus.color.rejected");
    auto cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodchangesRequested = request.query().get("cq.dam.config.annotation.pdf.reviewStatus.color.changesRequested");
    auto cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodannotationMarkerPeriodwidth = request.query().get("cq.dam.config.annotation.pdf.annotationMarker.width");
    auto cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodassetPeriodminheight = request.query().get("cq.dam.config.annotation.pdf.asset.minheight");
    
    try {
      this->com_day_cq_dam_core_impl_annotation_pdf_annotation_pdf_config(post, apply, delete, action, Dollarlocation, propertylist, cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodwidth, cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodheight, cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodpaddingPeriodhorizontal, cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodpaddingPeriodvertical, cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodsize, cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodcolor, cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodfamily, cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodlight, cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodmarginTextImage, cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodminImageHeight, cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodwidth, cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodapproved, cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodrejected, cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodchangesRequested, cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodannotationMarkerPeriodwidth, cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodassetPeriodminheight, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_core_impl_asset_move_listener_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto enabled = request.query().get("enabled");
    
    try {
      this->com_day_cq_dam_core_impl_asset_move_listener(post, apply, delete, action, Dollarlocation, propertylist, enabled, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_core_impl_assethome_asset_home_page_configuration_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto isEnabled = request.query().get("isEnabled");
    
    try {
      this->com_day_cq_dam_core_impl_assethome_asset_home_page_configuration(post, apply, delete, action, Dollarlocation, propertylist, isEnabled, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_core_impl_assetlinkshare_adhoc_asset_share_proxy_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPerioddamPeriodadhocPeriodassetPeriodsharePeriodprezipPeriodmaxcontentsize = request.query().get("cq.dam.adhoc.asset.share.prezip.maxcontentsize");
    
    try {
      this->com_day_cq_dam_core_impl_assetlinkshare_adhoc_asset_share_proxy_servlet(post, apply, delete, action, Dollarlocation, propertylist, cqPerioddamPeriodadhocPeriodassetPeriodsharePeriodprezipPeriodmaxcontentsize, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_core_impl_cache_cq_buffered_image_cache_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPerioddamPeriodimagePeriodcachePeriodmaxPeriodmemory = request.query().get("cq.dam.image.cache.max.memory");
    auto cqPerioddamPeriodimagePeriodcachePeriodmaxPeriodage = request.query().get("cq.dam.image.cache.max.age");
    auto cqPerioddamPeriodimagePeriodcachePeriodmaxPerioddimension = request.query().get("cq.dam.image.cache.max.dimension");
    
    try {
      this->com_day_cq_dam_core_impl_cache_cq_buffered_image_cache(post, apply, delete, action, Dollarlocation, propertylist, cqPerioddamPeriodimagePeriodcachePeriodmaxPeriodmemory, cqPerioddamPeriodimagePeriodcachePeriodmaxPeriodage, cqPerioddamPeriodimagePeriodcachePeriodmaxPerioddimension, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_core_impl_dam_change_event_listener_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto changeeventlistenerPeriodobservedPeriodpaths = request.query().get("changeeventlistener.observed.paths");
    
    try {
      this->com_day_cq_dam_core_impl_dam_change_event_listener(post, apply, delete, action, Dollarlocation, propertylist, changeeventlistenerPeriodobservedPeriodpaths, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_core_impl_dam_event_purge_service_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto schedulerPeriodexpression = request.query().get("scheduler.expression");
    auto maxSavedActivities = request.query().get("maxSavedActivities");
    auto saveInterval = request.query().get("saveInterval");
    auto enableActivityPurge = request.query().get("enableActivityPurge");
    auto eventTypes = request.query().get("eventTypes");
    
    try {
      this->com_day_cq_dam_core_impl_dam_event_purge_service(post, apply, delete, action, Dollarlocation, propertylist, schedulerPeriodexpression, maxSavedActivities, saveInterval, enableActivityPurge, eventTypes, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_core_impl_dam_event_recorder_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto eventPeriodfilter = request.query().get("event.filter");
    auto eventPeriodqueuePeriodlength = request.query().get("event.queue.length");
    auto eventrecorderPeriodenabled = request.query().get("eventrecorder.enabled");
    auto eventrecorderPeriodblacklist = request.query().get("eventrecorder.blacklist");
    auto eventrecorderPeriodeventtypes = request.query().get("eventrecorder.eventtypes");
    
    try {
      this->com_day_cq_dam_core_impl_dam_event_recorder_impl(post, apply, delete, action, Dollarlocation, propertylist, eventPeriodfilter, eventPeriodqueuePeriodlength, eventrecorderPeriodenabled, eventrecorderPeriodblacklist, eventrecorderPeriodeventtypes, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_core_impl_event_dam_event_audit_listener_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto eventPeriodfilter = request.query().get("event.filter");
    auto enabled = request.query().get("enabled");
    
    try {
      this->com_day_cq_dam_core_impl_event_dam_event_audit_listener(post, apply, delete, action, Dollarlocation, propertylist, eventPeriodfilter, enabled, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_core_impl_expiry_notification_job_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodistimebased = request.query().get("cq.dam.expiry.notification.scheduler.istimebased");
    auto cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodtimebasedPeriodrule = request.query().get("cq.dam.expiry.notification.scheduler.timebased.rule");
    auto cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodperiodPeriodrule = request.query().get("cq.dam.expiry.notification.scheduler.period.rule");
    auto sendEmail = request.query().get("send_email");
    auto assetExpiredLimit = request.query().get("asset_expired_limit");
    auto priorNotificationSeconds = request.query().get("prior_notification_seconds");
    auto cqPerioddamPeriodexpiryPeriodnotificationPeriodurlPeriodprotocol = request.query().get("cq.dam.expiry.notification.url.protocol");
    
    try {
      this->com_day_cq_dam_core_impl_expiry_notification_job_impl(post, apply, delete, action, Dollarlocation, propertylist, cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodistimebased, cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodtimebasedPeriodrule, cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodperiodPeriodrule, sendEmail, assetExpiredLimit, priorNotificationSeconds, cqPerioddamPeriodexpiryPeriodnotificationPeriodurlPeriodprotocol, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_core_impl_foldermetadataschema_folder_metadata_schema_feat_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto isEnabled = request.query().get("isEnabled");
    
    try {
      this->com_day_cq_dam_core_impl_foldermetadataschema_folder_metadata_schema_feat(post, apply, delete, action, Dollarlocation, propertylist, isEnabled, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_core_impl_gfx_commons_gfx_renderer_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto skipPeriodbufferedcache = request.query().get("skip.bufferedcache");
    
    try {
      this->com_day_cq_dam_core_impl_gfx_commons_gfx_renderer(post, apply, delete, action, Dollarlocation, propertylist, skipPeriodbufferedcache, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_core_impl_handler_eps_format_handler_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto mimetype = request.query().get("mimetype");
    
    try {
      this->com_day_cq_dam_core_impl_handler_eps_format_handler(post, apply, delete, action, Dollarlocation, propertylist, mimetype, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_core_impl_handler_indesign_format_handler_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto mimetype = request.query().get("mimetype");
    
    try {
      this->com_day_cq_dam_core_impl_handler_indesign_format_handler(post, apply, delete, action, Dollarlocation, propertylist, mimetype, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_core_impl_handler_jpeg_handler_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPerioddamPeriodenablePeriodextPeriodmetaPeriodextraction = request.query().get("cq.dam.enable.ext.meta.extraction");
    auto largeFileThreshold = request.query().get("large_file_threshold");
    auto largeCommentThreshold = request.query().get("large_comment_threshold");
    
    try {
      this->com_day_cq_dam_core_impl_handler_jpeg_handler(post, apply, delete, action, Dollarlocation, propertylist, cqPerioddamPeriodenablePeriodextPeriodmetaPeriodextraction, largeFileThreshold, largeCommentThreshold, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_core_impl_handler_xmp_n_comm_xmp_handler_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto xmphandlerPeriodcqPeriodformats = request.query().get("xmphandler.cq.formats");
    
    try {
      this->com_day_cq_dam_core_impl_handler_xmp_n_comm_xmp_handler(post, apply, delete, action, Dollarlocation, propertylist, xmphandlerPeriodcqPeriodformats, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_core_impl_jmx_asset_index_update_monitor_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto jmxPeriodobjectname = request.query().get("jmx.objectname");
    auto propertyPeriodmeasurePeriodenabled = request.query().get("property.measure.enabled");
    auto propertyPeriodname = request.query().get("property.name");
    auto propertyPeriodmaxPeriodwaitPeriodms = request.query().get("property.max.wait.ms");
    auto propertyPeriodmaxPeriodrate = request.query().get("property.max.rate");
    auto fulltextPeriodmeasurePeriodenabled = request.query().get("fulltext.measure.enabled");
    auto fulltextPeriodname = request.query().get("fulltext.name");
    auto fulltextPeriodmaxPeriodwaitPeriodms = request.query().get("fulltext.max.wait.ms");
    auto fulltextPeriodmaxPeriodrate = request.query().get("fulltext.max.rate");
    
    try {
      this->com_day_cq_dam_core_impl_jmx_asset_index_update_monitor(post, apply, delete, action, Dollarlocation, propertylist, jmxPeriodobjectname, propertyPeriodmeasurePeriodenabled, propertyPeriodname, propertyPeriodmaxPeriodwaitPeriodms, propertyPeriodmaxPeriodrate, fulltextPeriodmeasurePeriodenabled, fulltextPeriodname, fulltextPeriodmaxPeriodwaitPeriodms, fulltextPeriodmaxPeriodrate, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_core_impl_jmx_asset_migration_m_bean_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto jmxPeriodobjectname = request.query().get("jmx.objectname");
    
    try {
      this->com_day_cq_dam_core_impl_jmx_asset_migration_m_bean_impl(post, apply, delete, action, Dollarlocation, propertylist, jmxPeriodobjectname, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_core_impl_jmx_asset_update_monitor_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto jmxPeriodobjectname = request.query().get("jmx.objectname");
    auto active = request.query().get("active");
    
    try {
      this->com_day_cq_dam_core_impl_jmx_asset_update_monitor_impl(post, apply, delete, action, Dollarlocation, propertylist, jmxPeriodobjectname, active, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_core_impl_jobs_metadataexport_async_metadata_export_config_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto operation = request.query().get("operation");
    auto emailEnabled = request.query().get("emailEnabled");
    
    try {
      this->com_day_cq_dam_core_impl_jobs_metadataexport_async_metadata_export_config(post, apply, delete, action, Dollarlocation, propertylist, operation, emailEnabled, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_core_impl_jobs_metadataimport_async_metadata_import_config_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto operation = request.query().get("operation");
    auto operationIcon = request.query().get("operationIcon");
    auto topicName = request.query().get("topicName");
    auto emailEnabled = request.query().get("emailEnabled");
    
    try {
      this->com_day_cq_dam_core_impl_jobs_metadataimport_async_metadata_import_config(post, apply, delete, action, Dollarlocation, propertylist, operation, operationIcon, topicName, emailEnabled, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_core_impl_lightbox_lightbox_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto slingPeriodservletPeriodpaths = request.query().get("sling.servlet.paths");
    auto slingPeriodservletPeriodmethods = request.query().get("sling.servlet.methods");
    auto cqPerioddamPeriodenablePeriodanonymous = request.query().get("cq.dam.enable.anonymous");
    
    try {
      this->com_day_cq_dam_core_impl_lightbox_lightbox_servlet(post, apply, delete, action, Dollarlocation, propertylist, slingPeriodservletPeriodpaths, slingPeriodservletPeriodmethods, cqPerioddamPeriodenablePeriodanonymous, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_core_impl_metadata_editor_select_component_handler_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto graniteData = request.query().get("granite:data");
    
    try {
      this->com_day_cq_dam_core_impl_metadata_editor_select_component_handler(post, apply, delete, action, Dollarlocation, propertylist, graniteData, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_core_impl_mime_type_asset_upload_restriction_helper_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPerioddamPeriodallowPeriodallPeriodmime = request.query().get("cq.dam.allow.all.mime");
    auto cqPerioddamPeriodallowedPeriodassetPeriodmimes = request.query().get("cq.dam.allowed.asset.mimes");
    
    try {
      this->com_day_cq_dam_core_impl_mime_type_asset_upload_restriction_helper(post, apply, delete, action, Dollarlocation, propertylist, cqPerioddamPeriodallowPeriodallPeriodmime, cqPerioddamPeriodallowedPeriodassetPeriodmimes, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_core_impl_mime_type_dam_mime_type_service_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPerioddamPerioddetectPeriodassetPeriodmimePeriodfromPeriodcontent = request.query().get("cq.dam.detect.asset.mime.from.content");
    
    try {
      this->com_day_cq_dam_core_impl_mime_type_dam_mime_type_service_impl(post, apply, delete, action, Dollarlocation, propertylist, cqPerioddamPerioddetectPeriodassetPeriodmimePeriodfromPeriodcontent, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_core_impl_missing_metadata_notification_job_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodistimebased = request.query().get("cq.dam.missingmetadata.notification.scheduler.istimebased");
    auto cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodtimebasedPeriodrule = request.query().get("cq.dam.missingmetadata.notification.scheduler.timebased.rule");
    auto cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodperiodPeriodrule = request.query().get("cq.dam.missingmetadata.notification.scheduler.period.rule");
    auto cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodrecipient = request.query().get("cq.dam.missingmetadata.notification.recipient");
    
    try {
      this->com_day_cq_dam_core_impl_missing_metadata_notification_job(post, apply, delete, action, Dollarlocation, propertylist, cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodistimebased, cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodtimebasedPeriodrule, cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodperiodPeriodrule, cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodrecipient, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_core_impl_process_send_transient_workflow_completed_email_pr_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto processPeriodlabel = request.query().get("process.label");
    auto notify_on_Complete = request.query().get("Notify on Complete");
    
    try {
      this->com_day_cq_dam_core_impl_process_send_transient_workflow_completed_email_pr(post, apply, delete, action, Dollarlocation, propertylist, processPeriodlabel, notify_on_Complete, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_core_impl_process_text_extraction_process_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto mimeTypes = request.query().get("mimeTypes");
    auto maxExtract = request.query().get("maxExtract");
    
    try {
      this->com_day_cq_dam_core_impl_process_text_extraction_process(post, apply, delete, action, Dollarlocation, propertylist, mimeTypes, maxExtract, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_core_impl_rendition_maker_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto xmpPeriodpropagate = request.query().get("xmp.propagate");
    auto xmpPeriodexcludes = request.query().get("xmp.excludes");
    
    try {
      this->com_day_cq_dam_core_impl_rendition_maker_impl(post, apply, delete, action, Dollarlocation, propertylist, xmpPeriodpropagate, xmpPeriodexcludes, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_core_impl_reports_report_export_service_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto queryBatchSize = request.query().get("queryBatchSize");
    
    try {
      this->com_day_cq_dam_core_impl_reports_report_export_service(post, apply, delete, action, Dollarlocation, propertylist, queryBatchSize, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_core_impl_reports_report_purge_service_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto schedulerPeriodexpression = request.query().get("scheduler.expression");
    auto maxSavedReports = request.query().get("maxSavedReports");
    auto timeDuration = request.query().get("timeDuration");
    auto enableReportPurge = request.query().get("enableReportPurge");
    
    try {
      this->com_day_cq_dam_core_impl_reports_report_purge_service(post, apply, delete, action, Dollarlocation, propertylist, schedulerPeriodexpression, maxSavedReports, timeDuration, enableReportPurge, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_core_impl_servlet_asset_download_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto enabled = request.query().get("enabled");
    
    try {
      this->com_day_cq_dam_core_impl_servlet_asset_download_servlet(post, apply, delete, action, Dollarlocation, propertylist, enabled, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_core_impl_servlet_asset_status_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPerioddamPeriodbatchPeriodstatusPeriodmaxassets = request.query().get("cq.dam.batch.status.maxassets");
    
    try {
      this->com_day_cq_dam_core_impl_servlet_asset_status_servlet(post, apply, delete, action, Dollarlocation, propertylist, cqPerioddamPeriodbatchPeriodstatusPeriodmaxassets, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_core_impl_servlet_asset_xmp_search_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPerioddamPeriodbatchPeriodindesignPeriodmaxassets = request.query().get("cq.dam.batch.indesign.maxassets");
    
    try {
      this->com_day_cq_dam_core_impl_servlet_asset_xmp_search_servlet(post, apply, delete, action, Dollarlocation, propertylist, cqPerioddamPeriodbatchPeriodindesignPeriodmaxassets, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_core_impl_servlet_batch_metadata_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPerioddamPeriodbatchPeriodmetadataPeriodassetPerioddefault = request.query().get("cq.dam.batch.metadata.asset.default");
    auto cqPerioddamPeriodbatchPeriodmetadataPeriodcollectionPerioddefault = request.query().get("cq.dam.batch.metadata.collection.default");
    auto cqPerioddamPeriodbatchPeriodmetadataPeriodmaxresources = request.query().get("cq.dam.batch.metadata.maxresources");
    
    try {
      this->com_day_cq_dam_core_impl_servlet_batch_metadata_servlet(post, apply, delete, action, Dollarlocation, propertylist, cqPerioddamPeriodbatchPeriodmetadataPeriodassetPerioddefault, cqPerioddamPeriodbatchPeriodmetadataPeriodcollectionPerioddefault, cqPerioddamPeriodbatchPeriodmetadataPeriodmaxresources, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_core_impl_servlet_binary_provider_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto slingPeriodservletPeriodresourceTypes = request.query().get("sling.servlet.resourceTypes");
    auto slingPeriodservletPeriodmethods = request.query().get("sling.servlet.methods");
    auto cqPerioddamPerioddrmPeriodenable = request.query().get("cq.dam.drm.enable");
    
    try {
      this->com_day_cq_dam_core_impl_servlet_binary_provider_servlet(post, apply, delete, action, Dollarlocation, propertylist, slingPeriodservletPeriodresourceTypes, slingPeriodservletPeriodmethods, cqPerioddamPerioddrmPeriodenable, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_core_impl_servlet_collection_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPerioddamPeriodbatchPeriodcollectionPeriodproperties = request.query().get("cq.dam.batch.collection.properties");
    auto cqPerioddamPeriodbatchPeriodcollectionPeriodmaxcollections = request.query().get("cq.dam.batch.collection.maxcollections");
    
    try {
      this->com_day_cq_dam_core_impl_servlet_collection_servlet(post, apply, delete, action, Dollarlocation, propertylist, cqPerioddamPeriodbatchPeriodcollectionPeriodproperties, cqPerioddamPeriodbatchPeriodcollectionPeriodmaxcollections, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_core_impl_servlet_collections_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPerioddamPeriodbatchPeriodcollectionsPeriodproperties = request.query().get("cq.dam.batch.collections.properties");
    auto cqPerioddamPeriodbatchPeriodcollectionsPeriodlimit = request.query().get("cq.dam.batch.collections.limit");
    
    try {
      this->com_day_cq_dam_core_impl_servlet_collections_servlet(post, apply, delete, action, Dollarlocation, propertylist, cqPerioddamPeriodbatchPeriodcollectionsPeriodproperties, cqPerioddamPeriodbatchPeriodcollectionsPeriodlimit, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_core_impl_servlet_companion_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto more_Info = request.query().get("More Info");
    auto SlashmntSlashoverlaySlashdamSlashguiSlashcontentSlashassetsSlashmoreinfoPeriodhtmlSlashDollarLeft_Curly_BracketpathRight_Curly_Bracket = request.query().get("/mnt/overlay/dam/gui/content/assets/moreinfo.html/${path}");
    
    try {
      this->com_day_cq_dam_core_impl_servlet_companion_servlet(post, apply, delete, action, Dollarlocation, propertylist, more_Info, SlashmntSlashoverlaySlashdamSlashguiSlashcontentSlashassetsSlashmoreinfoPeriodhtmlSlashDollarLeft_Curly_BracketpathRight_Curly_Bracket, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_core_impl_servlet_create_asset_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto detectDuplicate = request.query().get("detect_duplicate");
    
    try {
      this->com_day_cq_dam_core_impl_servlet_create_asset_servlet(post, apply, delete, action, Dollarlocation, propertylist, detectDuplicate, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_core_impl_servlet_dam_content_disposition_filter_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPeriodmimePeriodtypePeriodblacklist = request.query().get("cq.mime.type.blacklist");
    auto cqPerioddamPeriodemptyPeriodmime = request.query().get("cq.dam.empty.mime");
    
    try {
      this->com_day_cq_dam_core_impl_servlet_dam_content_disposition_filter(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodmimePeriodtypePeriodblacklist, cqPerioddamPeriodemptyPeriodmime, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_core_impl_servlet_guid_lookup_filter_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPerioddamPeriodcorePeriodguidlookupfilterPeriodenabled = request.query().get("cq.dam.core.guidlookupfilter.enabled");
    
    try {
      this->com_day_cq_dam_core_impl_servlet_guid_lookup_filter(post, apply, delete, action, Dollarlocation, propertylist, cqPerioddamPeriodcorePeriodguidlookupfilterPeriodenabled, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_core_impl_servlet_health_check_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPerioddamPeriodsyncPeriodworkflowPeriodid = request.query().get("cq.dam.sync.workflow.id");
    auto cqPerioddamPeriodsyncPeriodfolderPeriodtypes = request.query().get("cq.dam.sync.folder.types");
    
    try {
      this->com_day_cq_dam_core_impl_servlet_health_check_servlet(post, apply, delete, action, Dollarlocation, propertylist, cqPerioddamPeriodsyncPeriodworkflowPeriodid, cqPerioddamPeriodsyncPeriodfolderPeriodtypes, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_core_impl_servlet_metadata_get_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto slingPeriodservletPeriodresourceTypes = request.query().get("sling.servlet.resourceTypes");
    auto slingPeriodservletPeriodmethods = request.query().get("sling.servlet.methods");
    auto slingPeriodservletPeriodextensions = request.query().get("sling.servlet.extensions");
    auto slingPeriodservletPeriodselectors = request.query().get("sling.servlet.selectors");
    
    try {
      this->com_day_cq_dam_core_impl_servlet_metadata_get_servlet(post, apply, delete, action, Dollarlocation, propertylist, slingPeriodservletPeriodresourceTypes, slingPeriodservletPeriodmethods, slingPeriodservletPeriodextensions, slingPeriodservletPeriodselectors, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_core_impl_servlet_multiple_license_accept_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPerioddamPerioddrmPeriodenable = request.query().get("cq.dam.drm.enable");
    
    try {
      this->com_day_cq_dam_core_impl_servlet_multiple_license_accept_servlet(post, apply, delete, action, Dollarlocation, propertylist, cqPerioddamPerioddrmPeriodenable, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_core_impl_servlet_resource_collection_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto slingPeriodservletPeriodresourceTypes = request.query().get("sling.servlet.resourceTypes");
    auto slingPeriodservletPeriodmethods = request.query().get("sling.servlet.methods");
    auto slingPeriodservletPeriodselectors = request.query().get("sling.servlet.selectors");
    auto downloadPeriodconfig = request.query().get("download.config");
    auto viewPeriodselector = request.query().get("view.selector");
    auto sendEmail = request.query().get("send_email");
    
    try {
      this->com_day_cq_dam_core_impl_servlet_resource_collection_servlet(post, apply, delete, action, Dollarlocation, propertylist, slingPeriodservletPeriodresourceTypes, slingPeriodservletPeriodmethods, slingPeriodservletPeriodselectors, downloadPeriodconfig, viewPeriodselector, sendEmail, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_core_impl_ui_preview_folder_preview_updater_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto createPreviewEnabled = request.query().get("createPreviewEnabled");
    auto updatePreviewEnabled = request.query().get("updatePreviewEnabled");
    auto queueSize = request.query().get("queueSize");
    auto folderPreviewRenditionRegex = request.query().get("folderPreviewRenditionRegex");
    
    try {
      this->com_day_cq_dam_core_impl_ui_preview_folder_preview_updater_impl(post, apply, delete, action, Dollarlocation, propertylist, createPreviewEnabled, updatePreviewEnabled, queueSize, folderPreviewRenditionRegex, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_core_impl_unzip_unzip_config_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPerioddamPeriodconfigPeriodunzipPeriodmaxuncompressedsize = request.query().get("cq.dam.config.unzip.maxuncompressedsize");
    auto cqPerioddamPeriodconfigPeriodunzipPeriodencoding = request.query().get("cq.dam.config.unzip.encoding");
    
    try {
      this->com_day_cq_dam_core_impl_unzip_unzip_config(post, apply, delete, action, Dollarlocation, propertylist, cqPerioddamPeriodconfigPeriodunzipPeriodmaxuncompressedsize, cqPerioddamPeriodconfigPeriodunzipPeriodencoding, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_core_process_exif_tool_extract_metadata_process_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto processPeriodlabel = request.query().get("process.label");
    auto cqPerioddamPeriodenablePeriodsha1 = request.query().get("cq.dam.enable.sha1");
    
    try {
      this->com_day_cq_dam_core_process_exif_tool_extract_metadata_process(post, apply, delete, action, Dollarlocation, propertylist, processPeriodlabel, cqPerioddamPeriodenablePeriodsha1, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_core_process_extract_metadata_process_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto processPeriodlabel = request.query().get("process.label");
    auto cqPerioddamPeriodenablePeriodsha1 = request.query().get("cq.dam.enable.sha1");
    
    try {
      this->com_day_cq_dam_core_process_extract_metadata_process(post, apply, delete, action, Dollarlocation, propertylist, processPeriodlabel, cqPerioddamPeriodenablePeriodsha1, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_core_process_metadata_processor_process_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto processPeriodlabel = request.query().get("process.label");
    auto cqPerioddamPeriodenablePeriodsha1 = request.query().get("cq.dam.enable.sha1");
    auto cqPerioddamPeriodmetadataPeriodxssprotectedPeriodproperties = request.query().get("cq.dam.metadata.xssprotected.properties");
    
    try {
      this->com_day_cq_dam_core_process_metadata_processor_process(post, apply, delete, action, Dollarlocation, propertylist, processPeriodlabel, cqPerioddamPeriodenablePeriodsha1, cqPerioddamPeriodmetadataPeriodxssprotectedPeriodproperties, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_handler_ffmpeg_locator_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto executablePeriodsearchpath = request.query().get("executable.searchpath");
    
    try {
      this->com_day_cq_dam_handler_ffmpeg_locator_impl(post, apply, delete, action, Dollarlocation, propertylist, executablePeriodsearchpath, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_handler_gibson_fontmanager_impl_font_manager_service_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto eventPeriodfilter = request.query().get("event.filter");
    auto fontmgrPeriodsystemPeriodfontPerioddir = request.query().get("fontmgr.system.font.dir");
    auto fontmgrPeriodadobePeriodfontPerioddir = request.query().get("fontmgr.adobe.font.dir");
    auto fontmgrPeriodcustomerPeriodfontPerioddir = request.query().get("fontmgr.customer.font.dir");
    
    try {
      this->com_day_cq_dam_handler_gibson_fontmanager_impl_font_manager_service_impl(post, apply, delete, action, Dollarlocation, propertylist, eventPeriodfilter, fontmgrPeriodsystemPeriodfontPerioddir, fontmgrPeriodadobePeriodfontPerioddir, fontmgrPeriodcustomerPeriodfontPerioddir, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_handler_standard_pdf_pdf_handler_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto rasterPeriodannotation = request.query().get("raster.annotation");
    
    try {
      this->com_day_cq_dam_handler_standard_pdf_pdf_handler(post, apply, delete, action, Dollarlocation, propertylist, rasterPeriodannotation, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_handler_standard_ps_post_script_handler_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto rasterPeriodannotation = request.query().get("raster.annotation");
    
    try {
      this->com_day_cq_dam_handler_standard_ps_post_script_handler(post, apply, delete, action, Dollarlocation, propertylist, rasterPeriodannotation, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_handler_standard_psd_psd_handler_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto largeFileThreshold = request.query().get("large_file_threshold");
    
    try {
      this->com_day_cq_dam_handler_standard_psd_psd_handler(post, apply, delete, action, Dollarlocation, propertylist, largeFileThreshold, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_ids_impl_ids_job_processor_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto enablePeriodmultisession = request.query().get("enable.multisession");
    auto idsPeriodccPeriodenable = request.query().get("ids.cc.enable");
    auto enablePeriodretry = request.query().get("enable.retry");
    auto enablePeriodretryPeriodscripterror = request.query().get("enable.retry.scripterror");
    auto externalizerPerioddomainPeriodcqhost = request.query().get("externalizer.domain.cqhost");
    auto externalizerPerioddomainPeriodhttp = request.query().get("externalizer.domain.http");
    
    try {
      this->com_day_cq_dam_ids_impl_ids_job_processor(post, apply, delete, action, Dollarlocation, propertylist, enablePeriodmultisession, idsPeriodccPeriodenable, enablePeriodretry, enablePeriodretryPeriodscripterror, externalizerPerioddomainPeriodcqhost, externalizerPerioddomainPeriodhttp, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_ids_impl_ids_pool_manager_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto maxPerioderrorsPeriodtoPeriodblacklist = request.query().get("max.errors.to.blacklist");
    auto retryPeriodintervalPeriodtoPeriodwhitelist = request.query().get("retry.interval.to.whitelist");
    auto connectPeriodtimeout = request.query().get("connect.timeout");
    auto socketPeriodtimeout = request.query().get("socket.timeout");
    auto processPeriodlabel = request.query().get("process.label");
    auto connectionPeriodusePeriodmax = request.query().get("connection.use.max");
    
    try {
      this->com_day_cq_dam_ids_impl_ids_pool_manager_impl(post, apply, delete, action, Dollarlocation, propertylist, maxPerioderrorsPeriodtoPeriodblacklist, retryPeriodintervalPeriodtoPeriodwhitelist, connectPeriodtimeout, socketPeriodtimeout, processPeriodlabel, connectionPeriodusePeriodmax, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_indd_impl_handler_indesign_xmp_handler_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto processPeriodlabel = request.query().get("process.label");
    auto extractPeriodpages = request.query().get("extract.pages");
    
    try {
      this->com_day_cq_dam_indd_impl_handler_indesign_xmp_handler(post, apply, delete, action, Dollarlocation, propertylist, processPeriodlabel, extractPeriodpages, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_indd_impl_servlet_snippet_creation_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto snippetcreationPeriodmaxcollections = request.query().get("snippetcreation.maxcollections");
    
    try {
      this->com_day_cq_dam_indd_impl_servlet_snippet_creation_servlet(post, apply, delete, action, Dollarlocation, propertylist, snippetcreationPeriodmaxcollections, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_indd_process_indd_media_extract_process_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto processPeriodlabel = request.query().get("process.label");
    auto cqPerioddamPeriodinddPeriodpagesPeriodregex = request.query().get("cq.dam.indd.pages.regex");
    auto idsPeriodjobPerioddecoupled = request.query().get("ids.job.decoupled");
    auto idsPeriodjobPeriodworkflowPeriodmodel = request.query().get("ids.job.workflow.model");
    
    try {
      this->com_day_cq_dam_indd_process_indd_media_extract_process(post, apply, delete, action, Dollarlocation, propertylist, processPeriodlabel, cqPerioddamPeriodinddPeriodpagesPeriodregex, idsPeriodjobPerioddecoupled, idsPeriodjobPeriodworkflowPeriodmodel, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_performance_internal_asset_performance_data_handler_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto batchPeriodcommitPeriodsize = request.query().get("batch.commit.size");
    
    try {
      this->com_day_cq_dam_performance_internal_asset_performance_data_handler_impl(post, apply, delete, action, Dollarlocation, propertylist, batchPeriodcommitPeriodsize, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_performance_internal_asset_performance_report_sync_job_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto schedulerPeriodexpression = request.query().get("scheduler.expression");
    
    try {
      this->com_day_cq_dam_performance_internal_asset_performance_report_sync_job(post, apply, delete, action, Dollarlocation, propertylist, schedulerPeriodexpression, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_pim_impl_sourcing_upload_process_product_assets_upload_pro_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto deletePeriodzipPeriodfile = request.query().get("delete.zip.file");
    
    try {
      this->com_day_cq_dam_pim_impl_sourcing_upload_process_product_assets_upload_pro(post, apply, delete, action, Dollarlocation, propertylist, deletePeriodzipPeriodfile, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_s7dam_common_analytics_impl_s7dam_dynamic_media_config_even_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPerioddamPeriods7damPerioddynamicmediaconfigeventlistenerPeriodenabled = request.query().get("cq.dam.s7dam.dynamicmediaconfigeventlistener.enabled");
    
    try {
      this->com_day_cq_dam_s7dam_common_analytics_impl_s7dam_dynamic_media_config_even(post, apply, delete, action, Dollarlocation, propertylist, cqPerioddamPeriods7damPerioddynamicmediaconfigeventlistenerPeriodenabled, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_s7dam_common_analytics_impl_site_catalyst_report_runner_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto schedulerPeriodexpression = request.query().get("scheduler.expression");
    auto schedulerPeriodconcurrent = request.query().get("scheduler.concurrent");
    
    try {
      this->com_day_cq_dam_s7dam_common_analytics_impl_site_catalyst_report_runner(post, apply, delete, action, Dollarlocation, propertylist, schedulerPeriodexpression, schedulerPeriodconcurrent, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_s7dam_common_post_servlets_set_create_handler_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto slingPeriodpostPeriodoperation = request.query().get("sling.post.operation");
    auto slingPeriodservletPeriodmethods = request.query().get("sling.servlet.methods");
    
    try {
      this->com_day_cq_dam_s7dam_common_post_servlets_set_create_handler(post, apply, delete, action, Dollarlocation, propertylist, slingPeriodpostPeriodoperation, slingPeriodservletPeriodmethods, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_s7dam_common_post_servlets_set_modify_handler_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto slingPeriodpostPeriodoperation = request.query().get("sling.post.operation");
    auto slingPeriodservletPeriodmethods = request.query().get("sling.servlet.methods");
    
    try {
      this->com_day_cq_dam_s7dam_common_post_servlets_set_modify_handler(post, apply, delete, action, Dollarlocation, propertylist, slingPeriodpostPeriodoperation, slingPeriodservletPeriodmethods, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_s7dam_common_process_video_thumbnail_download_process_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto processPeriodlabel = request.query().get("process.label");
    
    try {
      this->com_day_cq_dam_s7dam_common_process_video_thumbnail_download_process(post, apply, delete, action, Dollarlocation, propertylist, processPeriodlabel, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_s7dam_common_s7dam_dam_change_event_listener_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPerioddamPeriods7damPerioddamchangeeventlistenerPeriodenabled = request.query().get("cq.dam.s7dam.damchangeeventlistener.enabled");
    
    try {
      this->com_day_cq_dam_s7dam_common_s7dam_dam_change_event_listener(post, apply, delete, action, Dollarlocation, propertylist, cqPerioddamPeriods7damPerioddamchangeeventlistenerPeriodenabled, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_s7dam_common_servlets_s7dam_product_info_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto slingPeriodservletPeriodpaths = request.query().get("sling.servlet.paths");
    auto slingPeriodservletPeriodmethods = request.query().get("sling.servlet.methods");
    
    try {
      this->com_day_cq_dam_s7dam_common_servlets_s7dam_product_info_servlet(post, apply, delete, action, Dollarlocation, propertylist, slingPeriodservletPeriodpaths, slingPeriodservletPeriodmethods, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_s7dam_common_video_impl_video_proxy_client_service_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodminsizePeriodname = request.query().get("cq.dam.s7dam.videoproxyclientservice.multipartupload.minsize.name");
    auto cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodpartsizePeriodname = request.query().get("cq.dam.s7dam.videoproxyclientservice.multipartupload.partsize.name");
    auto cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodnumthreadPeriodname = request.query().get("cq.dam.s7dam.videoproxyclientservice.multipartupload.numthread.name");
    auto cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodreadtimeoutPeriodname = request.query().get("cq.dam.s7dam.videoproxyclientservice.http.readtimeout.name");
    auto cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodconnectiontimeoutPeriodname = request.query().get("cq.dam.s7dam.videoproxyclientservice.http.connectiontimeout.name");
    auto cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodmaxretrycountPeriodname = request.query().get("cq.dam.s7dam.videoproxyclientservice.http.maxretrycount.name");
    auto cqPerioddamPeriods7damPeriodvideoproxyclientservicePerioduploadprogressPeriodintervalPeriodname = request.query().get("cq.dam.s7dam.videoproxyclientservice.uploadprogress.interval.name");
    
    try {
      this->com_day_cq_dam_s7dam_common_video_impl_video_proxy_client_service_impl(post, apply, delete, action, Dollarlocation, propertylist, cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodminsizePeriodname, cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodpartsizePeriodname, cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodnumthreadPeriodname, cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodreadtimeoutPeriodname, cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodconnectiontimeoutPeriodname, cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodmaxretrycountPeriodname, cqPerioddamPeriods7damPeriodvideoproxyclientservicePerioduploadprogressPeriodintervalPeriodname, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_scene7_impl_scene7_api_client_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPerioddamPeriodscene7PeriodapiclientPeriodrecordsperpagePeriodnofilterPeriodname = request.query().get("cq.dam.scene7.apiclient.recordsperpage.nofilter.name");
    auto cqPerioddamPeriodscene7PeriodapiclientPeriodrecordsperpagePeriodwithfilterPeriodname = request.query().get("cq.dam.scene7.apiclient.recordsperpage.withfilter.name");
    
    try {
      this->com_day_cq_dam_scene7_impl_scene7_api_client_impl(post, apply, delete, action, Dollarlocation, propertylist, cqPerioddamPeriodscene7PeriodapiclientPeriodrecordsperpagePeriodnofilterPeriodname, cqPerioddamPeriodscene7PeriodapiclientPeriodrecordsperpagePeriodwithfilterPeriodname, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_scene7_impl_scene7_asset_mime_type_service_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPerioddamPeriodscene7PeriodassetmimetypeservicePeriodmapping = request.query().get("cq.dam.scene7.assetmimetypeservice.mapping");
    
    try {
      this->com_day_cq_dam_scene7_impl_scene7_asset_mime_type_service_impl(post, apply, delete, action, Dollarlocation, propertylist, cqPerioddamPeriodscene7PeriodassetmimetypeservicePeriodmapping, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_scene7_impl_scene7_configuration_event_listener_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPerioddamPeriodscene7PeriodconfigurationeventlistenerPeriodenabled = request.query().get("cq.dam.scene7.configurationeventlistener.enabled");
    
    try {
      this->com_day_cq_dam_scene7_impl_scene7_configuration_event_listener(post, apply, delete, action, Dollarlocation, propertylist, cqPerioddamPeriodscene7PeriodconfigurationeventlistenerPeriodenabled, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_scene7_impl_scene7_dam_change_event_listener_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPerioddamPeriodscene7PerioddamchangeeventlistenerPeriodenabled = request.query().get("cq.dam.scene7.damchangeeventlistener.enabled");
    auto cqPerioddamPeriodscene7PerioddamchangeeventlistenerPeriodobservedPeriodpaths = request.query().get("cq.dam.scene7.damchangeeventlistener.observed.paths");
    
    try {
      this->com_day_cq_dam_scene7_impl_scene7_dam_change_event_listener(post, apply, delete, action, Dollarlocation, propertylist, cqPerioddamPeriodscene7PerioddamchangeeventlistenerPeriodenabled, cqPerioddamPeriodscene7PerioddamchangeeventlistenerPeriodobservedPeriodpaths, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_scene7_impl_scene7_flash_templates_service_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto scene7FlashTemplatesPeriodrti = request.query().get("scene7FlashTemplates.rti");
    auto scene7FlashTemplatesPeriodrsi = request.query().get("scene7FlashTemplates.rsi");
    auto scene7FlashTemplatesPeriodrb = request.query().get("scene7FlashTemplates.rb");
    auto scene7FlashTemplatesPeriodrurl = request.query().get("scene7FlashTemplates.rurl");
    auto scene7FlashTemplatePeriodurlFormatParameter = request.query().get("scene7FlashTemplate.urlFormatParameter");
    
    try {
      this->com_day_cq_dam_scene7_impl_scene7_flash_templates_service_impl(post, apply, delete, action, Dollarlocation, propertylist, scene7FlashTemplatesPeriodrti, scene7FlashTemplatesPeriodrsi, scene7FlashTemplatesPeriodrb, scene7FlashTemplatesPeriodrurl, scene7FlashTemplatePeriodurlFormatParameter, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_scene7_impl_scene7_upload_service_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPerioddamPeriodscene7PerioduploadservicePeriodactivejobtimeoutPeriodlabel = request.query().get("cq.dam.scene7.uploadservice.activejobtimeout.label");
    auto cqPerioddamPeriodscene7PerioduploadservicePeriodconnectionmaxperroutePeriodlabel = request.query().get("cq.dam.scene7.uploadservice.connectionmaxperroute.label");
    
    try {
      this->com_day_cq_dam_scene7_impl_scene7_upload_service_impl(post, apply, delete, action, Dollarlocation, propertylist, cqPerioddamPeriodscene7PerioduploadservicePeriodactivejobtimeoutPeriodlabel, cqPerioddamPeriodscene7PerioduploadservicePeriodconnectionmaxperroutePeriodlabel, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_stock_integration_impl_cache_stock_cache_configuration_ser_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto getCacheExpirationUnit = request.query().get("getCacheExpirationUnit");
    auto getCacheExpirationValue = request.query().get("getCacheExpirationValue");
    
    try {
      this->com_day_cq_dam_stock_integration_impl_cache_stock_cache_configuration_ser(post, apply, delete, action, Dollarlocation, propertylist, getCacheExpirationUnit, getCacheExpirationValue, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_stock_integration_impl_configuration_stock_configuration_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto name = request.query().get("name");
    auto locale = request.query().get("locale");
    auto imsConfig = request.query().get("imsConfig");
    
    try {
      this->com_day_cq_dam_stock_integration_impl_configuration_stock_configuration(post, apply, delete, action, Dollarlocation, propertylist, name, locale, imsConfig, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_dam_video_impl_servlet_video_test_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto enabled = request.query().get("enabled");
    
    try {
      this->com_day_cq_dam_video_impl_servlet_video_test_servlet(post, apply, delete, action, Dollarlocation, propertylist, enabled, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_extwidget_servlets_image_sprite_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto maxWidth = request.query().get("maxWidth");
    auto maxHeight = request.query().get("maxHeight");
    
    try {
      this->com_day_cq_extwidget_servlets_image_sprite_servlet(post, apply, delete, action, Dollarlocation, propertylist, maxWidth, maxHeight, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_image_internal_font_font_helper_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto fontpath = request.query().get("fontpath");
    auto oversamplingFactor = request.query().get("oversamplingFactor");
    
    try {
      this->com_day_cq_image_internal_font_font_helper(post, apply, delete, action, Dollarlocation, propertylist, fontpath, oversamplingFactor, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_jcrclustersupport_cluster_start_level_controller_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto clusterPeriodlevelPeriodenable = request.query().get("cluster.level.enable");
    auto clusterPeriodmasterPeriodlevel = request.query().get("cluster.master.level");
    auto clusterPeriodslavePeriodlevel = request.query().get("cluster.slave.level");
    
    try {
      this->com_day_cq_jcrclustersupport_cluster_start_level_controller(post, apply, delete, action, Dollarlocation, propertylist, clusterPeriodlevelPeriodenable, clusterPeriodmasterPeriodlevel, clusterPeriodslavePeriodlevel, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_mailer_default_mail_service_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto smtpPeriodhost = request.query().get("smtp.host");
    auto smtpPeriodport = request.query().get("smtp.port");
    auto smtpPerioduser = request.query().get("smtp.user");
    auto smtpPeriodpassword = request.query().get("smtp.password");
    auto fromPeriodaddress = request.query().get("from.address");
    auto smtpPeriodssl = request.query().get("smtp.ssl");
    auto smtpPeriodstarttls = request.query().get("smtp.starttls");
    auto debugPeriodemail = request.query().get("debug.email");
    
    try {
      this->com_day_cq_mailer_default_mail_service(post, apply, delete, action, Dollarlocation, propertylist, smtpPeriodhost, smtpPeriodport, smtpPerioduser, smtpPeriodpassword, fromPeriodaddress, smtpPeriodssl, smtpPeriodstarttls, debugPeriodemail, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_mailer_impl_cq_mailing_service_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto maxPeriodrecipientPeriodcount = request.query().get("max.recipient.count");
    
    try {
      this->com_day_cq_mailer_impl_cq_mailing_service(post, apply, delete, action, Dollarlocation, propertylist, maxPeriodrecipientPeriodcount, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_mailer_impl_email_cq_email_template_factory_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto mailerPeriodemailPeriodcharset = request.query().get("mailer.email.charset");
    
    try {
      this->com_day_cq_mailer_impl_email_cq_email_template_factory(post, apply, delete, action, Dollarlocation, propertylist, mailerPeriodemailPeriodcharset, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_mailer_impl_email_cq_retriever_template_factory_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto mailerPeriodemailPeriodembed = request.query().get("mailer.email.embed");
    auto mailerPeriodemailPeriodcharset = request.query().get("mailer.email.charset");
    auto mailerPeriodemailPeriodretrieverUserID = request.query().get("mailer.email.retrieverUserID");
    auto mailerPeriodemailPeriodretrieverUserPWD = request.query().get("mailer.email.retrieverUserPWD");
    
    try {
      this->com_day_cq_mailer_impl_email_cq_retriever_template_factory(post, apply, delete, action, Dollarlocation, propertylist, mailerPeriodemailPeriodembed, mailerPeriodemailPeriodcharset, mailerPeriodemailPeriodretrieverUserID, mailerPeriodemailPeriodretrieverUserPWD, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_mcm_campaign_impl_integration_config_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto aemPeriodmcmPeriodcampaignPeriodformConstraints = request.query().get("aem.mcm.campaign.formConstraints");
    auto aemPeriodmcmPeriodcampaignPeriodpublicUrl = request.query().get("aem.mcm.campaign.publicUrl");
    auto aemPeriodmcmPeriodcampaignPeriodrelaxedSSL = request.query().get("aem.mcm.campaign.relaxedSSL");
    
    try {
      this->com_day_cq_mcm_campaign_impl_integration_config_impl(post, apply, delete, action, Dollarlocation, propertylist, aemPeriodmcmPeriodcampaignPeriodformConstraints, aemPeriodmcmPeriodcampaignPeriodpublicUrl, aemPeriodmcmPeriodcampaignPeriodrelaxedSSL, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_mcm_campaign_importer_personalized_text_handler_factory_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto servicePeriodranking = request.query().get("service.ranking");
    auto tagpattern = request.query().get("tagpattern");
    
    try {
      this->com_day_cq_mcm_campaign_importer_personalized_text_handler_factory(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, tagpattern, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_mcm_core_newsletter_newsletter_email_service_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto fromPeriodaddress = request.query().get("from.address");
    auto senderPeriodhost = request.query().get("sender.host");
    auto maxPeriodbouncePeriodcount = request.query().get("max.bounce.count");
    
    try {
      this->com_day_cq_mcm_core_newsletter_newsletter_email_service_impl(post, apply, delete, action, Dollarlocation, propertylist, fromPeriodaddress, senderPeriodhost, maxPeriodbouncePeriodcount, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_mcm_impl_mcm_configuration_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto experiencePeriodindirection = request.query().get("experience.indirection");
    auto touchpointPeriodindirection = request.query().get("touchpoint.indirection");
    
    try {
      this->com_day_cq_mcm_impl_mcm_configuration(post, apply, delete, action, Dollarlocation, propertylist, experiencePeriodindirection, touchpointPeriodindirection, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_mcm_landingpage_parser_taghandlers_cta_click_through_componen_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto servicePeriodranking = request.query().get("service.ranking");
    auto tagpattern = request.query().get("tagpattern");
    auto componentPeriodresourceType = request.query().get("component.resourceType");
    
    try {
      this->com_day_cq_mcm_landingpage_parser_taghandlers_cta_click_through_componen(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, tagpattern, componentPeriodresourceType, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_mcm_landingpage_parser_taghandlers_cta_graphical_click_throug_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto servicePeriodranking = request.query().get("service.ranking");
    auto tagpattern = request.query().get("tagpattern");
    auto componentPeriodresourceType = request.query().get("component.resourceType");
    
    try {
      this->com_day_cq_mcm_landingpage_parser_taghandlers_cta_graphical_click_throug(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, tagpattern, componentPeriodresourceType, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_mcm_landingpage_parser_taghandlers_cta_lead_form_cta_component_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto servicePeriodranking = request.query().get("service.ranking");
    auto tagpattern = request.query().get("tagpattern");
    
    try {
      this->com_day_cq_mcm_landingpage_parser_taghandlers_cta_lead_form_cta_component(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, tagpattern, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_mcm_landingpage_parser_taghandlers_mbox_m_box_experience_tag_ha_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto servicePeriodranking = request.query().get("service.ranking");
    auto tagpattern = request.query().get("tagpattern");
    
    try {
      this->com_day_cq_mcm_landingpage_parser_taghandlers_mbox_m_box_experience_tag_ha(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, tagpattern, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_mcm_landingpage_parser_taghandlers_mbox_target_component_tag_h_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto servicePeriodranking = request.query().get("service.ranking");
    auto tagpattern = request.query().get("tagpattern");
    auto componentPeriodresourceType = request.query().get("component.resourceType");
    
    try {
      this->com_day_cq_mcm_landingpage_parser_taghandlers_mbox_target_component_tag_h(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, tagpattern, componentPeriodresourceType, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_notification_impl_notification_service_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto eventPeriodfilter = request.query().get("event.filter");
    
    try {
      this->com_day_cq_notification_impl_notification_service_impl(post, apply, delete, action, Dollarlocation, propertylist, eventPeriodfilter, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_personalization_impl_servlets_targeting_configuration_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto forcelocation = request.query().get("forcelocation");
    
    try {
      this->com_day_cq_personalization_impl_servlets_targeting_configuration_servlet(post, apply, delete, action, Dollarlocation, propertylist, forcelocation, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_polling_importer_impl_managed_poll_config_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto id = request.query().get("id");
    auto enabled = request.query().get("enabled");
    auto reference = request.query().get("reference");
    auto interval = request.query().get("interval");
    auto expression = request.query().get("expression");
    auto source = request.query().get("source");
    auto target = request.query().get("target");
    auto login = request.query().get("login");
    auto password = request.query().get("password");
    
    try {
      this->com_day_cq_polling_importer_impl_managed_poll_config_impl(post, apply, delete, action, Dollarlocation, propertylist, id, enabled, reference, interval, expression, source, target, login, password, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_polling_importer_impl_managed_polling_importer_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto importerPerioduser = request.query().get("importer.user");
    
    try {
      this->com_day_cq_polling_importer_impl_managed_polling_importer_impl(post, apply, delete, action, Dollarlocation, propertylist, importerPerioduser, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_polling_importer_impl_polling_importer_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto importerPeriodminPeriodinterval = request.query().get("importer.min.interval");
    auto importerPerioduser = request.query().get("importer.user");
    auto excludePeriodpaths = request.query().get("exclude.paths");
    auto includePeriodpaths = request.query().get("include.paths");
    
    try {
      this->com_day_cq_polling_importer_impl_polling_importer_impl(post, apply, delete, action, Dollarlocation, propertylist, importerPeriodminPeriodinterval, importerPerioduser, excludePeriodpaths, includePeriodpaths, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_replication_audit_replication_event_listener_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto servicePeriodranking = request.query().get("service.ranking");
    
    try {
      this->com_day_cq_replication_audit_replication_event_listener(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_replication_content_static_content_builder_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto host = request.query().get("host");
    auto port = request.query().get("port");
    
    try {
      this->com_day_cq_replication_content_static_content_builder(post, apply, delete, action, Dollarlocation, propertylist, host, port, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_replication_impl_agent_manager_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto jobPeriodtopics = request.query().get("job.topics");
    auto serviceUserPeriodtarget = request.query().get("serviceUser.target");
    auto agentProviderPeriodtarget = request.query().get("agentProvider.target");
    
    try {
      this->com_day_cq_replication_impl_agent_manager_impl(post, apply, delete, action, Dollarlocation, propertylist, jobPeriodtopics, serviceUserPeriodtarget, agentProviderPeriodtarget, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_replication_impl_content_durbo_binary_less_content_builder_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto binaryPeriodthreshold = request.query().get("binary.threshold");
    
    try {
      this->com_day_cq_replication_impl_content_durbo_binary_less_content_builder(post, apply, delete, action, Dollarlocation, propertylist, binaryPeriodthreshold, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_replication_impl_content_durbo_durbo_import_configuration_prov_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto preservePeriodhierarchyPeriodnodes = request.query().get("preserve.hierarchy.nodes");
    auto ignorePeriodversioning = request.query().get("ignore.versioning");
    auto importPeriodacl = request.query().get("import.acl");
    auto savePeriodthreshold = request.query().get("save.threshold");
    auto preservePerioduserPeriodpaths = request.query().get("preserve.user.paths");
    auto preservePerioduuid = request.query().get("preserve.uuid");
    auto preservePerioduuidPeriodnodetypes = request.query().get("preserve.uuid.nodetypes");
    auto preservePerioduuidPeriodsubtrees = request.query().get("preserve.uuid.subtrees");
    auto autoPeriodcommit = request.query().get("auto.commit");
    
    try {
      this->com_day_cq_replication_impl_content_durbo_durbo_import_configuration_prov(post, apply, delete, action, Dollarlocation, propertylist, preservePeriodhierarchyPeriodnodes, ignorePeriodversioning, importPeriodacl, savePeriodthreshold, preservePerioduserPeriodpaths, preservePerioduuid, preservePerioduuidPeriodnodetypes, preservePerioduuidPeriodsubtrees, autoPeriodcommit, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_replication_impl_replication_content_factory_provider_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto replicationPeriodcontentPerioduseFileStorage = request.query().get("replication.content.useFileStorage");
    auto replicationPeriodcontentPeriodmaxCommitAttempts = request.query().get("replication.content.maxCommitAttempts");
    
    try {
      this->com_day_cq_replication_impl_replication_content_factory_provider_impl(post, apply, delete, action, Dollarlocation, propertylist, replicationPeriodcontentPerioduseFileStorage, replicationPeriodcontentPeriodmaxCommitAttempts, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_replication_impl_replication_receiver_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto receiverPeriodtmpfilePeriodthreshold = request.query().get("receiver.tmpfile.threshold");
    auto receiverPeriodpackagesPeriodusePeriodinstall = request.query().get("receiver.packages.use.install");
    
    try {
      this->com_day_cq_replication_impl_replication_receiver_impl(post, apply, delete, action, Dollarlocation, propertylist, receiverPeriodtmpfilePeriodthreshold, receiverPeriodpackagesPeriodusePeriodinstall, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_replication_impl_replicator_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto distributeEvents = request.query().get("distribute_events");
    
    try {
      this->com_day_cq_replication_impl_replicator_impl(post, apply, delete, action, Dollarlocation, propertylist, distributeEvents, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_replication_impl_reverse_replicator_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto schedulerPeriodperiod = request.query().get("scheduler.period");
    
    try {
      this->com_day_cq_replication_impl_reverse_replicator(post, apply, delete, action, Dollarlocation, propertylist, schedulerPeriodperiod, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_replication_impl_transport_binary_less_transport_handler_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto disabledPeriodcipherPeriodsuites = request.query().get("disabled.cipher.suites");
    auto enabledPeriodcipherPeriodsuites = request.query().get("enabled.cipher.suites");
    
    try {
      this->com_day_cq_replication_impl_transport_binary_less_transport_handler(post, apply, delete, action, Dollarlocation, propertylist, disabledPeriodcipherPeriodsuites, enabledPeriodcipherPeriodsuites, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_replication_impl_transport_http_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto disabledPeriodcipherPeriodsuites = request.query().get("disabled.cipher.suites");
    auto enabledPeriodcipherPeriodsuites = request.query().get("enabled.cipher.suites");
    
    try {
      this->com_day_cq_replication_impl_transport_http(post, apply, delete, action, Dollarlocation, propertylist, disabledPeriodcipherPeriodsuites, enabledPeriodcipherPeriodsuites, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_reporting_impl_cache_cache_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto repcachePeriodenable = request.query().get("repcache.enable");
    auto repcachePeriodttl = request.query().get("repcache.ttl");
    auto repcachePeriodmax = request.query().get("repcache.max");
    
    try {
      this->com_day_cq_reporting_impl_cache_cache_impl(post, apply, delete, action, Dollarlocation, propertylist, repcachePeriodenable, repcachePeriodttl, repcachePeriodmax, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_reporting_impl_config_service_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto repconfPeriodtimezone = request.query().get("repconf.timezone");
    auto repconfPeriodlocale = request.query().get("repconf.locale");
    auto repconfPeriodsnapshots = request.query().get("repconf.snapshots");
    auto repconfPeriodrepdir = request.query().get("repconf.repdir");
    auto repconfPeriodhourofday = request.query().get("repconf.hourofday");
    auto repconfPeriodminofhour = request.query().get("repconf.minofhour");
    auto repconfPeriodmaxrows = request.query().get("repconf.maxrows");
    auto repconfPeriodfakedata = request.query().get("repconf.fakedata");
    auto repconfPeriodsnapshotuser = request.query().get("repconf.snapshotuser");
    auto repconfPeriodenforcesnapshotuser = request.query().get("repconf.enforcesnapshotuser");
    
    try {
      this->com_day_cq_reporting_impl_config_service_impl(post, apply, delete, action, Dollarlocation, propertylist, repconfPeriodtimezone, repconfPeriodlocale, repconfPeriodsnapshots, repconfPeriodrepdir, repconfPeriodhourofday, repconfPeriodminofhour, repconfPeriodmaxrows, repconfPeriodfakedata, repconfPeriodsnapshotuser, repconfPeriodenforcesnapshotuser, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_reporting_impl_r_log_analyzer_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto requestPeriodlogPeriodoutput = request.query().get("request.log.output");
    
    try {
      this->com_day_cq_reporting_impl_r_log_analyzer(post, apply, delete, action, Dollarlocation, propertylist, requestPeriodlogPeriodoutput, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_rewriter_linkchecker_impl_link_checker_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto schedulerPeriodperiod = request.query().get("scheduler.period");
    auto schedulerPeriodconcurrent = request.query().get("scheduler.concurrent");
    auto servicePeriodbadLinkToleranceInterval = request.query().get("service.bad_link_tolerance_interval");
    auto servicePeriodcheckOverridePatterns = request.query().get("service.check_override_patterns");
    auto servicePeriodcacheBrokenInternalLinks = request.query().get("service.cache_broken_internal_links");
    auto servicePeriodspecialLinkPrefix = request.query().get("service.special_link_prefix");
    auto servicePeriodspecialLinkPatterns = request.query().get("service.special_link_patterns");
    
    try {
      this->com_day_cq_rewriter_linkchecker_impl_link_checker_impl(post, apply, delete, action, Dollarlocation, propertylist, schedulerPeriodperiod, schedulerPeriodconcurrent, servicePeriodbadLinkToleranceInterval, servicePeriodcheckOverridePatterns, servicePeriodcacheBrokenInternalLinks, servicePeriodspecialLinkPrefix, servicePeriodspecialLinkPatterns, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_rewriter_linkchecker_impl_link_checker_task_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto schedulerPeriodperiod = request.query().get("scheduler.period");
    auto schedulerPeriodconcurrent = request.query().get("scheduler.concurrent");
    auto goodLinkTestInterval = request.query().get("good_link_test_interval");
    auto badLinkTestInterval = request.query().get("bad_link_test_interval");
    auto linkUnusedInterval = request.query().get("link_unused_interval");
    auto connectionPeriodtimeout = request.query().get("connection.timeout");
    
    try {
      this->com_day_cq_rewriter_linkchecker_impl_link_checker_task(post, apply, delete, action, Dollarlocation, propertylist, schedulerPeriodperiod, schedulerPeriodconcurrent, goodLinkTestInterval, badLinkTestInterval, linkUnusedInterval, connectionPeriodtimeout, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_rewriter_linkchecker_impl_link_checker_transformer_factory_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto linkcheckertransformerPerioddisableRewriting = request.query().get("linkcheckertransformer.disableRewriting");
    auto linkcheckertransformerPerioddisableChecking = request.query().get("linkcheckertransformer.disableChecking");
    auto linkcheckertransformerPeriodmapCacheSize = request.query().get("linkcheckertransformer.mapCacheSize");
    auto linkcheckertransformerPeriodstrictExtensionCheck = request.query().get("linkcheckertransformer.strictExtensionCheck");
    auto linkcheckertransformerPeriodstripHtmltExtension = request.query().get("linkcheckertransformer.stripHtmltExtension");
    auto linkcheckertransformerPeriodrewriteElements = request.query().get("linkcheckertransformer.rewriteElements");
    auto linkcheckertransformerPeriodstripExtensionPathBlacklist = request.query().get("linkcheckertransformer.stripExtensionPathBlacklist");
    
    try {
      this->com_day_cq_rewriter_linkchecker_impl_link_checker_transformer_factory(post, apply, delete, action, Dollarlocation, propertylist, linkcheckertransformerPerioddisableRewriting, linkcheckertransformerPerioddisableChecking, linkcheckertransformerPeriodmapCacheSize, linkcheckertransformerPeriodstrictExtensionCheck, linkcheckertransformerPeriodstripHtmltExtension, linkcheckertransformerPeriodrewriteElements, linkcheckertransformerPeriodstripExtensionPathBlacklist, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_rewriter_linkchecker_impl_link_info_storage_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto servicePeriodmaxLinksPerHost = request.query().get("service.max_links_per_host");
    auto servicePeriodsaveExternalLinkReferences = request.query().get("service.save_external_link_references");
    
    try {
      this->com_day_cq_rewriter_linkchecker_impl_link_info_storage_impl(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodmaxLinksPerHost, servicePeriodsaveExternalLinkReferences, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_rewriter_processor_impl_html_parser_factory_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto htmlparserPeriodprocessTags = request.query().get("htmlparser.processTags");
    auto htmlparserPeriodpreserveCamelCase = request.query().get("htmlparser.preserveCamelCase");
    
    try {
      this->com_day_cq_rewriter_processor_impl_html_parser_factory(post, apply, delete, action, Dollarlocation, propertylist, htmlparserPeriodprocessTags, htmlparserPeriodpreserveCamelCase, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_search_impl_builder_query_builder_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto excerptPeriodproperties = request.query().get("excerpt.properties");
    auto cachePeriodmaxPeriodentries = request.query().get("cache.max.entries");
    auto cachePeriodentryPeriodlifetime = request.query().get("cache.entry.lifetime");
    auto xpathPeriodunion = request.query().get("xpath.union");
    
    try {
      this->com_day_cq_search_impl_builder_query_builder_impl(post, apply, delete, action, Dollarlocation, propertylist, excerptPeriodproperties, cachePeriodmaxPeriodentries, cachePeriodentryPeriodlifetime, xpathPeriodunion, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_search_suggest_impl_suggestion_index_manager_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto pathBuilderPeriodtarget = request.query().get("pathBuilder.target");
    auto suggestPeriodbasepath = request.query().get("suggest.basepath");
    
    try {
      this->com_day_cq_search_suggest_impl_suggestion_index_manager_impl(post, apply, delete, action, Dollarlocation, propertylist, pathBuilderPeriodtarget, suggestPeriodbasepath, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_searchpromote_impl_publish_search_promote_config_handler_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPeriodsearchpromotePeriodconfighandlerPeriodenabled = request.query().get("cq.searchpromote.confighandler.enabled");
    
    try {
      this->com_day_cq_searchpromote_impl_publish_search_promote_config_handler(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodsearchpromotePeriodconfighandlerPeriodenabled, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_searchpromote_impl_search_promote_service_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPeriodsearchpromotePeriodconfigurationPeriodserverPerioduri = request.query().get("cq.searchpromote.configuration.server.uri");
    auto cqPeriodsearchpromotePeriodconfigurationPeriodenvironment = request.query().get("cq.searchpromote.configuration.environment");
    auto connectionPeriodtimeout = request.query().get("connection.timeout");
    auto socketPeriodtimeout = request.query().get("socket.timeout");
    
    try {
      this->com_day_cq_searchpromote_impl_search_promote_service_impl(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodsearchpromotePeriodconfigurationPeriodserverPerioduri, cqPeriodsearchpromotePeriodconfigurationPeriodenvironment, connectionPeriodtimeout, socketPeriodtimeout, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_security_acl_setup_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPeriodaclsetupPeriodrules = request.query().get("cq.aclsetup.rules");
    
    try {
      this->com_day_cq_security_acl_setup(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodaclsetupPeriodrules, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_statistics_impl_statistics_service_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto schedulerPeriodperiod = request.query().get("scheduler.period");
    auto schedulerPeriodconcurrent = request.query().get("scheduler.concurrent");
    auto path = request.query().get("path");
    auto workspace = request.query().get("workspace");
    auto keywordsPath = request.query().get("keywordsPath");
    auto asyncEntries = request.query().get("asyncEntries");
    
    try {
      this->com_day_cq_statistics_impl_statistics_service_impl(post, apply, delete, action, Dollarlocation, propertylist, schedulerPeriodperiod, schedulerPeriodconcurrent, path, workspace, keywordsPath, asyncEntries, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_tagging_impl_jcr_tag_manager_factory_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto validationPeriodenabled = request.query().get("validation.enabled");
    
    try {
      this->com_day_cq_tagging_impl_jcr_tag_manager_factory_impl(post, apply, delete, action, Dollarlocation, propertylist, validationPeriodenabled, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_tagging_impl_search_tag_predicate_evaluator_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto ignorePath = request.query().get("ignore_path");
    
    try {
      this->com_day_cq_tagging_impl_search_tag_predicate_evaluator(post, apply, delete, action, Dollarlocation, propertylist, ignorePath, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_tagging_impl_tag_garbage_collector_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto schedulerPeriodexpression = request.query().get("scheduler.expression");
    
    try {
      this->com_day_cq_tagging_impl_tag_garbage_collector(post, apply, delete, action, Dollarlocation, propertylist, schedulerPeriodexpression, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_contentsync_impl_handler_pages_update_handler_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPeriodpagesupdatehandlerPeriodimageresourcetypes = request.query().get("cq.pagesupdatehandler.imageresourcetypes");
    
    try {
      this->com_day_cq_wcm_contentsync_impl_handler_pages_update_handler(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodpagesupdatehandlerPeriodimageresourcetypes, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_contentsync_impl_rewriter_path_rewriter_transformer_factor_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodlinks = request.query().get("cq.contentsync.pathrewritertransformer.mapping.links");
    auto cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodclientlibs = request.query().get("cq.contentsync.pathrewritertransformer.mapping.clientlibs");
    auto cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodimages = request.query().get("cq.contentsync.pathrewritertransformer.mapping.images");
    auto cqPeriodcontentsyncPeriodpathrewritertransformerPeriodattributePeriodpattern = request.query().get("cq.contentsync.pathrewritertransformer.attribute.pattern");
    auto cqPeriodcontentsyncPeriodpathrewritertransformerPeriodclientlibraryPeriodpattern = request.query().get("cq.contentsync.pathrewritertransformer.clientlibrary.pattern");
    auto cqPeriodcontentsyncPeriodpathrewritertransformerPeriodclientlibraryPeriodreplace = request.query().get("cq.contentsync.pathrewritertransformer.clientlibrary.replace");
    
    try {
      this->com_day_cq_wcm_contentsync_impl_rewriter_path_rewriter_transformer_factor(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodlinks, cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodclientlibs, cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodimages, cqPeriodcontentsyncPeriodpathrewritertransformerPeriodattributePeriodpattern, cqPeriodcontentsyncPeriodpathrewritertransformerPeriodclientlibraryPeriodpattern, cqPeriodcontentsyncPeriodpathrewritertransformerPeriodclientlibraryPeriodreplace, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_core_impl_authoring_ui_mode_service_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto authoringUIModeServicePerioddefault = request.query().get("authoringUIModeService.default");
    
    try {
      this->com_day_cq_wcm_core_impl_authoring_ui_mode_service_impl(post, apply, delete, action, Dollarlocation, propertylist, authoringUIModeServicePerioddefault, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_core_impl_commands_wcm_command_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto wcmcommandservletPerioddeleteWhitelist = request.query().get("wcmcommandservlet.delete_whitelist");
    
    try {
      this->com_day_cq_wcm_core_impl_commands_wcm_command_servlet(post, apply, delete, action, Dollarlocation, propertylist, wcmcommandservletPerioddeleteWhitelist, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_core_impl_devicedetection_device_identification_mode_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto dimPerioddefaultPeriodmode = request.query().get("dim.default.mode");
    auto dimPeriodappcachePeriodenabled = request.query().get("dim.appcache.enabled");
    
    try {
      this->com_day_cq_wcm_core_impl_devicedetection_device_identification_mode_impl(post, apply, delete, action, Dollarlocation, propertylist, dimPerioddefaultPeriodmode, dimPeriodappcachePeriodenabled, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_core_impl_event_page_event_audit_listener_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto configured = request.query().get("configured");
    
    try {
      this->com_day_cq_wcm_core_impl_event_page_event_audit_listener(post, apply, delete, action, Dollarlocation, propertylist, configured, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_core_impl_event_page_post_processor_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto paths = request.query().get("paths");
    
    try {
      this->com_day_cq_wcm_core_impl_event_page_post_processor(post, apply, delete, action, Dollarlocation, propertylist, paths, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_core_impl_event_repository_change_event_listener_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto paths = request.query().get("paths");
    auto excludedPaths = request.query().get("excludedPaths");
    
    try {
      this->com_day_cq_wcm_core_impl_event_repository_change_event_listener(post, apply, delete, action, Dollarlocation, propertylist, paths, excludedPaths, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_core_impl_event_template_post_processor_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto paths = request.query().get("paths");
    
    try {
      this->com_day_cq_wcm_core_impl_event_template_post_processor(post, apply, delete, action, Dollarlocation, propertylist, paths, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_core_impl_language_manager_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto langmgrPeriodlistPeriodpath = request.query().get("langmgr.list.path");
    auto langmgrPeriodcountryPerioddefault = request.query().get("langmgr.country.default");
    
    try {
      this->com_day_cq_wcm_core_impl_language_manager_impl(post, apply, delete, action, Dollarlocation, propertylist, langmgrPeriodlistPeriodpath, langmgrPeriodcountryPerioddefault, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_core_impl_link_checker_configuration_factory_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto linkPeriodexpiredPeriodprefix = request.query().get("link.expired.prefix");
    auto linkPeriodexpiredPeriodremove = request.query().get("link.expired.remove");
    auto linkPeriodexpiredPeriodsuffix = request.query().get("link.expired.suffix");
    auto linkPeriodinvalidPeriodprefix = request.query().get("link.invalid.prefix");
    auto linkPeriodinvalidPeriodremove = request.query().get("link.invalid.remove");
    auto linkPeriodinvalidPeriodsuffix = request.query().get("link.invalid.suffix");
    auto linkPeriodpredatedPeriodprefix = request.query().get("link.predated.prefix");
    auto linkPeriodpredatedPeriodremove = request.query().get("link.predated.remove");
    auto linkPeriodpredatedPeriodsuffix = request.query().get("link.predated.suffix");
    auto linkPeriodwcmmodes = request.query().get("link.wcmmodes");
    
    try {
      this->com_day_cq_wcm_core_impl_link_checker_configuration_factory_impl(post, apply, delete, action, Dollarlocation, propertylist, linkPeriodexpiredPeriodprefix, linkPeriodexpiredPeriodremove, linkPeriodexpiredPeriodsuffix, linkPeriodinvalidPeriodprefix, linkPeriodinvalidPeriodremove, linkPeriodinvalidPeriodsuffix, linkPeriodpredatedPeriodprefix, linkPeriodpredatedPeriodremove, linkPeriodpredatedPeriodsuffix, linkPeriodwcmmodes, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_core_impl_page_page_info_aggregator_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto pagePeriodinfoPeriodproviderPeriodpropertyPeriodregexPerioddefault = request.query().get("page.info.provider.property.regex.default");
    auto pagePeriodinfoPeriodproviderPeriodpropertyPeriodname = request.query().get("page.info.provider.property.name");
    
    try {
      this->com_day_cq_wcm_core_impl_page_page_info_aggregator_impl(post, apply, delete, action, Dollarlocation, propertylist, pagePeriodinfoPeriodproviderPeriodpropertyPeriodregexPerioddefault, pagePeriodinfoPeriodproviderPeriodpropertyPeriodname, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_core_impl_page_page_manager_factory_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto illegalCharMapping = request.query().get("illegalCharMapping");
    auto pageSubTreeActivationCheck = request.query().get("pageSubTreeActivationCheck");
    
    try {
      this->com_day_cq_wcm_core_impl_page_page_manager_factory_impl(post, apply, delete, action, Dollarlocation, propertylist, illegalCharMapping, pageSubTreeActivationCheck, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_core_impl_references_content_content_reference_config_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto contentReferenceConfigPeriodresourceTypes = request.query().get("contentReferenceConfig.resourceTypes");
    
    try {
      this->com_day_cq_wcm_core_impl_references_content_content_reference_config(post, apply, delete, action, Dollarlocation, propertylist, contentReferenceConfigPeriodresourceTypes, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_core_impl_servlets_contentfinder_asset_view_handler_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto damPeriodshowexpired = request.query().get("dam.showexpired");
    auto damPeriodshowhidden = request.query().get("dam.showhidden");
    auto tagTitleSearch = request.query().get("tagTitleSearch");
    auto guessTotal = request.query().get("guessTotal");
    auto damPeriodexpiryProperty = request.query().get("dam.expiryProperty");
    
    try {
      this->com_day_cq_wcm_core_impl_servlets_contentfinder_asset_view_handler(post, apply, delete, action, Dollarlocation, propertylist, damPeriodshowexpired, damPeriodshowhidden, tagTitleSearch, guessTotal, damPeriodexpiryProperty, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_core_impl_servlets_contentfinder_connector_connector_vie_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto itemPeriodresourcePeriodtypes = request.query().get("item.resource.types");
    
    try {
      this->com_day_cq_wcm_core_impl_servlets_contentfinder_connector_connector_vie(post, apply, delete, action, Dollarlocation, propertylist, itemPeriodresourcePeriodtypes, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_core_impl_servlets_contentfinder_page_view_handler_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto guessTotal = request.query().get("guessTotal");
    auto tagTitleSearch = request.query().get("tagTitleSearch");
    
    try {
      this->com_day_cq_wcm_core_impl_servlets_contentfinder_page_view_handler(post, apply, delete, action, Dollarlocation, propertylist, guessTotal, tagTitleSearch, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_core_impl_servlets_find_replace_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto scope = request.query().get("scope");
    
    try {
      this->com_day_cq_wcm_core_impl_servlets_find_replace_servlet(post, apply, delete, action, Dollarlocation, propertylist, scope, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_core_impl_servlets_reference_search_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto referencesearchservletPeriodmaxReferencesPerPage = request.query().get("referencesearchservlet.maxReferencesPerPage");
    auto referencesearchservletPeriodmaxPages = request.query().get("referencesearchservlet.maxPages");
    
    try {
      this->com_day_cq_wcm_core_impl_servlets_reference_search_servlet(post, apply, delete, action, Dollarlocation, propertylist, referencesearchservletPeriodmaxReferencesPerPage, referencesearchservletPeriodmaxPages, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_core_impl_servlets_thumbnail_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto workspace = request.query().get("workspace");
    auto dimensions = request.query().get("dimensions");
    
    try {
      this->com_day_cq_wcm_core_impl_servlets_thumbnail_servlet(post, apply, delete, action, Dollarlocation, propertylist, workspace, dimensions, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_core_impl_utils_default_page_name_validator_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto nonValidChars = request.query().get("nonValidChars");
    
    try {
      this->com_day_cq_wcm_core_impl_utils_default_page_name_validator(post, apply, delete, action, Dollarlocation, propertylist, nonValidChars, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_core_impl_variants_page_variants_provider_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto defaultPeriodexternalizerPerioddomain = request.query().get("default.externalizer.domain");
    
    try {
      this->com_day_cq_wcm_core_impl_variants_page_variants_provider_impl(post, apply, delete, action, Dollarlocation, propertylist, defaultPeriodexternalizerPerioddomain, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_core_impl_version_manager_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto versionmanagerPeriodcreateVersionOnActivation = request.query().get("versionmanager.createVersionOnActivation");
    auto versionmanagerPeriodpurgingEnabled = request.query().get("versionmanager.purgingEnabled");
    auto versionmanagerPeriodpurgePaths = request.query().get("versionmanager.purgePaths");
    auto versionmanagerPeriodivPaths = request.query().get("versionmanager.ivPaths");
    auto versionmanagerPeriodmaxAgeDays = request.query().get("versionmanager.maxAgeDays");
    auto versionmanagerPeriodmaxNumberVersions = request.query().get("versionmanager.maxNumberVersions");
    auto versionmanagerPeriodminNumberVersions = request.query().get("versionmanager.minNumberVersions");
    
    try {
      this->com_day_cq_wcm_core_impl_version_manager_impl(post, apply, delete, action, Dollarlocation, propertylist, versionmanagerPeriodcreateVersionOnActivation, versionmanagerPeriodpurgingEnabled, versionmanagerPeriodpurgePaths, versionmanagerPeriodivPaths, versionmanagerPeriodmaxAgeDays, versionmanagerPeriodmaxNumberVersions, versionmanagerPeriodminNumberVersions, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_core_impl_version_purge_task_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto versionpurgePeriodpaths = request.query().get("versionpurge.paths");
    auto versionpurgePeriodrecursive = request.query().get("versionpurge.recursive");
    auto versionpurgePeriodmaxVersions = request.query().get("versionpurge.maxVersions");
    auto versionpurgePeriodminVersions = request.query().get("versionpurge.minVersions");
    auto versionpurgePeriodmaxAgeDays = request.query().get("versionpurge.maxAgeDays");
    
    try {
      this->com_day_cq_wcm_core_impl_version_purge_task(post, apply, delete, action, Dollarlocation, propertylist, versionpurgePeriodpaths, versionpurgePeriodrecursive, versionpurgePeriodmaxVersions, versionpurgePeriodminVersions, versionpurgePeriodmaxAgeDays, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_core_impl_wcm_debug_filter_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto wcmdbgfilterPeriodenabled = request.query().get("wcmdbgfilter.enabled");
    auto wcmdbgfilterPeriodjspDebug = request.query().get("wcmdbgfilter.jspDebug");
    
    try {
      this->com_day_cq_wcm_core_impl_wcm_debug_filter(post, apply, delete, action, Dollarlocation, propertylist, wcmdbgfilterPeriodenabled, wcmdbgfilterPeriodjspDebug, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_core_impl_wcm_developer_mode_filter_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto wcmdevmodefilterPeriodenabled = request.query().get("wcmdevmodefilter.enabled");
    
    try {
      this->com_day_cq_wcm_core_impl_wcm_developer_mode_filter(post, apply, delete, action, Dollarlocation, propertylist, wcmdevmodefilterPeriodenabled, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_core_impl_warp_time_warp_filter_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto filterPeriodorder = request.query().get("filter.order");
    auto filterPeriodscope = request.query().get("filter.scope");
    
    try {
      this->com_day_cq_wcm_core_impl_warp_time_warp_filter(post, apply, delete, action, Dollarlocation, propertylist, filterPeriodorder, filterPeriodscope, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_core_mvt_mvt_statistics_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto mvtstatisticsPeriodtrackingurl = request.query().get("mvtstatistics.trackingurl");
    
    try {
      this->com_day_cq_wcm_core_mvt_mvt_statistics_impl(post, apply, delete, action, Dollarlocation, propertylist, mvtstatisticsPeriodtrackingurl, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_core_stats_page_view_statistics_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto pageviewstatisticsPeriodtrackingurl = request.query().get("pageviewstatistics.trackingurl");
    auto pageviewstatisticsPeriodtrackingscriptPeriodenabled = request.query().get("pageviewstatistics.trackingscript.enabled");
    
    try {
      this->com_day_cq_wcm_core_stats_page_view_statistics_impl(post, apply, delete, action, Dollarlocation, propertylist, pageviewstatisticsPeriodtrackingurl, pageviewstatisticsPeriodtrackingscriptPeriodenabled, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_core_wcm_request_filter_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto wcmfilterPeriodmode = request.query().get("wcmfilter.mode");
    
    try {
      this->com_day_cq_wcm_core_wcm_request_filter(post, apply, delete, action, Dollarlocation, propertylist, wcmfilterPeriodmode, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_designimporter_design_package_importer_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto extractPeriodfilter = request.query().get("extract.filter");
    
    try {
      this->com_day_cq_wcm_designimporter_design_package_importer(post, apply, delete, action, Dollarlocation, propertylist, extractPeriodfilter, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_designimporter_impl_canvas_builder_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto filepattern = request.query().get("filepattern");
    auto buildPeriodpagePeriodnodes = request.query().get("build.page.nodes");
    auto buildPeriodclientPeriodlibs = request.query().get("build.client.libs");
    auto buildPeriodcanvasPeriodcomponent = request.query().get("build.canvas.component");
    
    try {
      this->com_day_cq_wcm_designimporter_impl_canvas_builder_impl(post, apply, delete, action, Dollarlocation, propertylist, filepattern, buildPeriodpagePeriodnodes, buildPeriodclientPeriodlibs, buildPeriodcanvasPeriodcomponent, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_designimporter_impl_canvas_page_delete_handler_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto minThreadPoolSize = request.query().get("minThreadPoolSize");
    auto maxThreadPoolSize = request.query().get("maxThreadPoolSize");
    
    try {
      this->com_day_cq_wcm_designimporter_impl_canvas_page_delete_handler(post, apply, delete, action, Dollarlocation, propertylist, minThreadPoolSize, maxThreadPoolSize, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_designimporter_impl_entry_preprocessor_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto searchPeriodpattern = request.query().get("search.pattern");
    auto replacePeriodpattern = request.query().get("replace.pattern");
    
    try {
      this->com_day_cq_wcm_designimporter_impl_entry_preprocessor_impl(post, apply, delete, action, Dollarlocation, propertylist, searchPeriodpattern, replacePeriodpattern, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_designimporter_impl_mobile_canvas_builder_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto filepattern = request.query().get("filepattern");
    auto devicePeriodgroups = request.query().get("device.groups");
    auto buildPeriodpagePeriodnodes = request.query().get("build.page.nodes");
    auto buildPeriodclientPeriodlibs = request.query().get("build.client.libs");
    auto buildPeriodcanvasPeriodcomponent = request.query().get("build.canvas.component");
    
    try {
      this->com_day_cq_wcm_designimporter_impl_mobile_canvas_builder_impl(post, apply, delete, action, Dollarlocation, propertylist, filepattern, devicePeriodgroups, buildPeriodpagePeriodnodes, buildPeriodclientPeriodlibs, buildPeriodcanvasPeriodcomponent, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_designimporter_parser_taghandlers_factory_canvas_compone_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto servicePeriodranking = request.query().get("service.ranking");
    auto tagpattern = request.query().get("tagpattern");
    
    try {
      this->com_day_cq_wcm_designimporter_parser_taghandlers_factory_canvas_compone(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, tagpattern, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_compon_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto servicePeriodranking = request.query().get("service.ranking");
    auto tagpattern = request.query().get("tagpattern");
    
    try {
      this->com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_compon(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, tagpattern, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_tag_han_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto servicePeriodranking = request.query().get("service.ranking");
    auto tagpattern = request.query().get("tagpattern");
    
    try {
      this->com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_tag_han(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, tagpattern, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_designimporter_parser_taghandlers_factory_head_tag_handle_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto servicePeriodranking = request.query().get("service.ranking");
    auto tagpattern = request.query().get("tagpattern");
    
    try {
      this->com_day_cq_wcm_designimporter_parser_taghandlers_factory_head_tag_handle(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, tagpattern, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_designimporter_parser_taghandlers_factory_i_frame_tag_hand_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto servicePeriodranking = request.query().get("service.ranking");
    auto tagpattern = request.query().get("tagpattern");
    
    try {
      this->com_day_cq_wcm_designimporter_parser_taghandlers_factory_i_frame_tag_hand(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, tagpattern, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_designimporter_parser_taghandlers_factory_image_componen_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto servicePeriodranking = request.query().get("service.ranking");
    auto tagpattern = request.query().get("tagpattern");
    auto componentPeriodresourceType = request.query().get("component.resourceType");
    
    try {
      this->com_day_cq_wcm_designimporter_parser_taghandlers_factory_image_componen(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, tagpattern, componentPeriodresourceType, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_designimporter_parser_taghandlers_factory_img_tag_handler_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto servicePeriodranking = request.query().get("service.ranking");
    auto tagpattern = request.query().get("tagpattern");
    
    try {
      this->com_day_cq_wcm_designimporter_parser_taghandlers_factory_img_tag_handler(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, tagpattern, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_designimporter_parser_taghandlers_factory_inline_script_t_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto servicePeriodranking = request.query().get("service.ranking");
    auto tagpattern = request.query().get("tagpattern");
    
    try {
      this->com_day_cq_wcm_designimporter_parser_taghandlers_factory_inline_script_t(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, tagpattern, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_designimporter_parser_taghandlers_factory_link_tag_handle_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto servicePeriodranking = request.query().get("service.ranking");
    auto tagpattern = request.query().get("tagpattern");
    
    try {
      this->com_day_cq_wcm_designimporter_parser_taghandlers_factory_link_tag_handle(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, tagpattern, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_designimporter_parser_taghandlers_factory_meta_tag_handle_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto servicePeriodranking = request.query().get("service.ranking");
    auto tagpattern = request.query().get("tagpattern");
    
    try {
      this->com_day_cq_wcm_designimporter_parser_taghandlers_factory_meta_tag_handle(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, tagpattern, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_designimporter_parser_taghandlers_factory_non_script_tag_h_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto servicePeriodranking = request.query().get("service.ranking");
    auto tagpattern = request.query().get("tagpattern");
    
    try {
      this->com_day_cq_wcm_designimporter_parser_taghandlers_factory_non_script_tag_h(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, tagpattern, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_designimporter_parser_taghandlers_factory_parsys_compone_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto servicePeriodranking = request.query().get("service.ranking");
    auto tagpattern = request.query().get("tagpattern");
    auto componentPeriodresourceType = request.query().get("component.resourceType");
    
    try {
      this->com_day_cq_wcm_designimporter_parser_taghandlers_factory_parsys_compone(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, tagpattern, componentPeriodresourceType, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_designimporter_parser_taghandlers_factory_script_tag_hand_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto servicePeriodranking = request.query().get("service.ranking");
    auto tagpattern = request.query().get("tagpattern");
    
    try {
      this->com_day_cq_wcm_designimporter_parser_taghandlers_factory_script_tag_hand(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, tagpattern, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_designimporter_parser_taghandlers_factory_style_tag_handl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto servicePeriodranking = request.query().get("service.ranking");
    auto tagpattern = request.query().get("tagpattern");
    
    try {
      this->com_day_cq_wcm_designimporter_parser_taghandlers_factory_style_tag_handl(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, tagpattern, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_designimporter_parser_taghandlers_factory_text_component_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto servicePeriodranking = request.query().get("service.ranking");
    auto tagpattern = request.query().get("tagpattern");
    auto componentPeriodresourceType = request.query().get("component.resourceType");
    
    try {
      this->com_day_cq_wcm_designimporter_parser_taghandlers_factory_text_component(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, tagpattern, componentPeriodresourceType, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_componen_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto servicePeriodranking = request.query().get("service.ranking");
    auto tagpattern = request.query().get("tagpattern");
    auto componentPeriodresourceType = request.query().get("component.resourceType");
    
    try {
      this->com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_componen(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, tagpattern, componentPeriodresourceType, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_tag_handl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto servicePeriodranking = request.query().get("service.ranking");
    auto tagpattern = request.query().get("tagpattern");
    
    try {
      this->com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_tag_handl(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, tagpattern, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_foundation_forms_impl_form_chooser_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto servicePeriodname = request.query().get("service.name");
    auto slingPeriodservletPeriodresourceTypes = request.query().get("sling.servlet.resourceTypes");
    auto slingPeriodservletPeriodselectors = request.query().get("sling.servlet.selectors");
    auto slingPeriodservletPeriodmethods = request.query().get("sling.servlet.methods");
    auto formsPeriodformchooserservletPeriodadvansesearchPeriodrequire = request.query().get("forms.formchooserservlet.advansesearch.require");
    
    try {
      this->com_day_cq_wcm_foundation_forms_impl_form_chooser_servlet(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodname, slingPeriodservletPeriodresourceTypes, slingPeriodservletPeriodselectors, slingPeriodservletPeriodmethods, formsPeriodformchooserservletPeriodadvansesearchPeriodrequire, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_foundation_forms_impl_form_paragraph_post_processor_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto formsPeriodformparagraphpostprocessorPeriodenabled = request.query().get("forms.formparagraphpostprocessor.enabled");
    auto formsPeriodformparagraphpostprocessorPeriodformresourcetypes = request.query().get("forms.formparagraphpostprocessor.formresourcetypes");
    
    try {
      this->com_day_cq_wcm_foundation_forms_impl_form_paragraph_post_processor(post, apply, delete, action, Dollarlocation, propertylist, formsPeriodformparagraphpostprocessorPeriodenabled, formsPeriodformparagraphpostprocessorPeriodformresourcetypes, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_foundation_forms_impl_forms_handling_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto namePeriodwhitelist = request.query().get("name.whitelist");
    auto allowPeriodexpressions = request.query().get("allow.expressions");
    
    try {
      this->com_day_cq_wcm_foundation_forms_impl_forms_handling_servlet(post, apply, delete, action, Dollarlocation, propertylist, namePeriodwhitelist, allowPeriodexpressions, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_foundation_forms_impl_mail_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto slingPeriodservletPeriodresourceTypes = request.query().get("sling.servlet.resourceTypes");
    auto slingPeriodservletPeriodselectors = request.query().get("sling.servlet.selectors");
    auto resourcePeriodwhitelist = request.query().get("resource.whitelist");
    auto resourcePeriodblacklist = request.query().get("resource.blacklist");
    
    try {
      this->com_day_cq_wcm_foundation_forms_impl_mail_servlet(post, apply, delete, action, Dollarlocation, propertylist, slingPeriodservletPeriodresourceTypes, slingPeriodservletPeriodselectors, resourcePeriodwhitelist, resourcePeriodblacklist, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_foundation_impl_adaptive_image_component_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto adaptPeriodsupportedPeriodwidths = request.query().get("adapt.supported.widths");
    
    try {
      this->com_day_cq_wcm_foundation_impl_adaptive_image_component_servlet(post, apply, delete, action, Dollarlocation, propertylist, adaptPeriodsupportedPeriodwidths, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_foundation_impl_http_auth_handler_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto path = request.query().get("path");
    auto authPeriodhttpPeriodnologin = request.query().get("auth.http.nologin");
    auto authPeriodhttpPeriodrealm = request.query().get("auth.http.realm");
    auto authPerioddefaultPeriodloginpage = request.query().get("auth.default.loginpage");
    auto authPeriodcredPeriodform = request.query().get("auth.cred.form");
    auto authPeriodcredPeriodutf8 = request.query().get("auth.cred.utf8");
    
    try {
      this->com_day_cq_wcm_foundation_impl_http_auth_handler(post, apply, delete, action, Dollarlocation, propertylist, path, authPeriodhttpPeriodnologin, authPeriodhttpPeriodrealm, authPerioddefaultPeriodloginpage, authPeriodcredPeriodform, authPeriodcredPeriodutf8, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_foundation_impl_page_impressions_tracker_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto slingPeriodauthPeriodrequirements = request.query().get("sling.auth.requirements");
    
    try {
      this->com_day_cq_wcm_foundation_impl_page_impressions_tracker(post, apply, delete, action, Dollarlocation, propertylist, slingPeriodauthPeriodrequirements, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_foundation_impl_page_redirect_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto excludedPeriodresourcePeriodtypes = request.query().get("excluded.resource.types");
    
    try {
      this->com_day_cq_wcm_foundation_impl_page_redirect_servlet(post, apply, delete, action, Dollarlocation, propertylist, excludedPeriodresourcePeriodtypes, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_foundation_security_impl_default_attachment_type_blacklist_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto defaultPeriodattachmentPeriodtypePeriodblacklist = request.query().get("default.attachment.type.blacklist");
    auto baselinePeriodattachmentPeriodtypePeriodblacklist = request.query().get("baseline.attachment.type.blacklist");
    
    try {
      this->com_day_cq_wcm_foundation_security_impl_default_attachment_type_blacklist(post, apply, delete, action, Dollarlocation, propertylist, defaultPeriodattachmentPeriodtypePeriodblacklist, baselinePeriodattachmentPeriodtypePeriodblacklist, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_foundation_security_impl_safer_sling_post_validator_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto parameterPeriodwhitelist = request.query().get("parameter.whitelist");
    auto parameterPeriodwhitelistPeriodprefixes = request.query().get("parameter.whitelist.prefixes");
    auto binaryPeriodparameterPeriodwhitelist = request.query().get("binary.parameter.whitelist");
    auto modifierPeriodwhitelist = request.query().get("modifier.whitelist");
    auto operationPeriodwhitelist = request.query().get("operation.whitelist");
    auto operationPeriodwhitelistPeriodprefixes = request.query().get("operation.whitelist.prefixes");
    auto typehintPeriodwhitelist = request.query().get("typehint.whitelist");
    auto resourcetypePeriodwhitelist = request.query().get("resourcetype.whitelist");
    
    try {
      this->com_day_cq_wcm_foundation_security_impl_safer_sling_post_validator_impl(post, apply, delete, action, Dollarlocation, propertylist, parameterPeriodwhitelist, parameterPeriodwhitelistPeriodprefixes, binaryPeriodparameterPeriodwhitelist, modifierPeriodwhitelist, operationPeriodwhitelist, operationPeriodwhitelistPeriodprefixes, typehintPeriodwhitelist, resourcetypePeriodwhitelist, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_mobile_core_impl_device_device_info_transformer_factory_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto devicePeriodinfoPeriodtransformerPeriodenabled = request.query().get("device.info.transformer.enabled");
    auto devicePeriodinfoPeriodtransformerPeriodcssPeriodstyle = request.query().get("device.info.transformer.css.style");
    
    try {
      this->com_day_cq_wcm_mobile_core_impl_device_device_info_transformer_factory(post, apply, delete, action, Dollarlocation, propertylist, devicePeriodinfoPeriodtransformerPeriodenabled, devicePeriodinfoPeriodtransformerPeriodcssPeriodstyle, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_mobile_core_impl_redirect_redirect_filter_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto redirectPeriodenabled = request.query().get("redirect.enabled");
    auto redirectPeriodstatsPeriodenabled = request.query().get("redirect.stats.enabled");
    auto redirectPeriodextensions = request.query().get("redirect.extensions");
    auto redirectPeriodpaths = request.query().get("redirect.paths");
    
    try {
      this->com_day_cq_wcm_mobile_core_impl_redirect_redirect_filter(post, apply, delete, action, Dollarlocation, propertylist, redirectPeriodenabled, redirectPeriodstatsPeriodenabled, redirectPeriodextensions, redirectPeriodpaths, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_msm_impl_actions_content_copy_action_factory_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes = request.query().get("cq.wcm.msm.action.excludednodetypes");
    auto cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems = request.query().get("cq.wcm.msm.action.excludedparagraphitems");
    auto cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops = request.query().get("cq.wcm.msm.action.excludedprops");
    auto contentcopyactionPeriodorderPeriodstyle = request.query().get("contentcopyaction.order.style");
    
    try {
      this->com_day_cq_wcm_msm_impl_actions_content_copy_action_factory(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops, contentcopyactionPeriodorderPeriodstyle, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_msm_impl_actions_content_delete_action_factory_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes = request.query().get("cq.wcm.msm.action.excludednodetypes");
    auto cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems = request.query().get("cq.wcm.msm.action.excludedparagraphitems");
    auto cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops = request.query().get("cq.wcm.msm.action.excludedprops");
    
    try {
      this->com_day_cq_wcm_msm_impl_actions_content_delete_action_factory(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_msm_impl_actions_content_update_action_factory_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes = request.query().get("cq.wcm.msm.action.excludednodetypes");
    auto cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems = request.query().get("cq.wcm.msm.action.excludedparagraphitems");
    auto cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops = request.query().get("cq.wcm.msm.action.excludedprops");
    auto cqPeriodwcmPeriodmsmPeriodactionPeriodignoredMixin = request.query().get("cq.wcm.msm.action.ignoredMixin");
    
    try {
      this->com_day_cq_wcm_msm_impl_actions_content_update_action_factory(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops, cqPeriodwcmPeriodmsmPeriodactionPeriodignoredMixin, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_msm_impl_actions_order_children_action_factory_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes = request.query().get("cq.wcm.msm.action.excludednodetypes");
    auto cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems = request.query().get("cq.wcm.msm.action.excludedparagraphitems");
    auto cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops = request.query().get("cq.wcm.msm.action.excludedprops");
    
    try {
      this->com_day_cq_wcm_msm_impl_actions_order_children_action_factory(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_msm_impl_actions_page_move_action_factory_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes = request.query().get("cq.wcm.msm.action.excludednodetypes");
    auto cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems = request.query().get("cq.wcm.msm.action.excludedparagraphitems");
    auto cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops = request.query().get("cq.wcm.msm.action.excludedprops");
    auto cqPeriodwcmPeriodmsmPeriodimplPeriodactionsPeriodpagemovePeriodpropReferenceUpdate = request.query().get("cq.wcm.msm.impl.actions.pagemove.prop_referenceUpdate");
    
    try {
      this->com_day_cq_wcm_msm_impl_actions_page_move_action_factory(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops, cqPeriodwcmPeriodmsmPeriodimplPeriodactionsPeriodpagemovePeriodpropReferenceUpdate, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_msm_impl_actions_references_update_action_factory_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes = request.query().get("cq.wcm.msm.action.excludednodetypes");
    auto cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems = request.query().get("cq.wcm.msm.action.excludedparagraphitems");
    auto cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops = request.query().get("cq.wcm.msm.action.excludedprops");
    auto cqPeriodwcmPeriodmsmPeriodimplPeriodactionPeriodreferencesupdatePeriodpropUpdateNested = request.query().get("cq.wcm.msm.impl.action.referencesupdate.prop_updateNested");
    
    try {
      this->com_day_cq_wcm_msm_impl_actions_references_update_action_factory(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops, cqPeriodwcmPeriodmsmPeriodimplPeriodactionPeriodreferencesupdatePeriodpropUpdateNested, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_msm_impl_actions_version_copy_action_factory_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes = request.query().get("cq.wcm.msm.action.excludednodetypes");
    auto cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems = request.query().get("cq.wcm.msm.action.excludedparagraphitems");
    auto cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops = request.query().get("cq.wcm.msm.action.excludedprops");
    
    try {
      this->com_day_cq_wcm_msm_impl_actions_version_copy_action_factory(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_msm_impl_live_relationship_manager_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto liverelationshipmgrPeriodrelationsconfigPerioddefault = request.query().get("liverelationshipmgr.relationsconfig.default");
    
    try {
      this->com_day_cq_wcm_msm_impl_live_relationship_manager_impl(post, apply, delete, action, Dollarlocation, propertylist, liverelationshipmgrPeriodrelationsconfigPerioddefault, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_msm_impl_rollout_manager_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto eventPeriodfilter = request.query().get("event.filter");
    auto rolloutmgrPeriodexcludedpropsPerioddefault = request.query().get("rolloutmgr.excludedprops.default");
    auto rolloutmgrPeriodexcludedparagraphpropsPerioddefault = request.query().get("rolloutmgr.excludedparagraphprops.default");
    auto rolloutmgrPeriodexcludednodetypesPerioddefault = request.query().get("rolloutmgr.excludednodetypes.default");
    auto rolloutmgrPeriodthreadpoolPeriodmaxsize = request.query().get("rolloutmgr.threadpool.maxsize");
    auto rolloutmgrPeriodthreadpoolPeriodmaxshutdowntime = request.query().get("rolloutmgr.threadpool.maxshutdowntime");
    auto rolloutmgrPeriodthreadpoolPeriodpriority = request.query().get("rolloutmgr.threadpool.priority");
    auto rolloutmgrPeriodcommitPeriodsize = request.query().get("rolloutmgr.commit.size");
    auto rolloutmgrPeriodconflicthandlingPeriodenabled = request.query().get("rolloutmgr.conflicthandling.enabled");
    
    try {
      this->com_day_cq_wcm_msm_impl_rollout_manager_impl(post, apply, delete, action, Dollarlocation, propertylist, eventPeriodfilter, rolloutmgrPeriodexcludedpropsPerioddefault, rolloutmgrPeriodexcludedparagraphpropsPerioddefault, rolloutmgrPeriodexcludednodetypesPerioddefault, rolloutmgrPeriodthreadpoolPeriodmaxsize, rolloutmgrPeriodthreadpoolPeriodmaxshutdowntime, rolloutmgrPeriodthreadpoolPeriodpriority, rolloutmgrPeriodcommitPeriodsize, rolloutmgrPeriodconflicthandlingPeriodenabled, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_msm_impl_servlets_audit_log_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto auditlogservletPerioddefaultPeriodeventsPeriodcount = request.query().get("auditlogservlet.default.events.count");
    auto auditlogservletPerioddefaultPeriodpath = request.query().get("auditlogservlet.default.path");
    
    try {
      this->com_day_cq_wcm_msm_impl_servlets_audit_log_servlet(post, apply, delete, action, Dollarlocation, propertylist, auditlogservletPerioddefaultPeriodeventsPeriodcount, auditlogservletPerioddefaultPeriodpath, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_notification_email_impl_email_channel_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto emailPeriodfrom = request.query().get("email.from");
    
    try {
      this->com_day_cq_wcm_notification_email_impl_email_channel(post, apply, delete, action, Dollarlocation, propertylist, emailPeriodfrom, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_notification_impl_notification_manager_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto eventPeriodtopics = request.query().get("event.topics");
    
    try {
      this->com_day_cq_wcm_notification_impl_notification_manager_impl(post, apply, delete, action, Dollarlocation, propertylist, eventPeriodtopics, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_scripting_impl_bvp_manager_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto comPerioddayPeriodcqPeriodwcmPeriodscriptingPeriodbvpPeriodscriptPeriodengines = request.query().get("com.day.cq.wcm.scripting.bvp.script.engines");
    
    try {
      this->com_day_cq_wcm_scripting_impl_bvp_manager(post, apply, delete, action, Dollarlocation, propertylist, comPerioddayPeriodcqPeriodwcmPeriodscriptingPeriodbvpPeriodscriptPeriodengines, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_undo_undo_config_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cqPeriodwcmPeriodundoPeriodenabled = request.query().get("cq.wcm.undo.enabled");
    auto cqPeriodwcmPeriodundoPeriodpath = request.query().get("cq.wcm.undo.path");
    auto cqPeriodwcmPeriodundoPeriodvalidity = request.query().get("cq.wcm.undo.validity");
    auto cqPeriodwcmPeriodundoPeriodsteps = request.query().get("cq.wcm.undo.steps");
    auto cqPeriodwcmPeriodundoPeriodpersistence = request.query().get("cq.wcm.undo.persistence");
    auto cqPeriodwcmPeriodundoPeriodpersistencePeriodmode = request.query().get("cq.wcm.undo.persistence.mode");
    auto cqPeriodwcmPeriodundoPeriodmarkermode = request.query().get("cq.wcm.undo.markermode");
    auto cqPeriodwcmPeriodundoPeriodwhitelist = request.query().get("cq.wcm.undo.whitelist");
    auto cqPeriodwcmPeriodundoPeriodblacklist = request.query().get("cq.wcm.undo.blacklist");
    
    try {
      this->com_day_cq_wcm_undo_undo_config(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodwcmPeriodundoPeriodenabled, cqPeriodwcmPeriodundoPeriodpath, cqPeriodwcmPeriodundoPeriodvalidity, cqPeriodwcmPeriodundoPeriodsteps, cqPeriodwcmPeriodundoPeriodpersistence, cqPeriodwcmPeriodundoPeriodpersistencePeriodmode, cqPeriodwcmPeriodundoPeriodmarkermode, cqPeriodwcmPeriodundoPeriodwhitelist, cqPeriodwcmPeriodundoPeriodblacklist, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_webservicesupport_impl_replication_event_listener_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto flush_agents = request.query().get("Flush agents");
    
    try {
      this->com_day_cq_wcm_webservicesupport_impl_replication_event_listener(post, apply, delete, action, Dollarlocation, propertylist, flush_agents, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_workflow_impl_wcm_workflow_service_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto eventPeriodfilter = request.query().get("event.filter");
    auto minThreadPoolSize = request.query().get("minThreadPoolSize");
    auto maxThreadPoolSize = request.query().get("maxThreadPoolSize");
    auto cqPeriodwcmPeriodworkflowPeriodterminatePeriodonPeriodactivate = request.query().get("cq.wcm.workflow.terminate.on.activate");
    auto cqPeriodwcmPeriodworklfowPeriodterminatePeriodexclusionPeriodlist = request.query().get("cq.wcm.worklfow.terminate.exclusion.list");
    
    try {
      this->com_day_cq_wcm_workflow_impl_wcm_workflow_service_impl(post, apply, delete, action, Dollarlocation, propertylist, eventPeriodfilter, minThreadPoolSize, maxThreadPoolSize, cqPeriodwcmPeriodworkflowPeriodterminatePeriodonPeriodactivate, cqPeriodwcmPeriodworklfowPeriodterminatePeriodexclusionPeriodlist, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_wcm_workflow_impl_workflow_package_info_provider_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto workflowpackageinfoproviderPeriodfilter = request.query().get("workflowpackageinfoprovider.filter");
    auto workflowpackageinfoproviderPeriodfilterPeriodrootpath = request.query().get("workflowpackageinfoprovider.filter.rootpath");
    
    try {
      this->com_day_cq_wcm_workflow_impl_workflow_package_info_provider(post, apply, delete, action, Dollarlocation, propertylist, workflowpackageinfoproviderPeriodfilter, workflowpackageinfoproviderPeriodfilterPeriodrootpath, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_widget_impl_html_library_manager_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto htmllibmanagerPeriodclientmanager = request.query().get("htmllibmanager.clientmanager");
    auto htmllibmanagerPerioddebug = request.query().get("htmllibmanager.debug");
    auto htmllibmanagerPerioddebugPeriodconsole = request.query().get("htmllibmanager.debug.console");
    auto htmllibmanagerPerioddebugPeriodinitPeriodjs = request.query().get("htmllibmanager.debug.init.js");
    auto htmllibmanagerPerioddefaultthemename = request.query().get("htmllibmanager.defaultthemename");
    auto htmllibmanagerPerioddefaultuserthemename = request.query().get("htmllibmanager.defaultuserthemename");
    auto htmllibmanagerPeriodfirebuglitePeriodpath = request.query().get("htmllibmanager.firebuglite.path");
    auto htmllibmanagerPeriodforceCQUrlInfo = request.query().get("htmllibmanager.forceCQUrlInfo");
    auto htmllibmanagerPeriodgzip = request.query().get("htmllibmanager.gzip");
    auto htmllibmanagerPeriodmaxage = request.query().get("htmllibmanager.maxage");
    auto htmllibmanagerPeriodmaxDataUriSize = request.query().get("htmllibmanager.maxDataUriSize");
    auto htmllibmanagerPeriodminify = request.query().get("htmllibmanager.minify");
    auto htmllibmanagerPeriodpathPeriodlist = request.query().get("htmllibmanager.path.list");
    auto htmllibmanagerPeriodtiming = request.query().get("htmllibmanager.timing");
    
    try {
      this->com_day_cq_widget_impl_html_library_manager_impl(post, apply, delete, action, Dollarlocation, propertylist, htmllibmanagerPeriodclientmanager, htmllibmanagerPerioddebug, htmllibmanagerPerioddebugPeriodconsole, htmllibmanagerPerioddebugPeriodinitPeriodjs, htmllibmanagerPerioddefaultthemename, htmllibmanagerPerioddefaultuserthemename, htmllibmanagerPeriodfirebuglitePeriodpath, htmllibmanagerPeriodforceCQUrlInfo, htmllibmanagerPeriodgzip, htmllibmanagerPeriodmaxage, htmllibmanagerPeriodmaxDataUriSize, htmllibmanagerPeriodminify, htmllibmanagerPeriodpathPeriodlist, htmllibmanagerPeriodtiming, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_widget_impl_widget_extension_provider_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto extendablePeriodwidgets = request.query().get("extendable.widgets");
    auto widgetextensionproviderPerioddebug = request.query().get("widgetextensionprovider.debug");
    
    try {
      this->com_day_cq_widget_impl_widget_extension_provider_impl(post, apply, delete, action, Dollarlocation, propertylist, extendablePeriodwidgets, widgetextensionproviderPerioddebug, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_workflow_impl_email_e_mail_notification_service_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto fromPeriodaddress = request.query().get("from.address");
    auto hostPeriodprefix = request.query().get("host.prefix");
    auto notifyPeriodonabort = request.query().get("notify.onabort");
    auto notifyPeriodoncomplete = request.query().get("notify.oncomplete");
    auto notifyPeriodoncontainercomplete = request.query().get("notify.oncontainercomplete");
    auto notifyPerioduseronly = request.query().get("notify.useronly");
    
    try {
      this->com_day_cq_workflow_impl_email_e_mail_notification_service(post, apply, delete, action, Dollarlocation, propertylist, fromPeriodaddress, hostPeriodprefix, notifyPeriodonabort, notifyPeriodoncomplete, notifyPeriodoncontainercomplete, notifyPerioduseronly, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_cq_workflow_impl_email_task_e_mail_notification_service_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto notifyPeriodonupdate = request.query().get("notify.onupdate");
    auto notifyPeriodoncomplete = request.query().get("notify.oncomplete");
    
    try {
      this->com_day_cq_workflow_impl_email_task_e_mail_notification_service(post, apply, delete, action, Dollarlocation, propertylist, notifyPeriodonupdate, notifyPeriodoncomplete, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_crx_security_token_impl_impl_token_authentication_handler_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto path = request.query().get("path");
    auto tokenPeriodrequiredPeriodattr = request.query().get("token.required.attr");
    auto tokenPeriodalternatePeriodurl = request.query().get("token.alternate.url");
    auto tokenPeriodencapsulated = request.query().get("token.encapsulated");
    auto skipPeriodtokenPeriodrefresh = request.query().get("skip.token.refresh");
    
    try {
      this->com_day_crx_security_token_impl_impl_token_authentication_handler(post, apply, delete, action, Dollarlocation, propertylist, path, tokenPeriodrequiredPeriodattr, tokenPeriodalternatePeriodurl, tokenPeriodencapsulated, skipPeriodtokenPeriodrefresh, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::com_day_crx_security_token_impl_token_cleanup_task_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto enablePeriodtokenPeriodcleanupPeriodtask = request.query().get("enable.token.cleanup.task");
    auto schedulerPeriodexpression = request.query().get("scheduler.expression");
    auto batchPeriodsize = request.query().get("batch.size");
    
    try {
      this->com_day_crx_security_token_impl_token_cleanup_task(post, apply, delete, action, Dollarlocation, propertylist, enablePeriodtokenPeriodcleanupPeriodtask, schedulerPeriodexpression, batchPeriodsize, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::guide_localization_service_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto supportedLocales = request.query().get("supportedLocales");
    auto localizable_Properties = request.query().get("Localizable Properties");
    
    try {
      this->guide_localization_service(post, apply, delete, action, Dollarlocation, propertylist, supportedLocales, localizable_Properties, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::messaging_user_component_factory_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto priority = request.query().get("priority");
    
    try {
      this->messaging_user_component_factory(post, apply, delete, action, Dollarlocation, propertylist, priority, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_aries_jmx_framework_state_config_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto attributeChangeNotificationEnabled = request.query().get("attributeChangeNotificationEnabled");
    
    try {
      this->org_apache_aries_jmx_framework_state_config(post, apply, delete, action, Dollarlocation, propertylist, attributeChangeNotificationEnabled, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_felix_eventadmin_impl_event_admin_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto orgPeriodapachePeriodfelixPeriodeventadminPeriodThreadPoolSize = request.query().get("org.apache.felix.eventadmin.ThreadPoolSize");
    auto orgPeriodapachePeriodfelixPeriodeventadminPeriodAsyncToSyncThreadRatio = request.query().get("org.apache.felix.eventadmin.AsyncToSyncThreadRatio");
    auto orgPeriodapachePeriodfelixPeriodeventadminPeriodTimeout = request.query().get("org.apache.felix.eventadmin.Timeout");
    auto orgPeriodapachePeriodfelixPeriodeventadminPeriodRequireTopic = request.query().get("org.apache.felix.eventadmin.RequireTopic");
    auto orgPeriodapachePeriodfelixPeriodeventadminPeriodIgnoreTimeout = request.query().get("org.apache.felix.eventadmin.IgnoreTimeout");
    auto orgPeriodapachePeriodfelixPeriodeventadminPeriodIgnoreTopic = request.query().get("org.apache.felix.eventadmin.IgnoreTopic");
    
    try {
      this->org_apache_felix_eventadmin_impl_event_admin(post, apply, delete, action, Dollarlocation, propertylist, orgPeriodapachePeriodfelixPeriodeventadminPeriodThreadPoolSize, orgPeriodapachePeriodfelixPeriodeventadminPeriodAsyncToSyncThreadRatio, orgPeriodapachePeriodfelixPeriodeventadminPeriodTimeout, orgPeriodapachePeriodfelixPeriodeventadminPeriodRequireTopic, orgPeriodapachePeriodfelixPeriodeventadminPeriodIgnoreTimeout, orgPeriodapachePeriodfelixPeriodeventadminPeriodIgnoreTopic, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_felix_http_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto orgPeriodapachePeriodfelixPeriodhttpPeriodhost = request.query().get("org.apache.felix.http.host");
    auto orgPeriodapachePeriodfelixPeriodhttpPeriodenable = request.query().get("org.apache.felix.http.enable");
    auto orgPeriodosgiPeriodservicePeriodhttpPeriodport = request.query().get("org.osgi.service.http.port");
    auto orgPeriodapachePeriodfelixPeriodhttpPeriodtimeout = request.query().get("org.apache.felix.http.timeout");
    auto orgPeriodapachePeriodfelixPeriodhttpsPeriodenable = request.query().get("org.apache.felix.https.enable");
    auto orgPeriodosgiPeriodservicePeriodhttpPeriodportPeriodsecure = request.query().get("org.osgi.service.http.port.secure");
    auto orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystore = request.query().get("org.apache.felix.https.keystore");
    auto orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodpassword = request.query().get("org.apache.felix.https.keystore.password");
    auto orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyPeriodpassword = request.query().get("org.apache.felix.https.keystore.key.password");
    auto orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststore = request.query().get("org.apache.felix.https.truststore");
    auto orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststorePeriodpassword = request.query().get("org.apache.felix.https.truststore.password");
    auto orgPeriodapachePeriodfelixPeriodhttpsPeriodclientcertificate = request.query().get("org.apache.felix.https.clientcertificate");
    auto orgPeriodapachePeriodfelixPeriodhttpPeriodcontextPath = request.query().get("org.apache.felix.http.context_path");
    auto orgPeriodapachePeriodfelixPeriodhttpPeriodmbeans = request.query().get("org.apache.felix.http.mbeans");
    auto orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPeriodtimeout = request.query().get("org.apache.felix.http.session.timeout");
    auto orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodthreadpoolPeriodmax = request.query().get("org.apache.felix.http.jetty.threadpool.max");
    auto orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodacceptors = request.query().get("org.apache.felix.http.jetty.acceptors");
    auto orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodselectors = request.query().get("org.apache.felix.http.jetty.selectors");
    auto orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodheaderBufferSize = request.query().get("org.apache.felix.http.jetty.headerBufferSize");
    auto orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodrequestBufferSize = request.query().get("org.apache.felix.http.jetty.requestBufferSize");
    auto orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodresponseBufferSize = request.query().get("org.apache.felix.http.jetty.responseBufferSize");
    auto orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodmaxFormSize = request.query().get("org.apache.felix.http.jetty.maxFormSize");
    auto orgPeriodapachePeriodfelixPeriodhttpPeriodpathExclusions = request.query().get("org.apache.felix.http.path_exclusions");
    auto orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodciphersuitesPeriodexcluded = request.query().get("org.apache.felix.https.jetty.ciphersuites.excluded");
    auto orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodciphersuitesPeriodincluded = request.query().get("org.apache.felix.https.jetty.ciphersuites.included");
    auto orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodsendServerHeader = request.query().get("org.apache.felix.http.jetty.sendServerHeader");
    auto orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodprotocolsPeriodincluded = request.query().get("org.apache.felix.https.jetty.protocols.included");
    auto orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodprotocolsPeriodexcluded = request.query().get("org.apache.felix.https.jetty.protocols.excluded");
    auto orgPeriodapachePeriodfelixPeriodproxyPeriodloadPeriodbalancerPeriodconnectionPeriodenable = request.query().get("org.apache.felix.proxy.load.balancer.connection.enable");
    auto orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodrenegotiateAllowed = request.query().get("org.apache.felix.https.jetty.renegotiateAllowed");
    auto orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodsessionPeriodcookiePeriodhttpOnly = request.query().get("org.apache.felix.https.jetty.session.cookie.httpOnly");
    auto orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodsessionPeriodcookiePeriodsecure = request.query().get("org.apache.felix.https.jetty.session.cookie.secure");
    auto orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionIdPathParameterName = request.query().get("org.eclipse.jetty.servlet.SessionIdPathParameterName");
    auto orgPeriodeclipsePeriodjettyPeriodservletPeriodCheckingRemoteSessionIdEncoding = request.query().get("org.eclipse.jetty.servlet.CheckingRemoteSessionIdEncoding");
    auto orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionCookie = request.query().get("org.eclipse.jetty.servlet.SessionCookie");
    auto orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionDomain = request.query().get("org.eclipse.jetty.servlet.SessionDomain");
    auto orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionPath = request.query().get("org.eclipse.jetty.servlet.SessionPath");
    auto orgPeriodeclipsePeriodjettyPeriodservletPeriodMaxAge = request.query().get("org.eclipse.jetty.servlet.MaxAge");
    auto orgPeriodapachePeriodfelixPeriodhttpPeriodname = request.query().get("org.apache.felix.http.name");
    auto orgPeriodapachePeriodfelixPeriodjettyPeriodgziphandlerPeriodenable = request.query().get("org.apache.felix.jetty.gziphandler.enable");
    auto orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodminGzipSize = request.query().get("org.apache.felix.jetty.gzip.minGzipSize");
    auto orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodcompressionLevel = request.query().get("org.apache.felix.jetty.gzip.compressionLevel");
    auto orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodinflateBufferSize = request.query().get("org.apache.felix.jetty.gzip.inflateBufferSize");
    auto orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodsyncFlush = request.query().get("org.apache.felix.jetty.gzip.syncFlush");
    auto orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedUserAgents = request.query().get("org.apache.felix.jetty.gzip.excludedUserAgents");
    auto orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedMethods = request.query().get("org.apache.felix.jetty.gzip.includedMethods");
    auto orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedMethods = request.query().get("org.apache.felix.jetty.gzip.excludedMethods");
    auto orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedPaths = request.query().get("org.apache.felix.jetty.gzip.includedPaths");
    auto orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedPaths = request.query().get("org.apache.felix.jetty.gzip.excludedPaths");
    auto orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedMimeTypes = request.query().get("org.apache.felix.jetty.gzip.includedMimeTypes");
    auto orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedMimeTypes = request.query().get("org.apache.felix.jetty.gzip.excludedMimeTypes");
    auto orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPeriodinvalidate = request.query().get("org.apache.felix.http.session.invalidate");
    auto orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPerioduniqueid = request.query().get("org.apache.felix.http.session.uniqueid");
    
    try {
      this->org_apache_felix_http(post, apply, delete, action, Dollarlocation, propertylist, orgPeriodapachePeriodfelixPeriodhttpPeriodhost, orgPeriodapachePeriodfelixPeriodhttpPeriodenable, orgPeriodosgiPeriodservicePeriodhttpPeriodport, orgPeriodapachePeriodfelixPeriodhttpPeriodtimeout, orgPeriodapachePeriodfelixPeriodhttpsPeriodenable, orgPeriodosgiPeriodservicePeriodhttpPeriodportPeriodsecure, orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystore, orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodpassword, orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyPeriodpassword, orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststore, orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststorePeriodpassword, orgPeriodapachePeriodfelixPeriodhttpsPeriodclientcertificate, orgPeriodapachePeriodfelixPeriodhttpPeriodcontextPath, orgPeriodapachePeriodfelixPeriodhttpPeriodmbeans, orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPeriodtimeout, orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodthreadpoolPeriodmax, orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodacceptors, orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodselectors, orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodheaderBufferSize, orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodrequestBufferSize, orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodresponseBufferSize, orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodmaxFormSize, orgPeriodapachePeriodfelixPeriodhttpPeriodpathExclusions, orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodciphersuitesPeriodexcluded, orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodciphersuitesPeriodincluded, orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodsendServerHeader, orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodprotocolsPeriodincluded, orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodprotocolsPeriodexcluded, orgPeriodapachePeriodfelixPeriodproxyPeriodloadPeriodbalancerPeriodconnectionPeriodenable, orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodrenegotiateAllowed, orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodsessionPeriodcookiePeriodhttpOnly, orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodsessionPeriodcookiePeriodsecure, orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionIdPathParameterName, orgPeriodeclipsePeriodjettyPeriodservletPeriodCheckingRemoteSessionIdEncoding, orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionCookie, orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionDomain, orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionPath, orgPeriodeclipsePeriodjettyPeriodservletPeriodMaxAge, orgPeriodapachePeriodfelixPeriodhttpPeriodname, orgPeriodapachePeriodfelixPeriodjettyPeriodgziphandlerPeriodenable, orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodminGzipSize, orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodcompressionLevel, orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodinflateBufferSize, orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodsyncFlush, orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedUserAgents, orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedMethods, orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedMethods, orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedPaths, orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedPaths, orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedMimeTypes, orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedMimeTypes, orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPeriodinvalidate, orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPerioduniqueid, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_felix_http_sslfilter_ssl_filter_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto sslForwardPeriodheader = request.query().get("ssl-forward.header");
    auto sslForwardPeriodvalue = request.query().get("ssl-forward.value");
    auto sslForwardCertPeriodheader = request.query().get("ssl-forward-cert.header");
    auto rewritePeriodabsolutePeriodurls = request.query().get("rewrite.absolute.urls");
    
    try {
      this->org_apache_felix_http_sslfilter_ssl_filter(post, apply, delete, action, Dollarlocation, propertylist, sslForwardPeriodheader, sslForwardPeriodvalue, sslForwardCertPeriodheader, rewritePeriodabsolutePeriodurls, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_felix_jaas_configuration_factory_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto jaasPeriodcontrolFlag = request.query().get("jaas.controlFlag");
    auto jaasPeriodranking = request.query().get("jaas.ranking");
    auto jaasPeriodrealmName = request.query().get("jaas.realmName");
    auto jaasPeriodclassname = request.query().get("jaas.classname");
    auto jaasPeriodoptions = request.query().get("jaas.options");
    
    try {
      this->org_apache_felix_jaas_configuration_factory(post, apply, delete, action, Dollarlocation, propertylist, jaasPeriodcontrolFlag, jaasPeriodranking, jaasPeriodrealmName, jaasPeriodclassname, jaasPeriodoptions, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_felix_jaas_configuration_spi_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto jaasPerioddefaultRealmName = request.query().get("jaas.defaultRealmName");
    auto jaasPeriodconfigProviderName = request.query().get("jaas.configProviderName");
    auto jaasPeriodglobalConfigPolicy = request.query().get("jaas.globalConfigPolicy");
    
    try {
      this->org_apache_felix_jaas_configuration_spi(post, apply, delete, action, Dollarlocation, propertylist, jaasPerioddefaultRealmName, jaasPeriodconfigProviderName, jaasPeriodglobalConfigPolicy, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_felix_scr_scr_service_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto dsPeriodloglevel = request.query().get("ds.loglevel");
    auto dsPeriodfactoryPeriodenabled = request.query().get("ds.factory.enabled");
    auto dsPerioddelayedPeriodkeepInstances = request.query().get("ds.delayed.keepInstances");
    auto dsPeriodlockPeriodtimeoutPeriodmilliseconds = request.query().get("ds.lock.timeout.milliseconds");
    auto dsPeriodstopPeriodtimeoutPeriodmilliseconds = request.query().get("ds.stop.timeout.milliseconds");
    auto dsPeriodglobalPeriodextender = request.query().get("ds.global.extender");
    
    try {
      this->org_apache_felix_scr_scr_service(post, apply, delete, action, Dollarlocation, propertylist, dsPeriodloglevel, dsPeriodfactoryPeriodenabled, dsPerioddelayedPeriodkeepInstances, dsPeriodlockPeriodtimeoutPeriodmilliseconds, dsPeriodstopPeriodtimeoutPeriodmilliseconds, dsPeriodglobalPeriodextender, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_felix_systemready_impl_components_check_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto componentsPeriodlist = request.query().get("components.list");
    auto type = request.query().get("type");
    
    try {
      this->org_apache_felix_systemready_impl_components_check(post, apply, delete, action, Dollarlocation, propertylist, componentsPeriodlist, type, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_felix_systemready_impl_framework_start_check_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto timeout = request.query().get("timeout");
    auto targetPeriodstartPeriodlevel = request.query().get("target.start.level");
    auto targetPeriodstartPeriodlevelPeriodpropPeriodname = request.query().get("target.start.level.prop.name");
    auto type = request.query().get("type");
    
    try {
      this->org_apache_felix_systemready_impl_framework_start_check(post, apply, delete, action, Dollarlocation, propertylist, timeout, targetPeriodstartPeriodlevel, targetPeriodstartPeriodlevelPeriodpropPeriodname, type, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_felix_systemready_impl_services_check_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto servicesPeriodlist = request.query().get("services.list");
    auto type = request.query().get("type");
    
    try {
      this->org_apache_felix_systemready_impl_services_check(post, apply, delete, action, Dollarlocation, propertylist, servicesPeriodlist, type, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_felix_systemready_impl_servlet_system_alive_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern = request.query().get("osgi.http.whiteboard.servlet.pattern");
    auto osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect = request.query().get("osgi.http.whiteboard.context.select");
    
    try {
      this->org_apache_felix_systemready_impl_servlet_system_alive_servlet(post, apply, delete, action, Dollarlocation, propertylist, osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern, osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_felix_systemready_impl_servlet_system_ready_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern = request.query().get("osgi.http.whiteboard.servlet.pattern");
    auto osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect = request.query().get("osgi.http.whiteboard.context.select");
    
    try {
      this->org_apache_felix_systemready_impl_servlet_system_ready_servlet(post, apply, delete, action, Dollarlocation, propertylist, osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern, osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_felix_systemready_system_ready_monitor_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto pollPeriodinterval = request.query().get("poll.interval");
    
    try {
      this->org_apache_felix_systemready_system_ready_monitor(post, apply, delete, action, Dollarlocation, propertylist, pollPeriodinterval, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_felix_webconsole_internal_servlet_osgi_manager_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto managerPeriodroot = request.query().get("manager.root");
    auto httpPeriodservicePeriodfilter = request.query().get("http.service.filter");
    auto defaultPeriodrender = request.query().get("default.render");
    auto realm = request.query().get("realm");
    auto username = request.query().get("username");
    auto password = request.query().get("password");
    auto category = request.query().get("category");
    auto locale = request.query().get("locale");
    auto loglevel = request.query().get("loglevel");
    auto plugins = request.query().get("plugins");
    
    try {
      this->org_apache_felix_webconsole_internal_servlet_osgi_manager(post, apply, delete, action, Dollarlocation, propertylist, managerPeriodroot, httpPeriodservicePeriodfilter, defaultPeriodrender, realm, username, password, category, locale, loglevel, plugins, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_felix_webconsole_plugins_event_internal_plugin_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto maxPeriodsize = request.query().get("max.size");
    
    try {
      this->org_apache_felix_webconsole_plugins_event_internal_plugin_servlet(post, apply, delete, action, Dollarlocation, propertylist, maxPeriodsize, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_felix_webconsole_plugins_memoryusage_internal_memory_usage_co_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto felixPeriodmemoryusagePerioddumpPeriodthreshold = request.query().get("felix.memoryusage.dump.threshold");
    auto felixPeriodmemoryusagePerioddumpPeriodinterval = request.query().get("felix.memoryusage.dump.interval");
    auto felixPeriodmemoryusagePerioddumpPeriodlocation = request.query().get("felix.memoryusage.dump.location");
    
    try {
      this->org_apache_felix_webconsole_plugins_memoryusage_internal_memory_usage_co(post, apply, delete, action, Dollarlocation, propertylist, felixPeriodmemoryusagePerioddumpPeriodthreshold, felixPeriodmemoryusagePerioddumpPeriodinterval, felixPeriodmemoryusagePerioddumpPeriodlocation, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_http_proxyconfigurator_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto proxyPeriodenabled = request.query().get("proxy.enabled");
    auto proxyPeriodhost = request.query().get("proxy.host");
    auto proxyPeriodport = request.query().get("proxy.port");
    auto proxyPerioduser = request.query().get("proxy.user");
    auto proxyPeriodpassword = request.query().get("proxy.password");
    auto proxyPeriodexceptions = request.query().get("proxy.exceptions");
    
    try {
      this->org_apache_http_proxyconfigurator(post, apply, delete, action, Dollarlocation, propertylist, proxyPeriodenabled, proxyPeriodhost, proxyPeriodport, proxyPerioduser, proxyPeriodpassword, proxyPeriodexceptions, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_jackrabbit_oak_plugins_blob_datastore_data_store_text_provider_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto dir = request.query().get("dir");
    
    try {
      this->org_apache_jackrabbit_oak_plugins_blob_datastore_data_store_text_provider(post, apply, delete, action, Dollarlocation, propertylist, dir, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_jackrabbit_oak_plugins_blob_datastore_file_data_store_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto path = request.query().get("path");
    
    try {
      this->org_apache_jackrabbit_oak_plugins_blob_datastore_file_data_store(post, apply, delete, action, Dollarlocation, propertylist, path, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_jackrabbit_oak_plugins_document_document_node_store_service_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto mongouri = request.query().get("mongouri");
    auto db = request.query().get("db");
    auto socketKeepAlive = request.query().get("socketKeepAlive");
    auto cache = request.query().get("cache");
    auto nodeCachePercentage = request.query().get("nodeCachePercentage");
    auto prevDocCachePercentage = request.query().get("prevDocCachePercentage");
    auto childrenCachePercentage = request.query().get("childrenCachePercentage");
    auto diffCachePercentage = request.query().get("diffCachePercentage");
    auto cacheSegmentCount = request.query().get("cacheSegmentCount");
    auto cacheStackMoveDistance = request.query().get("cacheStackMoveDistance");
    auto blobCacheSize = request.query().get("blobCacheSize");
    auto persistentCache = request.query().get("persistentCache");
    auto journalCache = request.query().get("journalCache");
    auto customBlobStore = request.query().get("customBlobStore");
    auto journalGCInterval = request.query().get("journalGCInterval");
    auto journalGCMaxAge = request.query().get("journalGCMaxAge");
    auto prefetchExternalChanges = request.query().get("prefetchExternalChanges");
    auto role = request.query().get("role");
    auto versionGcMaxAgeInSecs = request.query().get("versionGcMaxAgeInSecs");
    auto versionGCExpression = request.query().get("versionGCExpression");
    auto versionGCTimeLimitInSecs = request.query().get("versionGCTimeLimitInSecs");
    auto blobGcMaxAgeInSecs = request.query().get("blobGcMaxAgeInSecs");
    auto blobTrackSnapshotIntervalInSecs = request.query().get("blobTrackSnapshotIntervalInSecs");
    auto repositoryPeriodhome = request.query().get("repository.home");
    auto maxReplicationLagInSecs = request.query().get("maxReplicationLagInSecs");
    auto documentStoreType = request.query().get("documentStoreType");
    auto bundlingDisabled = request.query().get("bundlingDisabled");
    auto updateLimit = request.query().get("updateLimit");
    auto persistentCacheIncludes = request.query().get("persistentCacheIncludes");
    auto leaseCheckMode = request.query().get("leaseCheckMode");
    
    try {
      this->org_apache_jackrabbit_oak_plugins_document_document_node_store_service(post, apply, delete, action, Dollarlocation, propertylist, mongouri, db, socketKeepAlive, cache, nodeCachePercentage, prevDocCachePercentage, childrenCachePercentage, diffCachePercentage, cacheSegmentCount, cacheStackMoveDistance, blobCacheSize, persistentCache, journalCache, customBlobStore, journalGCInterval, journalGCMaxAge, prefetchExternalChanges, role, versionGcMaxAgeInSecs, versionGCExpression, versionGCTimeLimitInSecs, blobGcMaxAgeInSecs, blobTrackSnapshotIntervalInSecs, repositoryPeriodhome, maxReplicationLagInSecs, documentStoreType, bundlingDisabled, updateLimit, persistentCacheIncludes, leaseCheckMode, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_jackrabbit_oak_plugins_document_document_node_store_service_pre_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto persistentCacheIncludes = request.query().get("persistentCacheIncludes");
    
    try {
      this->org_apache_jackrabbit_oak_plugins_document_document_node_store_service_pre(post, apply, delete, action, Dollarlocation, propertylist, persistentCacheIncludes, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_jackrabbit_oak_plugins_document_secondary_secondary_store_cac_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto includedPaths = request.query().get("includedPaths");
    auto enableAsyncObserver = request.query().get("enableAsyncObserver");
    auto observerQueueSize = request.query().get("observerQueueSize");
    
    try {
      this->org_apache_jackrabbit_oak_plugins_document_secondary_secondary_store_cac(post, apply, delete, action, Dollarlocation, propertylist, includedPaths, enableAsyncObserver, observerQueueSize, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_jackrabbit_oak_plugins_index_async_indexer_service_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto asyncConfigs = request.query().get("asyncConfigs");
    auto leaseTimeOutMinutes = request.query().get("leaseTimeOutMinutes");
    auto failingIndexTimeoutSeconds = request.query().get("failingIndexTimeoutSeconds");
    auto errorWarnIntervalSeconds = request.query().get("errorWarnIntervalSeconds");
    
    try {
      this->org_apache_jackrabbit_oak_plugins_index_async_indexer_service(post, apply, delete, action, Dollarlocation, propertylist, asyncConfigs, leaseTimeOutMinutes, failingIndexTimeoutSeconds, errorWarnIntervalSeconds, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_jackrabbit_oak_plugins_index_lucene_lucene_index_provider_serv_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto disabled = request.query().get("disabled");
    auto debug = request.query().get("debug");
    auto localIndexDir = request.query().get("localIndexDir");
    auto enableOpenIndexAsync = request.query().get("enableOpenIndexAsync");
    auto threadPoolSize = request.query().get("threadPoolSize");
    auto prefetchIndexFiles = request.query().get("prefetchIndexFiles");
    auto extractedTextCacheSizeInMB = request.query().get("extractedTextCacheSizeInMB");
    auto extractedTextCacheExpiryInSecs = request.query().get("extractedTextCacheExpiryInSecs");
    auto alwaysUsePreExtractedCache = request.query().get("alwaysUsePreExtractedCache");
    auto booleanClauseLimit = request.query().get("booleanClauseLimit");
    auto enableHybridIndexing = request.query().get("enableHybridIndexing");
    auto hybridQueueSize = request.query().get("hybridQueueSize");
    auto disableStoredIndexDefinition = request.query().get("disableStoredIndexDefinition");
    auto deletedBlobsCollectionEnabled = request.query().get("deletedBlobsCollectionEnabled");
    auto propIndexCleanerIntervalInSecs = request.query().get("propIndexCleanerIntervalInSecs");
    auto enableSingleBlobIndexFiles = request.query().get("enableSingleBlobIndexFiles");
    
    try {
      this->org_apache_jackrabbit_oak_plugins_index_lucene_lucene_index_provider_serv(post, apply, delete, action, Dollarlocation, propertylist, disabled, debug, localIndexDir, enableOpenIndexAsync, threadPoolSize, prefetchIndexFiles, extractedTextCacheSizeInMB, extractedTextCacheExpiryInSecs, alwaysUsePreExtractedCache, booleanClauseLimit, enableHybridIndexing, hybridQueueSize, disableStoredIndexDefinition, deletedBlobsCollectionEnabled, propIndexCleanerIntervalInSecs, enableSingleBlobIndexFiles, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_jackrabbit_oak_plugins_index_solr_osgi_embedded_solr_server_co_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto solrPeriodhomePeriodpath = request.query().get("solr.home.path");
    auto solrPeriodcorePeriodname = request.query().get("solr.core.name");
    
    try {
      this->org_apache_jackrabbit_oak_plugins_index_solr_osgi_embedded_solr_server_co(post, apply, delete, action, Dollarlocation, propertylist, solrPeriodhomePeriodpath, solrPeriodcorePeriodname, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_jackrabbit_oak_plugins_index_solr_osgi_node_state_solr_servers_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto enabled = request.query().get("enabled");
    
    try {
      this->org_apache_jackrabbit_oak_plugins_index_solr_osgi_node_state_solr_servers(post, apply, delete, action, Dollarlocation, propertylist, enabled, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_jackrabbit_oak_plugins_index_solr_osgi_oak_solr_configuration_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto pathPerioddescPeriodfield = request.query().get("path.desc.field");
    auto pathPeriodchildPeriodfield = request.query().get("path.child.field");
    auto pathPeriodparentPeriodfield = request.query().get("path.parent.field");
    auto pathPeriodexactPeriodfield = request.query().get("path.exact.field");
    auto catchPeriodallPeriodfield = request.query().get("catch.all.field");
    auto collapsedPeriodpathPeriodfield = request.query().get("collapsed.path.field");
    auto pathPerioddepthPeriodfield = request.query().get("path.depth.field");
    auto commitPeriodpolicy = request.query().get("commit.policy");
    auto rows = request.query().get("rows");
    auto pathPeriodrestrictions = request.query().get("path.restrictions");
    auto propertyPeriodrestrictions = request.query().get("property.restrictions");
    auto primarytypesPeriodrestrictions = request.query().get("primarytypes.restrictions");
    auto ignoredPeriodproperties = request.query().get("ignored.properties");
    auto usedPeriodproperties = request.query().get("used.properties");
    auto typePeriodmappings = request.query().get("type.mappings");
    auto propertyPeriodmappings = request.query().get("property.mappings");
    auto collapsePeriodjcrcontentPeriodnodes = request.query().get("collapse.jcrcontent.nodes");
    
    try {
      this->org_apache_jackrabbit_oak_plugins_index_solr_osgi_oak_solr_configuration(post, apply, delete, action, Dollarlocation, propertylist, pathPerioddescPeriodfield, pathPeriodchildPeriodfield, pathPeriodparentPeriodfield, pathPeriodexactPeriodfield, catchPeriodallPeriodfield, collapsedPeriodpathPeriodfield, pathPerioddepthPeriodfield, commitPeriodpolicy, rows, pathPeriodrestrictions, propertyPeriodrestrictions, primarytypesPeriodrestrictions, ignoredPeriodproperties, usedPeriodproperties, typePeriodmappings, propertyPeriodmappings, collapsePeriodjcrcontentPeriodnodes, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_jackrabbit_oak_plugins_index_solr_osgi_remote_solr_server_conf_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto solrPeriodhttpPeriodurl = request.query().get("solr.http.url");
    auto solrPeriodzkPeriodhost = request.query().get("solr.zk.host");
    auto solrPeriodcollection = request.query().get("solr.collection");
    auto solrPeriodsocketPeriodtimeout = request.query().get("solr.socket.timeout");
    auto solrPeriodconnectionPeriodtimeout = request.query().get("solr.connection.timeout");
    auto solrPeriodshardsPeriodno = request.query().get("solr.shards.no");
    auto solrPeriodreplicationPeriodfactor = request.query().get("solr.replication.factor");
    auto solrPeriodconfPerioddir = request.query().get("solr.conf.dir");
    
    try {
      this->org_apache_jackrabbit_oak_plugins_index_solr_osgi_remote_solr_server_conf(post, apply, delete, action, Dollarlocation, propertylist, solrPeriodhttpPeriodurl, solrPeriodzkPeriodhost, solrPeriodcollection, solrPeriodsocketPeriodtimeout, solrPeriodconnectionPeriodtimeout, solrPeriodshardsPeriodno, solrPeriodreplicationPeriodfactor, solrPeriodconfPerioddir, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_query_index_provid_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto queryPeriodaggregation = request.query().get("query.aggregation");
    
    try {
      this->org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_query_index_provid(post, apply, delete, action, Dollarlocation, propertylist, queryPeriodaggregation, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_server_provider_se_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto serverPeriodtype = request.query().get("server.type");
    
    try {
      this->org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_server_provider_se(post, apply, delete, action, Dollarlocation, propertylist, serverPeriodtype, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_jackrabbit_oak_plugins_metric_statistics_provider_factory_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto providerType = request.query().get("providerType");
    
    try {
      this->org_apache_jackrabbit_oak_plugins_metric_statistics_provider_factory(post, apply, delete, action, Dollarlocation, propertylist, providerType, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_jackrabbit_oak_plugins_observation_change_collector_provider_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto maxItems = request.query().get("maxItems");
    auto maxPathDepth = request.query().get("maxPathDepth");
    auto enabled = request.query().get("enabled");
    
    try {
      this->org_apache_jackrabbit_oak_plugins_observation_change_collector_provider(post, apply, delete, action, Dollarlocation, propertylist, maxItems, maxPathDepth, enabled, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_jackrabbit_oak_query_query_engine_settings_service_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto queryLimitInMemory = request.query().get("queryLimitInMemory");
    auto queryLimitReads = request.query().get("queryLimitReads");
    auto queryFailTraversal = request.query().get("queryFailTraversal");
    auto fastQuerySize = request.query().get("fastQuerySize");
    
    try {
      this->org_apache_jackrabbit_oak_query_query_engine_settings_service(post, apply, delete, action, Dollarlocation, propertylist, queryLimitInMemory, queryLimitReads, queryFailTraversal, fastQuerySize, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_jackrabbit_oak_security_authentication_authentication_config_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto orgPeriodapachePeriodjackrabbitPeriodoakPeriodauthenticationPeriodappName = request.query().get("org.apache.jackrabbit.oak.authentication.appName");
    auto orgPeriodapachePeriodjackrabbitPeriodoakPeriodauthenticationPeriodconfigSpiName = request.query().get("org.apache.jackrabbit.oak.authentication.configSpiName");
    
    try {
      this->org_apache_jackrabbit_oak_security_authentication_authentication_config(post, apply, delete, action, Dollarlocation, propertylist, orgPeriodapachePeriodjackrabbitPeriodoakPeriodauthenticationPeriodappName, orgPeriodapachePeriodjackrabbitPeriodoakPeriodauthenticationPeriodconfigSpiName, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_jackrabbit_oak_security_authentication_ldap_impl_ldap_identi_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto providerPeriodname = request.query().get("provider.name");
    auto hostPeriodname = request.query().get("host.name");
    auto hostPeriodport = request.query().get("host.port");
    auto hostPeriodssl = request.query().get("host.ssl");
    auto hostPeriodtls = request.query().get("host.tls");
    auto hostPeriodnoCertCheck = request.query().get("host.noCertCheck");
    auto bindPerioddn = request.query().get("bind.dn");
    auto bindPeriodpassword = request.query().get("bind.password");
    auto searchTimeout = request.query().get("searchTimeout");
    auto adminPoolPeriodmaxActive = request.query().get("adminPool.maxActive");
    auto adminPoolPeriodlookupOnValidate = request.query().get("adminPool.lookupOnValidate");
    auto userPoolPeriodmaxActive = request.query().get("userPool.maxActive");
    auto userPoolPeriodlookupOnValidate = request.query().get("userPool.lookupOnValidate");
    auto userPeriodbaseDN = request.query().get("user.baseDN");
    auto userPeriodobjectclass = request.query().get("user.objectclass");
    auto userPeriodidAttribute = request.query().get("user.idAttribute");
    auto userPeriodextraFilter = request.query().get("user.extraFilter");
    auto userPeriodmakeDnPath = request.query().get("user.makeDnPath");
    auto groupPeriodbaseDN = request.query().get("group.baseDN");
    auto groupPeriodobjectclass = request.query().get("group.objectclass");
    auto groupPeriodnameAttribute = request.query().get("group.nameAttribute");
    auto groupPeriodextraFilter = request.query().get("group.extraFilter");
    auto groupPeriodmakeDnPath = request.query().get("group.makeDnPath");
    auto groupPeriodmemberAttribute = request.query().get("group.memberAttribute");
    auto useUidForExtId = request.query().get("useUidForExtId");
    auto customattributes = request.query().get("customattributes");
    
    try {
      this->org_apache_jackrabbit_oak_security_authentication_ldap_impl_ldap_identi(post, apply, delete, action, Dollarlocation, propertylist, providerPeriodname, hostPeriodname, hostPeriodport, hostPeriodssl, hostPeriodtls, hostPeriodnoCertCheck, bindPerioddn, bindPeriodpassword, searchTimeout, adminPoolPeriodmaxActive, adminPoolPeriodlookupOnValidate, userPoolPeriodmaxActive, userPoolPeriodlookupOnValidate, userPeriodbaseDN, userPeriodobjectclass, userPeriodidAttribute, userPeriodextraFilter, userPeriodmakeDnPath, groupPeriodbaseDN, groupPeriodobjectclass, groupPeriodnameAttribute, groupPeriodextraFilter, groupPeriodmakeDnPath, groupPeriodmemberAttribute, useUidForExtId, customattributes, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_jackrabbit_oak_security_authentication_token_token_configura_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto tokenExpiration = request.query().get("tokenExpiration");
    auto tokenLength = request.query().get("tokenLength");
    auto tokenRefresh = request.query().get("tokenRefresh");
    auto tokenCleanupThreshold = request.query().get("tokenCleanupThreshold");
    auto passwordHashAlgorithm = request.query().get("passwordHashAlgorithm");
    auto passwordHashIterations = request.query().get("passwordHashIterations");
    auto passwordSaltSize = request.query().get("passwordSaltSize");
    
    try {
      this->org_apache_jackrabbit_oak_security_authentication_token_token_configura(post, apply, delete, action, Dollarlocation, propertylist, tokenExpiration, tokenLength, tokenRefresh, tokenCleanupThreshold, passwordHashAlgorithm, passwordHashIterations, passwordSaltSize, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_jackrabbit_oak_security_authorization_authorization_configur_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto permissionsJr2 = request.query().get("permissionsJr2");
    auto importBehavior = request.query().get("importBehavior");
    auto readPaths = request.query().get("readPaths");
    auto administrativePrincipals = request.query().get("administrativePrincipals");
    auto configurationRanking = request.query().get("configurationRanking");
    
    try {
      this->org_apache_jackrabbit_oak_security_authorization_authorization_configur(post, apply, delete, action, Dollarlocation, propertylist, permissionsJr2, importBehavior, readPaths, administrativePrincipals, configurationRanking, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_jackrabbit_oak_security_internal_security_provider_registrati_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto requiredServicePids = request.query().get("requiredServicePids");
    auto authorizationCompositionType = request.query().get("authorizationCompositionType");
    
    try {
      this->org_apache_jackrabbit_oak_security_internal_security_provider_registrati(post, apply, delete, action, Dollarlocation, propertylist, requiredServicePids, authorizationCompositionType, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_jackrabbit_oak_security_user_random_authorizable_node_name_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto length = request.query().get("length");
    
    try {
      this->org_apache_jackrabbit_oak_security_user_random_authorizable_node_name(post, apply, delete, action, Dollarlocation, propertylist, length, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_jackrabbit_oak_security_user_user_configuration_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto usersPath = request.query().get("usersPath");
    auto groupsPath = request.query().get("groupsPath");
    auto systemRelativePath = request.query().get("systemRelativePath");
    auto defaultDepth = request.query().get("defaultDepth");
    auto importBehavior = request.query().get("importBehavior");
    auto passwordHashAlgorithm = request.query().get("passwordHashAlgorithm");
    auto passwordHashIterations = request.query().get("passwordHashIterations");
    auto passwordSaltSize = request.query().get("passwordSaltSize");
    auto omitAdminPw = request.query().get("omitAdminPw");
    auto supportAutoSave = request.query().get("supportAutoSave");
    auto passwordMaxAge = request.query().get("passwordMaxAge");
    auto initialPasswordChange = request.query().get("initialPasswordChange");
    auto passwordHistorySize = request.query().get("passwordHistorySize");
    auto passwordExpiryForAdmin = request.query().get("passwordExpiryForAdmin");
    auto cacheExpiration = request.query().get("cacheExpiration");
    auto enableRFC7613UsercaseMappedProfile = request.query().get("enableRFC7613UsercaseMappedProfile");
    
    try {
      this->org_apache_jackrabbit_oak_security_user_user_configuration_impl(post, apply, delete, action, Dollarlocation, propertylist, usersPath, groupsPath, systemRelativePath, defaultDepth, importBehavior, passwordHashAlgorithm, passwordHashIterations, passwordSaltSize, omitAdminPw, supportAutoSave, passwordMaxAge, initialPasswordChange, passwordHistorySize, passwordExpiryForAdmin, cacheExpiration, enableRFC7613UsercaseMappedProfile, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_jackrabbit_oak_segment_azure_azure_segment_store_service_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto accountName = request.query().get("accountName");
    auto containerName = request.query().get("containerName");
    auto accessKey = request.query().get("accessKey");
    auto rootPath = request.query().get("rootPath");
    auto connectionURL = request.query().get("connectionURL");
    
    try {
      this->org_apache_jackrabbit_oak_segment_azure_azure_segment_store_service(post, apply, delete, action, Dollarlocation, propertylist, accountName, containerName, accessKey, rootPath, connectionURL, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_jackrabbit_oak_segment_segment_node_store_factory_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto repositoryPeriodhome = request.query().get("repository.home");
    auto tarmkPeriodmode = request.query().get("tarmk.mode");
    auto tarmkPeriodsize = request.query().get("tarmk.size");
    auto segmentCachePeriodsize = request.query().get("segmentCache.size");
    auto stringCachePeriodsize = request.query().get("stringCache.size");
    auto templateCachePeriodsize = request.query().get("templateCache.size");
    auto stringDeduplicationCachePeriodsize = request.query().get("stringDeduplicationCache.size");
    auto templateDeduplicationCachePeriodsize = request.query().get("templateDeduplicationCache.size");
    auto nodeDeduplicationCachePeriodsize = request.query().get("nodeDeduplicationCache.size");
    auto pauseCompaction = request.query().get("pauseCompaction");
    auto compactionPeriodretryCount = request.query().get("compaction.retryCount");
    auto compactionPeriodforcePeriodtimeout = request.query().get("compaction.force.timeout");
    auto compactionPeriodsizeDeltaEstimation = request.query().get("compaction.sizeDeltaEstimation");
    auto compactionPerioddisableEstimation = request.query().get("compaction.disableEstimation");
    auto compactionPeriodretainedGenerations = request.query().get("compaction.retainedGenerations");
    auto compactionPeriodmemoryThreshold = request.query().get("compaction.memoryThreshold");
    auto compactionPeriodprogressLog = request.query().get("compaction.progressLog");
    auto standby = request.query().get("standby");
    auto customBlobStore = request.query().get("customBlobStore");
    auto customSegmentStore = request.query().get("customSegmentStore");
    auto splitPersistence = request.query().get("splitPersistence");
    auto repositoryPeriodbackupPerioddir = request.query().get("repository.backup.dir");
    auto blobGcMaxAgeInSecs = request.query().get("blobGcMaxAgeInSecs");
    auto blobTrackSnapshotIntervalInSecs = request.query().get("blobTrackSnapshotIntervalInSecs");
    auto role = request.query().get("role");
    auto registerDescriptors = request.query().get("registerDescriptors");
    auto dispatchChanges = request.query().get("dispatchChanges");
    
    try {
      this->org_apache_jackrabbit_oak_segment_segment_node_store_factory(post, apply, delete, action, Dollarlocation, propertylist, repositoryPeriodhome, tarmkPeriodmode, tarmkPeriodsize, segmentCachePeriodsize, stringCachePeriodsize, templateCachePeriodsize, stringDeduplicationCachePeriodsize, templateDeduplicationCachePeriodsize, nodeDeduplicationCachePeriodsize, pauseCompaction, compactionPeriodretryCount, compactionPeriodforcePeriodtimeout, compactionPeriodsizeDeltaEstimation, compactionPerioddisableEstimation, compactionPeriodretainedGenerations, compactionPeriodmemoryThreshold, compactionPeriodprogressLog, standby, customBlobStore, customSegmentStore, splitPersistence, repositoryPeriodbackupPerioddir, blobGcMaxAgeInSecs, blobTrackSnapshotIntervalInSecs, role, registerDescriptors, dispatchChanges, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_jackrabbit_oak_segment_segment_node_store_monitor_service_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto commitsTrackerWriterGroups = request.query().get("commitsTrackerWriterGroups");
    
    try {
      this->org_apache_jackrabbit_oak_segment_segment_node_store_monitor_service(post, apply, delete, action, Dollarlocation, propertylist, commitsTrackerWriterGroups, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_jackrabbit_oak_segment_segment_node_store_service_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto repositoryPeriodhome = request.query().get("repository.home");
    auto tarmkPeriodmode = request.query().get("tarmk.mode");
    auto tarmkPeriodsize = request.query().get("tarmk.size");
    auto segmentCachePeriodsize = request.query().get("segmentCache.size");
    auto stringCachePeriodsize = request.query().get("stringCache.size");
    auto templateCachePeriodsize = request.query().get("templateCache.size");
    auto stringDeduplicationCachePeriodsize = request.query().get("stringDeduplicationCache.size");
    auto templateDeduplicationCachePeriodsize = request.query().get("templateDeduplicationCache.size");
    auto nodeDeduplicationCachePeriodsize = request.query().get("nodeDeduplicationCache.size");
    auto pauseCompaction = request.query().get("pauseCompaction");
    auto compactionPeriodretryCount = request.query().get("compaction.retryCount");
    auto compactionPeriodforcePeriodtimeout = request.query().get("compaction.force.timeout");
    auto compactionPeriodsizeDeltaEstimation = request.query().get("compaction.sizeDeltaEstimation");
    auto compactionPerioddisableEstimation = request.query().get("compaction.disableEstimation");
    auto compactionPeriodretainedGenerations = request.query().get("compaction.retainedGenerations");
    auto compactionPeriodmemoryThreshold = request.query().get("compaction.memoryThreshold");
    auto compactionPeriodprogressLog = request.query().get("compaction.progressLog");
    auto standby = request.query().get("standby");
    auto customBlobStore = request.query().get("customBlobStore");
    auto customSegmentStore = request.query().get("customSegmentStore");
    auto splitPersistence = request.query().get("splitPersistence");
    auto repositoryPeriodbackupPerioddir = request.query().get("repository.backup.dir");
    auto blobGcMaxAgeInSecs = request.query().get("blobGcMaxAgeInSecs");
    auto blobTrackSnapshotIntervalInSecs = request.query().get("blobTrackSnapshotIntervalInSecs");
    
    try {
      this->org_apache_jackrabbit_oak_segment_segment_node_store_service(post, apply, delete, action, Dollarlocation, propertylist, repositoryPeriodhome, tarmkPeriodmode, tarmkPeriodsize, segmentCachePeriodsize, stringCachePeriodsize, templateCachePeriodsize, stringDeduplicationCachePeriodsize, templateDeduplicationCachePeriodsize, nodeDeduplicationCachePeriodsize, pauseCompaction, compactionPeriodretryCount, compactionPeriodforcePeriodtimeout, compactionPeriodsizeDeltaEstimation, compactionPerioddisableEstimation, compactionPeriodretainedGenerations, compactionPeriodmemoryThreshold, compactionPeriodprogressLog, standby, customBlobStore, customSegmentStore, splitPersistence, repositoryPeriodbackupPerioddir, blobGcMaxAgeInSecs, blobTrackSnapshotIntervalInSecs, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_jackrabbit_oak_segment_standby_store_standby_store_service_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto orgPeriodapachePeriodslingPeriodinstallerPeriodconfigurationPeriodpersist = request.query().get("org.apache.sling.installer.configuration.persist");
    auto mode = request.query().get("mode");
    auto port = request.query().get("port");
    auto primaryPeriodhost = request.query().get("primary.host");
    auto interval = request.query().get("interval");
    auto primaryPeriodallowedClientIpRanges = request.query().get("primary.allowed-client-ip-ranges");
    auto secure = request.query().get("secure");
    auto standbyPeriodreadtimeout = request.query().get("standby.readtimeout");
    auto standbyPeriodautoclean = request.query().get("standby.autoclean");
    
    try {
      this->org_apache_jackrabbit_oak_segment_standby_store_standby_store_service(post, apply, delete, action, Dollarlocation, propertylist, orgPeriodapachePeriodslingPeriodinstallerPeriodconfigurationPeriodpersist, mode, port, primaryPeriodhost, interval, primaryPeriodallowedClientIpRanges, secure, standbyPeriodreadtimeout, standbyPeriodautoclean, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_jackrabbit_oak_spi_security_authentication_external_impl_de_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto handlerPeriodname = request.query().get("handler.name");
    auto userPeriodexpirationTime = request.query().get("user.expirationTime");
    auto userPeriodautoMembership = request.query().get("user.autoMembership");
    auto userPeriodpropertyMapping = request.query().get("user.propertyMapping");
    auto userPeriodpathPrefix = request.query().get("user.pathPrefix");
    auto userPeriodmembershipExpTime = request.query().get("user.membershipExpTime");
    auto userPeriodmembershipNestingDepth = request.query().get("user.membershipNestingDepth");
    auto userPerioddynamicMembership = request.query().get("user.dynamicMembership");
    auto userPerioddisableMissing = request.query().get("user.disableMissing");
    auto groupPeriodexpirationTime = request.query().get("group.expirationTime");
    auto groupPeriodautoMembership = request.query().get("group.autoMembership");
    auto groupPeriodpropertyMapping = request.query().get("group.propertyMapping");
    auto groupPeriodpathPrefix = request.query().get("group.pathPrefix");
    auto enableRFC7613UsercaseMappedProfile = request.query().get("enableRFC7613UsercaseMappedProfile");
    
    try {
      this->org_apache_jackrabbit_oak_spi_security_authentication_external_impl_de(post, apply, delete, action, Dollarlocation, propertylist, handlerPeriodname, userPeriodexpirationTime, userPeriodautoMembership, userPeriodpropertyMapping, userPeriodpathPrefix, userPeriodmembershipExpTime, userPeriodmembershipNestingDepth, userPerioddynamicMembership, userPerioddisableMissing, groupPeriodexpirationTime, groupPeriodautoMembership, groupPeriodpropertyMapping, groupPeriodpathPrefix, enableRFC7613UsercaseMappedProfile, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_jackrabbit_oak_spi_security_authentication_external_impl_ex_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto jaasPeriodranking = request.query().get("jaas.ranking");
    auto jaasPeriodcontrolFlag = request.query().get("jaas.controlFlag");
    auto jaasPeriodrealmName = request.query().get("jaas.realmName");
    auto idpPeriodname = request.query().get("idp.name");
    auto syncPeriodhandlerName = request.query().get("sync.handlerName");
    
    try {
      this->org_apache_jackrabbit_oak_spi_security_authentication_external_impl_ex(post, apply, delete, action, Dollarlocation, propertylist, jaasPeriodranking, jaasPeriodcontrolFlag, jaasPeriodrealmName, idpPeriodname, syncPeriodhandlerName, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_jackrabbit_oak_spi_security_authentication_external_impl_pr_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto protectExternalId = request.query().get("protectExternalId");
    
    try {
      this->org_apache_jackrabbit_oak_spi_security_authentication_external_impl_pr(post, apply, delete, action, Dollarlocation, propertylist, protectExternalId, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_confi_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto cugSupportedPaths = request.query().get("cugSupportedPaths");
    auto cugEnabled = request.query().get("cugEnabled");
    auto configurationRanking = request.query().get("configurationRanking");
    
    try {
      this->org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_confi(post, apply, delete, action, Dollarlocation, propertylist, cugSupportedPaths, cugEnabled, configurationRanking, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_exclu_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto principalNames = request.query().get("principalNames");
    
    try {
      this->org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_exclu(post, apply, delete, action, Dollarlocation, propertylist, principalNames, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_jackrabbit_oak_spi_security_user_action_default_authorizable_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto enabledActions = request.query().get("enabledActions");
    auto userPrivilegeNames = request.query().get("userPrivilegeNames");
    auto groupPrivilegeNames = request.query().get("groupPrivilegeNames");
    auto constraint = request.query().get("constraint");
    
    try {
      this->org_apache_jackrabbit_oak_spi_security_user_action_default_authorizable(post, apply, delete, action, Dollarlocation, propertylist, enabledActions, userPrivilegeNames, groupPrivilegeNames, constraint, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_jackrabbit_vault_packaging_impl_packaging_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto packageRoots = request.query().get("packageRoots");
    
    try {
      this->org_apache_jackrabbit_vault_packaging_impl_packaging_impl(post, apply, delete, action, Dollarlocation, propertylist, packageRoots, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_jackrabbit_vault_packaging_registry_impl_fs_package_registry_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto homePath = request.query().get("homePath");
    
    try {
      this->org_apache_jackrabbit_vault_packaging_registry_impl_fs_package_registry(post, apply, delete, action, Dollarlocation, propertylist, homePath, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_auth_core_impl_logout_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto slingPeriodservletPeriodmethods = request.query().get("sling.servlet.methods");
    auto slingPeriodservletPeriodpaths = request.query().get("sling.servlet.paths");
    
    try {
      this->org_apache_sling_auth_core_impl_logout_servlet(post, apply, delete, action, Dollarlocation, propertylist, slingPeriodservletPeriodmethods, slingPeriodservletPeriodpaths, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_caconfig_impl_configuration_bindings_value_provider_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto enabled = request.query().get("enabled");
    
    try {
      this->org_apache_sling_caconfig_impl_configuration_bindings_value_provider(post, apply, delete, action, Dollarlocation, propertylist, enabled, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_caconfig_impl_configuration_resolver_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto configBucketNames = request.query().get("configBucketNames");
    
    try {
      this->org_apache_sling_caconfig_impl_configuration_resolver_impl(post, apply, delete, action, Dollarlocation, propertylist, configBucketNames, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_caconfig_impl_def_default_configuration_inheritance_stra_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto enabled = request.query().get("enabled");
    auto configPropertyInheritancePropertyNames = request.query().get("configPropertyInheritancePropertyNames");
    
    try {
      this->org_apache_sling_caconfig_impl_def_default_configuration_inheritance_stra(post, apply, delete, action, Dollarlocation, propertylist, enabled, configPropertyInheritancePropertyNames, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_caconfig_impl_def_default_configuration_persistence_stra_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto enabled = request.query().get("enabled");
    
    try {
      this->org_apache_sling_caconfig_impl_def_default_configuration_persistence_stra(post, apply, delete, action, Dollarlocation, propertylist, enabled, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_caconfig_impl_override_osgi_configuration_override_provi_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto description = request.query().get("description");
    auto overrides = request.query().get("overrides");
    auto enabled = request.query().get("enabled");
    auto servicePeriodranking = request.query().get("service.ranking");
    
    try {
      this->org_apache_sling_caconfig_impl_override_osgi_configuration_override_provi(post, apply, delete, action, Dollarlocation, propertylist, description, overrides, enabled, servicePeriodranking, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_caconfig_impl_override_system_property_configuration_ove_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto enabled = request.query().get("enabled");
    auto servicePeriodranking = request.query().get("service.ranking");
    
    try {
      this->org_apache_sling_caconfig_impl_override_system_property_configuration_ove(post, apply, delete, action, Dollarlocation, propertylist, enabled, servicePeriodranking, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_caconfig_management_impl_configuration_management_setti_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto ignorePropertyNameRegex = request.query().get("ignorePropertyNameRegex");
    auto configCollectionPropertiesResourceNames = request.query().get("configCollectionPropertiesResourceNames");
    
    try {
      this->org_apache_sling_caconfig_management_impl_configuration_management_setti(post, apply, delete, action, Dollarlocation, propertylist, ignorePropertyNameRegex, configCollectionPropertiesResourceNames, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_caconfig_resource_impl_def_default_configuration_resour_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto enabled = request.query().get("enabled");
    auto configPath = request.query().get("configPath");
    auto fallbackPaths = request.query().get("fallbackPaths");
    auto configCollectionInheritancePropertyNames = request.query().get("configCollectionInheritancePropertyNames");
    
    try {
      this->org_apache_sling_caconfig_resource_impl_def_default_configuration_resour(post, apply, delete, action, Dollarlocation, propertylist, enabled, configPath, fallbackPaths, configCollectionInheritancePropertyNames, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_caconfig_resource_impl_def_default_context_path_strategy_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto enabled = request.query().get("enabled");
    auto configRefResourceNames = request.query().get("configRefResourceNames");
    auto configRefPropertyNames = request.query().get("configRefPropertyNames");
    auto servicePeriodranking = request.query().get("service.ranking");
    
    try {
      this->org_apache_sling_caconfig_resource_impl_def_default_context_path_strategy(post, apply, delete, action, Dollarlocation, propertylist, enabled, configRefResourceNames, configRefPropertyNames, servicePeriodranking, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_commons_html_internal_tagsoup_html_parser_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto parserPeriodfeatures = request.query().get("parser.features");
    
    try {
      this->org_apache_sling_commons_html_internal_tagsoup_html_parser(post, apply, delete, action, Dollarlocation, propertylist, parserPeriodfeatures, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_commons_log_log_manager_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodlevel = request.query().get("org.apache.sling.commons.log.level");
    auto orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile = request.query().get("org.apache.sling.commons.log.file");
    auto orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodnumber = request.query().get("org.apache.sling.commons.log.file.number");
    auto orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodsize = request.query().get("org.apache.sling.commons.log.file.size");
    auto orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpattern = request.query().get("org.apache.sling.commons.log.pattern");
    auto orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodconfigurationFile = request.query().get("org.apache.sling.commons.log.configurationFile");
    auto orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpackagingDataEnabled = request.query().get("org.apache.sling.commons.log.packagingDataEnabled");
    auto orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodmaxCallerDataDepth = request.query().get("org.apache.sling.commons.log.maxCallerDataDepth");
    auto orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodmaxOldFileCountInDump = request.query().get("org.apache.sling.commons.log.maxOldFileCountInDump");
    auto orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodnumOfLines = request.query().get("org.apache.sling.commons.log.numOfLines");
    
    try {
      this->org_apache_sling_commons_log_log_manager(post, apply, delete, action, Dollarlocation, propertylist, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodlevel, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodnumber, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodsize, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpattern, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodconfigurationFile, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpackagingDataEnabled, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodmaxCallerDataDepth, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodmaxOldFileCountInDump, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodnumOfLines, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_commons_log_log_manager_factory_config_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodlevel = request.query().get("org.apache.sling.commons.log.level");
    auto orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile = request.query().get("org.apache.sling.commons.log.file");
    auto orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpattern = request.query().get("org.apache.sling.commons.log.pattern");
    auto orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodnames = request.query().get("org.apache.sling.commons.log.names");
    auto orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodadditiv = request.query().get("org.apache.sling.commons.log.additiv");
    
    try {
      this->org_apache_sling_commons_log_log_manager_factory_config(post, apply, delete, action, Dollarlocation, propertylist, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodlevel, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpattern, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodnames, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodadditiv, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_commons_log_log_manager_factory_writer_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile = request.query().get("org.apache.sling.commons.log.file");
    auto orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodnumber = request.query().get("org.apache.sling.commons.log.file.number");
    auto orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodsize = request.query().get("org.apache.sling.commons.log.file.size");
    auto orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodbuffered = request.query().get("org.apache.sling.commons.log.file.buffered");
    
    try {
      this->org_apache_sling_commons_log_log_manager_factory_writer(post, apply, delete, action, Dollarlocation, propertylist, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodnumber, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodsize, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodbuffered, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_commons_metrics_internal_log_reporter_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto period = request.query().get("period");
    auto timeUnit = request.query().get("timeUnit");
    auto level = request.query().get("level");
    auto loggerName = request.query().get("loggerName");
    auto prefix = request.query().get("prefix");
    auto pattern = request.query().get("pattern");
    auto registryName = request.query().get("registryName");
    
    try {
      this->org_apache_sling_commons_metrics_internal_log_reporter(post, apply, delete, action, Dollarlocation, propertylist, period, timeUnit, level, loggerName, prefix, pattern, registryName, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_commons_metrics_rrd4j_impl_codahale_metrics_reporter_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto datasources = request.query().get("datasources");
    auto step = request.query().get("step");
    auto archives = request.query().get("archives");
    auto path = request.query().get("path");
    
    try {
      this->org_apache_sling_commons_metrics_rrd4j_impl_codahale_metrics_reporter(post, apply, delete, action, Dollarlocation, propertylist, datasources, step, archives, path, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_commons_mime_internal_mime_type_service_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto mimePeriodtypes = request.query().get("mime.types");
    
    try {
      this->org_apache_sling_commons_mime_internal_mime_type_service_impl(post, apply, delete, action, Dollarlocation, propertylist, mimePeriodtypes, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_commons_scheduler_impl_quartz_scheduler_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto poolName = request.query().get("poolName");
    auto allowedPoolNames = request.query().get("allowedPoolNames");
    auto schedulerPerioduseleaderforsingle = request.query().get("scheduler.useleaderforsingle");
    auto metricsPeriodfilters = request.query().get("metrics.filters");
    auto slowThresholdMillis = request.query().get("slowThresholdMillis");
    
    try {
      this->org_apache_sling_commons_scheduler_impl_quartz_scheduler(post, apply, delete, action, Dollarlocation, propertylist, poolName, allowedPoolNames, schedulerPerioduseleaderforsingle, metricsPeriodfilters, slowThresholdMillis, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_commons_scheduler_impl_scheduler_health_check_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto maxPeriodquartzJobPerioddurationPeriodacceptable = request.query().get("max.quartzJob.duration.acceptable");
    
    try {
      this->org_apache_sling_commons_scheduler_impl_scheduler_health_check(post, apply, delete, action, Dollarlocation, propertylist, maxPeriodquartzJobPerioddurationPeriodacceptable, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_commons_threads_impl_default_thread_pool_factory_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto name = request.query().get("name");
    auto minPoolSize = request.query().get("minPoolSize");
    auto maxPoolSize = request.query().get("maxPoolSize");
    auto queueSize = request.query().get("queueSize");
    auto maxThreadAge = request.query().get("maxThreadAge");
    auto keepAliveTime = request.query().get("keepAliveTime");
    auto blockPolicy = request.query().get("blockPolicy");
    auto shutdownGraceful = request.query().get("shutdownGraceful");
    auto daemon = request.query().get("daemon");
    auto shutdownWaitTime = request.query().get("shutdownWaitTime");
    auto priority = request.query().get("priority");
    
    try {
      this->org_apache_sling_commons_threads_impl_default_thread_pool_factory(post, apply, delete, action, Dollarlocation, propertylist, name, minPoolSize, maxPoolSize, queueSize, maxThreadAge, keepAliveTime, blockPolicy, shutdownGraceful, daemon, shutdownWaitTime, priority, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_datasource_data_source_factory_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto datasourcePeriodname = request.query().get("datasource.name");
    auto datasourcePeriodsvcPeriodpropPeriodname = request.query().get("datasource.svc.prop.name");
    auto driverClassName = request.query().get("driverClassName");
    auto url = request.query().get("url");
    auto username = request.query().get("username");
    auto password = request.query().get("password");
    auto defaultAutoCommit = request.query().get("defaultAutoCommit");
    auto defaultReadOnly = request.query().get("defaultReadOnly");
    auto defaultTransactionIsolation = request.query().get("defaultTransactionIsolation");
    auto defaultCatalog = request.query().get("defaultCatalog");
    auto maxActive = request.query().get("maxActive");
    auto maxIdle = request.query().get("maxIdle");
    auto minIdle = request.query().get("minIdle");
    auto initialSize = request.query().get("initialSize");
    auto maxWait = request.query().get("maxWait");
    auto maxAge = request.query().get("maxAge");
    auto testOnBorrow = request.query().get("testOnBorrow");
    auto testOnReturn = request.query().get("testOnReturn");
    auto testWhileIdle = request.query().get("testWhileIdle");
    auto validationQuery = request.query().get("validationQuery");
    auto validationQueryTimeout = request.query().get("validationQueryTimeout");
    auto timeBetweenEvictionRunsMillis = request.query().get("timeBetweenEvictionRunsMillis");
    auto minEvictableIdleTimeMillis = request.query().get("minEvictableIdleTimeMillis");
    auto connectionProperties = request.query().get("connectionProperties");
    auto initSQL = request.query().get("initSQL");
    auto jdbcInterceptors = request.query().get("jdbcInterceptors");
    auto validationInterval = request.query().get("validationInterval");
    auto logValidationErrors = request.query().get("logValidationErrors");
    auto datasourcePeriodsvcPeriodproperties = request.query().get("datasource.svc.properties");
    
    try {
      this->org_apache_sling_datasource_data_source_factory(post, apply, delete, action, Dollarlocation, propertylist, datasourcePeriodname, datasourcePeriodsvcPeriodpropPeriodname, driverClassName, url, username, password, defaultAutoCommit, defaultReadOnly, defaultTransactionIsolation, defaultCatalog, maxActive, maxIdle, minIdle, initialSize, maxWait, maxAge, testOnBorrow, testOnReturn, testWhileIdle, validationQuery, validationQueryTimeout, timeBetweenEvictionRunsMillis, minEvictableIdleTimeMillis, connectionProperties, initSQL, jdbcInterceptors, validationInterval, logValidationErrors, datasourcePeriodsvcPeriodproperties, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_datasource_jndi_data_source_factory_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto datasourcePeriodname = request.query().get("datasource.name");
    auto datasourcePeriodsvcPeriodpropPeriodname = request.query().get("datasource.svc.prop.name");
    auto datasourcePeriodjndiPeriodname = request.query().get("datasource.jndi.name");
    auto jndiPeriodproperties = request.query().get("jndi.properties");
    
    try {
      this->org_apache_sling_datasource_jndi_data_source_factory(post, apply, delete, action, Dollarlocation, propertylist, datasourcePeriodname, datasourcePeriodsvcPeriodpropPeriodname, datasourcePeriodjndiPeriodname, jndiPeriodproperties, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_discovery_oak_config_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto connectorPingTimeout = request.query().get("connectorPingTimeout");
    auto connectorPingInterval = request.query().get("connectorPingInterval");
    auto discoveryLiteCheckInterval = request.query().get("discoveryLiteCheckInterval");
    auto clusterSyncServiceTimeout = request.query().get("clusterSyncServiceTimeout");
    auto clusterSyncServiceInterval = request.query().get("clusterSyncServiceInterval");
    auto enableSyncToken = request.query().get("enableSyncToken");
    auto minEventDelay = request.query().get("minEventDelay");
    auto socketConnectTimeout = request.query().get("socketConnectTimeout");
    auto soTimeout = request.query().get("soTimeout");
    auto topologyConnectorUrls = request.query().get("topologyConnectorUrls");
    auto topologyConnectorWhitelist = request.query().get("topologyConnectorWhitelist");
    auto autoStopLocalLoopEnabled = request.query().get("autoStopLocalLoopEnabled");
    auto gzipConnectorRequestsEnabled = request.query().get("gzipConnectorRequestsEnabled");
    auto hmacEnabled = request.query().get("hmacEnabled");
    auto enableEncryption = request.query().get("enableEncryption");
    auto sharedKey = request.query().get("sharedKey");
    auto hmacSharedKeyTTL = request.query().get("hmacSharedKeyTTL");
    auto backoffStandbyFactor = request.query().get("backoffStandbyFactor");
    auto backoffStableFactor = request.query().get("backoffStableFactor");
    
    try {
      this->org_apache_sling_discovery_oak_config(post, apply, delete, action, Dollarlocation, propertylist, connectorPingTimeout, connectorPingInterval, discoveryLiteCheckInterval, clusterSyncServiceTimeout, clusterSyncServiceInterval, enableSyncToken, minEventDelay, socketConnectTimeout, soTimeout, topologyConnectorUrls, topologyConnectorWhitelist, autoStopLocalLoopEnabled, gzipConnectorRequestsEnabled, hmacEnabled, enableEncryption, sharedKey, hmacSharedKeyTTL, backoffStandbyFactor, backoffStableFactor, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_discovery_oak_synchronized_clocks_health_check_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto hcPeriodname = request.query().get("hc.name");
    auto hcPeriodtags = request.query().get("hc.tags");
    auto hcPeriodmbeanPeriodname = request.query().get("hc.mbean.name");
    
    try {
      this->org_apache_sling_discovery_oak_synchronized_clocks_health_check(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodname, hcPeriodtags, hcPeriodmbeanPeriodname, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_distribution_agent_impl_forward_distribution_agent_facto_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto name = request.query().get("name");
    auto title = request.query().get("title");
    auto details = request.query().get("details");
    auto enabled = request.query().get("enabled");
    auto serviceName = request.query().get("serviceName");
    auto logPeriodlevel = request.query().get("log.level");
    auto allowedPeriodroots = request.query().get("allowed.roots");
    auto queuePeriodprocessingPeriodenabled = request.query().get("queue.processing.enabled");
    auto packageImporterPeriodendpoints = request.query().get("packageImporter.endpoints");
    auto passiveQueues = request.query().get("passiveQueues");
    auto priorityQueues = request.query().get("priorityQueues");
    auto retryPeriodstrategy = request.query().get("retry.strategy");
    auto retryPeriodattempts = request.query().get("retry.attempts");
    auto requestAuthorizationStrategyPeriodtarget = request.query().get("requestAuthorizationStrategy.target");
    auto transportSecretProviderPeriodtarget = request.query().get("transportSecretProvider.target");
    auto packageBuilderPeriodtarget = request.query().get("packageBuilder.target");
    auto triggersPeriodtarget = request.query().get("triggers.target");
    auto queuePeriodprovider = request.query().get("queue.provider");
    auto asyncPerioddelivery = request.query().get("async.delivery");
    auto httpPeriodconnPeriodtimeout = request.query().get("http.conn.timeout");
    
    try {
      this->org_apache_sling_distribution_agent_impl_forward_distribution_agent_facto(post, apply, delete, action, Dollarlocation, propertylist, name, title, details, enabled, serviceName, logPeriodlevel, allowedPeriodroots, queuePeriodprocessingPeriodenabled, packageImporterPeriodendpoints, passiveQueues, priorityQueues, retryPeriodstrategy, retryPeriodattempts, requestAuthorizationStrategyPeriodtarget, transportSecretProviderPeriodtarget, packageBuilderPeriodtarget, triggersPeriodtarget, queuePeriodprovider, asyncPerioddelivery, httpPeriodconnPeriodtimeout, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_distribution_agent_impl_privilege_distribution_request_a_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto name = request.query().get("name");
    auto jcrPrivilege = request.query().get("jcrPrivilege");
    
    try {
      this->org_apache_sling_distribution_agent_impl_privilege_distribution_request_a(post, apply, delete, action, Dollarlocation, propertylist, name, jcrPrivilege, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_distribution_agent_impl_queue_distribution_agent_factory_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto name = request.query().get("name");
    auto title = request.query().get("title");
    auto details = request.query().get("details");
    auto enabled = request.query().get("enabled");
    auto serviceName = request.query().get("serviceName");
    auto logPeriodlevel = request.query().get("log.level");
    auto allowedPeriodroots = request.query().get("allowed.roots");
    auto requestAuthorizationStrategyPeriodtarget = request.query().get("requestAuthorizationStrategy.target");
    auto queueProviderFactoryPeriodtarget = request.query().get("queueProviderFactory.target");
    auto packageBuilderPeriodtarget = request.query().get("packageBuilder.target");
    auto triggersPeriodtarget = request.query().get("triggers.target");
    auto priorityQueues = request.query().get("priorityQueues");
    
    try {
      this->org_apache_sling_distribution_agent_impl_queue_distribution_agent_factory(post, apply, delete, action, Dollarlocation, propertylist, name, title, details, enabled, serviceName, logPeriodlevel, allowedPeriodroots, requestAuthorizationStrategyPeriodtarget, queueProviderFactoryPeriodtarget, packageBuilderPeriodtarget, triggersPeriodtarget, priorityQueues, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_distribution_agent_impl_reverse_distribution_agent_facto_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto name = request.query().get("name");
    auto title = request.query().get("title");
    auto details = request.query().get("details");
    auto enabled = request.query().get("enabled");
    auto serviceName = request.query().get("serviceName");
    auto logPeriodlevel = request.query().get("log.level");
    auto queuePeriodprocessingPeriodenabled = request.query().get("queue.processing.enabled");
    auto packageExporterPeriodendpoints = request.query().get("packageExporter.endpoints");
    auto pullPerioditems = request.query().get("pull.items");
    auto httpPeriodconnPeriodtimeout = request.query().get("http.conn.timeout");
    auto requestAuthorizationStrategyPeriodtarget = request.query().get("requestAuthorizationStrategy.target");
    auto transportSecretProviderPeriodtarget = request.query().get("transportSecretProvider.target");
    auto packageBuilderPeriodtarget = request.query().get("packageBuilder.target");
    auto triggersPeriodtarget = request.query().get("triggers.target");
    
    try {
      this->org_apache_sling_distribution_agent_impl_reverse_distribution_agent_facto(post, apply, delete, action, Dollarlocation, propertylist, name, title, details, enabled, serviceName, logPeriodlevel, queuePeriodprocessingPeriodenabled, packageExporterPeriodendpoints, pullPerioditems, httpPeriodconnPeriodtimeout, requestAuthorizationStrategyPeriodtarget, transportSecretProviderPeriodtarget, packageBuilderPeriodtarget, triggersPeriodtarget, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_distribution_agent_impl_simple_distribution_agent_factor_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto name = request.query().get("name");
    auto title = request.query().get("title");
    auto details = request.query().get("details");
    auto enabled = request.query().get("enabled");
    auto serviceName = request.query().get("serviceName");
    auto logPeriodlevel = request.query().get("log.level");
    auto queuePeriodprocessingPeriodenabled = request.query().get("queue.processing.enabled");
    auto packageExporterPeriodtarget = request.query().get("packageExporter.target");
    auto packageImporterPeriodtarget = request.query().get("packageImporter.target");
    auto requestAuthorizationStrategyPeriodtarget = request.query().get("requestAuthorizationStrategy.target");
    auto triggersPeriodtarget = request.query().get("triggers.target");
    
    try {
      this->org_apache_sling_distribution_agent_impl_simple_distribution_agent_factor(post, apply, delete, action, Dollarlocation, propertylist, name, title, details, enabled, serviceName, logPeriodlevel, queuePeriodprocessingPeriodenabled, packageExporterPeriodtarget, packageImporterPeriodtarget, requestAuthorizationStrategyPeriodtarget, triggersPeriodtarget, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_distribution_agent_impl_sync_distribution_agent_factory_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto name = request.query().get("name");
    auto title = request.query().get("title");
    auto details = request.query().get("details");
    auto enabled = request.query().get("enabled");
    auto serviceName = request.query().get("serviceName");
    auto logPeriodlevel = request.query().get("log.level");
    auto queuePeriodprocessingPeriodenabled = request.query().get("queue.processing.enabled");
    auto passiveQueues = request.query().get("passiveQueues");
    auto packageExporterPeriodendpoints = request.query().get("packageExporter.endpoints");
    auto packageImporterPeriodendpoints = request.query().get("packageImporter.endpoints");
    auto retryPeriodstrategy = request.query().get("retry.strategy");
    auto retryPeriodattempts = request.query().get("retry.attempts");
    auto pullPerioditems = request.query().get("pull.items");
    auto httpPeriodconnPeriodtimeout = request.query().get("http.conn.timeout");
    auto requestAuthorizationStrategyPeriodtarget = request.query().get("requestAuthorizationStrategy.target");
    auto transportSecretProviderPeriodtarget = request.query().get("transportSecretProvider.target");
    auto packageBuilderPeriodtarget = request.query().get("packageBuilder.target");
    auto triggersPeriodtarget = request.query().get("triggers.target");
    
    try {
      this->org_apache_sling_distribution_agent_impl_sync_distribution_agent_factory(post, apply, delete, action, Dollarlocation, propertylist, name, title, details, enabled, serviceName, logPeriodlevel, queuePeriodprocessingPeriodenabled, passiveQueues, packageExporterPeriodendpoints, packageImporterPeriodendpoints, retryPeriodstrategy, retryPeriodattempts, pullPerioditems, httpPeriodconnPeriodtimeout, requestAuthorizationStrategyPeriodtarget, transportSecretProviderPeriodtarget, packageBuilderPeriodtarget, triggersPeriodtarget, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_distribution_monitor_distribution_queue_health_check_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto hcPeriodname = request.query().get("hc.name");
    auto hcPeriodtags = request.query().get("hc.tags");
    auto hcPeriodmbeanPeriodname = request.query().get("hc.mbean.name");
    auto numberOfRetriesAllowed = request.query().get("numberOfRetriesAllowed");
    
    try {
      this->org_apache_sling_distribution_monitor_distribution_queue_health_check(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodname, hcPeriodtags, hcPeriodmbeanPeriodname, numberOfRetriesAllowed, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_distribution_packaging_impl_exporter_agent_distributio_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto name = request.query().get("name");
    auto queue = request.query().get("queue");
    auto dropPeriodinvalidPerioditems = request.query().get("drop.invalid.items");
    auto agentPeriodtarget = request.query().get("agent.target");
    
    try {
      this->org_apache_sling_distribution_packaging_impl_exporter_agent_distributio(post, apply, delete, action, Dollarlocation, propertylist, name, queue, dropPeriodinvalidPerioditems, agentPeriodtarget, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_distribution_packaging_impl_exporter_local_distributio_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto name = request.query().get("name");
    auto packageBuilderPeriodtarget = request.query().get("packageBuilder.target");
    
    try {
      this->org_apache_sling_distribution_packaging_impl_exporter_local_distributio(post, apply, delete, action, Dollarlocation, propertylist, name, packageBuilderPeriodtarget, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_distribution_packaging_impl_exporter_remote_distributi_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto name = request.query().get("name");
    auto endpoints = request.query().get("endpoints");
    auto pullPerioditems = request.query().get("pull.items");
    auto packageBuilderPeriodtarget = request.query().get("packageBuilder.target");
    auto transportSecretProviderPeriodtarget = request.query().get("transportSecretProvider.target");
    
    try {
      this->org_apache_sling_distribution_packaging_impl_exporter_remote_distributi(post, apply, delete, action, Dollarlocation, propertylist, name, endpoints, pullPerioditems, packageBuilderPeriodtarget, transportSecretProviderPeriodtarget, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_distribution_packaging_impl_importer_local_distributio_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto name = request.query().get("name");
    auto packageBuilderPeriodtarget = request.query().get("packageBuilder.target");
    
    try {
      this->org_apache_sling_distribution_packaging_impl_importer_local_distributio(post, apply, delete, action, Dollarlocation, propertylist, name, packageBuilderPeriodtarget, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_distribution_packaging_impl_importer_remote_distributi_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto name = request.query().get("name");
    auto endpoints = request.query().get("endpoints");
    auto transportSecretProviderPeriodtarget = request.query().get("transportSecretProvider.target");
    
    try {
      this->org_apache_sling_distribution_packaging_impl_importer_remote_distributi(post, apply, delete, action, Dollarlocation, propertylist, name, endpoints, transportSecretProviderPeriodtarget, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_distribution_packaging_impl_importer_repository_distri_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto name = request.query().get("name");
    auto servicePeriodname = request.query().get("service.name");
    auto path = request.query().get("path");
    auto privilegePeriodname = request.query().get("privilege.name");
    
    try {
      this->org_apache_sling_distribution_packaging_impl_importer_repository_distri(post, apply, delete, action, Dollarlocation, propertylist, name, servicePeriodname, path, privilegePeriodname, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_distribution_resources_impl_distribution_configuration_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto providerPeriodroots = request.query().get("provider.roots");
    auto kind = request.query().get("kind");
    
    try {
      this->org_apache_sling_distribution_resources_impl_distribution_configuration(post, apply, delete, action, Dollarlocation, propertylist, providerPeriodroots, kind, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_distribution_resources_impl_distribution_service_resour_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto providerPeriodroots = request.query().get("provider.roots");
    auto kind = request.query().get("kind");
    
    try {
      this->org_apache_sling_distribution_resources_impl_distribution_service_resour(post, apply, delete, action, Dollarlocation, propertylist, providerPeriodroots, kind, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_distribution_serialization_impl_distribution_package_bu_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto name = request.query().get("name");
    auto type = request.query().get("type");
    auto formatPeriodtarget = request.query().get("format.target");
    auto tempFsFolder = request.query().get("tempFsFolder");
    auto fileThreshold = request.query().get("fileThreshold");
    auto memoryUnit = request.query().get("memoryUnit");
    auto useOffHeapMemory = request.query().get("useOffHeapMemory");
    auto digestAlgorithm = request.query().get("digestAlgorithm");
    auto monitoringQueueSize = request.query().get("monitoringQueueSize");
    auto cleanupDelay = request.query().get("cleanupDelay");
    auto packagePeriodfilters = request.query().get("package.filters");
    auto propertyPeriodfilters = request.query().get("property.filters");
    
    try {
      this->org_apache_sling_distribution_serialization_impl_distribution_package_bu(post, apply, delete, action, Dollarlocation, propertylist, name, type, formatPeriodtarget, tempFsFolder, fileThreshold, memoryUnit, useOffHeapMemory, digestAlgorithm, monitoringQueueSize, cleanupDelay, packagePeriodfilters, propertyPeriodfilters, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_distribution_serialization_impl_vlt_vault_distribution_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto name = request.query().get("name");
    auto type = request.query().get("type");
    auto importMode = request.query().get("importMode");
    auto aclHandling = request.query().get("aclHandling");
    auto packagePeriodroots = request.query().get("package.roots");
    auto packagePeriodfilters = request.query().get("package.filters");
    auto propertyPeriodfilters = request.query().get("property.filters");
    auto tempFsFolder = request.query().get("tempFsFolder");
    auto useBinaryReferences = request.query().get("useBinaryReferences");
    auto autoSaveThreshold = request.query().get("autoSaveThreshold");
    auto cleanupDelay = request.query().get("cleanupDelay");
    auto fileThreshold = request.query().get("fileThreshold");
    auto mEGABYTES = request.query().get("MEGA_BYTES");
    auto useOffHeapMemory = request.query().get("useOffHeapMemory");
    auto digestAlgorithm = request.query().get("digestAlgorithm");
    auto monitoringQueueSize = request.query().get("monitoringQueueSize");
    auto pathsMapping = request.query().get("pathsMapping");
    auto strictImport = request.query().get("strictImport");
    
    try {
      this->org_apache_sling_distribution_serialization_impl_vlt_vault_distribution(post, apply, delete, action, Dollarlocation, propertylist, name, type, importMode, aclHandling, packagePeriodroots, packagePeriodfilters, propertyPeriodfilters, tempFsFolder, useBinaryReferences, autoSaveThreshold, cleanupDelay, fileThreshold, mEGABYTES, useOffHeapMemory, digestAlgorithm, monitoringQueueSize, pathsMapping, strictImport, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_distribution_transport_impl_user_credentials_distributi_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto name = request.query().get("name");
    auto username = request.query().get("username");
    auto password = request.query().get("password");
    
    try {
      this->org_apache_sling_distribution_transport_impl_user_credentials_distributi(post, apply, delete, action, Dollarlocation, propertylist, name, username, password, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_distribution_trigger_impl_distribution_event_distribute_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto name = request.query().get("name");
    auto path = request.query().get("path");
    
    try {
      this->org_apache_sling_distribution_trigger_impl_distribution_event_distribute(post, apply, delete, action, Dollarlocation, propertylist, name, path, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_distribution_trigger_impl_jcr_event_distribution_trigger_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto name = request.query().get("name");
    auto path = request.query().get("path");
    auto ignoredPathsPatterns = request.query().get("ignoredPathsPatterns");
    auto serviceName = request.query().get("serviceName");
    auto deep = request.query().get("deep");
    
    try {
      this->org_apache_sling_distribution_trigger_impl_jcr_event_distribution_trigger(post, apply, delete, action, Dollarlocation, propertylist, name, path, ignoredPathsPatterns, serviceName, deep, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_distribution_trigger_impl_persisted_jcr_event_distributi_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto name = request.query().get("name");
    auto path = request.query().get("path");
    auto serviceName = request.query().get("serviceName");
    auto nuggetsPath = request.query().get("nuggetsPath");
    
    try {
      this->org_apache_sling_distribution_trigger_impl_persisted_jcr_event_distributi(post, apply, delete, action, Dollarlocation, propertylist, name, path, serviceName, nuggetsPath, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_distribution_trigger_impl_remote_event_distribution_trig_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto name = request.query().get("name");
    auto endpoint = request.query().get("endpoint");
    auto transportSecretProviderPeriodtarget = request.query().get("transportSecretProvider.target");
    
    try {
      this->org_apache_sling_distribution_trigger_impl_remote_event_distribution_trig(post, apply, delete, action, Dollarlocation, propertylist, name, endpoint, transportSecretProviderPeriodtarget, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_distribution_trigger_impl_resource_event_distribution_tr_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto name = request.query().get("name");
    auto path = request.query().get("path");
    
    try {
      this->org_apache_sling_distribution_trigger_impl_resource_event_distribution_tr(post, apply, delete, action, Dollarlocation, propertylist, name, path, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_distribution_trigger_impl_scheduled_distribution_trigge_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto name = request.query().get("name");
    auto path = request.query().get("path");
    auto seconds = request.query().get("seconds");
    auto serviceName = request.query().get("serviceName");
    
    try {
      this->org_apache_sling_distribution_trigger_impl_scheduled_distribution_trigge(post, apply, delete, action, Dollarlocation, propertylist, name, path, seconds, serviceName, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_engine_impl_auth_sling_authenticator_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect = request.query().get("osgi.http.whiteboard.context.select");
    auto osgiPeriodhttpPeriodwhiteboardPeriodlistener = request.query().get("osgi.http.whiteboard.listener");
    auto authPeriodsudoPeriodcookie = request.query().get("auth.sudo.cookie");
    auto authPeriodsudoPeriodparameter = request.query().get("auth.sudo.parameter");
    auto authPeriodannonymous = request.query().get("auth.annonymous");
    auto slingPeriodauthPeriodrequirements = request.query().get("sling.auth.requirements");
    auto slingPeriodauthPeriodanonymousPerioduser = request.query().get("sling.auth.anonymous.user");
    auto slingPeriodauthPeriodanonymousPeriodpassword = request.query().get("sling.auth.anonymous.password");
    auto authPeriodhttp = request.query().get("auth.http");
    auto authPeriodhttpPeriodrealm = request.query().get("auth.http.realm");
    auto authPerioduriPeriodsuffix = request.query().get("auth.uri.suffix");
    
    try {
      this->org_apache_sling_engine_impl_auth_sling_authenticator(post, apply, delete, action, Dollarlocation, propertylist, osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect, osgiPeriodhttpPeriodwhiteboardPeriodlistener, authPeriodsudoPeriodcookie, authPeriodsudoPeriodparameter, authPeriodannonymous, slingPeriodauthPeriodrequirements, slingPeriodauthPeriodanonymousPerioduser, slingPeriodauthPeriodanonymousPeriodpassword, authPeriodhttp, authPeriodhttpPeriodrealm, authPerioduriPeriodsuffix, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_engine_impl_debug_request_progress_tracker_log_filter_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto extensions = request.query().get("extensions");
    auto minDurationMs = request.query().get("minDurationMs");
    auto maxDurationMs = request.query().get("maxDurationMs");
    auto compactLogFormat = request.query().get("compactLogFormat");
    
    try {
      this->org_apache_sling_engine_impl_debug_request_progress_tracker_log_filter(post, apply, delete, action, Dollarlocation, propertylist, extensions, minDurationMs, maxDurationMs, compactLogFormat, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_engine_impl_log_request_logger_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto requestPeriodlogPeriodoutput = request.query().get("request.log.output");
    auto requestPeriodlogPeriodoutputtype = request.query().get("request.log.outputtype");
    auto requestPeriodlogPeriodenabled = request.query().get("request.log.enabled");
    auto accessPeriodlogPeriodoutput = request.query().get("access.log.output");
    auto accessPeriodlogPeriodoutputtype = request.query().get("access.log.outputtype");
    auto accessPeriodlogPeriodenabled = request.query().get("access.log.enabled");
    
    try {
      this->org_apache_sling_engine_impl_log_request_logger(post, apply, delete, action, Dollarlocation, propertylist, requestPeriodlogPeriodoutput, requestPeriodlogPeriodoutputtype, requestPeriodlogPeriodenabled, accessPeriodlogPeriodoutput, accessPeriodlogPeriodoutputtype, accessPeriodlogPeriodenabled, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_engine_impl_log_request_logger_service_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto requestPeriodlogPeriodservicePeriodformat = request.query().get("request.log.service.format");
    auto requestPeriodlogPeriodservicePeriodoutput = request.query().get("request.log.service.output");
    auto requestPeriodlogPeriodservicePeriodoutputtype = request.query().get("request.log.service.outputtype");
    auto requestPeriodlogPeriodservicePeriodonentry = request.query().get("request.log.service.onentry");
    
    try {
      this->org_apache_sling_engine_impl_log_request_logger_service(post, apply, delete, action, Dollarlocation, propertylist, requestPeriodlogPeriodservicePeriodformat, requestPeriodlogPeriodservicePeriodoutput, requestPeriodlogPeriodservicePeriodoutputtype, requestPeriodlogPeriodservicePeriodonentry, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_engine_impl_sling_main_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto slingPeriodmaxPeriodcalls = request.query().get("sling.max.calls");
    auto slingPeriodmaxPeriodinclusions = request.query().get("sling.max.inclusions");
    auto slingPeriodtracePeriodallow = request.query().get("sling.trace.allow");
    auto slingPeriodmaxPeriodrecordPeriodrequests = request.query().get("sling.max.record.requests");
    auto slingPeriodstorePeriodpatternPeriodrequests = request.query().get("sling.store.pattern.requests");
    auto slingPeriodserverinfo = request.query().get("sling.serverinfo");
    auto slingPeriodadditionalPeriodresponsePeriodheaders = request.query().get("sling.additional.response.headers");
    
    try {
      this->org_apache_sling_engine_impl_sling_main_servlet(post, apply, delete, action, Dollarlocation, propertylist, slingPeriodmaxPeriodcalls, slingPeriodmaxPeriodinclusions, slingPeriodtracePeriodallow, slingPeriodmaxPeriodrecordPeriodrequests, slingPeriodstorePeriodpatternPeriodrequests, slingPeriodserverinfo, slingPeriodadditionalPeriodresponsePeriodheaders, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_engine_parameters_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto slingPerioddefaultPeriodparameterPeriodencoding = request.query().get("sling.default.parameter.encoding");
    auto slingPerioddefaultPeriodmaxPeriodparameters = request.query().get("sling.default.max.parameters");
    auto filePeriodlocation = request.query().get("file.location");
    auto filePeriodthreshold = request.query().get("file.threshold");
    auto filePeriodmax = request.query().get("file.max");
    auto requestPeriodmax = request.query().get("request.max");
    auto slingPerioddefaultPeriodparameterPeriodcheckForAdditionalContainerParameters = request.query().get("sling.default.parameter.checkForAdditionalContainerParameters");
    
    try {
      this->org_apache_sling_engine_parameters(post, apply, delete, action, Dollarlocation, propertylist, slingPerioddefaultPeriodparameterPeriodencoding, slingPerioddefaultPeriodmaxPeriodparameters, filePeriodlocation, filePeriodthreshold, filePeriodmax, requestPeriodmax, slingPerioddefaultPeriodparameterPeriodcheckForAdditionalContainerParameters, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_event_impl_eventing_thread_pool_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto minPoolSize = request.query().get("minPoolSize");
    
    try {
      this->org_apache_sling_event_impl_eventing_thread_pool(post, apply, delete, action, Dollarlocation, propertylist, minPoolSize, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_event_impl_jobs_default_job_manager_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto queuePeriodpriority = request.query().get("queue.priority");
    auto queuePeriodretries = request.query().get("queue.retries");
    auto queuePeriodretrydelay = request.query().get("queue.retrydelay");
    auto queuePeriodmaxparallel = request.query().get("queue.maxparallel");
    
    try {
      this->org_apache_sling_event_impl_jobs_default_job_manager(post, apply, delete, action, Dollarlocation, propertylist, queuePeriodpriority, queuePeriodretries, queuePeriodretrydelay, queuePeriodmaxparallel, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_event_impl_jobs_jcr_persistence_handler_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto jobPeriodconsumermanagerPerioddisableDistribution = request.query().get("job.consumermanager.disableDistribution");
    auto startupPerioddelay = request.query().get("startup.delay");
    auto cleanupPeriodperiod = request.query().get("cleanup.period");
    
    try {
      this->org_apache_sling_event_impl_jobs_jcr_persistence_handler(post, apply, delete, action, Dollarlocation, propertylist, jobPeriodconsumermanagerPerioddisableDistribution, startupPerioddelay, cleanupPeriodperiod, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_event_impl_jobs_job_consumer_manager_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto orgPeriodapachePeriodslingPeriodinstallerPeriodconfigurationPeriodpersist = request.query().get("org.apache.sling.installer.configuration.persist");
    auto jobPeriodconsumermanagerPeriodwhitelist = request.query().get("job.consumermanager.whitelist");
    auto jobPeriodconsumermanagerPeriodblacklist = request.query().get("job.consumermanager.blacklist");
    
    try {
      this->org_apache_sling_event_impl_jobs_job_consumer_manager(post, apply, delete, action, Dollarlocation, propertylist, orgPeriodapachePeriodslingPeriodinstallerPeriodconfigurationPeriodpersist, jobPeriodconsumermanagerPeriodwhitelist, jobPeriodconsumermanagerPeriodblacklist, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_event_jobs_queue_configuration_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto queuePeriodname = request.query().get("queue.name");
    auto queuePeriodtopics = request.query().get("queue.topics");
    auto queuePeriodtype = request.query().get("queue.type");
    auto queuePeriodpriority = request.query().get("queue.priority");
    auto queuePeriodretries = request.query().get("queue.retries");
    auto queuePeriodretrydelay = request.query().get("queue.retrydelay");
    auto queuePeriodmaxparallel = request.query().get("queue.maxparallel");
    auto queuePeriodkeepJobs = request.query().get("queue.keepJobs");
    auto queuePeriodpreferRunOnCreationInstance = request.query().get("queue.preferRunOnCreationInstance");
    auto queuePeriodthreadPoolSize = request.query().get("queue.threadPoolSize");
    auto servicePeriodranking = request.query().get("service.ranking");
    
    try {
      this->org_apache_sling_event_jobs_queue_configuration(post, apply, delete, action, Dollarlocation, propertylist, queuePeriodname, queuePeriodtopics, queuePeriodtype, queuePeriodpriority, queuePeriodretries, queuePeriodretrydelay, queuePeriodmaxparallel, queuePeriodkeepJobs, queuePeriodpreferRunOnCreationInstance, queuePeriodthreadPoolSize, servicePeriodranking, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_extensions_webconsolesecurityprovider_internal_sling_w_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto users = request.query().get("users");
    auto groups = request.query().get("groups");
    
    try {
      this->org_apache_sling_extensions_webconsolesecurityprovider_internal_sling_w(post, apply, delete, action, Dollarlocation, propertylist, users, groups, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_featureflags_feature_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto name = request.query().get("name");
    auto description = request.query().get("description");
    auto enabled = request.query().get("enabled");
    
    try {
      this->org_apache_sling_featureflags_feature(post, apply, delete, action, Dollarlocation, propertylist, name, description, enabled, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_featureflags_impl_configured_feature_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto name = request.query().get("name");
    auto description = request.query().get("description");
    auto enabled = request.query().get("enabled");
    
    try {
      this->org_apache_sling_featureflags_impl_configured_feature(post, apply, delete, action, Dollarlocation, propertylist, name, description, enabled, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_hapi_impl_h_api_util_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodresourcetype = request.query().get("org.apache.sling.hapi.tools.resourcetype");
    auto orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodcollectionresourcetype = request.query().get("org.apache.sling.hapi.tools.collectionresourcetype");
    auto orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodsearchpaths = request.query().get("org.apache.sling.hapi.tools.searchpaths");
    auto orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodexternalurl = request.query().get("org.apache.sling.hapi.tools.externalurl");
    auto orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodenabled = request.query().get("org.apache.sling.hapi.tools.enabled");
    
    try {
      this->org_apache_sling_hapi_impl_h_api_util_impl(post, apply, delete, action, Dollarlocation, propertylist, orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodresourcetype, orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodcollectionresourcetype, orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodsearchpaths, orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodexternalurl, orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodenabled, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_hc_core_impl_composite_health_check_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto hcPeriodname = request.query().get("hc.name");
    auto hcPeriodtags = request.query().get("hc.tags");
    auto hcPeriodmbeanPeriodname = request.query().get("hc.mbean.name");
    auto filterPeriodtags = request.query().get("filter.tags");
    auto filterPeriodcombineTagsWithOr = request.query().get("filter.combineTagsWithOr");
    
    try {
      this->org_apache_sling_hc_core_impl_composite_health_check(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodname, hcPeriodtags, hcPeriodmbeanPeriodname, filterPeriodtags, filterPeriodcombineTagsWithOr, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_hc_core_impl_executor_health_check_executor_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto timeoutInMs = request.query().get("timeoutInMs");
    auto longRunningFutureThresholdForCriticalMs = request.query().get("longRunningFutureThresholdForCriticalMs");
    auto resultCacheTtlInMs = request.query().get("resultCacheTtlInMs");
    
    try {
      this->org_apache_sling_hc_core_impl_executor_health_check_executor_impl(post, apply, delete, action, Dollarlocation, propertylist, timeoutInMs, longRunningFutureThresholdForCriticalMs, resultCacheTtlInMs, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_hc_core_impl_jmx_attribute_health_check_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto hcPeriodname = request.query().get("hc.name");
    auto hcPeriodtags = request.query().get("hc.tags");
    auto hcPeriodmbeanPeriodname = request.query().get("hc.mbean.name");
    auto mbeanPeriodname = request.query().get("mbean.name");
    auto attributePeriodname = request.query().get("attribute.name");
    auto attributePeriodvaluePeriodconstraint = request.query().get("attribute.value.constraint");
    
    try {
      this->org_apache_sling_hc_core_impl_jmx_attribute_health_check(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodname, hcPeriodtags, hcPeriodmbeanPeriodname, mbeanPeriodname, attributePeriodname, attributePeriodvaluePeriodconstraint, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_hc_core_impl_scriptable_health_check_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto hcPeriodname = request.query().get("hc.name");
    auto hcPeriodtags = request.query().get("hc.tags");
    auto hcPeriodmbeanPeriodname = request.query().get("hc.mbean.name");
    auto expression = request.query().get("expression");
    auto languagePeriodextension = request.query().get("language.extension");
    
    try {
      this->org_apache_sling_hc_core_impl_scriptable_health_check(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodname, hcPeriodtags, hcPeriodmbeanPeriodname, expression, languagePeriodextension, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_hc_core_impl_servlet_health_check_executor_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto servletPath = request.query().get("servletPath");
    auto disabled = request.query().get("disabled");
    auto corsPeriodaccessControlAllowOrigin = request.query().get("cors.accessControlAllowOrigin");
    
    try {
      this->org_apache_sling_hc_core_impl_servlet_health_check_executor_servlet(post, apply, delete, action, Dollarlocation, propertylist, servletPath, disabled, corsPeriodaccessControlAllowOrigin, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_hc_core_impl_servlet_result_txt_verbose_serializer_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto totalWidth = request.query().get("totalWidth");
    auto colWidthName = request.query().get("colWidthName");
    auto colWidthResult = request.query().get("colWidthResult");
    auto colWidthTiming = request.query().get("colWidthTiming");
    
    try {
      this->org_apache_sling_hc_core_impl_servlet_result_txt_verbose_serializer(post, apply, delete, action, Dollarlocation, propertylist, totalWidth, colWidthName, colWidthResult, colWidthTiming, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_i18n_impl_i18_n_filter_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto servicePeriodranking = request.query().get("service.ranking");
    auto slingPeriodfilterPeriodscope = request.query().get("sling.filter.scope");
    
    try {
      this->org_apache_sling_i18n_impl_i18_n_filter(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, slingPeriodfilterPeriodscope, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_i18n_impl_jcr_resource_bundle_provider_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto localePerioddefault = request.query().get("locale.default");
    auto preloadPeriodbundles = request.query().get("preload.bundles");
    auto invalidationPerioddelay = request.query().get("invalidation.delay");
    
    try {
      this->org_apache_sling_i18n_impl_jcr_resource_bundle_provider(post, apply, delete, action, Dollarlocation, propertylist, localePerioddefault, preloadPeriodbundles, invalidationPerioddelay, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_installer_provider_jcr_impl_jcr_installer_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto handlerPeriodschemes = request.query().get("handler.schemes");
    auto slingPeriodjcrinstallPeriodfolderPeriodnamePeriodregexp = request.query().get("sling.jcrinstall.folder.name.regexp");
    auto slingPeriodjcrinstallPeriodfolderPeriodmaxPerioddepth = request.query().get("sling.jcrinstall.folder.max.depth");
    auto slingPeriodjcrinstallPeriodsearchPeriodpath = request.query().get("sling.jcrinstall.search.path");
    auto slingPeriodjcrinstallPeriodnewPeriodconfigPeriodpath = request.query().get("sling.jcrinstall.new.config.path");
    auto slingPeriodjcrinstallPeriodsignalPeriodpath = request.query().get("sling.jcrinstall.signal.path");
    auto slingPeriodjcrinstallPeriodenablePeriodwriteback = request.query().get("sling.jcrinstall.enable.writeback");
    
    try {
      this->org_apache_sling_installer_provider_jcr_impl_jcr_installer(post, apply, delete, action, Dollarlocation, propertylist, handlerPeriodschemes, slingPeriodjcrinstallPeriodfolderPeriodnamePeriodregexp, slingPeriodjcrinstallPeriodfolderPeriodmaxPerioddepth, slingPeriodjcrinstallPeriodsearchPeriodpath, slingPeriodjcrinstallPeriodnewPeriodconfigPeriodpath, slingPeriodjcrinstallPeriodsignalPeriodpath, slingPeriodjcrinstallPeriodenablePeriodwriteback, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_jcr_base_internal_login_admin_whitelist_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto whitelistPeriodbypass = request.query().get("whitelist.bypass");
    auto whitelistPeriodbundlesPeriodregexp = request.query().get("whitelist.bundles.regexp");
    
    try {
      this->org_apache_sling_jcr_base_internal_login_admin_whitelist(post, apply, delete, action, Dollarlocation, propertylist, whitelistPeriodbypass, whitelistPeriodbundlesPeriodregexp, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_jcr_base_internal_login_admin_whitelist_fragment_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto whitelistPeriodname = request.query().get("whitelist.name");
    auto whitelistPeriodbundles = request.query().get("whitelist.bundles");
    
    try {
      this->org_apache_sling_jcr_base_internal_login_admin_whitelist_fragment(post, apply, delete, action, Dollarlocation, propertylist, whitelistPeriodname, whitelistPeriodbundles, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_jcr_davex_impl_servlets_sling_dav_ex_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto alias = request.query().get("alias");
    auto davPeriodcreateAbsoluteUri = request.query().get("dav.create-absolute-uri");
    auto davPeriodprotectedhandlers = request.query().get("dav.protectedhandlers");
    
    try {
      this->org_apache_sling_jcr_davex_impl_servlets_sling_dav_ex_servlet(post, apply, delete, action, Dollarlocation, propertylist, alias, davPeriodcreateAbsoluteUri, davPeriodprotectedhandlers, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_jcr_jackrabbit_server_jndi_registration_support_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto javaPeriodnamingPeriodfactoryPeriodinitial = request.query().get("java.naming.factory.initial");
    auto javaPeriodnamingPeriodproviderPeriodurl = request.query().get("java.naming.provider.url");
    
    try {
      this->org_apache_sling_jcr_jackrabbit_server_jndi_registration_support(post, apply, delete, action, Dollarlocation, propertylist, javaPeriodnamingPeriodfactoryPeriodinitial, javaPeriodnamingPeriodproviderPeriodurl, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_jcr_jackrabbit_server_rmi_registration_support_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto port = request.query().get("port");
    
    try {
      this->org_apache_sling_jcr_jackrabbit_server_rmi_registration_support(post, apply, delete, action, Dollarlocation, propertylist, port, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_jcr_repoinit_impl_repository_initializer_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto references = request.query().get("references");
    
    try {
      this->org_apache_sling_jcr_repoinit_impl_repository_initializer(post, apply, delete, action, Dollarlocation, propertylist, references, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_jcr_repoinit_repository_initializer_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto references = request.query().get("references");
    auto scripts = request.query().get("scripts");
    
    try {
      this->org_apache_sling_jcr_repoinit_repository_initializer(post, apply, delete, action, Dollarlocation, propertylist, references, scripts, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_jcr_resource_internal_jcr_resource_resolver_factory_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto resourcePeriodresolverPeriodsearchpath = request.query().get("resource.resolver.searchpath");
    auto resourcePeriodresolverPeriodmanglenamespaces = request.query().get("resource.resolver.manglenamespaces");
    auto resourcePeriodresolverPeriodallowDirect = request.query().get("resource.resolver.allowDirect");
    auto resourcePeriodresolverPeriodrequiredPeriodproviders = request.query().get("resource.resolver.required.providers");
    auto resourcePeriodresolverPeriodrequiredPeriodprovidernames = request.query().get("resource.resolver.required.providernames");
    auto resourcePeriodresolverPeriodvirtual = request.query().get("resource.resolver.virtual");
    auto resourcePeriodresolverPeriodmapping = request.query().get("resource.resolver.mapping");
    auto resourcePeriodresolverPeriodmapPeriodlocation = request.query().get("resource.resolver.map.location");
    auto resourcePeriodresolverPeriodmapPeriodobservation = request.query().get("resource.resolver.map.observation");
    auto resourcePeriodresolverPerioddefaultPeriodvanityPeriodredirectPeriodstatus = request.query().get("resource.resolver.default.vanity.redirect.status");
    auto resourcePeriodresolverPeriodenablePeriodvanitypath = request.query().get("resource.resolver.enable.vanitypath");
    auto resourcePeriodresolverPeriodvanitypathPeriodmaxEntries = request.query().get("resource.resolver.vanitypath.maxEntries");
    auto resourcePeriodresolverPeriodvanitypathPeriodmaxEntriesPeriodstartup = request.query().get("resource.resolver.vanitypath.maxEntries.startup");
    auto resourcePeriodresolverPeriodvanitypathPeriodbloomfilterPeriodmaxBytes = request.query().get("resource.resolver.vanitypath.bloomfilter.maxBytes");
    auto resourcePeriodresolverPeriodoptimizePeriodaliasPeriodresolution = request.query().get("resource.resolver.optimize.alias.resolution");
    auto resourcePeriodresolverPeriodvanitypathPeriodwhitelist = request.query().get("resource.resolver.vanitypath.whitelist");
    auto resourcePeriodresolverPeriodvanitypathPeriodblacklist = request.query().get("resource.resolver.vanitypath.blacklist");
    auto resourcePeriodresolverPeriodvanityPeriodprecedence = request.query().get("resource.resolver.vanity.precedence");
    auto resourcePeriodresolverPeriodproviderhandlingPeriodparanoid = request.query().get("resource.resolver.providerhandling.paranoid");
    auto resourcePeriodresolverPeriodlogPeriodclosing = request.query().get("resource.resolver.log.closing");
    auto resourcePeriodresolverPeriodlogPeriodunclosed = request.query().get("resource.resolver.log.unclosed");
    
    try {
      this->org_apache_sling_jcr_resource_internal_jcr_resource_resolver_factory_impl(post, apply, delete, action, Dollarlocation, propertylist, resourcePeriodresolverPeriodsearchpath, resourcePeriodresolverPeriodmanglenamespaces, resourcePeriodresolverPeriodallowDirect, resourcePeriodresolverPeriodrequiredPeriodproviders, resourcePeriodresolverPeriodrequiredPeriodprovidernames, resourcePeriodresolverPeriodvirtual, resourcePeriodresolverPeriodmapping, resourcePeriodresolverPeriodmapPeriodlocation, resourcePeriodresolverPeriodmapPeriodobservation, resourcePeriodresolverPerioddefaultPeriodvanityPeriodredirectPeriodstatus, resourcePeriodresolverPeriodenablePeriodvanitypath, resourcePeriodresolverPeriodvanitypathPeriodmaxEntries, resourcePeriodresolverPeriodvanitypathPeriodmaxEntriesPeriodstartup, resourcePeriodresolverPeriodvanitypathPeriodbloomfilterPeriodmaxBytes, resourcePeriodresolverPeriodoptimizePeriodaliasPeriodresolution, resourcePeriodresolverPeriodvanitypathPeriodwhitelist, resourcePeriodresolverPeriodvanitypathPeriodblacklist, resourcePeriodresolverPeriodvanityPeriodprecedence, resourcePeriodresolverPeriodproviderhandlingPeriodparanoid, resourcePeriodresolverPeriodlogPeriodclosing, resourcePeriodresolverPeriodlogPeriodunclosed, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_jcr_resource_internal_jcr_system_user_validator_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto allowPeriodonlyPeriodsystemPerioduser = request.query().get("allow.only.system.user");
    
    try {
      this->org_apache_sling_jcr_resource_internal_jcr_system_user_validator(post, apply, delete, action, Dollarlocation, propertylist, allowPeriodonlyPeriodsystemPerioduser, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_jcr_resourcesecurity_impl_resource_access_gate_factory_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto path = request.query().get("path");
    auto checkpathPeriodprefix = request.query().get("checkpath.prefix");
    auto jcrPath = request.query().get("jcrPath");
    
    try {
      this->org_apache_sling_jcr_resourcesecurity_impl_resource_access_gate_factory(post, apply, delete, action, Dollarlocation, propertylist, path, checkpathPeriodprefix, jcrPath, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_jcr_webdav_impl_handler_default_handler_service_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto servicePeriodranking = request.query().get("service.ranking");
    auto typePeriodcollections = request.query().get("type.collections");
    auto typePeriodnoncollections = request.query().get("type.noncollections");
    auto typePeriodcontent = request.query().get("type.content");
    
    try {
      this->org_apache_sling_jcr_webdav_impl_handler_default_handler_service(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, typePeriodcollections, typePeriodnoncollections, typePeriodcontent, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_jcr_webdav_impl_handler_dir_listing_export_handler_servic_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto servicePeriodranking = request.query().get("service.ranking");
    
    try {
      this->org_apache_sling_jcr_webdav_impl_handler_dir_listing_export_handler_servic(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_jcr_webdav_impl_servlets_simple_web_dav_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto davPeriodroot = request.query().get("dav.root");
    auto davPeriodcreateAbsoluteUri = request.query().get("dav.create-absolute-uri");
    auto davPeriodrealm = request.query().get("dav.realm");
    auto collectionPeriodtypes = request.query().get("collection.types");
    auto filterPeriodprefixes = request.query().get("filter.prefixes");
    auto filterPeriodtypes = request.query().get("filter.types");
    auto filterPerioduris = request.query().get("filter.uris");
    auto typePeriodcollections = request.query().get("type.collections");
    auto typePeriodnoncollections = request.query().get("type.noncollections");
    auto typePeriodcontent = request.query().get("type.content");
    
    try {
      this->org_apache_sling_jcr_webdav_impl_servlets_simple_web_dav_servlet(post, apply, delete, action, Dollarlocation, propertylist, davPeriodroot, davPeriodcreateAbsoluteUri, davPeriodrealm, collectionPeriodtypes, filterPeriodprefixes, filterPeriodtypes, filterPerioduris, typePeriodcollections, typePeriodnoncollections, typePeriodcontent, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_jmx_provider_impl_jmx_resource_provider_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto providerPeriodroots = request.query().get("provider.roots");
    
    try {
      this->org_apache_sling_jmx_provider_impl_jmx_resource_provider(post, apply, delete, action, Dollarlocation, propertylist, providerPeriodroots, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_models_impl_model_adapter_factory_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto osgiPeriodhttpPeriodwhiteboardPeriodlistener = request.query().get("osgi.http.whiteboard.listener");
    auto osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect = request.query().get("osgi.http.whiteboard.context.select");
    auto maxPeriodrecursionPerioddepth = request.query().get("max.recursion.depth");
    auto cleanupPeriodjobPeriodperiod = request.query().get("cleanup.job.period");
    
    try {
      this->org_apache_sling_models_impl_model_adapter_factory(post, apply, delete, action, Dollarlocation, propertylist, osgiPeriodhttpPeriodwhiteboardPeriodlistener, osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect, maxPeriodrecursionPerioddepth, cleanupPeriodjobPeriodperiod, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_models_jacksonexporter_impl_resource_module_provider_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto maxPeriodrecursionPeriodlevels = request.query().get("max.recursion.levels");
    
    try {
      this->org_apache_sling_models_jacksonexporter_impl_resource_module_provider(post, apply, delete, action, Dollarlocation, propertylist, maxPeriodrecursionPeriodlevels, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_resource_inventory_impl_resource_inventory_printer_facto_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto felixPeriodinventoryPeriodprinterPeriodname = request.query().get("felix.inventory.printer.name");
    auto felixPeriodinventoryPeriodprinterPeriodtitle = request.query().get("felix.inventory.printer.title");
    auto path = request.query().get("path");
    
    try {
      this->org_apache_sling_resource_inventory_impl_resource_inventory_printer_facto(post, apply, delete, action, Dollarlocation, propertylist, felixPeriodinventoryPeriodprinterPeriodname, felixPeriodinventoryPeriodprinterPeriodtitle, path, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_resourcemerger_impl_merged_resource_provider_factory_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto mergePeriodroot = request.query().get("merge.root");
    auto mergePeriodreadOnly = request.query().get("merge.readOnly");
    
    try {
      this->org_apache_sling_resourcemerger_impl_merged_resource_provider_factory(post, apply, delete, action, Dollarlocation, propertylist, mergePeriodroot, mergePeriodreadOnly, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_resourcemerger_picker_overriding_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto mergePeriodroot = request.query().get("merge.root");
    auto mergePeriodreadOnly = request.query().get("merge.readOnly");
    
    try {
      this->org_apache_sling_resourcemerger_picker_overriding(post, apply, delete, action, Dollarlocation, propertylist, mergePeriodroot, mergePeriodreadOnly, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_scripting_core_impl_script_cache_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto orgPeriodapachePeriodslingPeriodscriptingPeriodcachePeriodsize = request.query().get("org.apache.sling.scripting.cache.size");
    auto orgPeriodapachePeriodslingPeriodscriptingPeriodcachePeriodadditionalExtensions = request.query().get("org.apache.sling.scripting.cache.additional_extensions");
    
    try {
      this->org_apache_sling_scripting_core_impl_script_cache_impl(post, apply, delete, action, Dollarlocation, propertylist, orgPeriodapachePeriodslingPeriodscriptingPeriodcachePeriodsize, orgPeriodapachePeriodslingPeriodscriptingPeriodcachePeriodadditionalExtensions, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_scripting_core_impl_scripting_resource_resolver_provider_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto logPeriodstacktracePeriodonclose = request.query().get("log.stacktrace.onclose");
    
    try {
      this->org_apache_sling_scripting_core_impl_scripting_resource_resolver_provider(post, apply, delete, action, Dollarlocation, propertylist, logPeriodstacktracePeriodonclose, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_scripting_java_impl_java_script_engine_factory_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto javaPeriodclassdebuginfo = request.query().get("java.classdebuginfo");
    auto javaPeriodjavaEncoding = request.query().get("java.javaEncoding");
    auto javaPeriodcompilerSourceVM = request.query().get("java.compilerSourceVM");
    auto javaPeriodcompilerTargetVM = request.query().get("java.compilerTargetVM");
    
    try {
      this->org_apache_sling_scripting_java_impl_java_script_engine_factory(post, apply, delete, action, Dollarlocation, propertylist, javaPeriodclassdebuginfo, javaPeriodjavaEncoding, javaPeriodcompilerSourceVM, javaPeriodcompilerTargetVM, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_scripting_javascript_internal_rhino_java_script_engine_fa_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto orgPeriodapachePeriodslingPeriodscriptingPeriodjavascriptPeriodrhinoPeriodoptLevel = request.query().get("org.apache.sling.scripting.javascript.rhino.optLevel");
    
    try {
      this->org_apache_sling_scripting_javascript_internal_rhino_java_script_engine_fa(post, apply, delete, action, Dollarlocation, propertylist, orgPeriodapachePeriodslingPeriodscriptingPeriodjavascriptPeriodrhinoPeriodoptLevel, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_scripting_jsp_jsp_script_engine_factory_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto jasperPeriodcompilerTargetVM = request.query().get("jasper.compilerTargetVM");
    auto jasperPeriodcompilerSourceVM = request.query().get("jasper.compilerSourceVM");
    auto jasperPeriodclassdebuginfo = request.query().get("jasper.classdebuginfo");
    auto jasperPeriodenablePooling = request.query().get("jasper.enablePooling");
    auto jasperPeriodieClassId = request.query().get("jasper.ieClassId");
    auto jasperPeriodgenStringAsCharArray = request.query().get("jasper.genStringAsCharArray");
    auto jasperPeriodkeepgenerated = request.query().get("jasper.keepgenerated");
    auto jasperPeriodmappedfile = request.query().get("jasper.mappedfile");
    auto jasperPeriodtrimSpaces = request.query().get("jasper.trimSpaces");
    auto jasperPerioddisplaySourceFragments = request.query().get("jasper.displaySourceFragments");
    auto defaultPeriodisPeriodsession = request.query().get("default.is.session");
    
    try {
      this->org_apache_sling_scripting_jsp_jsp_script_engine_factory(post, apply, delete, action, Dollarlocation, propertylist, jasperPeriodcompilerTargetVM, jasperPeriodcompilerSourceVM, jasperPeriodclassdebuginfo, jasperPeriodenablePooling, jasperPeriodieClassId, jasperPeriodgenStringAsCharArray, jasperPeriodkeepgenerated, jasperPeriodmappedfile, jasperPeriodtrimSpaces, jasperPerioddisplaySourceFragments, defaultPeriodisPeriodsession, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_scripting_sightly_js_impl_jsapi_sly_bindings_values_prov_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodjsPeriodbindings = request.query().get("org.apache.sling.scripting.sightly.js.bindings");
    
    try {
      this->org_apache_sling_scripting_sightly_js_impl_jsapi_sly_bindings_values_prov(post, apply, delete, action, Dollarlocation, propertylist, orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodjsPeriodbindings, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_security_impl_content_disposition_filter_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto slingPeriodcontentPerioddispositionPeriodpaths = request.query().get("sling.content.disposition.paths");
    auto slingPeriodcontentPerioddispositionPeriodexcludedPeriodpaths = request.query().get("sling.content.disposition.excluded.paths");
    auto slingPeriodcontentPerioddispositionPeriodallPeriodpaths = request.query().get("sling.content.disposition.all.paths");
    
    try {
      this->org_apache_sling_security_impl_content_disposition_filter(post, apply, delete, action, Dollarlocation, propertylist, slingPeriodcontentPerioddispositionPeriodpaths, slingPeriodcontentPerioddispositionPeriodexcludedPeriodpaths, slingPeriodcontentPerioddispositionPeriodallPeriodpaths, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_security_impl_referrer_filter_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto allowPeriodempty = request.query().get("allow.empty");
    auto allowPeriodhosts = request.query().get("allow.hosts");
    auto allowPeriodhostsPeriodregexp = request.query().get("allow.hosts.regexp");
    auto filterPeriodmethods = request.query().get("filter.methods");
    auto excludePeriodagentsPeriodregexp = request.query().get("exclude.agents.regexp");
    
    try {
      this->org_apache_sling_security_impl_referrer_filter(post, apply, delete, action, Dollarlocation, propertylist, allowPeriodempty, allowPeriodhosts, allowPeriodhostsPeriodregexp, filterPeriodmethods, excludePeriodagentsPeriodregexp, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_serviceusermapping_impl_service_user_mapper_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto userPeriodmapping = request.query().get("user.mapping");
    auto userPerioddefault = request.query().get("user.default");
    auto userPeriodenablePerioddefaultPeriodmapping = request.query().get("user.enable.default.mapping");
    auto requirePeriodvalidation = request.query().get("require.validation");
    
    try {
      this->org_apache_sling_serviceusermapping_impl_service_user_mapper_impl(post, apply, delete, action, Dollarlocation, propertylist, userPeriodmapping, userPerioddefault, userPeriodenablePerioddefaultPeriodmapping, requirePeriodvalidation, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_serviceusermapping_impl_service_user_mapper_impl_amended_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto servicePeriodranking = request.query().get("service.ranking");
    auto userPeriodmapping = request.query().get("user.mapping");
    
    try {
      this->org_apache_sling_serviceusermapping_impl_service_user_mapper_impl_amended(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, userPeriodmapping, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_servlets_get_default_get_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto aliases = request.query().get("aliases");
    auto index = request.query().get("index");
    auto indexPeriodfiles = request.query().get("index.files");
    auto enablePeriodhtml = request.query().get("enable.html");
    auto enablePeriodjson = request.query().get("enable.json");
    auto enablePeriodtxt = request.query().get("enable.txt");
    auto enablePeriodxml = request.query().get("enable.xml");
    auto jsonPeriodmaximumresults = request.query().get("json.maximumresults");
    auto ecmaSuport = request.query().get("ecmaSuport");
    
    try {
      this->org_apache_sling_servlets_get_default_get_servlet(post, apply, delete, action, Dollarlocation, propertylist, aliases, index, indexPeriodfiles, enablePeriodhtml, enablePeriodjson, enablePeriodtxt, enablePeriodxml, jsonPeriodmaximumresults, ecmaSuport, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_servlets_get_impl_version_version_info_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto slingPeriodservletPeriodselectors = request.query().get("sling.servlet.selectors");
    auto ecmaSuport = request.query().get("ecmaSuport");
    
    try {
      this->org_apache_sling_servlets_get_impl_version_version_info_servlet(post, apply, delete, action, Dollarlocation, propertylist, slingPeriodservletPeriodselectors, ecmaSuport, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_servlets_post_impl_helper_chunk_clean_up_task_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto schedulerPeriodexpression = request.query().get("scheduler.expression");
    auto schedulerPeriodconcurrent = request.query().get("scheduler.concurrent");
    auto chunkPeriodcleanupPeriodage = request.query().get("chunk.cleanup.age");
    
    try {
      this->org_apache_sling_servlets_post_impl_helper_chunk_clean_up_task(post, apply, delete, action, Dollarlocation, propertylist, schedulerPeriodexpression, schedulerPeriodconcurrent, chunkPeriodcleanupPeriodage, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_servlets_post_impl_sling_post_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto servletPeriodpostPerioddateFormats = request.query().get("servlet.post.dateFormats");
    auto servletPeriodpostPeriodnodeNameHints = request.query().get("servlet.post.nodeNameHints");
    auto servletPeriodpostPeriodnodeNameMaxLength = request.query().get("servlet.post.nodeNameMaxLength");
    auto servletPeriodpostPeriodcheckinNewVersionableNodes = request.query().get("servlet.post.checkinNewVersionableNodes");
    auto servletPeriodpostPeriodautoCheckout = request.query().get("servlet.post.autoCheckout");
    auto servletPeriodpostPeriodautoCheckin = request.query().get("servlet.post.autoCheckin");
    auto servletPeriodpostPeriodignorePattern = request.query().get("servlet.post.ignorePattern");
    
    try {
      this->org_apache_sling_servlets_post_impl_sling_post_servlet(post, apply, delete, action, Dollarlocation, propertylist, servletPeriodpostPerioddateFormats, servletPeriodpostPeriodnodeNameHints, servletPeriodpostPeriodnodeNameMaxLength, servletPeriodpostPeriodcheckinNewVersionableNodes, servletPeriodpostPeriodautoCheckout, servletPeriodpostPeriodautoCheckin, servletPeriodpostPeriodignorePattern, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_servlets_resolver_sling_servlet_resolver_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto servletresolverPeriodservletRoot = request.query().get("servletresolver.servletRoot");
    auto servletresolverPeriodcacheSize = request.query().get("servletresolver.cacheSize");
    auto servletresolverPeriodpaths = request.query().get("servletresolver.paths");
    auto servletresolverPerioddefaultExtensions = request.query().get("servletresolver.defaultExtensions");
    
    try {
      this->org_apache_sling_servlets_resolver_sling_servlet_resolver(post, apply, delete, action, Dollarlocation, propertylist, servletresolverPeriodservletRoot, servletresolverPeriodcacheSize, servletresolverPeriodpaths, servletresolverPerioddefaultExtensions, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_settings_impl_sling_settings_service_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto slingPeriodname = request.query().get("sling.name");
    auto slingPerioddescription = request.query().get("sling.description");
    
    try {
      this->org_apache_sling_settings_impl_sling_settings_service_impl(post, apply, delete, action, Dollarlocation, propertylist, slingPeriodname, slingPerioddescription, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_startupfilter_impl_startup_filter_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto activePeriodbyPerioddefault = request.query().get("active.by.default");
    auto defaultPeriodmessage = request.query().get("default.message");
    
    try {
      this->org_apache_sling_startupfilter_impl_startup_filter_impl(post, apply, delete, action, Dollarlocation, propertylist, activePeriodbyPerioddefault, defaultPeriodmessage, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_tenant_internal_tenant_provider_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto tenantPeriodroot = request.query().get("tenant.root");
    auto tenantPeriodpathPeriodmatcher = request.query().get("tenant.path.matcher");
    
    try {
      this->org_apache_sling_tenant_internal_tenant_provider_impl(post, apply, delete, action, Dollarlocation, propertylist, tenantPeriodroot, tenantPeriodpathPeriodmatcher, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_tracer_internal_log_tracer_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto tracerSets = request.query().get("tracerSets");
    auto enabled = request.query().get("enabled");
    auto servletEnabled = request.query().get("servletEnabled");
    auto recordingCacheSizeInMB = request.query().get("recordingCacheSizeInMB");
    auto recordingCacheDurationInSecs = request.query().get("recordingCacheDurationInSecs");
    auto recordingCompressionEnabled = request.query().get("recordingCompressionEnabled");
    auto gzipResponse = request.query().get("gzipResponse");
    
    try {
      this->org_apache_sling_tracer_internal_log_tracer(post, apply, delete, action, Dollarlocation, propertylist, tracerSets, enabled, servletEnabled, recordingCacheSizeInMB, recordingCacheDurationInSecs, recordingCompressionEnabled, gzipResponse, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConfigmgrApi::org_apache_sling_xss_impl_xss_filter_impl_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto propertylist = request.query().get("propertylist");
    auto policyPath = request.query().get("policyPath");
    
    try {
      this->org_apache_sling_xss_impl_xss_filter_impl(post, apply, delete, action, Dollarlocation, propertylist, policyPath, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}

void ConfigmgrApi::configmgr_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    response.send(Pistache::Http::Code::Not_Found, "The requested method does not exist");
}

}
}
}
}

