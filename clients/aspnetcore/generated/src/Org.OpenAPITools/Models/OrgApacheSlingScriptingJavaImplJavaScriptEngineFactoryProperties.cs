/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties : IEquatable<OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties>
    { 
        /// <summary>
        /// Gets or Sets JavaClassdebuginfo
        /// </summary>
        [DataMember(Name="java.classdebuginfo")]
        public ConfigNodePropertyBoolean JavaClassdebuginfo { get; set; }

        /// <summary>
        /// Gets or Sets JavaJavaEncoding
        /// </summary>
        [DataMember(Name="java.javaEncoding")]
        public ConfigNodePropertyString JavaJavaEncoding { get; set; }

        /// <summary>
        /// Gets or Sets JavaCompilerSourceVM
        /// </summary>
        [DataMember(Name="java.compilerSourceVM")]
        public ConfigNodePropertyString JavaCompilerSourceVM { get; set; }

        /// <summary>
        /// Gets or Sets JavaCompilerTargetVM
        /// </summary>
        [DataMember(Name="java.compilerTargetVM")]
        public ConfigNodePropertyString JavaCompilerTargetVM { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties {\n");
            sb.Append("  JavaClassdebuginfo: ").Append(JavaClassdebuginfo).Append("\n");
            sb.Append("  JavaJavaEncoding: ").Append(JavaJavaEncoding).Append("\n");
            sb.Append("  JavaCompilerSourceVM: ").Append(JavaCompilerSourceVM).Append("\n");
            sb.Append("  JavaCompilerTargetVM: ").Append(JavaCompilerTargetVM).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties)obj);
        }

        /// <summary>
        /// Returns true if OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    JavaClassdebuginfo == other.JavaClassdebuginfo ||
                    JavaClassdebuginfo != null &&
                    JavaClassdebuginfo.Equals(other.JavaClassdebuginfo)
                ) && 
                (
                    JavaJavaEncoding == other.JavaJavaEncoding ||
                    JavaJavaEncoding != null &&
                    JavaJavaEncoding.Equals(other.JavaJavaEncoding)
                ) && 
                (
                    JavaCompilerSourceVM == other.JavaCompilerSourceVM ||
                    JavaCompilerSourceVM != null &&
                    JavaCompilerSourceVM.Equals(other.JavaCompilerSourceVM)
                ) && 
                (
                    JavaCompilerTargetVM == other.JavaCompilerTargetVM ||
                    JavaCompilerTargetVM != null &&
                    JavaCompilerTargetVM.Equals(other.JavaCompilerTargetVM)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (JavaClassdebuginfo != null)
                    hashCode = hashCode * 59 + JavaClassdebuginfo.GetHashCode();
                    if (JavaJavaEncoding != null)
                    hashCode = hashCode * 59 + JavaJavaEncoding.GetHashCode();
                    if (JavaCompilerSourceVM != null)
                    hashCode = hashCode * 59 + JavaCompilerSourceVM.GetHashCode();
                    if (JavaCompilerTargetVM != null)
                    hashCode = hashCode * 59 + JavaCompilerTargetVM.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties left, OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties left, OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
