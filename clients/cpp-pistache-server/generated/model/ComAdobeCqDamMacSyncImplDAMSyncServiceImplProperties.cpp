/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties::ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties()
{
    m_Com_adobe_cq_dam_mac_sync_damsyncservice_registered_pathsIsSet = false;
    m_Com_adobe_cq_dam_mac_sync_damsyncservice_sync_renditionsIsSet = false;
    m_Com_adobe_cq_dam_mac_sync_damsyncservice_replicate_thread_wait_msIsSet = false;
    m_Com_adobe_cq_dam_mac_sync_damsyncservice_platformIsSet = false;
    
}

ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties::~ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties()
{
}

void ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Com_adobe_cq_dam_mac_sync_damsyncservice_registered_pathsIsSet)
    {
        val["com.adobe.cq.dam.mac.sync.damsyncservice.registered_paths"] = ModelBase::toJson(m_Com_adobe_cq_dam_mac_sync_damsyncservice_registered_paths);
    }
    if(m_Com_adobe_cq_dam_mac_sync_damsyncservice_sync_renditionsIsSet)
    {
        val["com.adobe.cq.dam.mac.sync.damsyncservice.sync.renditions"] = ModelBase::toJson(m_Com_adobe_cq_dam_mac_sync_damsyncservice_sync_renditions);
    }
    if(m_Com_adobe_cq_dam_mac_sync_damsyncservice_replicate_thread_wait_msIsSet)
    {
        val["com.adobe.cq.dam.mac.sync.damsyncservice.replicate.thread.wait.ms"] = ModelBase::toJson(m_Com_adobe_cq_dam_mac_sync_damsyncservice_replicate_thread_wait_ms);
    }
    if(m_Com_adobe_cq_dam_mac_sync_damsyncservice_platformIsSet)
    {
        val["com.adobe.cq.dam.mac.sync.damsyncservice.platform"] = ModelBase::toJson(m_Com_adobe_cq_dam_mac_sync_damsyncservice_platform);
    }
    

    return val;
}

void ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties::fromJson(nlohmann::json& val)
{
    if(val.find("com.adobe.cq.dam.mac.sync.damsyncservice.registered_paths") != val.end())
    {
        if(!val["com.adobe.cq.dam.mac.sync.damsyncservice.registered_paths"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["com.adobe.cq.dam.mac.sync.damsyncservice.registered_paths"]);
            setComAdobeCqDamMacSyncDamsyncserviceRegisteredPaths( newItem );
        }
        
    }
    if(val.find("com.adobe.cq.dam.mac.sync.damsyncservice.sync.renditions") != val.end())
    {
        if(!val["com.adobe.cq.dam.mac.sync.damsyncservice.sync.renditions"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["com.adobe.cq.dam.mac.sync.damsyncservice.sync.renditions"]);
            setComAdobeCqDamMacSyncDamsyncserviceSyncRenditions( newItem );
        }
        
    }
    if(val.find("com.adobe.cq.dam.mac.sync.damsyncservice.replicate.thread.wait.ms") != val.end())
    {
        if(!val["com.adobe.cq.dam.mac.sync.damsyncservice.replicate.thread.wait.ms"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["com.adobe.cq.dam.mac.sync.damsyncservice.replicate.thread.wait.ms"]);
            setComAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs( newItem );
        }
        
    }
    if(val.find("com.adobe.cq.dam.mac.sync.damsyncservice.platform") != val.end())
    {
        if(!val["com.adobe.cq.dam.mac.sync.damsyncservice.platform"].is_null())
        {
            ConfigNodePropertyDropDown newItem;
            newItem.fromJson(val["com.adobe.cq.dam.mac.sync.damsyncservice.platform"]);
            setComAdobeCqDamMacSyncDamsyncservicePlatform( newItem );
        }
        
    }
    
}


ConfigNodePropertyArray ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties::getComAdobeCqDamMacSyncDamsyncserviceRegisteredPaths() const
{
    return m_Com_adobe_cq_dam_mac_sync_damsyncservice_registered_paths;
}
void ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties::setComAdobeCqDamMacSyncDamsyncserviceRegisteredPaths(ConfigNodePropertyArray const& value)
{
    m_Com_adobe_cq_dam_mac_sync_damsyncservice_registered_paths = value;
    m_Com_adobe_cq_dam_mac_sync_damsyncservice_registered_pathsIsSet = true;
}
bool ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties::comAdobeCqDamMacSyncDamsyncserviceRegisteredPathsIsSet() const
{
    return m_Com_adobe_cq_dam_mac_sync_damsyncservice_registered_pathsIsSet;
}
void ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties::unsetCom_adobe_cq_dam_mac_sync_damsyncservice_registered_paths()
{
    m_Com_adobe_cq_dam_mac_sync_damsyncservice_registered_pathsIsSet = false;
}
ConfigNodePropertyBoolean ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties::getComAdobeCqDamMacSyncDamsyncserviceSyncRenditions() const
{
    return m_Com_adobe_cq_dam_mac_sync_damsyncservice_sync_renditions;
}
void ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties::setComAdobeCqDamMacSyncDamsyncserviceSyncRenditions(ConfigNodePropertyBoolean const& value)
{
    m_Com_adobe_cq_dam_mac_sync_damsyncservice_sync_renditions = value;
    m_Com_adobe_cq_dam_mac_sync_damsyncservice_sync_renditionsIsSet = true;
}
bool ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties::comAdobeCqDamMacSyncDamsyncserviceSyncRenditionsIsSet() const
{
    return m_Com_adobe_cq_dam_mac_sync_damsyncservice_sync_renditionsIsSet;
}
void ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties::unsetCom_adobe_cq_dam_mac_sync_damsyncservice_sync_renditions()
{
    m_Com_adobe_cq_dam_mac_sync_damsyncservice_sync_renditionsIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties::getComAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs() const
{
    return m_Com_adobe_cq_dam_mac_sync_damsyncservice_replicate_thread_wait_ms;
}
void ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties::setComAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs(ConfigNodePropertyInteger const& value)
{
    m_Com_adobe_cq_dam_mac_sync_damsyncservice_replicate_thread_wait_ms = value;
    m_Com_adobe_cq_dam_mac_sync_damsyncservice_replicate_thread_wait_msIsSet = true;
}
bool ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties::comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMsIsSet() const
{
    return m_Com_adobe_cq_dam_mac_sync_damsyncservice_replicate_thread_wait_msIsSet;
}
void ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties::unsetCom_adobe_cq_dam_mac_sync_damsyncservice_replicate_thread_wait_ms()
{
    m_Com_adobe_cq_dam_mac_sync_damsyncservice_replicate_thread_wait_msIsSet = false;
}
ConfigNodePropertyDropDown ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties::getComAdobeCqDamMacSyncDamsyncservicePlatform() const
{
    return m_Com_adobe_cq_dam_mac_sync_damsyncservice_platform;
}
void ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties::setComAdobeCqDamMacSyncDamsyncservicePlatform(ConfigNodePropertyDropDown const& value)
{
    m_Com_adobe_cq_dam_mac_sync_damsyncservice_platform = value;
    m_Com_adobe_cq_dam_mac_sync_damsyncservice_platformIsSet = true;
}
bool ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties::comAdobeCqDamMacSyncDamsyncservicePlatformIsSet() const
{
    return m_Com_adobe_cq_dam_mac_sync_damsyncservice_platformIsSet;
}
void ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties::unsetCom_adobe_cq_dam_mac_sync_damsyncservice_platform()
{
    m_Com_adobe_cq_dam_mac_sync_damsyncservice_platformIsSet = false;
}

}
}
}
}

