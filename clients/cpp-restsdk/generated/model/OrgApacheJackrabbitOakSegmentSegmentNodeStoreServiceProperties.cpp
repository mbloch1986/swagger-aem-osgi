/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties()
{
    m_Repository_homeIsSet = false;
    m_Tarmk_modeIsSet = false;
    m_Tarmk_sizeIsSet = false;
    m_SegmentCache_sizeIsSet = false;
    m_StringCache_sizeIsSet = false;
    m_TemplateCache_sizeIsSet = false;
    m_StringDeduplicationCache_sizeIsSet = false;
    m_TemplateDeduplicationCache_sizeIsSet = false;
    m_NodeDeduplicationCache_sizeIsSet = false;
    m_PauseCompactionIsSet = false;
    m_Compaction_retryCountIsSet = false;
    m_Compaction_force_timeoutIsSet = false;
    m_Compaction_sizeDeltaEstimationIsSet = false;
    m_Compaction_disableEstimationIsSet = false;
    m_Compaction_retainedGenerationsIsSet = false;
    m_Compaction_memoryThresholdIsSet = false;
    m_Compaction_progressLogIsSet = false;
    m_StandbyIsSet = false;
    m_CustomBlobStoreIsSet = false;
    m_CustomSegmentStoreIsSet = false;
    m_SplitPersistenceIsSet = false;
    m_Repository_backup_dirIsSet = false;
    m_BlobGcMaxAgeInSecsIsSet = false;
    m_BlobTrackSnapshotIntervalInSecsIsSet = false;
}

OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::~OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties()
{
}

void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Repository_homeIsSet)
    {
        val[utility::conversions::to_string_t("repository.home")] = ModelBase::toJson(m_Repository_home);
    }
    if(m_Tarmk_modeIsSet)
    {
        val[utility::conversions::to_string_t("tarmk.mode")] = ModelBase::toJson(m_Tarmk_mode);
    }
    if(m_Tarmk_sizeIsSet)
    {
        val[utility::conversions::to_string_t("tarmk.size")] = ModelBase::toJson(m_Tarmk_size);
    }
    if(m_SegmentCache_sizeIsSet)
    {
        val[utility::conversions::to_string_t("segmentCache.size")] = ModelBase::toJson(m_SegmentCache_size);
    }
    if(m_StringCache_sizeIsSet)
    {
        val[utility::conversions::to_string_t("stringCache.size")] = ModelBase::toJson(m_StringCache_size);
    }
    if(m_TemplateCache_sizeIsSet)
    {
        val[utility::conversions::to_string_t("templateCache.size")] = ModelBase::toJson(m_TemplateCache_size);
    }
    if(m_StringDeduplicationCache_sizeIsSet)
    {
        val[utility::conversions::to_string_t("stringDeduplicationCache.size")] = ModelBase::toJson(m_StringDeduplicationCache_size);
    }
    if(m_TemplateDeduplicationCache_sizeIsSet)
    {
        val[utility::conversions::to_string_t("templateDeduplicationCache.size")] = ModelBase::toJson(m_TemplateDeduplicationCache_size);
    }
    if(m_NodeDeduplicationCache_sizeIsSet)
    {
        val[utility::conversions::to_string_t("nodeDeduplicationCache.size")] = ModelBase::toJson(m_NodeDeduplicationCache_size);
    }
    if(m_PauseCompactionIsSet)
    {
        val[utility::conversions::to_string_t("pauseCompaction")] = ModelBase::toJson(m_PauseCompaction);
    }
    if(m_Compaction_retryCountIsSet)
    {
        val[utility::conversions::to_string_t("compaction.retryCount")] = ModelBase::toJson(m_Compaction_retryCount);
    }
    if(m_Compaction_force_timeoutIsSet)
    {
        val[utility::conversions::to_string_t("compaction.force.timeout")] = ModelBase::toJson(m_Compaction_force_timeout);
    }
    if(m_Compaction_sizeDeltaEstimationIsSet)
    {
        val[utility::conversions::to_string_t("compaction.sizeDeltaEstimation")] = ModelBase::toJson(m_Compaction_sizeDeltaEstimation);
    }
    if(m_Compaction_disableEstimationIsSet)
    {
        val[utility::conversions::to_string_t("compaction.disableEstimation")] = ModelBase::toJson(m_Compaction_disableEstimation);
    }
    if(m_Compaction_retainedGenerationsIsSet)
    {
        val[utility::conversions::to_string_t("compaction.retainedGenerations")] = ModelBase::toJson(m_Compaction_retainedGenerations);
    }
    if(m_Compaction_memoryThresholdIsSet)
    {
        val[utility::conversions::to_string_t("compaction.memoryThreshold")] = ModelBase::toJson(m_Compaction_memoryThreshold);
    }
    if(m_Compaction_progressLogIsSet)
    {
        val[utility::conversions::to_string_t("compaction.progressLog")] = ModelBase::toJson(m_Compaction_progressLog);
    }
    if(m_StandbyIsSet)
    {
        val[utility::conversions::to_string_t("standby")] = ModelBase::toJson(m_Standby);
    }
    if(m_CustomBlobStoreIsSet)
    {
        val[utility::conversions::to_string_t("customBlobStore")] = ModelBase::toJson(m_CustomBlobStore);
    }
    if(m_CustomSegmentStoreIsSet)
    {
        val[utility::conversions::to_string_t("customSegmentStore")] = ModelBase::toJson(m_CustomSegmentStore);
    }
    if(m_SplitPersistenceIsSet)
    {
        val[utility::conversions::to_string_t("splitPersistence")] = ModelBase::toJson(m_SplitPersistence);
    }
    if(m_Repository_backup_dirIsSet)
    {
        val[utility::conversions::to_string_t("repository.backup.dir")] = ModelBase::toJson(m_Repository_backup_dir);
    }
    if(m_BlobGcMaxAgeInSecsIsSet)
    {
        val[utility::conversions::to_string_t("blobGcMaxAgeInSecs")] = ModelBase::toJson(m_BlobGcMaxAgeInSecs);
    }
    if(m_BlobTrackSnapshotIntervalInSecsIsSet)
    {
        val[utility::conversions::to_string_t("blobTrackSnapshotIntervalInSecs")] = ModelBase::toJson(m_BlobTrackSnapshotIntervalInSecs);
    }

    return val;
}

void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("repository.home")))
    {
        if(!val[utility::conversions::to_string_t("repository.home")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("repository.home")]);
            setRepositoryHome( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("tarmk.mode")))
    {
        if(!val[utility::conversions::to_string_t("tarmk.mode")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("tarmk.mode")]);
            setTarmkMode( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("tarmk.size")))
    {
        if(!val[utility::conversions::to_string_t("tarmk.size")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("tarmk.size")]);
            setTarmkSize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("segmentCache.size")))
    {
        if(!val[utility::conversions::to_string_t("segmentCache.size")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("segmentCache.size")]);
            setSegmentCacheSize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("stringCache.size")))
    {
        if(!val[utility::conversions::to_string_t("stringCache.size")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("stringCache.size")]);
            setStringCacheSize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("templateCache.size")))
    {
        if(!val[utility::conversions::to_string_t("templateCache.size")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("templateCache.size")]);
            setTemplateCacheSize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("stringDeduplicationCache.size")))
    {
        if(!val[utility::conversions::to_string_t("stringDeduplicationCache.size")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("stringDeduplicationCache.size")]);
            setStringDeduplicationCacheSize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("templateDeduplicationCache.size")))
    {
        if(!val[utility::conversions::to_string_t("templateDeduplicationCache.size")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("templateDeduplicationCache.size")]);
            setTemplateDeduplicationCacheSize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("nodeDeduplicationCache.size")))
    {
        if(!val[utility::conversions::to_string_t("nodeDeduplicationCache.size")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("nodeDeduplicationCache.size")]);
            setNodeDeduplicationCacheSize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pauseCompaction")))
    {
        if(!val[utility::conversions::to_string_t("pauseCompaction")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("pauseCompaction")]);
            setPauseCompaction( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("compaction.retryCount")))
    {
        if(!val[utility::conversions::to_string_t("compaction.retryCount")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("compaction.retryCount")]);
            setCompactionRetryCount( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("compaction.force.timeout")))
    {
        if(!val[utility::conversions::to_string_t("compaction.force.timeout")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("compaction.force.timeout")]);
            setCompactionForceTimeout( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("compaction.sizeDeltaEstimation")))
    {
        if(!val[utility::conversions::to_string_t("compaction.sizeDeltaEstimation")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("compaction.sizeDeltaEstimation")]);
            setCompactionSizeDeltaEstimation( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("compaction.disableEstimation")))
    {
        if(!val[utility::conversions::to_string_t("compaction.disableEstimation")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("compaction.disableEstimation")]);
            setCompactionDisableEstimation( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("compaction.retainedGenerations")))
    {
        if(!val[utility::conversions::to_string_t("compaction.retainedGenerations")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("compaction.retainedGenerations")]);
            setCompactionRetainedGenerations( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("compaction.memoryThreshold")))
    {
        if(!val[utility::conversions::to_string_t("compaction.memoryThreshold")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("compaction.memoryThreshold")]);
            setCompactionMemoryThreshold( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("compaction.progressLog")))
    {
        if(!val[utility::conversions::to_string_t("compaction.progressLog")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("compaction.progressLog")]);
            setCompactionProgressLog( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("standby")))
    {
        if(!val[utility::conversions::to_string_t("standby")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("standby")]);
            setStandby( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("customBlobStore")))
    {
        if(!val[utility::conversions::to_string_t("customBlobStore")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("customBlobStore")]);
            setCustomBlobStore( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("customSegmentStore")))
    {
        if(!val[utility::conversions::to_string_t("customSegmentStore")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("customSegmentStore")]);
            setCustomSegmentStore( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("splitPersistence")))
    {
        if(!val[utility::conversions::to_string_t("splitPersistence")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("splitPersistence")]);
            setSplitPersistence( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("repository.backup.dir")))
    {
        if(!val[utility::conversions::to_string_t("repository.backup.dir")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("repository.backup.dir")]);
            setRepositoryBackupDir( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("blobGcMaxAgeInSecs")))
    {
        if(!val[utility::conversions::to_string_t("blobGcMaxAgeInSecs")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("blobGcMaxAgeInSecs")]);
            setBlobGcMaxAgeInSecs( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("blobTrackSnapshotIntervalInSecs")))
    {
        if(!val[utility::conversions::to_string_t("blobTrackSnapshotIntervalInSecs")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("blobTrackSnapshotIntervalInSecs")]);
            setBlobTrackSnapshotIntervalInSecs( newItem );
        }
    }
}

void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Repository_homeIsSet)
    {
        if (m_Repository_home.get())
        {
            m_Repository_home->toMultipart(multipart, utility::conversions::to_string_t("repository.home."));
        }
    }
    if(m_Tarmk_modeIsSet)
    {
        if (m_Tarmk_mode.get())
        {
            m_Tarmk_mode->toMultipart(multipart, utility::conversions::to_string_t("tarmk.mode."));
        }
    }
    if(m_Tarmk_sizeIsSet)
    {
        if (m_Tarmk_size.get())
        {
            m_Tarmk_size->toMultipart(multipart, utility::conversions::to_string_t("tarmk.size."));
        }
    }
    if(m_SegmentCache_sizeIsSet)
    {
        if (m_SegmentCache_size.get())
        {
            m_SegmentCache_size->toMultipart(multipart, utility::conversions::to_string_t("segmentCache.size."));
        }
    }
    if(m_StringCache_sizeIsSet)
    {
        if (m_StringCache_size.get())
        {
            m_StringCache_size->toMultipart(multipart, utility::conversions::to_string_t("stringCache.size."));
        }
    }
    if(m_TemplateCache_sizeIsSet)
    {
        if (m_TemplateCache_size.get())
        {
            m_TemplateCache_size->toMultipart(multipart, utility::conversions::to_string_t("templateCache.size."));
        }
    }
    if(m_StringDeduplicationCache_sizeIsSet)
    {
        if (m_StringDeduplicationCache_size.get())
        {
            m_StringDeduplicationCache_size->toMultipart(multipart, utility::conversions::to_string_t("stringDeduplicationCache.size."));
        }
    }
    if(m_TemplateDeduplicationCache_sizeIsSet)
    {
        if (m_TemplateDeduplicationCache_size.get())
        {
            m_TemplateDeduplicationCache_size->toMultipart(multipart, utility::conversions::to_string_t("templateDeduplicationCache.size."));
        }
    }
    if(m_NodeDeduplicationCache_sizeIsSet)
    {
        if (m_NodeDeduplicationCache_size.get())
        {
            m_NodeDeduplicationCache_size->toMultipart(multipart, utility::conversions::to_string_t("nodeDeduplicationCache.size."));
        }
    }
    if(m_PauseCompactionIsSet)
    {
        if (m_PauseCompaction.get())
        {
            m_PauseCompaction->toMultipart(multipart, utility::conversions::to_string_t("pauseCompaction."));
        }
    }
    if(m_Compaction_retryCountIsSet)
    {
        if (m_Compaction_retryCount.get())
        {
            m_Compaction_retryCount->toMultipart(multipart, utility::conversions::to_string_t("compaction.retryCount."));
        }
    }
    if(m_Compaction_force_timeoutIsSet)
    {
        if (m_Compaction_force_timeout.get())
        {
            m_Compaction_force_timeout->toMultipart(multipart, utility::conversions::to_string_t("compaction.force.timeout."));
        }
    }
    if(m_Compaction_sizeDeltaEstimationIsSet)
    {
        if (m_Compaction_sizeDeltaEstimation.get())
        {
            m_Compaction_sizeDeltaEstimation->toMultipart(multipart, utility::conversions::to_string_t("compaction.sizeDeltaEstimation."));
        }
    }
    if(m_Compaction_disableEstimationIsSet)
    {
        if (m_Compaction_disableEstimation.get())
        {
            m_Compaction_disableEstimation->toMultipart(multipart, utility::conversions::to_string_t("compaction.disableEstimation."));
        }
    }
    if(m_Compaction_retainedGenerationsIsSet)
    {
        if (m_Compaction_retainedGenerations.get())
        {
            m_Compaction_retainedGenerations->toMultipart(multipart, utility::conversions::to_string_t("compaction.retainedGenerations."));
        }
    }
    if(m_Compaction_memoryThresholdIsSet)
    {
        if (m_Compaction_memoryThreshold.get())
        {
            m_Compaction_memoryThreshold->toMultipart(multipart, utility::conversions::to_string_t("compaction.memoryThreshold."));
        }
    }
    if(m_Compaction_progressLogIsSet)
    {
        if (m_Compaction_progressLog.get())
        {
            m_Compaction_progressLog->toMultipart(multipart, utility::conversions::to_string_t("compaction.progressLog."));
        }
    }
    if(m_StandbyIsSet)
    {
        if (m_Standby.get())
        {
            m_Standby->toMultipart(multipart, utility::conversions::to_string_t("standby."));
        }
    }
    if(m_CustomBlobStoreIsSet)
    {
        if (m_CustomBlobStore.get())
        {
            m_CustomBlobStore->toMultipart(multipart, utility::conversions::to_string_t("customBlobStore."));
        }
    }
    if(m_CustomSegmentStoreIsSet)
    {
        if (m_CustomSegmentStore.get())
        {
            m_CustomSegmentStore->toMultipart(multipart, utility::conversions::to_string_t("customSegmentStore."));
        }
    }
    if(m_SplitPersistenceIsSet)
    {
        if (m_SplitPersistence.get())
        {
            m_SplitPersistence->toMultipart(multipart, utility::conversions::to_string_t("splitPersistence."));
        }
    }
    if(m_Repository_backup_dirIsSet)
    {
        if (m_Repository_backup_dir.get())
        {
            m_Repository_backup_dir->toMultipart(multipart, utility::conversions::to_string_t("repository.backup.dir."));
        }
    }
    if(m_BlobGcMaxAgeInSecsIsSet)
    {
        if (m_BlobGcMaxAgeInSecs.get())
        {
            m_BlobGcMaxAgeInSecs->toMultipart(multipart, utility::conversions::to_string_t("blobGcMaxAgeInSecs."));
        }
    }
    if(m_BlobTrackSnapshotIntervalInSecsIsSet)
    {
        if (m_BlobTrackSnapshotIntervalInSecs.get())
        {
            m_BlobTrackSnapshotIntervalInSecs->toMultipart(multipart, utility::conversions::to_string_t("blobTrackSnapshotIntervalInSecs."));
        }
    }
}

void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("repository.home")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("repository.home")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("repository.home."));
            setRepositoryHome( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tarmk.mode")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("tarmk.mode")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("tarmk.mode."));
            setTarmkMode( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tarmk.size")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("tarmk.size")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("tarmk.size."));
            setTarmkSize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("segmentCache.size")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("segmentCache.size")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("segmentCache.size."));
            setSegmentCacheSize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("stringCache.size")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("stringCache.size")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("stringCache.size."));
            setStringCacheSize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("templateCache.size")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("templateCache.size")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("templateCache.size."));
            setTemplateCacheSize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("stringDeduplicationCache.size")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("stringDeduplicationCache.size")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("stringDeduplicationCache.size."));
            setStringDeduplicationCacheSize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("templateDeduplicationCache.size")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("templateDeduplicationCache.size")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("templateDeduplicationCache.size."));
            setTemplateDeduplicationCacheSize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nodeDeduplicationCache.size")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("nodeDeduplicationCache.size")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("nodeDeduplicationCache.size."));
            setNodeDeduplicationCacheSize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pauseCompaction")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("pauseCompaction")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("pauseCompaction."));
            setPauseCompaction( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("compaction.retryCount")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("compaction.retryCount")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("compaction.retryCount."));
            setCompactionRetryCount( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("compaction.force.timeout")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("compaction.force.timeout")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("compaction.force.timeout."));
            setCompactionForceTimeout( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("compaction.sizeDeltaEstimation")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("compaction.sizeDeltaEstimation")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("compaction.sizeDeltaEstimation."));
            setCompactionSizeDeltaEstimation( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("compaction.disableEstimation")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("compaction.disableEstimation")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("compaction.disableEstimation."));
            setCompactionDisableEstimation( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("compaction.retainedGenerations")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("compaction.retainedGenerations")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("compaction.retainedGenerations."));
            setCompactionRetainedGenerations( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("compaction.memoryThreshold")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("compaction.memoryThreshold")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("compaction.memoryThreshold."));
            setCompactionMemoryThreshold( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("compaction.progressLog")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("compaction.progressLog")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("compaction.progressLog."));
            setCompactionProgressLog( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("standby")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("standby")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("standby."));
            setStandby( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("customBlobStore")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("customBlobStore")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("customBlobStore."));
            setCustomBlobStore( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("customSegmentStore")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("customSegmentStore")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("customSegmentStore."));
            setCustomSegmentStore( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("splitPersistence")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("splitPersistence")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("splitPersistence."));
            setSplitPersistence( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("repository.backup.dir")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("repository.backup.dir")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("repository.backup.dir."));
            setRepositoryBackupDir( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("blobGcMaxAgeInSecs")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("blobGcMaxAgeInSecs")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("blobGcMaxAgeInSecs."));
            setBlobGcMaxAgeInSecs( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("blobTrackSnapshotIntervalInSecs")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("blobTrackSnapshotIntervalInSecs")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("blobTrackSnapshotIntervalInSecs."));
            setBlobTrackSnapshotIntervalInSecs( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::getRepositoryHome() const
{
    return m_Repository_home;
}


void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::setRepositoryHome(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Repository_home = value;
    m_Repository_homeIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::repositoryHomeIsSet() const
{
    return m_Repository_homeIsSet;
}

void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::unsetRepository_home()
{
    m_Repository_homeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::getTarmkMode() const
{
    return m_Tarmk_mode;
}


void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::setTarmkMode(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Tarmk_mode = value;
    m_Tarmk_modeIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::tarmkModeIsSet() const
{
    return m_Tarmk_modeIsSet;
}

void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::unsetTarmk_mode()
{
    m_Tarmk_modeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::getTarmkSize() const
{
    return m_Tarmk_size;
}


void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::setTarmkSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Tarmk_size = value;
    m_Tarmk_sizeIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::tarmkSizeIsSet() const
{
    return m_Tarmk_sizeIsSet;
}

void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::unsetTarmk_size()
{
    m_Tarmk_sizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::getSegmentCacheSize() const
{
    return m_SegmentCache_size;
}


void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::setSegmentCacheSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_SegmentCache_size = value;
    m_SegmentCache_sizeIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::segmentCacheSizeIsSet() const
{
    return m_SegmentCache_sizeIsSet;
}

void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::unsetSegmentCache_size()
{
    m_SegmentCache_sizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::getStringCacheSize() const
{
    return m_StringCache_size;
}


void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::setStringCacheSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_StringCache_size = value;
    m_StringCache_sizeIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::stringCacheSizeIsSet() const
{
    return m_StringCache_sizeIsSet;
}

void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::unsetStringCache_size()
{
    m_StringCache_sizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::getTemplateCacheSize() const
{
    return m_TemplateCache_size;
}


void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::setTemplateCacheSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_TemplateCache_size = value;
    m_TemplateCache_sizeIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::templateCacheSizeIsSet() const
{
    return m_TemplateCache_sizeIsSet;
}

void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::unsetTemplateCache_size()
{
    m_TemplateCache_sizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::getStringDeduplicationCacheSize() const
{
    return m_StringDeduplicationCache_size;
}


void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::setStringDeduplicationCacheSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_StringDeduplicationCache_size = value;
    m_StringDeduplicationCache_sizeIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::stringDeduplicationCacheSizeIsSet() const
{
    return m_StringDeduplicationCache_sizeIsSet;
}

void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::unsetStringDeduplicationCache_size()
{
    m_StringDeduplicationCache_sizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::getTemplateDeduplicationCacheSize() const
{
    return m_TemplateDeduplicationCache_size;
}


void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::setTemplateDeduplicationCacheSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_TemplateDeduplicationCache_size = value;
    m_TemplateDeduplicationCache_sizeIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::templateDeduplicationCacheSizeIsSet() const
{
    return m_TemplateDeduplicationCache_sizeIsSet;
}

void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::unsetTemplateDeduplicationCache_size()
{
    m_TemplateDeduplicationCache_sizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::getNodeDeduplicationCacheSize() const
{
    return m_NodeDeduplicationCache_size;
}


void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::setNodeDeduplicationCacheSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_NodeDeduplicationCache_size = value;
    m_NodeDeduplicationCache_sizeIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::nodeDeduplicationCacheSizeIsSet() const
{
    return m_NodeDeduplicationCache_sizeIsSet;
}

void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::unsetNodeDeduplicationCache_size()
{
    m_NodeDeduplicationCache_sizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::getPauseCompaction() const
{
    return m_PauseCompaction;
}


void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::setPauseCompaction(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_PauseCompaction = value;
    m_PauseCompactionIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::pauseCompactionIsSet() const
{
    return m_PauseCompactionIsSet;
}

void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::unsetPauseCompaction()
{
    m_PauseCompactionIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::getCompactionRetryCount() const
{
    return m_Compaction_retryCount;
}


void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::setCompactionRetryCount(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Compaction_retryCount = value;
    m_Compaction_retryCountIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::compactionRetryCountIsSet() const
{
    return m_Compaction_retryCountIsSet;
}

void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::unsetCompaction_retryCount()
{
    m_Compaction_retryCountIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::getCompactionForceTimeout() const
{
    return m_Compaction_force_timeout;
}


void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::setCompactionForceTimeout(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Compaction_force_timeout = value;
    m_Compaction_force_timeoutIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::compactionForceTimeoutIsSet() const
{
    return m_Compaction_force_timeoutIsSet;
}

void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::unsetCompaction_force_timeout()
{
    m_Compaction_force_timeoutIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::getCompactionSizeDeltaEstimation() const
{
    return m_Compaction_sizeDeltaEstimation;
}


void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::setCompactionSizeDeltaEstimation(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Compaction_sizeDeltaEstimation = value;
    m_Compaction_sizeDeltaEstimationIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::compactionSizeDeltaEstimationIsSet() const
{
    return m_Compaction_sizeDeltaEstimationIsSet;
}

void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::unsetCompaction_sizeDeltaEstimation()
{
    m_Compaction_sizeDeltaEstimationIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::getCompactionDisableEstimation() const
{
    return m_Compaction_disableEstimation;
}


void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::setCompactionDisableEstimation(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Compaction_disableEstimation = value;
    m_Compaction_disableEstimationIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::compactionDisableEstimationIsSet() const
{
    return m_Compaction_disableEstimationIsSet;
}

void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::unsetCompaction_disableEstimation()
{
    m_Compaction_disableEstimationIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::getCompactionRetainedGenerations() const
{
    return m_Compaction_retainedGenerations;
}


void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::setCompactionRetainedGenerations(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Compaction_retainedGenerations = value;
    m_Compaction_retainedGenerationsIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::compactionRetainedGenerationsIsSet() const
{
    return m_Compaction_retainedGenerationsIsSet;
}

void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::unsetCompaction_retainedGenerations()
{
    m_Compaction_retainedGenerationsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::getCompactionMemoryThreshold() const
{
    return m_Compaction_memoryThreshold;
}


void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::setCompactionMemoryThreshold(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Compaction_memoryThreshold = value;
    m_Compaction_memoryThresholdIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::compactionMemoryThresholdIsSet() const
{
    return m_Compaction_memoryThresholdIsSet;
}

void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::unsetCompaction_memoryThreshold()
{
    m_Compaction_memoryThresholdIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::getCompactionProgressLog() const
{
    return m_Compaction_progressLog;
}


void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::setCompactionProgressLog(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Compaction_progressLog = value;
    m_Compaction_progressLogIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::compactionProgressLogIsSet() const
{
    return m_Compaction_progressLogIsSet;
}

void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::unsetCompaction_progressLog()
{
    m_Compaction_progressLogIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::getStandby() const
{
    return m_Standby;
}


void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::setStandby(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Standby = value;
    m_StandbyIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::standbyIsSet() const
{
    return m_StandbyIsSet;
}

void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::unsetStandby()
{
    m_StandbyIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::getCustomBlobStore() const
{
    return m_CustomBlobStore;
}


void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::setCustomBlobStore(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_CustomBlobStore = value;
    m_CustomBlobStoreIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::customBlobStoreIsSet() const
{
    return m_CustomBlobStoreIsSet;
}

void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::unsetCustomBlobStore()
{
    m_CustomBlobStoreIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::getCustomSegmentStore() const
{
    return m_CustomSegmentStore;
}


void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::setCustomSegmentStore(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_CustomSegmentStore = value;
    m_CustomSegmentStoreIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::customSegmentStoreIsSet() const
{
    return m_CustomSegmentStoreIsSet;
}

void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::unsetCustomSegmentStore()
{
    m_CustomSegmentStoreIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::getSplitPersistence() const
{
    return m_SplitPersistence;
}


void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::setSplitPersistence(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_SplitPersistence = value;
    m_SplitPersistenceIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::splitPersistenceIsSet() const
{
    return m_SplitPersistenceIsSet;
}

void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::unsetSplitPersistence()
{
    m_SplitPersistenceIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::getRepositoryBackupDir() const
{
    return m_Repository_backup_dir;
}


void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::setRepositoryBackupDir(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Repository_backup_dir = value;
    m_Repository_backup_dirIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::repositoryBackupDirIsSet() const
{
    return m_Repository_backup_dirIsSet;
}

void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::unsetRepository_backup_dir()
{
    m_Repository_backup_dirIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::getBlobGcMaxAgeInSecs() const
{
    return m_BlobGcMaxAgeInSecs;
}


void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::setBlobGcMaxAgeInSecs(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_BlobGcMaxAgeInSecs = value;
    m_BlobGcMaxAgeInSecsIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::blobGcMaxAgeInSecsIsSet() const
{
    return m_BlobGcMaxAgeInSecsIsSet;
}

void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::unsetBlobGcMaxAgeInSecs()
{
    m_BlobGcMaxAgeInSecsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::getBlobTrackSnapshotIntervalInSecs() const
{
    return m_BlobTrackSnapshotIntervalInSecs;
}


void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::setBlobTrackSnapshotIntervalInSecs(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_BlobTrackSnapshotIntervalInSecs = value;
    m_BlobTrackSnapshotIntervalInSecsIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::blobTrackSnapshotIntervalInSecsIsSet() const
{
    return m_BlobTrackSnapshotIntervalInSecsIsSet;
}

void OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties::unsetBlobTrackSnapshotIntervalInSecs()
{
    m_BlobTrackSnapshotIntervalInSecsIsSet = false;
}

}
}
}
}

