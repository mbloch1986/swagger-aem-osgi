/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties::OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties::OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties() {
    init();
}

OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties::~OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties() {
    this->cleanup();
}

void
OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties::init() {
    whitelist_name = new OAIConfigNodePropertyString();
    m_whitelist_name_isSet = false;
    whitelist_bundles = new OAIConfigNodePropertyArray();
    m_whitelist_bundles_isSet = false;
}

void
OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties::cleanup() {
    if(whitelist_name != nullptr) { 
        delete whitelist_name;
    }
    if(whitelist_bundles != nullptr) { 
        delete whitelist_bundles;
    }
}

OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties*
OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&whitelist_name, pJson["whitelist.name"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&whitelist_bundles, pJson["whitelist.bundles"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
}

QString
OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties::asJsonObject() {
    QJsonObject obj;
    if((whitelist_name != nullptr) && (whitelist_name->isSet())){
        toJsonValue(QString("whitelist.name"), whitelist_name, obj, QString("OAIConfigNodePropertyString"));
    }
    if((whitelist_bundles != nullptr) && (whitelist_bundles->isSet())){
        toJsonValue(QString("whitelist.bundles"), whitelist_bundles, obj, QString("OAIConfigNodePropertyArray"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties::getWhitelistName() {
    return whitelist_name;
}
void
OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties::setWhitelistName(OAIConfigNodePropertyString* whitelist_name) {
    this->whitelist_name = whitelist_name;
    this->m_whitelist_name_isSet = true;
}

OAIConfigNodePropertyArray*
OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties::getWhitelistBundles() {
    return whitelist_bundles;
}
void
OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties::setWhitelistBundles(OAIConfigNodePropertyArray* whitelist_bundles) {
    this->whitelist_bundles = whitelist_bundles;
    this->m_whitelist_bundles_isSet = true;
}


bool
OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(whitelist_name != nullptr && whitelist_name->isSet()){ isObjectUpdated = true; break;}
        if(whitelist_bundles != nullptr && whitelist_bundles->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

