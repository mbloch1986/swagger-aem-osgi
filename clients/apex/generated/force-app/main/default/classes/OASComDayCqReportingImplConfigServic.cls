/*
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OAS-api/OAS-codegen.git
 * Do not edit the class manually.
 */

/**
 * OASComDayCqReportingImplConfigServic
 */
public class OASComDayCqReportingImplConfigServic implements OAS.MappedProperties {
    /**
     * Get repconfTimezone
     * @return repconfTimezone
     */
    public OASConfigNodePropertyString repconfTimezone { get; set; }

    /**
     * Get repconfLocale
     * @return repconfLocale
     */
    public OASConfigNodePropertyString repconfLocale { get; set; }

    /**
     * Get repconfSnapshots
     * @return repconfSnapshots
     */
    public OASConfigNodePropertyString repconfSnapshots { get; set; }

    /**
     * Get repconfRepdir
     * @return repconfRepdir
     */
    public OASConfigNodePropertyString repconfRepdir { get; set; }

    /**
     * Get repconfHourofday
     * @return repconfHourofday
     */
    public OASConfigNodePropertyInteger repconfHourofday { get; set; }

    /**
     * Get repconfMinofhour
     * @return repconfMinofhour
     */
    public OASConfigNodePropertyInteger repconfMinofhour { get; set; }

    /**
     * Get repconfMaxrows
     * @return repconfMaxrows
     */
    public OASConfigNodePropertyInteger repconfMaxrows { get; set; }

    /**
     * Get repconfFakedata
     * @return repconfFakedata
     */
    public OASConfigNodePropertyBoolean repconfFakedata { get; set; }

    /**
     * Get repconfSnapshotuser
     * @return repconfSnapshotuser
     */
    public OASConfigNodePropertyString repconfSnapshotuser { get; set; }

    /**
     * Get repconfEnforcesnapshotuser
     * @return repconfEnforcesnapshotuser
     */
    public OASConfigNodePropertyBoolean repconfEnforcesnapshotuser { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'repconf.timezone' => 'repconfTimezone',
        'repconf.locale' => 'repconfLocale',
        'repconf.snapshots' => 'repconfSnapshots',
        'repconf.repdir' => 'repconfRepdir',
        'repconf.hourofday' => 'repconfHourofday',
        'repconf.minofhour' => 'repconfMinofhour',
        'repconf.maxrows' => 'repconfMaxrows',
        'repconf.fakedata' => 'repconfFakedata',
        'repconf.snapshotuser' => 'repconfSnapshotuser',
        'repconf.enforcesnapshotuser' => 'repconfEnforcesnapshotuser'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASComDayCqReportingImplConfigServic getExample() {
        OASComDayCqReportingImplConfigServic comDayCqReportingImplConfigServiceImplProperties = new OASComDayCqReportingImplConfigServic();
          comDayCqReportingImplConfigServiceImplProperties.repconfTimezone = OASConfigNodePropertyString.getExample();
          comDayCqReportingImplConfigServiceImplProperties.repconfLocale = OASConfigNodePropertyString.getExample();
          comDayCqReportingImplConfigServiceImplProperties.repconfSnapshots = OASConfigNodePropertyString.getExample();
          comDayCqReportingImplConfigServiceImplProperties.repconfRepdir = OASConfigNodePropertyString.getExample();
          comDayCqReportingImplConfigServiceImplProperties.repconfHourofday = OASConfigNodePropertyInteger.getExample();
          comDayCqReportingImplConfigServiceImplProperties.repconfMinofhour = OASConfigNodePropertyInteger.getExample();
          comDayCqReportingImplConfigServiceImplProperties.repconfMaxrows = OASConfigNodePropertyInteger.getExample();
          comDayCqReportingImplConfigServiceImplProperties.repconfFakedata = OASConfigNodePropertyBoolean.getExample();
          comDayCqReportingImplConfigServiceImplProperties.repconfSnapshotuser = OASConfigNodePropertyString.getExample();
          comDayCqReportingImplConfigServiceImplProperties.repconfEnforcesnapshotuser = OASConfigNodePropertyBoolean.getExample();
        return comDayCqReportingImplConfigServiceImplProperties;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASComDayCqReportingImplConfigServic) {           
            OASComDayCqReportingImplConfigServic comDayCqReportingImplConfigServiceImplProperties = (OASComDayCqReportingImplConfigServic) obj;
            return this.repconfTimezone == comDayCqReportingImplConfigServiceImplProperties.repconfTimezone
                && this.repconfLocale == comDayCqReportingImplConfigServiceImplProperties.repconfLocale
                && this.repconfSnapshots == comDayCqReportingImplConfigServiceImplProperties.repconfSnapshots
                && this.repconfRepdir == comDayCqReportingImplConfigServiceImplProperties.repconfRepdir
                && this.repconfHourofday == comDayCqReportingImplConfigServiceImplProperties.repconfHourofday
                && this.repconfMinofhour == comDayCqReportingImplConfigServiceImplProperties.repconfMinofhour
                && this.repconfMaxrows == comDayCqReportingImplConfigServiceImplProperties.repconfMaxrows
                && this.repconfFakedata == comDayCqReportingImplConfigServiceImplProperties.repconfFakedata
                && this.repconfSnapshotuser == comDayCqReportingImplConfigServiceImplProperties.repconfSnapshotuser
                && this.repconfEnforcesnapshotuser == comDayCqReportingImplConfigServiceImplProperties.repconfEnforcesnapshotuser;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (repconfTimezone == null ? 0 : System.hashCode(repconfTimezone));
        hashCode = (17 * hashCode) + (repconfLocale == null ? 0 : System.hashCode(repconfLocale));
        hashCode = (17 * hashCode) + (repconfSnapshots == null ? 0 : System.hashCode(repconfSnapshots));
        hashCode = (17 * hashCode) + (repconfRepdir == null ? 0 : System.hashCode(repconfRepdir));
        hashCode = (17 * hashCode) + (repconfHourofday == null ? 0 : System.hashCode(repconfHourofday));
        hashCode = (17 * hashCode) + (repconfMinofhour == null ? 0 : System.hashCode(repconfMinofhour));
        hashCode = (17 * hashCode) + (repconfMaxrows == null ? 0 : System.hashCode(repconfMaxrows));
        hashCode = (17 * hashCode) + (repconfFakedata == null ? 0 : System.hashCode(repconfFakedata));
        hashCode = (17 * hashCode) + (repconfSnapshotuser == null ? 0 : System.hashCode(repconfSnapshotuser));
        hashCode = (17 * hashCode) + (repconfEnforcesnapshotuser == null ? 0 : System.hashCode(repconfEnforcesnapshotuser));
        return hashCode;
    }
}

