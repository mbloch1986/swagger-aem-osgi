/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteOptoutImplOptOutServiceImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteOptoutImplOptOutServiceImplProperties::OAIComAdobeGraniteOptoutImplOptOutServiceImplProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeGraniteOptoutImplOptOutServiceImplProperties::OAIComAdobeGraniteOptoutImplOptOutServiceImplProperties() {
    this->init();
}

OAIComAdobeGraniteOptoutImplOptOutServiceImplProperties::~OAIComAdobeGraniteOptoutImplOptOutServiceImplProperties() {
    
}

void
OAIComAdobeGraniteOptoutImplOptOutServiceImplProperties::init() {
    m_optout_cookies_isSet = false;
    m_optout_headers_isSet = false;
    m_optout_whitelist_cookies_isSet = false;
}

void
OAIComAdobeGraniteOptoutImplOptOutServiceImplProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeGraniteOptoutImplOptOutServiceImplProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(optout_cookies, json[QString("optout.cookies")]);
    
    ::OpenAPI::fromJsonValue(optout_headers, json[QString("optout.headers")]);
    
    ::OpenAPI::fromJsonValue(optout_whitelist_cookies, json[QString("optout.whitelist.cookies")]);
    
}

QString
OAIComAdobeGraniteOptoutImplOptOutServiceImplProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteOptoutImplOptOutServiceImplProperties::asJsonObject() const {
    QJsonObject obj;
	if(optout_cookies.isSet()){
        obj.insert(QString("optout.cookies"), ::OpenAPI::toJsonValue(optout_cookies));
    }
	if(optout_headers.isSet()){
        obj.insert(QString("optout.headers"), ::OpenAPI::toJsonValue(optout_headers));
    }
	if(optout_whitelist_cookies.isSet()){
        obj.insert(QString("optout.whitelist.cookies"), ::OpenAPI::toJsonValue(optout_whitelist_cookies));
    }
    return obj;
}

OAIConfigNodePropertyArray
OAIComAdobeGraniteOptoutImplOptOutServiceImplProperties::getOptoutCookies() const {
    return optout_cookies;
}
void
OAIComAdobeGraniteOptoutImplOptOutServiceImplProperties::setOptoutCookies(const OAIConfigNodePropertyArray &optout_cookies) {
    this->optout_cookies = optout_cookies;
    this->m_optout_cookies_isSet = true;
}

OAIConfigNodePropertyArray
OAIComAdobeGraniteOptoutImplOptOutServiceImplProperties::getOptoutHeaders() const {
    return optout_headers;
}
void
OAIComAdobeGraniteOptoutImplOptOutServiceImplProperties::setOptoutHeaders(const OAIConfigNodePropertyArray &optout_headers) {
    this->optout_headers = optout_headers;
    this->m_optout_headers_isSet = true;
}

OAIConfigNodePropertyArray
OAIComAdobeGraniteOptoutImplOptOutServiceImplProperties::getOptoutWhitelistCookies() const {
    return optout_whitelist_cookies;
}
void
OAIComAdobeGraniteOptoutImplOptOutServiceImplProperties::setOptoutWhitelistCookies(const OAIConfigNodePropertyArray &optout_whitelist_cookies) {
    this->optout_whitelist_cookies = optout_whitelist_cookies;
    this->m_optout_whitelist_cookies_isSet = true;
}


bool
OAIComAdobeGraniteOptoutImplOptOutServiceImplProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(optout_cookies.isSet()){ isObjectUpdated = true; break;}
    
        if(optout_headers.isSet()){ isObjectUpdated = true; break;}
    
        if(optout_whitelist_cookies.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

