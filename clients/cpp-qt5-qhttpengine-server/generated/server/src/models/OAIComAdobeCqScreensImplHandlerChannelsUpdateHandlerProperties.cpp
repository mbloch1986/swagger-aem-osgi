/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties::OAIComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties::OAIComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties() {
    this->init();
}

OAIComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties::~OAIComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties() {
    
}

void
OAIComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties::init() {
    m_cq_pagesupdatehandler_imageresourcetypes_isSet = false;
    m_cq_pagesupdatehandler_productresourcetypes_isSet = false;
    m_cq_pagesupdatehandler_videoresourcetypes_isSet = false;
    m_cq_pagesupdatehandler_dynamicsequenceresourcetypes_isSet = false;
    m_cq_pagesupdatehandler_previewmodepaths_isSet = false;
}

void
OAIComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(cq_pagesupdatehandler_imageresourcetypes, json[QString("cq.pagesupdatehandler.imageresourcetypes")]);
    
    ::OpenAPI::fromJsonValue(cq_pagesupdatehandler_productresourcetypes, json[QString("cq.pagesupdatehandler.productresourcetypes")]);
    
    ::OpenAPI::fromJsonValue(cq_pagesupdatehandler_videoresourcetypes, json[QString("cq.pagesupdatehandler.videoresourcetypes")]);
    
    ::OpenAPI::fromJsonValue(cq_pagesupdatehandler_dynamicsequenceresourcetypes, json[QString("cq.pagesupdatehandler.dynamicsequenceresourcetypes")]);
    
    ::OpenAPI::fromJsonValue(cq_pagesupdatehandler_previewmodepaths, json[QString("cq.pagesupdatehandler.previewmodepaths")]);
    
}

QString
OAIComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties::asJsonObject() const {
    QJsonObject obj;
	if(cq_pagesupdatehandler_imageresourcetypes.isSet()){
        obj.insert(QString("cq.pagesupdatehandler.imageresourcetypes"), ::OpenAPI::toJsonValue(cq_pagesupdatehandler_imageresourcetypes));
    }
	if(cq_pagesupdatehandler_productresourcetypes.isSet()){
        obj.insert(QString("cq.pagesupdatehandler.productresourcetypes"), ::OpenAPI::toJsonValue(cq_pagesupdatehandler_productresourcetypes));
    }
	if(cq_pagesupdatehandler_videoresourcetypes.isSet()){
        obj.insert(QString("cq.pagesupdatehandler.videoresourcetypes"), ::OpenAPI::toJsonValue(cq_pagesupdatehandler_videoresourcetypes));
    }
	if(cq_pagesupdatehandler_dynamicsequenceresourcetypes.isSet()){
        obj.insert(QString("cq.pagesupdatehandler.dynamicsequenceresourcetypes"), ::OpenAPI::toJsonValue(cq_pagesupdatehandler_dynamicsequenceresourcetypes));
    }
	if(cq_pagesupdatehandler_previewmodepaths.isSet()){
        obj.insert(QString("cq.pagesupdatehandler.previewmodepaths"), ::OpenAPI::toJsonValue(cq_pagesupdatehandler_previewmodepaths));
    }
    return obj;
}

OAIConfigNodePropertyArray
OAIComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties::getCqPagesupdatehandlerImageresourcetypes() const {
    return cq_pagesupdatehandler_imageresourcetypes;
}
void
OAIComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties::setCqPagesupdatehandlerImageresourcetypes(const OAIConfigNodePropertyArray &cq_pagesupdatehandler_imageresourcetypes) {
    this->cq_pagesupdatehandler_imageresourcetypes = cq_pagesupdatehandler_imageresourcetypes;
    this->m_cq_pagesupdatehandler_imageresourcetypes_isSet = true;
}

OAIConfigNodePropertyArray
OAIComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties::getCqPagesupdatehandlerProductresourcetypes() const {
    return cq_pagesupdatehandler_productresourcetypes;
}
void
OAIComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties::setCqPagesupdatehandlerProductresourcetypes(const OAIConfigNodePropertyArray &cq_pagesupdatehandler_productresourcetypes) {
    this->cq_pagesupdatehandler_productresourcetypes = cq_pagesupdatehandler_productresourcetypes;
    this->m_cq_pagesupdatehandler_productresourcetypes_isSet = true;
}

OAIConfigNodePropertyArray
OAIComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties::getCqPagesupdatehandlerVideoresourcetypes() const {
    return cq_pagesupdatehandler_videoresourcetypes;
}
void
OAIComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties::setCqPagesupdatehandlerVideoresourcetypes(const OAIConfigNodePropertyArray &cq_pagesupdatehandler_videoresourcetypes) {
    this->cq_pagesupdatehandler_videoresourcetypes = cq_pagesupdatehandler_videoresourcetypes;
    this->m_cq_pagesupdatehandler_videoresourcetypes_isSet = true;
}

OAIConfigNodePropertyArray
OAIComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties::getCqPagesupdatehandlerDynamicsequenceresourcetypes() const {
    return cq_pagesupdatehandler_dynamicsequenceresourcetypes;
}
void
OAIComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties::setCqPagesupdatehandlerDynamicsequenceresourcetypes(const OAIConfigNodePropertyArray &cq_pagesupdatehandler_dynamicsequenceresourcetypes) {
    this->cq_pagesupdatehandler_dynamicsequenceresourcetypes = cq_pagesupdatehandler_dynamicsequenceresourcetypes;
    this->m_cq_pagesupdatehandler_dynamicsequenceresourcetypes_isSet = true;
}

OAIConfigNodePropertyArray
OAIComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties::getCqPagesupdatehandlerPreviewmodepaths() const {
    return cq_pagesupdatehandler_previewmodepaths;
}
void
OAIComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties::setCqPagesupdatehandlerPreviewmodepaths(const OAIConfigNodePropertyArray &cq_pagesupdatehandler_previewmodepaths) {
    this->cq_pagesupdatehandler_previewmodepaths = cq_pagesupdatehandler_previewmodepaths;
    this->m_cq_pagesupdatehandler_previewmodepaths_isSet = true;
}


bool
OAIComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(cq_pagesupdatehandler_imageresourcetypes.isSet()){ isObjectUpdated = true; break;}
    
        if(cq_pagesupdatehandler_productresourcetypes.isSet()){ isObjectUpdated = true; break;}
    
        if(cq_pagesupdatehandler_videoresourcetypes.isSet()){ isObjectUpdated = true; break;}
    
        if(cq_pagesupdatehandler_dynamicsequenceresourcetypes.isSet()){ isObjectUpdated = true; break;}
    
        if(cq_pagesupdatehandler_previewmodepaths.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

