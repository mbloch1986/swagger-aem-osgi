<?php
/**
 * ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'comDayCqRewriterLinkcheckerImplLinkCheckerImplProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'scheduler_period' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'scheduler_concurrent' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'service_bad_link_tolerance_interval' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'service_check_override_patterns' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'service_cache_broken_internal_links' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'service_special_link_prefix' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'service_special_link_patterns' => '\OpenAPI\Client\Model\ConfigNodePropertyArray'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'scheduler_period' => null,
        'scheduler_concurrent' => null,
        'service_bad_link_tolerance_interval' => null,
        'service_check_override_patterns' => null,
        'service_cache_broken_internal_links' => null,
        'service_special_link_prefix' => null,
        'service_special_link_patterns' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'scheduler_period' => 'scheduler.period',
        'scheduler_concurrent' => 'scheduler.concurrent',
        'service_bad_link_tolerance_interval' => 'service.bad_link_tolerance_interval',
        'service_check_override_patterns' => 'service.check_override_patterns',
        'service_cache_broken_internal_links' => 'service.cache_broken_internal_links',
        'service_special_link_prefix' => 'service.special_link_prefix',
        'service_special_link_patterns' => 'service.special_link_patterns'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'scheduler_period' => 'setSchedulerPeriod',
        'scheduler_concurrent' => 'setSchedulerConcurrent',
        'service_bad_link_tolerance_interval' => 'setServiceBadLinkToleranceInterval',
        'service_check_override_patterns' => 'setServiceCheckOverridePatterns',
        'service_cache_broken_internal_links' => 'setServiceCacheBrokenInternalLinks',
        'service_special_link_prefix' => 'setServiceSpecialLinkPrefix',
        'service_special_link_patterns' => 'setServiceSpecialLinkPatterns'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'scheduler_period' => 'getSchedulerPeriod',
        'scheduler_concurrent' => 'getSchedulerConcurrent',
        'service_bad_link_tolerance_interval' => 'getServiceBadLinkToleranceInterval',
        'service_check_override_patterns' => 'getServiceCheckOverridePatterns',
        'service_cache_broken_internal_links' => 'getServiceCacheBrokenInternalLinks',
        'service_special_link_prefix' => 'getServiceSpecialLinkPrefix',
        'service_special_link_patterns' => 'getServiceSpecialLinkPatterns'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['scheduler_period'] = isset($data['scheduler_period']) ? $data['scheduler_period'] : null;
        $this->container['scheduler_concurrent'] = isset($data['scheduler_concurrent']) ? $data['scheduler_concurrent'] : null;
        $this->container['service_bad_link_tolerance_interval'] = isset($data['service_bad_link_tolerance_interval']) ? $data['service_bad_link_tolerance_interval'] : null;
        $this->container['service_check_override_patterns'] = isset($data['service_check_override_patterns']) ? $data['service_check_override_patterns'] : null;
        $this->container['service_cache_broken_internal_links'] = isset($data['service_cache_broken_internal_links']) ? $data['service_cache_broken_internal_links'] : null;
        $this->container['service_special_link_prefix'] = isset($data['service_special_link_prefix']) ? $data['service_special_link_prefix'] : null;
        $this->container['service_special_link_patterns'] = isset($data['service_special_link_patterns']) ? $data['service_special_link_patterns'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets scheduler_period
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getSchedulerPeriod()
    {
        return $this->container['scheduler_period'];
    }

    /**
     * Sets scheduler_period
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $scheduler_period scheduler_period
     *
     * @return $this
     */
    public function setSchedulerPeriod($scheduler_period)
    {
        $this->container['scheduler_period'] = $scheduler_period;

        return $this;
    }

    /**
     * Gets scheduler_concurrent
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getSchedulerConcurrent()
    {
        return $this->container['scheduler_concurrent'];
    }

    /**
     * Sets scheduler_concurrent
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $scheduler_concurrent scheduler_concurrent
     *
     * @return $this
     */
    public function setSchedulerConcurrent($scheduler_concurrent)
    {
        $this->container['scheduler_concurrent'] = $scheduler_concurrent;

        return $this;
    }

    /**
     * Gets service_bad_link_tolerance_interval
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getServiceBadLinkToleranceInterval()
    {
        return $this->container['service_bad_link_tolerance_interval'];
    }

    /**
     * Sets service_bad_link_tolerance_interval
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $service_bad_link_tolerance_interval service_bad_link_tolerance_interval
     *
     * @return $this
     */
    public function setServiceBadLinkToleranceInterval($service_bad_link_tolerance_interval)
    {
        $this->container['service_bad_link_tolerance_interval'] = $service_bad_link_tolerance_interval;

        return $this;
    }

    /**
     * Gets service_check_override_patterns
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getServiceCheckOverridePatterns()
    {
        return $this->container['service_check_override_patterns'];
    }

    /**
     * Sets service_check_override_patterns
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $service_check_override_patterns service_check_override_patterns
     *
     * @return $this
     */
    public function setServiceCheckOverridePatterns($service_check_override_patterns)
    {
        $this->container['service_check_override_patterns'] = $service_check_override_patterns;

        return $this;
    }

    /**
     * Gets service_cache_broken_internal_links
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getServiceCacheBrokenInternalLinks()
    {
        return $this->container['service_cache_broken_internal_links'];
    }

    /**
     * Sets service_cache_broken_internal_links
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $service_cache_broken_internal_links service_cache_broken_internal_links
     *
     * @return $this
     */
    public function setServiceCacheBrokenInternalLinks($service_cache_broken_internal_links)
    {
        $this->container['service_cache_broken_internal_links'] = $service_cache_broken_internal_links;

        return $this;
    }

    /**
     * Gets service_special_link_prefix
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getServiceSpecialLinkPrefix()
    {
        return $this->container['service_special_link_prefix'];
    }

    /**
     * Sets service_special_link_prefix
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $service_special_link_prefix service_special_link_prefix
     *
     * @return $this
     */
    public function setServiceSpecialLinkPrefix($service_special_link_prefix)
    {
        $this->container['service_special_link_prefix'] = $service_special_link_prefix;

        return $this;
    }

    /**
     * Gets service_special_link_patterns
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getServiceSpecialLinkPatterns()
    {
        return $this->container['service_special_link_patterns'];
    }

    /**
     * Sets service_special_link_patterns
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $service_special_link_patterns service_special_link_patterns
     *
     * @return $this
     */
    public function setServiceSpecialLinkPatterns($service_special_link_patterns)
    {
        $this->container['service_special_link_patterns'] = $service_special_link_patterns;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


