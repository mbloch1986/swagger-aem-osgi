/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ComAdobeCqDeserfwImplDeserializationFirewallImplProperties : IEquatable<ComAdobeCqDeserfwImplDeserializationFirewallImplProperties>
    { 
        /// <summary>
        /// Gets or Sets FirewallDeserializationWhitelist
        /// </summary>
        [DataMember(Name="firewall.deserialization.whitelist")]
        public ConfigNodePropertyArray FirewallDeserializationWhitelist { get; set; }

        /// <summary>
        /// Gets or Sets FirewallDeserializationBlacklist
        /// </summary>
        [DataMember(Name="firewall.deserialization.blacklist")]
        public ConfigNodePropertyArray FirewallDeserializationBlacklist { get; set; }

        /// <summary>
        /// Gets or Sets FirewallDeserializationDiagnostics
        /// </summary>
        [DataMember(Name="firewall.deserialization.diagnostics")]
        public ConfigNodePropertyString FirewallDeserializationDiagnostics { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeCqDeserfwImplDeserializationFirewallImplProperties {\n");
            sb.Append("  FirewallDeserializationWhitelist: ").Append(FirewallDeserializationWhitelist).Append("\n");
            sb.Append("  FirewallDeserializationBlacklist: ").Append(FirewallDeserializationBlacklist).Append("\n");
            sb.Append("  FirewallDeserializationDiagnostics: ").Append(FirewallDeserializationDiagnostics).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComAdobeCqDeserfwImplDeserializationFirewallImplProperties)obj);
        }

        /// <summary>
        /// Returns true if ComAdobeCqDeserfwImplDeserializationFirewallImplProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ComAdobeCqDeserfwImplDeserializationFirewallImplProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeCqDeserfwImplDeserializationFirewallImplProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FirewallDeserializationWhitelist == other.FirewallDeserializationWhitelist ||
                    FirewallDeserializationWhitelist != null &&
                    FirewallDeserializationWhitelist.Equals(other.FirewallDeserializationWhitelist)
                ) && 
                (
                    FirewallDeserializationBlacklist == other.FirewallDeserializationBlacklist ||
                    FirewallDeserializationBlacklist != null &&
                    FirewallDeserializationBlacklist.Equals(other.FirewallDeserializationBlacklist)
                ) && 
                (
                    FirewallDeserializationDiagnostics == other.FirewallDeserializationDiagnostics ||
                    FirewallDeserializationDiagnostics != null &&
                    FirewallDeserializationDiagnostics.Equals(other.FirewallDeserializationDiagnostics)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (FirewallDeserializationWhitelist != null)
                    hashCode = hashCode * 59 + FirewallDeserializationWhitelist.GetHashCode();
                    if (FirewallDeserializationBlacklist != null)
                    hashCode = hashCode * 59 + FirewallDeserializationBlacklist.GetHashCode();
                    if (FirewallDeserializationDiagnostics != null)
                    hashCode = hashCode * 59 + FirewallDeserializationDiagnostics.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComAdobeCqDeserfwImplDeserializationFirewallImplProperties left, ComAdobeCqDeserfwImplDeserializationFirewallImplProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComAdobeCqDeserfwImplDeserializationFirewallImplProperties left, ComAdobeCqDeserfwImplDeserializationFirewallImplProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
