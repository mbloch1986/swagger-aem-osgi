<?php
/**
 * OrgApacheSlingCommonsMetricsInternalLogReporterProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OrgApacheSlingCommonsMetricsInternalLogReporterProperties Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrgApacheSlingCommonsMetricsInternalLogReporterProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'orgApacheSlingCommonsMetricsInternalLogReporterProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'period' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'time_unit' => '\OpenAPI\Client\Model\ConfigNodePropertyDropDown',
        'level' => '\OpenAPI\Client\Model\ConfigNodePropertyDropDown',
        'logger_name' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'prefix' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'pattern' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'registry_name' => '\OpenAPI\Client\Model\ConfigNodePropertyString'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'period' => null,
        'time_unit' => null,
        'level' => null,
        'logger_name' => null,
        'prefix' => null,
        'pattern' => null,
        'registry_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'period' => 'period',
        'time_unit' => 'timeUnit',
        'level' => 'level',
        'logger_name' => 'loggerName',
        'prefix' => 'prefix',
        'pattern' => 'pattern',
        'registry_name' => 'registryName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'period' => 'setPeriod',
        'time_unit' => 'setTimeUnit',
        'level' => 'setLevel',
        'logger_name' => 'setLoggerName',
        'prefix' => 'setPrefix',
        'pattern' => 'setPattern',
        'registry_name' => 'setRegistryName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'period' => 'getPeriod',
        'time_unit' => 'getTimeUnit',
        'level' => 'getLevel',
        'logger_name' => 'getLoggerName',
        'prefix' => 'getPrefix',
        'pattern' => 'getPattern',
        'registry_name' => 'getRegistryName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['period'] = isset($data['period']) ? $data['period'] : null;
        $this->container['time_unit'] = isset($data['time_unit']) ? $data['time_unit'] : null;
        $this->container['level'] = isset($data['level']) ? $data['level'] : null;
        $this->container['logger_name'] = isset($data['logger_name']) ? $data['logger_name'] : null;
        $this->container['prefix'] = isset($data['prefix']) ? $data['prefix'] : null;
        $this->container['pattern'] = isset($data['pattern']) ? $data['pattern'] : null;
        $this->container['registry_name'] = isset($data['registry_name']) ? $data['registry_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets period
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getPeriod()
    {
        return $this->container['period'];
    }

    /**
     * Sets period
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $period period
     *
     * @return $this
     */
    public function setPeriod($period)
    {
        $this->container['period'] = $period;

        return $this;
    }

    /**
     * Gets time_unit
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyDropDown|null
     */
    public function getTimeUnit()
    {
        return $this->container['time_unit'];
    }

    /**
     * Sets time_unit
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyDropDown|null $time_unit time_unit
     *
     * @return $this
     */
    public function setTimeUnit($time_unit)
    {
        $this->container['time_unit'] = $time_unit;

        return $this;
    }

    /**
     * Gets level
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyDropDown|null
     */
    public function getLevel()
    {
        return $this->container['level'];
    }

    /**
     * Sets level
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyDropDown|null $level level
     *
     * @return $this
     */
    public function setLevel($level)
    {
        $this->container['level'] = $level;

        return $this;
    }

    /**
     * Gets logger_name
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getLoggerName()
    {
        return $this->container['logger_name'];
    }

    /**
     * Sets logger_name
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $logger_name logger_name
     *
     * @return $this
     */
    public function setLoggerName($logger_name)
    {
        $this->container['logger_name'] = $logger_name;

        return $this;
    }

    /**
     * Gets prefix
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getPrefix()
    {
        return $this->container['prefix'];
    }

    /**
     * Sets prefix
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $prefix prefix
     *
     * @return $this
     */
    public function setPrefix($prefix)
    {
        $this->container['prefix'] = $prefix;

        return $this;
    }

    /**
     * Gets pattern
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getPattern()
    {
        return $this->container['pattern'];
    }

    /**
     * Sets pattern
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $pattern pattern
     *
     * @return $this
     */
    public function setPattern($pattern)
    {
        $this->container['pattern'] = $pattern;

        return $this;
    }

    /**
     * Gets registry_name
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getRegistryName()
    {
        return $this->container['registry_name'];
    }

    /**
     * Sets registry_name
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $registry_name registry_name
     *
     * @return $this
     */
    public function setRegistryName($registry_name)
    {
        $this->container['registry_name'] = $registry_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


