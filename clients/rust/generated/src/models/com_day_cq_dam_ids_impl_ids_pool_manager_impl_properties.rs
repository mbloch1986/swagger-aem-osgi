/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqDamIdsImplIdsPoolManagerImplProperties {
  #[serde(rename = "max.errors.to.blacklist")]
  max_errors_to_blacklist: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "retry.interval.to.whitelist")]
  retry_interval_to_whitelist: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "connect.timeout")]
  connect_timeout: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "socket.timeout")]
  socket_timeout: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "process.label")]
  process_label: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "connection.use.max")]
  connection_use_max: Option<::models::ConfigNodePropertyInteger>
}

impl ComDayCqDamIdsImplIdsPoolManagerImplProperties {
  pub fn new() -> ComDayCqDamIdsImplIdsPoolManagerImplProperties {
    ComDayCqDamIdsImplIdsPoolManagerImplProperties {
      max_errors_to_blacklist: None,
      retry_interval_to_whitelist: None,
      connect_timeout: None,
      socket_timeout: None,
      process_label: None,
      connection_use_max: None
    }
  }

  pub fn set_max_errors_to_blacklist(&mut self, max_errors_to_blacklist: ::models::ConfigNodePropertyInteger) {
    self.max_errors_to_blacklist = Some(max_errors_to_blacklist);
  }

  pub fn with_max_errors_to_blacklist(mut self, max_errors_to_blacklist: ::models::ConfigNodePropertyInteger) -> ComDayCqDamIdsImplIdsPoolManagerImplProperties {
    self.max_errors_to_blacklist = Some(max_errors_to_blacklist);
    self
  }

  pub fn max_errors_to_blacklist(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.max_errors_to_blacklist.as_ref()
  }

  pub fn reset_max_errors_to_blacklist(&mut self) {
    self.max_errors_to_blacklist = None;
  }

  pub fn set_retry_interval_to_whitelist(&mut self, retry_interval_to_whitelist: ::models::ConfigNodePropertyInteger) {
    self.retry_interval_to_whitelist = Some(retry_interval_to_whitelist);
  }

  pub fn with_retry_interval_to_whitelist(mut self, retry_interval_to_whitelist: ::models::ConfigNodePropertyInteger) -> ComDayCqDamIdsImplIdsPoolManagerImplProperties {
    self.retry_interval_to_whitelist = Some(retry_interval_to_whitelist);
    self
  }

  pub fn retry_interval_to_whitelist(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.retry_interval_to_whitelist.as_ref()
  }

  pub fn reset_retry_interval_to_whitelist(&mut self) {
    self.retry_interval_to_whitelist = None;
  }

  pub fn set_connect_timeout(&mut self, connect_timeout: ::models::ConfigNodePropertyInteger) {
    self.connect_timeout = Some(connect_timeout);
  }

  pub fn with_connect_timeout(mut self, connect_timeout: ::models::ConfigNodePropertyInteger) -> ComDayCqDamIdsImplIdsPoolManagerImplProperties {
    self.connect_timeout = Some(connect_timeout);
    self
  }

  pub fn connect_timeout(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.connect_timeout.as_ref()
  }

  pub fn reset_connect_timeout(&mut self) {
    self.connect_timeout = None;
  }

  pub fn set_socket_timeout(&mut self, socket_timeout: ::models::ConfigNodePropertyInteger) {
    self.socket_timeout = Some(socket_timeout);
  }

  pub fn with_socket_timeout(mut self, socket_timeout: ::models::ConfigNodePropertyInteger) -> ComDayCqDamIdsImplIdsPoolManagerImplProperties {
    self.socket_timeout = Some(socket_timeout);
    self
  }

  pub fn socket_timeout(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.socket_timeout.as_ref()
  }

  pub fn reset_socket_timeout(&mut self) {
    self.socket_timeout = None;
  }

  pub fn set_process_label(&mut self, process_label: ::models::ConfigNodePropertyString) {
    self.process_label = Some(process_label);
  }

  pub fn with_process_label(mut self, process_label: ::models::ConfigNodePropertyString) -> ComDayCqDamIdsImplIdsPoolManagerImplProperties {
    self.process_label = Some(process_label);
    self
  }

  pub fn process_label(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.process_label.as_ref()
  }

  pub fn reset_process_label(&mut self) {
    self.process_label = None;
  }

  pub fn set_connection_use_max(&mut self, connection_use_max: ::models::ConfigNodePropertyInteger) {
    self.connection_use_max = Some(connection_use_max);
  }

  pub fn with_connection_use_max(mut self, connection_use_max: ::models::ConfigNodePropertyInteger) -> ComDayCqDamIdsImplIdsPoolManagerImplProperties {
    self.connection_use_max = Some(connection_use_max);
    self
  }

  pub fn connection_use_max(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.connection_use_max.as_ref()
  }

  pub fn reset_connection_use_max(&mut self) {
    self.connection_use_max = None;
  }

}



