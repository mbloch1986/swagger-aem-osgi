/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqMailerDefaultMailServiceProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqMailerDefaultMailServiceProperties::ComDayCqMailerDefaultMailServiceProperties()
{
    m_Smtp_hostIsSet = false;
    m_Smtp_portIsSet = false;
    m_Smtp_userIsSet = false;
    m_Smtp_passwordIsSet = false;
    m_From_addressIsSet = false;
    m_Smtp_sslIsSet = false;
    m_Smtp_starttlsIsSet = false;
    m_Debug_emailIsSet = false;
}

ComDayCqMailerDefaultMailServiceProperties::~ComDayCqMailerDefaultMailServiceProperties()
{
}

void ComDayCqMailerDefaultMailServiceProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqMailerDefaultMailServiceProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Smtp_hostIsSet)
    {
        val[utility::conversions::to_string_t("smtp.host")] = ModelBase::toJson(m_Smtp_host);
    }
    if(m_Smtp_portIsSet)
    {
        val[utility::conversions::to_string_t("smtp.port")] = ModelBase::toJson(m_Smtp_port);
    }
    if(m_Smtp_userIsSet)
    {
        val[utility::conversions::to_string_t("smtp.user")] = ModelBase::toJson(m_Smtp_user);
    }
    if(m_Smtp_passwordIsSet)
    {
        val[utility::conversions::to_string_t("smtp.password")] = ModelBase::toJson(m_Smtp_password);
    }
    if(m_From_addressIsSet)
    {
        val[utility::conversions::to_string_t("from.address")] = ModelBase::toJson(m_From_address);
    }
    if(m_Smtp_sslIsSet)
    {
        val[utility::conversions::to_string_t("smtp.ssl")] = ModelBase::toJson(m_Smtp_ssl);
    }
    if(m_Smtp_starttlsIsSet)
    {
        val[utility::conversions::to_string_t("smtp.starttls")] = ModelBase::toJson(m_Smtp_starttls);
    }
    if(m_Debug_emailIsSet)
    {
        val[utility::conversions::to_string_t("debug.email")] = ModelBase::toJson(m_Debug_email);
    }

    return val;
}

void ComDayCqMailerDefaultMailServiceProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("smtp.host")))
    {
        if(!val[utility::conversions::to_string_t("smtp.host")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("smtp.host")]);
            setSmtpHost( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("smtp.port")))
    {
        if(!val[utility::conversions::to_string_t("smtp.port")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("smtp.port")]);
            setSmtpPort( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("smtp.user")))
    {
        if(!val[utility::conversions::to_string_t("smtp.user")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("smtp.user")]);
            setSmtpUser( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("smtp.password")))
    {
        if(!val[utility::conversions::to_string_t("smtp.password")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("smtp.password")]);
            setSmtpPassword( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("from.address")))
    {
        if(!val[utility::conversions::to_string_t("from.address")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("from.address")]);
            setFromAddress( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("smtp.ssl")))
    {
        if(!val[utility::conversions::to_string_t("smtp.ssl")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("smtp.ssl")]);
            setSmtpSsl( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("smtp.starttls")))
    {
        if(!val[utility::conversions::to_string_t("smtp.starttls")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("smtp.starttls")]);
            setSmtpStarttls( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("debug.email")))
    {
        if(!val[utility::conversions::to_string_t("debug.email")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("debug.email")]);
            setDebugEmail( newItem );
        }
    }
}

void ComDayCqMailerDefaultMailServiceProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Smtp_hostIsSet)
    {
        if (m_Smtp_host.get())
        {
            m_Smtp_host->toMultipart(multipart, utility::conversions::to_string_t("smtp.host."));
        }
    }
    if(m_Smtp_portIsSet)
    {
        if (m_Smtp_port.get())
        {
            m_Smtp_port->toMultipart(multipart, utility::conversions::to_string_t("smtp.port."));
        }
    }
    if(m_Smtp_userIsSet)
    {
        if (m_Smtp_user.get())
        {
            m_Smtp_user->toMultipart(multipart, utility::conversions::to_string_t("smtp.user."));
        }
    }
    if(m_Smtp_passwordIsSet)
    {
        if (m_Smtp_password.get())
        {
            m_Smtp_password->toMultipart(multipart, utility::conversions::to_string_t("smtp.password."));
        }
    }
    if(m_From_addressIsSet)
    {
        if (m_From_address.get())
        {
            m_From_address->toMultipart(multipart, utility::conversions::to_string_t("from.address."));
        }
    }
    if(m_Smtp_sslIsSet)
    {
        if (m_Smtp_ssl.get())
        {
            m_Smtp_ssl->toMultipart(multipart, utility::conversions::to_string_t("smtp.ssl."));
        }
    }
    if(m_Smtp_starttlsIsSet)
    {
        if (m_Smtp_starttls.get())
        {
            m_Smtp_starttls->toMultipart(multipart, utility::conversions::to_string_t("smtp.starttls."));
        }
    }
    if(m_Debug_emailIsSet)
    {
        if (m_Debug_email.get())
        {
            m_Debug_email->toMultipart(multipart, utility::conversions::to_string_t("debug.email."));
        }
    }
}

void ComDayCqMailerDefaultMailServiceProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("smtp.host")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("smtp.host")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("smtp.host."));
            setSmtpHost( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("smtp.port")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("smtp.port")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("smtp.port."));
            setSmtpPort( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("smtp.user")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("smtp.user")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("smtp.user."));
            setSmtpUser( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("smtp.password")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("smtp.password")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("smtp.password."));
            setSmtpPassword( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("from.address")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("from.address")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("from.address."));
            setFromAddress( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("smtp.ssl")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("smtp.ssl")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("smtp.ssl."));
            setSmtpSsl( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("smtp.starttls")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("smtp.starttls")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("smtp.starttls."));
            setSmtpStarttls( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("debug.email")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("debug.email")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("debug.email."));
            setDebugEmail( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqMailerDefaultMailServiceProperties::getSmtpHost() const
{
    return m_Smtp_host;
}


void ComDayCqMailerDefaultMailServiceProperties::setSmtpHost(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Smtp_host = value;
    m_Smtp_hostIsSet = true;
}
bool ComDayCqMailerDefaultMailServiceProperties::smtpHostIsSet() const
{
    return m_Smtp_hostIsSet;
}

void ComDayCqMailerDefaultMailServiceProperties::unsetSmtp_host()
{
    m_Smtp_hostIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqMailerDefaultMailServiceProperties::getSmtpPort() const
{
    return m_Smtp_port;
}


void ComDayCqMailerDefaultMailServiceProperties::setSmtpPort(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Smtp_port = value;
    m_Smtp_portIsSet = true;
}
bool ComDayCqMailerDefaultMailServiceProperties::smtpPortIsSet() const
{
    return m_Smtp_portIsSet;
}

void ComDayCqMailerDefaultMailServiceProperties::unsetSmtp_port()
{
    m_Smtp_portIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqMailerDefaultMailServiceProperties::getSmtpUser() const
{
    return m_Smtp_user;
}


void ComDayCqMailerDefaultMailServiceProperties::setSmtpUser(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Smtp_user = value;
    m_Smtp_userIsSet = true;
}
bool ComDayCqMailerDefaultMailServiceProperties::smtpUserIsSet() const
{
    return m_Smtp_userIsSet;
}

void ComDayCqMailerDefaultMailServiceProperties::unsetSmtp_user()
{
    m_Smtp_userIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqMailerDefaultMailServiceProperties::getSmtpPassword() const
{
    return m_Smtp_password;
}


void ComDayCqMailerDefaultMailServiceProperties::setSmtpPassword(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Smtp_password = value;
    m_Smtp_passwordIsSet = true;
}
bool ComDayCqMailerDefaultMailServiceProperties::smtpPasswordIsSet() const
{
    return m_Smtp_passwordIsSet;
}

void ComDayCqMailerDefaultMailServiceProperties::unsetSmtp_password()
{
    m_Smtp_passwordIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqMailerDefaultMailServiceProperties::getFromAddress() const
{
    return m_From_address;
}


void ComDayCqMailerDefaultMailServiceProperties::setFromAddress(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_From_address = value;
    m_From_addressIsSet = true;
}
bool ComDayCqMailerDefaultMailServiceProperties::fromAddressIsSet() const
{
    return m_From_addressIsSet;
}

void ComDayCqMailerDefaultMailServiceProperties::unsetFrom_address()
{
    m_From_addressIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqMailerDefaultMailServiceProperties::getSmtpSsl() const
{
    return m_Smtp_ssl;
}


void ComDayCqMailerDefaultMailServiceProperties::setSmtpSsl(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Smtp_ssl = value;
    m_Smtp_sslIsSet = true;
}
bool ComDayCqMailerDefaultMailServiceProperties::smtpSslIsSet() const
{
    return m_Smtp_sslIsSet;
}

void ComDayCqMailerDefaultMailServiceProperties::unsetSmtp_ssl()
{
    m_Smtp_sslIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqMailerDefaultMailServiceProperties::getSmtpStarttls() const
{
    return m_Smtp_starttls;
}


void ComDayCqMailerDefaultMailServiceProperties::setSmtpStarttls(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Smtp_starttls = value;
    m_Smtp_starttlsIsSet = true;
}
bool ComDayCqMailerDefaultMailServiceProperties::smtpStarttlsIsSet() const
{
    return m_Smtp_starttlsIsSet;
}

void ComDayCqMailerDefaultMailServiceProperties::unsetSmtp_starttls()
{
    m_Smtp_starttlsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqMailerDefaultMailServiceProperties::getDebugEmail() const
{
    return m_Debug_email;
}


void ComDayCqMailerDefaultMailServiceProperties::setDebugEmail(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Debug_email = value;
    m_Debug_emailIsSet = true;
}
bool ComDayCqMailerDefaultMailServiceProperties::debugEmailIsSet() const
{
    return m_Debug_emailIsSet;
}

void ComDayCqMailerDefaultMailServiceProperties::unsetDebug_email()
{
    m_Debug_emailIsSet = false;
}

}
}
}
}

