/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties::ComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties()
{
    m_Reportingservices_proxy_whitelistIsSet = false;
    
}

ComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties::~ComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties()
{
}

void ComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Reportingservices_proxy_whitelistIsSet)
    {
        val["reportingservices.proxy.whitelist"] = ModelBase::toJson(m_Reportingservices_proxy_whitelist);
    }
    

    return val;
}

void ComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties::fromJson(nlohmann::json& val)
{
    if(val.find("reportingservices.proxy.whitelist") != val.end())
    {
        if(!val["reportingservices.proxy.whitelist"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["reportingservices.proxy.whitelist"]);
            setReportingservicesProxyWhitelist( newItem );
        }
        
    }
    
}


ConfigNodePropertyArray ComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties::getReportingservicesProxyWhitelist() const
{
    return m_Reportingservices_proxy_whitelist;
}
void ComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties::setReportingservicesProxyWhitelist(ConfigNodePropertyArray const& value)
{
    m_Reportingservices_proxy_whitelist = value;
    m_Reportingservices_proxy_whitelistIsSet = true;
}
bool ComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties::reportingservicesProxyWhitelistIsSet() const
{
    return m_Reportingservices_proxy_whitelistIsSet;
}
void ComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties::unsetReportingservices_proxy_whitelist()
{
    m_Reportingservices_proxy_whitelistIsSet = false;
}

}
}
}
}

