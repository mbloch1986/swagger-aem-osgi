/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeGraniteAuthOauthAccesstokenProviderProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeGraniteAuthOauthAccesstokenProviderProperties::ComAdobeGraniteAuthOauthAccesstokenProviderProperties()
{
    m_NameIsSet = false;
    m_Auth_token_provider_titleIsSet = false;
    m_Auth_token_provider_default_claimsIsSet = false;
    m_Auth_token_provider_endpointIsSet = false;
    m_Auth_access_token_requestIsSet = false;
    m_Auth_token_provider_keypair_aliasIsSet = false;
    m_Auth_token_provider_conn_timeoutIsSet = false;
    m_Auth_token_provider_so_timeoutIsSet = false;
    m_Auth_token_provider_client_idIsSet = false;
    m_Auth_token_provider_scopeIsSet = false;
    m_Auth_token_provider_reuse_access_tokenIsSet = false;
    m_Auth_token_provider_relaxed_sslIsSet = false;
    m_Token_request_customizer_typeIsSet = false;
    m_Auth_token_validator_typeIsSet = false;
    
}

ComAdobeGraniteAuthOauthAccesstokenProviderProperties::~ComAdobeGraniteAuthOauthAccesstokenProviderProperties()
{
}

void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeGraniteAuthOauthAccesstokenProviderProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_NameIsSet)
    {
        val["name"] = ModelBase::toJson(m_Name);
    }
    if(m_Auth_token_provider_titleIsSet)
    {
        val["auth.token.provider.title"] = ModelBase::toJson(m_Auth_token_provider_title);
    }
    if(m_Auth_token_provider_default_claimsIsSet)
    {
        val["auth.token.provider.default.claims"] = ModelBase::toJson(m_Auth_token_provider_default_claims);
    }
    if(m_Auth_token_provider_endpointIsSet)
    {
        val["auth.token.provider.endpoint"] = ModelBase::toJson(m_Auth_token_provider_endpoint);
    }
    if(m_Auth_access_token_requestIsSet)
    {
        val["auth.access.token.request"] = ModelBase::toJson(m_Auth_access_token_request);
    }
    if(m_Auth_token_provider_keypair_aliasIsSet)
    {
        val["auth.token.provider.keypair.alias"] = ModelBase::toJson(m_Auth_token_provider_keypair_alias);
    }
    if(m_Auth_token_provider_conn_timeoutIsSet)
    {
        val["auth.token.provider.conn.timeout"] = ModelBase::toJson(m_Auth_token_provider_conn_timeout);
    }
    if(m_Auth_token_provider_so_timeoutIsSet)
    {
        val["auth.token.provider.so.timeout"] = ModelBase::toJson(m_Auth_token_provider_so_timeout);
    }
    if(m_Auth_token_provider_client_idIsSet)
    {
        val["auth.token.provider.client.id"] = ModelBase::toJson(m_Auth_token_provider_client_id);
    }
    if(m_Auth_token_provider_scopeIsSet)
    {
        val["auth.token.provider.scope"] = ModelBase::toJson(m_Auth_token_provider_scope);
    }
    if(m_Auth_token_provider_reuse_access_tokenIsSet)
    {
        val["auth.token.provider.reuse.access.token"] = ModelBase::toJson(m_Auth_token_provider_reuse_access_token);
    }
    if(m_Auth_token_provider_relaxed_sslIsSet)
    {
        val["auth.token.provider.relaxed.ssl"] = ModelBase::toJson(m_Auth_token_provider_relaxed_ssl);
    }
    if(m_Token_request_customizer_typeIsSet)
    {
        val["token.request.customizer.type"] = ModelBase::toJson(m_Token_request_customizer_type);
    }
    if(m_Auth_token_validator_typeIsSet)
    {
        val["auth.token.validator.type"] = ModelBase::toJson(m_Auth_token_validator_type);
    }
    

    return val;
}

void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::fromJson(nlohmann::json& val)
{
    if(val.find("name") != val.end())
    {
        if(!val["name"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["name"]);
            setName( newItem );
        }
        
    }
    if(val.find("auth.token.provider.title") != val.end())
    {
        if(!val["auth.token.provider.title"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["auth.token.provider.title"]);
            setAuthTokenProviderTitle( newItem );
        }
        
    }
    if(val.find("auth.token.provider.default.claims") != val.end())
    {
        if(!val["auth.token.provider.default.claims"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["auth.token.provider.default.claims"]);
            setAuthTokenProviderDefaultClaims( newItem );
        }
        
    }
    if(val.find("auth.token.provider.endpoint") != val.end())
    {
        if(!val["auth.token.provider.endpoint"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["auth.token.provider.endpoint"]);
            setAuthTokenProviderEndpoint( newItem );
        }
        
    }
    if(val.find("auth.access.token.request") != val.end())
    {
        if(!val["auth.access.token.request"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["auth.access.token.request"]);
            setAuthAccessTokenRequest( newItem );
        }
        
    }
    if(val.find("auth.token.provider.keypair.alias") != val.end())
    {
        if(!val["auth.token.provider.keypair.alias"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["auth.token.provider.keypair.alias"]);
            setAuthTokenProviderKeypairAlias( newItem );
        }
        
    }
    if(val.find("auth.token.provider.conn.timeout") != val.end())
    {
        if(!val["auth.token.provider.conn.timeout"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["auth.token.provider.conn.timeout"]);
            setAuthTokenProviderConnTimeout( newItem );
        }
        
    }
    if(val.find("auth.token.provider.so.timeout") != val.end())
    {
        if(!val["auth.token.provider.so.timeout"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["auth.token.provider.so.timeout"]);
            setAuthTokenProviderSoTimeout( newItem );
        }
        
    }
    if(val.find("auth.token.provider.client.id") != val.end())
    {
        if(!val["auth.token.provider.client.id"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["auth.token.provider.client.id"]);
            setAuthTokenProviderClientId( newItem );
        }
        
    }
    if(val.find("auth.token.provider.scope") != val.end())
    {
        if(!val["auth.token.provider.scope"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["auth.token.provider.scope"]);
            setAuthTokenProviderScope( newItem );
        }
        
    }
    if(val.find("auth.token.provider.reuse.access.token") != val.end())
    {
        if(!val["auth.token.provider.reuse.access.token"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["auth.token.provider.reuse.access.token"]);
            setAuthTokenProviderReuseAccessToken( newItem );
        }
        
    }
    if(val.find("auth.token.provider.relaxed.ssl") != val.end())
    {
        if(!val["auth.token.provider.relaxed.ssl"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["auth.token.provider.relaxed.ssl"]);
            setAuthTokenProviderRelaxedSsl( newItem );
        }
        
    }
    if(val.find("token.request.customizer.type") != val.end())
    {
        if(!val["token.request.customizer.type"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["token.request.customizer.type"]);
            setTokenRequestCustomizerType( newItem );
        }
        
    }
    if(val.find("auth.token.validator.type") != val.end())
    {
        if(!val["auth.token.validator.type"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["auth.token.validator.type"]);
            setAuthTokenValidatorType( newItem );
        }
        
    }
    
}


ConfigNodePropertyString ComAdobeGraniteAuthOauthAccesstokenProviderProperties::getName() const
{
    return m_Name;
}
void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::setName(ConfigNodePropertyString const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool ComAdobeGraniteAuthOauthAccesstokenProviderProperties::nameIsSet() const
{
    return m_NameIsSet;
}
void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::unsetName()
{
    m_NameIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteAuthOauthAccesstokenProviderProperties::getAuthTokenProviderTitle() const
{
    return m_Auth_token_provider_title;
}
void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::setAuthTokenProviderTitle(ConfigNodePropertyString const& value)
{
    m_Auth_token_provider_title = value;
    m_Auth_token_provider_titleIsSet = true;
}
bool ComAdobeGraniteAuthOauthAccesstokenProviderProperties::authTokenProviderTitleIsSet() const
{
    return m_Auth_token_provider_titleIsSet;
}
void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::unsetAuth_token_provider_title()
{
    m_Auth_token_provider_titleIsSet = false;
}
ConfigNodePropertyArray ComAdobeGraniteAuthOauthAccesstokenProviderProperties::getAuthTokenProviderDefaultClaims() const
{
    return m_Auth_token_provider_default_claims;
}
void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::setAuthTokenProviderDefaultClaims(ConfigNodePropertyArray const& value)
{
    m_Auth_token_provider_default_claims = value;
    m_Auth_token_provider_default_claimsIsSet = true;
}
bool ComAdobeGraniteAuthOauthAccesstokenProviderProperties::authTokenProviderDefaultClaimsIsSet() const
{
    return m_Auth_token_provider_default_claimsIsSet;
}
void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::unsetAuth_token_provider_default_claims()
{
    m_Auth_token_provider_default_claimsIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteAuthOauthAccesstokenProviderProperties::getAuthTokenProviderEndpoint() const
{
    return m_Auth_token_provider_endpoint;
}
void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::setAuthTokenProviderEndpoint(ConfigNodePropertyString const& value)
{
    m_Auth_token_provider_endpoint = value;
    m_Auth_token_provider_endpointIsSet = true;
}
bool ComAdobeGraniteAuthOauthAccesstokenProviderProperties::authTokenProviderEndpointIsSet() const
{
    return m_Auth_token_provider_endpointIsSet;
}
void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::unsetAuth_token_provider_endpoint()
{
    m_Auth_token_provider_endpointIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteAuthOauthAccesstokenProviderProperties::getAuthAccessTokenRequest() const
{
    return m_Auth_access_token_request;
}
void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::setAuthAccessTokenRequest(ConfigNodePropertyString const& value)
{
    m_Auth_access_token_request = value;
    m_Auth_access_token_requestIsSet = true;
}
bool ComAdobeGraniteAuthOauthAccesstokenProviderProperties::authAccessTokenRequestIsSet() const
{
    return m_Auth_access_token_requestIsSet;
}
void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::unsetAuth_access_token_request()
{
    m_Auth_access_token_requestIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteAuthOauthAccesstokenProviderProperties::getAuthTokenProviderKeypairAlias() const
{
    return m_Auth_token_provider_keypair_alias;
}
void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::setAuthTokenProviderKeypairAlias(ConfigNodePropertyString const& value)
{
    m_Auth_token_provider_keypair_alias = value;
    m_Auth_token_provider_keypair_aliasIsSet = true;
}
bool ComAdobeGraniteAuthOauthAccesstokenProviderProperties::authTokenProviderKeypairAliasIsSet() const
{
    return m_Auth_token_provider_keypair_aliasIsSet;
}
void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::unsetAuth_token_provider_keypair_alias()
{
    m_Auth_token_provider_keypair_aliasIsSet = false;
}
ConfigNodePropertyInteger ComAdobeGraniteAuthOauthAccesstokenProviderProperties::getAuthTokenProviderConnTimeout() const
{
    return m_Auth_token_provider_conn_timeout;
}
void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::setAuthTokenProviderConnTimeout(ConfigNodePropertyInteger const& value)
{
    m_Auth_token_provider_conn_timeout = value;
    m_Auth_token_provider_conn_timeoutIsSet = true;
}
bool ComAdobeGraniteAuthOauthAccesstokenProviderProperties::authTokenProviderConnTimeoutIsSet() const
{
    return m_Auth_token_provider_conn_timeoutIsSet;
}
void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::unsetAuth_token_provider_conn_timeout()
{
    m_Auth_token_provider_conn_timeoutIsSet = false;
}
ConfigNodePropertyInteger ComAdobeGraniteAuthOauthAccesstokenProviderProperties::getAuthTokenProviderSoTimeout() const
{
    return m_Auth_token_provider_so_timeout;
}
void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::setAuthTokenProviderSoTimeout(ConfigNodePropertyInteger const& value)
{
    m_Auth_token_provider_so_timeout = value;
    m_Auth_token_provider_so_timeoutIsSet = true;
}
bool ComAdobeGraniteAuthOauthAccesstokenProviderProperties::authTokenProviderSoTimeoutIsSet() const
{
    return m_Auth_token_provider_so_timeoutIsSet;
}
void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::unsetAuth_token_provider_so_timeout()
{
    m_Auth_token_provider_so_timeoutIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteAuthOauthAccesstokenProviderProperties::getAuthTokenProviderClientId() const
{
    return m_Auth_token_provider_client_id;
}
void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::setAuthTokenProviderClientId(ConfigNodePropertyString const& value)
{
    m_Auth_token_provider_client_id = value;
    m_Auth_token_provider_client_idIsSet = true;
}
bool ComAdobeGraniteAuthOauthAccesstokenProviderProperties::authTokenProviderClientIdIsSet() const
{
    return m_Auth_token_provider_client_idIsSet;
}
void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::unsetAuth_token_provider_client_id()
{
    m_Auth_token_provider_client_idIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteAuthOauthAccesstokenProviderProperties::getAuthTokenProviderScope() const
{
    return m_Auth_token_provider_scope;
}
void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::setAuthTokenProviderScope(ConfigNodePropertyString const& value)
{
    m_Auth_token_provider_scope = value;
    m_Auth_token_provider_scopeIsSet = true;
}
bool ComAdobeGraniteAuthOauthAccesstokenProviderProperties::authTokenProviderScopeIsSet() const
{
    return m_Auth_token_provider_scopeIsSet;
}
void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::unsetAuth_token_provider_scope()
{
    m_Auth_token_provider_scopeIsSet = false;
}
ConfigNodePropertyBoolean ComAdobeGraniteAuthOauthAccesstokenProviderProperties::getAuthTokenProviderReuseAccessToken() const
{
    return m_Auth_token_provider_reuse_access_token;
}
void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::setAuthTokenProviderReuseAccessToken(ConfigNodePropertyBoolean const& value)
{
    m_Auth_token_provider_reuse_access_token = value;
    m_Auth_token_provider_reuse_access_tokenIsSet = true;
}
bool ComAdobeGraniteAuthOauthAccesstokenProviderProperties::authTokenProviderReuseAccessTokenIsSet() const
{
    return m_Auth_token_provider_reuse_access_tokenIsSet;
}
void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::unsetAuth_token_provider_reuse_access_token()
{
    m_Auth_token_provider_reuse_access_tokenIsSet = false;
}
ConfigNodePropertyBoolean ComAdobeGraniteAuthOauthAccesstokenProviderProperties::getAuthTokenProviderRelaxedSsl() const
{
    return m_Auth_token_provider_relaxed_ssl;
}
void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::setAuthTokenProviderRelaxedSsl(ConfigNodePropertyBoolean const& value)
{
    m_Auth_token_provider_relaxed_ssl = value;
    m_Auth_token_provider_relaxed_sslIsSet = true;
}
bool ComAdobeGraniteAuthOauthAccesstokenProviderProperties::authTokenProviderRelaxedSslIsSet() const
{
    return m_Auth_token_provider_relaxed_sslIsSet;
}
void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::unsetAuth_token_provider_relaxed_ssl()
{
    m_Auth_token_provider_relaxed_sslIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteAuthOauthAccesstokenProviderProperties::getTokenRequestCustomizerType() const
{
    return m_Token_request_customizer_type;
}
void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::setTokenRequestCustomizerType(ConfigNodePropertyString const& value)
{
    m_Token_request_customizer_type = value;
    m_Token_request_customizer_typeIsSet = true;
}
bool ComAdobeGraniteAuthOauthAccesstokenProviderProperties::tokenRequestCustomizerTypeIsSet() const
{
    return m_Token_request_customizer_typeIsSet;
}
void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::unsetToken_request_customizer_type()
{
    m_Token_request_customizer_typeIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteAuthOauthAccesstokenProviderProperties::getAuthTokenValidatorType() const
{
    return m_Auth_token_validator_type;
}
void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::setAuthTokenValidatorType(ConfigNodePropertyString const& value)
{
    m_Auth_token_validator_type = value;
    m_Auth_token_validator_typeIsSet = true;
}
bool ComAdobeGraniteAuthOauthAccesstokenProviderProperties::authTokenValidatorTypeIsSet() const
{
    return m_Auth_token_validator_typeIsSet;
}
void ComAdobeGraniteAuthOauthAccesstokenProviderProperties::unsetAuth_token_validator_type()
{
    m_Auth_token_validator_typeIsSet = false;
}

}
}
}
}

