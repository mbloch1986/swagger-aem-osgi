/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties : IEquatable<OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties>
    { 
        /// <summary>
        /// Gets or Sets Mongouri
        /// </summary>
        [DataMember(Name="mongouri")]
        public ConfigNodePropertyString Mongouri { get; set; }

        /// <summary>
        /// Gets or Sets Db
        /// </summary>
        [DataMember(Name="db")]
        public ConfigNodePropertyString Db { get; set; }

        /// <summary>
        /// Gets or Sets SocketKeepAlive
        /// </summary>
        [DataMember(Name="socketKeepAlive")]
        public ConfigNodePropertyBoolean SocketKeepAlive { get; set; }

        /// <summary>
        /// Gets or Sets Cache
        /// </summary>
        [DataMember(Name="cache")]
        public ConfigNodePropertyInteger Cache { get; set; }

        /// <summary>
        /// Gets or Sets NodeCachePercentage
        /// </summary>
        [DataMember(Name="nodeCachePercentage")]
        public ConfigNodePropertyInteger NodeCachePercentage { get; set; }

        /// <summary>
        /// Gets or Sets PrevDocCachePercentage
        /// </summary>
        [DataMember(Name="prevDocCachePercentage")]
        public ConfigNodePropertyInteger PrevDocCachePercentage { get; set; }

        /// <summary>
        /// Gets or Sets ChildrenCachePercentage
        /// </summary>
        [DataMember(Name="childrenCachePercentage")]
        public ConfigNodePropertyInteger ChildrenCachePercentage { get; set; }

        /// <summary>
        /// Gets or Sets DiffCachePercentage
        /// </summary>
        [DataMember(Name="diffCachePercentage")]
        public ConfigNodePropertyInteger DiffCachePercentage { get; set; }

        /// <summary>
        /// Gets or Sets CacheSegmentCount
        /// </summary>
        [DataMember(Name="cacheSegmentCount")]
        public ConfigNodePropertyInteger CacheSegmentCount { get; set; }

        /// <summary>
        /// Gets or Sets CacheStackMoveDistance
        /// </summary>
        [DataMember(Name="cacheStackMoveDistance")]
        public ConfigNodePropertyInteger CacheStackMoveDistance { get; set; }

        /// <summary>
        /// Gets or Sets BlobCacheSize
        /// </summary>
        [DataMember(Name="blobCacheSize")]
        public ConfigNodePropertyInteger BlobCacheSize { get; set; }

        /// <summary>
        /// Gets or Sets PersistentCache
        /// </summary>
        [DataMember(Name="persistentCache")]
        public ConfigNodePropertyString PersistentCache { get; set; }

        /// <summary>
        /// Gets or Sets JournalCache
        /// </summary>
        [DataMember(Name="journalCache")]
        public ConfigNodePropertyString JournalCache { get; set; }

        /// <summary>
        /// Gets or Sets CustomBlobStore
        /// </summary>
        [DataMember(Name="customBlobStore")]
        public ConfigNodePropertyBoolean CustomBlobStore { get; set; }

        /// <summary>
        /// Gets or Sets JournalGCInterval
        /// </summary>
        [DataMember(Name="journalGCInterval")]
        public ConfigNodePropertyInteger JournalGCInterval { get; set; }

        /// <summary>
        /// Gets or Sets JournalGCMaxAge
        /// </summary>
        [DataMember(Name="journalGCMaxAge")]
        public ConfigNodePropertyInteger JournalGCMaxAge { get; set; }

        /// <summary>
        /// Gets or Sets PrefetchExternalChanges
        /// </summary>
        [DataMember(Name="prefetchExternalChanges")]
        public ConfigNodePropertyBoolean PrefetchExternalChanges { get; set; }

        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        [DataMember(Name="role")]
        public ConfigNodePropertyString Role { get; set; }

        /// <summary>
        /// Gets or Sets VersionGcMaxAgeInSecs
        /// </summary>
        [DataMember(Name="versionGcMaxAgeInSecs")]
        public ConfigNodePropertyInteger VersionGcMaxAgeInSecs { get; set; }

        /// <summary>
        /// Gets or Sets VersionGCExpression
        /// </summary>
        [DataMember(Name="versionGCExpression")]
        public ConfigNodePropertyString VersionGCExpression { get; set; }

        /// <summary>
        /// Gets or Sets VersionGCTimeLimitInSecs
        /// </summary>
        [DataMember(Name="versionGCTimeLimitInSecs")]
        public ConfigNodePropertyInteger VersionGCTimeLimitInSecs { get; set; }

        /// <summary>
        /// Gets or Sets BlobGcMaxAgeInSecs
        /// </summary>
        [DataMember(Name="blobGcMaxAgeInSecs")]
        public ConfigNodePropertyInteger BlobGcMaxAgeInSecs { get; set; }

        /// <summary>
        /// Gets or Sets BlobTrackSnapshotIntervalInSecs
        /// </summary>
        [DataMember(Name="blobTrackSnapshotIntervalInSecs")]
        public ConfigNodePropertyInteger BlobTrackSnapshotIntervalInSecs { get; set; }

        /// <summary>
        /// Gets or Sets RepositoryHome
        /// </summary>
        [DataMember(Name="repository.home")]
        public ConfigNodePropertyString RepositoryHome { get; set; }

        /// <summary>
        /// Gets or Sets MaxReplicationLagInSecs
        /// </summary>
        [DataMember(Name="maxReplicationLagInSecs")]
        public ConfigNodePropertyInteger MaxReplicationLagInSecs { get; set; }

        /// <summary>
        /// Gets or Sets DocumentStoreType
        /// </summary>
        [DataMember(Name="documentStoreType")]
        public ConfigNodePropertyDropDown DocumentStoreType { get; set; }

        /// <summary>
        /// Gets or Sets BundlingDisabled
        /// </summary>
        [DataMember(Name="bundlingDisabled")]
        public ConfigNodePropertyBoolean BundlingDisabled { get; set; }

        /// <summary>
        /// Gets or Sets UpdateLimit
        /// </summary>
        [DataMember(Name="updateLimit")]
        public ConfigNodePropertyInteger UpdateLimit { get; set; }

        /// <summary>
        /// Gets or Sets PersistentCacheIncludes
        /// </summary>
        [DataMember(Name="persistentCacheIncludes")]
        public ConfigNodePropertyArray PersistentCacheIncludes { get; set; }

        /// <summary>
        /// Gets or Sets LeaseCheckMode
        /// </summary>
        [DataMember(Name="leaseCheckMode")]
        public ConfigNodePropertyDropDown LeaseCheckMode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties {\n");
            sb.Append("  Mongouri: ").Append(Mongouri).Append("\n");
            sb.Append("  Db: ").Append(Db).Append("\n");
            sb.Append("  SocketKeepAlive: ").Append(SocketKeepAlive).Append("\n");
            sb.Append("  Cache: ").Append(Cache).Append("\n");
            sb.Append("  NodeCachePercentage: ").Append(NodeCachePercentage).Append("\n");
            sb.Append("  PrevDocCachePercentage: ").Append(PrevDocCachePercentage).Append("\n");
            sb.Append("  ChildrenCachePercentage: ").Append(ChildrenCachePercentage).Append("\n");
            sb.Append("  DiffCachePercentage: ").Append(DiffCachePercentage).Append("\n");
            sb.Append("  CacheSegmentCount: ").Append(CacheSegmentCount).Append("\n");
            sb.Append("  CacheStackMoveDistance: ").Append(CacheStackMoveDistance).Append("\n");
            sb.Append("  BlobCacheSize: ").Append(BlobCacheSize).Append("\n");
            sb.Append("  PersistentCache: ").Append(PersistentCache).Append("\n");
            sb.Append("  JournalCache: ").Append(JournalCache).Append("\n");
            sb.Append("  CustomBlobStore: ").Append(CustomBlobStore).Append("\n");
            sb.Append("  JournalGCInterval: ").Append(JournalGCInterval).Append("\n");
            sb.Append("  JournalGCMaxAge: ").Append(JournalGCMaxAge).Append("\n");
            sb.Append("  PrefetchExternalChanges: ").Append(PrefetchExternalChanges).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  VersionGcMaxAgeInSecs: ").Append(VersionGcMaxAgeInSecs).Append("\n");
            sb.Append("  VersionGCExpression: ").Append(VersionGCExpression).Append("\n");
            sb.Append("  VersionGCTimeLimitInSecs: ").Append(VersionGCTimeLimitInSecs).Append("\n");
            sb.Append("  BlobGcMaxAgeInSecs: ").Append(BlobGcMaxAgeInSecs).Append("\n");
            sb.Append("  BlobTrackSnapshotIntervalInSecs: ").Append(BlobTrackSnapshotIntervalInSecs).Append("\n");
            sb.Append("  RepositoryHome: ").Append(RepositoryHome).Append("\n");
            sb.Append("  MaxReplicationLagInSecs: ").Append(MaxReplicationLagInSecs).Append("\n");
            sb.Append("  DocumentStoreType: ").Append(DocumentStoreType).Append("\n");
            sb.Append("  BundlingDisabled: ").Append(BundlingDisabled).Append("\n");
            sb.Append("  UpdateLimit: ").Append(UpdateLimit).Append("\n");
            sb.Append("  PersistentCacheIncludes: ").Append(PersistentCacheIncludes).Append("\n");
            sb.Append("  LeaseCheckMode: ").Append(LeaseCheckMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties)obj);
        }

        /// <summary>
        /// Returns true if OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Mongouri == other.Mongouri ||
                    Mongouri != null &&
                    Mongouri.Equals(other.Mongouri)
                ) && 
                (
                    Db == other.Db ||
                    Db != null &&
                    Db.Equals(other.Db)
                ) && 
                (
                    SocketKeepAlive == other.SocketKeepAlive ||
                    SocketKeepAlive != null &&
                    SocketKeepAlive.Equals(other.SocketKeepAlive)
                ) && 
                (
                    Cache == other.Cache ||
                    Cache != null &&
                    Cache.Equals(other.Cache)
                ) && 
                (
                    NodeCachePercentage == other.NodeCachePercentage ||
                    NodeCachePercentage != null &&
                    NodeCachePercentage.Equals(other.NodeCachePercentage)
                ) && 
                (
                    PrevDocCachePercentage == other.PrevDocCachePercentage ||
                    PrevDocCachePercentage != null &&
                    PrevDocCachePercentage.Equals(other.PrevDocCachePercentage)
                ) && 
                (
                    ChildrenCachePercentage == other.ChildrenCachePercentage ||
                    ChildrenCachePercentage != null &&
                    ChildrenCachePercentage.Equals(other.ChildrenCachePercentage)
                ) && 
                (
                    DiffCachePercentage == other.DiffCachePercentage ||
                    DiffCachePercentage != null &&
                    DiffCachePercentage.Equals(other.DiffCachePercentage)
                ) && 
                (
                    CacheSegmentCount == other.CacheSegmentCount ||
                    CacheSegmentCount != null &&
                    CacheSegmentCount.Equals(other.CacheSegmentCount)
                ) && 
                (
                    CacheStackMoveDistance == other.CacheStackMoveDistance ||
                    CacheStackMoveDistance != null &&
                    CacheStackMoveDistance.Equals(other.CacheStackMoveDistance)
                ) && 
                (
                    BlobCacheSize == other.BlobCacheSize ||
                    BlobCacheSize != null &&
                    BlobCacheSize.Equals(other.BlobCacheSize)
                ) && 
                (
                    PersistentCache == other.PersistentCache ||
                    PersistentCache != null &&
                    PersistentCache.Equals(other.PersistentCache)
                ) && 
                (
                    JournalCache == other.JournalCache ||
                    JournalCache != null &&
                    JournalCache.Equals(other.JournalCache)
                ) && 
                (
                    CustomBlobStore == other.CustomBlobStore ||
                    CustomBlobStore != null &&
                    CustomBlobStore.Equals(other.CustomBlobStore)
                ) && 
                (
                    JournalGCInterval == other.JournalGCInterval ||
                    JournalGCInterval != null &&
                    JournalGCInterval.Equals(other.JournalGCInterval)
                ) && 
                (
                    JournalGCMaxAge == other.JournalGCMaxAge ||
                    JournalGCMaxAge != null &&
                    JournalGCMaxAge.Equals(other.JournalGCMaxAge)
                ) && 
                (
                    PrefetchExternalChanges == other.PrefetchExternalChanges ||
                    PrefetchExternalChanges != null &&
                    PrefetchExternalChanges.Equals(other.PrefetchExternalChanges)
                ) && 
                (
                    Role == other.Role ||
                    Role != null &&
                    Role.Equals(other.Role)
                ) && 
                (
                    VersionGcMaxAgeInSecs == other.VersionGcMaxAgeInSecs ||
                    VersionGcMaxAgeInSecs != null &&
                    VersionGcMaxAgeInSecs.Equals(other.VersionGcMaxAgeInSecs)
                ) && 
                (
                    VersionGCExpression == other.VersionGCExpression ||
                    VersionGCExpression != null &&
                    VersionGCExpression.Equals(other.VersionGCExpression)
                ) && 
                (
                    VersionGCTimeLimitInSecs == other.VersionGCTimeLimitInSecs ||
                    VersionGCTimeLimitInSecs != null &&
                    VersionGCTimeLimitInSecs.Equals(other.VersionGCTimeLimitInSecs)
                ) && 
                (
                    BlobGcMaxAgeInSecs == other.BlobGcMaxAgeInSecs ||
                    BlobGcMaxAgeInSecs != null &&
                    BlobGcMaxAgeInSecs.Equals(other.BlobGcMaxAgeInSecs)
                ) && 
                (
                    BlobTrackSnapshotIntervalInSecs == other.BlobTrackSnapshotIntervalInSecs ||
                    BlobTrackSnapshotIntervalInSecs != null &&
                    BlobTrackSnapshotIntervalInSecs.Equals(other.BlobTrackSnapshotIntervalInSecs)
                ) && 
                (
                    RepositoryHome == other.RepositoryHome ||
                    RepositoryHome != null &&
                    RepositoryHome.Equals(other.RepositoryHome)
                ) && 
                (
                    MaxReplicationLagInSecs == other.MaxReplicationLagInSecs ||
                    MaxReplicationLagInSecs != null &&
                    MaxReplicationLagInSecs.Equals(other.MaxReplicationLagInSecs)
                ) && 
                (
                    DocumentStoreType == other.DocumentStoreType ||
                    DocumentStoreType != null &&
                    DocumentStoreType.Equals(other.DocumentStoreType)
                ) && 
                (
                    BundlingDisabled == other.BundlingDisabled ||
                    BundlingDisabled != null &&
                    BundlingDisabled.Equals(other.BundlingDisabled)
                ) && 
                (
                    UpdateLimit == other.UpdateLimit ||
                    UpdateLimit != null &&
                    UpdateLimit.Equals(other.UpdateLimit)
                ) && 
                (
                    PersistentCacheIncludes == other.PersistentCacheIncludes ||
                    PersistentCacheIncludes != null &&
                    PersistentCacheIncludes.Equals(other.PersistentCacheIncludes)
                ) && 
                (
                    LeaseCheckMode == other.LeaseCheckMode ||
                    LeaseCheckMode != null &&
                    LeaseCheckMode.Equals(other.LeaseCheckMode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Mongouri != null)
                    hashCode = hashCode * 59 + Mongouri.GetHashCode();
                    if (Db != null)
                    hashCode = hashCode * 59 + Db.GetHashCode();
                    if (SocketKeepAlive != null)
                    hashCode = hashCode * 59 + SocketKeepAlive.GetHashCode();
                    if (Cache != null)
                    hashCode = hashCode * 59 + Cache.GetHashCode();
                    if (NodeCachePercentage != null)
                    hashCode = hashCode * 59 + NodeCachePercentage.GetHashCode();
                    if (PrevDocCachePercentage != null)
                    hashCode = hashCode * 59 + PrevDocCachePercentage.GetHashCode();
                    if (ChildrenCachePercentage != null)
                    hashCode = hashCode * 59 + ChildrenCachePercentage.GetHashCode();
                    if (DiffCachePercentage != null)
                    hashCode = hashCode * 59 + DiffCachePercentage.GetHashCode();
                    if (CacheSegmentCount != null)
                    hashCode = hashCode * 59 + CacheSegmentCount.GetHashCode();
                    if (CacheStackMoveDistance != null)
                    hashCode = hashCode * 59 + CacheStackMoveDistance.GetHashCode();
                    if (BlobCacheSize != null)
                    hashCode = hashCode * 59 + BlobCacheSize.GetHashCode();
                    if (PersistentCache != null)
                    hashCode = hashCode * 59 + PersistentCache.GetHashCode();
                    if (JournalCache != null)
                    hashCode = hashCode * 59 + JournalCache.GetHashCode();
                    if (CustomBlobStore != null)
                    hashCode = hashCode * 59 + CustomBlobStore.GetHashCode();
                    if (JournalGCInterval != null)
                    hashCode = hashCode * 59 + JournalGCInterval.GetHashCode();
                    if (JournalGCMaxAge != null)
                    hashCode = hashCode * 59 + JournalGCMaxAge.GetHashCode();
                    if (PrefetchExternalChanges != null)
                    hashCode = hashCode * 59 + PrefetchExternalChanges.GetHashCode();
                    if (Role != null)
                    hashCode = hashCode * 59 + Role.GetHashCode();
                    if (VersionGcMaxAgeInSecs != null)
                    hashCode = hashCode * 59 + VersionGcMaxAgeInSecs.GetHashCode();
                    if (VersionGCExpression != null)
                    hashCode = hashCode * 59 + VersionGCExpression.GetHashCode();
                    if (VersionGCTimeLimitInSecs != null)
                    hashCode = hashCode * 59 + VersionGCTimeLimitInSecs.GetHashCode();
                    if (BlobGcMaxAgeInSecs != null)
                    hashCode = hashCode * 59 + BlobGcMaxAgeInSecs.GetHashCode();
                    if (BlobTrackSnapshotIntervalInSecs != null)
                    hashCode = hashCode * 59 + BlobTrackSnapshotIntervalInSecs.GetHashCode();
                    if (RepositoryHome != null)
                    hashCode = hashCode * 59 + RepositoryHome.GetHashCode();
                    if (MaxReplicationLagInSecs != null)
                    hashCode = hashCode * 59 + MaxReplicationLagInSecs.GetHashCode();
                    if (DocumentStoreType != null)
                    hashCode = hashCode * 59 + DocumentStoreType.GetHashCode();
                    if (BundlingDisabled != null)
                    hashCode = hashCode * 59 + BundlingDisabled.GetHashCode();
                    if (UpdateLimit != null)
                    hashCode = hashCode * 59 + UpdateLimit.GetHashCode();
                    if (PersistentCacheIncludes != null)
                    hashCode = hashCode * 59 + PersistentCacheIncludes.GetHashCode();
                    if (LeaseCheckMode != null)
                    hashCode = hashCode * 59 + LeaseCheckMode.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties left, OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties left, OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
