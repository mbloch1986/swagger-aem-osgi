/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties
    : public ModelBase
{
public:
    ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties();
    virtual ~ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getPortalOutboxes() const;
    bool portalOutboxesIsSet() const;
    void unsetPortal_outboxes();
    void setPortalOutboxes(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getDraftDataService() const;
    bool draftDataServiceIsSet() const;
    void unsetDraft_data_service();
    void setDraftDataService(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getDraftMetadataService() const;
    bool draftMetadataServiceIsSet() const;
    void unsetDraft_metadata_service();
    void setDraftMetadataService(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getSubmitDataService() const;
    bool submitDataServiceIsSet() const;
    void unsetSubmit_data_service();
    void setSubmitDataService(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getSubmitMetadataService() const;
    bool submitMetadataServiceIsSet() const;
    void unsetSubmit_metadata_service();
    void setSubmitMetadataService(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getPendingSignDataService() const;
    bool pendingSignDataServiceIsSet() const;
    void unsetPendingSign_data_service();
    void setPendingSignDataService(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getPendingSignMetadataService() const;
    bool pendingSignMetadataServiceIsSet() const;
    void unsetPendingSign_metadata_service();
    void setPendingSignMetadataService(std::shared_ptr<ConfigNodePropertyString> value);

protected:
    std::shared_ptr<ConfigNodePropertyArray> m_Portal_outboxes;
    bool m_Portal_outboxesIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Draft_data_service;
    bool m_Draft_data_serviceIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Draft_metadata_service;
    bool m_Draft_metadata_serviceIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Submit_data_service;
    bool m_Submit_data_serviceIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Submit_metadata_service;
    bool m_Submit_metadata_serviceIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_PendingSign_data_service;
    bool m_PendingSign_data_serviceIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_PendingSign_metadata_service;
    bool m_PendingSign_metadata_serviceIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties_H_ */
