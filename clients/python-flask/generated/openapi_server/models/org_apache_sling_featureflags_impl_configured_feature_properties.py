# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.config_node_property_boolean import ConfigNodePropertyBoolean  # noqa: F401,E501
from openapi_server.models.config_node_property_string import ConfigNodePropertyString  # noqa: F401,E501
from openapi_server import util


class OrgApacheSlingFeatureflagsImplConfiguredFeatureProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: ConfigNodePropertyString=None, description: ConfigNodePropertyString=None, enabled: ConfigNodePropertyBoolean=None):  # noqa: E501
        """OrgApacheSlingFeatureflagsImplConfiguredFeatureProperties - a model defined in OpenAPI

        :param name: The name of this OrgApacheSlingFeatureflagsImplConfiguredFeatureProperties.  # noqa: E501
        :type name: ConfigNodePropertyString
        :param description: The description of this OrgApacheSlingFeatureflagsImplConfiguredFeatureProperties.  # noqa: E501
        :type description: ConfigNodePropertyString
        :param enabled: The enabled of this OrgApacheSlingFeatureflagsImplConfiguredFeatureProperties.  # noqa: E501
        :type enabled: ConfigNodePropertyBoolean
        """
        self.openapi_types = {
            'name': ConfigNodePropertyString,
            'description': ConfigNodePropertyString,
            'enabled': ConfigNodePropertyBoolean
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'enabled': 'enabled'
        }

        self._name = name
        self._description = description
        self._enabled = enabled

    @classmethod
    def from_dict(cls, dikt) -> 'OrgApacheSlingFeatureflagsImplConfiguredFeatureProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The orgApacheSlingFeatureflagsImplConfiguredFeatureProperties of this OrgApacheSlingFeatureflagsImplConfiguredFeatureProperties.  # noqa: E501
        :rtype: OrgApacheSlingFeatureflagsImplConfiguredFeatureProperties
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> ConfigNodePropertyString:
        """Gets the name of this OrgApacheSlingFeatureflagsImplConfiguredFeatureProperties.


        :return: The name of this OrgApacheSlingFeatureflagsImplConfiguredFeatureProperties.
        :rtype: ConfigNodePropertyString
        """
        return self._name

    @name.setter
    def name(self, name: ConfigNodePropertyString):
        """Sets the name of this OrgApacheSlingFeatureflagsImplConfiguredFeatureProperties.


        :param name: The name of this OrgApacheSlingFeatureflagsImplConfiguredFeatureProperties.
        :type name: ConfigNodePropertyString
        """

        self._name = name

    @property
    def description(self) -> ConfigNodePropertyString:
        """Gets the description of this OrgApacheSlingFeatureflagsImplConfiguredFeatureProperties.


        :return: The description of this OrgApacheSlingFeatureflagsImplConfiguredFeatureProperties.
        :rtype: ConfigNodePropertyString
        """
        return self._description

    @description.setter
    def description(self, description: ConfigNodePropertyString):
        """Sets the description of this OrgApacheSlingFeatureflagsImplConfiguredFeatureProperties.


        :param description: The description of this OrgApacheSlingFeatureflagsImplConfiguredFeatureProperties.
        :type description: ConfigNodePropertyString
        """

        self._description = description

    @property
    def enabled(self) -> ConfigNodePropertyBoolean:
        """Gets the enabled of this OrgApacheSlingFeatureflagsImplConfiguredFeatureProperties.


        :return: The enabled of this OrgApacheSlingFeatureflagsImplConfiguredFeatureProperties.
        :rtype: ConfigNodePropertyBoolean
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled: ConfigNodePropertyBoolean):
        """Sets the enabled of this OrgApacheSlingFeatureflagsImplConfiguredFeatureProperties.


        :param enabled: The enabled of this OrgApacheSlingFeatureflagsImplConfiguredFeatureProperties.
        :type enabled: ConfigNodePropertyBoolean
        """

        self._enabled = enabled
