/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSProperties::OAIComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSProperties::OAIComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSProperties() {
    init();
}

OAIComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSProperties::~OAIComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSProperties() {
    this->cleanup();
}

void
OAIComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSProperties::init() {
    cq_social_console_analytics_sites_mapping = new OAIConfigNodePropertyArray();
    m_cq_social_console_analytics_sites_mapping_isSet = false;
    priority = new OAIConfigNodePropertyInteger();
    m_priority_isSet = false;
}

void
OAIComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSProperties::cleanup() {
    if(cq_social_console_analytics_sites_mapping != nullptr) { 
        delete cq_social_console_analytics_sites_mapping;
    }
    if(priority != nullptr) { 
        delete priority;
    }
}

OAIComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSProperties*
OAIComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&cq_social_console_analytics_sites_mapping, pJson["cq.social.console.analytics.sites.mapping"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&priority, pJson["priority"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
}

QString
OAIComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSProperties::asJsonObject() {
    QJsonObject obj;
    if((cq_social_console_analytics_sites_mapping != nullptr) && (cq_social_console_analytics_sites_mapping->isSet())){
        toJsonValue(QString("cq.social.console.analytics.sites.mapping"), cq_social_console_analytics_sites_mapping, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((priority != nullptr) && (priority->isSet())){
        toJsonValue(QString("priority"), priority, obj, QString("OAIConfigNodePropertyInteger"));
    }

    return obj;
}

OAIConfigNodePropertyArray*
OAIComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSProperties::getCqSocialConsoleAnalyticsSitesMapping() {
    return cq_social_console_analytics_sites_mapping;
}
void
OAIComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSProperties::setCqSocialConsoleAnalyticsSitesMapping(OAIConfigNodePropertyArray* cq_social_console_analytics_sites_mapping) {
    this->cq_social_console_analytics_sites_mapping = cq_social_console_analytics_sites_mapping;
    this->m_cq_social_console_analytics_sites_mapping_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSProperties::getPriority() {
    return priority;
}
void
OAIComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSProperties::setPriority(OAIConfigNodePropertyInteger* priority) {
    this->priority = priority;
    this->m_priority_isSet = true;
}


bool
OAIComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(cq_social_console_analytics_sites_mapping != nullptr && cq_social_console_analytics_sites_mapping->isSet()){ isObjectUpdated = true; break;}
        if(priority != nullptr && priority->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

