/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties()
{
    m_Cache_enableIsSet = false;
    m_Cache_rootPathsIsSet = false;
    m_Cache_maxSizeIsSet = false;
    m_Cache_maxEntriesIsSet = false;
}

ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::~ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties()
{
}

void ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Cache_enableIsSet)
    {
        val[utility::conversions::to_string_t("cache.enable")] = ModelBase::toJson(m_Cache_enable);
    }
    if(m_Cache_rootPathsIsSet)
    {
        val[utility::conversions::to_string_t("cache.rootPaths")] = ModelBase::toJson(m_Cache_rootPaths);
    }
    if(m_Cache_maxSizeIsSet)
    {
        val[utility::conversions::to_string_t("cache.maxSize")] = ModelBase::toJson(m_Cache_maxSize);
    }
    if(m_Cache_maxEntriesIsSet)
    {
        val[utility::conversions::to_string_t("cache.maxEntries")] = ModelBase::toJson(m_Cache_maxEntries);
    }

    return val;
}

void ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("cache.enable")))
    {
        if(!val[utility::conversions::to_string_t("cache.enable")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("cache.enable")]);
            setCacheEnable( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cache.rootPaths")))
    {
        if(!val[utility::conversions::to_string_t("cache.rootPaths")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("cache.rootPaths")]);
            setCacheRootPaths( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cache.maxSize")))
    {
        if(!val[utility::conversions::to_string_t("cache.maxSize")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cache.maxSize")]);
            setCacheMaxSize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cache.maxEntries")))
    {
        if(!val[utility::conversions::to_string_t("cache.maxEntries")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cache.maxEntries")]);
            setCacheMaxEntries( newItem );
        }
    }
}

void ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Cache_enableIsSet)
    {
        if (m_Cache_enable.get())
        {
            m_Cache_enable->toMultipart(multipart, utility::conversions::to_string_t("cache.enable."));
        }
    }
    if(m_Cache_rootPathsIsSet)
    {
        if (m_Cache_rootPaths.get())
        {
            m_Cache_rootPaths->toMultipart(multipart, utility::conversions::to_string_t("cache.rootPaths."));
        }
    }
    if(m_Cache_maxSizeIsSet)
    {
        if (m_Cache_maxSize.get())
        {
            m_Cache_maxSize->toMultipart(multipart, utility::conversions::to_string_t("cache.maxSize."));
        }
    }
    if(m_Cache_maxEntriesIsSet)
    {
        if (m_Cache_maxEntries.get())
        {
            m_Cache_maxEntries->toMultipart(multipart, utility::conversions::to_string_t("cache.maxEntries."));
        }
    }
}

void ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("cache.enable")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cache.enable")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cache.enable."));
            setCacheEnable( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cache.rootPaths")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cache.rootPaths")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cache.rootPaths."));
            setCacheRootPaths( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cache.maxSize")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cache.maxSize")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cache.maxSize."));
            setCacheMaxSize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cache.maxEntries")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cache.maxEntries")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cache.maxEntries."));
            setCacheMaxEntries( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::getCacheEnable() const
{
    return m_Cache_enable;
}


void ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::setCacheEnable(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Cache_enable = value;
    m_Cache_enableIsSet = true;
}
bool ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::cacheEnableIsSet() const
{
    return m_Cache_enableIsSet;
}

void ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::unsetCache_enable()
{
    m_Cache_enableIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::getCacheRootPaths() const
{
    return m_Cache_rootPaths;
}


void ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::setCacheRootPaths(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Cache_rootPaths = value;
    m_Cache_rootPathsIsSet = true;
}
bool ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::cacheRootPathsIsSet() const
{
    return m_Cache_rootPathsIsSet;
}

void ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::unsetCache_rootPaths()
{
    m_Cache_rootPathsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::getCacheMaxSize() const
{
    return m_Cache_maxSize;
}


void ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::setCacheMaxSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cache_maxSize = value;
    m_Cache_maxSizeIsSet = true;
}
bool ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::cacheMaxSizeIsSet() const
{
    return m_Cache_maxSizeIsSet;
}

void ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::unsetCache_maxSize()
{
    m_Cache_maxSizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::getCacheMaxEntries() const
{
    return m_Cache_maxEntries;
}


void ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::setCacheMaxEntries(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cache_maxEntries = value;
    m_Cache_maxEntriesIsSet = true;
}
bool ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::cacheMaxEntriesIsSet() const
{
    return m_Cache_maxEntriesIsSet;
}

void ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties::unsetCache_maxEntries()
{
    m_Cache_maxEntriesIsSet = false;
}

}
}
}
}

