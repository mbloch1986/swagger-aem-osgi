/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheSlingResourcemergerPickerOverridingProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheSlingResourcemergerPickerOverridingProperties::OrgApacheSlingResourcemergerPickerOverridingProperties()
{
    m_Merge_rootIsSet = false;
    m_Merge_readOnlyIsSet = false;
    
}

OrgApacheSlingResourcemergerPickerOverridingProperties::~OrgApacheSlingResourcemergerPickerOverridingProperties()
{
}

void OrgApacheSlingResourcemergerPickerOverridingProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheSlingResourcemergerPickerOverridingProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Merge_rootIsSet)
    {
        val["merge.root"] = ModelBase::toJson(m_Merge_root);
    }
    if(m_Merge_readOnlyIsSet)
    {
        val["merge.readOnly"] = ModelBase::toJson(m_Merge_readOnly);
    }
    

    return val;
}

void OrgApacheSlingResourcemergerPickerOverridingProperties::fromJson(nlohmann::json& val)
{
    if(val.find("merge.root") != val.end())
    {
        if(!val["merge.root"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["merge.root"]);
            setMergeRoot( newItem );
        }
        
    }
    if(val.find("merge.readOnly") != val.end())
    {
        if(!val["merge.readOnly"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["merge.readOnly"]);
            setMergeReadOnly( newItem );
        }
        
    }
    
}


ConfigNodePropertyString OrgApacheSlingResourcemergerPickerOverridingProperties::getMergeRoot() const
{
    return m_Merge_root;
}
void OrgApacheSlingResourcemergerPickerOverridingProperties::setMergeRoot(ConfigNodePropertyString const& value)
{
    m_Merge_root = value;
    m_Merge_rootIsSet = true;
}
bool OrgApacheSlingResourcemergerPickerOverridingProperties::mergeRootIsSet() const
{
    return m_Merge_rootIsSet;
}
void OrgApacheSlingResourcemergerPickerOverridingProperties::unsetMerge_root()
{
    m_Merge_rootIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingResourcemergerPickerOverridingProperties::getMergeReadOnly() const
{
    return m_Merge_readOnly;
}
void OrgApacheSlingResourcemergerPickerOverridingProperties::setMergeReadOnly(ConfigNodePropertyBoolean const& value)
{
    m_Merge_readOnly = value;
    m_Merge_readOnlyIsSet = true;
}
bool OrgApacheSlingResourcemergerPickerOverridingProperties::mergeReadOnlyIsSet() const
{
    return m_Merge_readOnlyIsSet;
}
void OrgApacheSlingResourcemergerPickerOverridingProperties::unsetMerge_readOnly()
{
    m_Merge_readOnlyIsSet = false;
}

}
}
}
}

