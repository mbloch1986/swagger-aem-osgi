/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties()
{
    m_NameIsSet = false;
    m_TypeIsSet = false;
    m_Format_targetIsSet = false;
    m_TempFsFolderIsSet = false;
    m_FileThresholdIsSet = false;
    m_MemoryUnitIsSet = false;
    m_UseOffHeapMemoryIsSet = false;
    m_DigestAlgorithmIsSet = false;
    m_MonitoringQueueSizeIsSet = false;
    m_CleanupDelayIsSet = false;
    m_Package_filtersIsSet = false;
    m_Property_filtersIsSet = false;
}

OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::~OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties()
{
}

void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);
    }
    if(m_Format_targetIsSet)
    {
        val[utility::conversions::to_string_t("format.target")] = ModelBase::toJson(m_Format_target);
    }
    if(m_TempFsFolderIsSet)
    {
        val[utility::conversions::to_string_t("tempFsFolder")] = ModelBase::toJson(m_TempFsFolder);
    }
    if(m_FileThresholdIsSet)
    {
        val[utility::conversions::to_string_t("fileThreshold")] = ModelBase::toJson(m_FileThreshold);
    }
    if(m_MemoryUnitIsSet)
    {
        val[utility::conversions::to_string_t("memoryUnit")] = ModelBase::toJson(m_MemoryUnit);
    }
    if(m_UseOffHeapMemoryIsSet)
    {
        val[utility::conversions::to_string_t("useOffHeapMemory")] = ModelBase::toJson(m_UseOffHeapMemory);
    }
    if(m_DigestAlgorithmIsSet)
    {
        val[utility::conversions::to_string_t("digestAlgorithm")] = ModelBase::toJson(m_DigestAlgorithm);
    }
    if(m_MonitoringQueueSizeIsSet)
    {
        val[utility::conversions::to_string_t("monitoringQueueSize")] = ModelBase::toJson(m_MonitoringQueueSize);
    }
    if(m_CleanupDelayIsSet)
    {
        val[utility::conversions::to_string_t("cleanupDelay")] = ModelBase::toJson(m_CleanupDelay);
    }
    if(m_Package_filtersIsSet)
    {
        val[utility::conversions::to_string_t("package.filters")] = ModelBase::toJson(m_Package_filters);
    }
    if(m_Property_filtersIsSet)
    {
        val[utility::conversions::to_string_t("property.filters")] = ModelBase::toJson(m_Property_filters);
    }

    return val;
}

void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        if(!val[utility::conversions::to_string_t("name")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("name")]);
            setName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("type")))
    {
        if(!val[utility::conversions::to_string_t("type")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("type")]);
            setType( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("format.target")))
    {
        if(!val[utility::conversions::to_string_t("format.target")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("format.target")]);
            setFormatTarget( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("tempFsFolder")))
    {
        if(!val[utility::conversions::to_string_t("tempFsFolder")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("tempFsFolder")]);
            setTempFsFolder( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("fileThreshold")))
    {
        if(!val[utility::conversions::to_string_t("fileThreshold")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("fileThreshold")]);
            setFileThreshold( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("memoryUnit")))
    {
        if(!val[utility::conversions::to_string_t("memoryUnit")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("memoryUnit")]);
            setMemoryUnit( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("useOffHeapMemory")))
    {
        if(!val[utility::conversions::to_string_t("useOffHeapMemory")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("useOffHeapMemory")]);
            setUseOffHeapMemory( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("digestAlgorithm")))
    {
        if(!val[utility::conversions::to_string_t("digestAlgorithm")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("digestAlgorithm")]);
            setDigestAlgorithm( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("monitoringQueueSize")))
    {
        if(!val[utility::conversions::to_string_t("monitoringQueueSize")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("monitoringQueueSize")]);
            setMonitoringQueueSize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cleanupDelay")))
    {
        if(!val[utility::conversions::to_string_t("cleanupDelay")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cleanupDelay")]);
            setCleanupDelay( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("package.filters")))
    {
        if(!val[utility::conversions::to_string_t("package.filters")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("package.filters")]);
            setPackageFilters( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("property.filters")))
    {
        if(!val[utility::conversions::to_string_t("property.filters")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("property.filters")]);
            setPropertyFilters( newItem );
        }
    }
}

void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_NameIsSet)
    {
        if (m_Name.get())
        {
            m_Name->toMultipart(multipart, utility::conversions::to_string_t("name."));
        }
    }
    if(m_TypeIsSet)
    {
        if (m_Type.get())
        {
            m_Type->toMultipart(multipart, utility::conversions::to_string_t("type."));
        }
    }
    if(m_Format_targetIsSet)
    {
        if (m_Format_target.get())
        {
            m_Format_target->toMultipart(multipart, utility::conversions::to_string_t("format.target."));
        }
    }
    if(m_TempFsFolderIsSet)
    {
        if (m_TempFsFolder.get())
        {
            m_TempFsFolder->toMultipart(multipart, utility::conversions::to_string_t("tempFsFolder."));
        }
    }
    if(m_FileThresholdIsSet)
    {
        if (m_FileThreshold.get())
        {
            m_FileThreshold->toMultipart(multipart, utility::conversions::to_string_t("fileThreshold."));
        }
    }
    if(m_MemoryUnitIsSet)
    {
        if (m_MemoryUnit.get())
        {
            m_MemoryUnit->toMultipart(multipart, utility::conversions::to_string_t("memoryUnit."));
        }
    }
    if(m_UseOffHeapMemoryIsSet)
    {
        if (m_UseOffHeapMemory.get())
        {
            m_UseOffHeapMemory->toMultipart(multipart, utility::conversions::to_string_t("useOffHeapMemory."));
        }
    }
    if(m_DigestAlgorithmIsSet)
    {
        if (m_DigestAlgorithm.get())
        {
            m_DigestAlgorithm->toMultipart(multipart, utility::conversions::to_string_t("digestAlgorithm."));
        }
    }
    if(m_MonitoringQueueSizeIsSet)
    {
        if (m_MonitoringQueueSize.get())
        {
            m_MonitoringQueueSize->toMultipart(multipart, utility::conversions::to_string_t("monitoringQueueSize."));
        }
    }
    if(m_CleanupDelayIsSet)
    {
        if (m_CleanupDelay.get())
        {
            m_CleanupDelay->toMultipart(multipart, utility::conversions::to_string_t("cleanupDelay."));
        }
    }
    if(m_Package_filtersIsSet)
    {
        if (m_Package_filters.get())
        {
            m_Package_filters->toMultipart(multipart, utility::conversions::to_string_t("package.filters."));
        }
    }
    if(m_Property_filtersIsSet)
    {
        if (m_Property_filters.get())
        {
            m_Property_filters->toMultipart(multipart, utility::conversions::to_string_t("property.filters."));
        }
    }
}

void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("name")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("name."));
            setName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("type")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("type."));
            setType( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("format.target")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("format.target")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("format.target."));
            setFormatTarget( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tempFsFolder")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("tempFsFolder")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("tempFsFolder."));
            setTempFsFolder( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fileThreshold")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("fileThreshold")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("fileThreshold."));
            setFileThreshold( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("memoryUnit")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("memoryUnit")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("memoryUnit."));
            setMemoryUnit( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("useOffHeapMemory")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("useOffHeapMemory")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("useOffHeapMemory."));
            setUseOffHeapMemory( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("digestAlgorithm")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("digestAlgorithm")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("digestAlgorithm."));
            setDigestAlgorithm( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("monitoringQueueSize")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("monitoringQueueSize")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("monitoringQueueSize."));
            setMonitoringQueueSize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cleanupDelay")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cleanupDelay")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cleanupDelay."));
            setCleanupDelay( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("package.filters")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("package.filters")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("package.filters."));
            setPackageFilters( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("property.filters")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("property.filters")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("property.filters."));
            setPropertyFilters( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::getName() const
{
    return m_Name;
}


void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::setName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::nameIsSet() const
{
    return m_NameIsSet;
}

void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::unsetName()
{
    m_NameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyDropDown> OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::getType() const
{
    return m_Type;
}


void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::setType(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::typeIsSet() const
{
    return m_TypeIsSet;
}

void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::unsetType()
{
    m_TypeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::getFormatTarget() const
{
    return m_Format_target;
}


void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::setFormatTarget(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Format_target = value;
    m_Format_targetIsSet = true;
}
bool OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::formatTargetIsSet() const
{
    return m_Format_targetIsSet;
}

void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::unsetFormat_target()
{
    m_Format_targetIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::getTempFsFolder() const
{
    return m_TempFsFolder;
}


void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::setTempFsFolder(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_TempFsFolder = value;
    m_TempFsFolderIsSet = true;
}
bool OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::tempFsFolderIsSet() const
{
    return m_TempFsFolderIsSet;
}

void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::unsetTempFsFolder()
{
    m_TempFsFolderIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::getFileThreshold() const
{
    return m_FileThreshold;
}


void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::setFileThreshold(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_FileThreshold = value;
    m_FileThresholdIsSet = true;
}
bool OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::fileThresholdIsSet() const
{
    return m_FileThresholdIsSet;
}

void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::unsetFileThreshold()
{
    m_FileThresholdIsSet = false;
}

std::shared_ptr<ConfigNodePropertyDropDown> OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::getMemoryUnit() const
{
    return m_MemoryUnit;
}


void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::setMemoryUnit(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_MemoryUnit = value;
    m_MemoryUnitIsSet = true;
}
bool OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::memoryUnitIsSet() const
{
    return m_MemoryUnitIsSet;
}

void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::unsetMemoryUnit()
{
    m_MemoryUnitIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::getUseOffHeapMemory() const
{
    return m_UseOffHeapMemory;
}


void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::setUseOffHeapMemory(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_UseOffHeapMemory = value;
    m_UseOffHeapMemoryIsSet = true;
}
bool OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::useOffHeapMemoryIsSet() const
{
    return m_UseOffHeapMemoryIsSet;
}

void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::unsetUseOffHeapMemory()
{
    m_UseOffHeapMemoryIsSet = false;
}

std::shared_ptr<ConfigNodePropertyDropDown> OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::getDigestAlgorithm() const
{
    return m_DigestAlgorithm;
}


void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::setDigestAlgorithm(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_DigestAlgorithm = value;
    m_DigestAlgorithmIsSet = true;
}
bool OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::digestAlgorithmIsSet() const
{
    return m_DigestAlgorithmIsSet;
}

void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::unsetDigestAlgorithm()
{
    m_DigestAlgorithmIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::getMonitoringQueueSize() const
{
    return m_MonitoringQueueSize;
}


void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::setMonitoringQueueSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_MonitoringQueueSize = value;
    m_MonitoringQueueSizeIsSet = true;
}
bool OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::monitoringQueueSizeIsSet() const
{
    return m_MonitoringQueueSizeIsSet;
}

void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::unsetMonitoringQueueSize()
{
    m_MonitoringQueueSizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::getCleanupDelay() const
{
    return m_CleanupDelay;
}


void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::setCleanupDelay(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_CleanupDelay = value;
    m_CleanupDelayIsSet = true;
}
bool OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::cleanupDelayIsSet() const
{
    return m_CleanupDelayIsSet;
}

void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::unsetCleanupDelay()
{
    m_CleanupDelayIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::getPackageFilters() const
{
    return m_Package_filters;
}


void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::setPackageFilters(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Package_filters = value;
    m_Package_filtersIsSet = true;
}
bool OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::packageFiltersIsSet() const
{
    return m_Package_filtersIsSet;
}

void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::unsetPackage_filters()
{
    m_Package_filtersIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::getPropertyFilters() const
{
    return m_Property_filters;
}


void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::setPropertyFilters(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Property_filters = value;
    m_Property_filtersIsSet = true;
}
bool OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::propertyFiltersIsSet() const
{
    return m_Property_filtersIsSet;
}

void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::unsetProperty_filters()
{
    m_Property_filtersIsSet = false;
}

}
}
}
}

