/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties
    /// </summary>
    [DataContract]
    public partial class OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties :  IEquatable<OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties" /> class.
        /// </summary>
        /// <param name="resourceResolverSearchpath">resourceResolverSearchpath.</param>
        /// <param name="resourceResolverManglenamespaces">resourceResolverManglenamespaces.</param>
        /// <param name="resourceResolverAllowDirect">resourceResolverAllowDirect.</param>
        /// <param name="resourceResolverRequiredProviders">resourceResolverRequiredProviders.</param>
        /// <param name="resourceResolverRequiredProvidernames">resourceResolverRequiredProvidernames.</param>
        /// <param name="resourceResolverVirtual">resourceResolverVirtual.</param>
        /// <param name="resourceResolverMapping">resourceResolverMapping.</param>
        /// <param name="resourceResolverMapLocation">resourceResolverMapLocation.</param>
        /// <param name="resourceResolverMapObservation">resourceResolverMapObservation.</param>
        /// <param name="resourceResolverDefaultVanityRedirectStatus">resourceResolverDefaultVanityRedirectStatus.</param>
        /// <param name="resourceResolverEnableVanitypath">resourceResolverEnableVanitypath.</param>
        /// <param name="resourceResolverVanitypathMaxEntries">resourceResolverVanitypathMaxEntries.</param>
        /// <param name="resourceResolverVanitypathMaxEntriesStartup">resourceResolverVanitypathMaxEntriesStartup.</param>
        /// <param name="resourceResolverVanitypathBloomfilterMaxBytes">resourceResolverVanitypathBloomfilterMaxBytes.</param>
        /// <param name="resourceResolverOptimizeAliasResolution">resourceResolverOptimizeAliasResolution.</param>
        /// <param name="resourceResolverVanitypathWhitelist">resourceResolverVanitypathWhitelist.</param>
        /// <param name="resourceResolverVanitypathBlacklist">resourceResolverVanitypathBlacklist.</param>
        /// <param name="resourceResolverVanityPrecedence">resourceResolverVanityPrecedence.</param>
        /// <param name="resourceResolverProviderhandlingParanoid">resourceResolverProviderhandlingParanoid.</param>
        /// <param name="resourceResolverLogClosing">resourceResolverLogClosing.</param>
        /// <param name="resourceResolverLogUnclosed">resourceResolverLogUnclosed.</param>
        public OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties(ConfigNodePropertyArray resourceResolverSearchpath = default(ConfigNodePropertyArray), ConfigNodePropertyBoolean resourceResolverManglenamespaces = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean resourceResolverAllowDirect = default(ConfigNodePropertyBoolean), ConfigNodePropertyArray resourceResolverRequiredProviders = default(ConfigNodePropertyArray), ConfigNodePropertyArray resourceResolverRequiredProvidernames = default(ConfigNodePropertyArray), ConfigNodePropertyArray resourceResolverVirtual = default(ConfigNodePropertyArray), ConfigNodePropertyArray resourceResolverMapping = default(ConfigNodePropertyArray), ConfigNodePropertyString resourceResolverMapLocation = default(ConfigNodePropertyString), ConfigNodePropertyArray resourceResolverMapObservation = default(ConfigNodePropertyArray), ConfigNodePropertyInteger resourceResolverDefaultVanityRedirectStatus = default(ConfigNodePropertyInteger), ConfigNodePropertyBoolean resourceResolverEnableVanitypath = default(ConfigNodePropertyBoolean), ConfigNodePropertyInteger resourceResolverVanitypathMaxEntries = default(ConfigNodePropertyInteger), ConfigNodePropertyBoolean resourceResolverVanitypathMaxEntriesStartup = default(ConfigNodePropertyBoolean), ConfigNodePropertyInteger resourceResolverVanitypathBloomfilterMaxBytes = default(ConfigNodePropertyInteger), ConfigNodePropertyBoolean resourceResolverOptimizeAliasResolution = default(ConfigNodePropertyBoolean), ConfigNodePropertyArray resourceResolverVanitypathWhitelist = default(ConfigNodePropertyArray), ConfigNodePropertyArray resourceResolverVanitypathBlacklist = default(ConfigNodePropertyArray), ConfigNodePropertyBoolean resourceResolverVanityPrecedence = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean resourceResolverProviderhandlingParanoid = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean resourceResolverLogClosing = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean resourceResolverLogUnclosed = default(ConfigNodePropertyBoolean))
        {
            this.ResourceResolverSearchpath = resourceResolverSearchpath;
            this.ResourceResolverManglenamespaces = resourceResolverManglenamespaces;
            this.ResourceResolverAllowDirect = resourceResolverAllowDirect;
            this.ResourceResolverRequiredProviders = resourceResolverRequiredProviders;
            this.ResourceResolverRequiredProvidernames = resourceResolverRequiredProvidernames;
            this.ResourceResolverVirtual = resourceResolverVirtual;
            this.ResourceResolverMapping = resourceResolverMapping;
            this.ResourceResolverMapLocation = resourceResolverMapLocation;
            this.ResourceResolverMapObservation = resourceResolverMapObservation;
            this.ResourceResolverDefaultVanityRedirectStatus = resourceResolverDefaultVanityRedirectStatus;
            this.ResourceResolverEnableVanitypath = resourceResolverEnableVanitypath;
            this.ResourceResolverVanitypathMaxEntries = resourceResolverVanitypathMaxEntries;
            this.ResourceResolverVanitypathMaxEntriesStartup = resourceResolverVanitypathMaxEntriesStartup;
            this.ResourceResolverVanitypathBloomfilterMaxBytes = resourceResolverVanitypathBloomfilterMaxBytes;
            this.ResourceResolverOptimizeAliasResolution = resourceResolverOptimizeAliasResolution;
            this.ResourceResolverVanitypathWhitelist = resourceResolverVanitypathWhitelist;
            this.ResourceResolverVanitypathBlacklist = resourceResolverVanitypathBlacklist;
            this.ResourceResolverVanityPrecedence = resourceResolverVanityPrecedence;
            this.ResourceResolverProviderhandlingParanoid = resourceResolverProviderhandlingParanoid;
            this.ResourceResolverLogClosing = resourceResolverLogClosing;
            this.ResourceResolverLogUnclosed = resourceResolverLogUnclosed;
        }
        
        /// <summary>
        /// Gets or Sets ResourceResolverSearchpath
        /// </summary>
        [DataMember(Name="resource.resolver.searchpath", EmitDefaultValue=false)]
        public ConfigNodePropertyArray ResourceResolverSearchpath { get; set; }

        /// <summary>
        /// Gets or Sets ResourceResolverManglenamespaces
        /// </summary>
        [DataMember(Name="resource.resolver.manglenamespaces", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean ResourceResolverManglenamespaces { get; set; }

        /// <summary>
        /// Gets or Sets ResourceResolverAllowDirect
        /// </summary>
        [DataMember(Name="resource.resolver.allowDirect", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean ResourceResolverAllowDirect { get; set; }

        /// <summary>
        /// Gets or Sets ResourceResolverRequiredProviders
        /// </summary>
        [DataMember(Name="resource.resolver.required.providers", EmitDefaultValue=false)]
        public ConfigNodePropertyArray ResourceResolverRequiredProviders { get; set; }

        /// <summary>
        /// Gets or Sets ResourceResolverRequiredProvidernames
        /// </summary>
        [DataMember(Name="resource.resolver.required.providernames", EmitDefaultValue=false)]
        public ConfigNodePropertyArray ResourceResolverRequiredProvidernames { get; set; }

        /// <summary>
        /// Gets or Sets ResourceResolverVirtual
        /// </summary>
        [DataMember(Name="resource.resolver.virtual", EmitDefaultValue=false)]
        public ConfigNodePropertyArray ResourceResolverVirtual { get; set; }

        /// <summary>
        /// Gets or Sets ResourceResolverMapping
        /// </summary>
        [DataMember(Name="resource.resolver.mapping", EmitDefaultValue=false)]
        public ConfigNodePropertyArray ResourceResolverMapping { get; set; }

        /// <summary>
        /// Gets or Sets ResourceResolverMapLocation
        /// </summary>
        [DataMember(Name="resource.resolver.map.location", EmitDefaultValue=false)]
        public ConfigNodePropertyString ResourceResolverMapLocation { get; set; }

        /// <summary>
        /// Gets or Sets ResourceResolverMapObservation
        /// </summary>
        [DataMember(Name="resource.resolver.map.observation", EmitDefaultValue=false)]
        public ConfigNodePropertyArray ResourceResolverMapObservation { get; set; }

        /// <summary>
        /// Gets or Sets ResourceResolverDefaultVanityRedirectStatus
        /// </summary>
        [DataMember(Name="resource.resolver.default.vanity.redirect.status", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger ResourceResolverDefaultVanityRedirectStatus { get; set; }

        /// <summary>
        /// Gets or Sets ResourceResolverEnableVanitypath
        /// </summary>
        [DataMember(Name="resource.resolver.enable.vanitypath", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean ResourceResolverEnableVanitypath { get; set; }

        /// <summary>
        /// Gets or Sets ResourceResolverVanitypathMaxEntries
        /// </summary>
        [DataMember(Name="resource.resolver.vanitypath.maxEntries", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger ResourceResolverVanitypathMaxEntries { get; set; }

        /// <summary>
        /// Gets or Sets ResourceResolverVanitypathMaxEntriesStartup
        /// </summary>
        [DataMember(Name="resource.resolver.vanitypath.maxEntries.startup", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean ResourceResolverVanitypathMaxEntriesStartup { get; set; }

        /// <summary>
        /// Gets or Sets ResourceResolverVanitypathBloomfilterMaxBytes
        /// </summary>
        [DataMember(Name="resource.resolver.vanitypath.bloomfilter.maxBytes", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger ResourceResolverVanitypathBloomfilterMaxBytes { get; set; }

        /// <summary>
        /// Gets or Sets ResourceResolverOptimizeAliasResolution
        /// </summary>
        [DataMember(Name="resource.resolver.optimize.alias.resolution", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean ResourceResolverOptimizeAliasResolution { get; set; }

        /// <summary>
        /// Gets or Sets ResourceResolverVanitypathWhitelist
        /// </summary>
        [DataMember(Name="resource.resolver.vanitypath.whitelist", EmitDefaultValue=false)]
        public ConfigNodePropertyArray ResourceResolverVanitypathWhitelist { get; set; }

        /// <summary>
        /// Gets or Sets ResourceResolverVanitypathBlacklist
        /// </summary>
        [DataMember(Name="resource.resolver.vanitypath.blacklist", EmitDefaultValue=false)]
        public ConfigNodePropertyArray ResourceResolverVanitypathBlacklist { get; set; }

        /// <summary>
        /// Gets or Sets ResourceResolverVanityPrecedence
        /// </summary>
        [DataMember(Name="resource.resolver.vanity.precedence", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean ResourceResolverVanityPrecedence { get; set; }

        /// <summary>
        /// Gets or Sets ResourceResolverProviderhandlingParanoid
        /// </summary>
        [DataMember(Name="resource.resolver.providerhandling.paranoid", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean ResourceResolverProviderhandlingParanoid { get; set; }

        /// <summary>
        /// Gets or Sets ResourceResolverLogClosing
        /// </summary>
        [DataMember(Name="resource.resolver.log.closing", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean ResourceResolverLogClosing { get; set; }

        /// <summary>
        /// Gets or Sets ResourceResolverLogUnclosed
        /// </summary>
        [DataMember(Name="resource.resolver.log.unclosed", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean ResourceResolverLogUnclosed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties {\n");
            sb.Append("  ResourceResolverSearchpath: ").Append(ResourceResolverSearchpath).Append("\n");
            sb.Append("  ResourceResolverManglenamespaces: ").Append(ResourceResolverManglenamespaces).Append("\n");
            sb.Append("  ResourceResolverAllowDirect: ").Append(ResourceResolverAllowDirect).Append("\n");
            sb.Append("  ResourceResolverRequiredProviders: ").Append(ResourceResolverRequiredProviders).Append("\n");
            sb.Append("  ResourceResolverRequiredProvidernames: ").Append(ResourceResolverRequiredProvidernames).Append("\n");
            sb.Append("  ResourceResolverVirtual: ").Append(ResourceResolverVirtual).Append("\n");
            sb.Append("  ResourceResolverMapping: ").Append(ResourceResolverMapping).Append("\n");
            sb.Append("  ResourceResolverMapLocation: ").Append(ResourceResolverMapLocation).Append("\n");
            sb.Append("  ResourceResolverMapObservation: ").Append(ResourceResolverMapObservation).Append("\n");
            sb.Append("  ResourceResolverDefaultVanityRedirectStatus: ").Append(ResourceResolverDefaultVanityRedirectStatus).Append("\n");
            sb.Append("  ResourceResolverEnableVanitypath: ").Append(ResourceResolverEnableVanitypath).Append("\n");
            sb.Append("  ResourceResolverVanitypathMaxEntries: ").Append(ResourceResolverVanitypathMaxEntries).Append("\n");
            sb.Append("  ResourceResolverVanitypathMaxEntriesStartup: ").Append(ResourceResolverVanitypathMaxEntriesStartup).Append("\n");
            sb.Append("  ResourceResolverVanitypathBloomfilterMaxBytes: ").Append(ResourceResolverVanitypathBloomfilterMaxBytes).Append("\n");
            sb.Append("  ResourceResolverOptimizeAliasResolution: ").Append(ResourceResolverOptimizeAliasResolution).Append("\n");
            sb.Append("  ResourceResolverVanitypathWhitelist: ").Append(ResourceResolverVanitypathWhitelist).Append("\n");
            sb.Append("  ResourceResolverVanitypathBlacklist: ").Append(ResourceResolverVanitypathBlacklist).Append("\n");
            sb.Append("  ResourceResolverVanityPrecedence: ").Append(ResourceResolverVanityPrecedence).Append("\n");
            sb.Append("  ResourceResolverProviderhandlingParanoid: ").Append(ResourceResolverProviderhandlingParanoid).Append("\n");
            sb.Append("  ResourceResolverLogClosing: ").Append(ResourceResolverLogClosing).Append("\n");
            sb.Append("  ResourceResolverLogUnclosed: ").Append(ResourceResolverLogUnclosed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties);
        }

        /// <summary>
        /// Returns true if OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ResourceResolverSearchpath == input.ResourceResolverSearchpath ||
                    (this.ResourceResolverSearchpath != null &&
                    this.ResourceResolverSearchpath.Equals(input.ResourceResolverSearchpath))
                ) && 
                (
                    this.ResourceResolverManglenamespaces == input.ResourceResolverManglenamespaces ||
                    (this.ResourceResolverManglenamespaces != null &&
                    this.ResourceResolverManglenamespaces.Equals(input.ResourceResolverManglenamespaces))
                ) && 
                (
                    this.ResourceResolverAllowDirect == input.ResourceResolverAllowDirect ||
                    (this.ResourceResolverAllowDirect != null &&
                    this.ResourceResolverAllowDirect.Equals(input.ResourceResolverAllowDirect))
                ) && 
                (
                    this.ResourceResolverRequiredProviders == input.ResourceResolverRequiredProviders ||
                    (this.ResourceResolverRequiredProviders != null &&
                    this.ResourceResolverRequiredProviders.Equals(input.ResourceResolverRequiredProviders))
                ) && 
                (
                    this.ResourceResolverRequiredProvidernames == input.ResourceResolverRequiredProvidernames ||
                    (this.ResourceResolverRequiredProvidernames != null &&
                    this.ResourceResolverRequiredProvidernames.Equals(input.ResourceResolverRequiredProvidernames))
                ) && 
                (
                    this.ResourceResolverVirtual == input.ResourceResolverVirtual ||
                    (this.ResourceResolverVirtual != null &&
                    this.ResourceResolverVirtual.Equals(input.ResourceResolverVirtual))
                ) && 
                (
                    this.ResourceResolverMapping == input.ResourceResolverMapping ||
                    (this.ResourceResolverMapping != null &&
                    this.ResourceResolverMapping.Equals(input.ResourceResolverMapping))
                ) && 
                (
                    this.ResourceResolverMapLocation == input.ResourceResolverMapLocation ||
                    (this.ResourceResolverMapLocation != null &&
                    this.ResourceResolverMapLocation.Equals(input.ResourceResolverMapLocation))
                ) && 
                (
                    this.ResourceResolverMapObservation == input.ResourceResolverMapObservation ||
                    (this.ResourceResolverMapObservation != null &&
                    this.ResourceResolverMapObservation.Equals(input.ResourceResolverMapObservation))
                ) && 
                (
                    this.ResourceResolverDefaultVanityRedirectStatus == input.ResourceResolverDefaultVanityRedirectStatus ||
                    (this.ResourceResolverDefaultVanityRedirectStatus != null &&
                    this.ResourceResolverDefaultVanityRedirectStatus.Equals(input.ResourceResolverDefaultVanityRedirectStatus))
                ) && 
                (
                    this.ResourceResolverEnableVanitypath == input.ResourceResolverEnableVanitypath ||
                    (this.ResourceResolverEnableVanitypath != null &&
                    this.ResourceResolverEnableVanitypath.Equals(input.ResourceResolverEnableVanitypath))
                ) && 
                (
                    this.ResourceResolverVanitypathMaxEntries == input.ResourceResolverVanitypathMaxEntries ||
                    (this.ResourceResolverVanitypathMaxEntries != null &&
                    this.ResourceResolverVanitypathMaxEntries.Equals(input.ResourceResolverVanitypathMaxEntries))
                ) && 
                (
                    this.ResourceResolverVanitypathMaxEntriesStartup == input.ResourceResolverVanitypathMaxEntriesStartup ||
                    (this.ResourceResolverVanitypathMaxEntriesStartup != null &&
                    this.ResourceResolverVanitypathMaxEntriesStartup.Equals(input.ResourceResolverVanitypathMaxEntriesStartup))
                ) && 
                (
                    this.ResourceResolverVanitypathBloomfilterMaxBytes == input.ResourceResolverVanitypathBloomfilterMaxBytes ||
                    (this.ResourceResolverVanitypathBloomfilterMaxBytes != null &&
                    this.ResourceResolverVanitypathBloomfilterMaxBytes.Equals(input.ResourceResolverVanitypathBloomfilterMaxBytes))
                ) && 
                (
                    this.ResourceResolverOptimizeAliasResolution == input.ResourceResolverOptimizeAliasResolution ||
                    (this.ResourceResolverOptimizeAliasResolution != null &&
                    this.ResourceResolverOptimizeAliasResolution.Equals(input.ResourceResolverOptimizeAliasResolution))
                ) && 
                (
                    this.ResourceResolverVanitypathWhitelist == input.ResourceResolverVanitypathWhitelist ||
                    (this.ResourceResolverVanitypathWhitelist != null &&
                    this.ResourceResolverVanitypathWhitelist.Equals(input.ResourceResolverVanitypathWhitelist))
                ) && 
                (
                    this.ResourceResolverVanitypathBlacklist == input.ResourceResolverVanitypathBlacklist ||
                    (this.ResourceResolverVanitypathBlacklist != null &&
                    this.ResourceResolverVanitypathBlacklist.Equals(input.ResourceResolverVanitypathBlacklist))
                ) && 
                (
                    this.ResourceResolverVanityPrecedence == input.ResourceResolverVanityPrecedence ||
                    (this.ResourceResolverVanityPrecedence != null &&
                    this.ResourceResolverVanityPrecedence.Equals(input.ResourceResolverVanityPrecedence))
                ) && 
                (
                    this.ResourceResolverProviderhandlingParanoid == input.ResourceResolverProviderhandlingParanoid ||
                    (this.ResourceResolverProviderhandlingParanoid != null &&
                    this.ResourceResolverProviderhandlingParanoid.Equals(input.ResourceResolverProviderhandlingParanoid))
                ) && 
                (
                    this.ResourceResolverLogClosing == input.ResourceResolverLogClosing ||
                    (this.ResourceResolverLogClosing != null &&
                    this.ResourceResolverLogClosing.Equals(input.ResourceResolverLogClosing))
                ) && 
                (
                    this.ResourceResolverLogUnclosed == input.ResourceResolverLogUnclosed ||
                    (this.ResourceResolverLogUnclosed != null &&
                    this.ResourceResolverLogUnclosed.Equals(input.ResourceResolverLogUnclosed))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ResourceResolverSearchpath != null)
                    hashCode = hashCode * 59 + this.ResourceResolverSearchpath.GetHashCode();
                if (this.ResourceResolverManglenamespaces != null)
                    hashCode = hashCode * 59 + this.ResourceResolverManglenamespaces.GetHashCode();
                if (this.ResourceResolverAllowDirect != null)
                    hashCode = hashCode * 59 + this.ResourceResolverAllowDirect.GetHashCode();
                if (this.ResourceResolverRequiredProviders != null)
                    hashCode = hashCode * 59 + this.ResourceResolverRequiredProviders.GetHashCode();
                if (this.ResourceResolverRequiredProvidernames != null)
                    hashCode = hashCode * 59 + this.ResourceResolverRequiredProvidernames.GetHashCode();
                if (this.ResourceResolverVirtual != null)
                    hashCode = hashCode * 59 + this.ResourceResolverVirtual.GetHashCode();
                if (this.ResourceResolverMapping != null)
                    hashCode = hashCode * 59 + this.ResourceResolverMapping.GetHashCode();
                if (this.ResourceResolverMapLocation != null)
                    hashCode = hashCode * 59 + this.ResourceResolverMapLocation.GetHashCode();
                if (this.ResourceResolverMapObservation != null)
                    hashCode = hashCode * 59 + this.ResourceResolverMapObservation.GetHashCode();
                if (this.ResourceResolverDefaultVanityRedirectStatus != null)
                    hashCode = hashCode * 59 + this.ResourceResolverDefaultVanityRedirectStatus.GetHashCode();
                if (this.ResourceResolverEnableVanitypath != null)
                    hashCode = hashCode * 59 + this.ResourceResolverEnableVanitypath.GetHashCode();
                if (this.ResourceResolverVanitypathMaxEntries != null)
                    hashCode = hashCode * 59 + this.ResourceResolverVanitypathMaxEntries.GetHashCode();
                if (this.ResourceResolverVanitypathMaxEntriesStartup != null)
                    hashCode = hashCode * 59 + this.ResourceResolverVanitypathMaxEntriesStartup.GetHashCode();
                if (this.ResourceResolverVanitypathBloomfilterMaxBytes != null)
                    hashCode = hashCode * 59 + this.ResourceResolverVanitypathBloomfilterMaxBytes.GetHashCode();
                if (this.ResourceResolverOptimizeAliasResolution != null)
                    hashCode = hashCode * 59 + this.ResourceResolverOptimizeAliasResolution.GetHashCode();
                if (this.ResourceResolverVanitypathWhitelist != null)
                    hashCode = hashCode * 59 + this.ResourceResolverVanitypathWhitelist.GetHashCode();
                if (this.ResourceResolverVanitypathBlacklist != null)
                    hashCode = hashCode * 59 + this.ResourceResolverVanitypathBlacklist.GetHashCode();
                if (this.ResourceResolverVanityPrecedence != null)
                    hashCode = hashCode * 59 + this.ResourceResolverVanityPrecedence.GetHashCode();
                if (this.ResourceResolverProviderhandlingParanoid != null)
                    hashCode = hashCode * 59 + this.ResourceResolverProviderhandlingParanoid.GetHashCode();
                if (this.ResourceResolverLogClosing != null)
                    hashCode = hashCode * 59 + this.ResourceResolverLogClosing.GetHashCode();
                if (this.ResourceResolverLogUnclosed != null)
                    hashCode = hashCode * 59 + this.ResourceResolverLogUnclosed.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
