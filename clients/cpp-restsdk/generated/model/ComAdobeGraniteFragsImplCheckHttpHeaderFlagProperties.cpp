/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties()
{
    m_Feature_nameIsSet = false;
    m_Feature_descriptionIsSet = false;
    m_Http_header_nameIsSet = false;
    m_Http_header_valuepatternIsSet = false;
}

ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::~ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties()
{
}

void ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Feature_nameIsSet)
    {
        val[utility::conversions::to_string_t("feature.name")] = ModelBase::toJson(m_Feature_name);
    }
    if(m_Feature_descriptionIsSet)
    {
        val[utility::conversions::to_string_t("feature.description")] = ModelBase::toJson(m_Feature_description);
    }
    if(m_Http_header_nameIsSet)
    {
        val[utility::conversions::to_string_t("http.header.name")] = ModelBase::toJson(m_Http_header_name);
    }
    if(m_Http_header_valuepatternIsSet)
    {
        val[utility::conversions::to_string_t("http.header.valuepattern")] = ModelBase::toJson(m_Http_header_valuepattern);
    }

    return val;
}

void ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("feature.name")))
    {
        if(!val[utility::conversions::to_string_t("feature.name")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("feature.name")]);
            setFeatureName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("feature.description")))
    {
        if(!val[utility::conversions::to_string_t("feature.description")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("feature.description")]);
            setFeatureDescription( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("http.header.name")))
    {
        if(!val[utility::conversions::to_string_t("http.header.name")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("http.header.name")]);
            setHttpHeaderName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("http.header.valuepattern")))
    {
        if(!val[utility::conversions::to_string_t("http.header.valuepattern")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("http.header.valuepattern")]);
            setHttpHeaderValuepattern( newItem );
        }
    }
}

void ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Feature_nameIsSet)
    {
        if (m_Feature_name.get())
        {
            m_Feature_name->toMultipart(multipart, utility::conversions::to_string_t("feature.name."));
        }
    }
    if(m_Feature_descriptionIsSet)
    {
        if (m_Feature_description.get())
        {
            m_Feature_description->toMultipart(multipart, utility::conversions::to_string_t("feature.description."));
        }
    }
    if(m_Http_header_nameIsSet)
    {
        if (m_Http_header_name.get())
        {
            m_Http_header_name->toMultipart(multipart, utility::conversions::to_string_t("http.header.name."));
        }
    }
    if(m_Http_header_valuepatternIsSet)
    {
        if (m_Http_header_valuepattern.get())
        {
            m_Http_header_valuepattern->toMultipart(multipart, utility::conversions::to_string_t("http.header.valuepattern."));
        }
    }
}

void ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("feature.name")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("feature.name")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("feature.name."));
            setFeatureName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("feature.description")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("feature.description")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("feature.description."));
            setFeatureDescription( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("http.header.name")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("http.header.name")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("http.header.name."));
            setHttpHeaderName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("http.header.valuepattern")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("http.header.valuepattern")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("http.header.valuepattern."));
            setHttpHeaderValuepattern( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::getFeatureName() const
{
    return m_Feature_name;
}


void ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::setFeatureName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Feature_name = value;
    m_Feature_nameIsSet = true;
}
bool ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::featureNameIsSet() const
{
    return m_Feature_nameIsSet;
}

void ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::unsetFeature_name()
{
    m_Feature_nameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::getFeatureDescription() const
{
    return m_Feature_description;
}


void ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::setFeatureDescription(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Feature_description = value;
    m_Feature_descriptionIsSet = true;
}
bool ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::featureDescriptionIsSet() const
{
    return m_Feature_descriptionIsSet;
}

void ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::unsetFeature_description()
{
    m_Feature_descriptionIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::getHttpHeaderName() const
{
    return m_Http_header_name;
}


void ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::setHttpHeaderName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Http_header_name = value;
    m_Http_header_nameIsSet = true;
}
bool ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::httpHeaderNameIsSet() const
{
    return m_Http_header_nameIsSet;
}

void ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::unsetHttp_header_name()
{
    m_Http_header_nameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::getHttpHeaderValuepattern() const
{
    return m_Http_header_valuepattern;
}


void ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::setHttpHeaderValuepattern(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Http_header_valuepattern = value;
    m_Http_header_valuepatternIsSet = true;
}
bool ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::httpHeaderValuepatternIsSet() const
{
    return m_Http_header_valuepatternIsSet;
}

void ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::unsetHttp_header_valuepattern()
{
    m_Http_header_valuepatternIsSet = false;
}

}
}
}
}

