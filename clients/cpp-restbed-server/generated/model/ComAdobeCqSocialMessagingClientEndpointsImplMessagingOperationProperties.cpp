/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties.h"

#include <string>
#include <sstream>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties()
{
    
}

ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::~ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties()
{
}

std::string ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::toJsonString()
{
	std::stringstream ss;
	ptree pt;
	write_json(ss, pt, false);
	return ss.str();
}

void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getMessageProperties() const
{
    return m_Message_properties;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setMessageProperties(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Message_properties = value;
}
std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getMessageBoxSizeLimit() const
{
    return m_MessageBoxSizeLimit;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setMessageBoxSizeLimit(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_MessageBoxSizeLimit = value;
}
std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getMessageCountLimit() const
{
    return m_MessageCountLimit;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setMessageCountLimit(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_MessageCountLimit = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getNotifyFailure() const
{
    return m_NotifyFailure;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setNotifyFailure(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_NotifyFailure = value;
}
std::shared_ptr<ConfigNodePropertyString> ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getFailureMessageFrom() const
{
    return m_FailureMessageFrom;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setFailureMessageFrom(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_FailureMessageFrom = value;
}
std::shared_ptr<ConfigNodePropertyString> ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getFailureTemplatePath() const
{
    return m_FailureTemplatePath;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setFailureTemplatePath(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_FailureTemplatePath = value;
}
std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getMaxRetries() const
{
    return m_MaxRetries;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setMaxRetries(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_MaxRetries = value;
}
std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getMinWaitBetweenRetries() const
{
    return m_MinWaitBetweenRetries;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setMinWaitBetweenRetries(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_MinWaitBetweenRetries = value;
}
std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getCountUpdatePoolSize() const
{
    return m_CountUpdatePoolSize;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setCountUpdatePoolSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_CountUpdatePoolSize = value;
}
std::shared_ptr<ConfigNodePropertyString> ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getInboxPath() const
{
    return m_Inbox_path;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setInboxPath(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Inbox_path = value;
}
std::shared_ptr<ConfigNodePropertyString> ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getSentitemsPath() const
{
    return m_Sentitems_path;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setSentitemsPath(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Sentitems_path = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getSupportAttachments() const
{
    return m_SupportAttachments;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setSupportAttachments(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_SupportAttachments = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getSupportGroupMessaging() const
{
    return m_SupportGroupMessaging;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setSupportGroupMessaging(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_SupportGroupMessaging = value;
}
std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getMaxTotalRecipients() const
{
    return m_MaxTotalRecipients;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setMaxTotalRecipients(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_MaxTotalRecipients = value;
}
std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getBatchSize() const
{
    return m_BatchSize;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setBatchSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_BatchSize = value;
}
std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getMaxTotalAttachmentSize() const
{
    return m_MaxTotalAttachmentSize;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setMaxTotalAttachmentSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_MaxTotalAttachmentSize = value;
}
std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getAttachmentTypeBlacklist() const
{
    return m_AttachmentTypeBlacklist;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setAttachmentTypeBlacklist(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_AttachmentTypeBlacklist = value;
}
std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getAllowedAttachmentTypes() const
{
    return m_AllowedAttachmentTypes;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setAllowedAttachmentTypes(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_AllowedAttachmentTypes = value;
}
std::shared_ptr<ConfigNodePropertyString> ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getServiceSelector() const
{
    return m_ServiceSelector;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setServiceSelector(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_ServiceSelector = value;
}
std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getFieldWhitelist() const
{
    return m_FieldWhitelist;
}
void ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setFieldWhitelist(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_FieldWhitelist = value;
}

}
}
}
}

