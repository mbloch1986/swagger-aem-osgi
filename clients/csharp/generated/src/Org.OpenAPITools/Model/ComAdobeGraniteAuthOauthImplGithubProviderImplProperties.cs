/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComAdobeGraniteAuthOauthImplGithubProviderImplProperties
    /// </summary>
    [DataContract]
    public partial class ComAdobeGraniteAuthOauthImplGithubProviderImplProperties :  IEquatable<ComAdobeGraniteAuthOauthImplGithubProviderImplProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAdobeGraniteAuthOauthImplGithubProviderImplProperties" /> class.
        /// </summary>
        /// <param name="oauthProviderId">oauthProviderId.</param>
        /// <param name="oauthProviderGithubAuthorizationUrl">oauthProviderGithubAuthorizationUrl.</param>
        /// <param name="oauthProviderGithubTokenUrl">oauthProviderGithubTokenUrl.</param>
        /// <param name="oauthProviderGithubProfileUrl">oauthProviderGithubProfileUrl.</param>
        public ComAdobeGraniteAuthOauthImplGithubProviderImplProperties(ConfigNodePropertyString oauthProviderId = default(ConfigNodePropertyString), ConfigNodePropertyString oauthProviderGithubAuthorizationUrl = default(ConfigNodePropertyString), ConfigNodePropertyString oauthProviderGithubTokenUrl = default(ConfigNodePropertyString), ConfigNodePropertyString oauthProviderGithubProfileUrl = default(ConfigNodePropertyString))
        {
            this.OauthProviderId = oauthProviderId;
            this.OauthProviderGithubAuthorizationUrl = oauthProviderGithubAuthorizationUrl;
            this.OauthProviderGithubTokenUrl = oauthProviderGithubTokenUrl;
            this.OauthProviderGithubProfileUrl = oauthProviderGithubProfileUrl;
        }
        
        /// <summary>
        /// Gets or Sets OauthProviderId
        /// </summary>
        [DataMember(Name="oauth.provider.id", EmitDefaultValue=false)]
        public ConfigNodePropertyString OauthProviderId { get; set; }

        /// <summary>
        /// Gets or Sets OauthProviderGithubAuthorizationUrl
        /// </summary>
        [DataMember(Name="oauth.provider.github.authorization.url", EmitDefaultValue=false)]
        public ConfigNodePropertyString OauthProviderGithubAuthorizationUrl { get; set; }

        /// <summary>
        /// Gets or Sets OauthProviderGithubTokenUrl
        /// </summary>
        [DataMember(Name="oauth.provider.github.token.url", EmitDefaultValue=false)]
        public ConfigNodePropertyString OauthProviderGithubTokenUrl { get; set; }

        /// <summary>
        /// Gets or Sets OauthProviderGithubProfileUrl
        /// </summary>
        [DataMember(Name="oauth.provider.github.profile.url", EmitDefaultValue=false)]
        public ConfigNodePropertyString OauthProviderGithubProfileUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeGraniteAuthOauthImplGithubProviderImplProperties {\n");
            sb.Append("  OauthProviderId: ").Append(OauthProviderId).Append("\n");
            sb.Append("  OauthProviderGithubAuthorizationUrl: ").Append(OauthProviderGithubAuthorizationUrl).Append("\n");
            sb.Append("  OauthProviderGithubTokenUrl: ").Append(OauthProviderGithubTokenUrl).Append("\n");
            sb.Append("  OauthProviderGithubProfileUrl: ").Append(OauthProviderGithubProfileUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComAdobeGraniteAuthOauthImplGithubProviderImplProperties);
        }

        /// <summary>
        /// Returns true if ComAdobeGraniteAuthOauthImplGithubProviderImplProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComAdobeGraniteAuthOauthImplGithubProviderImplProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeGraniteAuthOauthImplGithubProviderImplProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OauthProviderId == input.OauthProviderId ||
                    (this.OauthProviderId != null &&
                    this.OauthProviderId.Equals(input.OauthProviderId))
                ) && 
                (
                    this.OauthProviderGithubAuthorizationUrl == input.OauthProviderGithubAuthorizationUrl ||
                    (this.OauthProviderGithubAuthorizationUrl != null &&
                    this.OauthProviderGithubAuthorizationUrl.Equals(input.OauthProviderGithubAuthorizationUrl))
                ) && 
                (
                    this.OauthProviderGithubTokenUrl == input.OauthProviderGithubTokenUrl ||
                    (this.OauthProviderGithubTokenUrl != null &&
                    this.OauthProviderGithubTokenUrl.Equals(input.OauthProviderGithubTokenUrl))
                ) && 
                (
                    this.OauthProviderGithubProfileUrl == input.OauthProviderGithubProfileUrl ||
                    (this.OauthProviderGithubProfileUrl != null &&
                    this.OauthProviderGithubProfileUrl.Equals(input.OauthProviderGithubProfileUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OauthProviderId != null)
                    hashCode = hashCode * 59 + this.OauthProviderId.GetHashCode();
                if (this.OauthProviderGithubAuthorizationUrl != null)
                    hashCode = hashCode * 59 + this.OauthProviderGithubAuthorizationUrl.GetHashCode();
                if (this.OauthProviderGithubTokenUrl != null)
                    hashCode = hashCode * 59 + this.OauthProviderGithubTokenUrl.GetHashCode();
                if (this.OauthProviderGithubProfileUrl != null)
                    hashCode = hashCode * 59 + this.OauthProviderGithubProfileUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
