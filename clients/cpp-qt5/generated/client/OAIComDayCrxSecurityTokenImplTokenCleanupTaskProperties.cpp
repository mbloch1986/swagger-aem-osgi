/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCrxSecurityTokenImplTokenCleanupTaskProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCrxSecurityTokenImplTokenCleanupTaskProperties::OAIComDayCrxSecurityTokenImplTokenCleanupTaskProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComDayCrxSecurityTokenImplTokenCleanupTaskProperties::OAIComDayCrxSecurityTokenImplTokenCleanupTaskProperties() {
    init();
}

OAIComDayCrxSecurityTokenImplTokenCleanupTaskProperties::~OAIComDayCrxSecurityTokenImplTokenCleanupTaskProperties() {
    this->cleanup();
}

void
OAIComDayCrxSecurityTokenImplTokenCleanupTaskProperties::init() {
    enable_token_cleanup_task = new OAIConfigNodePropertyBoolean();
    m_enable_token_cleanup_task_isSet = false;
    scheduler_expression = new OAIConfigNodePropertyString();
    m_scheduler_expression_isSet = false;
    batch_size = new OAIConfigNodePropertyInteger();
    m_batch_size_isSet = false;
}

void
OAIComDayCrxSecurityTokenImplTokenCleanupTaskProperties::cleanup() {
    if(enable_token_cleanup_task != nullptr) { 
        delete enable_token_cleanup_task;
    }
    if(scheduler_expression != nullptr) { 
        delete scheduler_expression;
    }
    if(batch_size != nullptr) { 
        delete batch_size;
    }
}

OAIComDayCrxSecurityTokenImplTokenCleanupTaskProperties*
OAIComDayCrxSecurityTokenImplTokenCleanupTaskProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComDayCrxSecurityTokenImplTokenCleanupTaskProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&enable_token_cleanup_task, pJson["enable.token.cleanup.task"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&scheduler_expression, pJson["scheduler.expression"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&batch_size, pJson["batch.size"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
}

QString
OAIComDayCrxSecurityTokenImplTokenCleanupTaskProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCrxSecurityTokenImplTokenCleanupTaskProperties::asJsonObject() {
    QJsonObject obj;
    if((enable_token_cleanup_task != nullptr) && (enable_token_cleanup_task->isSet())){
        toJsonValue(QString("enable.token.cleanup.task"), enable_token_cleanup_task, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((scheduler_expression != nullptr) && (scheduler_expression->isSet())){
        toJsonValue(QString("scheduler.expression"), scheduler_expression, obj, QString("OAIConfigNodePropertyString"));
    }
    if((batch_size != nullptr) && (batch_size->isSet())){
        toJsonValue(QString("batch.size"), batch_size, obj, QString("OAIConfigNodePropertyInteger"));
    }

    return obj;
}

OAIConfigNodePropertyBoolean*
OAIComDayCrxSecurityTokenImplTokenCleanupTaskProperties::getEnableTokenCleanupTask() {
    return enable_token_cleanup_task;
}
void
OAIComDayCrxSecurityTokenImplTokenCleanupTaskProperties::setEnableTokenCleanupTask(OAIConfigNodePropertyBoolean* enable_token_cleanup_task) {
    this->enable_token_cleanup_task = enable_token_cleanup_task;
    this->m_enable_token_cleanup_task_isSet = true;
}

OAIConfigNodePropertyString*
OAIComDayCrxSecurityTokenImplTokenCleanupTaskProperties::getSchedulerExpression() {
    return scheduler_expression;
}
void
OAIComDayCrxSecurityTokenImplTokenCleanupTaskProperties::setSchedulerExpression(OAIConfigNodePropertyString* scheduler_expression) {
    this->scheduler_expression = scheduler_expression;
    this->m_scheduler_expression_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComDayCrxSecurityTokenImplTokenCleanupTaskProperties::getBatchSize() {
    return batch_size;
}
void
OAIComDayCrxSecurityTokenImplTokenCleanupTaskProperties::setBatchSize(OAIConfigNodePropertyInteger* batch_size) {
    this->batch_size = batch_size;
    this->m_batch_size_isSet = true;
}


bool
OAIComDayCrxSecurityTokenImplTokenCleanupTaskProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(enable_token_cleanup_task != nullptr && enable_token_cleanup_task->isSet()){ isObjectUpdated = true; break;}
        if(scheduler_expression != nullptr && scheduler_expression->isSet()){ isObjectUpdated = true; break;}
        if(batch_size != nullptr && batch_size->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

