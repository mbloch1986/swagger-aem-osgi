/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrgApacheFelixHttpSslfilterSslFilterProperties.h
 *
 * 
 */

#ifndef OrgApacheFelixHttpSslfilterSslFilterProperties_H_
#define OrgApacheFelixHttpSslfilterSslFilterProperties_H_



#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyString.h"
#include <memory>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheFelixHttpSslfilterSslFilterProperties
{
public:
    OrgApacheFelixHttpSslfilterSslFilterProperties();
    virtual ~OrgApacheFelixHttpSslfilterSslFilterProperties();
    
    std::string toJsonString();
    void fromJsonString(std::string const& jsonString);

    /////////////////////////////////////////////
    /// OrgApacheFelixHttpSslfilterSslFilterProperties members
    
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getSslForwardHeader() const;
    void setSslForwardHeader(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getSslForwardValue() const;
    void setSslForwardValue(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getSslForwardCertHeader() const;
    void setSslForwardCertHeader(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getRewriteAbsoluteUrls() const;
    void setRewriteAbsoluteUrls(std::shared_ptr<ConfigNodePropertyBoolean> value);

protected:
    std::shared_ptr<ConfigNodePropertyString> m_Ssl_forward_header;
    std::shared_ptr<ConfigNodePropertyString> m_Ssl_forward_value;
    std::shared_ptr<ConfigNodePropertyString> m_Ssl_forward_cert_header;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Rewrite_absolute_urls;
};

}
}
}
}

#endif /* OrgApacheFelixHttpSslfilterSslFilterProperties_H_ */
