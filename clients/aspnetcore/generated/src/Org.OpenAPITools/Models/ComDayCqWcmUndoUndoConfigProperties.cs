/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ComDayCqWcmUndoUndoConfigProperties : IEquatable<ComDayCqWcmUndoUndoConfigProperties>
    { 
        /// <summary>
        /// Gets or Sets CqWcmUndoEnabled
        /// </summary>
        [DataMember(Name="cq.wcm.undo.enabled")]
        public ConfigNodePropertyBoolean CqWcmUndoEnabled { get; set; }

        /// <summary>
        /// Gets or Sets CqWcmUndoPath
        /// </summary>
        [DataMember(Name="cq.wcm.undo.path")]
        public ConfigNodePropertyString CqWcmUndoPath { get; set; }

        /// <summary>
        /// Gets or Sets CqWcmUndoValidity
        /// </summary>
        [DataMember(Name="cq.wcm.undo.validity")]
        public ConfigNodePropertyInteger CqWcmUndoValidity { get; set; }

        /// <summary>
        /// Gets or Sets CqWcmUndoSteps
        /// </summary>
        [DataMember(Name="cq.wcm.undo.steps")]
        public ConfigNodePropertyInteger CqWcmUndoSteps { get; set; }

        /// <summary>
        /// Gets or Sets CqWcmUndoPersistence
        /// </summary>
        [DataMember(Name="cq.wcm.undo.persistence")]
        public ConfigNodePropertyString CqWcmUndoPersistence { get; set; }

        /// <summary>
        /// Gets or Sets CqWcmUndoPersistenceMode
        /// </summary>
        [DataMember(Name="cq.wcm.undo.persistence.mode")]
        public ConfigNodePropertyBoolean CqWcmUndoPersistenceMode { get; set; }

        /// <summary>
        /// Gets or Sets CqWcmUndoMarkermode
        /// </summary>
        [DataMember(Name="cq.wcm.undo.markermode")]
        public ConfigNodePropertyString CqWcmUndoMarkermode { get; set; }

        /// <summary>
        /// Gets or Sets CqWcmUndoWhitelist
        /// </summary>
        [DataMember(Name="cq.wcm.undo.whitelist")]
        public ConfigNodePropertyArray CqWcmUndoWhitelist { get; set; }

        /// <summary>
        /// Gets or Sets CqWcmUndoBlacklist
        /// </summary>
        [DataMember(Name="cq.wcm.undo.blacklist")]
        public ConfigNodePropertyArray CqWcmUndoBlacklist { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComDayCqWcmUndoUndoConfigProperties {\n");
            sb.Append("  CqWcmUndoEnabled: ").Append(CqWcmUndoEnabled).Append("\n");
            sb.Append("  CqWcmUndoPath: ").Append(CqWcmUndoPath).Append("\n");
            sb.Append("  CqWcmUndoValidity: ").Append(CqWcmUndoValidity).Append("\n");
            sb.Append("  CqWcmUndoSteps: ").Append(CqWcmUndoSteps).Append("\n");
            sb.Append("  CqWcmUndoPersistence: ").Append(CqWcmUndoPersistence).Append("\n");
            sb.Append("  CqWcmUndoPersistenceMode: ").Append(CqWcmUndoPersistenceMode).Append("\n");
            sb.Append("  CqWcmUndoMarkermode: ").Append(CqWcmUndoMarkermode).Append("\n");
            sb.Append("  CqWcmUndoWhitelist: ").Append(CqWcmUndoWhitelist).Append("\n");
            sb.Append("  CqWcmUndoBlacklist: ").Append(CqWcmUndoBlacklist).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComDayCqWcmUndoUndoConfigProperties)obj);
        }

        /// <summary>
        /// Returns true if ComDayCqWcmUndoUndoConfigProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ComDayCqWcmUndoUndoConfigProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComDayCqWcmUndoUndoConfigProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CqWcmUndoEnabled == other.CqWcmUndoEnabled ||
                    CqWcmUndoEnabled != null &&
                    CqWcmUndoEnabled.Equals(other.CqWcmUndoEnabled)
                ) && 
                (
                    CqWcmUndoPath == other.CqWcmUndoPath ||
                    CqWcmUndoPath != null &&
                    CqWcmUndoPath.Equals(other.CqWcmUndoPath)
                ) && 
                (
                    CqWcmUndoValidity == other.CqWcmUndoValidity ||
                    CqWcmUndoValidity != null &&
                    CqWcmUndoValidity.Equals(other.CqWcmUndoValidity)
                ) && 
                (
                    CqWcmUndoSteps == other.CqWcmUndoSteps ||
                    CqWcmUndoSteps != null &&
                    CqWcmUndoSteps.Equals(other.CqWcmUndoSteps)
                ) && 
                (
                    CqWcmUndoPersistence == other.CqWcmUndoPersistence ||
                    CqWcmUndoPersistence != null &&
                    CqWcmUndoPersistence.Equals(other.CqWcmUndoPersistence)
                ) && 
                (
                    CqWcmUndoPersistenceMode == other.CqWcmUndoPersistenceMode ||
                    CqWcmUndoPersistenceMode != null &&
                    CqWcmUndoPersistenceMode.Equals(other.CqWcmUndoPersistenceMode)
                ) && 
                (
                    CqWcmUndoMarkermode == other.CqWcmUndoMarkermode ||
                    CqWcmUndoMarkermode != null &&
                    CqWcmUndoMarkermode.Equals(other.CqWcmUndoMarkermode)
                ) && 
                (
                    CqWcmUndoWhitelist == other.CqWcmUndoWhitelist ||
                    CqWcmUndoWhitelist != null &&
                    CqWcmUndoWhitelist.Equals(other.CqWcmUndoWhitelist)
                ) && 
                (
                    CqWcmUndoBlacklist == other.CqWcmUndoBlacklist ||
                    CqWcmUndoBlacklist != null &&
                    CqWcmUndoBlacklist.Equals(other.CqWcmUndoBlacklist)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CqWcmUndoEnabled != null)
                    hashCode = hashCode * 59 + CqWcmUndoEnabled.GetHashCode();
                    if (CqWcmUndoPath != null)
                    hashCode = hashCode * 59 + CqWcmUndoPath.GetHashCode();
                    if (CqWcmUndoValidity != null)
                    hashCode = hashCode * 59 + CqWcmUndoValidity.GetHashCode();
                    if (CqWcmUndoSteps != null)
                    hashCode = hashCode * 59 + CqWcmUndoSteps.GetHashCode();
                    if (CqWcmUndoPersistence != null)
                    hashCode = hashCode * 59 + CqWcmUndoPersistence.GetHashCode();
                    if (CqWcmUndoPersistenceMode != null)
                    hashCode = hashCode * 59 + CqWcmUndoPersistenceMode.GetHashCode();
                    if (CqWcmUndoMarkermode != null)
                    hashCode = hashCode * 59 + CqWcmUndoMarkermode.GetHashCode();
                    if (CqWcmUndoWhitelist != null)
                    hashCode = hashCode * 59 + CqWcmUndoWhitelist.GetHashCode();
                    if (CqWcmUndoBlacklist != null)
                    hashCode = hashCode * 59 + CqWcmUndoBlacklist.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComDayCqWcmUndoUndoConfigProperties left, ComDayCqWcmUndoUndoConfigProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComDayCqWcmUndoUndoConfigProperties left, ComDayCqWcmUndoUndoConfigProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
