/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties::OAIComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties::OAIComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties() {
    init();
}

OAIComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties::~OAIComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties() {
    this->cleanup();
}

void
OAIComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties::init() {
    payload_move_white_list = new OAIConfigNodePropertyArray();
    m_payload_move_white_list_isSet = false;
    payload_move_handle_from_workflow_process = new OAIConfigNodePropertyBoolean();
    m_payload_move_handle_from_workflow_process_isSet = false;
}

void
OAIComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties::cleanup() {
    if(payload_move_white_list != nullptr) { 
        delete payload_move_white_list;
    }
    if(payload_move_handle_from_workflow_process != nullptr) { 
        delete payload_move_handle_from_workflow_process;
    }
}

OAIComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties*
OAIComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&payload_move_white_list, pJson["payload.move.white.list"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&payload_move_handle_from_workflow_process, pJson["payload.move.handle.from.workflow.process"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
}

QString
OAIComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties::asJsonObject() {
    QJsonObject obj;
    if((payload_move_white_list != nullptr) && (payload_move_white_list->isSet())){
        toJsonValue(QString("payload.move.white.list"), payload_move_white_list, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((payload_move_handle_from_workflow_process != nullptr) && (payload_move_handle_from_workflow_process->isSet())){
        toJsonValue(QString("payload.move.handle.from.workflow.process"), payload_move_handle_from_workflow_process, obj, QString("OAIConfigNodePropertyBoolean"));
    }

    return obj;
}

OAIConfigNodePropertyArray*
OAIComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties::getPayloadMoveWhiteList() {
    return payload_move_white_list;
}
void
OAIComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties::setPayloadMoveWhiteList(OAIConfigNodePropertyArray* payload_move_white_list) {
    this->payload_move_white_list = payload_move_white_list;
    this->m_payload_move_white_list_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties::getPayloadMoveHandleFromWorkflowProcess() {
    return payload_move_handle_from_workflow_process;
}
void
OAIComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties::setPayloadMoveHandleFromWorkflowProcess(OAIConfigNodePropertyBoolean* payload_move_handle_from_workflow_process) {
    this->payload_move_handle_from_workflow_process = payload_move_handle_from_workflow_process;
    this->m_payload_move_handle_from_workflow_process_isSet = true;
}


bool
OAIComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(payload_move_white_list != nullptr && payload_move_white_list->isSet()){ isObjectUpdated = true; break;}
        if(payload_move_handle_from_workflow_process != nullptr && payload_move_handle_from_workflow_process->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

