/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties.h
 *
 * 
 */

#ifndef OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties_H
#define OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties_H

#include <QJsonObject>


#include "OAIConfigNodePropertyArray.h"
#include "OAIConfigNodePropertyBoolean.h"
#include "OAIConfigNodePropertyInteger.h"
#include "OAIConfigNodePropertyString.h"

#include "OAIObject.h"

namespace OpenAPI {

class OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties: public OAIObject {
public:
    OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties();
    OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties(QString json);
    ~OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties() override;
    void init();

    QString asJson () const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIConfigNodePropertyBoolean getEnabled() const;
    void setEnabled(const OAIConfigNodePropertyBoolean &enabled);

    OAIConfigNodePropertyInteger getIntervalSeconds() const;
    void setIntervalSeconds(const OAIConfigNodePropertyInteger &interval_seconds);

    OAIConfigNodePropertyInteger getCommitsPerIntervalThreshold() const;
    void setCommitsPerIntervalThreshold(const OAIConfigNodePropertyInteger &commits_per_interval_threshold);

    OAIConfigNodePropertyInteger getMaxLocationLength() const;
    void setMaxLocationLength(const OAIConfigNodePropertyInteger &max_location_length);

    OAIConfigNodePropertyInteger getMaxDetailsShown() const;
    void setMaxDetailsShown(const OAIConfigNodePropertyInteger &max_details_shown);

    OAIConfigNodePropertyInteger getMinDetailsPercentage() const;
    void setMinDetailsPercentage(const OAIConfigNodePropertyInteger &min_details_percentage);

    OAIConfigNodePropertyArray getThreadMatchers() const;
    void setThreadMatchers(const OAIConfigNodePropertyArray &thread_matchers);

    OAIConfigNodePropertyInteger getMaxGreedyDepth() const;
    void setMaxGreedyDepth(const OAIConfigNodePropertyInteger &max_greedy_depth);

    OAIConfigNodePropertyString getGreedyStackMatchers() const;
    void setGreedyStackMatchers(const OAIConfigNodePropertyString &greedy_stack_matchers);

    OAIConfigNodePropertyArray getStackFilters() const;
    void setStackFilters(const OAIConfigNodePropertyArray &stack_filters);

    OAIConfigNodePropertyArray getStackMatchers() const;
    void setStackMatchers(const OAIConfigNodePropertyArray &stack_matchers);

    OAIConfigNodePropertyArray getStackCategorizers() const;
    void setStackCategorizers(const OAIConfigNodePropertyArray &stack_categorizers);

    OAIConfigNodePropertyArray getStackShorteners() const;
    void setStackShorteners(const OAIConfigNodePropertyArray &stack_shorteners);

    virtual bool isSet() const override;

private:
    OAIConfigNodePropertyBoolean enabled;
    bool m_enabled_isSet;

    OAIConfigNodePropertyInteger interval_seconds;
    bool m_interval_seconds_isSet;

    OAIConfigNodePropertyInteger commits_per_interval_threshold;
    bool m_commits_per_interval_threshold_isSet;

    OAIConfigNodePropertyInteger max_location_length;
    bool m_max_location_length_isSet;

    OAIConfigNodePropertyInteger max_details_shown;
    bool m_max_details_shown_isSet;

    OAIConfigNodePropertyInteger min_details_percentage;
    bool m_min_details_percentage_isSet;

    OAIConfigNodePropertyArray thread_matchers;
    bool m_thread_matchers_isSet;

    OAIConfigNodePropertyInteger max_greedy_depth;
    bool m_max_greedy_depth_isSet;

    OAIConfigNodePropertyString greedy_stack_matchers;
    bool m_greedy_stack_matchers_isSet;

    OAIConfigNodePropertyArray stack_filters;
    bool m_stack_filters_isSet;

    OAIConfigNodePropertyArray stack_matchers;
    bool m_stack_matchers_isSet;

    OAIConfigNodePropertyArray stack_categorizers;
    bool m_stack_categorizers_isSet;

    OAIConfigNodePropertyArray stack_shorteners;
    bool m_stack_shorteners_isSet;

};

}

#endif // OAIComAdobeGraniteRepositoryImplCommitStatsConfigProperties_H
