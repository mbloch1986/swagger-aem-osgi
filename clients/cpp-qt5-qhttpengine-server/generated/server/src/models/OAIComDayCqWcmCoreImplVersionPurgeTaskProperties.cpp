/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqWcmCoreImplVersionPurgeTaskProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqWcmCoreImplVersionPurgeTaskProperties::OAIComDayCqWcmCoreImplVersionPurgeTaskProperties(QString json) {
    this->fromJson(json);
}

OAIComDayCqWcmCoreImplVersionPurgeTaskProperties::OAIComDayCqWcmCoreImplVersionPurgeTaskProperties() {
    this->init();
}

OAIComDayCqWcmCoreImplVersionPurgeTaskProperties::~OAIComDayCqWcmCoreImplVersionPurgeTaskProperties() {
    
}

void
OAIComDayCqWcmCoreImplVersionPurgeTaskProperties::init() {
    m_versionpurge_paths_isSet = false;
    m_versionpurge_recursive_isSet = false;
    m_versionpurge_max_versions_isSet = false;
    m_versionpurge_min_versions_isSet = false;
    m_versionpurge_max_age_days_isSet = false;
}

void
OAIComDayCqWcmCoreImplVersionPurgeTaskProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComDayCqWcmCoreImplVersionPurgeTaskProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(versionpurge_paths, json[QString("versionpurge.paths")]);
    
    ::OpenAPI::fromJsonValue(versionpurge_recursive, json[QString("versionpurge.recursive")]);
    
    ::OpenAPI::fromJsonValue(versionpurge_max_versions, json[QString("versionpurge.maxVersions")]);
    
    ::OpenAPI::fromJsonValue(versionpurge_min_versions, json[QString("versionpurge.minVersions")]);
    
    ::OpenAPI::fromJsonValue(versionpurge_max_age_days, json[QString("versionpurge.maxAgeDays")]);
    
}

QString
OAIComDayCqWcmCoreImplVersionPurgeTaskProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqWcmCoreImplVersionPurgeTaskProperties::asJsonObject() const {
    QJsonObject obj;
	if(versionpurge_paths.isSet()){
        obj.insert(QString("versionpurge.paths"), ::OpenAPI::toJsonValue(versionpurge_paths));
    }
	if(versionpurge_recursive.isSet()){
        obj.insert(QString("versionpurge.recursive"), ::OpenAPI::toJsonValue(versionpurge_recursive));
    }
	if(versionpurge_max_versions.isSet()){
        obj.insert(QString("versionpurge.maxVersions"), ::OpenAPI::toJsonValue(versionpurge_max_versions));
    }
	if(versionpurge_min_versions.isSet()){
        obj.insert(QString("versionpurge.minVersions"), ::OpenAPI::toJsonValue(versionpurge_min_versions));
    }
	if(versionpurge_max_age_days.isSet()){
        obj.insert(QString("versionpurge.maxAgeDays"), ::OpenAPI::toJsonValue(versionpurge_max_age_days));
    }
    return obj;
}

OAIConfigNodePropertyArray
OAIComDayCqWcmCoreImplVersionPurgeTaskProperties::getVersionpurgePaths() const {
    return versionpurge_paths;
}
void
OAIComDayCqWcmCoreImplVersionPurgeTaskProperties::setVersionpurgePaths(const OAIConfigNodePropertyArray &versionpurge_paths) {
    this->versionpurge_paths = versionpurge_paths;
    this->m_versionpurge_paths_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComDayCqWcmCoreImplVersionPurgeTaskProperties::getVersionpurgeRecursive() const {
    return versionpurge_recursive;
}
void
OAIComDayCqWcmCoreImplVersionPurgeTaskProperties::setVersionpurgeRecursive(const OAIConfigNodePropertyBoolean &versionpurge_recursive) {
    this->versionpurge_recursive = versionpurge_recursive;
    this->m_versionpurge_recursive_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComDayCqWcmCoreImplVersionPurgeTaskProperties::getVersionpurgeMaxVersions() const {
    return versionpurge_max_versions;
}
void
OAIComDayCqWcmCoreImplVersionPurgeTaskProperties::setVersionpurgeMaxVersions(const OAIConfigNodePropertyInteger &versionpurge_max_versions) {
    this->versionpurge_max_versions = versionpurge_max_versions;
    this->m_versionpurge_max_versions_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComDayCqWcmCoreImplVersionPurgeTaskProperties::getVersionpurgeMinVersions() const {
    return versionpurge_min_versions;
}
void
OAIComDayCqWcmCoreImplVersionPurgeTaskProperties::setVersionpurgeMinVersions(const OAIConfigNodePropertyInteger &versionpurge_min_versions) {
    this->versionpurge_min_versions = versionpurge_min_versions;
    this->m_versionpurge_min_versions_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComDayCqWcmCoreImplVersionPurgeTaskProperties::getVersionpurgeMaxAgeDays() const {
    return versionpurge_max_age_days;
}
void
OAIComDayCqWcmCoreImplVersionPurgeTaskProperties::setVersionpurgeMaxAgeDays(const OAIConfigNodePropertyInteger &versionpurge_max_age_days) {
    this->versionpurge_max_age_days = versionpurge_max_age_days;
    this->m_versionpurge_max_age_days_isSet = true;
}


bool
OAIComDayCqWcmCoreImplVersionPurgeTaskProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(versionpurge_paths.isSet()){ isObjectUpdated = true; break;}
    
        if(versionpurge_recursive.isSet()){ isObjectUpdated = true; break;}
    
        if(versionpurge_max_versions.isSet()){ isObjectUpdated = true; break;}
    
        if(versionpurge_min_versions.isSet()){ isObjectUpdated = true; break;}
    
        if(versionpurge_max_age_days.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

