/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheSlingDatasourceDataSourceFactoryProperties {
  #[serde(rename = "datasource.name")]
  datasource_name: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "datasource.svc.prop.name")]
  datasource_svc_prop_name: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "driverClassName")]
  driver_class_name: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "url")]
  url: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "username")]
  username: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "password")]
  password: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "defaultAutoCommit")]
  default_auto_commit: Option<::models::ConfigNodePropertyDropDown>,
  #[serde(rename = "defaultReadOnly")]
  default_read_only: Option<::models::ConfigNodePropertyDropDown>,
  #[serde(rename = "defaultTransactionIsolation")]
  default_transaction_isolation: Option<::models::ConfigNodePropertyDropDown>,
  #[serde(rename = "defaultCatalog")]
  default_catalog: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "maxActive")]
  max_active: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "maxIdle")]
  max_idle: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "minIdle")]
  min_idle: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "initialSize")]
  initial_size: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "maxWait")]
  max_wait: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "maxAge")]
  max_age: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "testOnBorrow")]
  test_on_borrow: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "testOnReturn")]
  test_on_return: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "testWhileIdle")]
  test_while_idle: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "validationQuery")]
  validation_query: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "validationQueryTimeout")]
  validation_query_timeout: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "timeBetweenEvictionRunsMillis")]
  time_between_eviction_runs_millis: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "minEvictableIdleTimeMillis")]
  min_evictable_idle_time_millis: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "connectionProperties")]
  connection_properties: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "initSQL")]
  init_sql: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "jdbcInterceptors")]
  jdbc_interceptors: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "validationInterval")]
  validation_interval: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "logValidationErrors")]
  log_validation_errors: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "datasource.svc.properties")]
  datasource_svc_properties: Option<::models::ConfigNodePropertyArray>
}

impl OrgApacheSlingDatasourceDataSourceFactoryProperties {
  pub fn new() -> OrgApacheSlingDatasourceDataSourceFactoryProperties {
    OrgApacheSlingDatasourceDataSourceFactoryProperties {
      datasource_name: None,
      datasource_svc_prop_name: None,
      driver_class_name: None,
      url: None,
      username: None,
      password: None,
      default_auto_commit: None,
      default_read_only: None,
      default_transaction_isolation: None,
      default_catalog: None,
      max_active: None,
      max_idle: None,
      min_idle: None,
      initial_size: None,
      max_wait: None,
      max_age: None,
      test_on_borrow: None,
      test_on_return: None,
      test_while_idle: None,
      validation_query: None,
      validation_query_timeout: None,
      time_between_eviction_runs_millis: None,
      min_evictable_idle_time_millis: None,
      connection_properties: None,
      init_sql: None,
      jdbc_interceptors: None,
      validation_interval: None,
      log_validation_errors: None,
      datasource_svc_properties: None
    }
  }

  pub fn set_datasource_name(&mut self, datasource_name: ::models::ConfigNodePropertyString) {
    self.datasource_name = Some(datasource_name);
  }

  pub fn with_datasource_name(mut self, datasource_name: ::models::ConfigNodePropertyString) -> OrgApacheSlingDatasourceDataSourceFactoryProperties {
    self.datasource_name = Some(datasource_name);
    self
  }

  pub fn datasource_name(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.datasource_name.as_ref()
  }

  pub fn reset_datasource_name(&mut self) {
    self.datasource_name = None;
  }

  pub fn set_datasource_svc_prop_name(&mut self, datasource_svc_prop_name: ::models::ConfigNodePropertyString) {
    self.datasource_svc_prop_name = Some(datasource_svc_prop_name);
  }

  pub fn with_datasource_svc_prop_name(mut self, datasource_svc_prop_name: ::models::ConfigNodePropertyString) -> OrgApacheSlingDatasourceDataSourceFactoryProperties {
    self.datasource_svc_prop_name = Some(datasource_svc_prop_name);
    self
  }

  pub fn datasource_svc_prop_name(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.datasource_svc_prop_name.as_ref()
  }

  pub fn reset_datasource_svc_prop_name(&mut self) {
    self.datasource_svc_prop_name = None;
  }

  pub fn set_driver_class_name(&mut self, driver_class_name: ::models::ConfigNodePropertyString) {
    self.driver_class_name = Some(driver_class_name);
  }

  pub fn with_driver_class_name(mut self, driver_class_name: ::models::ConfigNodePropertyString) -> OrgApacheSlingDatasourceDataSourceFactoryProperties {
    self.driver_class_name = Some(driver_class_name);
    self
  }

  pub fn driver_class_name(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.driver_class_name.as_ref()
  }

  pub fn reset_driver_class_name(&mut self) {
    self.driver_class_name = None;
  }

  pub fn set_url(&mut self, url: ::models::ConfigNodePropertyString) {
    self.url = Some(url);
  }

  pub fn with_url(mut self, url: ::models::ConfigNodePropertyString) -> OrgApacheSlingDatasourceDataSourceFactoryProperties {
    self.url = Some(url);
    self
  }

  pub fn url(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.url.as_ref()
  }

  pub fn reset_url(&mut self) {
    self.url = None;
  }

  pub fn set_username(&mut self, username: ::models::ConfigNodePropertyString) {
    self.username = Some(username);
  }

  pub fn with_username(mut self, username: ::models::ConfigNodePropertyString) -> OrgApacheSlingDatasourceDataSourceFactoryProperties {
    self.username = Some(username);
    self
  }

  pub fn username(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.username.as_ref()
  }

  pub fn reset_username(&mut self) {
    self.username = None;
  }

  pub fn set_password(&mut self, password: ::models::ConfigNodePropertyString) {
    self.password = Some(password);
  }

  pub fn with_password(mut self, password: ::models::ConfigNodePropertyString) -> OrgApacheSlingDatasourceDataSourceFactoryProperties {
    self.password = Some(password);
    self
  }

  pub fn password(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.password.as_ref()
  }

  pub fn reset_password(&mut self) {
    self.password = None;
  }

  pub fn set_default_auto_commit(&mut self, default_auto_commit: ::models::ConfigNodePropertyDropDown) {
    self.default_auto_commit = Some(default_auto_commit);
  }

  pub fn with_default_auto_commit(mut self, default_auto_commit: ::models::ConfigNodePropertyDropDown) -> OrgApacheSlingDatasourceDataSourceFactoryProperties {
    self.default_auto_commit = Some(default_auto_commit);
    self
  }

  pub fn default_auto_commit(&self) -> Option<&::models::ConfigNodePropertyDropDown> {
    self.default_auto_commit.as_ref()
  }

  pub fn reset_default_auto_commit(&mut self) {
    self.default_auto_commit = None;
  }

  pub fn set_default_read_only(&mut self, default_read_only: ::models::ConfigNodePropertyDropDown) {
    self.default_read_only = Some(default_read_only);
  }

  pub fn with_default_read_only(mut self, default_read_only: ::models::ConfigNodePropertyDropDown) -> OrgApacheSlingDatasourceDataSourceFactoryProperties {
    self.default_read_only = Some(default_read_only);
    self
  }

  pub fn default_read_only(&self) -> Option<&::models::ConfigNodePropertyDropDown> {
    self.default_read_only.as_ref()
  }

  pub fn reset_default_read_only(&mut self) {
    self.default_read_only = None;
  }

  pub fn set_default_transaction_isolation(&mut self, default_transaction_isolation: ::models::ConfigNodePropertyDropDown) {
    self.default_transaction_isolation = Some(default_transaction_isolation);
  }

  pub fn with_default_transaction_isolation(mut self, default_transaction_isolation: ::models::ConfigNodePropertyDropDown) -> OrgApacheSlingDatasourceDataSourceFactoryProperties {
    self.default_transaction_isolation = Some(default_transaction_isolation);
    self
  }

  pub fn default_transaction_isolation(&self) -> Option<&::models::ConfigNodePropertyDropDown> {
    self.default_transaction_isolation.as_ref()
  }

  pub fn reset_default_transaction_isolation(&mut self) {
    self.default_transaction_isolation = None;
  }

  pub fn set_default_catalog(&mut self, default_catalog: ::models::ConfigNodePropertyString) {
    self.default_catalog = Some(default_catalog);
  }

  pub fn with_default_catalog(mut self, default_catalog: ::models::ConfigNodePropertyString) -> OrgApacheSlingDatasourceDataSourceFactoryProperties {
    self.default_catalog = Some(default_catalog);
    self
  }

  pub fn default_catalog(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.default_catalog.as_ref()
  }

  pub fn reset_default_catalog(&mut self) {
    self.default_catalog = None;
  }

  pub fn set_max_active(&mut self, max_active: ::models::ConfigNodePropertyInteger) {
    self.max_active = Some(max_active);
  }

  pub fn with_max_active(mut self, max_active: ::models::ConfigNodePropertyInteger) -> OrgApacheSlingDatasourceDataSourceFactoryProperties {
    self.max_active = Some(max_active);
    self
  }

  pub fn max_active(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.max_active.as_ref()
  }

  pub fn reset_max_active(&mut self) {
    self.max_active = None;
  }

  pub fn set_max_idle(&mut self, max_idle: ::models::ConfigNodePropertyInteger) {
    self.max_idle = Some(max_idle);
  }

  pub fn with_max_idle(mut self, max_idle: ::models::ConfigNodePropertyInteger) -> OrgApacheSlingDatasourceDataSourceFactoryProperties {
    self.max_idle = Some(max_idle);
    self
  }

  pub fn max_idle(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.max_idle.as_ref()
  }

  pub fn reset_max_idle(&mut self) {
    self.max_idle = None;
  }

  pub fn set_min_idle(&mut self, min_idle: ::models::ConfigNodePropertyInteger) {
    self.min_idle = Some(min_idle);
  }

  pub fn with_min_idle(mut self, min_idle: ::models::ConfigNodePropertyInteger) -> OrgApacheSlingDatasourceDataSourceFactoryProperties {
    self.min_idle = Some(min_idle);
    self
  }

  pub fn min_idle(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.min_idle.as_ref()
  }

  pub fn reset_min_idle(&mut self) {
    self.min_idle = None;
  }

  pub fn set_initial_size(&mut self, initial_size: ::models::ConfigNodePropertyInteger) {
    self.initial_size = Some(initial_size);
  }

  pub fn with_initial_size(mut self, initial_size: ::models::ConfigNodePropertyInteger) -> OrgApacheSlingDatasourceDataSourceFactoryProperties {
    self.initial_size = Some(initial_size);
    self
  }

  pub fn initial_size(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.initial_size.as_ref()
  }

  pub fn reset_initial_size(&mut self) {
    self.initial_size = None;
  }

  pub fn set_max_wait(&mut self, max_wait: ::models::ConfigNodePropertyInteger) {
    self.max_wait = Some(max_wait);
  }

  pub fn with_max_wait(mut self, max_wait: ::models::ConfigNodePropertyInteger) -> OrgApacheSlingDatasourceDataSourceFactoryProperties {
    self.max_wait = Some(max_wait);
    self
  }

  pub fn max_wait(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.max_wait.as_ref()
  }

  pub fn reset_max_wait(&mut self) {
    self.max_wait = None;
  }

  pub fn set_max_age(&mut self, max_age: ::models::ConfigNodePropertyInteger) {
    self.max_age = Some(max_age);
  }

  pub fn with_max_age(mut self, max_age: ::models::ConfigNodePropertyInteger) -> OrgApacheSlingDatasourceDataSourceFactoryProperties {
    self.max_age = Some(max_age);
    self
  }

  pub fn max_age(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.max_age.as_ref()
  }

  pub fn reset_max_age(&mut self) {
    self.max_age = None;
  }

  pub fn set_test_on_borrow(&mut self, test_on_borrow: ::models::ConfigNodePropertyBoolean) {
    self.test_on_borrow = Some(test_on_borrow);
  }

  pub fn with_test_on_borrow(mut self, test_on_borrow: ::models::ConfigNodePropertyBoolean) -> OrgApacheSlingDatasourceDataSourceFactoryProperties {
    self.test_on_borrow = Some(test_on_borrow);
    self
  }

  pub fn test_on_borrow(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.test_on_borrow.as_ref()
  }

  pub fn reset_test_on_borrow(&mut self) {
    self.test_on_borrow = None;
  }

  pub fn set_test_on_return(&mut self, test_on_return: ::models::ConfigNodePropertyBoolean) {
    self.test_on_return = Some(test_on_return);
  }

  pub fn with_test_on_return(mut self, test_on_return: ::models::ConfigNodePropertyBoolean) -> OrgApacheSlingDatasourceDataSourceFactoryProperties {
    self.test_on_return = Some(test_on_return);
    self
  }

  pub fn test_on_return(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.test_on_return.as_ref()
  }

  pub fn reset_test_on_return(&mut self) {
    self.test_on_return = None;
  }

  pub fn set_test_while_idle(&mut self, test_while_idle: ::models::ConfigNodePropertyBoolean) {
    self.test_while_idle = Some(test_while_idle);
  }

  pub fn with_test_while_idle(mut self, test_while_idle: ::models::ConfigNodePropertyBoolean) -> OrgApacheSlingDatasourceDataSourceFactoryProperties {
    self.test_while_idle = Some(test_while_idle);
    self
  }

  pub fn test_while_idle(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.test_while_idle.as_ref()
  }

  pub fn reset_test_while_idle(&mut self) {
    self.test_while_idle = None;
  }

  pub fn set_validation_query(&mut self, validation_query: ::models::ConfigNodePropertyString) {
    self.validation_query = Some(validation_query);
  }

  pub fn with_validation_query(mut self, validation_query: ::models::ConfigNodePropertyString) -> OrgApacheSlingDatasourceDataSourceFactoryProperties {
    self.validation_query = Some(validation_query);
    self
  }

  pub fn validation_query(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.validation_query.as_ref()
  }

  pub fn reset_validation_query(&mut self) {
    self.validation_query = None;
  }

  pub fn set_validation_query_timeout(&mut self, validation_query_timeout: ::models::ConfigNodePropertyInteger) {
    self.validation_query_timeout = Some(validation_query_timeout);
  }

  pub fn with_validation_query_timeout(mut self, validation_query_timeout: ::models::ConfigNodePropertyInteger) -> OrgApacheSlingDatasourceDataSourceFactoryProperties {
    self.validation_query_timeout = Some(validation_query_timeout);
    self
  }

  pub fn validation_query_timeout(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.validation_query_timeout.as_ref()
  }

  pub fn reset_validation_query_timeout(&mut self) {
    self.validation_query_timeout = None;
  }

  pub fn set_time_between_eviction_runs_millis(&mut self, time_between_eviction_runs_millis: ::models::ConfigNodePropertyInteger) {
    self.time_between_eviction_runs_millis = Some(time_between_eviction_runs_millis);
  }

  pub fn with_time_between_eviction_runs_millis(mut self, time_between_eviction_runs_millis: ::models::ConfigNodePropertyInteger) -> OrgApacheSlingDatasourceDataSourceFactoryProperties {
    self.time_between_eviction_runs_millis = Some(time_between_eviction_runs_millis);
    self
  }

  pub fn time_between_eviction_runs_millis(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.time_between_eviction_runs_millis.as_ref()
  }

  pub fn reset_time_between_eviction_runs_millis(&mut self) {
    self.time_between_eviction_runs_millis = None;
  }

  pub fn set_min_evictable_idle_time_millis(&mut self, min_evictable_idle_time_millis: ::models::ConfigNodePropertyInteger) {
    self.min_evictable_idle_time_millis = Some(min_evictable_idle_time_millis);
  }

  pub fn with_min_evictable_idle_time_millis(mut self, min_evictable_idle_time_millis: ::models::ConfigNodePropertyInteger) -> OrgApacheSlingDatasourceDataSourceFactoryProperties {
    self.min_evictable_idle_time_millis = Some(min_evictable_idle_time_millis);
    self
  }

  pub fn min_evictable_idle_time_millis(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.min_evictable_idle_time_millis.as_ref()
  }

  pub fn reset_min_evictable_idle_time_millis(&mut self) {
    self.min_evictable_idle_time_millis = None;
  }

  pub fn set_connection_properties(&mut self, connection_properties: ::models::ConfigNodePropertyString) {
    self.connection_properties = Some(connection_properties);
  }

  pub fn with_connection_properties(mut self, connection_properties: ::models::ConfigNodePropertyString) -> OrgApacheSlingDatasourceDataSourceFactoryProperties {
    self.connection_properties = Some(connection_properties);
    self
  }

  pub fn connection_properties(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.connection_properties.as_ref()
  }

  pub fn reset_connection_properties(&mut self) {
    self.connection_properties = None;
  }

  pub fn set_init_sql(&mut self, init_sql: ::models::ConfigNodePropertyString) {
    self.init_sql = Some(init_sql);
  }

  pub fn with_init_sql(mut self, init_sql: ::models::ConfigNodePropertyString) -> OrgApacheSlingDatasourceDataSourceFactoryProperties {
    self.init_sql = Some(init_sql);
    self
  }

  pub fn init_sql(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.init_sql.as_ref()
  }

  pub fn reset_init_sql(&mut self) {
    self.init_sql = None;
  }

  pub fn set_jdbc_interceptors(&mut self, jdbc_interceptors: ::models::ConfigNodePropertyString) {
    self.jdbc_interceptors = Some(jdbc_interceptors);
  }

  pub fn with_jdbc_interceptors(mut self, jdbc_interceptors: ::models::ConfigNodePropertyString) -> OrgApacheSlingDatasourceDataSourceFactoryProperties {
    self.jdbc_interceptors = Some(jdbc_interceptors);
    self
  }

  pub fn jdbc_interceptors(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.jdbc_interceptors.as_ref()
  }

  pub fn reset_jdbc_interceptors(&mut self) {
    self.jdbc_interceptors = None;
  }

  pub fn set_validation_interval(&mut self, validation_interval: ::models::ConfigNodePropertyInteger) {
    self.validation_interval = Some(validation_interval);
  }

  pub fn with_validation_interval(mut self, validation_interval: ::models::ConfigNodePropertyInteger) -> OrgApacheSlingDatasourceDataSourceFactoryProperties {
    self.validation_interval = Some(validation_interval);
    self
  }

  pub fn validation_interval(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.validation_interval.as_ref()
  }

  pub fn reset_validation_interval(&mut self) {
    self.validation_interval = None;
  }

  pub fn set_log_validation_errors(&mut self, log_validation_errors: ::models::ConfigNodePropertyBoolean) {
    self.log_validation_errors = Some(log_validation_errors);
  }

  pub fn with_log_validation_errors(mut self, log_validation_errors: ::models::ConfigNodePropertyBoolean) -> OrgApacheSlingDatasourceDataSourceFactoryProperties {
    self.log_validation_errors = Some(log_validation_errors);
    self
  }

  pub fn log_validation_errors(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.log_validation_errors.as_ref()
  }

  pub fn reset_log_validation_errors(&mut self) {
    self.log_validation_errors = None;
  }

  pub fn set_datasource_svc_properties(&mut self, datasource_svc_properties: ::models::ConfigNodePropertyArray) {
    self.datasource_svc_properties = Some(datasource_svc_properties);
  }

  pub fn with_datasource_svc_properties(mut self, datasource_svc_properties: ::models::ConfigNodePropertyArray) -> OrgApacheSlingDatasourceDataSourceFactoryProperties {
    self.datasource_svc_properties = Some(datasource_svc_properties);
    self
  }

  pub fn datasource_svc_properties(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.datasource_svc_properties.as_ref()
  }

  pub fn reset_datasource_svc_properties(&mut self) {
    self.datasource_svc_properties = None;
  }

}



