<?php
/**
 * OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'title' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'details' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'enabled' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'service_name' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'log_level' => '\OpenAPI\Client\Model\ConfigNodePropertyDropDown',
        'allowed_roots' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'queue_processing_enabled' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'package_importer_endpoints' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'passive_queues' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'priority_queues' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'retry_strategy' => '\OpenAPI\Client\Model\ConfigNodePropertyDropDown',
        'retry_attempts' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'request_authorization_strategy_target' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'transport_secret_provider_target' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'package_builder_target' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'triggers_target' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'queue_provider' => '\OpenAPI\Client\Model\ConfigNodePropertyDropDown',
        'async_delivery' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'http_conn_timeout' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'name' => null,
        'title' => null,
        'details' => null,
        'enabled' => null,
        'service_name' => null,
        'log_level' => null,
        'allowed_roots' => null,
        'queue_processing_enabled' => null,
        'package_importer_endpoints' => null,
        'passive_queues' => null,
        'priority_queues' => null,
        'retry_strategy' => null,
        'retry_attempts' => null,
        'request_authorization_strategy_target' => null,
        'transport_secret_provider_target' => null,
        'package_builder_target' => null,
        'triggers_target' => null,
        'queue_provider' => null,
        'async_delivery' => null,
        'http_conn_timeout' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'title' => 'title',
        'details' => 'details',
        'enabled' => 'enabled',
        'service_name' => 'serviceName',
        'log_level' => 'log.level',
        'allowed_roots' => 'allowed.roots',
        'queue_processing_enabled' => 'queue.processing.enabled',
        'package_importer_endpoints' => 'packageImporter.endpoints',
        'passive_queues' => 'passiveQueues',
        'priority_queues' => 'priorityQueues',
        'retry_strategy' => 'retry.strategy',
        'retry_attempts' => 'retry.attempts',
        'request_authorization_strategy_target' => 'requestAuthorizationStrategy.target',
        'transport_secret_provider_target' => 'transportSecretProvider.target',
        'package_builder_target' => 'packageBuilder.target',
        'triggers_target' => 'triggers.target',
        'queue_provider' => 'queue.provider',
        'async_delivery' => 'async.delivery',
        'http_conn_timeout' => 'http.conn.timeout'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'title' => 'setTitle',
        'details' => 'setDetails',
        'enabled' => 'setEnabled',
        'service_name' => 'setServiceName',
        'log_level' => 'setLogLevel',
        'allowed_roots' => 'setAllowedRoots',
        'queue_processing_enabled' => 'setQueueProcessingEnabled',
        'package_importer_endpoints' => 'setPackageImporterEndpoints',
        'passive_queues' => 'setPassiveQueues',
        'priority_queues' => 'setPriorityQueues',
        'retry_strategy' => 'setRetryStrategy',
        'retry_attempts' => 'setRetryAttempts',
        'request_authorization_strategy_target' => 'setRequestAuthorizationStrategyTarget',
        'transport_secret_provider_target' => 'setTransportSecretProviderTarget',
        'package_builder_target' => 'setPackageBuilderTarget',
        'triggers_target' => 'setTriggersTarget',
        'queue_provider' => 'setQueueProvider',
        'async_delivery' => 'setAsyncDelivery',
        'http_conn_timeout' => 'setHttpConnTimeout'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'title' => 'getTitle',
        'details' => 'getDetails',
        'enabled' => 'getEnabled',
        'service_name' => 'getServiceName',
        'log_level' => 'getLogLevel',
        'allowed_roots' => 'getAllowedRoots',
        'queue_processing_enabled' => 'getQueueProcessingEnabled',
        'package_importer_endpoints' => 'getPackageImporterEndpoints',
        'passive_queues' => 'getPassiveQueues',
        'priority_queues' => 'getPriorityQueues',
        'retry_strategy' => 'getRetryStrategy',
        'retry_attempts' => 'getRetryAttempts',
        'request_authorization_strategy_target' => 'getRequestAuthorizationStrategyTarget',
        'transport_secret_provider_target' => 'getTransportSecretProviderTarget',
        'package_builder_target' => 'getPackageBuilderTarget',
        'triggers_target' => 'getTriggersTarget',
        'queue_provider' => 'getQueueProvider',
        'async_delivery' => 'getAsyncDelivery',
        'http_conn_timeout' => 'getHttpConnTimeout'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['details'] = isset($data['details']) ? $data['details'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['service_name'] = isset($data['service_name']) ? $data['service_name'] : null;
        $this->container['log_level'] = isset($data['log_level']) ? $data['log_level'] : null;
        $this->container['allowed_roots'] = isset($data['allowed_roots']) ? $data['allowed_roots'] : null;
        $this->container['queue_processing_enabled'] = isset($data['queue_processing_enabled']) ? $data['queue_processing_enabled'] : null;
        $this->container['package_importer_endpoints'] = isset($data['package_importer_endpoints']) ? $data['package_importer_endpoints'] : null;
        $this->container['passive_queues'] = isset($data['passive_queues']) ? $data['passive_queues'] : null;
        $this->container['priority_queues'] = isset($data['priority_queues']) ? $data['priority_queues'] : null;
        $this->container['retry_strategy'] = isset($data['retry_strategy']) ? $data['retry_strategy'] : null;
        $this->container['retry_attempts'] = isset($data['retry_attempts']) ? $data['retry_attempts'] : null;
        $this->container['request_authorization_strategy_target'] = isset($data['request_authorization_strategy_target']) ? $data['request_authorization_strategy_target'] : null;
        $this->container['transport_secret_provider_target'] = isset($data['transport_secret_provider_target']) ? $data['transport_secret_provider_target'] : null;
        $this->container['package_builder_target'] = isset($data['package_builder_target']) ? $data['package_builder_target'] : null;
        $this->container['triggers_target'] = isset($data['triggers_target']) ? $data['triggers_target'] : null;
        $this->container['queue_provider'] = isset($data['queue_provider']) ? $data['queue_provider'] : null;
        $this->container['async_delivery'] = isset($data['async_delivery']) ? $data['async_delivery'] : null;
        $this->container['http_conn_timeout'] = isset($data['http_conn_timeout']) ? $data['http_conn_timeout'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets title
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets details
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $details details
     *
     * @return $this
     */
    public function setDetails($details)
    {
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $enabled enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets service_name
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getServiceName()
    {
        return $this->container['service_name'];
    }

    /**
     * Sets service_name
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $service_name service_name
     *
     * @return $this
     */
    public function setServiceName($service_name)
    {
        $this->container['service_name'] = $service_name;

        return $this;
    }

    /**
     * Gets log_level
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyDropDown|null
     */
    public function getLogLevel()
    {
        return $this->container['log_level'];
    }

    /**
     * Sets log_level
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyDropDown|null $log_level log_level
     *
     * @return $this
     */
    public function setLogLevel($log_level)
    {
        $this->container['log_level'] = $log_level;

        return $this;
    }

    /**
     * Gets allowed_roots
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getAllowedRoots()
    {
        return $this->container['allowed_roots'];
    }

    /**
     * Sets allowed_roots
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $allowed_roots allowed_roots
     *
     * @return $this
     */
    public function setAllowedRoots($allowed_roots)
    {
        $this->container['allowed_roots'] = $allowed_roots;

        return $this;
    }

    /**
     * Gets queue_processing_enabled
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getQueueProcessingEnabled()
    {
        return $this->container['queue_processing_enabled'];
    }

    /**
     * Sets queue_processing_enabled
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $queue_processing_enabled queue_processing_enabled
     *
     * @return $this
     */
    public function setQueueProcessingEnabled($queue_processing_enabled)
    {
        $this->container['queue_processing_enabled'] = $queue_processing_enabled;

        return $this;
    }

    /**
     * Gets package_importer_endpoints
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getPackageImporterEndpoints()
    {
        return $this->container['package_importer_endpoints'];
    }

    /**
     * Sets package_importer_endpoints
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $package_importer_endpoints package_importer_endpoints
     *
     * @return $this
     */
    public function setPackageImporterEndpoints($package_importer_endpoints)
    {
        $this->container['package_importer_endpoints'] = $package_importer_endpoints;

        return $this;
    }

    /**
     * Gets passive_queues
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getPassiveQueues()
    {
        return $this->container['passive_queues'];
    }

    /**
     * Sets passive_queues
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $passive_queues passive_queues
     *
     * @return $this
     */
    public function setPassiveQueues($passive_queues)
    {
        $this->container['passive_queues'] = $passive_queues;

        return $this;
    }

    /**
     * Gets priority_queues
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getPriorityQueues()
    {
        return $this->container['priority_queues'];
    }

    /**
     * Sets priority_queues
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $priority_queues priority_queues
     *
     * @return $this
     */
    public function setPriorityQueues($priority_queues)
    {
        $this->container['priority_queues'] = $priority_queues;

        return $this;
    }

    /**
     * Gets retry_strategy
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyDropDown|null
     */
    public function getRetryStrategy()
    {
        return $this->container['retry_strategy'];
    }

    /**
     * Sets retry_strategy
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyDropDown|null $retry_strategy retry_strategy
     *
     * @return $this
     */
    public function setRetryStrategy($retry_strategy)
    {
        $this->container['retry_strategy'] = $retry_strategy;

        return $this;
    }

    /**
     * Gets retry_attempts
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getRetryAttempts()
    {
        return $this->container['retry_attempts'];
    }

    /**
     * Sets retry_attempts
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $retry_attempts retry_attempts
     *
     * @return $this
     */
    public function setRetryAttempts($retry_attempts)
    {
        $this->container['retry_attempts'] = $retry_attempts;

        return $this;
    }

    /**
     * Gets request_authorization_strategy_target
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getRequestAuthorizationStrategyTarget()
    {
        return $this->container['request_authorization_strategy_target'];
    }

    /**
     * Sets request_authorization_strategy_target
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $request_authorization_strategy_target request_authorization_strategy_target
     *
     * @return $this
     */
    public function setRequestAuthorizationStrategyTarget($request_authorization_strategy_target)
    {
        $this->container['request_authorization_strategy_target'] = $request_authorization_strategy_target;

        return $this;
    }

    /**
     * Gets transport_secret_provider_target
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getTransportSecretProviderTarget()
    {
        return $this->container['transport_secret_provider_target'];
    }

    /**
     * Sets transport_secret_provider_target
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $transport_secret_provider_target transport_secret_provider_target
     *
     * @return $this
     */
    public function setTransportSecretProviderTarget($transport_secret_provider_target)
    {
        $this->container['transport_secret_provider_target'] = $transport_secret_provider_target;

        return $this;
    }

    /**
     * Gets package_builder_target
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getPackageBuilderTarget()
    {
        return $this->container['package_builder_target'];
    }

    /**
     * Sets package_builder_target
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $package_builder_target package_builder_target
     *
     * @return $this
     */
    public function setPackageBuilderTarget($package_builder_target)
    {
        $this->container['package_builder_target'] = $package_builder_target;

        return $this;
    }

    /**
     * Gets triggers_target
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getTriggersTarget()
    {
        return $this->container['triggers_target'];
    }

    /**
     * Sets triggers_target
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $triggers_target triggers_target
     *
     * @return $this
     */
    public function setTriggersTarget($triggers_target)
    {
        $this->container['triggers_target'] = $triggers_target;

        return $this;
    }

    /**
     * Gets queue_provider
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyDropDown|null
     */
    public function getQueueProvider()
    {
        return $this->container['queue_provider'];
    }

    /**
     * Sets queue_provider
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyDropDown|null $queue_provider queue_provider
     *
     * @return $this
     */
    public function setQueueProvider($queue_provider)
    {
        $this->container['queue_provider'] = $queue_provider;

        return $this;
    }

    /**
     * Gets async_delivery
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getAsyncDelivery()
    {
        return $this->container['async_delivery'];
    }

    /**
     * Sets async_delivery
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $async_delivery async_delivery
     *
     * @return $this
     */
    public function setAsyncDelivery($async_delivery)
    {
        $this->container['async_delivery'] = $async_delivery;

        return $this;
    }

    /**
     * Gets http_conn_timeout
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getHttpConnTimeout()
    {
        return $this->container['http_conn_timeout'];
    }

    /**
     * Sets http_conn_timeout
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $http_conn_timeout http_conn_timeout
     *
     * @return $this
     */
    public function setHttpConnTimeout($http_conn_timeout)
    {
        $this->container['http_conn_timeout'] = $http_conn_timeout;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


