/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties {
  #[serde(rename = "granite.workflowinbox.sort.propertyName")]
  granite_workflowinbox_sort_property_name: Option<::models::ConfigNodePropertyDropDown>,
  #[serde(rename = "granite.workflowinbox.sort.order")]
  granite_workflowinbox_sort_order: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "cq.workflow.job.retry")]
  cq_workflow_job_retry: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "cq.workflow.superuser")]
  cq_workflow_superuser: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "granite.workflow.inboxQuerySize")]
  granite_workflow_inbox_query_size: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "granite.workflow.adminUserGroupFilter")]
  granite_workflow_admin_user_group_filter: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "granite.workflow.enforceWorkitemAssigneePermissions")]
  granite_workflow_enforce_workitem_assignee_permissions: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "granite.workflow.enforceWorkflowInitiatorPermissions")]
  granite_workflow_enforce_workflow_initiator_permissions: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "granite.workflow.injectTenantIdInJobTopics")]
  granite_workflow_inject_tenant_id_in_job_topics: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "granite.workflow.maxPurgeSaveThreshold")]
  granite_workflow_max_purge_save_threshold: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "granite.workflow.maxPurgeQueryCount")]
  granite_workflow_max_purge_query_count: Option<::models::ConfigNodePropertyInteger>
}

impl ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties {
  pub fn new() -> ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties {
    ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties {
      granite_workflowinbox_sort_property_name: None,
      granite_workflowinbox_sort_order: None,
      cq_workflow_job_retry: None,
      cq_workflow_superuser: None,
      granite_workflow_inbox_query_size: None,
      granite_workflow_admin_user_group_filter: None,
      granite_workflow_enforce_workitem_assignee_permissions: None,
      granite_workflow_enforce_workflow_initiator_permissions: None,
      granite_workflow_inject_tenant_id_in_job_topics: None,
      granite_workflow_max_purge_save_threshold: None,
      granite_workflow_max_purge_query_count: None
    }
  }

  pub fn set_granite_workflowinbox_sort_property_name(&mut self, granite_workflowinbox_sort_property_name: ::models::ConfigNodePropertyDropDown) {
    self.granite_workflowinbox_sort_property_name = Some(granite_workflowinbox_sort_property_name);
  }

  pub fn with_granite_workflowinbox_sort_property_name(mut self, granite_workflowinbox_sort_property_name: ::models::ConfigNodePropertyDropDown) -> ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties {
    self.granite_workflowinbox_sort_property_name = Some(granite_workflowinbox_sort_property_name);
    self
  }

  pub fn granite_workflowinbox_sort_property_name(&self) -> Option<&::models::ConfigNodePropertyDropDown> {
    self.granite_workflowinbox_sort_property_name.as_ref()
  }

  pub fn reset_granite_workflowinbox_sort_property_name(&mut self) {
    self.granite_workflowinbox_sort_property_name = None;
  }

  pub fn set_granite_workflowinbox_sort_order(&mut self, granite_workflowinbox_sort_order: ::models::ConfigNodePropertyString) {
    self.granite_workflowinbox_sort_order = Some(granite_workflowinbox_sort_order);
  }

  pub fn with_granite_workflowinbox_sort_order(mut self, granite_workflowinbox_sort_order: ::models::ConfigNodePropertyString) -> ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties {
    self.granite_workflowinbox_sort_order = Some(granite_workflowinbox_sort_order);
    self
  }

  pub fn granite_workflowinbox_sort_order(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.granite_workflowinbox_sort_order.as_ref()
  }

  pub fn reset_granite_workflowinbox_sort_order(&mut self) {
    self.granite_workflowinbox_sort_order = None;
  }

  pub fn set_cq_workflow_job_retry(&mut self, cq_workflow_job_retry: ::models::ConfigNodePropertyInteger) {
    self.cq_workflow_job_retry = Some(cq_workflow_job_retry);
  }

  pub fn with_cq_workflow_job_retry(mut self, cq_workflow_job_retry: ::models::ConfigNodePropertyInteger) -> ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties {
    self.cq_workflow_job_retry = Some(cq_workflow_job_retry);
    self
  }

  pub fn cq_workflow_job_retry(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.cq_workflow_job_retry.as_ref()
  }

  pub fn reset_cq_workflow_job_retry(&mut self) {
    self.cq_workflow_job_retry = None;
  }

  pub fn set_cq_workflow_superuser(&mut self, cq_workflow_superuser: ::models::ConfigNodePropertyArray) {
    self.cq_workflow_superuser = Some(cq_workflow_superuser);
  }

  pub fn with_cq_workflow_superuser(mut self, cq_workflow_superuser: ::models::ConfigNodePropertyArray) -> ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties {
    self.cq_workflow_superuser = Some(cq_workflow_superuser);
    self
  }

  pub fn cq_workflow_superuser(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.cq_workflow_superuser.as_ref()
  }

  pub fn reset_cq_workflow_superuser(&mut self) {
    self.cq_workflow_superuser = None;
  }

  pub fn set_granite_workflow_inbox_query_size(&mut self, granite_workflow_inbox_query_size: ::models::ConfigNodePropertyInteger) {
    self.granite_workflow_inbox_query_size = Some(granite_workflow_inbox_query_size);
  }

  pub fn with_granite_workflow_inbox_query_size(mut self, granite_workflow_inbox_query_size: ::models::ConfigNodePropertyInteger) -> ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties {
    self.granite_workflow_inbox_query_size = Some(granite_workflow_inbox_query_size);
    self
  }

  pub fn granite_workflow_inbox_query_size(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.granite_workflow_inbox_query_size.as_ref()
  }

  pub fn reset_granite_workflow_inbox_query_size(&mut self) {
    self.granite_workflow_inbox_query_size = None;
  }

  pub fn set_granite_workflow_admin_user_group_filter(&mut self, granite_workflow_admin_user_group_filter: ::models::ConfigNodePropertyBoolean) {
    self.granite_workflow_admin_user_group_filter = Some(granite_workflow_admin_user_group_filter);
  }

  pub fn with_granite_workflow_admin_user_group_filter(mut self, granite_workflow_admin_user_group_filter: ::models::ConfigNodePropertyBoolean) -> ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties {
    self.granite_workflow_admin_user_group_filter = Some(granite_workflow_admin_user_group_filter);
    self
  }

  pub fn granite_workflow_admin_user_group_filter(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.granite_workflow_admin_user_group_filter.as_ref()
  }

  pub fn reset_granite_workflow_admin_user_group_filter(&mut self) {
    self.granite_workflow_admin_user_group_filter = None;
  }

  pub fn set_granite_workflow_enforce_workitem_assignee_permissions(&mut self, granite_workflow_enforce_workitem_assignee_permissions: ::models::ConfigNodePropertyBoolean) {
    self.granite_workflow_enforce_workitem_assignee_permissions = Some(granite_workflow_enforce_workitem_assignee_permissions);
  }

  pub fn with_granite_workflow_enforce_workitem_assignee_permissions(mut self, granite_workflow_enforce_workitem_assignee_permissions: ::models::ConfigNodePropertyBoolean) -> ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties {
    self.granite_workflow_enforce_workitem_assignee_permissions = Some(granite_workflow_enforce_workitem_assignee_permissions);
    self
  }

  pub fn granite_workflow_enforce_workitem_assignee_permissions(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.granite_workflow_enforce_workitem_assignee_permissions.as_ref()
  }

  pub fn reset_granite_workflow_enforce_workitem_assignee_permissions(&mut self) {
    self.granite_workflow_enforce_workitem_assignee_permissions = None;
  }

  pub fn set_granite_workflow_enforce_workflow_initiator_permissions(&mut self, granite_workflow_enforce_workflow_initiator_permissions: ::models::ConfigNodePropertyBoolean) {
    self.granite_workflow_enforce_workflow_initiator_permissions = Some(granite_workflow_enforce_workflow_initiator_permissions);
  }

  pub fn with_granite_workflow_enforce_workflow_initiator_permissions(mut self, granite_workflow_enforce_workflow_initiator_permissions: ::models::ConfigNodePropertyBoolean) -> ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties {
    self.granite_workflow_enforce_workflow_initiator_permissions = Some(granite_workflow_enforce_workflow_initiator_permissions);
    self
  }

  pub fn granite_workflow_enforce_workflow_initiator_permissions(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.granite_workflow_enforce_workflow_initiator_permissions.as_ref()
  }

  pub fn reset_granite_workflow_enforce_workflow_initiator_permissions(&mut self) {
    self.granite_workflow_enforce_workflow_initiator_permissions = None;
  }

  pub fn set_granite_workflow_inject_tenant_id_in_job_topics(&mut self, granite_workflow_inject_tenant_id_in_job_topics: ::models::ConfigNodePropertyBoolean) {
    self.granite_workflow_inject_tenant_id_in_job_topics = Some(granite_workflow_inject_tenant_id_in_job_topics);
  }

  pub fn with_granite_workflow_inject_tenant_id_in_job_topics(mut self, granite_workflow_inject_tenant_id_in_job_topics: ::models::ConfigNodePropertyBoolean) -> ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties {
    self.granite_workflow_inject_tenant_id_in_job_topics = Some(granite_workflow_inject_tenant_id_in_job_topics);
    self
  }

  pub fn granite_workflow_inject_tenant_id_in_job_topics(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.granite_workflow_inject_tenant_id_in_job_topics.as_ref()
  }

  pub fn reset_granite_workflow_inject_tenant_id_in_job_topics(&mut self) {
    self.granite_workflow_inject_tenant_id_in_job_topics = None;
  }

  pub fn set_granite_workflow_max_purge_save_threshold(&mut self, granite_workflow_max_purge_save_threshold: ::models::ConfigNodePropertyInteger) {
    self.granite_workflow_max_purge_save_threshold = Some(granite_workflow_max_purge_save_threshold);
  }

  pub fn with_granite_workflow_max_purge_save_threshold(mut self, granite_workflow_max_purge_save_threshold: ::models::ConfigNodePropertyInteger) -> ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties {
    self.granite_workflow_max_purge_save_threshold = Some(granite_workflow_max_purge_save_threshold);
    self
  }

  pub fn granite_workflow_max_purge_save_threshold(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.granite_workflow_max_purge_save_threshold.as_ref()
  }

  pub fn reset_granite_workflow_max_purge_save_threshold(&mut self) {
    self.granite_workflow_max_purge_save_threshold = None;
  }

  pub fn set_granite_workflow_max_purge_query_count(&mut self, granite_workflow_max_purge_query_count: ::models::ConfigNodePropertyInteger) {
    self.granite_workflow_max_purge_query_count = Some(granite_workflow_max_purge_query_count);
  }

  pub fn with_granite_workflow_max_purge_query_count(mut self, granite_workflow_max_purge_query_count: ::models::ConfigNodePropertyInteger) -> ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties {
    self.granite_workflow_max_purge_query_count = Some(granite_workflow_max_purge_query_count);
    self
  }

  pub fn granite_workflow_max_purge_query_count(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.granite_workflow_max_purge_query_count.as_ref()
  }

  pub fn reset_granite_workflow_max_purge_query_count(&mut self) {
    self.granite_workflow_max_purge_query_count = None;
  }

}



