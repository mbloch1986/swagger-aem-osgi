/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties::ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties()
{
    m_Pre_upgrade_maintenance_tasksIsSet = false;
    m_Pre_upgrade_hc_tagsIsSet = false;
    
}

ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties::~ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties()
{
}

void ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Pre_upgrade_maintenance_tasksIsSet)
    {
        val["pre-upgrade.maintenance.tasks"] = ModelBase::toJson(m_Pre_upgrade_maintenance_tasks);
    }
    if(m_Pre_upgrade_hc_tagsIsSet)
    {
        val["pre-upgrade.hc.tags"] = ModelBase::toJson(m_Pre_upgrade_hc_tags);
    }
    

    return val;
}

void ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties::fromJson(nlohmann::json& val)
{
    if(val.find("pre-upgrade.maintenance.tasks") != val.end())
    {
        if(!val["pre-upgrade.maintenance.tasks"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["pre-upgrade.maintenance.tasks"]);
            setPreUpgradeMaintenanceTasks( newItem );
        }
        
    }
    if(val.find("pre-upgrade.hc.tags") != val.end())
    {
        if(!val["pre-upgrade.hc.tags"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["pre-upgrade.hc.tags"]);
            setPreUpgradeHcTags( newItem );
        }
        
    }
    
}


ConfigNodePropertyArray ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties::getPreUpgradeMaintenanceTasks() const
{
    return m_Pre_upgrade_maintenance_tasks;
}
void ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties::setPreUpgradeMaintenanceTasks(ConfigNodePropertyArray const& value)
{
    m_Pre_upgrade_maintenance_tasks = value;
    m_Pre_upgrade_maintenance_tasksIsSet = true;
}
bool ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties::preUpgradeMaintenanceTasksIsSet() const
{
    return m_Pre_upgrade_maintenance_tasksIsSet;
}
void ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties::unsetPre_upgrade_maintenance_tasks()
{
    m_Pre_upgrade_maintenance_tasksIsSet = false;
}
ConfigNodePropertyArray ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties::getPreUpgradeHcTags() const
{
    return m_Pre_upgrade_hc_tags;
}
void ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties::setPreUpgradeHcTags(ConfigNodePropertyArray const& value)
{
    m_Pre_upgrade_hc_tags = value;
    m_Pre_upgrade_hc_tagsIsSet = true;
}
bool ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties::preUpgradeHcTagsIsSet() const
{
    return m_Pre_upgrade_hc_tagsIsSet;
}
void ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties::unsetPre_upgrade_hc_tags()
{
    m_Pre_upgrade_hc_tagsIsSet = false;
}

}
}
}
}

