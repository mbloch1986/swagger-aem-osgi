/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheSlingEngineImplLogRequestLoggerProperties {
  #[serde(rename = "request.log.output")]
  request_log_output: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "request.log.outputtype")]
  request_log_outputtype: Option<::models::ConfigNodePropertyDropDown>,
  #[serde(rename = "request.log.enabled")]
  request_log_enabled: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "access.log.output")]
  access_log_output: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "access.log.outputtype")]
  access_log_outputtype: Option<::models::ConfigNodePropertyDropDown>,
  #[serde(rename = "access.log.enabled")]
  access_log_enabled: Option<::models::ConfigNodePropertyBoolean>
}

impl OrgApacheSlingEngineImplLogRequestLoggerProperties {
  pub fn new() -> OrgApacheSlingEngineImplLogRequestLoggerProperties {
    OrgApacheSlingEngineImplLogRequestLoggerProperties {
      request_log_output: None,
      request_log_outputtype: None,
      request_log_enabled: None,
      access_log_output: None,
      access_log_outputtype: None,
      access_log_enabled: None
    }
  }

  pub fn set_request_log_output(&mut self, request_log_output: ::models::ConfigNodePropertyString) {
    self.request_log_output = Some(request_log_output);
  }

  pub fn with_request_log_output(mut self, request_log_output: ::models::ConfigNodePropertyString) -> OrgApacheSlingEngineImplLogRequestLoggerProperties {
    self.request_log_output = Some(request_log_output);
    self
  }

  pub fn request_log_output(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.request_log_output.as_ref()
  }

  pub fn reset_request_log_output(&mut self) {
    self.request_log_output = None;
  }

  pub fn set_request_log_outputtype(&mut self, request_log_outputtype: ::models::ConfigNodePropertyDropDown) {
    self.request_log_outputtype = Some(request_log_outputtype);
  }

  pub fn with_request_log_outputtype(mut self, request_log_outputtype: ::models::ConfigNodePropertyDropDown) -> OrgApacheSlingEngineImplLogRequestLoggerProperties {
    self.request_log_outputtype = Some(request_log_outputtype);
    self
  }

  pub fn request_log_outputtype(&self) -> Option<&::models::ConfigNodePropertyDropDown> {
    self.request_log_outputtype.as_ref()
  }

  pub fn reset_request_log_outputtype(&mut self) {
    self.request_log_outputtype = None;
  }

  pub fn set_request_log_enabled(&mut self, request_log_enabled: ::models::ConfigNodePropertyBoolean) {
    self.request_log_enabled = Some(request_log_enabled);
  }

  pub fn with_request_log_enabled(mut self, request_log_enabled: ::models::ConfigNodePropertyBoolean) -> OrgApacheSlingEngineImplLogRequestLoggerProperties {
    self.request_log_enabled = Some(request_log_enabled);
    self
  }

  pub fn request_log_enabled(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.request_log_enabled.as_ref()
  }

  pub fn reset_request_log_enabled(&mut self) {
    self.request_log_enabled = None;
  }

  pub fn set_access_log_output(&mut self, access_log_output: ::models::ConfigNodePropertyString) {
    self.access_log_output = Some(access_log_output);
  }

  pub fn with_access_log_output(mut self, access_log_output: ::models::ConfigNodePropertyString) -> OrgApacheSlingEngineImplLogRequestLoggerProperties {
    self.access_log_output = Some(access_log_output);
    self
  }

  pub fn access_log_output(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.access_log_output.as_ref()
  }

  pub fn reset_access_log_output(&mut self) {
    self.access_log_output = None;
  }

  pub fn set_access_log_outputtype(&mut self, access_log_outputtype: ::models::ConfigNodePropertyDropDown) {
    self.access_log_outputtype = Some(access_log_outputtype);
  }

  pub fn with_access_log_outputtype(mut self, access_log_outputtype: ::models::ConfigNodePropertyDropDown) -> OrgApacheSlingEngineImplLogRequestLoggerProperties {
    self.access_log_outputtype = Some(access_log_outputtype);
    self
  }

  pub fn access_log_outputtype(&self) -> Option<&::models::ConfigNodePropertyDropDown> {
    self.access_log_outputtype.as_ref()
  }

  pub fn reset_access_log_outputtype(&mut self) {
    self.access_log_outputtype = None;
  }

  pub fn set_access_log_enabled(&mut self, access_log_enabled: ::models::ConfigNodePropertyBoolean) {
    self.access_log_enabled = Some(access_log_enabled);
  }

  pub fn with_access_log_enabled(mut self, access_log_enabled: ::models::ConfigNodePropertyBoolean) -> OrgApacheSlingEngineImplLogRequestLoggerProperties {
    self.access_log_enabled = Some(access_log_enabled);
    self
  }

  pub fn access_log_enabled(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.access_log_enabled.as_ref()
  }

  pub fn reset_access_log_enabled(&mut self) {
    self.access_log_enabled = None;
  }

}



