/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties {
  #[serde(rename = "dav.root")]
  dav_root: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "dav.create-absolute-uri")]
  dav_create_absolute_uri: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "dav.realm")]
  dav_realm: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "collection.types")]
  collection_types: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "filter.prefixes")]
  filter_prefixes: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "filter.types")]
  filter_types: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "filter.uris")]
  filter_uris: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "type.collections")]
  type_collections: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "type.noncollections")]
  type_noncollections: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "type.content")]
  type_content: Option<::models::ConfigNodePropertyString>
}

impl OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties {
  pub fn new() -> OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties {
    OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties {
      dav_root: None,
      dav_create_absolute_uri: None,
      dav_realm: None,
      collection_types: None,
      filter_prefixes: None,
      filter_types: None,
      filter_uris: None,
      type_collections: None,
      type_noncollections: None,
      type_content: None
    }
  }

  pub fn set_dav_root(&mut self, dav_root: ::models::ConfigNodePropertyString) {
    self.dav_root = Some(dav_root);
  }

  pub fn with_dav_root(mut self, dav_root: ::models::ConfigNodePropertyString) -> OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties {
    self.dav_root = Some(dav_root);
    self
  }

  pub fn dav_root(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.dav_root.as_ref()
  }

  pub fn reset_dav_root(&mut self) {
    self.dav_root = None;
  }

  pub fn set_dav_create_absolute_uri(&mut self, dav_create_absolute_uri: ::models::ConfigNodePropertyBoolean) {
    self.dav_create_absolute_uri = Some(dav_create_absolute_uri);
  }

  pub fn with_dav_create_absolute_uri(mut self, dav_create_absolute_uri: ::models::ConfigNodePropertyBoolean) -> OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties {
    self.dav_create_absolute_uri = Some(dav_create_absolute_uri);
    self
  }

  pub fn dav_create_absolute_uri(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.dav_create_absolute_uri.as_ref()
  }

  pub fn reset_dav_create_absolute_uri(&mut self) {
    self.dav_create_absolute_uri = None;
  }

  pub fn set_dav_realm(&mut self, dav_realm: ::models::ConfigNodePropertyString) {
    self.dav_realm = Some(dav_realm);
  }

  pub fn with_dav_realm(mut self, dav_realm: ::models::ConfigNodePropertyString) -> OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties {
    self.dav_realm = Some(dav_realm);
    self
  }

  pub fn dav_realm(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.dav_realm.as_ref()
  }

  pub fn reset_dav_realm(&mut self) {
    self.dav_realm = None;
  }

  pub fn set_collection_types(&mut self, collection_types: ::models::ConfigNodePropertyArray) {
    self.collection_types = Some(collection_types);
  }

  pub fn with_collection_types(mut self, collection_types: ::models::ConfigNodePropertyArray) -> OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties {
    self.collection_types = Some(collection_types);
    self
  }

  pub fn collection_types(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.collection_types.as_ref()
  }

  pub fn reset_collection_types(&mut self) {
    self.collection_types = None;
  }

  pub fn set_filter_prefixes(&mut self, filter_prefixes: ::models::ConfigNodePropertyArray) {
    self.filter_prefixes = Some(filter_prefixes);
  }

  pub fn with_filter_prefixes(mut self, filter_prefixes: ::models::ConfigNodePropertyArray) -> OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties {
    self.filter_prefixes = Some(filter_prefixes);
    self
  }

  pub fn filter_prefixes(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.filter_prefixes.as_ref()
  }

  pub fn reset_filter_prefixes(&mut self) {
    self.filter_prefixes = None;
  }

  pub fn set_filter_types(&mut self, filter_types: ::models::ConfigNodePropertyString) {
    self.filter_types = Some(filter_types);
  }

  pub fn with_filter_types(mut self, filter_types: ::models::ConfigNodePropertyString) -> OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties {
    self.filter_types = Some(filter_types);
    self
  }

  pub fn filter_types(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.filter_types.as_ref()
  }

  pub fn reset_filter_types(&mut self) {
    self.filter_types = None;
  }

  pub fn set_filter_uris(&mut self, filter_uris: ::models::ConfigNodePropertyString) {
    self.filter_uris = Some(filter_uris);
  }

  pub fn with_filter_uris(mut self, filter_uris: ::models::ConfigNodePropertyString) -> OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties {
    self.filter_uris = Some(filter_uris);
    self
  }

  pub fn filter_uris(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.filter_uris.as_ref()
  }

  pub fn reset_filter_uris(&mut self) {
    self.filter_uris = None;
  }

  pub fn set_type_collections(&mut self, type_collections: ::models::ConfigNodePropertyString) {
    self.type_collections = Some(type_collections);
  }

  pub fn with_type_collections(mut self, type_collections: ::models::ConfigNodePropertyString) -> OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties {
    self.type_collections = Some(type_collections);
    self
  }

  pub fn type_collections(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.type_collections.as_ref()
  }

  pub fn reset_type_collections(&mut self) {
    self.type_collections = None;
  }

  pub fn set_type_noncollections(&mut self, type_noncollections: ::models::ConfigNodePropertyString) {
    self.type_noncollections = Some(type_noncollections);
  }

  pub fn with_type_noncollections(mut self, type_noncollections: ::models::ConfigNodePropertyString) -> OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties {
    self.type_noncollections = Some(type_noncollections);
    self
  }

  pub fn type_noncollections(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.type_noncollections.as_ref()
  }

  pub fn reset_type_noncollections(&mut self) {
    self.type_noncollections = None;
  }

  pub fn set_type_content(&mut self, type_content: ::models::ConfigNodePropertyString) {
    self.type_content = Some(type_content);
  }

  pub fn with_type_content(mut self, type_content: ::models::ConfigNodePropertyString) -> OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties {
    self.type_content = Some(type_content);
    self
  }

  pub fn type_content(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.type_content.as_ref()
  }

  pub fn reset_type_content(&mut self) {
    self.type_content = None;
  }

}



