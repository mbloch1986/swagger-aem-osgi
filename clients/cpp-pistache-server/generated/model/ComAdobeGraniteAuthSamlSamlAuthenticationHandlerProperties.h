/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties.h
 *
 * 
 */

#ifndef ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties_H_
#define ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties_H_


#include "ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyDropDown.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties
    : public ModelBase
{
public:
    ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties();
    virtual ~ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties members

    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyArray getPath() const;
    void setPath(ConfigNodePropertyArray const& value);
    bool pathIsSet() const;
    void unsetPath();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getServiceRanking() const;
    void setServiceRanking(ConfigNodePropertyInteger const& value);
    bool serviceRankingIsSet() const;
    void unsetService_ranking();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getIdpUrl() const;
    void setIdpUrl(ConfigNodePropertyString const& value);
    bool idpUrlIsSet() const;
    void unsetIdpUrl();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getIdpCertAlias() const;
    void setIdpCertAlias(ConfigNodePropertyString const& value);
    bool idpCertAliasIsSet() const;
    void unsetIdpCertAlias();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getIdpHttpRedirect() const;
    void setIdpHttpRedirect(ConfigNodePropertyBoolean const& value);
    bool idpHttpRedirectIsSet() const;
    void unsetIdpHttpRedirect();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getServiceProviderEntityId() const;
    void setServiceProviderEntityId(ConfigNodePropertyString const& value);
    bool serviceProviderEntityIdIsSet() const;
    void unsetServiceProviderEntityId();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getAssertionConsumerServiceURL() const;
    void setAssertionConsumerServiceURL(ConfigNodePropertyString const& value);
    bool assertionConsumerServiceURLIsSet() const;
    void unsetAssertionConsumerServiceURL();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getSpPrivateKeyAlias() const;
    void setSpPrivateKeyAlias(ConfigNodePropertyString const& value);
    bool spPrivateKeyAliasIsSet() const;
    void unsetSpPrivateKeyAlias();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getKeyStorePassword() const;
    void setKeyStorePassword(ConfigNodePropertyString const& value);
    bool keyStorePasswordIsSet() const;
    void unsetKeyStorePassword();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getDefaultRedirectUrl() const;
    void setDefaultRedirectUrl(ConfigNodePropertyString const& value);
    bool defaultRedirectUrlIsSet() const;
    void unsetDefaultRedirectUrl();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getUserIDAttribute() const;
    void setUserIDAttribute(ConfigNodePropertyString const& value);
    bool userIDAttributeIsSet() const;
    void unsetUserIDAttribute();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getUseEncryption() const;
    void setUseEncryption(ConfigNodePropertyBoolean const& value);
    bool useEncryptionIsSet() const;
    void unsetUseEncryption();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getCreateUser() const;
    void setCreateUser(ConfigNodePropertyBoolean const& value);
    bool createUserIsSet() const;
    void unsetCreateUser();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getUserIntermediatePath() const;
    void setUserIntermediatePath(ConfigNodePropertyString const& value);
    bool userIntermediatePathIsSet() const;
    void unsetUserIntermediatePath();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getAddGroupMemberships() const;
    void setAddGroupMemberships(ConfigNodePropertyBoolean const& value);
    bool addGroupMembershipsIsSet() const;
    void unsetAddGroupMemberships();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getGroupMembershipAttribute() const;
    void setGroupMembershipAttribute(ConfigNodePropertyString const& value);
    bool groupMembershipAttributeIsSet() const;
    void unsetGroupMembershipAttribute();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyArray getDefaultGroups() const;
    void setDefaultGroups(ConfigNodePropertyArray const& value);
    bool defaultGroupsIsSet() const;
    void unsetDefaultGroups();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getNameIdFormat() const;
    void setNameIdFormat(ConfigNodePropertyString const& value);
    bool nameIdFormatIsSet() const;
    void unsetNameIdFormat();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyArray getSynchronizeAttributes() const;
    void setSynchronizeAttributes(ConfigNodePropertyArray const& value);
    bool synchronizeAttributesIsSet() const;
    void unsetSynchronizeAttributes();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getHandleLogout() const;
    void setHandleLogout(ConfigNodePropertyBoolean const& value);
    bool handleLogoutIsSet() const;
    void unsetHandleLogout();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getLogoutUrl() const;
    void setLogoutUrl(ConfigNodePropertyString const& value);
    bool logoutUrlIsSet() const;
    void unsetLogoutUrl();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getClockTolerance() const;
    void setClockTolerance(ConfigNodePropertyInteger const& value);
    bool clockToleranceIsSet() const;
    void unsetClockTolerance();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getDigestMethod() const;
    void setDigestMethod(ConfigNodePropertyString const& value);
    bool digestMethodIsSet() const;
    void unsetDigestMethod();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getSignatureMethod() const;
    void setSignatureMethod(ConfigNodePropertyString const& value);
    bool signatureMethodIsSet() const;
    void unsetSignatureMethod();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyDropDown getIdentitySyncType() const;
    void setIdentitySyncType(ConfigNodePropertyDropDown const& value);
    bool identitySyncTypeIsSet() const;
    void unsetIdentitySyncType();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getIdpIdentifier() const;
    void setIdpIdentifier(ConfigNodePropertyString const& value);
    bool idpIdentifierIsSet() const;
    void unsetIdpIdentifier();

protected:
    ConfigNodePropertyArray m_Path;
    bool m_PathIsSet;
    ConfigNodePropertyInteger m_Service_ranking;
    bool m_Service_rankingIsSet;
    ConfigNodePropertyString m_IdpUrl;
    bool m_IdpUrlIsSet;
    ConfigNodePropertyString m_IdpCertAlias;
    bool m_IdpCertAliasIsSet;
    ConfigNodePropertyBoolean m_IdpHttpRedirect;
    bool m_IdpHttpRedirectIsSet;
    ConfigNodePropertyString m_ServiceProviderEntityId;
    bool m_ServiceProviderEntityIdIsSet;
    ConfigNodePropertyString m_AssertionConsumerServiceURL;
    bool m_AssertionConsumerServiceURLIsSet;
    ConfigNodePropertyString m_SpPrivateKeyAlias;
    bool m_SpPrivateKeyAliasIsSet;
    ConfigNodePropertyString m_KeyStorePassword;
    bool m_KeyStorePasswordIsSet;
    ConfigNodePropertyString m_DefaultRedirectUrl;
    bool m_DefaultRedirectUrlIsSet;
    ConfigNodePropertyString m_UserIDAttribute;
    bool m_UserIDAttributeIsSet;
    ConfigNodePropertyBoolean m_UseEncryption;
    bool m_UseEncryptionIsSet;
    ConfigNodePropertyBoolean m_CreateUser;
    bool m_CreateUserIsSet;
    ConfigNodePropertyString m_UserIntermediatePath;
    bool m_UserIntermediatePathIsSet;
    ConfigNodePropertyBoolean m_AddGroupMemberships;
    bool m_AddGroupMembershipsIsSet;
    ConfigNodePropertyString m_GroupMembershipAttribute;
    bool m_GroupMembershipAttributeIsSet;
    ConfigNodePropertyArray m_DefaultGroups;
    bool m_DefaultGroupsIsSet;
    ConfigNodePropertyString m_NameIdFormat;
    bool m_NameIdFormatIsSet;
    ConfigNodePropertyArray m_SynchronizeAttributes;
    bool m_SynchronizeAttributesIsSet;
    ConfigNodePropertyBoolean m_HandleLogout;
    bool m_HandleLogoutIsSet;
    ConfigNodePropertyString m_LogoutUrl;
    bool m_LogoutUrlIsSet;
    ConfigNodePropertyInteger m_ClockTolerance;
    bool m_ClockToleranceIsSet;
    ConfigNodePropertyString m_DigestMethod;
    bool m_DigestMethodIsSet;
    ConfigNodePropertyString m_SignatureMethod;
    bool m_SignatureMethodIsSet;
    ConfigNodePropertyDropDown m_IdentitySyncType;
    bool m_IdentitySyncTypeIsSet;
    ConfigNodePropertyString m_IdpIdentifier;
    bool m_IdpIdentifierIsSet;
};

}
}
}
}

#endif /* ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties_H_ */
