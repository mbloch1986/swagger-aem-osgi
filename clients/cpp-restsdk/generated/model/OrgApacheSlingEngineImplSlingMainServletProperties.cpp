/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingEngineImplSlingMainServletProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingEngineImplSlingMainServletProperties::OrgApacheSlingEngineImplSlingMainServletProperties()
{
    m_Sling_max_callsIsSet = false;
    m_Sling_max_inclusionsIsSet = false;
    m_Sling_trace_allowIsSet = false;
    m_Sling_max_record_requestsIsSet = false;
    m_Sling_store_pattern_requestsIsSet = false;
    m_Sling_serverinfoIsSet = false;
    m_Sling_additional_response_headersIsSet = false;
}

OrgApacheSlingEngineImplSlingMainServletProperties::~OrgApacheSlingEngineImplSlingMainServletProperties()
{
}

void OrgApacheSlingEngineImplSlingMainServletProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingEngineImplSlingMainServletProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Sling_max_callsIsSet)
    {
        val[utility::conversions::to_string_t("sling.max.calls")] = ModelBase::toJson(m_Sling_max_calls);
    }
    if(m_Sling_max_inclusionsIsSet)
    {
        val[utility::conversions::to_string_t("sling.max.inclusions")] = ModelBase::toJson(m_Sling_max_inclusions);
    }
    if(m_Sling_trace_allowIsSet)
    {
        val[utility::conversions::to_string_t("sling.trace.allow")] = ModelBase::toJson(m_Sling_trace_allow);
    }
    if(m_Sling_max_record_requestsIsSet)
    {
        val[utility::conversions::to_string_t("sling.max.record.requests")] = ModelBase::toJson(m_Sling_max_record_requests);
    }
    if(m_Sling_store_pattern_requestsIsSet)
    {
        val[utility::conversions::to_string_t("sling.store.pattern.requests")] = ModelBase::toJson(m_Sling_store_pattern_requests);
    }
    if(m_Sling_serverinfoIsSet)
    {
        val[utility::conversions::to_string_t("sling.serverinfo")] = ModelBase::toJson(m_Sling_serverinfo);
    }
    if(m_Sling_additional_response_headersIsSet)
    {
        val[utility::conversions::to_string_t("sling.additional.response.headers")] = ModelBase::toJson(m_Sling_additional_response_headers);
    }

    return val;
}

void OrgApacheSlingEngineImplSlingMainServletProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("sling.max.calls")))
    {
        if(!val[utility::conversions::to_string_t("sling.max.calls")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("sling.max.calls")]);
            setSlingMaxCalls( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sling.max.inclusions")))
    {
        if(!val[utility::conversions::to_string_t("sling.max.inclusions")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("sling.max.inclusions")]);
            setSlingMaxInclusions( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sling.trace.allow")))
    {
        if(!val[utility::conversions::to_string_t("sling.trace.allow")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("sling.trace.allow")]);
            setSlingTraceAllow( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sling.max.record.requests")))
    {
        if(!val[utility::conversions::to_string_t("sling.max.record.requests")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("sling.max.record.requests")]);
            setSlingMaxRecordRequests( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sling.store.pattern.requests")))
    {
        if(!val[utility::conversions::to_string_t("sling.store.pattern.requests")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("sling.store.pattern.requests")]);
            setSlingStorePatternRequests( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sling.serverinfo")))
    {
        if(!val[utility::conversions::to_string_t("sling.serverinfo")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("sling.serverinfo")]);
            setSlingServerinfo( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sling.additional.response.headers")))
    {
        if(!val[utility::conversions::to_string_t("sling.additional.response.headers")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("sling.additional.response.headers")]);
            setSlingAdditionalResponseHeaders( newItem );
        }
    }
}

void OrgApacheSlingEngineImplSlingMainServletProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Sling_max_callsIsSet)
    {
        if (m_Sling_max_calls.get())
        {
            m_Sling_max_calls->toMultipart(multipart, utility::conversions::to_string_t("sling.max.calls."));
        }
    }
    if(m_Sling_max_inclusionsIsSet)
    {
        if (m_Sling_max_inclusions.get())
        {
            m_Sling_max_inclusions->toMultipart(multipart, utility::conversions::to_string_t("sling.max.inclusions."));
        }
    }
    if(m_Sling_trace_allowIsSet)
    {
        if (m_Sling_trace_allow.get())
        {
            m_Sling_trace_allow->toMultipart(multipart, utility::conversions::to_string_t("sling.trace.allow."));
        }
    }
    if(m_Sling_max_record_requestsIsSet)
    {
        if (m_Sling_max_record_requests.get())
        {
            m_Sling_max_record_requests->toMultipart(multipart, utility::conversions::to_string_t("sling.max.record.requests."));
        }
    }
    if(m_Sling_store_pattern_requestsIsSet)
    {
        if (m_Sling_store_pattern_requests.get())
        {
            m_Sling_store_pattern_requests->toMultipart(multipart, utility::conversions::to_string_t("sling.store.pattern.requests."));
        }
    }
    if(m_Sling_serverinfoIsSet)
    {
        if (m_Sling_serverinfo.get())
        {
            m_Sling_serverinfo->toMultipart(multipart, utility::conversions::to_string_t("sling.serverinfo."));
        }
    }
    if(m_Sling_additional_response_headersIsSet)
    {
        if (m_Sling_additional_response_headers.get())
        {
            m_Sling_additional_response_headers->toMultipart(multipart, utility::conversions::to_string_t("sling.additional.response.headers."));
        }
    }
}

void OrgApacheSlingEngineImplSlingMainServletProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("sling.max.calls")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("sling.max.calls")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("sling.max.calls."));
            setSlingMaxCalls( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sling.max.inclusions")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("sling.max.inclusions")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("sling.max.inclusions."));
            setSlingMaxInclusions( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sling.trace.allow")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("sling.trace.allow")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("sling.trace.allow."));
            setSlingTraceAllow( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sling.max.record.requests")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("sling.max.record.requests")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("sling.max.record.requests."));
            setSlingMaxRecordRequests( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sling.store.pattern.requests")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("sling.store.pattern.requests")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("sling.store.pattern.requests."));
            setSlingStorePatternRequests( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sling.serverinfo")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("sling.serverinfo")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("sling.serverinfo."));
            setSlingServerinfo( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sling.additional.response.headers")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("sling.additional.response.headers")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("sling.additional.response.headers."));
            setSlingAdditionalResponseHeaders( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingEngineImplSlingMainServletProperties::getSlingMaxCalls() const
{
    return m_Sling_max_calls;
}


void OrgApacheSlingEngineImplSlingMainServletProperties::setSlingMaxCalls(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Sling_max_calls = value;
    m_Sling_max_callsIsSet = true;
}
bool OrgApacheSlingEngineImplSlingMainServletProperties::slingMaxCallsIsSet() const
{
    return m_Sling_max_callsIsSet;
}

void OrgApacheSlingEngineImplSlingMainServletProperties::unsetSling_max_calls()
{
    m_Sling_max_callsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingEngineImplSlingMainServletProperties::getSlingMaxInclusions() const
{
    return m_Sling_max_inclusions;
}


void OrgApacheSlingEngineImplSlingMainServletProperties::setSlingMaxInclusions(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Sling_max_inclusions = value;
    m_Sling_max_inclusionsIsSet = true;
}
bool OrgApacheSlingEngineImplSlingMainServletProperties::slingMaxInclusionsIsSet() const
{
    return m_Sling_max_inclusionsIsSet;
}

void OrgApacheSlingEngineImplSlingMainServletProperties::unsetSling_max_inclusions()
{
    m_Sling_max_inclusionsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingEngineImplSlingMainServletProperties::getSlingTraceAllow() const
{
    return m_Sling_trace_allow;
}


void OrgApacheSlingEngineImplSlingMainServletProperties::setSlingTraceAllow(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Sling_trace_allow = value;
    m_Sling_trace_allowIsSet = true;
}
bool OrgApacheSlingEngineImplSlingMainServletProperties::slingTraceAllowIsSet() const
{
    return m_Sling_trace_allowIsSet;
}

void OrgApacheSlingEngineImplSlingMainServletProperties::unsetSling_trace_allow()
{
    m_Sling_trace_allowIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingEngineImplSlingMainServletProperties::getSlingMaxRecordRequests() const
{
    return m_Sling_max_record_requests;
}


void OrgApacheSlingEngineImplSlingMainServletProperties::setSlingMaxRecordRequests(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Sling_max_record_requests = value;
    m_Sling_max_record_requestsIsSet = true;
}
bool OrgApacheSlingEngineImplSlingMainServletProperties::slingMaxRecordRequestsIsSet() const
{
    return m_Sling_max_record_requestsIsSet;
}

void OrgApacheSlingEngineImplSlingMainServletProperties::unsetSling_max_record_requests()
{
    m_Sling_max_record_requestsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingEngineImplSlingMainServletProperties::getSlingStorePatternRequests() const
{
    return m_Sling_store_pattern_requests;
}


void OrgApacheSlingEngineImplSlingMainServletProperties::setSlingStorePatternRequests(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Sling_store_pattern_requests = value;
    m_Sling_store_pattern_requestsIsSet = true;
}
bool OrgApacheSlingEngineImplSlingMainServletProperties::slingStorePatternRequestsIsSet() const
{
    return m_Sling_store_pattern_requestsIsSet;
}

void OrgApacheSlingEngineImplSlingMainServletProperties::unsetSling_store_pattern_requests()
{
    m_Sling_store_pattern_requestsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingEngineImplSlingMainServletProperties::getSlingServerinfo() const
{
    return m_Sling_serverinfo;
}


void OrgApacheSlingEngineImplSlingMainServletProperties::setSlingServerinfo(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Sling_serverinfo = value;
    m_Sling_serverinfoIsSet = true;
}
bool OrgApacheSlingEngineImplSlingMainServletProperties::slingServerinfoIsSet() const
{
    return m_Sling_serverinfoIsSet;
}

void OrgApacheSlingEngineImplSlingMainServletProperties::unsetSling_serverinfo()
{
    m_Sling_serverinfoIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingEngineImplSlingMainServletProperties::getSlingAdditionalResponseHeaders() const
{
    return m_Sling_additional_response_headers;
}


void OrgApacheSlingEngineImplSlingMainServletProperties::setSlingAdditionalResponseHeaders(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Sling_additional_response_headers = value;
    m_Sling_additional_response_headersIsSet = true;
}
bool OrgApacheSlingEngineImplSlingMainServletProperties::slingAdditionalResponseHeadersIsSet() const
{
    return m_Sling_additional_response_headersIsSet;
}

void OrgApacheSlingEngineImplSlingMainServletProperties::unsetSling_additional_response_headers()
{
    m_Sling_additional_response_headersIsSet = false;
}

}
}
}
}

