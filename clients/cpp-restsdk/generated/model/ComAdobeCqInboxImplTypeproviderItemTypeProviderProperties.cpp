/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties()
{
    m_Inbox_impl_typeprovider_registrypathsIsSet = false;
    m_Inbox_impl_typeprovider_legacypathsIsSet = false;
    m_Inbox_impl_typeprovider_defaulturl_failureitemIsSet = false;
    m_Inbox_impl_typeprovider_defaulturl_workitemIsSet = false;
    m_Inbox_impl_typeprovider_defaulturl_taskIsSet = false;
}

ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::~ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties()
{
}

void ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Inbox_impl_typeprovider_registrypathsIsSet)
    {
        val[utility::conversions::to_string_t("inbox.impl.typeprovider.registrypaths")] = ModelBase::toJson(m_Inbox_impl_typeprovider_registrypaths);
    }
    if(m_Inbox_impl_typeprovider_legacypathsIsSet)
    {
        val[utility::conversions::to_string_t("inbox.impl.typeprovider.legacypaths")] = ModelBase::toJson(m_Inbox_impl_typeprovider_legacypaths);
    }
    if(m_Inbox_impl_typeprovider_defaulturl_failureitemIsSet)
    {
        val[utility::conversions::to_string_t("inbox.impl.typeprovider.defaulturl.failureitem")] = ModelBase::toJson(m_Inbox_impl_typeprovider_defaulturl_failureitem);
    }
    if(m_Inbox_impl_typeprovider_defaulturl_workitemIsSet)
    {
        val[utility::conversions::to_string_t("inbox.impl.typeprovider.defaulturl.workitem")] = ModelBase::toJson(m_Inbox_impl_typeprovider_defaulturl_workitem);
    }
    if(m_Inbox_impl_typeprovider_defaulturl_taskIsSet)
    {
        val[utility::conversions::to_string_t("inbox.impl.typeprovider.defaulturl.task")] = ModelBase::toJson(m_Inbox_impl_typeprovider_defaulturl_task);
    }

    return val;
}

void ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("inbox.impl.typeprovider.registrypaths")))
    {
        if(!val[utility::conversions::to_string_t("inbox.impl.typeprovider.registrypaths")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("inbox.impl.typeprovider.registrypaths")]);
            setInboxImplTypeproviderRegistrypaths( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("inbox.impl.typeprovider.legacypaths")))
    {
        if(!val[utility::conversions::to_string_t("inbox.impl.typeprovider.legacypaths")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("inbox.impl.typeprovider.legacypaths")]);
            setInboxImplTypeproviderLegacypaths( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("inbox.impl.typeprovider.defaulturl.failureitem")))
    {
        if(!val[utility::conversions::to_string_t("inbox.impl.typeprovider.defaulturl.failureitem")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("inbox.impl.typeprovider.defaulturl.failureitem")]);
            setInboxImplTypeproviderDefaulturlFailureitem( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("inbox.impl.typeprovider.defaulturl.workitem")))
    {
        if(!val[utility::conversions::to_string_t("inbox.impl.typeprovider.defaulturl.workitem")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("inbox.impl.typeprovider.defaulturl.workitem")]);
            setInboxImplTypeproviderDefaulturlWorkitem( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("inbox.impl.typeprovider.defaulturl.task")))
    {
        if(!val[utility::conversions::to_string_t("inbox.impl.typeprovider.defaulturl.task")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("inbox.impl.typeprovider.defaulturl.task")]);
            setInboxImplTypeproviderDefaulturlTask( newItem );
        }
    }
}

void ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Inbox_impl_typeprovider_registrypathsIsSet)
    {
        if (m_Inbox_impl_typeprovider_registrypaths.get())
        {
            m_Inbox_impl_typeprovider_registrypaths->toMultipart(multipart, utility::conversions::to_string_t("inbox.impl.typeprovider.registrypaths."));
        }
    }
    if(m_Inbox_impl_typeprovider_legacypathsIsSet)
    {
        if (m_Inbox_impl_typeprovider_legacypaths.get())
        {
            m_Inbox_impl_typeprovider_legacypaths->toMultipart(multipart, utility::conversions::to_string_t("inbox.impl.typeprovider.legacypaths."));
        }
    }
    if(m_Inbox_impl_typeprovider_defaulturl_failureitemIsSet)
    {
        if (m_Inbox_impl_typeprovider_defaulturl_failureitem.get())
        {
            m_Inbox_impl_typeprovider_defaulturl_failureitem->toMultipart(multipart, utility::conversions::to_string_t("inbox.impl.typeprovider.defaulturl.failureitem."));
        }
    }
    if(m_Inbox_impl_typeprovider_defaulturl_workitemIsSet)
    {
        if (m_Inbox_impl_typeprovider_defaulturl_workitem.get())
        {
            m_Inbox_impl_typeprovider_defaulturl_workitem->toMultipart(multipart, utility::conversions::to_string_t("inbox.impl.typeprovider.defaulturl.workitem."));
        }
    }
    if(m_Inbox_impl_typeprovider_defaulturl_taskIsSet)
    {
        if (m_Inbox_impl_typeprovider_defaulturl_task.get())
        {
            m_Inbox_impl_typeprovider_defaulturl_task->toMultipart(multipart, utility::conversions::to_string_t("inbox.impl.typeprovider.defaulturl.task."));
        }
    }
}

void ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("inbox.impl.typeprovider.registrypaths")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("inbox.impl.typeprovider.registrypaths")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("inbox.impl.typeprovider.registrypaths."));
            setInboxImplTypeproviderRegistrypaths( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("inbox.impl.typeprovider.legacypaths")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("inbox.impl.typeprovider.legacypaths")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("inbox.impl.typeprovider.legacypaths."));
            setInboxImplTypeproviderLegacypaths( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("inbox.impl.typeprovider.defaulturl.failureitem")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("inbox.impl.typeprovider.defaulturl.failureitem")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("inbox.impl.typeprovider.defaulturl.failureitem."));
            setInboxImplTypeproviderDefaulturlFailureitem( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("inbox.impl.typeprovider.defaulturl.workitem")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("inbox.impl.typeprovider.defaulturl.workitem")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("inbox.impl.typeprovider.defaulturl.workitem."));
            setInboxImplTypeproviderDefaulturlWorkitem( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("inbox.impl.typeprovider.defaulturl.task")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("inbox.impl.typeprovider.defaulturl.task")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("inbox.impl.typeprovider.defaulturl.task."));
            setInboxImplTypeproviderDefaulturlTask( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::getInboxImplTypeproviderRegistrypaths() const
{
    return m_Inbox_impl_typeprovider_registrypaths;
}


void ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::setInboxImplTypeproviderRegistrypaths(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Inbox_impl_typeprovider_registrypaths = value;
    m_Inbox_impl_typeprovider_registrypathsIsSet = true;
}
bool ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::inboxImplTypeproviderRegistrypathsIsSet() const
{
    return m_Inbox_impl_typeprovider_registrypathsIsSet;
}

void ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::unsetInbox_impl_typeprovider_registrypaths()
{
    m_Inbox_impl_typeprovider_registrypathsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::getInboxImplTypeproviderLegacypaths() const
{
    return m_Inbox_impl_typeprovider_legacypaths;
}


void ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::setInboxImplTypeproviderLegacypaths(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Inbox_impl_typeprovider_legacypaths = value;
    m_Inbox_impl_typeprovider_legacypathsIsSet = true;
}
bool ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::inboxImplTypeproviderLegacypathsIsSet() const
{
    return m_Inbox_impl_typeprovider_legacypathsIsSet;
}

void ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::unsetInbox_impl_typeprovider_legacypaths()
{
    m_Inbox_impl_typeprovider_legacypathsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::getInboxImplTypeproviderDefaulturlFailureitem() const
{
    return m_Inbox_impl_typeprovider_defaulturl_failureitem;
}


void ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::setInboxImplTypeproviderDefaulturlFailureitem(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Inbox_impl_typeprovider_defaulturl_failureitem = value;
    m_Inbox_impl_typeprovider_defaulturl_failureitemIsSet = true;
}
bool ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::inboxImplTypeproviderDefaulturlFailureitemIsSet() const
{
    return m_Inbox_impl_typeprovider_defaulturl_failureitemIsSet;
}

void ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::unsetInbox_impl_typeprovider_defaulturl_failureitem()
{
    m_Inbox_impl_typeprovider_defaulturl_failureitemIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::getInboxImplTypeproviderDefaulturlWorkitem() const
{
    return m_Inbox_impl_typeprovider_defaulturl_workitem;
}


void ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::setInboxImplTypeproviderDefaulturlWorkitem(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Inbox_impl_typeprovider_defaulturl_workitem = value;
    m_Inbox_impl_typeprovider_defaulturl_workitemIsSet = true;
}
bool ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::inboxImplTypeproviderDefaulturlWorkitemIsSet() const
{
    return m_Inbox_impl_typeprovider_defaulturl_workitemIsSet;
}

void ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::unsetInbox_impl_typeprovider_defaulturl_workitem()
{
    m_Inbox_impl_typeprovider_defaulturl_workitemIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::getInboxImplTypeproviderDefaulturlTask() const
{
    return m_Inbox_impl_typeprovider_defaulturl_task;
}


void ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::setInboxImplTypeproviderDefaulturlTask(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Inbox_impl_typeprovider_defaulturl_task = value;
    m_Inbox_impl_typeprovider_defaulturl_taskIsSet = true;
}
bool ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::inboxImplTypeproviderDefaulturlTaskIsSet() const
{
    return m_Inbox_impl_typeprovider_defaulturl_taskIsSet;
}

void ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::unsetInbox_impl_typeprovider_defaulturl_task()
{
    m_Inbox_impl_typeprovider_defaulturl_taskIsSet = false;
}

}
}
}
}

