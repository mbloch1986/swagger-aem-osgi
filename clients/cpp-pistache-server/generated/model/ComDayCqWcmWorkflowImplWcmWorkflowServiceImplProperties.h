/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties.h
 *
 * 
 */

#ifndef ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties_H_
#define ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties_H_


#include "ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties
    : public ModelBase
{
public:
    ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties();
    virtual ~ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties members

    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getEventFilter() const;
    void setEventFilter(ConfigNodePropertyString const& value);
    bool eventFilterIsSet() const;
    void unsetEvent_filter();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getMinThreadPoolSize() const;
    void setMinThreadPoolSize(ConfigNodePropertyInteger const& value);
    bool minThreadPoolSizeIsSet() const;
    void unsetMinThreadPoolSize();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getMaxThreadPoolSize() const;
    void setMaxThreadPoolSize(ConfigNodePropertyInteger const& value);
    bool maxThreadPoolSizeIsSet() const;
    void unsetMaxThreadPoolSize();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getCqWcmWorkflowTerminateOnActivate() const;
    void setCqWcmWorkflowTerminateOnActivate(ConfigNodePropertyBoolean const& value);
    bool cqWcmWorkflowTerminateOnActivateIsSet() const;
    void unsetCq_wcm_workflow_terminate_on_activate();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyArray getCqWcmWorklfowTerminateExclusionList() const;
    void setCqWcmWorklfowTerminateExclusionList(ConfigNodePropertyArray const& value);
    bool cqWcmWorklfowTerminateExclusionListIsSet() const;
    void unsetCq_wcm_worklfow_terminate_exclusion_list();

protected:
    ConfigNodePropertyString m_Event_filter;
    bool m_Event_filterIsSet;
    ConfigNodePropertyInteger m_MinThreadPoolSize;
    bool m_MinThreadPoolSizeIsSet;
    ConfigNodePropertyInteger m_MaxThreadPoolSize;
    bool m_MaxThreadPoolSizeIsSet;
    ConfigNodePropertyBoolean m_Cq_wcm_workflow_terminate_on_activate;
    bool m_Cq_wcm_workflow_terminate_on_activateIsSet;
    ConfigNodePropertyArray m_Cq_wcm_worklfow_terminate_exclusion_list;
    bool m_Cq_wcm_worklfow_terminate_exclusion_listIsSet;
};

}
}
}
}

#endif /* ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties_H_ */
