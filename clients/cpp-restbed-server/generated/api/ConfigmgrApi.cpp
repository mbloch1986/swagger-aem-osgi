/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>

#include "ConfigmgrApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

ConfigmgrApi::ConfigmgrApi() {
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrAdaptive Form and Interactive Communication Web Channel ConfigurationResource> spConfigmgrApiSystemConsoleConfigMgrAdaptive Form and Interactive Communication Web Channel ConfigurationResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrAdaptive Form and Interactive Communication Web Channel ConfigurationResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrAdaptive Form and Interactive Communication Web Channel ConfigurationResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrAdaptive Form and Interactive Communication Web Channel Theme ConfigurationResource> spConfigmgrApiSystemConsoleConfigMgrAdaptive Form and Interactive Communication Web Channel Theme ConfigurationResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrAdaptive Form and Interactive Communication Web Channel Theme ConfigurationResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrAdaptive Form and Interactive Communication Web Channel Theme ConfigurationResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrAnalytics Component Query Cache ServiceResource> spConfigmgrApiSystemConsoleConfigMgrAnalytics Component Query Cache ServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrAnalytics Component Query Cache ServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrAnalytics Component Query Cache ServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrApache Sling Health Check Result HTML SerializerResource> spConfigmgrApiSystemConsoleConfigMgrApache Sling Health Check Result HTML SerializerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrApache Sling Health Check Result HTML SerializerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrApache Sling Health Check Result HTML SerializerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.formsndocuments.config.AEMFormsManagerConfigurationResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.formsndocuments.config.AEMFormsManagerConfigurationResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.formsndocuments.config.AEMFormsManagerConfigurationResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.formsndocuments.config.AEMFormsManagerConfigurationResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.transaction.core.impl.TransactionRecorderResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.transaction.core.impl.TransactionRecorderResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.transaction.core.impl.TransactionRecorderResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.transaction.core.impl.TransactionRecorderResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.upgrade.prechecks.hc.impl.DeprecateIndexesHCResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.upgrade.prechecks.hc.impl.DeprecateIndexesHCResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.upgrade.prechecks.hc.impl.DeprecateIndexesHCResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.upgrade.prechecks.hc.impl.DeprecateIndexesHCResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.upgrade.prechecks.hc.impl.ReplicationAgentsDisabledHCResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.upgrade.prechecks.hc.impl.ReplicationAgentsDisabledHCResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.upgrade.prechecks.hc.impl.ReplicationAgentsDisabledHCResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.upgrade.prechecks.hc.impl.ReplicationAgentsDisabledHCResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.upgrade.prechecks.mbean.impl.PreUpgradeTasksMBeanImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.upgrade.prechecks.mbean.impl.PreUpgradeTasksMBeanImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.upgrade.prechecks.mbean.impl.PreUpgradeTasksMBeanImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.upgrade.prechecks.mbean.impl.PreUpgradeTasksMBeanImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.upgrade.prechecks.tasks.impl.ConsistencyCheckTaskImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.upgrade.prechecks.tasks.impl.ConsistencyCheckTaskImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.upgrade.prechecks.tasks.impl.ConsistencyCheckTaskImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.upgrade.prechecks.tasks.impl.ConsistencyCheckTaskImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.account.api.AccountManagementServiceResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.account.api.AccountManagementServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.account.api.AccountManagementServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.account.api.AccountManagementServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.account.impl.AccountManagementServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.account.impl.AccountManagementServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.account.impl.AccountManagementServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.account.impl.AccountManagementServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.address.impl.location.LocationListServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.address.impl.location.LocationListServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.address.impl.location.LocationListServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.address.impl.location.LocationListServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.audit.purge.DamResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.audit.purge.DamResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.audit.purge.DamResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.audit.purge.DamResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.audit.purge.PagesResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.audit.purge.PagesResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.audit.purge.PagesResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.audit.purge.PagesResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.audit.purge.ReplicationResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.audit.purge.ReplicationResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.audit.purge.ReplicationResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.audit.purge.ReplicationResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.cdn.rewriter.impl.AWSCloudFrontRewriterResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.cdn.rewriter.impl.AWSCloudFrontRewriterResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.cdn.rewriter.impl.AWSCloudFrontRewriterResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.cdn.rewriter.impl.AWSCloudFrontRewriterResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.cdn.rewriter.impl.CDNConfigServiceImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.cdn.rewriter.impl.CDNConfigServiceImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.cdn.rewriter.impl.CDNConfigServiceImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.cdn.rewriter.impl.CDNConfigServiceImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.cdn.rewriter.impl.CDNRewriterResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.cdn.rewriter.impl.CDNRewriterResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.cdn.rewriter.impl.CDNRewriterResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.cdn.rewriter.impl.CDNRewriterResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.cloudconfig.core.impl.ConfigurationReplicationEventHandlerResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.cloudconfig.core.impl.ConfigurationReplicationEventHandlerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.cloudconfig.core.impl.ConfigurationReplicationEventHandlerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.cloudconfig.core.impl.ConfigurationReplicationEventHandlerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.impl.asset.DynamicImageHandlerResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.impl.asset.DynamicImageHandlerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.impl.asset.DynamicImageHandlerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.impl.asset.DynamicImageHandlerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.impl.asset.ProductAssetHandlerProviderImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.impl.asset.ProductAssetHandlerProviderImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.impl.asset.ProductAssetHandlerProviderImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.impl.asset.ProductAssetHandlerProviderImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.impl.asset.StaticImageHandlerResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.impl.asset.StaticImageHandlerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.impl.asset.StaticImageHandlerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.impl.asset.StaticImageHandlerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.impl.asset.VideoHandlerResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.impl.asset.VideoHandlerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.impl.asset.VideoHandlerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.impl.asset.VideoHandlerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.impl.promotion.PromotionManagerImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.impl.promotion.PromotionManagerImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.impl.promotion.PromotionManagerImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.impl.promotion.PromotionManagerImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.pim.impl.cataloggenerator.CatalogGeneratorImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.pim.impl.cataloggenerator.CatalogGeneratorImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.pim.impl.cataloggenerator.CatalogGeneratorImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.pim.impl.cataloggenerator.CatalogGeneratorImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.pim.impl.PageEventListenerResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.pim.impl.PageEventListenerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.pim.impl.PageEventListenerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.pim.impl.PageEventListenerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.pim.impl.productfeed.ProductFeedServiceImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.pim.impl.productfeed.ProductFeedServiceImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.pim.impl.productfeed.ProductFeedServiceImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.pim.impl.productfeed.ProductFeedServiceImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.contentinsight.impl.ReportingServicesSettingsProviderResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.contentinsight.impl.ReportingServicesSettingsProviderResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.contentinsight.impl.ReportingServicesSettingsProviderResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.contentinsight.impl.ReportingServicesSettingsProviderResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.contentinsight.impl.servlets.BrightEdgeProxyServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.contentinsight.impl.servlets.BrightEdgeProxyServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.contentinsight.impl.servlets.BrightEdgeProxyServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.contentinsight.impl.servlets.BrightEdgeProxyServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.contentinsight.impl.servlets.ReportingServicesProxyServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.contentinsight.impl.servlets.ReportingServicesProxyServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.contentinsight.impl.servlets.ReportingServicesProxyServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.contentinsight.impl.servlets.ReportingServicesProxyServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.cfm.impl.component.ComponentConfigImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.cfm.impl.component.ComponentConfigImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.cfm.impl.component.ComponentConfigImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.cfm.impl.component.ComponentConfigImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.cfm.impl.conf.FeatureConfigImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.cfm.impl.conf.FeatureConfigImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.cfm.impl.conf.FeatureConfigImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.cfm.impl.conf.FeatureConfigImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.cfm.impl.content.rewriter.AssetProcessorResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.cfm.impl.content.rewriter.AssetProcessorResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.cfm.impl.content.rewriter.AssetProcessorResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.cfm.impl.content.rewriter.AssetProcessorResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.cfm.impl.content.rewriter.ParRangeFilterResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.cfm.impl.content.rewriter.ParRangeFilterResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.cfm.impl.content.rewriter.ParRangeFilterResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.cfm.impl.content.rewriter.ParRangeFilterResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.cfm.impl.content.rewriter.PayloadFilterResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.cfm.impl.content.rewriter.PayloadFilterResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.cfm.impl.content.rewriter.PayloadFilterResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.cfm.impl.content.rewriter.PayloadFilterResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.dm.process.image.PTiffManagerImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.dm.process.image.PTiffManagerImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.dm.process.image.PTiffManagerImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.dm.process.image.PTiffManagerImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.ips.impl.replication.trigger.ReplicateOnModifyWorkerResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.ips.impl.replication.trigger.ReplicateOnModifyWorkerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.ips.impl.replication.trigger.ReplicateOnModifyWorkerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.ips.impl.replication.trigger.ReplicateOnModifyWorkerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.mac.sync.helper.impl.MACSyncClientImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.mac.sync.helper.impl.MACSyncClientImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.mac.sync.helper.impl.MACSyncClientImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.mac.sync.helper.impl.MACSyncClientImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.mac.sync.impl.DAMSyncServiceImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.mac.sync.impl.DAMSyncServiceImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.mac.sync.impl.DAMSyncServiceImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.mac.sync.impl.DAMSyncServiceImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.processor.nui.impl.NuiAssetProcessorResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.processor.nui.impl.NuiAssetProcessorResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.processor.nui.impl.NuiAssetProcessorResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.processor.nui.impl.NuiAssetProcessorResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.s7imaging.impl.is.ImageServerComponentResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.s7imaging.impl.is.ImageServerComponentResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.s7imaging.impl.is.ImageServerComponentResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.s7imaging.impl.is.ImageServerComponentResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.s7imaging.impl.ps.PlatformServerServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.s7imaging.impl.ps.PlatformServerServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.s7imaging.impl.ps.PlatformServerServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.s7imaging.impl.ps.PlatformServerServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.webdav.impl.io.AssetIOHandlerResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.webdav.impl.io.AssetIOHandlerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.webdav.impl.io.AssetIOHandlerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.webdav.impl.io.AssetIOHandlerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.webdav.impl.io.DamWebdavVersionLinkingJobResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.webdav.impl.io.DamWebdavVersionLinkingJobResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.webdav.impl.io.DamWebdavVersionLinkingJobResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.webdav.impl.io.DamWebdavVersionLinkingJobResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.webdav.impl.io.SpecialFilesHandlerResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.webdav.impl.io.SpecialFilesHandlerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.webdav.impl.io.SpecialFilesHandlerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.webdav.impl.io.SpecialFilesHandlerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.deserfw.impl.DeserializationFirewallImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.deserfw.impl.DeserializationFirewallImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.deserfw.impl.DeserializationFirewallImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.deserfw.impl.DeserializationFirewallImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dtm.impl.service.DTMWebServiceImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dtm.impl.service.DTMWebServiceImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dtm.impl.service.DTMWebServiceImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dtm.impl.service.DTMWebServiceImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dtm.impl.servlets.DTMDeployHookServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dtm.impl.servlets.DTMDeployHookServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dtm.impl.servlets.DTMDeployHookServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dtm.impl.servlets.DTMDeployHookServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dtm.reactor.impl.service.WebServiceImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dtm.reactor.impl.service.WebServiceImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dtm.reactor.impl.service.WebServiceImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dtm.reactor.impl.service.WebServiceImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.experiencelog.impl.ExperienceLogConfigServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.experiencelog.impl.ExperienceLogConfigServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.experiencelog.impl.ExperienceLogConfigServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.experiencelog.impl.ExperienceLogConfigServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.hc.ContentPackagesHealthCheckResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.hc.ContentPackagesHealthCheckResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.hc.ContentPackagesHealthCheckResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.hc.ContentPackagesHealthCheckResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.history.impl.HistoryRequestFilterResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.history.impl.HistoryRequestFilterResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.history.impl.HistoryRequestFilterResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.history.impl.HistoryRequestFilterResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.history.impl.HistoryServiceImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.history.impl.HistoryServiceImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.history.impl.HistoryServiceImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.history.impl.HistoryServiceImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.inbox.impl.typeprovider.ItemTypeProviderResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.inbox.impl.typeprovider.ItemTypeProviderResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.inbox.impl.typeprovider.ItemTypeProviderResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.inbox.impl.typeprovider.ItemTypeProviderResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.projects.impl.servlet.ProjectImageServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.projects.impl.servlet.ProjectImageServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.projects.impl.servlet.ProjectImageServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.projects.impl.servlet.ProjectImageServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.projects.purge.SchedulerResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.projects.purge.SchedulerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.projects.purge.SchedulerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.projects.purge.SchedulerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.scheduled.exporter.impl.ScheduledExporterImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.scheduled.exporter.impl.ScheduledExporterImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.scheduled.exporter.impl.ScheduledExporterImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.scheduled.exporter.impl.ScheduledExporterImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.analytics.impl.ScreensAnalyticsServiceImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.analytics.impl.ScreensAnalyticsServiceImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.analytics.impl.ScreensAnalyticsServiceImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.analytics.impl.ScreensAnalyticsServiceImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.device.impl.DeviceServiceResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.device.impl.DeviceServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.device.impl.DeviceServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.device.impl.DeviceServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.device.registration.impl.RegistrationServiceImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.device.registration.impl.RegistrationServiceImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.device.registration.impl.RegistrationServiceImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.device.registration.impl.RegistrationServiceImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.impl.handler.ChannelsUpdateHandlerResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.impl.handler.ChannelsUpdateHandlerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.impl.handler.ChannelsUpdateHandlerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.impl.handler.ChannelsUpdateHandlerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.impl.jobs.DistributedDevicesStatiUpdateJobResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.impl.jobs.DistributedDevicesStatiUpdateJobResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.impl.jobs.DistributedDevicesStatiUpdateJobResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.impl.jobs.DistributedDevicesStatiUpdateJobResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.impl.remote.impl.DistributedHttpClientImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.impl.remote.impl.DistributedHttpClientImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.impl.remote.impl.DistributedHttpClientImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.impl.remote.impl.DistributedHttpClientImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.impl.ScreensChannelPostProcessorResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.impl.ScreensChannelPostProcessorResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.impl.ScreensChannelPostProcessorResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.impl.ScreensChannelPostProcessorResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.mq.activemq.impl.ArtemisJMSProviderResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.mq.activemq.impl.ArtemisJMSProviderResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.mq.activemq.impl.ArtemisJMSProviderResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.mq.activemq.impl.ArtemisJMSProviderResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.offlinecontent.impl.OfflineContentServiceImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.offlinecontent.impl.OfflineContentServiceImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.offlinecontent.impl.OfflineContentServiceImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.offlinecontent.impl.OfflineContentServiceImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.segmentation.impl.SegmentationFeatureFlagResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.segmentation.impl.SegmentationFeatureFlagResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.segmentation.impl.SegmentationFeatureFlagResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.segmentation.impl.SegmentationFeatureFlagResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.security.hc.bundles.impl.HtmlLibraryManagerConfigHealthCheckResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.security.hc.bundles.impl.HtmlLibraryManagerConfigHealthCheckResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.security.hc.bundles.impl.HtmlLibraryManagerConfigHealthCheckResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.security.hc.bundles.impl.HtmlLibraryManagerConfigHealthCheckResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.security.hc.bundles.impl.WcmFilterHealthCheckResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.security.hc.bundles.impl.WcmFilterHealthCheckResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.security.hc.bundles.impl.WcmFilterHealthCheckResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.security.hc.bundles.impl.WcmFilterHealthCheckResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.security.hc.dispatcher.impl.DispatcherAccessHealthCheckResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.security.hc.dispatcher.impl.DispatcherAccessHealthCheckResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.security.hc.dispatcher.impl.DispatcherAccessHealthCheckResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.security.hc.dispatcher.impl.DispatcherAccessHealthCheckResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.security.hc.packages.impl.ExampleContentHealthCheckResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.security.hc.packages.impl.ExampleContentHealthCheckResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.security.hc.packages.impl.ExampleContentHealthCheckResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.security.hc.packages.impl.ExampleContentHealthCheckResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.security.hc.webserver.impl.ClickjackingHealthCheckResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.security.hc.webserver.impl.ClickjackingHealthCheckResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.security.hc.webserver.impl.ClickjackingHealthCheckResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.security.hc.webserver.impl.ClickjackingHealthCheckResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.accountverification.impl.AccountManagementConfigImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.accountverification.impl.AccountManagementConfigImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.accountverification.impl.AccountManagementConfigImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.accountverification.impl.AccountManagementConfigImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.client.impl.SocialActivityComponentFactoryImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.client.impl.SocialActivityComponentFactoryImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.client.impl.SocialActivityComponentFactoryImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.client.impl.SocialActivityComponentFactoryImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.client.impl.SocialActivityStreamComponentFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.client.impl.SocialActivityStreamComponentFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.client.impl.SocialActivityStreamComponentFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.client.impl.SocialActivityStreamComponentFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.listener.impl.EventListenerHandlerResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.listener.impl.EventListenerHandlerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.listener.impl.EventListenerHandlerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.listener.impl.EventListenerHandlerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.listener.impl.ModerationEventExtensionResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.listener.impl.ModerationEventExtensionResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.listener.impl.ModerationEventExtensionResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.listener.impl.ModerationEventExtensionResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.listener.impl.RatingEventActivitySuppressorResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.listener.impl.RatingEventActivitySuppressorResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.listener.impl.RatingEventActivitySuppressorResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.listener.impl.RatingEventActivitySuppressorResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.listener.impl.ResourceActivityStreamProviderFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.listener.impl.ResourceActivityStreamProviderFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.listener.impl.ResourceActivityStreamProviderFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.listener.impl.ResourceActivityStreamProviderFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.calendar.client.endpoints.impl.CalendarOperationsImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.calendar.client.endpoints.impl.CalendarOperationsImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.calendar.client.endpoints.impl.CalendarOperationsImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.calendar.client.endpoints.impl.CalendarOperationsImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.calendar.client.operationextensions.EventAttachmentResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.calendar.client.operationextensions.EventAttachmentResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.calendar.client.operationextensions.EventAttachmentResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.calendar.client.operationextensions.EventAttachmentResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.calendar.servlets.TimeZoneServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.calendar.servlets.TimeZoneServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.calendar.servlets.TimeZoneServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.calendar.servlets.TimeZoneServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.comments.endpoints.impl.CommentDeleteEventActivitySuppressorResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.comments.endpoints.impl.CommentDeleteEventActivitySuppressorResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.comments.endpoints.impl.CommentDeleteEventActivitySuppressorResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.comments.endpoints.impl.CommentDeleteEventActivitySuppressorResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.comments.endpoints.impl.CommentOperationServiceResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.comments.endpoints.impl.CommentOperationServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.comments.endpoints.impl.CommentOperationServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.comments.endpoints.impl.CommentOperationServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.comments.endpoints.impl.TranslationOperationServiceResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.comments.endpoints.impl.TranslationOperationServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.comments.endpoints.impl.TranslationOperationServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.comments.endpoints.impl.TranslationOperationServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.comments.listing.impl.SearchCommentSocialComponentListProviderResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.comments.listing.impl.SearchCommentSocialComponentListProviderResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.comments.listing.impl.SearchCommentSocialComponentListProviderResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.comments.listing.impl.SearchCommentSocialComponentListProviderResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.comments.scheduler.impl.SearchScheduledPostsResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.comments.scheduler.impl.SearchScheduledPostsResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.comments.scheduler.impl.SearchScheduledPostsResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.comments.scheduler.impl.SearchScheduledPostsResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.cors.CORSAuthenticationFilterResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.cors.CORSAuthenticationFilterResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.cors.CORSAuthenticationFilterResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.cors.CORSAuthenticationFilterResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.AndroidEmailClientProviderResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.AndroidEmailClientProviderResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.AndroidEmailClientProviderResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.AndroidEmailClientProviderResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.CommentEmailBuilderImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.CommentEmailBuilderImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.CommentEmailBuilderImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.CommentEmailBuilderImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.CommentEmailEventListenerResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.CommentEmailEventListenerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.CommentEmailEventListenerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.CommentEmailEventListenerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.CustomEmailClientProviderResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.CustomEmailClientProviderResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.CustomEmailClientProviderResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.CustomEmailClientProviderResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.EmailQuotedTextPatternsImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.EmailQuotedTextPatternsImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.EmailQuotedTextPatternsImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.EmailQuotedTextPatternsImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.EmailReplyConfigurationImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.EmailReplyConfigurationImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.EmailReplyConfigurationImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.EmailReplyConfigurationImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.EmailReplyImporterResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.EmailReplyImporterResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.EmailReplyImporterResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.EmailReplyImporterResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.GmailEmailClientProviderResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.GmailEmailClientProviderResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.GmailEmailClientProviderResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.GmailEmailClientProviderResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.IOSEmailClientProviderResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.IOSEmailClientProviderResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.IOSEmailClientProviderResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.IOSEmailClientProviderResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.MacmailEmailClientProviderResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.MacmailEmailClientProviderResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.MacmailEmailClientProviderResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.MacmailEmailClientProviderResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.OutLookEmailClientProviderResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.OutLookEmailClientProviderResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.OutLookEmailClientProviderResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.OutLookEmailClientProviderResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.UnknownEmailClientProviderResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.UnknownEmailClientProviderResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.UnknownEmailClientProviderResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.UnknownEmailClientProviderResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.YahooEmailClientProviderResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.YahooEmailClientProviderResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.YahooEmailClientProviderResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.YahooEmailClientProviderResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.maintainance.impl.DeleteTempUGCImageUploadsResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.maintainance.impl.DeleteTempUGCImageUploadsResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.maintainance.impl.DeleteTempUGCImageUploadsResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.maintainance.impl.DeleteTempUGCImageUploadsResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.ugclimiter.impl.UGCLimiterServiceImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.ugclimiter.impl.UGCLimiterServiceImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.ugclimiter.impl.UGCLimiterServiceImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.ugclimiter.impl.UGCLimiterServiceImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.ugclimitsconfig.impl.CommunityUserUGCLimitsConfigImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.ugclimitsconfig.impl.CommunityUserUGCLimitsConfigImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.ugclimitsconfig.impl.CommunityUserUGCLimitsConfigImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.ugclimitsconfig.impl.CommunityUserUGCLimitsConfigImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.connect.oauth.impl.FacebookProviderImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.connect.oauth.impl.FacebookProviderImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.connect.oauth.impl.FacebookProviderImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.connect.oauth.impl.FacebookProviderImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.connect.oauth.impl.SocialOAuthAuthenticationHandlerResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.connect.oauth.impl.SocialOAuthAuthenticationHandlerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.connect.oauth.impl.SocialOAuthAuthenticationHandlerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.connect.oauth.impl.SocialOAuthAuthenticationHandlerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.connect.oauth.impl.SocialOAuthUserProfileMapperResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.connect.oauth.impl.SocialOAuthUserProfileMapperResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.connect.oauth.impl.SocialOAuthUserProfileMapperResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.connect.oauth.impl.SocialOAuthUserProfileMapperResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.connect.oauth.impl.TwitterProviderImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.connect.oauth.impl.TwitterProviderImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.connect.oauth.impl.TwitterProviderImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.connect.oauth.impl.TwitterProviderImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.content.fragments.services.impl.CommunitiesFragmentCreationServiceImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.content.fragments.services.impl.CommunitiesFragmentCreationServiceImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.content.fragments.services.impl.CommunitiesFragmentCreationServiceImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.content.fragments.services.impl.CommunitiesFragmentCreationServiceImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.datastore.as.impl.ASResourceProviderFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.datastore.as.impl.ASResourceProviderFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.datastore.as.impl.ASResourceProviderFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.datastore.as.impl.ASResourceProviderFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.datastore.op.impl.SocialMSResourceProviderFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.datastore.op.impl.SocialMSResourceProviderFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.datastore.op.impl.SocialMSResourceProviderFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.datastore.op.impl.SocialMSResourceProviderFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.datastore.rdb.impl.SocialRDBResourceProviderFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.datastore.rdb.impl.SocialRDBResourceProviderFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.datastore.rdb.impl.SocialRDBResourceProviderFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.datastore.rdb.impl.SocialRDBResourceProviderFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.enablement.adaptors.EnablementLearningPathAdaptorFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.enablement.adaptors.EnablementLearningPathAdaptorFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.enablement.adaptors.EnablementLearningPathAdaptorFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.enablement.adaptors.EnablementLearningPathAdaptorFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.enablement.adaptors.EnablementResourceAdaptorFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.enablement.adaptors.EnablementResourceAdaptorFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.enablement.adaptors.EnablementResourceAdaptorFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.enablement.adaptors.EnablementResourceAdaptorFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.enablement.learningpath.endpoints.impl.EnablementLearningPathModelOperationServiceResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.enablement.learningpath.endpoints.impl.EnablementLearningPathModelOperationServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.enablement.learningpath.endpoints.impl.EnablementLearningPathModelOperationServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.enablement.learningpath.endpoints.impl.EnablementLearningPathModelOperationServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.enablement.resource.endpoints.impl.EnablementResourceModelOperationServiceResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.enablement.resource.endpoints.impl.EnablementResourceModelOperationServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.enablement.resource.endpoints.impl.EnablementResourceModelOperationServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.enablement.resource.endpoints.impl.EnablementResourceModelOperationServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.enablement.services.impl.AuthorMarkerImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.enablement.services.impl.AuthorMarkerImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.enablement.services.impl.AuthorMarkerImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.enablement.services.impl.AuthorMarkerImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.filelibrary.client.endpoints.FilelibraryDownloadGetServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.filelibrary.client.endpoints.FilelibraryDownloadGetServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.filelibrary.client.endpoints.FilelibraryDownloadGetServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.filelibrary.client.endpoints.FilelibraryDownloadGetServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.filelibrary.client.endpoints.impl.FileLibraryOperationsServiceResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.filelibrary.client.endpoints.impl.FileLibraryOperationsServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.filelibrary.client.endpoints.impl.FileLibraryOperationsServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.filelibrary.client.endpoints.impl.FileLibraryOperationsServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.forum.client.endpoints.impl.ForumOperationsServiceResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.forum.client.endpoints.impl.ForumOperationsServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.forum.client.endpoints.impl.ForumOperationsServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.forum.client.endpoints.impl.ForumOperationsServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.forum.dispatcher.impl.FlushOperationsResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.forum.dispatcher.impl.FlushOperationsResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.forum.dispatcher.impl.FlushOperationsResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.forum.dispatcher.impl.FlushOperationsResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.group.client.impl.CommunityGroupCollectionComponentFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.group.client.impl.CommunityGroupCollectionComponentFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.group.client.impl.CommunityGroupCollectionComponentFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.group.client.impl.CommunityGroupCollectionComponentFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.group.impl.GroupServiceImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.group.impl.GroupServiceImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.group.impl.GroupServiceImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.group.impl.GroupServiceImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.handlebars.GuavaTemplateCacheImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.handlebars.GuavaTemplateCacheImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.handlebars.GuavaTemplateCacheImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.handlebars.GuavaTemplateCacheImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ideation.client.endpoints.impl.IdeationOperationsServiceResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ideation.client.endpoints.impl.IdeationOperationsServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ideation.client.endpoints.impl.IdeationOperationsServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ideation.client.endpoints.impl.IdeationOperationsServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.journal.client.endpoints.impl.JournalOperationsServiceResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.journal.client.endpoints.impl.JournalOperationsServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.journal.client.endpoints.impl.JournalOperationsServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.journal.client.endpoints.impl.JournalOperationsServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.members.endpoints.impl.CommunityMemberGroupProfileOperationServiceResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.members.endpoints.impl.CommunityMemberGroupProfileOperationServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.members.endpoints.impl.CommunityMemberGroupProfileOperationServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.members.endpoints.impl.CommunityMemberGroupProfileOperationServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.members.endpoints.impl.CommunityMemberUserProfileOperationServiceResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.members.endpoints.impl.CommunityMemberUserProfileOperationServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.members.endpoints.impl.CommunityMemberUserProfileOperationServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.members.endpoints.impl.CommunityMemberUserProfileOperationServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.members.impl.CommunityMemberGroupProfileComponentFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.members.impl.CommunityMemberGroupProfileComponentFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.members.impl.CommunityMemberGroupProfileComponentFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.members.impl.CommunityMemberGroupProfileComponentFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.messaging.client.endpoints.impl.MessagingOperationsServiceImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.messaging.client.endpoints.impl.MessagingOperationsServiceImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.messaging.client.endpoints.impl.MessagingOperationsServiceImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.messaging.client.endpoints.impl.MessagingOperationsServiceImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.moderation.dashboard.api.FilterGroupSocialComponentFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.moderation.dashboard.api.FilterGroupSocialComponentFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.moderation.dashboard.api.FilterGroupSocialComponentFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.moderation.dashboard.api.FilterGroupSocialComponentFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.moderation.dashboard.api.ModerationDashboardSocialComponentFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.moderation.dashboard.api.ModerationDashboardSocialComponentFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.moderation.dashboard.api.ModerationDashboardSocialComponentFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.moderation.dashboard.api.ModerationDashboardSocialComponentFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.moderation.dashboard.api.UserDetailsSocialComponentFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.moderation.dashboard.api.UserDetailsSocialComponentFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.moderation.dashboard.api.UserDetailsSocialComponentFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.moderation.dashboard.api.UserDetailsSocialComponentFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.moderation.dashboard.internal.impl.FilterGroupSocialComponentFactoryV2Resource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.moderation.dashboard.internal.impl.FilterGroupSocialComponentFactoryV2Resource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.moderation.dashboard.internal.impl.FilterGroupSocialComponentFactoryV2Resource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.moderation.dashboard.internal.impl.FilterGroupSocialComponentFactoryV2Resource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.notifications.impl.MentionsRouterResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.notifications.impl.MentionsRouterResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.notifications.impl.MentionsRouterResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.notifications.impl.MentionsRouterResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.notifications.impl.NotificationManagerImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.notifications.impl.NotificationManagerImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.notifications.impl.NotificationManagerImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.notifications.impl.NotificationManagerImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.notifications.impl.NotificationsRouterResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.notifications.impl.NotificationsRouterResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.notifications.impl.NotificationsRouterResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.notifications.impl.NotificationsRouterResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.qna.client.endpoints.impl.QnaForumOperationsServiceResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.qna.client.endpoints.impl.QnaForumOperationsServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.qna.client.endpoints.impl.QnaForumOperationsServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.qna.client.endpoints.impl.QnaForumOperationsServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportImporterServiceImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportImporterServiceImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportImporterServiceImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportImporterServiceImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportManagementServiceImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportManagementServiceImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportManagementServiceImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportManagementServiceImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.reporting.analytics.services.impl.SiteTrendReportSocialComponentFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.reporting.analytics.services.impl.SiteTrendReportSocialComponentFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.reporting.analytics.services.impl.SiteTrendReportSocialComponentFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.reporting.analytics.services.impl.SiteTrendReportSocialComponentFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.review.client.endpoints.impl.ReviewOperationsServiceResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.review.client.endpoints.impl.ReviewOperationsServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.review.client.endpoints.impl.ReviewOperationsServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.review.client.endpoints.impl.ReviewOperationsServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.scf.core.operations.impl.SocialOperationsServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.scf.core.operations.impl.SocialOperationsServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.scf.core.operations.impl.SocialOperationsServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.scf.core.operations.impl.SocialOperationsServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.scf.endpoints.impl.DefaultSocialGetServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.scf.endpoints.impl.DefaultSocialGetServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.scf.endpoints.impl.DefaultSocialGetServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.scf.endpoints.impl.DefaultSocialGetServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.scoring.impl.ScoringEventListenerResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.scoring.impl.ScoringEventListenerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.scoring.impl.ScoringEventListenerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.scoring.impl.ScoringEventListenerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.serviceusers.internal.impl.ServiceUserWrapperImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.serviceusers.internal.impl.ServiceUserWrapperImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.serviceusers.internal.impl.ServiceUserWrapperImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.serviceusers.internal.impl.ServiceUserWrapperImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.site.endpoints.impl.SiteOperationServiceResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.site.endpoints.impl.SiteOperationServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.site.endpoints.impl.SiteOperationServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.site.endpoints.impl.SiteOperationServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.site.impl.AnalyticsComponentConfigurationServiceImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.site.impl.AnalyticsComponentConfigurationServiceImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.site.impl.AnalyticsComponentConfigurationServiceImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.site.impl.AnalyticsComponentConfigurationServiceImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.site.impl.SiteConfiguratorImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.site.impl.SiteConfiguratorImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.site.impl.SiteConfiguratorImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.site.impl.SiteConfiguratorImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.srp.impl.SocialSolrConnectorResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.srp.impl.SocialSolrConnectorResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.srp.impl.SocialSolrConnectorResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.srp.impl.SocialSolrConnectorResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.sync.impl.DiffChangesObserverResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.sync.impl.DiffChangesObserverResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.sync.impl.DiffChangesObserverResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.sync.impl.DiffChangesObserverResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.sync.impl.GroupSyncListenerImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.sync.impl.GroupSyncListenerImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.sync.impl.GroupSyncListenerImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.sync.impl.GroupSyncListenerImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.sync.impl.PublisherSyncServiceImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.sync.impl.PublisherSyncServiceImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.sync.impl.PublisherSyncServiceImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.sync.impl.PublisherSyncServiceImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.sync.impl.UserSyncListenerImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.sync.impl.UserSyncListenerImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.sync.impl.UserSyncListenerImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.sync.impl.UserSyncListenerImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.translation.impl.TranslationServiceConfigManagerResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.translation.impl.TranslationServiceConfigManagerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.translation.impl.TranslationServiceConfigManagerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.translation.impl.TranslationServiceConfigManagerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.translation.impl.UGCLanguageDetectorResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.translation.impl.UGCLanguageDetectorResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.translation.impl.UGCLanguageDetectorResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.translation.impl.UGCLanguageDetectorResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.dispatcher.impl.FlushServiceImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.dispatcher.impl.FlushServiceImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.dispatcher.impl.FlushServiceImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.dispatcher.impl.FlushServiceImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.impl.AysncReverseReplicatorImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.impl.AysncReverseReplicatorImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.impl.AysncReverseReplicatorImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.impl.AysncReverseReplicatorImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.impl.PublisherConfigurationImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.impl.PublisherConfigurationImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.impl.PublisherConfigurationImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.impl.PublisherConfigurationImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.impl.SocialUtilsImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.impl.SocialUtilsImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.impl.SocialUtilsImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.impl.SocialUtilsImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.moderation.impl.AutoModerationImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.moderation.impl.AutoModerationImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.moderation.impl.AutoModerationImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.moderation.impl.AutoModerationImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.moderation.impl.SentimentProcessResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.moderation.impl.SentimentProcessResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.moderation.impl.SentimentProcessResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.moderation.impl.SentimentProcessResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.security.impl.DefaultAttachmentTypeBlacklistServiceResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.security.impl.DefaultAttachmentTypeBlacklistServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.security.impl.DefaultAttachmentTypeBlacklistServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.security.impl.DefaultAttachmentTypeBlacklistServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.security.impl.SaferSlingPostValidatorImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.security.impl.SaferSlingPostValidatorImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.security.impl.SaferSlingPostValidatorImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.security.impl.SaferSlingPostValidatorImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.user.endpoints.impl.UsersGroupFromPublishServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.user.endpoints.impl.UsersGroupFromPublishServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.user.endpoints.impl.UsersGroupFromPublishServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.user.endpoints.impl.UsersGroupFromPublishServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.user.impl.transport.HttpToPublisherResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.user.impl.transport.HttpToPublisherResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.user.impl.transport.HttpToPublisherResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.user.impl.transport.HttpToPublisherResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.ui.wcm.commons.internal.servlets.rte.RTEFilterServletFactory.amendedResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.ui.wcm.commons.internal.servlets.rte.RTEFilterServletFactory.amendedResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.ui.wcm.commons.internal.servlets.rte.RTEFilterServletFactory.amendedResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.ui.wcm.commons.internal.servlets.rte.RTEFilterServletFactory.amendedResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.upgrades.cleanup.impl.UpgradeContentCleanupResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.upgrades.cleanup.impl.UpgradeContentCleanupResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.upgrades.cleanup.impl.UpgradeContentCleanupResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.upgrades.cleanup.impl.UpgradeContentCleanupResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.upgrades.cleanup.impl.UpgradeInstallFolderCleanupResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.upgrades.cleanup.impl.UpgradeInstallFolderCleanupResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.upgrades.cleanup.impl.UpgradeInstallFolderCleanupResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.upgrades.cleanup.impl.UpgradeInstallFolderCleanupResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.jobs.async.impl.AsyncDeleteConfigProviderServiceResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.jobs.async.impl.AsyncDeleteConfigProviderServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.jobs.async.impl.AsyncDeleteConfigProviderServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.jobs.async.impl.AsyncDeleteConfigProviderServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.jobs.async.impl.AsyncJobCleanUpTaskResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.jobs.async.impl.AsyncJobCleanUpTaskResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.jobs.async.impl.AsyncJobCleanUpTaskResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.jobs.async.impl.AsyncJobCleanUpTaskResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.jobs.async.impl.AsyncMoveConfigProviderServiceResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.jobs.async.impl.AsyncMoveConfigProviderServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.jobs.async.impl.AsyncMoveConfigProviderServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.jobs.async.impl.AsyncMoveConfigProviderServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.jobs.async.impl.AsyncPageMoveConfigProviderServiceResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.jobs.async.impl.AsyncPageMoveConfigProviderServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.jobs.async.impl.AsyncPageMoveConfigProviderServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.jobs.async.impl.AsyncPageMoveConfigProviderServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.launches.impl.LaunchesEventHandlerResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.launches.impl.LaunchesEventHandlerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.launches.impl.LaunchesEventHandlerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.launches.impl.LaunchesEventHandlerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.mobile.qrcode.servlet.QRCodeImageGeneratorResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.mobile.qrcode.servlet.QRCodeImageGeneratorResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.mobile.qrcode.servlet.QRCodeImageGeneratorResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.mobile.qrcode.servlet.QRCodeImageGeneratorResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.style.internal.ComponentStyleInfoCacheImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.style.internal.ComponentStyleInfoCacheImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.style.internal.ComponentStyleInfoCacheImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.style.internal.ComponentStyleInfoCacheImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.translation.impl.TranslationPlatformConfigurationImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.translation.impl.TranslationPlatformConfigurationImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.translation.impl.TranslationPlatformConfigurationImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.translation.impl.TranslationPlatformConfigurationImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.fd.fp.config.FormsPortalDraftsandSubmissionConfigServiceResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.fd.fp.config.FormsPortalDraftsandSubmissionConfigServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.fd.fp.config.FormsPortalDraftsandSubmissionConfigServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.fd.fp.config.FormsPortalDraftsandSubmissionConfigServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.fd.fp.config.FormsPortalSchedulerServiceResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.fd.fp.config.FormsPortalSchedulerServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.fd.fp.config.FormsPortalSchedulerServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.fd.fp.config.FormsPortalSchedulerServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.forms.common.service.impl.DefaultDataProviderResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.forms.common.service.impl.DefaultDataProviderResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.forms.common.service.impl.DefaultDataProviderResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.forms.common.service.impl.DefaultDataProviderResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.forms.common.service.impl.FormsCommonConfigurationServiceImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.forms.common.service.impl.FormsCommonConfigurationServiceImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.forms.common.service.impl.FormsCommonConfigurationServiceImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.forms.common.service.impl.FormsCommonConfigurationServiceImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.forms.common.servlet.TempCleanUpTaskResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.forms.common.servlet.TempCleanUpTaskResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.forms.common.servlet.TempCleanUpTaskResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.forms.common.servlet.TempCleanUpTaskResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.acp.platform.PlatformServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.acp.platform.PlatformServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.acp.platform.PlatformServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.acp.platform.PlatformServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.activitystreams.impl.ActivityManagerImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.activitystreams.impl.ActivityManagerImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.activitystreams.impl.ActivityManagerImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.activitystreams.impl.ActivityManagerImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.analyzer.base.SystemStatusServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.analyzer.base.SystemStatusServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.analyzer.base.SystemStatusServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.analyzer.base.SystemStatusServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.analyzer.scripts.compile.AllScriptsCompilerServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.analyzer.scripts.compile.AllScriptsCompilerServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.analyzer.scripts.compile.AllScriptsCompilerServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.analyzer.scripts.compile.AllScriptsCompilerServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.apicontroller.FilterResolverHookFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.apicontroller.FilterResolverHookFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.apicontroller.FilterResolverHookFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.apicontroller.FilterResolverHookFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.cert.impl.ClientCertAuthHandlerResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.cert.impl.ClientCertAuthHandlerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.cert.impl.ClientCertAuthHandlerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.cert.impl.ClientCertAuthHandlerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.imsResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.imsResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.imsResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.imsResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.ims.impl.ExternalUserIdMappingProviderExtensionResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.ims.impl.ExternalUserIdMappingProviderExtensionResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.ims.impl.ExternalUserIdMappingProviderExtensionResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.ims.impl.ExternalUserIdMappingProviderExtensionResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.ims.impl.IMSAccessTokenRequestCustomizerImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.ims.impl.IMSAccessTokenRequestCustomizerImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.ims.impl.IMSAccessTokenRequestCustomizerImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.ims.impl.IMSAccessTokenRequestCustomizerImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.ims.impl.IMSInstanceCredentialsValidatorResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.ims.impl.IMSInstanceCredentialsValidatorResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.ims.impl.IMSInstanceCredentialsValidatorResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.ims.impl.IMSInstanceCredentialsValidatorResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.ims.impl.IMSProviderImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.ims.impl.IMSProviderImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.ims.impl.IMSProviderImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.ims.impl.IMSProviderImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.ims.impl.ImsConfigProviderImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.ims.impl.ImsConfigProviderImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.ims.impl.ImsConfigProviderImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.ims.impl.ImsConfigProviderImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.accesstoken.providerResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.accesstoken.providerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.accesstoken.providerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.accesstoken.providerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.BearerAuthenticationHandlerResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.BearerAuthenticationHandlerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.BearerAuthenticationHandlerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.BearerAuthenticationHandlerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.DefaultTokenValidatorImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.DefaultTokenValidatorImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.DefaultTokenValidatorImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.DefaultTokenValidatorImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.FacebookProviderImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.FacebookProviderImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.FacebookProviderImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.FacebookProviderImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.GithubProviderImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.GithubProviderImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.GithubProviderImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.GithubProviderImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.GraniteProviderResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.GraniteProviderResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.GraniteProviderResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.GraniteProviderResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.helper.ProviderConfigManagerResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.helper.ProviderConfigManagerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.helper.ProviderConfigManagerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.helper.ProviderConfigManagerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.helper.ProviderConfigManagerInternalResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.helper.ProviderConfigManagerInternalResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.helper.ProviderConfigManagerInternalResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.helper.ProviderConfigManagerInternalResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.OAuthAuthenticationHandlerResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.OAuthAuthenticationHandlerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.OAuthAuthenticationHandlerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.OAuthAuthenticationHandlerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.TwitterProviderImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.TwitterProviderImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.TwitterProviderImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.TwitterProviderImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.providerResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.providerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.providerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.providerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.requirement.impl.DefaultRequirementHandlerResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.requirement.impl.DefaultRequirementHandlerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.requirement.impl.DefaultRequirementHandlerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.requirement.impl.DefaultRequirementHandlerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.saml.SamlAuthenticationHandlerResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.saml.SamlAuthenticationHandlerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.saml.SamlAuthenticationHandlerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.saml.SamlAuthenticationHandlerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.sso.impl.SsoAuthenticationHandlerResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.sso.impl.SsoAuthenticationHandlerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.sso.impl.SsoAuthenticationHandlerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.sso.impl.SsoAuthenticationHandlerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.CodeCacheHealthCheckResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.CodeCacheHealthCheckResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.CodeCacheHealthCheckResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.CodeCacheHealthCheckResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.CrxdeSupportBundleHealthCheckResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.CrxdeSupportBundleHealthCheckResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.CrxdeSupportBundleHealthCheckResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.CrxdeSupportBundleHealthCheckResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.DavExBundleHealthCheckResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.DavExBundleHealthCheckResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.DavExBundleHealthCheckResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.DavExBundleHealthCheckResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.InactiveBundlesHealthCheckResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.InactiveBundlesHealthCheckResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.InactiveBundlesHealthCheckResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.InactiveBundlesHealthCheckResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.JobsHealthCheckResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.JobsHealthCheckResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.JobsHealthCheckResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.JobsHealthCheckResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.SlingGetServletHealthCheckResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.SlingGetServletHealthCheckResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.SlingGetServletHealthCheckResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.SlingGetServletHealthCheckResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.SlingJavaScriptHandlerHealthCheckResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.SlingJavaScriptHandlerHealthCheckResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.SlingJavaScriptHandlerHealthCheckResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.SlingJavaScriptHandlerHealthCheckResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.SlingJspScriptHandlerHealthCheckResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.SlingJspScriptHandlerHealthCheckResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.SlingJspScriptHandlerHealthCheckResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.SlingJspScriptHandlerHealthCheckResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.SlingReferrerFilterHealthCheckResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.SlingReferrerFilterHealthCheckResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.SlingReferrerFilterHealthCheckResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.SlingReferrerFilterHealthCheckResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.WebDavBundleHealthCheckResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.WebDavBundleHealthCheckResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.WebDavBundleHealthCheckResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.WebDavBundleHealthCheckResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.comments.internal.CommentReplicationContentFilterFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.comments.internal.CommentReplicationContentFilterFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.comments.internal.CommentReplicationContentFilterFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.comments.internal.CommentReplicationContentFilterFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.compatrouter.impl.CompatSwitchingServiceImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.compatrouter.impl.CompatSwitchingServiceImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.compatrouter.impl.CompatSwitchingServiceImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.compatrouter.impl.CompatSwitchingServiceImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.compatrouter.impl.RoutingConfigResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.compatrouter.impl.RoutingConfigResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.compatrouter.impl.RoutingConfigResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.compatrouter.impl.RoutingConfigResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.compatrouter.impl.SwitchMappingConfigResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.compatrouter.impl.SwitchMappingConfigResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.compatrouter.impl.SwitchMappingConfigResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.compatrouter.impl.SwitchMappingConfigResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.conf.impl.RuntimeAwareConfigurationResourceResolvingStrategyResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.conf.impl.RuntimeAwareConfigurationResourceResolvingStrategyResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.conf.impl.RuntimeAwareConfigurationResourceResolvingStrategyResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.conf.impl.RuntimeAwareConfigurationResourceResolvingStrategyResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.contexthub.impl.ContextHubImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.contexthub.impl.ContextHubImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.contexthub.impl.ContextHubImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.contexthub.impl.ContextHubImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.cors.impl.CORSPolicyImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.cors.impl.CORSPolicyImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.cors.impl.CORSPolicyImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.cors.impl.CORSPolicyImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.csrf.impl.CSRFFilterResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.csrf.impl.CSRFFilterResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.csrf.impl.CSRFFilterResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.csrf.impl.CSRFFilterResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.csrf.impl.CSRFServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.csrf.impl.CSRFServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.csrf.impl.CSRFServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.csrf.impl.CSRFServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.CryptoDistributionTransportSecretProviderResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.CryptoDistributionTransportSecretProviderResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.CryptoDistributionTransportSecretProviderResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.CryptoDistributionTransportSecretProviderResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.diff.DiffChangesObserverResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.diff.DiffChangesObserverResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.diff.DiffChangesObserverResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.diff.DiffChangesObserverResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.diff.DiffEventListenerResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.diff.DiffEventListenerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.diff.DiffEventListenerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.diff.DiffEventListenerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.DistributionToReplicationEventTransformerResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.DistributionToReplicationEventTransformerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.DistributionToReplicationEventTransformerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.DistributionToReplicationEventTransformerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.replication.adapters.ReplicationAgentProviderResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.replication.adapters.ReplicationAgentProviderResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.replication.adapters.ReplicationAgentProviderResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.replication.adapters.ReplicationAgentProviderResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.replication.DistributionTransportHandlerResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.replication.DistributionTransportHandlerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.replication.DistributionTransportHandlerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.replication.DistributionTransportHandlerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.transport.AccessTokenDistributionTransportSecretProviderResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.transport.AccessTokenDistributionTransportSecretProviderResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.transport.AccessTokenDistributionTransportSecretProviderResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.transport.AccessTokenDistributionTransportSecretProviderResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.frags.impl.CheckHttpHeaderFlagResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.frags.impl.CheckHttpHeaderFlagResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.frags.impl.CheckHttpHeaderFlagResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.frags.impl.CheckHttpHeaderFlagResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.frags.impl.RandomFeatureResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.frags.impl.RandomFeatureResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.frags.impl.RandomFeatureResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.frags.impl.RandomFeatureResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.httpcache.file.FileCacheStoreResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.httpcache.file.FileCacheStoreResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.httpcache.file.FileCacheStoreResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.httpcache.file.FileCacheStoreResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.httpcache.impl.OuterCacheFilterResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.httpcache.impl.OuterCacheFilterResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.httpcache.impl.OuterCacheFilterResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.httpcache.impl.OuterCacheFilterResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.i18n.impl.bundle.PseudoTranslationsResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.i18n.impl.bundle.PseudoTranslationsResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.i18n.impl.bundle.PseudoTranslationsResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.i18n.impl.bundle.PseudoTranslationsResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.i18n.impl.PreferencesLocaleResolverServiceResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.i18n.impl.PreferencesLocaleResolverServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.i18n.impl.PreferencesLocaleResolverServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.i18n.impl.PreferencesLocaleResolverServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.infocollector.InfoCollectorResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.infocollector.InfoCollectorResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.infocollector.InfoCollectorResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.infocollector.InfoCollectorResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.jetty.ssl.internal.GraniteSslConnectorFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.jetty.ssl.internal.GraniteSslConnectorFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.jetty.ssl.internal.GraniteSslConnectorFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.jetty.ssl.internal.GraniteSslConnectorFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.license.impl.LicenseCheckFilterResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.license.impl.LicenseCheckFilterResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.license.impl.LicenseCheckFilterResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.license.impl.LicenseCheckFilterResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.logging.impl.LogAnalyserImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.logging.impl.LogAnalyserImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.logging.impl.LogAnalyserImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.logging.impl.LogAnalyserImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.logging.impl.LogErrorHealthCheckResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.logging.impl.LogErrorHealthCheckResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.logging.impl.LogErrorHealthCheckResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.logging.impl.LogErrorHealthCheckResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.maintenance.crx.impl.DataStoreGarbageCollectionTaskResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.maintenance.crx.impl.DataStoreGarbageCollectionTaskResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.maintenance.crx.impl.DataStoreGarbageCollectionTaskResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.maintenance.crx.impl.DataStoreGarbageCollectionTaskResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.maintenance.crx.impl.LuceneBinariesCleanupTaskResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.maintenance.crx.impl.LuceneBinariesCleanupTaskResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.maintenance.crx.impl.LuceneBinariesCleanupTaskResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.maintenance.crx.impl.LuceneBinariesCleanupTaskResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.maintenance.crx.impl.RevisionCleanupTaskResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.maintenance.crx.impl.RevisionCleanupTaskResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.maintenance.crx.impl.RevisionCleanupTaskResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.maintenance.crx.impl.RevisionCleanupTaskResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.monitoring.impl.ScriptConfigImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.monitoring.impl.ScriptConfigImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.monitoring.impl.ScriptConfigImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.monitoring.impl.ScriptConfigImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.auth.impl.OAuth2ServerAuthenticationHandlerResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.auth.impl.OAuth2ServerAuthenticationHandlerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.auth.impl.OAuth2ServerAuthenticationHandlerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.auth.impl.OAuth2ServerAuthenticationHandlerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.impl.AccessTokenCleanupTaskResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.impl.AccessTokenCleanupTaskResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.impl.AccessTokenCleanupTaskResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.impl.AccessTokenCleanupTaskResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.impl.OAuth2ClientRevocationServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.impl.OAuth2ClientRevocationServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.impl.OAuth2ClientRevocationServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.impl.OAuth2ClientRevocationServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.impl.OAuth2RevocationEndpointServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.impl.OAuth2RevocationEndpointServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.impl.OAuth2RevocationEndpointServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.impl.OAuth2RevocationEndpointServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.impl.OAuth2TokenEndpointServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.impl.OAuth2TokenEndpointServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.impl.OAuth2TokenEndpointServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.impl.OAuth2TokenEndpointServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.impl.OAuth2TokenRevocationServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.impl.OAuth2TokenRevocationServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.impl.OAuth2TokenRevocationServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.impl.OAuth2TokenRevocationServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.offloading.impl.OffloadingConfiguratorResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.offloading.impl.OffloadingConfiguratorResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.offloading.impl.OffloadingConfiguratorResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.offloading.impl.OffloadingConfiguratorResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.offloading.impl.OffloadingJobClonerResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.offloading.impl.OffloadingJobClonerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.offloading.impl.OffloadingJobClonerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.offloading.impl.OffloadingJobClonerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.offloading.impl.OffloadingJobOffloaderResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.offloading.impl.OffloadingJobOffloaderResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.offloading.impl.OffloadingJobOffloaderResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.offloading.impl.OffloadingJobOffloaderResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.offloading.impl.transporter.OffloadingAgentManagerResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.offloading.impl.transporter.OffloadingAgentManagerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.offloading.impl.transporter.OffloadingAgentManagerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.offloading.impl.transporter.OffloadingAgentManagerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.offloading.impl.transporter.OffloadingDefaultTransporterResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.offloading.impl.transporter.OffloadingDefaultTransporterResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.offloading.impl.transporter.OffloadingDefaultTransporterResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.offloading.impl.transporter.OffloadingDefaultTransporterResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.omnisearch.impl.core.OmniSearchServiceImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.omnisearch.impl.core.OmniSearchServiceImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.omnisearch.impl.core.OmniSearchServiceImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.omnisearch.impl.core.OmniSearchServiceImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.optout.impl.OptOutServiceImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.optout.impl.OptOutServiceImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.optout.impl.OptOutServiceImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.optout.impl.OptOutServiceImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.queries.impl.hc.AsyncIndexHealthCheckResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.queries.impl.hc.AsyncIndexHealthCheckResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.queries.impl.hc.AsyncIndexHealthCheckResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.queries.impl.hc.AsyncIndexHealthCheckResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.queries.impl.hc.LargeIndexHealthCheckResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.queries.impl.hc.LargeIndexHealthCheckResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.queries.impl.hc.LargeIndexHealthCheckResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.queries.impl.hc.LargeIndexHealthCheckResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.queries.impl.hc.QueriesStatusHealthCheckResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.queries.impl.hc.QueriesStatusHealthCheckResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.queries.impl.hc.QueriesStatusHealthCheckResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.queries.impl.hc.QueriesStatusHealthCheckResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.queries.impl.hc.QueryHealthCheckMetricsResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.queries.impl.hc.QueryHealthCheckMetricsResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.queries.impl.hc.QueryHealthCheckMetricsResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.queries.impl.hc.QueryHealthCheckMetricsResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.queries.impl.hc.QueryLimitsHealthCheckResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.queries.impl.hc.QueryLimitsHealthCheckResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.queries.impl.hc.QueryLimitsHealthCheckResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.queries.impl.hc.QueryLimitsHealthCheckResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.replication.hc.impl.ReplicationQueueHealthCheckResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.replication.hc.impl.ReplicationQueueHealthCheckResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.replication.hc.impl.ReplicationQueueHealthCheckResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.replication.hc.impl.ReplicationQueueHealthCheckResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.replication.hc.impl.ReplicationTransportUsersHealthCheckResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.replication.hc.impl.ReplicationTransportUsersHealthCheckResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.replication.hc.impl.ReplicationTransportUsersHealthCheckResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.replication.hc.impl.ReplicationTransportUsersHealthCheckResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.AuthorizableNodeNameHealthCheckResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.AuthorizableNodeNameHealthCheckResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.AuthorizableNodeNameHealthCheckResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.AuthorizableNodeNameHealthCheckResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.content.sling.SlingContentHealthCheckResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.content.sling.SlingContentHealthCheckResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.content.sling.SlingContentHealthCheckResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.content.sling.SlingContentHealthCheckResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.ContinuousRGCHealthCheckResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.ContinuousRGCHealthCheckResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.ContinuousRGCHealthCheckResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.ContinuousRGCHealthCheckResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.DefaultAccessUserProfileHealthCheckResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.DefaultAccessUserProfileHealthCheckResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.DefaultAccessUserProfileHealthCheckResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.DefaultAccessUserProfileHealthCheckResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.DefaultLoginsHealthCheckResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.DefaultLoginsHealthCheckResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.DefaultLoginsHealthCheckResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.DefaultLoginsHealthCheckResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.DiskSpaceHealthCheckResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.DiskSpaceHealthCheckResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.DiskSpaceHealthCheckResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.DiskSpaceHealthCheckResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.ObservationQueueLengthHealthCheckResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.ObservationQueueLengthHealthCheckResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.ObservationQueueLengthHealthCheckResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.ObservationQueueLengthHealthCheckResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.impl.CommitStatsConfigResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.impl.CommitStatsConfigResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.impl.CommitStatsConfigResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.impl.CommitStatsConfigResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.ServiceUserConfigurationResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.ServiceUserConfigurationResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.ServiceUserConfigurationResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.ServiceUserConfigurationResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.requests.logging.impl.hc.RequestsStatusHealthCheckImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.requests.logging.impl.hc.RequestsStatusHealthCheckImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.requests.logging.impl.hc.RequestsStatusHealthCheckImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.requests.logging.impl.hc.RequestsStatusHealthCheckImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.resourcestatus.impl.CompositeStatusTypeResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.resourcestatus.impl.CompositeStatusTypeResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.resourcestatus.impl.CompositeStatusTypeResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.resourcestatus.impl.CompositeStatusTypeResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.resourcestatus.impl.StatusResourceProviderImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.resourcestatus.impl.StatusResourceProviderImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.resourcestatus.impl.StatusResourceProviderImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.resourcestatus.impl.StatusResourceProviderImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.rest.assets.impl.AssetContentDispositionFilterResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.rest.assets.impl.AssetContentDispositionFilterResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.rest.assets.impl.AssetContentDispositionFilterResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.rest.assets.impl.AssetContentDispositionFilterResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.rest.impl.ApiEndpointResourceProviderFactoryImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.rest.impl.ApiEndpointResourceProviderFactoryImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.rest.impl.ApiEndpointResourceProviderFactoryImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.rest.impl.ApiEndpointResourceProviderFactoryImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.rest.impl.servlet.DefaultGETServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.rest.impl.servlet.DefaultGETServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.rest.impl.servlet.DefaultGETServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.rest.impl.servlet.DefaultGETServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.security.user.ui.internal.servlets.SSLConfigurationServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.security.user.ui.internal.servlets.SSLConfigurationServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.security.user.ui.internal.servlets.SSLConfigurationServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.security.user.ui.internal.servlets.SSLConfigurationServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.security.user.UserPropertiesServiceResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.security.user.UserPropertiesServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.security.user.UserPropertiesServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.security.user.UserPropertiesServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.socialgraph.impl.SocialGraphFactoryImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.socialgraph.impl.SocialGraphFactoryImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.socialgraph.impl.SocialGraphFactoryImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.socialgraph.impl.SocialGraphFactoryImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.system.monitoring.impl.SystemStatsMBeanImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.system.monitoring.impl.SystemStatsMBeanImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.system.monitoring.impl.SystemStatsMBeanImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.system.monitoring.impl.SystemStatsMBeanImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.taskmanagement.impl.jcr.TaskAdapterFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.taskmanagement.impl.jcr.TaskAdapterFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.taskmanagement.impl.jcr.TaskAdapterFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.taskmanagement.impl.jcr.TaskAdapterFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.taskmanagement.impl.jcr.TaskArchiveServiceResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.taskmanagement.impl.jcr.TaskArchiveServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.taskmanagement.impl.jcr.TaskArchiveServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.taskmanagement.impl.jcr.TaskArchiveServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.taskmanagement.impl.purge.TaskPurgeMaintenanceTaskResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.taskmanagement.impl.purge.TaskPurgeMaintenanceTaskResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.taskmanagement.impl.purge.TaskPurgeMaintenanceTaskResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.taskmanagement.impl.purge.TaskPurgeMaintenanceTaskResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.taskmanagement.impl.service.TaskManagerAdapterFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.taskmanagement.impl.service.TaskManagerAdapterFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.taskmanagement.impl.service.TaskManagerAdapterFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.taskmanagement.impl.service.TaskManagerAdapterFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.threaddump.ThreadDumpCollectorResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.threaddump.ThreadDumpCollectorResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.threaddump.ThreadDumpCollectorResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.threaddump.ThreadDumpCollectorResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.translation.connector.msft.core.impl.MicrosoftTranslationServiceFactoryImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.translation.connector.msft.core.impl.MicrosoftTranslationServiceFactoryImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.translation.connector.msft.core.impl.MicrosoftTranslationServiceFactoryImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.translation.connector.msft.core.impl.MicrosoftTranslationServiceFactoryImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.translation.core.impl.TranslationManagerImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.translation.core.impl.TranslationManagerImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.translation.core.impl.TranslationManagerImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.translation.core.impl.TranslationManagerImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.ui.clientlibs.impl.HtmlLibraryManagerImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.ui.clientlibs.impl.HtmlLibraryManagerImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.ui.clientlibs.impl.HtmlLibraryManagerImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.ui.clientlibs.impl.HtmlLibraryManagerImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.console.frags.WorkflowWithdrawFeatureResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.console.frags.WorkflowWithdrawFeatureResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.console.frags.WorkflowWithdrawFeatureResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.console.frags.WorkflowWithdrawFeatureResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.console.publish.WorkflowPublishEventServiceResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.console.publish.WorkflowPublishEventServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.console.publish.WorkflowPublishEventServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.console.publish.WorkflowPublishEventServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.jcr.WorkflowBucketManagerResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.jcr.WorkflowBucketManagerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.jcr.WorkflowBucketManagerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.jcr.WorkflowBucketManagerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.job.ExternalProcessJobHandlerResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.job.ExternalProcessJobHandlerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.job.ExternalProcessJobHandlerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.job.ExternalProcessJobHandlerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.job.JobHandlerResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.job.JobHandlerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.job.JobHandlerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.job.JobHandlerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.offloading.WorkflowOffloadingJobConsumerResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.offloading.WorkflowOffloadingJobConsumerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.offloading.WorkflowOffloadingJobConsumerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.offloading.WorkflowOffloadingJobConsumerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.PayloadMapCacheResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.PayloadMapCacheResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.PayloadMapCacheResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.PayloadMapCacheResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.payloadmap.PayloadMoveListenerResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.payloadmap.PayloadMoveListenerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.payloadmap.PayloadMoveListenerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.payloadmap.PayloadMoveListenerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.WorkflowConfigResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.WorkflowConfigResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.WorkflowConfigResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.WorkflowConfigResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.WorkflowSessionFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.WorkflowSessionFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.WorkflowSessionFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.WorkflowSessionFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.purge.SchedulerResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.purge.SchedulerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.purge.SchedulerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.purge.SchedulerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.octopus.ncomm.bootstrapResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.octopus.ncomm.bootstrapResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.octopus.ncomm.bootstrapResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.octopus.ncomm.bootstrapResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.social.integrations.livefyre.user.pingforpull.impl.PingPullServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.social.integrations.livefyre.user.pingforpull.impl.PingPullServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.social.integrations.livefyre.user.pingforpull.impl.PingPullServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.social.integrations.livefyre.user.pingforpull.impl.PingPullServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.xmp.worker.files.ncomm.XMPFilesNCommResource> spConfigmgrApiSystemConsoleConfigMgrCom.adobe.xmp.worker.files.ncomm.XMPFilesNCommResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.adobe.xmp.worker.files.ncomm.XMPFilesNCommResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.adobe.xmp.worker.files.ncomm.XMPFilesNCommResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.commons.datasource.jdbcpool.JdbcPoolServiceResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.commons.datasource.jdbcpool.JdbcPoolServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.commons.datasource.jdbcpool.JdbcPoolServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.commons.datasource.jdbcpool.JdbcPoolServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.commons.httpclientResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.commons.httpclientResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.commons.httpclientResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.commons.httpclientResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.impl.StorePropertiesChangeListenerResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.impl.StorePropertiesChangeListenerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.impl.StorePropertiesChangeListenerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.impl.StorePropertiesChangeListenerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.sitecatalyst.impl.exporter.ClassificationsExporterResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.sitecatalyst.impl.exporter.ClassificationsExporterResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.sitecatalyst.impl.exporter.ClassificationsExporterResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.sitecatalyst.impl.exporter.ClassificationsExporterResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.sitecatalyst.impl.importer.ReportImporterResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.sitecatalyst.impl.importer.ReportImporterResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.sitecatalyst.impl.importer.ReportImporterResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.sitecatalyst.impl.importer.ReportImporterResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.sitecatalyst.impl.SitecatalystAdapterFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.sitecatalyst.impl.SitecatalystAdapterFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.sitecatalyst.impl.SitecatalystAdapterFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.sitecatalyst.impl.SitecatalystAdapterFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.sitecatalyst.impl.SitecatalystHttpClientImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.sitecatalyst.impl.SitecatalystHttpClientImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.sitecatalyst.impl.SitecatalystHttpClientImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.sitecatalyst.impl.SitecatalystHttpClientImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.AccountOptionsUpdaterResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.AccountOptionsUpdaterResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.AccountOptionsUpdaterResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.AccountOptionsUpdaterResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.DeleteAuthorActivityListenerResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.DeleteAuthorActivityListenerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.DeleteAuthorActivityListenerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.DeleteAuthorActivityListenerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.PushAuthorCampaignPageListenerResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.PushAuthorCampaignPageListenerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.PushAuthorCampaignPageListenerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.PushAuthorCampaignPageListenerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.SegmentImporterResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.SegmentImporterResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.SegmentImporterResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.SegmentImporterResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.service.WebServiceImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.service.WebServiceImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.service.WebServiceImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.service.WebServiceImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.servlets.AdminServerServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.servlets.AdminServerServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.servlets.AdminServerServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.servlets.AdminServerServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.TestandtargetHttpClientImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.TestandtargetHttpClientImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.TestandtargetHttpClientImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.TestandtargetHttpClientImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.auth.impl.cug.CugSupportImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.auth.impl.cug.CugSupportImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.auth.impl.cug.CugSupportImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.auth.impl.cug.CugSupportImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.auth.impl.LoginSelectorHandlerResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.auth.impl.LoginSelectorHandlerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.auth.impl.LoginSelectorHandlerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.auth.impl.LoginSelectorHandlerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.commons.impl.ExternalizerImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.commons.impl.ExternalizerImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.commons.impl.ExternalizerImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.commons.impl.ExternalizerImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.commons.servlets.RootMappingServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.commons.servlets.RootMappingServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.commons.servlets.RootMappingServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.commons.servlets.RootMappingServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.compat.codeupgrade.impl.CodeUpgradeExecutionConditionCheckerResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.compat.codeupgrade.impl.CodeUpgradeExecutionConditionCheckerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.compat.codeupgrade.impl.CodeUpgradeExecutionConditionCheckerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.compat.codeupgrade.impl.CodeUpgradeExecutionConditionCheckerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.compat.codeupgrade.impl.UpgradeTaskIgnoreListResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.compat.codeupgrade.impl.UpgradeTaskIgnoreListResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.compat.codeupgrade.impl.UpgradeTaskIgnoreListResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.compat.codeupgrade.impl.UpgradeTaskIgnoreListResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.compat.codeupgrade.impl.VersionRangeTaskIgnorelistResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.compat.codeupgrade.impl.VersionRangeTaskIgnorelistResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.compat.codeupgrade.impl.VersionRangeTaskIgnorelistResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.compat.codeupgrade.impl.VersionRangeTaskIgnorelistResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.contentsync.impl.ContentSyncManagerImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.contentsync.impl.ContentSyncManagerImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.contentsync.impl.ContentSyncManagerImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.contentsync.impl.ContentSyncManagerImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.commons.handler.StandardImageHandlerResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.commons.handler.StandardImageHandlerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.commons.handler.StandardImageHandlerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.commons.handler.StandardImageHandlerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.commons.metadata.XmpFilterBlackWhiteResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.commons.metadata.XmpFilterBlackWhiteResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.commons.metadata.XmpFilterBlackWhiteResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.commons.metadata.XmpFilterBlackWhiteResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.commons.util.impl.AssetCacheImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.commons.util.impl.AssetCacheImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.commons.util.impl.AssetCacheImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.commons.util.impl.AssetCacheImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.annotation.pdf.AnnotationPdfConfigResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.annotation.pdf.AnnotationPdfConfigResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.annotation.pdf.AnnotationPdfConfigResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.annotation.pdf.AnnotationPdfConfigResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.AssetMoveListenerResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.AssetMoveListenerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.AssetMoveListenerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.AssetMoveListenerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.assethome.AssetHomePageConfigurationResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.assethome.AssetHomePageConfigurationResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.assethome.AssetHomePageConfigurationResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.assethome.AssetHomePageConfigurationResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.assetlinkshare.AdhocAssetShareProxyServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.assetlinkshare.AdhocAssetShareProxyServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.assetlinkshare.AdhocAssetShareProxyServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.assetlinkshare.AdhocAssetShareProxyServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.cache.CQBufferedImageCacheResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.cache.CQBufferedImageCacheResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.cache.CQBufferedImageCacheResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.cache.CQBufferedImageCacheResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.DamChangeEventListenerResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.DamChangeEventListenerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.DamChangeEventListenerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.DamChangeEventListenerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.DamEventPurgeServiceResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.DamEventPurgeServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.DamEventPurgeServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.DamEventPurgeServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.DamEventRecorderImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.DamEventRecorderImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.DamEventRecorderImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.DamEventRecorderImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.event.DamEventAuditListenerResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.event.DamEventAuditListenerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.event.DamEventAuditListenerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.event.DamEventAuditListenerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.ExpiryNotificationJobImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.ExpiryNotificationJobImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.ExpiryNotificationJobImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.ExpiryNotificationJobImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.foldermetadataschema.FolderMetadataSchemaFeatureFlagResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.foldermetadataschema.FolderMetadataSchemaFeatureFlagResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.foldermetadataschema.FolderMetadataSchemaFeatureFlagResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.foldermetadataschema.FolderMetadataSchemaFeatureFlagResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.gfx.CommonsGfxRendererResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.gfx.CommonsGfxRendererResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.gfx.CommonsGfxRendererResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.gfx.CommonsGfxRendererResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.handler.EPSFormatHandlerResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.handler.EPSFormatHandlerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.handler.EPSFormatHandlerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.handler.EPSFormatHandlerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.handler.IndesignFormatHandlerResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.handler.IndesignFormatHandlerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.handler.IndesignFormatHandlerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.handler.IndesignFormatHandlerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.handler.JpegHandlerResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.handler.JpegHandlerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.handler.JpegHandlerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.handler.JpegHandlerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.handler.xmp.NCommXMPHandlerResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.handler.xmp.NCommXMPHandlerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.handler.xmp.NCommXMPHandlerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.handler.xmp.NCommXMPHandlerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.jmx.AssetIndexUpdateMonitorResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.jmx.AssetIndexUpdateMonitorResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.jmx.AssetIndexUpdateMonitorResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.jmx.AssetIndexUpdateMonitorResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.jmx.AssetMigrationMBeanImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.jmx.AssetMigrationMBeanImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.jmx.AssetMigrationMBeanImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.jmx.AssetMigrationMBeanImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.jmx.AssetUpdateMonitorImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.jmx.AssetUpdateMonitorImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.jmx.AssetUpdateMonitorImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.jmx.AssetUpdateMonitorImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.jobs.metadataexport.AsyncMetadataExportConfigProviderServiceResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.jobs.metadataexport.AsyncMetadataExportConfigProviderServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.jobs.metadataexport.AsyncMetadataExportConfigProviderServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.jobs.metadataexport.AsyncMetadataExportConfigProviderServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.jobs.metadataimport.AsyncMetadataImportConfigProviderServiceResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.jobs.metadataimport.AsyncMetadataImportConfigProviderServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.jobs.metadataimport.AsyncMetadataImportConfigProviderServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.jobs.metadataimport.AsyncMetadataImportConfigProviderServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.lightbox.LightboxServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.lightbox.LightboxServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.lightbox.LightboxServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.lightbox.LightboxServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.metadata.editor.SelectComponentHandlerResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.metadata.editor.SelectComponentHandlerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.metadata.editor.SelectComponentHandlerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.metadata.editor.SelectComponentHandlerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.mimeType.AssetUploadRestrictionHelperResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.mimeType.AssetUploadRestrictionHelperResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.mimeType.AssetUploadRestrictionHelperResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.mimeType.AssetUploadRestrictionHelperResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.mimeType.DamMimeTypeServiceImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.mimeType.DamMimeTypeServiceImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.mimeType.DamMimeTypeServiceImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.mimeType.DamMimeTypeServiceImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.MissingMetadataNotificationJobResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.MissingMetadataNotificationJobResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.MissingMetadataNotificationJobResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.MissingMetadataNotificationJobResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.process.SendTransientWorkflowCompletedEmailProcessResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.process.SendTransientWorkflowCompletedEmailProcessResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.process.SendTransientWorkflowCompletedEmailProcessResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.process.SendTransientWorkflowCompletedEmailProcessResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.process.TextExtractionProcessResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.process.TextExtractionProcessResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.process.TextExtractionProcessResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.process.TextExtractionProcessResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.RenditionMakerImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.RenditionMakerImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.RenditionMakerImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.RenditionMakerImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.reports.ReportExportServiceResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.reports.ReportExportServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.reports.ReportExportServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.reports.ReportExportServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.reports.ReportPurgeServiceResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.reports.ReportPurgeServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.reports.ReportPurgeServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.reports.ReportPurgeServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.AssetDownloadServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.AssetDownloadServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.AssetDownloadServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.AssetDownloadServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.AssetStatusServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.AssetStatusServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.AssetStatusServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.AssetStatusServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.AssetXMPSearchServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.AssetXMPSearchServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.AssetXMPSearchServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.AssetXMPSearchServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.BatchMetadataServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.BatchMetadataServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.BatchMetadataServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.BatchMetadataServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.BinaryProviderServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.BinaryProviderServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.BinaryProviderServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.BinaryProviderServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.CollectionServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.CollectionServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.CollectionServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.CollectionServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.CollectionsServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.CollectionsServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.CollectionsServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.CollectionsServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.CompanionServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.CompanionServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.CompanionServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.CompanionServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.CreateAssetServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.CreateAssetServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.CreateAssetServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.CreateAssetServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.DamContentDispositionFilterResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.DamContentDispositionFilterResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.DamContentDispositionFilterResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.DamContentDispositionFilterResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.GuidLookupFilterResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.GuidLookupFilterResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.GuidLookupFilterResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.GuidLookupFilterResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.HealthCheckServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.HealthCheckServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.HealthCheckServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.HealthCheckServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.MetadataGetServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.MetadataGetServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.MetadataGetServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.MetadataGetServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.MultipleLicenseAcceptServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.MultipleLicenseAcceptServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.MultipleLicenseAcceptServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.MultipleLicenseAcceptServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.ResourceCollectionServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.ResourceCollectionServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.ResourceCollectionServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.ResourceCollectionServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.ui.preview.FolderPreviewUpdaterImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.ui.preview.FolderPreviewUpdaterImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.ui.preview.FolderPreviewUpdaterImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.ui.preview.FolderPreviewUpdaterImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.unzip.UnzipConfigResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.unzip.UnzipConfigResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.unzip.UnzipConfigResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.unzip.UnzipConfigResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.process.ExifToolExtractMetadataProcessResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.process.ExifToolExtractMetadataProcessResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.process.ExifToolExtractMetadataProcessResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.process.ExifToolExtractMetadataProcessResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.process.ExtractMetadataProcessResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.process.ExtractMetadataProcessResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.process.ExtractMetadataProcessResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.process.ExtractMetadataProcessResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.process.MetadataProcessorProcessResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.process.MetadataProcessorProcessResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.process.MetadataProcessorProcessResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.process.MetadataProcessorProcessResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.handler.ffmpeg.LocatorImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.handler.ffmpeg.LocatorImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.handler.ffmpeg.LocatorImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.handler.ffmpeg.LocatorImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.handler.gibson.fontmanager.impl.FontManagerServiceImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.handler.gibson.fontmanager.impl.FontManagerServiceImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.handler.gibson.fontmanager.impl.FontManagerServiceImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.handler.gibson.fontmanager.impl.FontManagerServiceImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.handler.standard.pdf.PdfHandlerResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.handler.standard.pdf.PdfHandlerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.handler.standard.pdf.PdfHandlerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.handler.standard.pdf.PdfHandlerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.handler.standard.ps.PostScriptHandlerResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.handler.standard.ps.PostScriptHandlerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.handler.standard.ps.PostScriptHandlerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.handler.standard.ps.PostScriptHandlerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.handler.standard.psd.PsdHandlerResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.handler.standard.psd.PsdHandlerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.handler.standard.psd.PsdHandlerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.handler.standard.psd.PsdHandlerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.ids.impl.IDSJobProcessorResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.ids.impl.IDSJobProcessorResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.ids.impl.IDSJobProcessorResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.ids.impl.IDSJobProcessorResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.ids.impl.IDSPoolManagerImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.ids.impl.IDSPoolManagerImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.ids.impl.IDSPoolManagerImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.ids.impl.IDSPoolManagerImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.indd.impl.handler.IndesignXMPHandlerResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.indd.impl.handler.IndesignXMPHandlerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.indd.impl.handler.IndesignXMPHandlerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.indd.impl.handler.IndesignXMPHandlerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.indd.impl.servlet.SnippetCreationServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.indd.impl.servlet.SnippetCreationServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.indd.impl.servlet.SnippetCreationServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.indd.impl.servlet.SnippetCreationServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.indd.process.INDDMediaExtractProcessResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.indd.process.INDDMediaExtractProcessResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.indd.process.INDDMediaExtractProcessResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.indd.process.INDDMediaExtractProcessResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.performance.internal.AssetPerformanceDataHandlerImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.performance.internal.AssetPerformanceDataHandlerImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.performance.internal.AssetPerformanceDataHandlerImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.performance.internal.AssetPerformanceDataHandlerImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.performance.internal.AssetPerformanceReportSyncJobResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.performance.internal.AssetPerformanceReportSyncJobResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.performance.internal.AssetPerformanceReportSyncJobResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.performance.internal.AssetPerformanceReportSyncJobResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.pim.impl.sourcing.upload.process.ProductAssetsUploadProcessResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.pim.impl.sourcing.upload.process.ProductAssetsUploadProcessResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.pim.impl.sourcing.upload.process.ProductAssetsUploadProcessResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.pim.impl.sourcing.upload.process.ProductAssetsUploadProcessResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.analytics.impl.S7damDynamicMediaConfigEventListenerResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.analytics.impl.S7damDynamicMediaConfigEventListenerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.analytics.impl.S7damDynamicMediaConfigEventListenerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.analytics.impl.S7damDynamicMediaConfigEventListenerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.analytics.impl.SiteCatalystReportRunnerResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.analytics.impl.SiteCatalystReportRunnerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.analytics.impl.SiteCatalystReportRunnerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.analytics.impl.SiteCatalystReportRunnerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.post.servlets.SetCreateHandlerResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.post.servlets.SetCreateHandlerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.post.servlets.SetCreateHandlerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.post.servlets.SetCreateHandlerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.post.servlets.SetModifyHandlerResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.post.servlets.SetModifyHandlerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.post.servlets.SetModifyHandlerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.post.servlets.SetModifyHandlerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.process.VideoThumbnailDownloadProcessResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.process.VideoThumbnailDownloadProcessResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.process.VideoThumbnailDownloadProcessResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.process.VideoThumbnailDownloadProcessResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.S7damDamChangeEventListenerResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.S7damDamChangeEventListenerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.S7damDamChangeEventListenerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.S7damDamChangeEventListenerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.servlets.S7damProductInfoServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.servlets.S7damProductInfoServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.servlets.S7damProductInfoServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.servlets.S7damProductInfoServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.video.impl.VideoProxyClientServiceImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.video.impl.VideoProxyClientServiceImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.video.impl.VideoProxyClientServiceImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.video.impl.VideoProxyClientServiceImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7APIClientImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7APIClientImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7APIClientImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7APIClientImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7AssetMimeTypeServiceImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7AssetMimeTypeServiceImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7AssetMimeTypeServiceImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7AssetMimeTypeServiceImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7ConfigurationEventListenerResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7ConfigurationEventListenerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7ConfigurationEventListenerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7ConfigurationEventListenerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7DamChangeEventListenerResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7DamChangeEventListenerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7DamChangeEventListenerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7DamChangeEventListenerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7FlashTemplatesServiceImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7FlashTemplatesServiceImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7FlashTemplatesServiceImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7FlashTemplatesServiceImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7UploadServiceImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7UploadServiceImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7UploadServiceImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7UploadServiceImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.stock.integration.impl.cache.StockCacheConfigurationServiceImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.stock.integration.impl.cache.StockCacheConfigurationServiceImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.stock.integration.impl.cache.StockCacheConfigurationServiceImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.stock.integration.impl.cache.StockCacheConfigurationServiceImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.stock.integration.impl.configuration.StockConfigurationImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.stock.integration.impl.configuration.StockConfigurationImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.stock.integration.impl.configuration.StockConfigurationImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.stock.integration.impl.configuration.StockConfigurationImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.video.impl.servlet.VideoTestServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.video.impl.servlet.VideoTestServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.video.impl.servlet.VideoTestServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.video.impl.servlet.VideoTestServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.extwidget.servlets.ImageSpriteServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.extwidget.servlets.ImageSpriteServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.extwidget.servlets.ImageSpriteServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.extwidget.servlets.ImageSpriteServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.image.internal.font.FontHelperResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.image.internal.font.FontHelperResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.image.internal.font.FontHelperResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.image.internal.font.FontHelperResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.jcrclustersupport.ClusterStartLevelControllerResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.jcrclustersupport.ClusterStartLevelControllerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.jcrclustersupport.ClusterStartLevelControllerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.jcrclustersupport.ClusterStartLevelControllerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mailer.DefaultMailServiceResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mailer.DefaultMailServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mailer.DefaultMailServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mailer.DefaultMailServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mailer.impl.CqMailingServiceResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mailer.impl.CqMailingServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mailer.impl.CqMailingServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mailer.impl.CqMailingServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mailer.impl.email.CqEmailTemplateFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mailer.impl.email.CqEmailTemplateFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mailer.impl.email.CqEmailTemplateFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mailer.impl.email.CqEmailTemplateFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mailer.impl.email.CqRetrieverTemplateFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mailer.impl.email.CqRetrieverTemplateFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mailer.impl.email.CqRetrieverTemplateFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mailer.impl.email.CqRetrieverTemplateFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.campaign.impl.IntegrationConfigImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.campaign.impl.IntegrationConfigImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.campaign.impl.IntegrationConfigImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.campaign.impl.IntegrationConfigImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.campaign.importer.PersonalizedTextHandlerFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.campaign.importer.PersonalizedTextHandlerFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.campaign.importer.PersonalizedTextHandlerFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.campaign.importer.PersonalizedTextHandlerFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.core.newsletter.NewsletterEmailServiceImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.core.newsletter.NewsletterEmailServiceImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.core.newsletter.NewsletterEmailServiceImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.core.newsletter.NewsletterEmailServiceImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.impl.MCMConfigurationResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.impl.MCMConfigurationResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.impl.MCMConfigurationResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.impl.MCMConfigurationResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.landingpage.parser.taghandlers.cta.ClickThroughComponentTagHandlerFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.landingpage.parser.taghandlers.cta.ClickThroughComponentTagHandlerFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.landingpage.parser.taghandlers.cta.ClickThroughComponentTagHandlerFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.landingpage.parser.taghandlers.cta.ClickThroughComponentTagHandlerFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.landingpage.parser.taghandlers.cta.GraphicalClickThroughComponentTagHandlerFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.landingpage.parser.taghandlers.cta.GraphicalClickThroughComponentTagHandlerFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.landingpage.parser.taghandlers.cta.GraphicalClickThroughComponentTagHandlerFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.landingpage.parser.taghandlers.cta.GraphicalClickThroughComponentTagHandlerFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.landingpage.parser.taghandlers.cta.LeadFormCTAComponentTagHandlerFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.landingpage.parser.taghandlers.cta.LeadFormCTAComponentTagHandlerFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.landingpage.parser.taghandlers.cta.LeadFormCTAComponentTagHandlerFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.landingpage.parser.taghandlers.cta.LeadFormCTAComponentTagHandlerFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.landingpage.parser.taghandlers.mbox.MBoxExperienceTagHandlerFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.landingpage.parser.taghandlers.mbox.MBoxExperienceTagHandlerFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.landingpage.parser.taghandlers.mbox.MBoxExperienceTagHandlerFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.landingpage.parser.taghandlers.mbox.MBoxExperienceTagHandlerFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.landingpage.parser.taghandlers.mbox.TargetComponentTagHandlerFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.landingpage.parser.taghandlers.mbox.TargetComponentTagHandlerFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.landingpage.parser.taghandlers.mbox.TargetComponentTagHandlerFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.landingpage.parser.taghandlers.mbox.TargetComponentTagHandlerFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.notification.impl.NotificationServiceImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.notification.impl.NotificationServiceImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.notification.impl.NotificationServiceImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.notification.impl.NotificationServiceImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.personalization.impl.servlets.TargetingConfigurationServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.personalization.impl.servlets.TargetingConfigurationServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.personalization.impl.servlets.TargetingConfigurationServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.personalization.impl.servlets.TargetingConfigurationServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.polling.importer.impl.ManagedPollConfigImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.polling.importer.impl.ManagedPollConfigImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.polling.importer.impl.ManagedPollConfigImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.polling.importer.impl.ManagedPollConfigImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.polling.importer.impl.ManagedPollingImporterImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.polling.importer.impl.ManagedPollingImporterImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.polling.importer.impl.ManagedPollingImporterImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.polling.importer.impl.ManagedPollingImporterImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.polling.importer.impl.PollingImporterImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.polling.importer.impl.PollingImporterImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.polling.importer.impl.PollingImporterImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.polling.importer.impl.PollingImporterImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.audit.ReplicationEventListenerResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.audit.ReplicationEventListenerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.audit.ReplicationEventListenerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.audit.ReplicationEventListenerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.content.StaticContentBuilderResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.content.StaticContentBuilderResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.content.StaticContentBuilderResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.content.StaticContentBuilderResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.AgentManagerImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.AgentManagerImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.AgentManagerImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.AgentManagerImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.content.durbo.BinaryLessContentBuilderResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.content.durbo.BinaryLessContentBuilderResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.content.durbo.BinaryLessContentBuilderResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.content.durbo.BinaryLessContentBuilderResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.content.durbo.DurboImportConfigurationProviderServiceResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.content.durbo.DurboImportConfigurationProviderServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.content.durbo.DurboImportConfigurationProviderServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.content.durbo.DurboImportConfigurationProviderServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.ReplicationContentFactoryProviderImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.ReplicationContentFactoryProviderImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.ReplicationContentFactoryProviderImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.ReplicationContentFactoryProviderImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.ReplicationReceiverImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.ReplicationReceiverImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.ReplicationReceiverImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.ReplicationReceiverImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.ReplicatorImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.ReplicatorImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.ReplicatorImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.ReplicatorImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.ReverseReplicatorResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.ReverseReplicatorResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.ReverseReplicatorResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.ReverseReplicatorResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.transport.BinaryLessTransportHandlerResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.transport.BinaryLessTransportHandlerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.transport.BinaryLessTransportHandlerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.transport.BinaryLessTransportHandlerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.transport.HttpResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.transport.HttpResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.transport.HttpResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.transport.HttpResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.reporting.impl.cache.CacheImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.reporting.impl.cache.CacheImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.reporting.impl.cache.CacheImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.reporting.impl.cache.CacheImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.reporting.impl.ConfigServiceImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.reporting.impl.ConfigServiceImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.reporting.impl.ConfigServiceImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.reporting.impl.ConfigServiceImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.reporting.impl.RLogAnalyzerResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.reporting.impl.RLogAnalyzerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.reporting.impl.RLogAnalyzerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.reporting.impl.RLogAnalyzerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.rewriter.linkchecker.impl.LinkCheckerImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.rewriter.linkchecker.impl.LinkCheckerImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.rewriter.linkchecker.impl.LinkCheckerImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.rewriter.linkchecker.impl.LinkCheckerImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.rewriter.linkchecker.impl.LinkCheckerTaskResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.rewriter.linkchecker.impl.LinkCheckerTaskResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.rewriter.linkchecker.impl.LinkCheckerTaskResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.rewriter.linkchecker.impl.LinkCheckerTaskResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.rewriter.linkchecker.impl.LinkCheckerTransformerFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.rewriter.linkchecker.impl.LinkCheckerTransformerFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.rewriter.linkchecker.impl.LinkCheckerTransformerFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.rewriter.linkchecker.impl.LinkCheckerTransformerFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.rewriter.linkchecker.impl.LinkInfoStorageImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.rewriter.linkchecker.impl.LinkInfoStorageImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.rewriter.linkchecker.impl.LinkInfoStorageImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.rewriter.linkchecker.impl.LinkInfoStorageImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.rewriter.processor.impl.HtmlParserFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.rewriter.processor.impl.HtmlParserFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.rewriter.processor.impl.HtmlParserFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.rewriter.processor.impl.HtmlParserFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.search.impl.builder.QueryBuilderImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.search.impl.builder.QueryBuilderImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.search.impl.builder.QueryBuilderImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.search.impl.builder.QueryBuilderImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.search.suggest.impl.SuggestionIndexManagerImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.search.suggest.impl.SuggestionIndexManagerImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.search.suggest.impl.SuggestionIndexManagerImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.search.suggest.impl.SuggestionIndexManagerImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.searchpromote.impl.PublishSearchPromoteConfigHandlerResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.searchpromote.impl.PublishSearchPromoteConfigHandlerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.searchpromote.impl.PublishSearchPromoteConfigHandlerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.searchpromote.impl.PublishSearchPromoteConfigHandlerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.searchpromote.impl.SearchPromoteServiceImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.searchpromote.impl.SearchPromoteServiceImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.searchpromote.impl.SearchPromoteServiceImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.searchpromote.impl.SearchPromoteServiceImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.security.ACLSetupResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.security.ACLSetupResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.security.ACLSetupResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.security.ACLSetupResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.statistics.impl.StatisticsServiceImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.statistics.impl.StatisticsServiceImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.statistics.impl.StatisticsServiceImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.statistics.impl.StatisticsServiceImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.tagging.impl.JcrTagManagerFactoryImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.tagging.impl.JcrTagManagerFactoryImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.tagging.impl.JcrTagManagerFactoryImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.tagging.impl.JcrTagManagerFactoryImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.tagging.impl.search.TagPredicateEvaluatorResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.tagging.impl.search.TagPredicateEvaluatorResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.tagging.impl.search.TagPredicateEvaluatorResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.tagging.impl.search.TagPredicateEvaluatorResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.tagging.impl.TagGarbageCollectorResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.tagging.impl.TagGarbageCollectorResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.tagging.impl.TagGarbageCollectorResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.tagging.impl.TagGarbageCollectorResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.contentsync.impl.handler.PagesUpdateHandlerResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.contentsync.impl.handler.PagesUpdateHandlerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.contentsync.impl.handler.PagesUpdateHandlerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.contentsync.impl.handler.PagesUpdateHandlerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.contentsync.impl.rewriter.PathRewriterTransformerFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.contentsync.impl.rewriter.PathRewriterTransformerFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.contentsync.impl.rewriter.PathRewriterTransformerFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.contentsync.impl.rewriter.PathRewriterTransformerFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.AuthoringUIModeServiceImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.AuthoringUIModeServiceImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.AuthoringUIModeServiceImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.AuthoringUIModeServiceImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.commands.WCMCommandServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.commands.WCMCommandServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.commands.WCMCommandServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.commands.WCMCommandServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.devicedetection.DeviceIdentificationModeImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.devicedetection.DeviceIdentificationModeImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.devicedetection.DeviceIdentificationModeImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.devicedetection.DeviceIdentificationModeImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.event.PageEventAuditListenerResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.event.PageEventAuditListenerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.event.PageEventAuditListenerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.event.PageEventAuditListenerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.event.PagePostProcessorResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.event.PagePostProcessorResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.event.PagePostProcessorResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.event.PagePostProcessorResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.event.RepositoryChangeEventListenerResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.event.RepositoryChangeEventListenerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.event.RepositoryChangeEventListenerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.event.RepositoryChangeEventListenerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.event.TemplatePostProcessorResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.event.TemplatePostProcessorResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.event.TemplatePostProcessorResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.event.TemplatePostProcessorResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.LanguageManagerImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.LanguageManagerImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.LanguageManagerImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.LanguageManagerImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.LinkCheckerConfigurationFactoryImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.LinkCheckerConfigurationFactoryImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.LinkCheckerConfigurationFactoryImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.LinkCheckerConfigurationFactoryImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.page.PageInfoAggregatorImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.page.PageInfoAggregatorImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.page.PageInfoAggregatorImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.page.PageInfoAggregatorImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.page.PageManagerFactoryImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.page.PageManagerFactoryImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.page.PageManagerFactoryImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.page.PageManagerFactoryImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.references.content.ContentReferenceConfigResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.references.content.ContentReferenceConfigResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.references.content.ContentReferenceConfigResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.references.content.ContentReferenceConfigResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.contentfinder.AssetViewHandlerResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.contentfinder.AssetViewHandlerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.contentfinder.AssetViewHandlerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.contentfinder.AssetViewHandlerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.contentfinder.connector.ConnectorViewHandlerResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.contentfinder.connector.ConnectorViewHandlerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.contentfinder.connector.ConnectorViewHandlerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.contentfinder.connector.ConnectorViewHandlerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.contentfinder.PageViewHandlerResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.contentfinder.PageViewHandlerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.contentfinder.PageViewHandlerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.contentfinder.PageViewHandlerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.FindReplaceServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.FindReplaceServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.FindReplaceServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.FindReplaceServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.ReferenceSearchServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.ReferenceSearchServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.ReferenceSearchServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.ReferenceSearchServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.ThumbnailServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.ThumbnailServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.ThumbnailServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.ThumbnailServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.utils.DefaultPageNameValidatorResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.utils.DefaultPageNameValidatorResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.utils.DefaultPageNameValidatorResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.utils.DefaultPageNameValidatorResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.variants.PageVariantsProviderImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.variants.PageVariantsProviderImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.variants.PageVariantsProviderImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.variants.PageVariantsProviderImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.VersionManagerImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.VersionManagerImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.VersionManagerImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.VersionManagerImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.VersionPurgeTaskResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.VersionPurgeTaskResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.VersionPurgeTaskResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.VersionPurgeTaskResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.WCMDebugFilterResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.WCMDebugFilterResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.WCMDebugFilterResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.WCMDebugFilterResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.WCMDeveloperModeFilterResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.WCMDeveloperModeFilterResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.WCMDeveloperModeFilterResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.WCMDeveloperModeFilterResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.warp.TimeWarpFilterResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.warp.TimeWarpFilterResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.warp.TimeWarpFilterResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.warp.TimeWarpFilterResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.mvt.MVTStatisticsImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.mvt.MVTStatisticsImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.mvt.MVTStatisticsImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.mvt.MVTStatisticsImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.stats.PageViewStatisticsImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.stats.PageViewStatisticsImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.stats.PageViewStatisticsImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.stats.PageViewStatisticsImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.WCMRequestFilterResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.WCMRequestFilterResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.WCMRequestFilterResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.WCMRequestFilterResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.DesignPackageImporterResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.DesignPackageImporterResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.DesignPackageImporterResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.DesignPackageImporterResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.impl.CanvasBuilderImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.impl.CanvasBuilderImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.impl.CanvasBuilderImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.impl.CanvasBuilderImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.impl.CanvasPageDeleteHandlerResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.impl.CanvasPageDeleteHandlerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.impl.CanvasPageDeleteHandlerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.impl.CanvasPageDeleteHandlerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.impl.EntryPreprocessorImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.impl.EntryPreprocessorImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.impl.EntryPreprocessorImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.impl.EntryPreprocessorImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.impl.MobileCanvasBuilderImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.impl.MobileCanvasBuilderImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.impl.MobileCanvasBuilderImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.impl.MobileCanvasBuilderImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.CanvasComponentTagHandlerFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.CanvasComponentTagHandlerFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.CanvasComponentTagHandlerFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.CanvasComponentTagHandlerFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultComponentTagHandlerFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultComponentTagHandlerFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultComponentTagHandlerFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultComponentTagHandlerFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultTagHandlerFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultTagHandlerFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultTagHandlerFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultTagHandlerFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.HeadTagHandlerFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.HeadTagHandlerFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.HeadTagHandlerFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.HeadTagHandlerFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.IFrameTagHandlerFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.IFrameTagHandlerFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.IFrameTagHandlerFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.IFrameTagHandlerFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.ImageComponentTagHandlerFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.ImageComponentTagHandlerFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.ImageComponentTagHandlerFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.ImageComponentTagHandlerFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.ImgTagHandlerFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.ImgTagHandlerFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.ImgTagHandlerFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.ImgTagHandlerFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.InlineScriptTagHandlerFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.InlineScriptTagHandlerFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.InlineScriptTagHandlerFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.InlineScriptTagHandlerFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.LinkTagHandlerFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.LinkTagHandlerFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.LinkTagHandlerFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.LinkTagHandlerFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.MetaTagHandlerFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.MetaTagHandlerFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.MetaTagHandlerFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.MetaTagHandlerFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.NonScriptTagHandlerFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.NonScriptTagHandlerFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.NonScriptTagHandlerFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.NonScriptTagHandlerFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.ParsysComponentTagHandlerFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.ParsysComponentTagHandlerFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.ParsysComponentTagHandlerFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.ParsysComponentTagHandlerFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.ScriptTagHandlerFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.ScriptTagHandlerFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.ScriptTagHandlerFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.ScriptTagHandlerFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.StyleTagHandlerFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.StyleTagHandlerFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.StyleTagHandlerFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.StyleTagHandlerFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.TextComponentTagHandlerFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.TextComponentTagHandlerFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.TextComponentTagHandlerFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.TextComponentTagHandlerFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleComponentTagHandlerFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleComponentTagHandlerFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleComponentTagHandlerFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleComponentTagHandlerFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleTagHandlerFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleTagHandlerFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleTagHandlerFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleTagHandlerFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.forms.impl.FormChooserServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.forms.impl.FormChooserServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.forms.impl.FormChooserServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.forms.impl.FormChooserServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.forms.impl.FormParagraphPostProcessorResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.forms.impl.FormParagraphPostProcessorResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.forms.impl.FormParagraphPostProcessorResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.forms.impl.FormParagraphPostProcessorResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.forms.impl.FormsHandlingServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.forms.impl.FormsHandlingServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.forms.impl.FormsHandlingServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.forms.impl.FormsHandlingServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.forms.impl.MailServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.forms.impl.MailServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.forms.impl.MailServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.forms.impl.MailServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.impl.AdaptiveImageComponentServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.impl.AdaptiveImageComponentServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.impl.AdaptiveImageComponentServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.impl.AdaptiveImageComponentServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.impl.HTTPAuthHandlerResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.impl.HTTPAuthHandlerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.impl.HTTPAuthHandlerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.impl.HTTPAuthHandlerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.impl.PageImpressionsTrackerResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.impl.PageImpressionsTrackerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.impl.PageImpressionsTrackerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.impl.PageImpressionsTrackerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.impl.PageRedirectServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.impl.PageRedirectServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.impl.PageRedirectServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.impl.PageRedirectServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.security.impl.DefaultAttachmentTypeBlacklistServiceResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.security.impl.DefaultAttachmentTypeBlacklistServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.security.impl.DefaultAttachmentTypeBlacklistServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.security.impl.DefaultAttachmentTypeBlacklistServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.security.impl.SaferSlingPostValidatorImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.security.impl.SaferSlingPostValidatorImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.security.impl.SaferSlingPostValidatorImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.security.impl.SaferSlingPostValidatorImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.mobile.core.impl.device.DeviceInfoTransformerFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.mobile.core.impl.device.DeviceInfoTransformerFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.mobile.core.impl.device.DeviceInfoTransformerFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.mobile.core.impl.device.DeviceInfoTransformerFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.mobile.core.impl.redirect.RedirectFilterResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.mobile.core.impl.redirect.RedirectFilterResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.mobile.core.impl.redirect.RedirectFilterResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.mobile.core.impl.redirect.RedirectFilterResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.ContentCopyActionFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.ContentCopyActionFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.ContentCopyActionFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.ContentCopyActionFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.ContentDeleteActionFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.ContentDeleteActionFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.ContentDeleteActionFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.ContentDeleteActionFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.ContentUpdateActionFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.ContentUpdateActionFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.ContentUpdateActionFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.ContentUpdateActionFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.OrderChildrenActionFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.OrderChildrenActionFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.OrderChildrenActionFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.OrderChildrenActionFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.PageMoveActionFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.PageMoveActionFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.PageMoveActionFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.PageMoveActionFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.ReferencesUpdateActionFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.ReferencesUpdateActionFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.ReferencesUpdateActionFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.ReferencesUpdateActionFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.VersionCopyActionFactoryResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.VersionCopyActionFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.VersionCopyActionFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.VersionCopyActionFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.LiveRelationshipManagerImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.LiveRelationshipManagerImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.LiveRelationshipManagerImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.LiveRelationshipManagerImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.RolloutManagerImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.RolloutManagerImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.RolloutManagerImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.RolloutManagerImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.servlets.AuditLogServletResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.servlets.AuditLogServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.servlets.AuditLogServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.servlets.AuditLogServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.notification.email.impl.EmailChannelResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.notification.email.impl.EmailChannelResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.notification.email.impl.EmailChannelResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.notification.email.impl.EmailChannelResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.notification.impl.NotificationManagerImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.notification.impl.NotificationManagerImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.notification.impl.NotificationManagerImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.notification.impl.NotificationManagerImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.scripting.impl.BVPManagerResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.scripting.impl.BVPManagerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.scripting.impl.BVPManagerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.scripting.impl.BVPManagerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.undo.UndoConfigResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.undo.UndoConfigResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.undo.UndoConfigResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.undo.UndoConfigResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.webservicesupport.impl.ReplicationEventListenerResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.webservicesupport.impl.ReplicationEventListenerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.webservicesupport.impl.ReplicationEventListenerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.webservicesupport.impl.ReplicationEventListenerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.workflow.impl.WcmWorkflowServiceImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.workflow.impl.WcmWorkflowServiceImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.workflow.impl.WcmWorkflowServiceImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.workflow.impl.WcmWorkflowServiceImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.workflow.impl.WorkflowPackageInfoProviderResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.workflow.impl.WorkflowPackageInfoProviderResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.workflow.impl.WorkflowPackageInfoProviderResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.workflow.impl.WorkflowPackageInfoProviderResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.widget.impl.HtmlLibraryManagerImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.widget.impl.HtmlLibraryManagerImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.widget.impl.HtmlLibraryManagerImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.widget.impl.HtmlLibraryManagerImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.widget.impl.WidgetExtensionProviderImplResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.widget.impl.WidgetExtensionProviderImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.widget.impl.WidgetExtensionProviderImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.widget.impl.WidgetExtensionProviderImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.workflow.impl.email.EMailNotificationServiceResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.workflow.impl.email.EMailNotificationServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.workflow.impl.email.EMailNotificationServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.workflow.impl.email.EMailNotificationServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.workflow.impl.email.TaskEMailNotificationServiceResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.workflow.impl.email.TaskEMailNotificationServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.workflow.impl.email.TaskEMailNotificationServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.cq.workflow.impl.email.TaskEMailNotificationServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.crx.security.token.impl.impl.TokenAuthenticationHandlerResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.crx.security.token.impl.impl.TokenAuthenticationHandlerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.crx.security.token.impl.impl.TokenAuthenticationHandlerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.crx.security.token.impl.impl.TokenAuthenticationHandlerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrCom.day.crx.security.token.impl.TokenCleanupTaskResource> spConfigmgrApiSystemConsoleConfigMgrCom.day.crx.security.token.impl.TokenCleanupTaskResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrCom.day.crx.security.token.impl.TokenCleanupTaskResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrCom.day.crx.security.token.impl.TokenCleanupTaskResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrGuide Localization ServiceResource> spConfigmgrApiSystemConsoleConfigMgrGuide Localization ServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrGuide Localization ServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrGuide Localization ServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrMessagingUserComponentFactoryResource> spConfigmgrApiSystemConsoleConfigMgrMessagingUserComponentFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrMessagingUserComponentFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrMessagingUserComponentFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.aries.jmx.framework.StateConfigResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.aries.jmx.framework.StateConfigResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.aries.jmx.framework.StateConfigResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.aries.jmx.framework.StateConfigResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.eventadmin.impl.EventAdminResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.eventadmin.impl.EventAdminResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.eventadmin.impl.EventAdminResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.eventadmin.impl.EventAdminResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.httpResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.httpResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.httpResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.httpResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.http.sslfilter.SslFilterResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.http.sslfilter.SslFilterResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.http.sslfilter.SslFilterResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.http.sslfilter.SslFilterResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.jaas.Configuration.factoryResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.jaas.Configuration.factoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.jaas.Configuration.factoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.jaas.Configuration.factoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.jaas.ConfigurationSpiResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.jaas.ConfigurationSpiResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.jaas.ConfigurationSpiResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.jaas.ConfigurationSpiResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.scr.ScrServiceResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.scr.ScrServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.scr.ScrServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.scr.ScrServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.impl.ComponentsCheckResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.impl.ComponentsCheckResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.impl.ComponentsCheckResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.impl.ComponentsCheckResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.impl.FrameworkStartCheckResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.impl.FrameworkStartCheckResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.impl.FrameworkStartCheckResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.impl.FrameworkStartCheckResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.impl.ServicesCheckResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.impl.ServicesCheckResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.impl.ServicesCheckResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.impl.ServicesCheckResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.impl.servlet.SystemAliveServletResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.impl.servlet.SystemAliveServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.impl.servlet.SystemAliveServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.impl.servlet.SystemAliveServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.impl.servlet.SystemReadyServletResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.impl.servlet.SystemReadyServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.impl.servlet.SystemReadyServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.impl.servlet.SystemReadyServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.SystemReadyMonitorResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.SystemReadyMonitorResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.SystemReadyMonitorResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.SystemReadyMonitorResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.webconsole.internal.servlet.OsgiManagerResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.webconsole.internal.servlet.OsgiManagerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.webconsole.internal.servlet.OsgiManagerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.webconsole.internal.servlet.OsgiManagerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.webconsole.plugins.event.internal.PluginServletResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.webconsole.plugins.event.internal.PluginServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.webconsole.plugins.event.internal.PluginServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.webconsole.plugins.event.internal.PluginServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.webconsole.plugins.memoryusage.internal.MemoryUsageConfiguratorResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.webconsole.plugins.memoryusage.internal.MemoryUsageConfiguratorResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.webconsole.plugins.memoryusage.internal.MemoryUsageConfiguratorResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.webconsole.plugins.memoryusage.internal.MemoryUsageConfiguratorResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.http.proxyconfiguratorResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.http.proxyconfiguratorResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.http.proxyconfiguratorResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.http.proxyconfiguratorResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreTextProviderServiceResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreTextProviderServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreTextProviderServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreTextProviderServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.blob.datastore.FileDataStoreResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.blob.datastore.FileDataStoreResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.blob.datastore.FileDataStoreResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.blob.datastore.FileDataStoreResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreServiceResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreServicePresetResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreServicePresetResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreServicePresetResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreServicePresetResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.document.secondary.SecondaryStoreCacheServiceResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.document.secondary.SecondaryStoreCacheServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.document.secondary.SecondaryStoreCacheServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.document.secondary.SecondaryStoreCacheServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.AsyncIndexerServiceResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.AsyncIndexerServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.AsyncIndexerServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.AsyncIndexerServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexProviderServiceResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexProviderServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexProviderServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexProviderServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.EmbeddedSolrServerConfigurationProviderResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.EmbeddedSolrServerConfigurationProviderResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.EmbeddedSolrServerConfigurationProviderResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.EmbeddedSolrServerConfigurationProviderResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.NodeStateSolrServersObserverServiceResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.NodeStateSolrServersObserverServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.NodeStateSolrServersObserverServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.NodeStateSolrServersObserverServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.OakSolrConfigurationProviderServiceResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.OakSolrConfigurationProviderServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.OakSolrConfigurationProviderServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.OakSolrConfigurationProviderServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.RemoteSolrServerConfigurationProviderResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.RemoteSolrServerConfigurationProviderResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.RemoteSolrServerConfigurationProviderResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.RemoteSolrServerConfigurationProviderResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrQueryIndexProviderServiceResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrQueryIndexProviderServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrQueryIndexProviderServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrQueryIndexProviderServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrServerProviderServiceResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrServerProviderServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrServerProviderServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrServerProviderServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.metric.StatisticsProviderFactoryResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.metric.StatisticsProviderFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.metric.StatisticsProviderFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.metric.StatisticsProviderFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.observation.ChangeCollectorProviderResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.observation.ChangeCollectorProviderResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.observation.ChangeCollectorProviderResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.observation.ChangeCollectorProviderResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.query.QueryEngineSettingsServiceResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.query.QueryEngineSettingsServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.query.QueryEngineSettingsServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.query.QueryEngineSettingsServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.authentication.AuthenticationConfigurationImplResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.authentication.AuthenticationConfigurationImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.authentication.AuthenticationConfigurationImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.authentication.AuthenticationConfigurationImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.authentication.ldap.impl.LdapIdentityProviderResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.authentication.ldap.impl.LdapIdentityProviderResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.authentication.ldap.impl.LdapIdentityProviderResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.authentication.ldap.impl.LdapIdentityProviderResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.authentication.token.TokenConfigurationImplResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.authentication.token.TokenConfigurationImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.authentication.token.TokenConfigurationImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.authentication.token.TokenConfigurationImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.authorization.AuthorizationConfigurationImplResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.authorization.AuthorizationConfigurationImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.authorization.AuthorizationConfigurationImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.authorization.AuthorizationConfigurationImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.internal.SecurityProviderRegistrationResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.internal.SecurityProviderRegistrationResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.internal.SecurityProviderRegistrationResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.internal.SecurityProviderRegistrationResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.user.RandomAuthorizableNodeNameResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.user.RandomAuthorizableNodeNameResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.user.RandomAuthorizableNodeNameResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.user.RandomAuthorizableNodeNameResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.user.UserConfigurationImplResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.user.UserConfigurationImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.user.UserConfigurationImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.user.UserConfigurationImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.segment.azure.AzureSegmentStoreServiceResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.segment.azure.AzureSegmentStoreServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.segment.azure.AzureSegmentStoreServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.segment.azure.AzureSegmentStoreServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.segment.SegmentNodeStoreFactoryResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.segment.SegmentNodeStoreFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.segment.SegmentNodeStoreFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.segment.SegmentNodeStoreFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.segment.SegmentNodeStoreMonitorServiceResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.segment.SegmentNodeStoreMonitorServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.segment.SegmentNodeStoreMonitorServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.segment.SegmentNodeStoreMonitorServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.segment.SegmentNodeStoreServiceResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.segment.SegmentNodeStoreServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.segment.SegmentNodeStoreServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.segment.SegmentNodeStoreServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.segment.standby.store.StandbyStoreServiceResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.segment.standby.store.StandbyStoreServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.segment.standby.store.StandbyStoreServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.segment.standby.store.StandbyStoreServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.authentication.external.impl.DefaultSyncHandlerResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.authentication.external.impl.DefaultSyncHandlerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.authentication.external.impl.DefaultSyncHandlerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.authentication.external.impl.DefaultSyncHandlerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.authentication.external.impl.ExternalLoginModuleFactoryResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.authentication.external.impl.ExternalLoginModuleFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.authentication.external.impl.ExternalLoginModuleFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.authentication.external.impl.ExternalLoginModuleFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.authentication.external.impl.principal.ExternalPrincipalConfigurationResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.authentication.external.impl.principal.ExternalPrincipalConfigurationResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.authentication.external.impl.principal.ExternalPrincipalConfigurationResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.authentication.external.impl.principal.ExternalPrincipalConfigurationResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugConfigurationResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugConfigurationResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugConfigurationResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugConfigurationResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugExcludeImplResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugExcludeImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugExcludeImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugExcludeImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.user.action.DefaultAuthorizableActionProviderResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.user.action.DefaultAuthorizableActionProviderResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.user.action.DefaultAuthorizableActionProviderResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.user.action.DefaultAuthorizableActionProviderResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.vault.packaging.impl.PackagingImplResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.vault.packaging.impl.PackagingImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.vault.packaging.impl.PackagingImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.vault.packaging.impl.PackagingImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.vault.packaging.registry.impl.FSPackageRegistryResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.vault.packaging.registry.impl.FSPackageRegistryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.vault.packaging.registry.impl.FSPackageRegistryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.vault.packaging.registry.impl.FSPackageRegistryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.auth.core.impl.LogoutServletResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.auth.core.impl.LogoutServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.auth.core.impl.LogoutServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.auth.core.impl.LogoutServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.ConfigurationBindingsValueProviderResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.ConfigurationBindingsValueProviderResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.ConfigurationBindingsValueProviderResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.ConfigurationBindingsValueProviderResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.ConfigurationResolverImplResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.ConfigurationResolverImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.ConfigurationResolverImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.ConfigurationResolverImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.def.DefaultConfigurationInheritanceStrategyResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.def.DefaultConfigurationInheritanceStrategyResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.def.DefaultConfigurationInheritanceStrategyResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.def.DefaultConfigurationInheritanceStrategyResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.def.DefaultConfigurationPersistenceStrategyResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.def.DefaultConfigurationPersistenceStrategyResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.def.DefaultConfigurationPersistenceStrategyResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.def.DefaultConfigurationPersistenceStrategyResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.override.OsgiConfigurationOverrideProviderResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.override.OsgiConfigurationOverrideProviderResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.override.OsgiConfigurationOverrideProviderResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.override.OsgiConfigurationOverrideProviderResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.override.SystemPropertyConfigurationOverrideProviderResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.override.SystemPropertyConfigurationOverrideProviderResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.override.SystemPropertyConfigurationOverrideProviderResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.override.SystemPropertyConfigurationOverrideProviderResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.management.impl.ConfigurationManagementSettingsImplResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.management.impl.ConfigurationManagementSettingsImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.management.impl.ConfigurationManagementSettingsImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.management.impl.ConfigurationManagementSettingsImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.resource.impl.def.DefaultConfigurationResourceResolvingStrategyResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.resource.impl.def.DefaultConfigurationResourceResolvingStrategyResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.resource.impl.def.DefaultConfigurationResourceResolvingStrategyResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.resource.impl.def.DefaultConfigurationResourceResolvingStrategyResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.resource.impl.def.DefaultContextPathStrategyResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.resource.impl.def.DefaultContextPathStrategyResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.resource.impl.def.DefaultContextPathStrategyResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.resource.impl.def.DefaultContextPathStrategyResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.html.internal.TagsoupHtmlParserResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.html.internal.TagsoupHtmlParserResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.html.internal.TagsoupHtmlParserResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.html.internal.TagsoupHtmlParserResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.log.LogManagerResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.log.LogManagerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.log.LogManagerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.log.LogManagerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.log.LogManager.factory.configResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.log.LogManager.factory.configResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.log.LogManager.factory.configResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.log.LogManager.factory.configResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.log.LogManager.factory.writerResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.log.LogManager.factory.writerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.log.LogManager.factory.writerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.log.LogManager.factory.writerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.metrics.internal.LogReporterResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.metrics.internal.LogReporterResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.metrics.internal.LogReporterResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.metrics.internal.LogReporterResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.metrics.rrd4j.impl.CodahaleMetricsReporterResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.metrics.rrd4j.impl.CodahaleMetricsReporterResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.metrics.rrd4j.impl.CodahaleMetricsReporterResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.metrics.rrd4j.impl.CodahaleMetricsReporterResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.mime.internal.MimeTypeServiceImplResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.mime.internal.MimeTypeServiceImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.mime.internal.MimeTypeServiceImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.mime.internal.MimeTypeServiceImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.scheduler.impl.QuartzSchedulerResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.scheduler.impl.QuartzSchedulerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.scheduler.impl.QuartzSchedulerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.scheduler.impl.QuartzSchedulerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.scheduler.impl.SchedulerHealthCheckResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.scheduler.impl.SchedulerHealthCheckResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.scheduler.impl.SchedulerHealthCheckResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.scheduler.impl.SchedulerHealthCheckResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.threads.impl.DefaultThreadPool.factoryResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.threads.impl.DefaultThreadPool.factoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.threads.impl.DefaultThreadPool.factoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.threads.impl.DefaultThreadPool.factoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.datasource.DataSourceFactoryResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.datasource.DataSourceFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.datasource.DataSourceFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.datasource.DataSourceFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.datasource.JNDIDataSourceFactoryResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.datasource.JNDIDataSourceFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.datasource.JNDIDataSourceFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.datasource.JNDIDataSourceFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.discovery.oak.ConfigResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.discovery.oak.ConfigResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.discovery.oak.ConfigResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.discovery.oak.ConfigResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.discovery.oak.SynchronizedClocksHealthCheckResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.discovery.oak.SynchronizedClocksHealthCheckResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.discovery.oak.SynchronizedClocksHealthCheckResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.discovery.oak.SynchronizedClocksHealthCheckResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.ForwardDistributionAgentFactoryResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.ForwardDistributionAgentFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.ForwardDistributionAgentFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.ForwardDistributionAgentFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.PrivilegeDistributionRequestAuthorizationStrategyFactoryResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.PrivilegeDistributionRequestAuthorizationStrategyFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.PrivilegeDistributionRequestAuthorizationStrategyFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.PrivilegeDistributionRequestAuthorizationStrategyFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.QueueDistributionAgentFactoryResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.QueueDistributionAgentFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.QueueDistributionAgentFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.QueueDistributionAgentFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.ReverseDistributionAgentFactoryResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.ReverseDistributionAgentFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.ReverseDistributionAgentFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.ReverseDistributionAgentFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.SimpleDistributionAgentFactoryResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.SimpleDistributionAgentFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.SimpleDistributionAgentFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.SimpleDistributionAgentFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.SyncDistributionAgentFactoryResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.SyncDistributionAgentFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.SyncDistributionAgentFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.SyncDistributionAgentFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.monitor.DistributionQueueHealthCheckResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.monitor.DistributionQueueHealthCheckResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.monitor.DistributionQueueHealthCheckResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.monitor.DistributionQueueHealthCheckResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.exporter.AgentDistributionPackageExporterFactoryResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.exporter.AgentDistributionPackageExporterFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.exporter.AgentDistributionPackageExporterFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.exporter.AgentDistributionPackageExporterFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.exporter.LocalDistributionPackageExporterFactoryResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.exporter.LocalDistributionPackageExporterFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.exporter.LocalDistributionPackageExporterFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.exporter.LocalDistributionPackageExporterFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.exporter.RemoteDistributionPackageExporterFactoryResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.exporter.RemoteDistributionPackageExporterFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.exporter.RemoteDistributionPackageExporterFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.exporter.RemoteDistributionPackageExporterFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.importer.LocalDistributionPackageImporterFactoryResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.importer.LocalDistributionPackageImporterFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.importer.LocalDistributionPackageImporterFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.importer.LocalDistributionPackageImporterFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.importer.RemoteDistributionPackageImporterFactoryResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.importer.RemoteDistributionPackageImporterFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.importer.RemoteDistributionPackageImporterFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.importer.RemoteDistributionPackageImporterFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.importer.RepositoryDistributionPackageImporterFactoryResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.importer.RepositoryDistributionPackageImporterFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.importer.RepositoryDistributionPackageImporterFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.importer.RepositoryDistributionPackageImporterFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.resources.impl.DistributionConfigurationResourceProviderFactoryResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.resources.impl.DistributionConfigurationResourceProviderFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.resources.impl.DistributionConfigurationResourceProviderFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.resources.impl.DistributionConfigurationResourceProviderFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.resources.impl.DistributionServiceResourceProviderFactoryResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.resources.impl.DistributionServiceResourceProviderFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.resources.impl.DistributionServiceResourceProviderFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.resources.impl.DistributionServiceResourceProviderFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.serialization.impl.DistributionPackageBuilderFactoryResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.serialization.impl.DistributionPackageBuilderFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.serialization.impl.DistributionPackageBuilderFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.serialization.impl.DistributionPackageBuilderFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.serialization.impl.vlt.VaultDistributionPackageBuilderFactoryResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.serialization.impl.vlt.VaultDistributionPackageBuilderFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.serialization.impl.vlt.VaultDistributionPackageBuilderFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.serialization.impl.vlt.VaultDistributionPackageBuilderFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.transport.impl.UserCredentialsDistributionTransportSecretProviderResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.transport.impl.UserCredentialsDistributionTransportSecretProviderResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.transport.impl.UserCredentialsDistributionTransportSecretProviderResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.transport.impl.UserCredentialsDistributionTransportSecretProviderResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.DistributionEventDistributeDistributionTriggerFactoryResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.DistributionEventDistributeDistributionTriggerFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.DistributionEventDistributeDistributionTriggerFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.DistributionEventDistributeDistributionTriggerFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.JcrEventDistributionTriggerFactoryResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.JcrEventDistributionTriggerFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.JcrEventDistributionTriggerFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.JcrEventDistributionTriggerFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.PersistedJcrEventDistributionTriggerFactoryResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.PersistedJcrEventDistributionTriggerFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.PersistedJcrEventDistributionTriggerFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.PersistedJcrEventDistributionTriggerFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.RemoteEventDistributionTriggerFactoryResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.RemoteEventDistributionTriggerFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.RemoteEventDistributionTriggerFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.RemoteEventDistributionTriggerFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.ResourceEventDistributionTriggerFactoryResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.ResourceEventDistributionTriggerFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.ResourceEventDistributionTriggerFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.ResourceEventDistributionTriggerFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.ScheduledDistributionTriggerFactoryResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.ScheduledDistributionTriggerFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.ScheduledDistributionTriggerFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.ScheduledDistributionTriggerFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.impl.auth.SlingAuthenticatorResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.impl.auth.SlingAuthenticatorResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.impl.auth.SlingAuthenticatorResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.impl.auth.SlingAuthenticatorResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.impl.debug.RequestProgressTrackerLogFilterResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.impl.debug.RequestProgressTrackerLogFilterResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.impl.debug.RequestProgressTrackerLogFilterResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.impl.debug.RequestProgressTrackerLogFilterResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.impl.log.RequestLoggerResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.impl.log.RequestLoggerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.impl.log.RequestLoggerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.impl.log.RequestLoggerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.impl.log.RequestLoggerServiceResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.impl.log.RequestLoggerServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.impl.log.RequestLoggerServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.impl.log.RequestLoggerServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.impl.SlingMainServletResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.impl.SlingMainServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.impl.SlingMainServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.impl.SlingMainServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.parametersResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.parametersResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.parametersResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.parametersResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.event.impl.EventingThreadPoolResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.event.impl.EventingThreadPoolResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.event.impl.EventingThreadPoolResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.event.impl.EventingThreadPoolResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.event.impl.jobs.DefaultJobManagerResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.event.impl.jobs.DefaultJobManagerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.event.impl.jobs.DefaultJobManagerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.event.impl.jobs.DefaultJobManagerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.event.impl.jobs.jcr.PersistenceHandlerResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.event.impl.jobs.jcr.PersistenceHandlerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.event.impl.jobs.jcr.PersistenceHandlerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.event.impl.jobs.jcr.PersistenceHandlerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.event.impl.jobs.JobConsumerManagerResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.event.impl.jobs.JobConsumerManagerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.event.impl.jobs.JobConsumerManagerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.event.impl.jobs.JobConsumerManagerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.event.jobs.QueueConfigurationResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.event.jobs.QueueConfigurationResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.event.jobs.QueueConfigurationResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.event.jobs.QueueConfigurationResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.extensions.webconsolesecurityprovider.internal.SlingWebConsoleSecurityProviderResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.extensions.webconsolesecurityprovider.internal.SlingWebConsoleSecurityProviderResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.extensions.webconsolesecurityprovider.internal.SlingWebConsoleSecurityProviderResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.extensions.webconsolesecurityprovider.internal.SlingWebConsoleSecurityProviderResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.featureflags.FeatureResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.featureflags.FeatureResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.featureflags.FeatureResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.featureflags.FeatureResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.featureflags.impl.ConfiguredFeatureResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.featureflags.impl.ConfiguredFeatureResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.featureflags.impl.ConfiguredFeatureResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.featureflags.impl.ConfiguredFeatureResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hapi.impl.HApiUtilImplResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hapi.impl.HApiUtilImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hapi.impl.HApiUtilImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hapi.impl.HApiUtilImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.CompositeHealthCheckResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.CompositeHealthCheckResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.CompositeHealthCheckResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.CompositeHealthCheckResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.executor.HealthCheckExecutorImplResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.executor.HealthCheckExecutorImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.executor.HealthCheckExecutorImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.executor.HealthCheckExecutorImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.JmxAttributeHealthCheckResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.JmxAttributeHealthCheckResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.JmxAttributeHealthCheckResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.JmxAttributeHealthCheckResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.ScriptableHealthCheckResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.ScriptableHealthCheckResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.ScriptableHealthCheckResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.ScriptableHealthCheckResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.servlet.HealthCheckExecutorServletResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.servlet.HealthCheckExecutorServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.servlet.HealthCheckExecutorServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.servlet.HealthCheckExecutorServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.servlet.ResultTxtVerboseSerializerResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.servlet.ResultTxtVerboseSerializerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.servlet.ResultTxtVerboseSerializerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.servlet.ResultTxtVerboseSerializerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.i18n.impl.I18NFilterResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.i18n.impl.I18NFilterResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.i18n.impl.I18NFilterResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.i18n.impl.I18NFilterResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.i18n.impl.JcrResourceBundleProviderResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.i18n.impl.JcrResourceBundleProviderResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.i18n.impl.JcrResourceBundleProviderResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.i18n.impl.JcrResourceBundleProviderResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.installer.provider.jcr.impl.JcrInstallerResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.installer.provider.jcr.impl.JcrInstallerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.installer.provider.jcr.impl.JcrInstallerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.installer.provider.jcr.impl.JcrInstallerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.base.internal.LoginAdminWhitelistResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.base.internal.LoginAdminWhitelistResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.base.internal.LoginAdminWhitelistResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.base.internal.LoginAdminWhitelistResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.base.internal.LoginAdminWhitelist.fragmentResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.base.internal.LoginAdminWhitelist.fragmentResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.base.internal.LoginAdminWhitelist.fragmentResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.base.internal.LoginAdminWhitelist.fragmentResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.davex.impl.servlets.SlingDavExServletResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.davex.impl.servlets.SlingDavExServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.davex.impl.servlets.SlingDavExServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.davex.impl.servlets.SlingDavExServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.jackrabbit.server.JndiRegistrationSupportResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.jackrabbit.server.JndiRegistrationSupportResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.jackrabbit.server.JndiRegistrationSupportResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.jackrabbit.server.JndiRegistrationSupportResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.jackrabbit.server.RmiRegistrationSupportResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.jackrabbit.server.RmiRegistrationSupportResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.jackrabbit.server.RmiRegistrationSupportResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.jackrabbit.server.RmiRegistrationSupportResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.repoinit.impl.RepositoryInitializerResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.repoinit.impl.RepositoryInitializerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.repoinit.impl.RepositoryInitializerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.repoinit.impl.RepositoryInitializerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.repoinit.RepositoryInitializerResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.repoinit.RepositoryInitializerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.repoinit.RepositoryInitializerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.repoinit.RepositoryInitializerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.resource.internal.JcrResourceResolverFactoryImplResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.resource.internal.JcrResourceResolverFactoryImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.resource.internal.JcrResourceResolverFactoryImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.resource.internal.JcrResourceResolverFactoryImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.resource.internal.JcrSystemUserValidatorResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.resource.internal.JcrSystemUserValidatorResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.resource.internal.JcrSystemUserValidatorResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.resource.internal.JcrSystemUserValidatorResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.resourcesecurity.impl.ResourceAccessGateFactoryResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.resourcesecurity.impl.ResourceAccessGateFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.resourcesecurity.impl.ResourceAccessGateFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.resourcesecurity.impl.ResourceAccessGateFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.webdav.impl.handler.DefaultHandlerServiceResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.webdav.impl.handler.DefaultHandlerServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.webdav.impl.handler.DefaultHandlerServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.webdav.impl.handler.DefaultHandlerServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.webdav.impl.handler.DirListingExportHandlerServiceResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.webdav.impl.handler.DirListingExportHandlerServiceResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.webdav.impl.handler.DirListingExportHandlerServiceResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.webdav.impl.handler.DirListingExportHandlerServiceResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.webdav.impl.servlets.SimpleWebDavServletResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.webdav.impl.servlets.SimpleWebDavServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.webdav.impl.servlets.SimpleWebDavServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.webdav.impl.servlets.SimpleWebDavServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jmx.provider.impl.JMXResourceProviderResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jmx.provider.impl.JMXResourceProviderResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jmx.provider.impl.JMXResourceProviderResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jmx.provider.impl.JMXResourceProviderResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.models.impl.ModelAdapterFactoryResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.models.impl.ModelAdapterFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.models.impl.ModelAdapterFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.models.impl.ModelAdapterFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.models.jacksonexporter.impl.ResourceModuleProviderResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.models.jacksonexporter.impl.ResourceModuleProviderResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.models.jacksonexporter.impl.ResourceModuleProviderResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.models.jacksonexporter.impl.ResourceModuleProviderResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.resource.inventory.impl.ResourceInventoryPrinterFactoryResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.resource.inventory.impl.ResourceInventoryPrinterFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.resource.inventory.impl.ResourceInventoryPrinterFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.resource.inventory.impl.ResourceInventoryPrinterFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.resourcemerger.impl.MergedResourceProviderFactoryResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.resourcemerger.impl.MergedResourceProviderFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.resourcemerger.impl.MergedResourceProviderFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.resourcemerger.impl.MergedResourceProviderFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.resourcemerger.picker.overridingResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.resourcemerger.picker.overridingResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.resourcemerger.picker.overridingResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.resourcemerger.picker.overridingResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.core.impl.ScriptCacheImplResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.core.impl.ScriptCacheImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.core.impl.ScriptCacheImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.core.impl.ScriptCacheImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.core.impl.ScriptingResourceResolverProviderImplResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.core.impl.ScriptingResourceResolverProviderImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.core.impl.ScriptingResourceResolverProviderImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.core.impl.ScriptingResourceResolverProviderImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.java.impl.JavaScriptEngineFactoryResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.java.impl.JavaScriptEngineFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.java.impl.JavaScriptEngineFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.java.impl.JavaScriptEngineFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.javascript.internal.RhinoJavaScriptEngineFactoryResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.javascript.internal.RhinoJavaScriptEngineFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.javascript.internal.RhinoJavaScriptEngineFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.javascript.internal.RhinoJavaScriptEngineFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.jsp.JspScriptEngineFactoryResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.jsp.JspScriptEngineFactoryResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.jsp.JspScriptEngineFactoryResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.jsp.JspScriptEngineFactoryResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.sightly.js.impl.jsapi.SlyBindingsValuesProviderResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.sightly.js.impl.jsapi.SlyBindingsValuesProviderResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.sightly.js.impl.jsapi.SlyBindingsValuesProviderResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.sightly.js.impl.jsapi.SlyBindingsValuesProviderResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.security.impl.ContentDispositionFilterResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.security.impl.ContentDispositionFilterResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.security.impl.ContentDispositionFilterResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.security.impl.ContentDispositionFilterResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.security.impl.ReferrerFilterResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.security.impl.ReferrerFilterResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.security.impl.ReferrerFilterResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.security.impl.ReferrerFilterResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.serviceusermapping.impl.ServiceUserMapperImplResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.serviceusermapping.impl.ServiceUserMapperImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.serviceusermapping.impl.ServiceUserMapperImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.serviceusermapping.impl.ServiceUserMapperImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl.amendedResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl.amendedResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl.amendedResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl.amendedResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.servlets.get.DefaultGetServletResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.servlets.get.DefaultGetServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.servlets.get.DefaultGetServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.servlets.get.DefaultGetServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.servlets.get.impl.version.VersionInfoServletResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.servlets.get.impl.version.VersionInfoServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.servlets.get.impl.version.VersionInfoServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.servlets.get.impl.version.VersionInfoServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.servlets.post.impl.helper.ChunkCleanUpTaskResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.servlets.post.impl.helper.ChunkCleanUpTaskResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.servlets.post.impl.helper.ChunkCleanUpTaskResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.servlets.post.impl.helper.ChunkCleanUpTaskResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.servlets.post.impl.SlingPostServletResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.servlets.post.impl.SlingPostServletResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.servlets.post.impl.SlingPostServletResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.servlets.post.impl.SlingPostServletResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.servlets.resolver.SlingServletResolverResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.servlets.resolver.SlingServletResolverResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.servlets.resolver.SlingServletResolverResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.servlets.resolver.SlingServletResolverResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.settings.impl.SlingSettingsServiceImplResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.settings.impl.SlingSettingsServiceImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.settings.impl.SlingSettingsServiceImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.settings.impl.SlingSettingsServiceImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.startupfilter.impl.StartupFilterImplResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.startupfilter.impl.StartupFilterImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.startupfilter.impl.StartupFilterImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.startupfilter.impl.StartupFilterImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.tenant.internal.TenantProviderImplResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.tenant.internal.TenantProviderImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.tenant.internal.TenantProviderImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.tenant.internal.TenantProviderImplResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.tracer.internal.LogTracerResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.tracer.internal.LogTracerResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.tracer.internal.LogTracerResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.tracer.internal.LogTracerResource);
	
	std::shared_ptr<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.xss.impl.XSSFilterImplResource> spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.xss.impl.XSSFilterImplResource = std::make_shared<ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.xss.impl.XSSFilterImplResource>();
	this->publish(spConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.xss.impl.XSSFilterImplResource);
	
}

ConfigmgrApi::~ConfigmgrApi() {}

void ConfigmgrApi::startService(int const& port) {
	std::shared_ptr<restbed::Settings> settings = std::make_shared<restbed::Settings>();
	settings->set_port(port);
	settings->set_root("/");
	
	this->start(settings);
}

void ConfigmgrApi::stopService() {
	this->stop();
}

ConfigmgrApiSystemConsoleConfigMgrAdaptive Form and Interactive Communication Web Channel ConfigurationResource::ConfigmgrApiSystemConsoleConfigMgrAdaptive Form and Interactive Communication Web Channel ConfigurationResource()
{
	this->set_path("/system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Configuration/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrAdaptive Form and Interactive Communication Web Channel ConfigurationResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrAdaptive Form and Interactive Communication Web Channel ConfigurationResource::~ConfigmgrApiSystemConsoleConfigMgrAdaptive Form and Interactive Communication Web Channel ConfigurationResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrAdaptive Form and Interactive Communication Web Channel ConfigurationResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool showPlaceholder = request->get_query_parameter("showPlaceholder", );
			const int32_t maximumCacheEntries = request->get_query_parameter("maximumCacheEntries", 0);
			const std::string afPeriodscriptingPeriodcompatversion = request->get_query_parameter("afPeriodscriptingPeriodcompatversion", "");
			const bool makeFileNameUnique = request->get_query_parameter("makeFileNameUnique", );
			const bool generatingCompliantData = request->get_query_parameter("generatingCompliantData", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrAdaptive Form and Interactive Communication Web Channel Theme ConfigurationResource::ConfigmgrApiSystemConsoleConfigMgrAdaptive Form and Interactive Communication Web Channel Theme ConfigurationResource()
{
	this->set_path("/system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Theme Configuration/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrAdaptive Form and Interactive Communication Web Channel Theme ConfigurationResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrAdaptive Form and Interactive Communication Web Channel Theme ConfigurationResource::~ConfigmgrApiSystemConsoleConfigMgrAdaptive Form and Interactive Communication Web Channel Theme ConfigurationResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrAdaptive Form and Interactive Communication Web Channel Theme ConfigurationResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrAnalytics Component Query Cache ServiceResource::ConfigmgrApiSystemConsoleConfigMgrAnalytics Component Query Cache ServiceResource()
{
	this->set_path("/system/console/configMgr/Analytics Component Query Cache Service/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrAnalytics Component Query Cache ServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrAnalytics Component Query Cache ServiceResource::~ConfigmgrApiSystemConsoleConfigMgrAnalytics Component Query Cache ServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrAnalytics Component Query Cache ServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t cqPeriodanalyticsPeriodcomponentPeriodqueryPeriodcachePeriodsize = request->get_query_parameter("cqPeriodanalyticsPeriodcomponentPeriodqueryPeriodcachePeriodsize", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrApache Sling Health Check Result HTML SerializerResource::ConfigmgrApiSystemConsoleConfigMgrApache Sling Health Check Result HTML SerializerResource()
{
	this->set_path("/system/console/configMgr/Apache Sling Health Check Result HTML Serializer/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrApache Sling Health Check Result HTML SerializerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrApache Sling Health Check Result HTML SerializerResource::~ConfigmgrApiSystemConsoleConfigMgrApache Sling Health Check Result HTML SerializerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrApache Sling Health Check Result HTML SerializerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string styleString = request->get_query_parameter("styleString", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.formsndocuments.config.AEMFormsManagerConfigurationResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.formsndocuments.config.AEMFormsManagerConfigurationResource()
{
	this->set_path("/system/console/configMgr/com.adobe.aem.formsndocuments.config.AEMFormsManagerConfiguration/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.formsndocuments.config.AEMFormsManagerConfigurationResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.formsndocuments.config.AEMFormsManagerConfigurationResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.formsndocuments.config.AEMFormsManagerConfigurationResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.formsndocuments.config.AEMFormsManagerConfigurationResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool formsManagerConfigPeriodincludeOOTBTemplates = request->get_query_parameter("formsManagerConfigPeriodincludeOOTBTemplates", );
			const bool formsManagerConfigPeriodincludeDeprecatedTemplates = request->get_query_parameter("formsManagerConfigPeriodincludeDeprecatedTemplates", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.transaction.core.impl.TransactionRecorderResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.transaction.core.impl.TransactionRecorderResource()
{
	this->set_path("/system/console/configMgr/com.adobe.aem.transaction.core.impl.TransactionRecorder/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.transaction.core.impl.TransactionRecorderResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.transaction.core.impl.TransactionRecorderResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.transaction.core.impl.TransactionRecorderResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.transaction.core.impl.TransactionRecorderResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool isTransactionRecordingEnabled = request->get_query_parameter("isTransactionRecordingEnabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.upgrade.prechecks.hc.impl.DeprecateIndexesHCResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.upgrade.prechecks.hc.impl.DeprecateIndexesHCResource()
{
	this->set_path("/system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.DeprecateIndexesHC/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.upgrade.prechecks.hc.impl.DeprecateIndexesHCResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.upgrade.prechecks.hc.impl.DeprecateIndexesHCResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.upgrade.prechecks.hc.impl.DeprecateIndexesHCResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.upgrade.prechecks.hc.impl.DeprecateIndexesHCResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string hcPeriodname = request->get_query_parameter("hcPeriodname", "");
			const std::string hcPeriodmbeanPeriodname = request->get_query_parameter("hcPeriodmbeanPeriodname", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.upgrade.prechecks.hc.impl.ReplicationAgentsDisabledHCResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.upgrade.prechecks.hc.impl.ReplicationAgentsDisabledHCResource()
{
	this->set_path("/system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.ReplicationAgentsDisabledHC/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.upgrade.prechecks.hc.impl.ReplicationAgentsDisabledHCResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.upgrade.prechecks.hc.impl.ReplicationAgentsDisabledHCResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.upgrade.prechecks.hc.impl.ReplicationAgentsDisabledHCResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.upgrade.prechecks.hc.impl.ReplicationAgentsDisabledHCResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string hcPeriodname = request->get_query_parameter("hcPeriodname", "");
			const std::string hcPeriodmbeanPeriodname = request->get_query_parameter("hcPeriodmbeanPeriodname", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.upgrade.prechecks.mbean.impl.PreUpgradeTasksMBeanImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.upgrade.prechecks.mbean.impl.PreUpgradeTasksMBeanImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.aem.upgrade.prechecks.mbean.impl.PreUpgradeTasksMBeanImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.upgrade.prechecks.mbean.impl.PreUpgradeTasksMBeanImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.upgrade.prechecks.mbean.impl.PreUpgradeTasksMBeanImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.upgrade.prechecks.mbean.impl.PreUpgradeTasksMBeanImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.upgrade.prechecks.mbean.impl.PreUpgradeTasksMBeanImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.upgrade.prechecks.tasks.impl.ConsistencyCheckTaskImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.upgrade.prechecks.tasks.impl.ConsistencyCheckTaskImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.aem.upgrade.prechecks.tasks.impl.ConsistencyCheckTaskImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.upgrade.prechecks.tasks.impl.ConsistencyCheckTaskImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.upgrade.prechecks.tasks.impl.ConsistencyCheckTaskImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.upgrade.prechecks.tasks.impl.ConsistencyCheckTaskImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.aem.upgrade.prechecks.tasks.impl.ConsistencyCheckTaskImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string rootPeriodpath = request->get_query_parameter("rootPeriodpath", "");
			const bool fixPeriodinconsistencies = request->get_query_parameter("fixPeriodinconsistencies", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.account.api.AccountManagementServiceResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.account.api.AccountManagementServiceResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.account.api.AccountManagementService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.account.api.AccountManagementServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.account.api.AccountManagementServiceResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.account.api.AccountManagementServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.account.api.AccountManagementServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t cqPeriodaccountmanagerPeriodtokenPeriodvalidityPeriodperiod = request->get_query_parameter("cqPeriodaccountmanagerPeriodtokenPeriodvalidityPeriodperiod", 0);
			const std::string cqPeriodaccountmanagerPeriodconfigPeriodrequestnewaccountPeriodmail = request->get_query_parameter("cqPeriodaccountmanagerPeriodconfigPeriodrequestnewaccountPeriodmail", "");
			const std::string cqPeriodaccountmanagerPeriodconfigPeriodrequestnewpwdPeriodmail = request->get_query_parameter("cqPeriodaccountmanagerPeriodconfigPeriodrequestnewpwdPeriodmail", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.account.impl.AccountManagementServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.account.impl.AccountManagementServletResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.account.impl.AccountManagementServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.account.impl.AccountManagementServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.account.impl.AccountManagementServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.account.impl.AccountManagementServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.account.impl.AccountManagementServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string cqPeriodaccountmanagerPeriodconfigPeriodinformnewaccountPeriodmail = request->get_query_parameter("cqPeriodaccountmanagerPeriodconfigPeriodinformnewaccountPeriodmail", "");
			const std::string cqPeriodaccountmanagerPeriodconfigPeriodinformnewpwdPeriodmail = request->get_query_parameter("cqPeriodaccountmanagerPeriodconfigPeriodinformnewpwdPeriodmail", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.address.impl.location.LocationListServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.address.impl.location.LocationListServletResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.address.impl.location.LocationListServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.address.impl.location.LocationListServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.address.impl.location.LocationListServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.address.impl.location.LocationListServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.address.impl.location.LocationListServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t cqPeriodaddressPeriodlocationPerioddefaultPeriodmaxResults = request->get_query_parameter("cqPeriodaddressPeriodlocationPerioddefaultPeriodmaxResults", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.audit.purge.DamResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.audit.purge.DamResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.audit.purge.Dam/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.audit.purge.DamResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.audit.purge.DamResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.audit.purge.DamResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.audit.purge.DamResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string auditlogPeriodrulePeriodname = request->get_query_parameter("auditlogPeriodrulePeriodname", "");
			const std::string auditlogPeriodrulePeriodcontentpath = request->get_query_parameter("auditlogPeriodrulePeriodcontentpath", "");
			const int32_t auditlogPeriodrulePeriodminimumage = request->get_query_parameter("auditlogPeriodrulePeriodminimumage", 0);
			const std::string auditlogPeriodrulePeriodtypes = request->get_query_parameter("auditlogPeriodrulePeriodtypes", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.audit.purge.PagesResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.audit.purge.PagesResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.audit.purge.Pages/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.audit.purge.PagesResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.audit.purge.PagesResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.audit.purge.PagesResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.audit.purge.PagesResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string auditlogPeriodrulePeriodname = request->get_query_parameter("auditlogPeriodrulePeriodname", "");
			const std::string auditlogPeriodrulePeriodcontentpath = request->get_query_parameter("auditlogPeriodrulePeriodcontentpath", "");
			const int32_t auditlogPeriodrulePeriodminimumage = request->get_query_parameter("auditlogPeriodrulePeriodminimumage", 0);
			const std::string auditlogPeriodrulePeriodtypes = request->get_query_parameter("auditlogPeriodrulePeriodtypes", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.audit.purge.ReplicationResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.audit.purge.ReplicationResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.audit.purge.Replication/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.audit.purge.ReplicationResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.audit.purge.ReplicationResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.audit.purge.ReplicationResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.audit.purge.ReplicationResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string auditlogPeriodrulePeriodname = request->get_query_parameter("auditlogPeriodrulePeriodname", "");
			const std::string auditlogPeriodrulePeriodcontentpath = request->get_query_parameter("auditlogPeriodrulePeriodcontentpath", "");
			const int32_t auditlogPeriodrulePeriodminimumage = request->get_query_parameter("auditlogPeriodrulePeriodminimumage", 0);
			const std::string auditlogPeriodrulePeriodtypes = request->get_query_parameter("auditlogPeriodrulePeriodtypes", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.cdn.rewriter.impl.AWSCloudFrontRewriterResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.cdn.rewriter.impl.AWSCloudFrontRewriterResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.AWSCloudFrontRewriter/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.cdn.rewriter.impl.AWSCloudFrontRewriterResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.cdn.rewriter.impl.AWSCloudFrontRewriterResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.cdn.rewriter.impl.AWSCloudFrontRewriterResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.cdn.rewriter.impl.AWSCloudFrontRewriterResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t servicePeriodranking = request->get_query_parameter("servicePeriodranking", 0);
			const std::string keypairPeriodid = request->get_query_parameter("keypairPeriodid", "");
			const std::string keypairPeriodalias = request->get_query_parameter("keypairPeriodalias", "");
			const std::string cdnPeriodrewriterPerioddistributionPerioddomain = request->get_query_parameter("cdnPeriodrewriterPerioddistributionPerioddomain", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.cdn.rewriter.impl.CDNConfigServiceImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.cdn.rewriter.impl.CDNConfigServiceImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNConfigServiceImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.cdn.rewriter.impl.CDNConfigServiceImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.cdn.rewriter.impl.CDNConfigServiceImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.cdn.rewriter.impl.CDNConfigServiceImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.cdn.rewriter.impl.CDNConfigServiceImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string cdnPeriodconfigPerioddistributionPerioddomain = request->get_query_parameter("cdnPeriodconfigPerioddistributionPerioddomain", "");
			const bool cdnPeriodconfigPeriodenablePeriodrewriting = request->get_query_parameter("cdnPeriodconfigPeriodenablePeriodrewriting", );
			const int32_t cdnPeriodconfigPeriodcdnttl = request->get_query_parameter("cdnPeriodconfigPeriodcdnttl", 0);
			const std::string cdnPeriodconfigPeriodapplicationPeriodprotocol = request->get_query_parameter("cdnPeriodconfigPeriodapplicationPeriodprotocol", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.cdn.rewriter.impl.CDNRewriterResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.cdn.rewriter.impl.CDNRewriterResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNRewriter/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.cdn.rewriter.impl.CDNRewriterResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.cdn.rewriter.impl.CDNRewriterResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.cdn.rewriter.impl.CDNRewriterResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.cdn.rewriter.impl.CDNRewriterResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t servicePeriodranking = request->get_query_parameter("servicePeriodranking", 0);
			const std::string cdnPeriodrewriterPerioddistributionPerioddomain = request->get_query_parameter("cdnPeriodrewriterPerioddistributionPerioddomain", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.cloudconfig.core.impl.ConfigurationReplicationEventHandlerResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.cloudconfig.core.impl.ConfigurationReplicationEventHandlerResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.cloudconfig.core.impl.ConfigurationReplicationEventHandler/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.cloudconfig.core.impl.ConfigurationReplicationEventHandlerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.cloudconfig.core.impl.ConfigurationReplicationEventHandlerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.cloudconfig.core.impl.ConfigurationReplicationEventHandlerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.cloudconfig.core.impl.ConfigurationReplicationEventHandlerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.impl.asset.DynamicImageHandlerResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.impl.asset.DynamicImageHandlerResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.commerce.impl.asset.DynamicImageHandler/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.impl.asset.DynamicImageHandlerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.impl.asset.DynamicImageHandlerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.impl.asset.DynamicImageHandlerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.impl.asset.DynamicImageHandlerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool cqPeriodcommercePeriodassetPeriodhandlerPeriodactive = request->get_query_parameter("cqPeriodcommercePeriodassetPeriodhandlerPeriodactive", );
			const std::string cqPeriodcommercePeriodassetPeriodhandlerPeriodname = request->get_query_parameter("cqPeriodcommercePeriodassetPeriodhandlerPeriodname", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.impl.asset.ProductAssetHandlerProviderImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.impl.asset.ProductAssetHandlerProviderImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.commerce.impl.asset.ProductAssetHandlerProviderImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.impl.asset.ProductAssetHandlerProviderImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.impl.asset.ProductAssetHandlerProviderImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.impl.asset.ProductAssetHandlerProviderImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.impl.asset.ProductAssetHandlerProviderImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string cqPeriodcommercePeriodassetPeriodhandlerPeriodfallback = request->get_query_parameter("cqPeriodcommercePeriodassetPeriodhandlerPeriodfallback", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.impl.asset.StaticImageHandlerResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.impl.asset.StaticImageHandlerResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.commerce.impl.asset.StaticImageHandler/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.impl.asset.StaticImageHandlerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.impl.asset.StaticImageHandlerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.impl.asset.StaticImageHandlerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.impl.asset.StaticImageHandlerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool cqPeriodcommercePeriodassetPeriodhandlerPeriodactive = request->get_query_parameter("cqPeriodcommercePeriodassetPeriodhandlerPeriodactive", );
			const std::string cqPeriodcommercePeriodassetPeriodhandlerPeriodname = request->get_query_parameter("cqPeriodcommercePeriodassetPeriodhandlerPeriodname", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.impl.asset.VideoHandlerResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.impl.asset.VideoHandlerResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.commerce.impl.asset.VideoHandler/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.impl.asset.VideoHandlerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.impl.asset.VideoHandlerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.impl.asset.VideoHandlerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.impl.asset.VideoHandlerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool cqPeriodcommercePeriodassetPeriodhandlerPeriodactive = request->get_query_parameter("cqPeriodcommercePeriodassetPeriodhandlerPeriodactive", );
			const std::string cqPeriodcommercePeriodassetPeriodhandlerPeriodname = request->get_query_parameter("cqPeriodcommercePeriodassetPeriodhandlerPeriodname", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.impl.promotion.PromotionManagerImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.impl.promotion.PromotionManagerImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.commerce.impl.promotion.PromotionManagerImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.impl.promotion.PromotionManagerImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.impl.promotion.PromotionManagerImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.impl.promotion.PromotionManagerImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.impl.promotion.PromotionManagerImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string cqPeriodcommercePeriodpromotionPeriodroot = request->get_query_parameter("cqPeriodcommercePeriodpromotionPeriodroot", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.pim.impl.cataloggenerator.CatalogGeneratorImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.pim.impl.cataloggenerator.CatalogGeneratorImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.commerce.pim.impl.cataloggenerator.CatalogGeneratorImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.pim.impl.cataloggenerator.CatalogGeneratorImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.pim.impl.cataloggenerator.CatalogGeneratorImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.pim.impl.cataloggenerator.CatalogGeneratorImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.pim.impl.cataloggenerator.CatalogGeneratorImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t cqPeriodcommercePeriodcataloggeneratorPeriodbucketsize = request->get_query_parameter("cqPeriodcommercePeriodcataloggeneratorPeriodbucketsize", 0);
			const std::string cqPeriodcommercePeriodcataloggeneratorPeriodbucketname = request->get_query_parameter("cqPeriodcommercePeriodcataloggeneratorPeriodbucketname", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.pim.impl.PageEventListenerResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.pim.impl.PageEventListenerResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.commerce.pim.impl.PageEventListener/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.pim.impl.PageEventListenerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.pim.impl.PageEventListenerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.pim.impl.PageEventListenerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.pim.impl.PageEventListenerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool cqPeriodcommercePeriodpageeventlistenerPeriodenabled = request->get_query_parameter("cqPeriodcommercePeriodpageeventlistenerPeriodenabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.pim.impl.productfeed.ProductFeedServiceImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.pim.impl.productfeed.ProductFeedServiceImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.commerce.pim.impl.productfeed.ProductFeedServiceImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.pim.impl.productfeed.ProductFeedServiceImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.pim.impl.productfeed.ProductFeedServiceImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.pim.impl.productfeed.ProductFeedServiceImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.commerce.pim.impl.productfeed.ProductFeedServiceImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string feed_generator_algorithm = request->get_query_parameter("feed_generator_algorithm", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.contentinsight.impl.ReportingServicesSettingsProviderResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.contentinsight.impl.ReportingServicesSettingsProviderResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.contentinsight.impl.ReportingServicesSettingsProvider/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.contentinsight.impl.ReportingServicesSettingsProviderResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.contentinsight.impl.ReportingServicesSettingsProviderResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.contentinsight.impl.ReportingServicesSettingsProviderResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.contentinsight.impl.ReportingServicesSettingsProviderResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string reportingservicesPeriodurl = request->get_query_parameter("reportingservicesPeriodurl", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.contentinsight.impl.servlets.BrightEdgeProxyServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.contentinsight.impl.servlets.BrightEdgeProxyServletResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.BrightEdgeProxyServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.contentinsight.impl.servlets.BrightEdgeProxyServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.contentinsight.impl.servlets.BrightEdgeProxyServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.contentinsight.impl.servlets.BrightEdgeProxyServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.contentinsight.impl.servlets.BrightEdgeProxyServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string brightedgePeriodurl = request->get_query_parameter("brightedgePeriodurl", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.contentinsight.impl.servlets.ReportingServicesProxyServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.contentinsight.impl.servlets.ReportingServicesProxyServletResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.ReportingServicesProxyServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.contentinsight.impl.servlets.ReportingServicesProxyServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.contentinsight.impl.servlets.ReportingServicesProxyServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.contentinsight.impl.servlets.ReportingServicesProxyServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.contentinsight.impl.servlets.ReportingServicesProxyServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.cfm.impl.component.ComponentConfigImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.cfm.impl.component.ComponentConfigImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.dam.cfm.impl.component.ComponentConfigImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.cfm.impl.component.ComponentConfigImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.cfm.impl.component.ComponentConfigImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.cfm.impl.component.ComponentConfigImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.cfm.impl.component.ComponentConfigImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string damPeriodcfmPeriodcomponentPeriodresourceType = request->get_query_parameter("damPeriodcfmPeriodcomponentPeriodresourceType", "");
			const std::string damPeriodcfmPeriodcomponentPeriodfileReferenceProp = request->get_query_parameter("damPeriodcfmPeriodcomponentPeriodfileReferenceProp", "");
			const std::string damPeriodcfmPeriodcomponentPeriodelementsProp = request->get_query_parameter("damPeriodcfmPeriodcomponentPeriodelementsProp", "");
			const std::string damPeriodcfmPeriodcomponentPeriodvariationProp = request->get_query_parameter("damPeriodcfmPeriodcomponentPeriodvariationProp", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.cfm.impl.conf.FeatureConfigImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.cfm.impl.conf.FeatureConfigImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.dam.cfm.impl.conf.FeatureConfigImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.cfm.impl.conf.FeatureConfigImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.cfm.impl.conf.FeatureConfigImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.cfm.impl.conf.FeatureConfigImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.cfm.impl.conf.FeatureConfigImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.cfm.impl.content.rewriter.AssetProcessorResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.cfm.impl.content.rewriter.AssetProcessorResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.AssetProcessor/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.cfm.impl.content.rewriter.AssetProcessorResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.cfm.impl.content.rewriter.AssetProcessorResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.cfm.impl.content.rewriter.AssetProcessorResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.cfm.impl.content.rewriter.AssetProcessorResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string pipelinePeriodtype = request->get_query_parameter("pipelinePeriodtype", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.cfm.impl.content.rewriter.ParRangeFilterResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.cfm.impl.content.rewriter.ParRangeFilterResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.ParRangeFilter/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.cfm.impl.content.rewriter.ParRangeFilterResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.cfm.impl.content.rewriter.ParRangeFilterResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.cfm.impl.content.rewriter.ParRangeFilterResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.cfm.impl.content.rewriter.ParRangeFilterResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string pipelinePeriodtype = request->get_query_parameter("pipelinePeriodtype", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.cfm.impl.content.rewriter.PayloadFilterResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.cfm.impl.content.rewriter.PayloadFilterResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.PayloadFilter/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.cfm.impl.content.rewriter.PayloadFilterResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.cfm.impl.content.rewriter.PayloadFilterResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.cfm.impl.content.rewriter.PayloadFilterResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.cfm.impl.content.rewriter.PayloadFilterResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string pipelinePeriodtype = request->get_query_parameter("pipelinePeriodtype", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.dm.process.image.PTiffManagerImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.dm.process.image.PTiffManagerImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.dam.dm.process.image.PTiffManagerImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.dm.process.image.PTiffManagerImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.dm.process.image.PTiffManagerImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.dm.process.image.PTiffManagerImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.dm.process.image.PTiffManagerImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t maxMemory = request->get_query_parameter("maxMemory", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.ips.impl.replication.trigger.ReplicateOnModifyWorkerResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.ips.impl.replication.trigger.ReplicateOnModifyWorkerResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.dam.ips.impl.replication.trigger.ReplicateOnModifyWorker/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.ips.impl.replication.trigger.ReplicateOnModifyWorkerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.ips.impl.replication.trigger.ReplicateOnModifyWorkerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.ips.impl.replication.trigger.ReplicateOnModifyWorkerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.ips.impl.replication.trigger.ReplicateOnModifyWorkerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool dmreplicateonmodifyPeriodenabled = request->get_query_parameter("dmreplicateonmodifyPeriodenabled", );
			const bool dmreplicateonmodifyPeriodforcesyncdeletes = request->get_query_parameter("dmreplicateonmodifyPeriodforcesyncdeletes", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.mac.sync.helper.impl.MACSyncClientImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.mac.sync.helper.impl.MACSyncClientImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.dam.mac.sync.helper.impl.MACSyncClientImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.mac.sync.helper.impl.MACSyncClientImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.mac.sync.helper.impl.MACSyncClientImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.mac.sync.helper.impl.MACSyncClientImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.mac.sync.helper.impl.MACSyncClientImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t comPeriodadobePerioddamPeriodmacPeriodsyncPeriodclientPeriodsoPeriodtimeout = request->get_query_parameter("comPeriodadobePerioddamPeriodmacPeriodsyncPeriodclientPeriodsoPeriodtimeout", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.mac.sync.impl.DAMSyncServiceImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.mac.sync.impl.DAMSyncServiceImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.dam.mac.sync.impl.DAMSyncServiceImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.mac.sync.impl.DAMSyncServiceImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.mac.sync.impl.DAMSyncServiceImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.mac.sync.impl.DAMSyncServiceImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.mac.sync.impl.DAMSyncServiceImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodsyncPeriodrenditions = request->get_query_parameter("comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodsyncPeriodrenditions", );
			const int32_t comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodreplicatePeriodthreadPeriodwaitPeriodms = request->get_query_parameter("comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodreplicatePeriodthreadPeriodwaitPeriodms", 0);
			const std::string comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodplatform = request->get_query_parameter("comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodplatform", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.processor.nui.impl.NuiAssetProcessorResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.processor.nui.impl.NuiAssetProcessorResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.dam.processor.nui.impl.NuiAssetProcessor/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.processor.nui.impl.NuiAssetProcessorResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.processor.nui.impl.NuiAssetProcessorResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.processor.nui.impl.NuiAssetProcessorResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.processor.nui.impl.NuiAssetProcessorResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool nuiEnabled = request->get_query_parameter("nuiEnabled", );
			const std::string nuiServiceUrl = request->get_query_parameter("nuiServiceUrl", "");
			const std::string nuiApiKey = request->get_query_parameter("nuiApiKey", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.s7imaging.impl.is.ImageServerComponentResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.s7imaging.impl.is.ImageServerComponentResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.is.ImageServerComponent/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.s7imaging.impl.is.ImageServerComponentResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.s7imaging.impl.is.ImageServerComponentResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.s7imaging.impl.is.ImageServerComponentResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.s7imaging.impl.is.ImageServerComponentResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string tcpPort = request->get_query_parameter("tcpPort", "");
			const bool allowRemoteAccess = request->get_query_parameter("allowRemoteAccess", );
			const std::string maxRenderRgnPixels = request->get_query_parameter("maxRenderRgnPixels", "");
			const std::string maxMessageSize = request->get_query_parameter("maxMessageSize", "");
			const int32_t randomAccessUrlTimeout = request->get_query_parameter("randomAccessUrlTimeout", 0);
			const int32_t workerThreads = request->get_query_parameter("workerThreads", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.s7imaging.impl.ps.PlatformServerServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.s7imaging.impl.ps.PlatformServerServletResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.ps.PlatformServerServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.s7imaging.impl.ps.PlatformServerServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.s7imaging.impl.ps.PlatformServerServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.s7imaging.impl.ps.PlatformServerServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.s7imaging.impl.ps.PlatformServerServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool cachePeriodenable = request->get_query_parameter("cachePeriodenable", );
			const int32_t cachePeriodmaxSize = request->get_query_parameter("cachePeriodmaxSize", 0);
			const int32_t cachePeriodmaxEntries = request->get_query_parameter("cachePeriodmaxEntries", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.webdav.impl.io.AssetIOHandlerResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.webdav.impl.io.AssetIOHandlerResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.AssetIOHandler/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.webdav.impl.io.AssetIOHandlerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.webdav.impl.io.AssetIOHandlerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.webdav.impl.io.AssetIOHandlerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.webdav.impl.io.AssetIOHandlerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t servicePeriodranking = request->get_query_parameter("servicePeriodranking", 0);
			const std::string pathPrefix = request->get_query_parameter("pathPrefix", "");
			const bool createVersion = request->get_query_parameter("createVersion", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.webdav.impl.io.DamWebdavVersionLinkingJobResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.webdav.impl.io.DamWebdavVersionLinkingJobResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.DamWebdavVersionLinkingJob/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.webdav.impl.io.DamWebdavVersionLinkingJobResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.webdav.impl.io.DamWebdavVersionLinkingJobResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.webdav.impl.io.DamWebdavVersionLinkingJobResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.webdav.impl.io.DamWebdavVersionLinkingJobResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodenable = request->get_query_parameter("cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodenable", );
			const int32_t cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodschedulerPeriodperiod = request->get_query_parameter("cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodschedulerPeriodperiod", 0);
			const int32_t cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodstagingPeriodtimeout = request->get_query_parameter("cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodstagingPeriodtimeout", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.webdav.impl.io.SpecialFilesHandlerResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.webdav.impl.io.SpecialFilesHandlerResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.SpecialFilesHandler/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.webdav.impl.io.SpecialFilesHandlerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.webdav.impl.io.SpecialFilesHandlerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.webdav.impl.io.SpecialFilesHandlerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dam.webdav.impl.io.SpecialFilesHandlerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.deserfw.impl.DeserializationFirewallImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.deserfw.impl.DeserializationFirewallImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.deserfw.impl.DeserializationFirewallImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.deserfw.impl.DeserializationFirewallImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.deserfw.impl.DeserializationFirewallImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.deserfw.impl.DeserializationFirewallImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.deserfw.impl.DeserializationFirewallImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string firewallPerioddeserializationPerioddiagnostics = request->get_query_parameter("firewallPerioddeserializationPerioddiagnostics", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dtm.impl.service.DTMWebServiceImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dtm.impl.service.DTMWebServiceImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.dtm.impl.service.DTMWebServiceImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dtm.impl.service.DTMWebServiceImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dtm.impl.service.DTMWebServiceImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dtm.impl.service.DTMWebServiceImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dtm.impl.service.DTMWebServiceImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t connectionPeriodtimeout = request->get_query_parameter("connectionPeriodtimeout", 0);
			const int32_t socketPeriodtimeout = request->get_query_parameter("socketPeriodtimeout", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dtm.impl.servlets.DTMDeployHookServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dtm.impl.servlets.DTMDeployHookServletResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.dtm.impl.servlets.DTMDeployHookServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dtm.impl.servlets.DTMDeployHookServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dtm.impl.servlets.DTMDeployHookServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dtm.impl.servlets.DTMDeployHookServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dtm.impl.servlets.DTMDeployHookServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dtm.reactor.impl.service.WebServiceImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dtm.reactor.impl.service.WebServiceImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.dtm.reactor.impl.service.WebServiceImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dtm.reactor.impl.service.WebServiceImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dtm.reactor.impl.service.WebServiceImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dtm.reactor.impl.service.WebServiceImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.dtm.reactor.impl.service.WebServiceImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string endpointUri = request->get_query_parameter("endpointUri", "");
			const int32_t connectionTimeout = request->get_query_parameter("connectionTimeout", 0);
			const int32_t socketTimeout = request->get_query_parameter("socketTimeout", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.experiencelog.impl.ExperienceLogConfigServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.experiencelog.impl.ExperienceLogConfigServletResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.experiencelog.impl.ExperienceLogConfigServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.experiencelog.impl.ExperienceLogConfigServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.experiencelog.impl.ExperienceLogConfigServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.experiencelog.impl.ExperienceLogConfigServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.experiencelog.impl.ExperienceLogConfigServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool enabled = request->get_query_parameter("enabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.hc.ContentPackagesHealthCheckResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.hc.ContentPackagesHealthCheckResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.hc.ContentPackagesHealthCheck/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.hc.ContentPackagesHealthCheckResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.hc.ContentPackagesHealthCheckResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.hc.ContentPackagesHealthCheckResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.hc.ContentPackagesHealthCheckResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string hcPeriodname = request->get_query_parameter("hcPeriodname", "");
			const std::string hcPeriodmbeanPeriodname = request->get_query_parameter("hcPeriodmbeanPeriodname", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.history.impl.HistoryRequestFilterResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.history.impl.HistoryRequestFilterResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.history.impl.HistoryRequestFilter/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.history.impl.HistoryRequestFilterResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.history.impl.HistoryRequestFilterResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.history.impl.HistoryRequestFilterResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.history.impl.HistoryRequestFilterResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.history.impl.HistoryServiceImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.history.impl.HistoryServiceImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.history.impl.HistoryServiceImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.history.impl.HistoryServiceImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.history.impl.HistoryServiceImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.history.impl.HistoryServiceImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.history.impl.HistoryServiceImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.inbox.impl.typeprovider.ItemTypeProviderResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.inbox.impl.typeprovider.ItemTypeProviderResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.inbox.impl.typeprovider.ItemTypeProvider/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.inbox.impl.typeprovider.ItemTypeProviderResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.inbox.impl.typeprovider.ItemTypeProviderResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.inbox.impl.typeprovider.ItemTypeProviderResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.inbox.impl.typeprovider.ItemTypeProviderResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodfailureitem = request->get_query_parameter("inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodfailureitem", "");
			const std::string inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodworkitem = request->get_query_parameter("inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodworkitem", "");
			const std::string inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodtask = request->get_query_parameter("inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodtask", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.projects.impl.servlet.ProjectImageServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.projects.impl.servlet.ProjectImageServletResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.projects.impl.servlet.ProjectImageServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.projects.impl.servlet.ProjectImageServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.projects.impl.servlet.ProjectImageServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.projects.impl.servlet.ProjectImageServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.projects.impl.servlet.ProjectImageServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string imagePeriodquality = request->get_query_parameter("imagePeriodquality", "");
			const std::string imagePeriodsupportedPeriodresolutions = request->get_query_parameter("imagePeriodsupportedPeriodresolutions", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.projects.purge.SchedulerResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.projects.purge.SchedulerResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.projects.purge.Scheduler/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.projects.purge.SchedulerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.projects.purge.SchedulerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.projects.purge.SchedulerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.projects.purge.SchedulerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string scheduledpurgePeriodname = request->get_query_parameter("scheduledpurgePeriodname", "");
			const bool scheduledpurgePeriodpurgeActive = request->get_query_parameter("scheduledpurgePeriodpurgeActive", );
			const bool scheduledpurgePeriodpurgeGroups = request->get_query_parameter("scheduledpurgePeriodpurgeGroups", );
			const bool scheduledpurgePeriodpurgeAssets = request->get_query_parameter("scheduledpurgePeriodpurgeAssets", );
			const bool scheduledpurgePeriodterminateRunningWorkflows = request->get_query_parameter("scheduledpurgePeriodterminateRunningWorkflows", );
			const int32_t scheduledpurgePerioddaysold = request->get_query_parameter("scheduledpurgePerioddaysold", 0);
			const int32_t scheduledpurgePeriodsaveThreshold = request->get_query_parameter("scheduledpurgePeriodsaveThreshold", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.scheduled.exporter.impl.ScheduledExporterImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.scheduled.exporter.impl.ScheduledExporterImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.scheduled.exporter.impl.ScheduledExporterImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.scheduled.exporter.impl.ScheduledExporterImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.scheduled.exporter.impl.ScheduledExporterImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.scheduled.exporter.impl.ScheduledExporterImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.scheduled.exporter.impl.ScheduledExporterImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string exporterPerioduser = request->get_query_parameter("exporterPerioduser", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.analytics.impl.ScreensAnalyticsServiceImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.analytics.impl.ScreensAnalyticsServiceImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.screens.analytics.impl.ScreensAnalyticsServiceImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.analytics.impl.ScreensAnalyticsServiceImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.analytics.impl.ScreensAnalyticsServiceImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.analytics.impl.ScreensAnalyticsServiceImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.analytics.impl.ScreensAnalyticsServiceImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodurl = request->get_query_parameter("comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodurl", "");
			const std::string comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodapikey = request->get_query_parameter("comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodapikey", "");
			const std::string comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodproject = request->get_query_parameter("comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodproject", "");
			const std::string comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodenvironment = request->get_query_parameter("comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodenvironment", "");
			const int32_t comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodsendFrequency = request->get_query_parameter("comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodsendFrequency", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.device.impl.DeviceServiceResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.device.impl.DeviceServiceResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.screens.device.impl.DeviceService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.device.impl.DeviceServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.device.impl.DeviceServiceResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.device.impl.DeviceServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.device.impl.DeviceServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t comPeriodadobePeriodaemPeriodscreensPeriodplayerPeriodpingfrequency = request->get_query_parameter("comPeriodadobePeriodaemPeriodscreensPeriodplayerPeriodpingfrequency", 0);
			const std::string comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodspecialchars = request->get_query_parameter("comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodspecialchars", "");
			const int32_t comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminlowercasechars = request->get_query_parameter("comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminlowercasechars", 0);
			const int32_t comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminuppercasechars = request->get_query_parameter("comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminuppercasechars", 0);
			const int32_t comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminnumberchars = request->get_query_parameter("comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminnumberchars", 0);
			const int32_t comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminspecialchars = request->get_query_parameter("comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminspecialchars", 0);
			const int32_t comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminlength = request->get_query_parameter("comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminlength", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.device.registration.impl.RegistrationServiceImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.device.registration.impl.RegistrationServiceImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.screens.device.registration.impl.RegistrationServiceImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.device.registration.impl.RegistrationServiceImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.device.registration.impl.RegistrationServiceImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.device.registration.impl.RegistrationServiceImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.device.registration.impl.RegistrationServiceImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t deviceRegistrationTimeout = request->get_query_parameter("deviceRegistrationTimeout", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.impl.handler.ChannelsUpdateHandlerResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.impl.handler.ChannelsUpdateHandlerResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.screens.impl.handler.ChannelsUpdateHandler/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.impl.handler.ChannelsUpdateHandlerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.impl.handler.ChannelsUpdateHandlerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.impl.handler.ChannelsUpdateHandlerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.impl.handler.ChannelsUpdateHandlerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.impl.jobs.DistributedDevicesStatiUpdateJobResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.impl.jobs.DistributedDevicesStatiUpdateJobResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.screens.impl.jobs.DistributedDevicesStatiUpdateJob/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.impl.jobs.DistributedDevicesStatiUpdateJobResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.impl.jobs.DistributedDevicesStatiUpdateJobResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.impl.jobs.DistributedDevicesStatiUpdateJobResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.impl.jobs.DistributedDevicesStatiUpdateJobResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string schedulerPeriodexpression = request->get_query_parameter("schedulerPeriodexpression", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.impl.remote.impl.DistributedHttpClientImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.impl.remote.impl.DistributedHttpClientImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.screens.impl.remote.impl.DistributedHttpClientImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.impl.remote.impl.DistributedHttpClientImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.impl.remote.impl.DistributedHttpClientImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.impl.remote.impl.DistributedHttpClientImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.impl.remote.impl.DistributedHttpClientImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t comPeriodadobePeriodaemPeriodscreensPeriodimplPeriodremotePeriodrequestTimeout = request->get_query_parameter("comPeriodadobePeriodaemPeriodscreensPeriodimplPeriodremotePeriodrequestTimeout", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.impl.ScreensChannelPostProcessorResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.impl.ScreensChannelPostProcessorResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.screens.impl.ScreensChannelPostProcessor/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.impl.ScreensChannelPostProcessorResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.impl.ScreensChannelPostProcessorResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.impl.ScreensChannelPostProcessorResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.impl.ScreensChannelPostProcessorResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodscheduleFrequency = request->get_query_parameter("comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodscheduleFrequency", "");
			const int32_t comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodpingTimeout = request->get_query_parameter("comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodpingTimeout", 0);
			const std::string comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodrecipients = request->get_query_parameter("comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodrecipients", "");
			const std::string comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodsmtpserver = request->get_query_parameter("comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodsmtpserver", "");
			const int32_t comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodsmtpport = request->get_query_parameter("comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodsmtpport", 0);
			const bool comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodusetls = request->get_query_parameter("comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodusetls", );
			const std::string comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodusername = request->get_query_parameter("comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodusername", "");
			const std::string comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodpassword = request->get_query_parameter("comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodpassword", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.mq.activemq.impl.ArtemisJMSProviderResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.mq.activemq.impl.ArtemisJMSProviderResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.screens.mq.activemq.impl.ArtemisJMSProvider/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.mq.activemq.impl.ArtemisJMSProviderResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.mq.activemq.impl.ArtemisJMSProviderResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.mq.activemq.impl.ArtemisJMSProviderResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.mq.activemq.impl.ArtemisJMSProviderResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t servicePeriodranking = request->get_query_parameter("servicePeriodranking", 0);
			const int32_t globalPeriodsize = request->get_query_parameter("globalPeriodsize", 0);
			const int32_t maxPerioddiskPeriodusage = request->get_query_parameter("maxPerioddiskPeriodusage", 0);
			const bool persistencePeriodenabled = request->get_query_parameter("persistencePeriodenabled", );
			const int32_t threadPeriodpoolPeriodmaxPeriodsize = request->get_query_parameter("threadPeriodpoolPeriodmaxPeriodsize", 0);
			const int32_t scheduledPeriodthreadPeriodpoolPeriodmaxPeriodsize = request->get_query_parameter("scheduledPeriodthreadPeriodpoolPeriodmaxPeriodsize", 0);
			const int32_t gracefulPeriodshutdownPeriodtimeout = request->get_query_parameter("gracefulPeriodshutdownPeriodtimeout", 0);
			const int32_t addressesPeriodmaxPerioddeliveryPeriodattempts = request->get_query_parameter("addressesPeriodmaxPerioddeliveryPeriodattempts", 0);
			const int32_t addressesPeriodexpiryPerioddelay = request->get_query_parameter("addressesPeriodexpiryPerioddelay", 0);
			const std::string addressesPeriodaddressPeriodfullPeriodmessagePeriodpolicy = request->get_query_parameter("addressesPeriodaddressPeriodfullPeriodmessagePeriodpolicy", "");
			const int32_t addressesPeriodmaxPeriodsizePeriodbytes = request->get_query_parameter("addressesPeriodmaxPeriodsizePeriodbytes", 0);
			const int32_t addressesPeriodpagePeriodsizePeriodbytes = request->get_query_parameter("addressesPeriodpagePeriodsizePeriodbytes", 0);
			const int32_t addressesPeriodpagePeriodcachePeriodmaxPeriodsize = request->get_query_parameter("addressesPeriodpagePeriodcachePeriodmaxPeriodsize", 0);
			const std::string clusterPerioduser = request->get_query_parameter("clusterPerioduser", "");
			const std::string clusterPeriodpassword = request->get_query_parameter("clusterPeriodpassword", "");
			const int32_t clusterPeriodcallPeriodtimeout = request->get_query_parameter("clusterPeriodcallPeriodtimeout", 0);
			const int32_t clusterPeriodcallPeriodfailoverPeriodtimeout = request->get_query_parameter("clusterPeriodcallPeriodfailoverPeriodtimeout", 0);
			const int32_t clusterPeriodclientPeriodfailurePeriodcheckPeriodperiod = request->get_query_parameter("clusterPeriodclientPeriodfailurePeriodcheckPeriodperiod", 0);
			const int32_t clusterPeriodnotificationPeriodattempts = request->get_query_parameter("clusterPeriodnotificationPeriodattempts", 0);
			const int32_t clusterPeriodnotificationPeriodinterval = request->get_query_parameter("clusterPeriodnotificationPeriodinterval", 0);
			const int32_t idPeriodcachePeriodsize = request->get_query_parameter("idPeriodcachePeriodsize", 0);
			const int32_t clusterPeriodconfirmationPeriodwindowPeriodsize = request->get_query_parameter("clusterPeriodconfirmationPeriodwindowPeriodsize", 0);
			const int32_t clusterPeriodconnectionPeriodttl = request->get_query_parameter("clusterPeriodconnectionPeriodttl", 0);
			const bool clusterPeriodduplicatePerioddetection = request->get_query_parameter("clusterPeriodduplicatePerioddetection", );
			const int32_t clusterPeriodinitialPeriodconnectPeriodattempts = request->get_query_parameter("clusterPeriodinitialPeriodconnectPeriodattempts", 0);
			const int32_t clusterPeriodmaxPeriodretryPeriodinterval = request->get_query_parameter("clusterPeriodmaxPeriodretryPeriodinterval", 0);
			const int32_t clusterPeriodminPeriodlargePeriodmessagePeriodsize = request->get_query_parameter("clusterPeriodminPeriodlargePeriodmessagePeriodsize", 0);
			const int32_t clusterPeriodproducerPeriodwindowPeriodsize = request->get_query_parameter("clusterPeriodproducerPeriodwindowPeriodsize", 0);
			const int32_t clusterPeriodreconnectPeriodattempts = request->get_query_parameter("clusterPeriodreconnectPeriodattempts", 0);
			const int32_t clusterPeriodretryPeriodinterval = request->get_query_parameter("clusterPeriodretryPeriodinterval", 0);
			const double clusterPeriodretryPeriodintervalPeriodmultiplier = request->get_query_parameter("clusterPeriodretryPeriodintervalPeriodmultiplier", 0.0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string comPeriodadobePeriodcqPeriodscreensPeriodofflinecontentPeriodimplPeriodBulkOfflineUpdateServiceImplPeriodscheduleFrequency = request->get_query_parameter("comPeriodadobePeriodcqPeriodscreensPeriodofflinecontentPeriodimplPeriodBulkOfflineUpdateServiceImplPeriodscheduleFrequency", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.offlinecontent.impl.OfflineContentServiceImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.offlinecontent.impl.OfflineContentServiceImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.OfflineContentServiceImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.offlinecontent.impl.OfflineContentServiceImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.offlinecontent.impl.OfflineContentServiceImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.offlinecontent.impl.OfflineContentServiceImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.offlinecontent.impl.OfflineContentServiceImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool disableSmartSync = request->get_query_parameter("disableSmartSync", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.segmentation.impl.SegmentationFeatureFlagResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.segmentation.impl.SegmentationFeatureFlagResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.screens.segmentation.impl.SegmentationFeatureFlag/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.segmentation.impl.SegmentationFeatureFlagResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.segmentation.impl.SegmentationFeatureFlagResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.segmentation.impl.SegmentationFeatureFlagResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.screens.segmentation.impl.SegmentationFeatureFlagResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool enableDataTriggeredContent = request->get_query_parameter("enableDataTriggeredContent", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.security.hc.bundles.impl.HtmlLibraryManagerConfigHealthCheckResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.security.hc.bundles.impl.HtmlLibraryManagerConfigHealthCheckResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.HtmlLibraryManagerConfigHealthCheck/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.security.hc.bundles.impl.HtmlLibraryManagerConfigHealthCheckResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.security.hc.bundles.impl.HtmlLibraryManagerConfigHealthCheckResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.security.hc.bundles.impl.HtmlLibraryManagerConfigHealthCheckResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.security.hc.bundles.impl.HtmlLibraryManagerConfigHealthCheckResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.security.hc.bundles.impl.WcmFilterHealthCheckResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.security.hc.bundles.impl.WcmFilterHealthCheckResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.WcmFilterHealthCheck/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.security.hc.bundles.impl.WcmFilterHealthCheckResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.security.hc.bundles.impl.WcmFilterHealthCheckResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.security.hc.bundles.impl.WcmFilterHealthCheckResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.security.hc.bundles.impl.WcmFilterHealthCheckResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.security.hc.dispatcher.impl.DispatcherAccessHealthCheckResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.security.hc.dispatcher.impl.DispatcherAccessHealthCheckResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.security.hc.dispatcher.impl.DispatcherAccessHealthCheck/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.security.hc.dispatcher.impl.DispatcherAccessHealthCheckResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.security.hc.dispatcher.impl.DispatcherAccessHealthCheckResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.security.hc.dispatcher.impl.DispatcherAccessHealthCheckResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.security.hc.dispatcher.impl.DispatcherAccessHealthCheckResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string dispatcherPeriodaddress = request->get_query_parameter("dispatcherPeriodaddress", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.security.hc.packages.impl.ExampleContentHealthCheckResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.security.hc.packages.impl.ExampleContentHealthCheckResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.security.hc.packages.impl.ExampleContentHealthCheck/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.security.hc.packages.impl.ExampleContentHealthCheckResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.security.hc.packages.impl.ExampleContentHealthCheckResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.security.hc.packages.impl.ExampleContentHealthCheckResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.security.hc.packages.impl.ExampleContentHealthCheckResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.security.hc.webserver.impl.ClickjackingHealthCheckResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.security.hc.webserver.impl.ClickjackingHealthCheckResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.security.hc.webserver.impl.ClickjackingHealthCheck/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.security.hc.webserver.impl.ClickjackingHealthCheckResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.security.hc.webserver.impl.ClickjackingHealthCheckResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.security.hc.webserver.impl.ClickjackingHealthCheckResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.security.hc.webserver.impl.ClickjackingHealthCheckResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string webserverPeriodaddress = request->get_query_parameter("webserverPeriodaddress", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.accountverification.impl.AccountManagementConfigImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.accountverification.impl.AccountManagementConfigImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.accountverification.impl.AccountManagementConfigImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.accountverification.impl.AccountManagementConfigImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.accountverification.impl.AccountManagementConfigImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.accountverification.impl.AccountManagementConfigImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.accountverification.impl.AccountManagementConfigImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool enable = request->get_query_parameter("enable", );
			const int32_t ttl1 = request->get_query_parameter("ttl1", 0);
			const int32_t ttl2 = request->get_query_parameter("ttl2", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.client.impl.SocialActivityComponentFactoryImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.client.impl.SocialActivityComponentFactoryImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityComponentFactoryImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.client.impl.SocialActivityComponentFactoryImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.client.impl.SocialActivityComponentFactoryImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.client.impl.SocialActivityComponentFactoryImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.client.impl.SocialActivityComponentFactoryImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t priority = request->get_query_parameter("priority", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.client.impl.SocialActivityStreamComponentFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.client.impl.SocialActivityStreamComponentFactoryResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityStreamComponentFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.client.impl.SocialActivityStreamComponentFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.client.impl.SocialActivityStreamComponentFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.client.impl.SocialActivityStreamComponentFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.client.impl.SocialActivityStreamComponentFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t priority = request->get_query_parameter("priority", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.listener.impl.EventListenerHandlerResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.listener.impl.EventListenerHandlerResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.EventListenerHandler/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.listener.impl.EventListenerHandlerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.listener.impl.EventListenerHandlerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.listener.impl.EventListenerHandlerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.listener.impl.EventListenerHandlerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string eventPeriodtopics = request->get_query_parameter("eventPeriodtopics", "");
			const std::string eventPeriodfilter = request->get_query_parameter("eventPeriodfilter", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.listener.impl.ModerationEventExtensionResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.listener.impl.ModerationEventExtensionResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ModerationEventExtension/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.listener.impl.ModerationEventExtensionResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.listener.impl.ModerationEventExtensionResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.listener.impl.ModerationEventExtensionResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.listener.impl.ModerationEventExtensionResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool accepted = request->get_query_parameter("accepted", );
			const int32_t ranked = request->get_query_parameter("ranked", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.listener.impl.RatingEventActivitySuppressorResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.listener.impl.RatingEventActivitySuppressorResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.RatingEventActivitySuppressor/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.listener.impl.RatingEventActivitySuppressorResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.listener.impl.RatingEventActivitySuppressorResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.listener.impl.RatingEventActivitySuppressorResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.listener.impl.RatingEventActivitySuppressorResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t ranking = request->get_query_parameter("ranking", 0);
			const bool enable = request->get_query_parameter("enable", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.listener.impl.ResourceActivityStreamProviderFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.listener.impl.ResourceActivityStreamProviderFactoryResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ResourceActivityStreamProviderFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.listener.impl.ResourceActivityStreamProviderFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.listener.impl.ResourceActivityStreamProviderFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.listener.impl.ResourceActivityStreamProviderFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.activitystreams.listener.impl.ResourceActivityStreamProviderFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string streamPath = request->get_query_parameter("streamPath", "");
			const std::string streamName = request->get_query_parameter("streamName", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.calendar.client.endpoints.impl.CalendarOperationsImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.calendar.client.endpoints.impl.CalendarOperationsImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.calendar.client.endpoints.impl.CalendarOperationsImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.calendar.client.endpoints.impl.CalendarOperationsImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.calendar.client.endpoints.impl.CalendarOperationsImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.calendar.client.endpoints.impl.CalendarOperationsImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.calendar.client.endpoints.impl.CalendarOperationsImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t maxRetry = request->get_query_parameter("maxRetry", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.calendar.client.operationextensions.EventAttachmentResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.calendar.client.operationextensions.EventAttachmentResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.calendar.client.operationextensions.EventAttachment/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.calendar.client.operationextensions.EventAttachmentResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.calendar.client.operationextensions.EventAttachmentResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.calendar.client.operationextensions.EventAttachmentResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.calendar.client.operationextensions.EventAttachmentResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string attachmentTypeBlacklist = request->get_query_parameter("attachmentTypeBlacklist", "");
			const int32_t extensionPeriodorder = request->get_query_parameter("extensionPeriodorder", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.calendar.servlets.TimeZoneServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.calendar.servlets.TimeZoneServletResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.calendar.servlets.TimeZoneServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.calendar.servlets.TimeZoneServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.calendar.servlets.TimeZoneServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.calendar.servlets.TimeZoneServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.calendar.servlets.TimeZoneServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t timezonesPeriodexpirytime = request->get_query_parameter("timezonesPeriodexpirytime", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.comments.endpoints.impl.CommentDeleteEventActivitySuppressorResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.comments.endpoints.impl.CommentDeleteEventActivitySuppressorResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentDeleteEventActivitySuppressor/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.comments.endpoints.impl.CommentDeleteEventActivitySuppressorResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.comments.endpoints.impl.CommentDeleteEventActivitySuppressorResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.comments.endpoints.impl.CommentDeleteEventActivitySuppressorResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.comments.endpoints.impl.CommentDeleteEventActivitySuppressorResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t ranking = request->get_query_parameter("ranking", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.comments.endpoints.impl.CommentOperationServiceResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.comments.endpoints.impl.CommentOperationServiceResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentOperationService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.comments.endpoints.impl.CommentOperationServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.comments.endpoints.impl.CommentOperationServiceResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.comments.endpoints.impl.CommentOperationServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.comments.endpoints.impl.CommentOperationServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.comments.endpoints.impl.TranslationOperationServiceResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.comments.endpoints.impl.TranslationOperationServiceResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.TranslationOperationService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.comments.endpoints.impl.TranslationOperationServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.comments.endpoints.impl.TranslationOperationServiceResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.comments.endpoints.impl.TranslationOperationServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.comments.endpoints.impl.TranslationOperationServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.comments.listing.impl.SearchCommentSocialComponentListProviderResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.comments.listing.impl.SearchCommentSocialComponentListProviderResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.commons.comments.listing.impl.SearchCommentSocialComponentListProvider/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.comments.listing.impl.SearchCommentSocialComponentListProviderResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.comments.listing.impl.SearchCommentSocialComponentListProviderResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.comments.listing.impl.SearchCommentSocialComponentListProviderResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.comments.listing.impl.SearchCommentSocialComponentListProviderResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t numUserLimit = request->get_query_parameter("numUserLimit", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.comments.scheduler.impl.SearchScheduledPostsResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.comments.scheduler.impl.SearchScheduledPostsResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.commons.comments.scheduler.impl.SearchScheduledPosts/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.comments.scheduler.impl.SearchScheduledPostsResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.comments.scheduler.impl.SearchScheduledPostsResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.comments.scheduler.impl.SearchScheduledPostsResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.comments.scheduler.impl.SearchScheduledPostsResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool enableScheduledPostsSearch = request->get_query_parameter("enableScheduledPostsSearch", );
			const int32_t numberOfMinutes = request->get_query_parameter("numberOfMinutes", 0);
			const int32_t maxSearchLimit = request->get_query_parameter("maxSearchLimit", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.cors.CORSAuthenticationFilterResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.cors.CORSAuthenticationFilterResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.commons.cors.CORSAuthenticationFilter/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.cors.CORSAuthenticationFilterResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.cors.CORSAuthenticationFilterResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.cors.CORSAuthenticationFilterResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.cors.CORSAuthenticationFilterResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool corsPeriodenabling = request->get_query_parameter("corsPeriodenabling", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.AndroidEmailClientProviderResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.AndroidEmailClientProviderResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.AndroidEmailClientProvider/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.AndroidEmailClientProviderResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.AndroidEmailClientProviderResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.AndroidEmailClientProviderResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.AndroidEmailClientProviderResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t priorityOrder = request->get_query_parameter("priorityOrder", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.CommentEmailBuilderImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.CommentEmailBuilderImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailBuilderImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.CommentEmailBuilderImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.CommentEmailBuilderImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.CommentEmailBuilderImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.CommentEmailBuilderImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string contextPeriodpath = request->get_query_parameter("contextPeriodpath", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.CommentEmailEventListenerResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.CommentEmailEventListenerResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailEventListener/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.CommentEmailEventListenerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.CommentEmailEventListenerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.CommentEmailEventListenerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.CommentEmailEventListenerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string eventPeriodtopics = request->get_query_parameter("eventPeriodtopics", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.CustomEmailClientProviderResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.CustomEmailClientProviderResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CustomEmailClientProvider/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.CustomEmailClientProviderResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.CustomEmailClientProviderResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.CustomEmailClientProviderResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.CustomEmailClientProviderResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t priorityOrder = request->get_query_parameter("priorityOrder", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.EmailQuotedTextPatternsImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.EmailQuotedTextPatternsImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailQuotedTextPatternsImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.EmailQuotedTextPatternsImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.EmailQuotedTextPatternsImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.EmailQuotedTextPatternsImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.EmailQuotedTextPatternsImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string patternPeriodtime = request->get_query_parameter("patternPeriodtime", "");
			const std::string patternPeriodnewline = request->get_query_parameter("patternPeriodnewline", "");
			const std::string patternPerioddayOfMonth = request->get_query_parameter("patternPerioddayOfMonth", "");
			const std::string patternPeriodmonth = request->get_query_parameter("patternPeriodmonth", "");
			const std::string patternPeriodyear = request->get_query_parameter("patternPeriodyear", "");
			const std::string patternPerioddate = request->get_query_parameter("patternPerioddate", "");
			const std::string patternPerioddateTime = request->get_query_parameter("patternPerioddateTime", "");
			const std::string patternPeriodemail = request->get_query_parameter("patternPeriodemail", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.EmailReplyConfigurationImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.EmailReplyConfigurationImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyConfigurationImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.EmailReplyConfigurationImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.EmailReplyConfigurationImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.EmailReplyConfigurationImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.EmailReplyConfigurationImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string emailPeriodname = request->get_query_parameter("emailPeriodname", "");
			const bool emailPeriodcreatePostFromReply = request->get_query_parameter("emailPeriodcreatePostFromReply", );
			const std::string emailPeriodaddCommentIdTo = request->get_query_parameter("emailPeriodaddCommentIdTo", "");
			const int32_t emailPeriodsubjectMaximumLength = request->get_query_parameter("emailPeriodsubjectMaximumLength", 0);
			const std::string emailPeriodreplyToAddress = request->get_query_parameter("emailPeriodreplyToAddress", "");
			const std::string emailPeriodreplyToDelimiter = request->get_query_parameter("emailPeriodreplyToDelimiter", "");
			const std::string emailPeriodtrackerIdPrefixInSubject = request->get_query_parameter("emailPeriodtrackerIdPrefixInSubject", "");
			const std::string emailPeriodtrackerIdPrefixInBody = request->get_query_parameter("emailPeriodtrackerIdPrefixInBody", "");
			const bool emailPeriodasHTML = request->get_query_parameter("emailPeriodasHTML", );
			const std::string emailPerioddefaultUserName = request->get_query_parameter("emailPerioddefaultUserName", "");
			const std::string emailPeriodtemplatesPeriodrootPath = request->get_query_parameter("emailPeriodtemplatesPeriodrootPath", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.EmailReplyImporterResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.EmailReplyImporterResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyImporter/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.EmailReplyImporterResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.EmailReplyImporterResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.EmailReplyImporterResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.EmailReplyImporterResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string connectProtocol = request->get_query_parameter("connectProtocol", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.GmailEmailClientProviderResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.GmailEmailClientProviderResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.GmailEmailClientProvider/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.GmailEmailClientProviderResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.GmailEmailClientProviderResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.GmailEmailClientProviderResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.GmailEmailClientProviderResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t priorityOrder = request->get_query_parameter("priorityOrder", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.IOSEmailClientProviderResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.IOSEmailClientProviderResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.IOSEmailClientProvider/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.IOSEmailClientProviderResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.IOSEmailClientProviderResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.IOSEmailClientProviderResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.IOSEmailClientProviderResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t priorityOrder = request->get_query_parameter("priorityOrder", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.MacmailEmailClientProviderResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.MacmailEmailClientProviderResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.MacmailEmailClientProvider/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.MacmailEmailClientProviderResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.MacmailEmailClientProviderResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.MacmailEmailClientProviderResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.MacmailEmailClientProviderResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t priorityOrder = request->get_query_parameter("priorityOrder", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.OutLookEmailClientProviderResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.OutLookEmailClientProviderResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.OutLookEmailClientProvider/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.OutLookEmailClientProviderResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.OutLookEmailClientProviderResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.OutLookEmailClientProviderResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.OutLookEmailClientProviderResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t priorityOrder = request->get_query_parameter("priorityOrder", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.UnknownEmailClientProviderResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.UnknownEmailClientProviderResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.UnknownEmailClientProvider/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.UnknownEmailClientProviderResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.UnknownEmailClientProviderResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.UnknownEmailClientProviderResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.UnknownEmailClientProviderResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t priorityOrder = request->get_query_parameter("priorityOrder", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.YahooEmailClientProviderResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.YahooEmailClientProviderResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.YahooEmailClientProvider/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.YahooEmailClientProviderResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.YahooEmailClientProviderResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.YahooEmailClientProviderResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.emailreply.impl.YahooEmailClientProviderResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t priorityOrder = request->get_query_parameter("priorityOrder", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.maintainance.impl.DeleteTempUGCImageUploadsResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.maintainance.impl.DeleteTempUGCImageUploadsResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.commons.maintainance.impl.DeleteTempUGCImageUploads/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.maintainance.impl.DeleteTempUGCImageUploadsResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.maintainance.impl.DeleteTempUGCImageUploadsResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.maintainance.impl.DeleteTempUGCImageUploadsResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.maintainance.impl.DeleteTempUGCImageUploadsResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t numberOfDays = request->get_query_parameter("numberOfDays", 0);
			const int32_t ageOfFile = request->get_query_parameter("ageOfFile", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.ugclimiter.impl.UGCLimiterServiceImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.ugclimiter.impl.UGCLimiterServiceImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.commons.ugclimiter.impl.UGCLimiterServiceImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.ugclimiter.impl.UGCLimiterServiceImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.ugclimiter.impl.UGCLimiterServiceImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.ugclimiter.impl.UGCLimiterServiceImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.ugclimiter.impl.UGCLimiterServiceImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string eventPeriodtopics = request->get_query_parameter("eventPeriodtopics", "");
			const std::string eventPeriodfilter = request->get_query_parameter("eventPeriodfilter", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.ugclimitsconfig.impl.CommunityUserUGCLimitsConfigImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.ugclimitsconfig.impl.CommunityUserUGCLimitsConfigImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.commons.ugclimitsconfig.impl.CommunityUserUGCLimitsConfigImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.ugclimitsconfig.impl.CommunityUserUGCLimitsConfigImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.ugclimitsconfig.impl.CommunityUserUGCLimitsConfigImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.ugclimitsconfig.impl.CommunityUserUGCLimitsConfigImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.commons.ugclimitsconfig.impl.CommunityUserUGCLimitsConfigImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool enable = request->get_query_parameter("enable", );
			const int32_t uGCLimit = request->get_query_parameter("uGCLimit", 0);
			const int32_t ugcLimitDuration = request->get_query_parameter("ugcLimitDuration", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.connect.oauth.impl.FacebookProviderImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.connect.oauth.impl.FacebookProviderImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.FacebookProviderImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.connect.oauth.impl.FacebookProviderImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.connect.oauth.impl.FacebookProviderImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.connect.oauth.impl.FacebookProviderImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.connect.oauth.impl.FacebookProviderImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string oauthPeriodproviderPeriodid = request->get_query_parameter("oauthPeriodproviderPeriodid", "");
			const std::string oauthPeriodcloudPeriodconfigPeriodroot = request->get_query_parameter("oauthPeriodcloudPeriodconfigPeriodroot", "");
			const std::string providerPeriodconfigPeriodroot = request->get_query_parameter("providerPeriodconfigPeriodroot", "");
			const bool providerPeriodconfigPeriodcreatePeriodtagsPeriodenabled = request->get_query_parameter("providerPeriodconfigPeriodcreatePeriodtagsPeriodenabled", );
			const std::string providerPeriodconfigPerioduserPeriodfolder = request->get_query_parameter("providerPeriodconfigPerioduserPeriodfolder", "");
			const bool providerPeriodconfigPeriodfacebookPeriodfetchPeriodfields = request->get_query_parameter("providerPeriodconfigPeriodfacebookPeriodfetchPeriodfields", );
			const bool providerPeriodconfigPeriodrefreshPerioduserdataPeriodenabled = request->get_query_parameter("providerPeriodconfigPeriodrefreshPerioduserdataPeriodenabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.connect.oauth.impl.SocialOAuthAuthenticationHandlerResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.connect.oauth.impl.SocialOAuthAuthenticationHandlerResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthAuthenticationHandler/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.connect.oauth.impl.SocialOAuthAuthenticationHandlerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.connect.oauth.impl.SocialOAuthAuthenticationHandlerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.connect.oauth.impl.SocialOAuthAuthenticationHandlerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.connect.oauth.impl.SocialOAuthAuthenticationHandlerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t servicePeriodranking = request->get_query_parameter("servicePeriodranking", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.connect.oauth.impl.SocialOAuthUserProfileMapperResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.connect.oauth.impl.SocialOAuthUserProfileMapperResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthUserProfileMapper/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.connect.oauth.impl.SocialOAuthUserProfileMapperResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.connect.oauth.impl.SocialOAuthUserProfileMapperResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.connect.oauth.impl.SocialOAuthUserProfileMapperResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.connect.oauth.impl.SocialOAuthUserProfileMapperResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string providerPeriodconfigPerioduserPeriodfolder = request->get_query_parameter("providerPeriodconfigPerioduserPeriodfolder", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.connect.oauth.impl.TwitterProviderImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.connect.oauth.impl.TwitterProviderImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.TwitterProviderImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.connect.oauth.impl.TwitterProviderImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.connect.oauth.impl.TwitterProviderImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.connect.oauth.impl.TwitterProviderImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.connect.oauth.impl.TwitterProviderImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string oauthPeriodproviderPeriodid = request->get_query_parameter("oauthPeriodproviderPeriodid", "");
			const std::string oauthPeriodcloudPeriodconfigPeriodroot = request->get_query_parameter("oauthPeriodcloudPeriodconfigPeriodroot", "");
			const std::string providerPeriodconfigPeriodroot = request->get_query_parameter("providerPeriodconfigPeriodroot", "");
			const std::string providerPeriodconfigPerioduserPeriodfolder = request->get_query_parameter("providerPeriodconfigPerioduserPeriodfolder", "");
			const bool providerPeriodconfigPeriodtwitterPeriodenablePeriodparams = request->get_query_parameter("providerPeriodconfigPeriodtwitterPeriodenablePeriodparams", );
			const bool providerPeriodconfigPeriodrefreshPerioduserdataPeriodenabled = request->get_query_parameter("providerPeriodconfigPeriodrefreshPerioduserdataPeriodenabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.content.fragments.services.impl.CommunitiesFragmentCreationServiceImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.content.fragments.services.impl.CommunitiesFragmentCreationServiceImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.content.fragments.services.impl.CommunitiesFragmentCreationServiceImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.content.fragments.services.impl.CommunitiesFragmentCreationServiceImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.content.fragments.services.impl.CommunitiesFragmentCreationServiceImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.content.fragments.services.impl.CommunitiesFragmentCreationServiceImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.content.fragments.services.impl.CommunitiesFragmentCreationServiceImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool cqPeriodsocialPeriodcontentPeriodfragmentsPeriodservicesPeriodenabled = request->get_query_parameter("cqPeriodsocialPeriodcontentPeriodfragmentsPeriodservicesPeriodenabled", );
			const int32_t cqPeriodsocialPeriodcontentPeriodfragmentsPeriodservicesPeriodwaitTimeSeconds = request->get_query_parameter("cqPeriodsocialPeriodcontentPeriodfragmentsPeriodservicesPeriodwaitTimeSeconds", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.datastore.as.impl.ASResourceProviderFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.datastore.as.impl.ASResourceProviderFactoryResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.datastore.as.impl.ASResourceProviderFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.datastore.as.impl.ASResourceProviderFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.datastore.as.impl.ASResourceProviderFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.datastore.as.impl.ASResourceProviderFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.datastore.as.impl.ASResourceProviderFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string versionPeriodid = request->get_query_parameter("versionPeriodid", "");
			const bool cachePeriodon = request->get_query_parameter("cachePeriodon", );
			const int32_t concurrencyPeriodlevel = request->get_query_parameter("concurrencyPeriodlevel", 0);
			const int32_t cachePeriodstartPeriodsize = request->get_query_parameter("cachePeriodstartPeriodsize", 0);
			const int32_t cachePeriodttl = request->get_query_parameter("cachePeriodttl", 0);
			const int32_t cachePeriodsize = request->get_query_parameter("cachePeriodsize", 0);
			const int32_t timePeriodlimit = request->get_query_parameter("timePeriodlimit", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.datastore.op.impl.SocialMSResourceProviderFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.datastore.op.impl.SocialMSResourceProviderFactoryResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.datastore.op.impl.SocialMSResourceProviderFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.datastore.op.impl.SocialMSResourceProviderFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.datastore.op.impl.SocialMSResourceProviderFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.datastore.op.impl.SocialMSResourceProviderFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.datastore.op.impl.SocialMSResourceProviderFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string solrPeriodzkPeriodtimeout = request->get_query_parameter("solrPeriodzkPeriodtimeout", "");
			const std::string solrPeriodcommit = request->get_query_parameter("solrPeriodcommit", "");
			const bool cachePeriodon = request->get_query_parameter("cachePeriodon", );
			const int32_t concurrencyPeriodlevel = request->get_query_parameter("concurrencyPeriodlevel", 0);
			const int32_t cachePeriodstartPeriodsize = request->get_query_parameter("cachePeriodstartPeriodsize", 0);
			const int32_t cachePeriodttl = request->get_query_parameter("cachePeriodttl", 0);
			const int32_t cachePeriodsize = request->get_query_parameter("cachePeriodsize", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.datastore.rdb.impl.SocialRDBResourceProviderFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.datastore.rdb.impl.SocialRDBResourceProviderFactoryResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.datastore.rdb.impl.SocialRDBResourceProviderFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.datastore.rdb.impl.SocialRDBResourceProviderFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.datastore.rdb.impl.SocialRDBResourceProviderFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.datastore.rdb.impl.SocialRDBResourceProviderFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.datastore.rdb.impl.SocialRDBResourceProviderFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string solrPeriodzkPeriodtimeout = request->get_query_parameter("solrPeriodzkPeriodtimeout", "");
			const std::string solrPeriodcommit = request->get_query_parameter("solrPeriodcommit", "");
			const bool cachePeriodon = request->get_query_parameter("cachePeriodon", );
			const int32_t concurrencyPeriodlevel = request->get_query_parameter("concurrencyPeriodlevel", 0);
			const int32_t cachePeriodstartPeriodsize = request->get_query_parameter("cachePeriodstartPeriodsize", 0);
			const int32_t cachePeriodttl = request->get_query_parameter("cachePeriodttl", 0);
			const int32_t cachePeriodsize = request->get_query_parameter("cachePeriodsize", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.enablement.adaptors.EnablementLearningPathAdaptorFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.enablement.adaptors.EnablementLearningPathAdaptorFactoryResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementLearningPathAdaptorFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.enablement.adaptors.EnablementLearningPathAdaptorFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.enablement.adaptors.EnablementLearningPathAdaptorFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.enablement.adaptors.EnablementLearningPathAdaptorFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.enablement.adaptors.EnablementLearningPathAdaptorFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool isMemberCheck = request->get_query_parameter("isMemberCheck", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.enablement.adaptors.EnablementResourceAdaptorFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.enablement.adaptors.EnablementResourceAdaptorFactoryResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementResourceAdaptorFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.enablement.adaptors.EnablementResourceAdaptorFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.enablement.adaptors.EnablementResourceAdaptorFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.enablement.adaptors.EnablementResourceAdaptorFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.enablement.adaptors.EnablementResourceAdaptorFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool isMemberCheck = request->get_query_parameter("isMemberCheck", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.enablement.learningpath.endpoints.impl.EnablementLearningPathModelOperationServiceResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.enablement.learningpath.endpoints.impl.EnablementLearningPathModelOperationServiceResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.enablement.learningpath.endpoints.impl.EnablementLearningPathModelOperationService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.enablement.learningpath.endpoints.impl.EnablementLearningPathModelOperationServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.enablement.learningpath.endpoints.impl.EnablementLearningPathModelOperationServiceResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.enablement.learningpath.endpoints.impl.EnablementLearningPathModelOperationServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.enablement.learningpath.endpoints.impl.EnablementLearningPathModelOperationServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.enablement.resource.endpoints.impl.EnablementResourceModelOperationServiceResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.enablement.resource.endpoints.impl.EnablementResourceModelOperationServiceResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.enablement.resource.endpoints.impl.EnablementResourceModelOperationService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.enablement.resource.endpoints.impl.EnablementResourceModelOperationServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.enablement.resource.endpoints.impl.EnablementResourceModelOperationServiceResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.enablement.resource.endpoints.impl.EnablementResourceModelOperationServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.enablement.resource.endpoints.impl.EnablementResourceModelOperationServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.enablement.services.impl.AuthorMarkerImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.enablement.services.impl.AuthorMarkerImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.enablement.services.impl.AuthorMarkerImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.enablement.services.impl.AuthorMarkerImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.enablement.services.impl.AuthorMarkerImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.enablement.services.impl.AuthorMarkerImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.enablement.services.impl.AuthorMarkerImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t servicePeriodranking = request->get_query_parameter("servicePeriodranking", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.filelibrary.client.endpoints.FilelibraryDownloadGetServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.filelibrary.client.endpoints.FilelibraryDownloadGetServletResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.FilelibraryDownloadGetServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.filelibrary.client.endpoints.FilelibraryDownloadGetServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.filelibrary.client.endpoints.FilelibraryDownloadGetServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.filelibrary.client.endpoints.FilelibraryDownloadGetServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.filelibrary.client.endpoints.FilelibraryDownloadGetServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string slingPeriodservletPeriodselectors = request->get_query_parameter("slingPeriodservletPeriodselectors", "");
			const std::string slingPeriodservletPeriodextensions = request->get_query_parameter("slingPeriodservletPeriodextensions", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.filelibrary.client.endpoints.impl.FileLibraryOperationsServiceResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.filelibrary.client.endpoints.impl.FileLibraryOperationsServiceResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.impl.FileLibraryOperationsService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.filelibrary.client.endpoints.impl.FileLibraryOperationsServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.filelibrary.client.endpoints.impl.FileLibraryOperationsServiceResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.filelibrary.client.endpoints.impl.FileLibraryOperationsServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.filelibrary.client.endpoints.impl.FileLibraryOperationsServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.forum.client.endpoints.impl.ForumOperationsServiceResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.forum.client.endpoints.impl.ForumOperationsServiceResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.forum.client.endpoints.impl.ForumOperationsService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.forum.client.endpoints.impl.ForumOperationsServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.forum.client.endpoints.impl.ForumOperationsServiceResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.forum.client.endpoints.impl.ForumOperationsServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.forum.client.endpoints.impl.ForumOperationsServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.forum.dispatcher.impl.FlushOperationsResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.forum.dispatcher.impl.FlushOperationsResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.forum.dispatcher.impl.FlushOperations/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.forum.dispatcher.impl.FlushOperationsResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.forum.dispatcher.impl.FlushOperationsResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.forum.dispatcher.impl.FlushOperationsResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.forum.dispatcher.impl.FlushOperationsResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t extensionPeriodorder = request->get_query_parameter("extensionPeriodorder", 0);
			const bool flushPeriodforumontopic = request->get_query_parameter("flushPeriodforumontopic", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.group.client.impl.CommunityGroupCollectionComponentFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.group.client.impl.CommunityGroupCollectionComponentFactoryResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.group.client.impl.CommunityGroupCollectionComponentFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.group.client.impl.CommunityGroupCollectionComponentFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.group.client.impl.CommunityGroupCollectionComponentFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.group.client.impl.CommunityGroupCollectionComponentFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.group.client.impl.CommunityGroupCollectionComponentFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool groupPeriodlistingPeriodpaginationPeriodenable = request->get_query_parameter("groupPeriodlistingPeriodpaginationPeriodenable", );
			const bool groupPeriodlistingPeriodlazyloadingPeriodenable = request->get_query_parameter("groupPeriodlistingPeriodlazyloadingPeriodenable", );
			const int32_t pagePeriodsize = request->get_query_parameter("pagePeriodsize", 0);
			const int32_t priority = request->get_query_parameter("priority", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.group.impl.GroupServiceImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.group.impl.GroupServiceImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.group.impl.GroupServiceImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.group.impl.GroupServiceImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.group.impl.GroupServiceImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.group.impl.GroupServiceImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.group.impl.GroupServiceImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t maxWaitTime = request->get_query_parameter("maxWaitTime", 0);
			const int32_t minWaitBetweenRetries = request->get_query_parameter("minWaitBetweenRetries", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.handlebars.GuavaTemplateCacheImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.handlebars.GuavaTemplateCacheImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.handlebars.GuavaTemplateCacheImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.handlebars.GuavaTemplateCacheImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.handlebars.GuavaTemplateCacheImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.handlebars.GuavaTemplateCacheImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.handlebars.GuavaTemplateCacheImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool parameterPeriodguavaPeriodcachePeriodenabled = request->get_query_parameter("parameterPeriodguavaPeriodcachePeriodenabled", );
			const std::string parameterPeriodguavaPeriodcachePeriodparams = request->get_query_parameter("parameterPeriodguavaPeriodcachePeriodparams", "");
			const bool parameterPeriodguavaPeriodcachePeriodreload = request->get_query_parameter("parameterPeriodguavaPeriodcachePeriodreload", );
			const int32_t servicePeriodranking = request->get_query_parameter("servicePeriodranking", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ideation.client.endpoints.impl.IdeationOperationsServiceResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ideation.client.endpoints.impl.IdeationOperationsServiceResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.ideation.client.endpoints.impl.IdeationOperationsService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ideation.client.endpoints.impl.IdeationOperationsServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ideation.client.endpoints.impl.IdeationOperationsServiceResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ideation.client.endpoints.impl.IdeationOperationsServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ideation.client.endpoints.impl.IdeationOperationsServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.journal.client.endpoints.impl.JournalOperationsServiceResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.journal.client.endpoints.impl.JournalOperationsServiceResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.journal.client.endpoints.impl.JournalOperationsService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.journal.client.endpoints.impl.JournalOperationsServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.journal.client.endpoints.impl.JournalOperationsServiceResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.journal.client.endpoints.impl.JournalOperationsServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.journal.client.endpoints.impl.JournalOperationsServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.members.endpoints.impl.CommunityMemberGroupProfileOperationServiceResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.members.endpoints.impl.CommunityMemberGroupProfileOperationServiceResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberGroupProfileOperationService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.members.endpoints.impl.CommunityMemberGroupProfileOperationServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.members.endpoints.impl.CommunityMemberGroupProfileOperationServiceResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.members.endpoints.impl.CommunityMemberGroupProfileOperationServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.members.endpoints.impl.CommunityMemberGroupProfileOperationServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.members.endpoints.impl.CommunityMemberUserProfileOperationServiceResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.members.endpoints.impl.CommunityMemberUserProfileOperationServiceResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberUserProfileOperationService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.members.endpoints.impl.CommunityMemberUserProfileOperationServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.members.endpoints.impl.CommunityMemberUserProfileOperationServiceResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.members.endpoints.impl.CommunityMemberUserProfileOperationServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.members.endpoints.impl.CommunityMemberUserProfileOperationServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.members.impl.CommunityMemberGroupProfileComponentFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.members.impl.CommunityMemberGroupProfileComponentFactoryResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.members.impl.CommunityMemberGroupProfileComponentFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.members.impl.CommunityMemberGroupProfileComponentFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.members.impl.CommunityMemberGroupProfileComponentFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.members.impl.CommunityMemberGroupProfileComponentFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.members.impl.CommunityMemberGroupProfileComponentFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t everyoneLimit = request->get_query_parameter("everyoneLimit", 0);
			const int32_t priority = request->get_query_parameter("priority", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.messaging.client.endpoints.impl.MessagingOperationsServiceImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.messaging.client.endpoints.impl.MessagingOperationsServiceImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.messaging.client.endpoints.impl.MessagingOperationsServiceImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.messaging.client.endpoints.impl.MessagingOperationsServiceImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.messaging.client.endpoints.impl.MessagingOperationsServiceImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.messaging.client.endpoints.impl.MessagingOperationsServiceImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.messaging.client.endpoints.impl.MessagingOperationsServiceImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t messageBoxSizeLimit = request->get_query_parameter("messageBoxSizeLimit", 0);
			const int32_t messageCountLimit = request->get_query_parameter("messageCountLimit", 0);
			const bool notifyFailure = request->get_query_parameter("notifyFailure", );
			const std::string failureMessageFrom = request->get_query_parameter("failureMessageFrom", "");
			const std::string failureTemplatePath = request->get_query_parameter("failureTemplatePath", "");
			const int32_t maxRetries = request->get_query_parameter("maxRetries", 0);
			const int32_t minWaitBetweenRetries = request->get_query_parameter("minWaitBetweenRetries", 0);
			const int32_t countUpdatePoolSize = request->get_query_parameter("countUpdatePoolSize", 0);
			const std::string inboxPeriodpath = request->get_query_parameter("inboxPeriodpath", "");
			const std::string sentitemsPeriodpath = request->get_query_parameter("sentitemsPeriodpath", "");
			const bool supportAttachments = request->get_query_parameter("supportAttachments", );
			const bool supportGroupMessaging = request->get_query_parameter("supportGroupMessaging", );
			const int32_t maxTotalRecipients = request->get_query_parameter("maxTotalRecipients", 0);
			const int32_t batchSize = request->get_query_parameter("batchSize", 0);
			const int32_t maxTotalAttachmentSize = request->get_query_parameter("maxTotalAttachmentSize", 0);
			const std::string serviceSelector = request->get_query_parameter("serviceSelector", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.moderation.dashboard.api.FilterGroupSocialComponentFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.moderation.dashboard.api.FilterGroupSocialComponentFactoryResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.FilterGroupSocialComponentFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.moderation.dashboard.api.FilterGroupSocialComponentFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.moderation.dashboard.api.FilterGroupSocialComponentFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.moderation.dashboard.api.FilterGroupSocialComponentFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.moderation.dashboard.api.FilterGroupSocialComponentFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t priority = request->get_query_parameter("priority", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.moderation.dashboard.api.ModerationDashboardSocialComponentFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.moderation.dashboard.api.ModerationDashboardSocialComponentFactoryResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.ModerationDashboardSocialComponentFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.moderation.dashboard.api.ModerationDashboardSocialComponentFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.moderation.dashboard.api.ModerationDashboardSocialComponentFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.moderation.dashboard.api.ModerationDashboardSocialComponentFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.moderation.dashboard.api.ModerationDashboardSocialComponentFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t priority = request->get_query_parameter("priority", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.moderation.dashboard.api.UserDetailsSocialComponentFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.moderation.dashboard.api.UserDetailsSocialComponentFactoryResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.UserDetailsSocialComponentFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.moderation.dashboard.api.UserDetailsSocialComponentFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.moderation.dashboard.api.UserDetailsSocialComponentFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.moderation.dashboard.api.UserDetailsSocialComponentFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.moderation.dashboard.api.UserDetailsSocialComponentFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t priority = request->get_query_parameter("priority", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.moderation.dashboard.internal.impl.FilterGroupSocialComponentFactoryV2Resource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.moderation.dashboard.internal.impl.FilterGroupSocialComponentFactoryV2Resource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.internal.impl.FilterGroupSocialComponentFactoryV2/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.moderation.dashboard.internal.impl.FilterGroupSocialComponentFactoryV2Resource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.moderation.dashboard.internal.impl.FilterGroupSocialComponentFactoryV2Resource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.moderation.dashboard.internal.impl.FilterGroupSocialComponentFactoryV2Resource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.moderation.dashboard.internal.impl.FilterGroupSocialComponentFactoryV2Resource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t priority = request->get_query_parameter("priority", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.notifications.impl.MentionsRouterResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.notifications.impl.MentionsRouterResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.notifications.impl.MentionsRouter/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.notifications.impl.MentionsRouterResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.notifications.impl.MentionsRouterResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.notifications.impl.MentionsRouterResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.notifications.impl.MentionsRouterResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string eventPeriodtopics = request->get_query_parameter("eventPeriodtopics", "");
			const std::string eventPeriodfilter = request->get_query_parameter("eventPeriodfilter", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.notifications.impl.NotificationManagerImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.notifications.impl.NotificationManagerImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationManagerImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.notifications.impl.NotificationManagerImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.notifications.impl.NotificationManagerImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.notifications.impl.NotificationManagerImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.notifications.impl.NotificationManagerImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t maxPeriodunreadPeriodnotificationPeriodcount = request->get_query_parameter("maxPeriodunreadPeriodnotificationPeriodcount", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.notifications.impl.NotificationsRouterResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.notifications.impl.NotificationsRouterResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationsRouter/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.notifications.impl.NotificationsRouterResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.notifications.impl.NotificationsRouterResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.notifications.impl.NotificationsRouterResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.notifications.impl.NotificationsRouterResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string eventPeriodtopics = request->get_query_parameter("eventPeriodtopics", "");
			const std::string eventPeriodfilter = request->get_query_parameter("eventPeriodfilter", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.qna.client.endpoints.impl.QnaForumOperationsServiceResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.qna.client.endpoints.impl.QnaForumOperationsServiceResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.qna.client.endpoints.impl.QnaForumOperationsService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.qna.client.endpoints.impl.QnaForumOperationsServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.qna.client.endpoints.impl.QnaForumOperationsServiceResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.qna.client.endpoints.impl.QnaForumOperationsServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.qna.client.endpoints.impl.QnaForumOperationsServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportImporterServiceImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportImporterServiceImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportImporterServiceImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportImporterServiceImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportImporterServiceImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportImporterServiceImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportImporterServiceImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t cqPeriodsocialPeriodreportingPeriodanalyticsPeriodpollingPeriodimporterPeriodinterval = request->get_query_parameter("cqPeriodsocialPeriodreportingPeriodanalyticsPeriodpollingPeriodimporterPeriodinterval", 0);
			const int32_t cqPeriodsocialPeriodreportingPeriodanalyticsPeriodpollingPeriodimporterPeriodpageSize = request->get_query_parameter("cqPeriodsocialPeriodreportingPeriodanalyticsPeriodpollingPeriodimporterPeriodpageSize", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportManagementServiceImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportManagementServiceImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportManagementServiceImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportManagementServiceImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportManagementServiceImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportManagementServiceImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportManagementServiceImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t reportPeriodfetchPerioddelay = request->get_query_parameter("reportPeriodfetchPerioddelay", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.reporting.analytics.services.impl.SiteTrendReportSocialComponentFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.reporting.analytics.services.impl.SiteTrendReportSocialComponentFactoryResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.SiteTrendReportSocialComponentFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.reporting.analytics.services.impl.SiteTrendReportSocialComponentFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.reporting.analytics.services.impl.SiteTrendReportSocialComponentFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.reporting.analytics.services.impl.SiteTrendReportSocialComponentFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.reporting.analytics.services.impl.SiteTrendReportSocialComponentFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t priority = request->get_query_parameter("priority", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.review.client.endpoints.impl.ReviewOperationsServiceResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.review.client.endpoints.impl.ReviewOperationsServiceResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.review.client.endpoints.impl.ReviewOperationsService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.review.client.endpoints.impl.ReviewOperationsServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.review.client.endpoints.impl.ReviewOperationsServiceResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.review.client.endpoints.impl.ReviewOperationsServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.review.client.endpoints.impl.ReviewOperationsServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.scf.core.operations.impl.SocialOperationsServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.scf.core.operations.impl.SocialOperationsServletResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.scf.core.operations.impl.SocialOperationsServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.scf.core.operations.impl.SocialOperationsServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.scf.core.operations.impl.SocialOperationsServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.scf.core.operations.impl.SocialOperationsServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.scf.core.operations.impl.SocialOperationsServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string slingPeriodservletPeriodselectors = request->get_query_parameter("slingPeriodservletPeriodselectors", "");
			const std::string slingPeriodservletPeriodextensions = request->get_query_parameter("slingPeriodservletPeriodextensions", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.scf.endpoints.impl.DefaultSocialGetServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.scf.endpoints.impl.DefaultSocialGetServletResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.scf.endpoints.impl.DefaultSocialGetServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.scf.endpoints.impl.DefaultSocialGetServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.scf.endpoints.impl.DefaultSocialGetServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.scf.endpoints.impl.DefaultSocialGetServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.scf.endpoints.impl.DefaultSocialGetServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string slingPeriodservletPeriodextensions = request->get_query_parameter("slingPeriodservletPeriodextensions", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.scoring.impl.ScoringEventListenerResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.scoring.impl.ScoringEventListenerResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.scoring.impl.ScoringEventListener/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.scoring.impl.ScoringEventListenerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.scoring.impl.ScoringEventListenerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.scoring.impl.ScoringEventListenerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.scoring.impl.ScoringEventListenerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string eventPeriodtopics = request->get_query_parameter("eventPeriodtopics", "");
			const std::string eventPeriodfilter = request->get_query_parameter("eventPeriodfilter", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.serviceusers.internal.impl.ServiceUserWrapperImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.serviceusers.internal.impl.ServiceUserWrapperImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.serviceusers.internal.impl.ServiceUserWrapperImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.serviceusers.internal.impl.ServiceUserWrapperImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.serviceusers.internal.impl.ServiceUserWrapperImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.serviceusers.internal.impl.ServiceUserWrapperImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.serviceusers.internal.impl.ServiceUserWrapperImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool enableFallback = request->get_query_parameter("enableFallback", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.site.endpoints.impl.SiteOperationServiceResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.site.endpoints.impl.SiteOperationServiceResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.site.endpoints.impl.SiteOperationService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.site.endpoints.impl.SiteOperationServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.site.endpoints.impl.SiteOperationServiceResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.site.endpoints.impl.SiteOperationServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.site.endpoints.impl.SiteOperationServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string sitePackageGroup = request->get_query_parameter("sitePackageGroup", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.site.impl.AnalyticsComponentConfigurationServiceImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.site.impl.AnalyticsComponentConfigurationServiceImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.site.impl.AnalyticsComponentConfigurationServiceImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.site.impl.AnalyticsComponentConfigurationServiceImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.site.impl.AnalyticsComponentConfigurationServiceImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.site.impl.AnalyticsComponentConfigurationServiceImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.site.impl.AnalyticsComponentConfigurationServiceImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.site.impl.SiteConfiguratorImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.site.impl.SiteConfiguratorImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.site.impl.SiteConfiguratorImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.site.impl.SiteConfiguratorImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.site.impl.SiteConfiguratorImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.site.impl.SiteConfiguratorImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.site.impl.SiteConfiguratorImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.srp.impl.SocialSolrConnectorResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.srp.impl.SocialSolrConnectorResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.srp.impl.SocialSolrConnector/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.srp.impl.SocialSolrConnectorResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.srp.impl.SocialSolrConnectorResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.srp.impl.SocialSolrConnectorResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.srp.impl.SocialSolrConnectorResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string srpPeriodtype = request->get_query_parameter("srpPeriodtype", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.sync.impl.DiffChangesObserverResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.sync.impl.DiffChangesObserverResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.sync.impl.DiffChangesObserver/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.sync.impl.DiffChangesObserverResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.sync.impl.DiffChangesObserverResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.sync.impl.DiffChangesObserverResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.sync.impl.DiffChangesObserverResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool enabled = request->get_query_parameter("enabled", );
			const std::string agentName = request->get_query_parameter("agentName", "");
			const std::string diffPath = request->get_query_parameter("diffPath", "");
			const std::string propertyNames = request->get_query_parameter("propertyNames", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.sync.impl.GroupSyncListenerImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.sync.impl.GroupSyncListenerImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.sync.impl.GroupSyncListenerImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.sync.impl.GroupSyncListenerImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.sync.impl.GroupSyncListenerImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.sync.impl.GroupSyncListenerImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.sync.impl.GroupSyncListenerImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string ignorablenodes = request->get_query_parameter("ignorablenodes", "");
			const bool enabled = request->get_query_parameter("enabled", );
			const std::string distfolders = request->get_query_parameter("distfolders", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.sync.impl.PublisherSyncServiceImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.sync.impl.PublisherSyncServiceImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.sync.impl.PublisherSyncServiceImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.sync.impl.PublisherSyncServiceImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.sync.impl.PublisherSyncServiceImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.sync.impl.PublisherSyncServiceImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.sync.impl.PublisherSyncServiceImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.sync.impl.UserSyncListenerImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.sync.impl.UserSyncListenerImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.sync.impl.UserSyncListenerImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.sync.impl.UserSyncListenerImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.sync.impl.UserSyncListenerImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.sync.impl.UserSyncListenerImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.sync.impl.UserSyncListenerImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool enabled = request->get_query_parameter("enabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.translation.impl.TranslationServiceConfigManagerResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.translation.impl.TranslationServiceConfigManagerResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.translation.impl.TranslationServiceConfigManager/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.translation.impl.TranslationServiceConfigManagerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.translation.impl.TranslationServiceConfigManagerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.translation.impl.TranslationServiceConfigManagerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.translation.impl.TranslationServiceConfigManagerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string translatePeriodlanguage = request->get_query_parameter("translatePeriodlanguage", "");
			const std::string translatePerioddisplay = request->get_query_parameter("translatePerioddisplay", "");
			const bool translatePeriodattribution = request->get_query_parameter("translatePeriodattribution", );
			const std::string translatePeriodcaching = request->get_query_parameter("translatePeriodcaching", "");
			const std::string translatePeriodsmartPeriodrendering = request->get_query_parameter("translatePeriodsmartPeriodrendering", "");
			const std::string translatePeriodcachingPeriodduration = request->get_query_parameter("translatePeriodcachingPeriodduration", "");
			const std::string translatePeriodsessionPeriodsavePeriodinterval = request->get_query_parameter("translatePeriodsessionPeriodsavePeriodinterval", "");
			const std::string translatePeriodsessionPeriodsavePeriodbatchLimit = request->get_query_parameter("translatePeriodsessionPeriodsavePeriodbatchLimit", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.translation.impl.UGCLanguageDetectorResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.translation.impl.UGCLanguageDetectorResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.translation.impl.UGCLanguageDetector/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.translation.impl.UGCLanguageDetectorResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.translation.impl.UGCLanguageDetectorResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.translation.impl.UGCLanguageDetectorResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.translation.impl.UGCLanguageDetectorResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string eventPeriodtopics = request->get_query_parameter("eventPeriodtopics", "");
			const std::string eventPeriodfilter = request->get_query_parameter("eventPeriodfilter", "");
			const int32_t poolSize = request->get_query_parameter("poolSize", 0);
			const int32_t maxPoolSize = request->get_query_parameter("maxPoolSize", 0);
			const int32_t queueSize = request->get_query_parameter("queueSize", 0);
			const int32_t keepAliveTime = request->get_query_parameter("keepAliveTime", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.dispatcher.impl.FlushServiceImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.dispatcher.impl.FlushServiceImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.ugcbase.dispatcher.impl.FlushServiceImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.dispatcher.impl.FlushServiceImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.dispatcher.impl.FlushServiceImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.dispatcher.impl.FlushServiceImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.dispatcher.impl.FlushServiceImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t threadPoolSize = request->get_query_parameter("threadPoolSize", 0);
			const int32_t delayTime = request->get_query_parameter("delayTime", 0);
			const int32_t workerSleepTime = request->get_query_parameter("workerSleepTime", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.impl.AysncReverseReplicatorImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.impl.AysncReverseReplicatorImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.AysncReverseReplicatorImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.impl.AysncReverseReplicatorImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.impl.AysncReverseReplicatorImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.impl.AysncReverseReplicatorImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.impl.AysncReverseReplicatorImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t poolSize = request->get_query_parameter("poolSize", 0);
			const int32_t maxPoolSize = request->get_query_parameter("maxPoolSize", 0);
			const int32_t queueSize = request->get_query_parameter("queueSize", 0);
			const int32_t keepAliveTime = request->get_query_parameter("keepAliveTime", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.impl.PublisherConfigurationImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.impl.PublisherConfigurationImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.PublisherConfigurationImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.impl.PublisherConfigurationImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.impl.PublisherConfigurationImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.impl.PublisherConfigurationImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.impl.PublisherConfigurationImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool isPrimaryPublisher = request->get_query_parameter("isPrimaryPublisher", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.impl.SocialUtilsImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.impl.SocialUtilsImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.SocialUtilsImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.impl.SocialUtilsImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.impl.SocialUtilsImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.impl.SocialUtilsImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.impl.SocialUtilsImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool legacyCloudUGCPathMapping = request->get_query_parameter("legacyCloudUGCPathMapping", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.moderation.impl.AutoModerationImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.moderation.impl.AutoModerationImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.AutoModerationImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.moderation.impl.AutoModerationImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.moderation.impl.AutoModerationImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.moderation.impl.AutoModerationImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.moderation.impl.AutoModerationImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool automoderationPeriodonfailurestop = request->get_query_parameter("automoderationPeriodonfailurestop", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.moderation.impl.SentimentProcessResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.moderation.impl.SentimentProcessResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.SentimentProcess/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.moderation.impl.SentimentProcessResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.moderation.impl.SentimentProcessResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.moderation.impl.SentimentProcessResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.moderation.impl.SentimentProcessResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string watchwordsPeriodpath = request->get_query_parameter("watchwordsPeriodpath", "");
			const std::string sentimentPeriodpath = request->get_query_parameter("sentimentPeriodpath", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.security.impl.DefaultAttachmentTypeBlacklistServiceResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.security.impl.DefaultAttachmentTypeBlacklistServiceResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.DefaultAttachmentTypeBlacklistService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.security.impl.DefaultAttachmentTypeBlacklistServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.security.impl.DefaultAttachmentTypeBlacklistServiceResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.security.impl.DefaultAttachmentTypeBlacklistServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.security.impl.DefaultAttachmentTypeBlacklistServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.security.impl.SaferSlingPostValidatorImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.security.impl.SaferSlingPostValidatorImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.SaferSlingPostValidatorImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.security.impl.SaferSlingPostValidatorImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.security.impl.SaferSlingPostValidatorImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.security.impl.SaferSlingPostValidatorImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.ugcbase.security.impl.SaferSlingPostValidatorImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.user.endpoints.impl.UsersGroupFromPublishServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.user.endpoints.impl.UsersGroupFromPublishServletResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.user.endpoints.impl.UsersGroupFromPublishServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.user.endpoints.impl.UsersGroupFromPublishServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.user.endpoints.impl.UsersGroupFromPublishServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.user.endpoints.impl.UsersGroupFromPublishServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.user.endpoints.impl.UsersGroupFromPublishServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string slingPeriodservletPeriodextensions = request->get_query_parameter("slingPeriodservletPeriodextensions", "");
			const std::string slingPeriodservletPeriodpaths = request->get_query_parameter("slingPeriodservletPeriodpaths", "");
			const std::string slingPeriodservletPeriodmethods = request->get_query_parameter("slingPeriodservletPeriodmethods", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.user.impl.transport.HttpToPublisherResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.user.impl.transport.HttpToPublisherResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.social.user.impl.transport.HttpToPublisher/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.user.impl.transport.HttpToPublisherResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.user.impl.transport.HttpToPublisherResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.user.impl.transport.HttpToPublisherResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.social.user.impl.transport.HttpToPublisherResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool enable = request->get_query_parameter("enable", );
			const std::string contextPeriodpath = request->get_query_parameter("contextPeriodpath", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.ui.wcm.commons.internal.servlets.rte.RTEFilterServletFactory.amendedResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.ui.wcm.commons.internal.servlets.rte.RTEFilterServletFactory.amendedResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.ui.wcm.commons.internal.servlets.rte.RTEFilterServletFactory.amended/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.ui.wcm.commons.internal.servlets.rte.RTEFilterServletFactory.amendedResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.ui.wcm.commons.internal.servlets.rte.RTEFilterServletFactory.amendedResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.ui.wcm.commons.internal.servlets.rte.RTEFilterServletFactory.amendedResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.ui.wcm.commons.internal.servlets.rte.RTEFilterServletFactory.amendedResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.upgrades.cleanup.impl.UpgradeContentCleanupResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.upgrades.cleanup.impl.UpgradeContentCleanupResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeContentCleanup/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.upgrades.cleanup.impl.UpgradeContentCleanupResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.upgrades.cleanup.impl.UpgradeContentCleanupResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.upgrades.cleanup.impl.UpgradeContentCleanupResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.upgrades.cleanup.impl.UpgradeContentCleanupResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string deletePeriodsql2Periodquery = request->get_query_parameter("deletePeriodsql2Periodquery", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.upgrades.cleanup.impl.UpgradeInstallFolderCleanupResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.upgrades.cleanup.impl.UpgradeInstallFolderCleanupResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeInstallFolderCleanup/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.upgrades.cleanup.impl.UpgradeInstallFolderCleanupResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.upgrades.cleanup.impl.UpgradeInstallFolderCleanupResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.upgrades.cleanup.impl.UpgradeInstallFolderCleanupResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.upgrades.cleanup.impl.UpgradeInstallFolderCleanupResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.jobs.async.impl.AsyncDeleteConfigProviderServiceResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.jobs.async.impl.AsyncDeleteConfigProviderServiceResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncDeleteConfigProviderService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.jobs.async.impl.AsyncDeleteConfigProviderServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.jobs.async.impl.AsyncDeleteConfigProviderServiceResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.jobs.async.impl.AsyncDeleteConfigProviderServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.jobs.async.impl.AsyncDeleteConfigProviderServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t threshold = request->get_query_parameter("threshold", 0);
			const std::string jobTopicName = request->get_query_parameter("jobTopicName", "");
			const bool emailEnabled = request->get_query_parameter("emailEnabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.jobs.async.impl.AsyncJobCleanUpTaskResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.jobs.async.impl.AsyncJobCleanUpTaskResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncJobCleanUpTask/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.jobs.async.impl.AsyncJobCleanUpTaskResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.jobs.async.impl.AsyncJobCleanUpTaskResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.jobs.async.impl.AsyncJobCleanUpTaskResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.jobs.async.impl.AsyncJobCleanUpTaskResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string schedulerPeriodexpression = request->get_query_parameter("schedulerPeriodexpression", "");
			const int32_t jobPeriodpurgePeriodthreshold = request->get_query_parameter("jobPeriodpurgePeriodthreshold", 0);
			const int32_t jobPeriodpurgePeriodmaxPeriodjobs = request->get_query_parameter("jobPeriodpurgePeriodmaxPeriodjobs", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.jobs.async.impl.AsyncMoveConfigProviderServiceResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.jobs.async.impl.AsyncMoveConfigProviderServiceResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncMoveConfigProviderService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.jobs.async.impl.AsyncMoveConfigProviderServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.jobs.async.impl.AsyncMoveConfigProviderServiceResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.jobs.async.impl.AsyncMoveConfigProviderServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.jobs.async.impl.AsyncMoveConfigProviderServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t threshold = request->get_query_parameter("threshold", 0);
			const std::string jobTopicName = request->get_query_parameter("jobTopicName", "");
			const bool emailEnabled = request->get_query_parameter("emailEnabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.jobs.async.impl.AsyncPageMoveConfigProviderServiceResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.jobs.async.impl.AsyncPageMoveConfigProviderServiceResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncPageMoveConfigProviderService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.jobs.async.impl.AsyncPageMoveConfigProviderServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.jobs.async.impl.AsyncPageMoveConfigProviderServiceResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.jobs.async.impl.AsyncPageMoveConfigProviderServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.jobs.async.impl.AsyncPageMoveConfigProviderServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t threshold = request->get_query_parameter("threshold", 0);
			const std::string jobTopicName = request->get_query_parameter("jobTopicName", "");
			const bool emailEnabled = request->get_query_parameter("emailEnabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.launches.impl.LaunchesEventHandlerResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.launches.impl.LaunchesEventHandlerResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.wcm.launches.impl.LaunchesEventHandler/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.launches.impl.LaunchesEventHandlerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.launches.impl.LaunchesEventHandlerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.launches.impl.LaunchesEventHandlerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.launches.impl.LaunchesEventHandlerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string eventPeriodfilter = request->get_query_parameter("eventPeriodfilter", "");
			const int32_t launchesPeriodeventhandlerPeriodthreadpoolPeriodmaxsize = request->get_query_parameter("launchesPeriodeventhandlerPeriodthreadpoolPeriodmaxsize", 0);
			const std::string launchesPeriodeventhandlerPeriodthreadpoolPeriodpriority = request->get_query_parameter("launchesPeriodeventhandlerPeriodthreadpoolPeriodpriority", "");
			const bool launchesPeriodeventhandlerPeriodupdatelastmodification = request->get_query_parameter("launchesPeriodeventhandlerPeriodupdatelastmodification", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.mobile.qrcode.servlet.QRCodeImageGeneratorResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.mobile.qrcode.servlet.QRCodeImageGeneratorResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.wcm.mobile.qrcode.servlet.QRCodeImageGenerator/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.mobile.qrcode.servlet.QRCodeImageGeneratorResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.mobile.qrcode.servlet.QRCodeImageGeneratorResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.mobile.qrcode.servlet.QRCodeImageGeneratorResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.mobile.qrcode.servlet.QRCodeImageGeneratorResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.style.internal.ComponentStyleInfoCacheImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.style.internal.ComponentStyleInfoCacheImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.wcm.style.internal.ComponentStyleInfoCacheImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.style.internal.ComponentStyleInfoCacheImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.style.internal.ComponentStyleInfoCacheImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.style.internal.ComponentStyleInfoCacheImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.style.internal.ComponentStyleInfoCacheImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t size = request->get_query_parameter("size", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.translation.impl.TranslationPlatformConfigurationImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.translation.impl.TranslationPlatformConfigurationImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.cq.wcm.translation.impl.TranslationPlatformConfigurationImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.translation.impl.TranslationPlatformConfigurationImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.translation.impl.TranslationPlatformConfigurationImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.translation.impl.TranslationPlatformConfigurationImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.cq.wcm.translation.impl.TranslationPlatformConfigurationImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string syncTranslationStatePeriodschedulingFormat = request->get_query_parameter("syncTranslationStatePeriodschedulingFormat", "");
			const std::string schedulingRepeatTranslationPeriodschedulingFormat = request->get_query_parameter("schedulingRepeatTranslationPeriodschedulingFormat", "");
			const std::string syncTranslationStatePeriodlockTimeoutInMinutes = request->get_query_parameter("syncTranslationStatePeriodlockTimeoutInMinutes", "");
			const std::string exportPeriodformat = request->get_query_parameter("exportPeriodformat", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.fd.fp.config.FormsPortalDraftsandSubmissionConfigServiceResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.fd.fp.config.FormsPortalDraftsandSubmissionConfigServiceResource()
{
	this->set_path("/system/console/configMgr/com.adobe.fd.fp.config.FormsPortalDraftsandSubmissionConfigService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.fd.fp.config.FormsPortalDraftsandSubmissionConfigServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.fd.fp.config.FormsPortalDraftsandSubmissionConfigServiceResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.fd.fp.config.FormsPortalDraftsandSubmissionConfigServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.fd.fp.config.FormsPortalDraftsandSubmissionConfigServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string draftPerioddataPeriodservice = request->get_query_parameter("draftPerioddataPeriodservice", "");
			const std::string draftPeriodmetadataPeriodservice = request->get_query_parameter("draftPeriodmetadataPeriodservice", "");
			const std::string submitPerioddataPeriodservice = request->get_query_parameter("submitPerioddataPeriodservice", "");
			const std::string submitPeriodmetadataPeriodservice = request->get_query_parameter("submitPeriodmetadataPeriodservice", "");
			const std::string pendingSignPerioddataPeriodservice = request->get_query_parameter("pendingSignPerioddataPeriodservice", "");
			const std::string pendingSignPeriodmetadataPeriodservice = request->get_query_parameter("pendingSignPeriodmetadataPeriodservice", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.fd.fp.config.FormsPortalSchedulerServiceResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.fd.fp.config.FormsPortalSchedulerServiceResource()
{
	this->set_path("/system/console/configMgr/com.adobe.fd.fp.config.FormsPortalSchedulerService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.fd.fp.config.FormsPortalSchedulerServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.fd.fp.config.FormsPortalSchedulerServiceResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.fd.fp.config.FormsPortalSchedulerServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.fd.fp.config.FormsPortalSchedulerServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string formportalPeriodinterval = request->get_query_parameter("formportalPeriodinterval", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.forms.common.service.impl.DefaultDataProviderResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.forms.common.service.impl.DefaultDataProviderResource()
{
	this->set_path("/system/console/configMgr/com.adobe.forms.common.service.impl.DefaultDataProvider/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.forms.common.service.impl.DefaultDataProviderResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.forms.common.service.impl.DefaultDataProviderResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.forms.common.service.impl.DefaultDataProviderResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.forms.common.service.impl.DefaultDataProviderResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.forms.common.service.impl.FormsCommonConfigurationServiceImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.forms.common.service.impl.FormsCommonConfigurationServiceImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.forms.common.service.impl.FormsCommonConfigurationServiceImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.forms.common.service.impl.FormsCommonConfigurationServiceImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.forms.common.service.impl.FormsCommonConfigurationServiceImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.forms.common.service.impl.FormsCommonConfigurationServiceImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.forms.common.service.impl.FormsCommonConfigurationServiceImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string tempStorageConfig = request->get_query_parameter("tempStorageConfig", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.forms.common.servlet.TempCleanUpTaskResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.forms.common.servlet.TempCleanUpTaskResource()
{
	this->set_path("/system/console/configMgr/com.adobe.forms.common.servlet.TempCleanUpTask/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.forms.common.servlet.TempCleanUpTaskResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.forms.common.servlet.TempCleanUpTaskResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.forms.common.servlet.TempCleanUpTaskResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.forms.common.servlet.TempCleanUpTaskResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string schedulerPeriodexpression = request->get_query_parameter("schedulerPeriodexpression", "");
			const std::string duration_for_Temporary_Storage = request->get_query_parameter("duration_for_Temporary_Storage", "");
			const std::string duration_for_Anonymous_Storage = request->get_query_parameter("duration_for_Anonymous_Storage", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.acp.platform.PlatformServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.acp.platform.PlatformServletResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.acp.platform.PlatformServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.acp.platform.PlatformServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.acp.platform.PlatformServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.acp.platform.PlatformServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.acp.platform.PlatformServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t queryPeriodlimit = request->get_query_parameter("queryPeriodlimit", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.activitystreams.impl.ActivityManagerImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.activitystreams.impl.ActivityManagerImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.activitystreams.impl.ActivityManagerImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.activitystreams.impl.ActivityManagerImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.activitystreams.impl.ActivityManagerImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.activitystreams.impl.ActivityManagerImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.activitystreams.impl.ActivityManagerImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool aggregatePerioddescendPeriodvirtual = request->get_query_parameter("aggregatePerioddescendPeriodvirtual", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.analyzer.base.SystemStatusServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.analyzer.base.SystemStatusServletResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.analyzer.base.SystemStatusServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.analyzer.base.SystemStatusServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.analyzer.base.SystemStatusServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.analyzer.base.SystemStatusServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.analyzer.base.SystemStatusServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool disabled = request->get_query_parameter("disabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.analyzer.scripts.compile.AllScriptsCompilerServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.analyzer.scripts.compile.AllScriptsCompilerServletResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.analyzer.scripts.compile.AllScriptsCompilerServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.analyzer.scripts.compile.AllScriptsCompilerServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.analyzer.scripts.compile.AllScriptsCompilerServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.analyzer.scripts.compile.AllScriptsCompilerServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.analyzer.scripts.compile.AllScriptsCompilerServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool disabled = request->get_query_parameter("disabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.apicontroller.FilterResolverHookFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.apicontroller.FilterResolverHookFactoryResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.apicontroller.FilterResolverHookFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.apicontroller.FilterResolverHookFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.apicontroller.FilterResolverHookFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.apicontroller.FilterResolverHookFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.apicontroller.FilterResolverHookFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string comPeriodadobePeriodcqPeriodcdnPeriodcdnRewriter = request->get_query_parameter("comPeriodadobePeriodcqPeriodcdnPeriodcdnRewriter", "");
			const std::string comPeriodadobePeriodcqPeriodcloudConfigPeriodcomponents = request->get_query_parameter("comPeriodadobePeriodcqPeriodcloudConfigPeriodcomponents", "");
			const std::string comPeriodadobePeriodcqPeriodcloudConfigPeriodcore = request->get_query_parameter("comPeriodadobePeriodcqPeriodcloudConfigPeriodcore", "");
			const std::string comPeriodadobePeriodcqPeriodcloudConfigPeriodui = request->get_query_parameter("comPeriodadobePeriodcqPeriodcloudConfigPeriodui", "");
			const std::string comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodeditor = request->get_query_parameter("comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodeditor", "");
			const std::string comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodprojectsPeriodcore = request->get_query_parameter("comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodprojectsPeriodcore", "");
			const std::string comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodprojectsPeriodwcmPeriodcore = request->get_query_parameter("comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodprojectsPeriodwcmPeriodcore", "");
			const std::string comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPerioduiPeriodcommons = request->get_query_parameter("comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPerioduiPeriodcommons", "");
			const std::string comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodwcmPeriodstyle = request->get_query_parameter("comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodwcmPeriodstyle", "");
			const std::string comPeriodadobePeriodcqPeriodcqActivitymapIntegration = request->get_query_parameter("comPeriodadobePeriodcqPeriodcqActivitymapIntegration", "");
			const std::string comPeriodadobePeriodcqPeriodcqContexthubCommons = request->get_query_parameter("comPeriodadobePeriodcqPeriodcqContexthubCommons", "");
			const std::string comPeriodadobePeriodcqPeriodcqDtm = request->get_query_parameter("comPeriodadobePeriodcqPeriodcqDtm", "");
			const std::string comPeriodadobePeriodcqPeriodcqHealthcheck = request->get_query_parameter("comPeriodadobePeriodcqPeriodcqHealthcheck", "");
			const std::string comPeriodadobePeriodcqPeriodcqMultisiteTargeting = request->get_query_parameter("comPeriodadobePeriodcqPeriodcqMultisiteTargeting", "");
			const std::string comPeriodadobePeriodcqPeriodcqPreUpgradeCleanup = request->get_query_parameter("comPeriodadobePeriodcqPeriodcqPreUpgradeCleanup", "");
			const std::string comPeriodadobePeriodcqPeriodcqProductInfoProvider = request->get_query_parameter("comPeriodadobePeriodcqPeriodcqProductInfoProvider", "");
			const std::string comPeriodadobePeriodcqPeriodcqRestSites = request->get_query_parameter("comPeriodadobePeriodcqPeriodcqRestSites", "");
			const std::string comPeriodadobePeriodcqPeriodcqSecurityHc = request->get_query_parameter("comPeriodadobePeriodcqPeriodcqSecurityHc", "");
			const std::string comPeriodadobePeriodcqPerioddamPeriodcqDamSvgHandler = request->get_query_parameter("comPeriodadobePeriodcqPerioddamPeriodcqDamSvgHandler", "");
			const std::string comPeriodadobePeriodcqPerioddamPeriodcqScene7Imaging = request->get_query_parameter("comPeriodadobePeriodcqPerioddamPeriodcqScene7Imaging", "");
			const std::string comPeriodadobePeriodcqPerioddtmReactorPeriodcore = request->get_query_parameter("comPeriodadobePeriodcqPerioddtmReactorPeriodcore", "");
			const std::string comPeriodadobePeriodcqPerioddtmReactorPeriodui = request->get_query_parameter("comPeriodadobePeriodcqPerioddtmReactorPeriodui", "");
			const std::string comPeriodadobePeriodcqPeriodexpJspelResolver = request->get_query_parameter("comPeriodadobePeriodcqPeriodexpJspelResolver", "");
			const std::string comPeriodadobePeriodcqPeriodinboxPeriodcqInbox = request->get_query_parameter("comPeriodadobePeriodcqPeriodinboxPeriodcqInbox", "");
			const std::string comPeriodadobePeriodcqPeriodjsonSchemaParser = request->get_query_parameter("comPeriodadobePeriodcqPeriodjsonSchemaParser", "");
			const std::string comPeriodadobePeriodcqPeriodmediaPeriodcqMediaPublishingDpsFpCore = request->get_query_parameter("comPeriodadobePeriodcqPeriodmediaPeriodcqMediaPublishingDpsFpCore", "");
			const std::string comPeriodadobePeriodcqPeriodmobilePeriodcqMobileCaas = request->get_query_parameter("comPeriodadobePeriodcqPeriodmobilePeriodcqMobileCaas", "");
			const std::string comPeriodadobePeriodcqPeriodmobilePeriodcqMobileIndexBuilder = request->get_query_parameter("comPeriodadobePeriodcqPeriodmobilePeriodcqMobileIndexBuilder", "");
			const std::string comPeriodadobePeriodcqPeriodmobilePeriodcqMobilePhonegapBuild = request->get_query_parameter("comPeriodadobePeriodcqPeriodmobilePeriodcqMobilePhonegapBuild", "");
			const std::string comPeriodadobePeriodcqPeriodmyspell = request->get_query_parameter("comPeriodadobePeriodcqPeriodmyspell", "");
			const std::string comPeriodadobePeriodcqPeriodsamplePeriodwePeriodretailPeriodcore = request->get_query_parameter("comPeriodadobePeriodcqPeriodsamplePeriodwePeriodretailPeriodcore", "");
			const std::string comPeriodadobePeriodcqPeriodscreensPeriodcomPeriodadobePeriodcqPeriodscreensPerioddcc = request->get_query_parameter("comPeriodadobePeriodcqPeriodscreensPeriodcomPeriodadobePeriodcqPeriodscreensPerioddcc", "");
			const std::string comPeriodadobePeriodcqPeriodscreensPeriodcomPeriodadobePeriodcqPeriodscreensPeriodmqPeriodcore = request->get_query_parameter("comPeriodadobePeriodcqPeriodscreensPeriodcomPeriodadobePeriodcqPeriodscreensPeriodmqPeriodcore", "");
			const std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialAsProvider = request->get_query_parameter("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialAsProvider", "");
			const std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialBadgingBasicImpl = request->get_query_parameter("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialBadgingBasicImpl", "");
			const std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialBadgingImpl = request->get_query_parameter("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialBadgingImpl", "");
			const std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialCalendarImpl = request->get_query_parameter("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialCalendarImpl", "");
			const std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialContentFragmentsImpl = request->get_query_parameter("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialContentFragmentsImpl", "");
			const std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialEnablementImpl = request->get_query_parameter("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialEnablementImpl", "");
			const std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialGraphImpl = request->get_query_parameter("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialGraphImpl", "");
			const std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialIdeationImpl = request->get_query_parameter("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialIdeationImpl", "");
			const std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialJcrProvider = request->get_query_parameter("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialJcrProvider", "");
			const std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialMembersImpl = request->get_query_parameter("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialMembersImpl", "");
			const std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialMsProvider = request->get_query_parameter("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialMsProvider", "");
			const std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialNotificationsChannelsWeb = request->get_query_parameter("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialNotificationsChannelsWeb", "");
			const std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialNotificationsImpl = request->get_query_parameter("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialNotificationsImpl", "");
			const std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialRdbProvider = request->get_query_parameter("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialRdbProvider", "");
			const std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScfImpl = request->get_query_parameter("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScfImpl", "");
			const std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScoringBasicImpl = request->get_query_parameter("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScoringBasicImpl", "");
			const std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScoringImpl = request->get_query_parameter("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScoringImpl", "");
			const std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialServiceusersImpl = request->get_query_parameter("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialServiceusersImpl", "");
			const std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialSrpImpl = request->get_query_parameter("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialSrpImpl", "");
			const std::string comPeriodadobePeriodcqPeriodsocialPeriodcqSocialUgcbaseImpl = request->get_query_parameter("comPeriodadobePeriodcqPeriodsocialPeriodcqSocialUgcbaseImpl", "");
			const std::string comPeriodadobePerioddamPeriodcqDamCfmImpl = request->get_query_parameter("comPeriodadobePerioddamPeriodcqDamCfmImpl", "");
			const std::string comPeriodadobePeriodformsPeriodfoundationFormsFoundationBase = request->get_query_parameter("comPeriodadobePeriodformsPeriodfoundationFormsFoundationBase", "");
			const std::string comPeriodadobePeriodgranitePeriodapicontroller = request->get_query_parameter("comPeriodadobePeriodgranitePeriodapicontroller", "");
			const std::string comPeriodadobePeriodgranitePeriodassetPeriodcore = request->get_query_parameter("comPeriodadobePeriodgranitePeriodassetPeriodcore", "");
			const std::string comPeriodadobePeriodgranitePeriodauthPeriodsso = request->get_query_parameter("comPeriodadobePeriodgranitePeriodauthPeriodsso", "");
			const std::string comPeriodadobePeriodgranitePeriodbundlesPeriodhcPeriodimpl = request->get_query_parameter("comPeriodadobePeriodgranitePeriodbundlesPeriodhcPeriodimpl", "");
			const std::string comPeriodadobePeriodgranitePeriodcompatRouter = request->get_query_parameter("comPeriodadobePeriodgranitePeriodcompatRouter", "");
			const std::string comPeriodadobePeriodgranitePeriodconf = request->get_query_parameter("comPeriodadobePeriodgranitePeriodconf", "");
			const std::string comPeriodadobePeriodgranitePeriodconfPerioduiPeriodcore = request->get_query_parameter("comPeriodadobePeriodgranitePeriodconfPerioduiPeriodcore", "");
			const std::string comPeriodadobePeriodgranitePeriodcors = request->get_query_parameter("comPeriodadobePeriodgranitePeriodcors", "");
			const std::string comPeriodadobePeriodgranitePeriodcrxExplorer = request->get_query_parameter("comPeriodadobePeriodgranitePeriodcrxExplorer", "");
			const std::string comPeriodadobePeriodgranitePeriodcrxdeLite = request->get_query_parameter("comPeriodadobePeriodgranitePeriodcrxdeLite", "");
			const std::string comPeriodadobePeriodgranitePeriodcryptoPeriodconfig = request->get_query_parameter("comPeriodadobePeriodgranitePeriodcryptoPeriodconfig", "");
			const std::string comPeriodadobePeriodgranitePeriodcryptoPeriodextension = request->get_query_parameter("comPeriodadobePeriodgranitePeriodcryptoPeriodextension", "");
			const std::string comPeriodadobePeriodgranitePeriodcryptoPeriodfile = request->get_query_parameter("comPeriodadobePeriodgranitePeriodcryptoPeriodfile", "");
			const std::string comPeriodadobePeriodgranitePeriodcryptoPeriodjcr = request->get_query_parameter("comPeriodadobePeriodgranitePeriodcryptoPeriodjcr", "");
			const std::string comPeriodadobePeriodgranitePeriodcsrf = request->get_query_parameter("comPeriodadobePeriodgranitePeriodcsrf", "");
			const std::string comPeriodadobePeriodgranitePerioddistributionPeriodcore = request->get_query_parameter("comPeriodadobePeriodgranitePerioddistributionPeriodcore", "");
			const std::string comPeriodadobePeriodgranitePerioddropwizardPeriodmetrics = request->get_query_parameter("comPeriodadobePeriodgranitePerioddropwizardPeriodmetrics", "");
			const std::string comPeriodadobePeriodgranitePeriodfragsPeriodimpl = request->get_query_parameter("comPeriodadobePeriodgranitePeriodfragsPeriodimpl", "");
			const std::string comPeriodadobePeriodgranitePeriodgibson = request->get_query_parameter("comPeriodadobePeriodgranitePeriodgibson", "");
			const std::string comPeriodadobePeriodgranitePeriodinfocollector = request->get_query_parameter("comPeriodadobePeriodgranitePeriodinfocollector", "");
			const std::string comPeriodadobePeriodgranitePeriodinstallerPeriodfactoryPeriodpackages = request->get_query_parameter("comPeriodadobePeriodgranitePeriodinstallerPeriodfactoryPeriodpackages", "");
			const std::string comPeriodadobePeriodgranitePeriodjettyPeriodssl = request->get_query_parameter("comPeriodadobePeriodgranitePeriodjettyPeriodssl", "");
			const std::string comPeriodadobePeriodgranitePeriodjobsPeriodasync = request->get_query_parameter("comPeriodadobePeriodgranitePeriodjobsPeriodasync", "");
			const std::string comPeriodadobePeriodgranitePeriodmaintenancePeriodoak = request->get_query_parameter("comPeriodadobePeriodgranitePeriodmaintenancePeriodoak", "");
			const std::string comPeriodadobePeriodgranitePeriodmonitoringPeriodcore = request->get_query_parameter("comPeriodadobePeriodgranitePeriodmonitoringPeriodcore", "");
			const std::string comPeriodadobePeriodgranitePeriodqueries = request->get_query_parameter("comPeriodadobePeriodgranitePeriodqueries", "");
			const std::string comPeriodadobePeriodgranitePeriodreplicationPeriodhcPeriodimpl = request->get_query_parameter("comPeriodadobePeriodgranitePeriodreplicationPeriodhcPeriodimpl", "");
			const std::string comPeriodadobePeriodgranitePeriodrepositoryPeriodchecker = request->get_query_parameter("comPeriodadobePeriodgranitePeriodrepositoryPeriodchecker", "");
			const std::string comPeriodadobePeriodgranitePeriodrepositoryPeriodhcPeriodimpl = request->get_query_parameter("comPeriodadobePeriodgranitePeriodrepositoryPeriodhcPeriodimpl", "");
			const std::string comPeriodadobePeriodgranitePeriodrestPeriodassets = request->get_query_parameter("comPeriodadobePeriodgranitePeriodrestPeriodassets", "");
			const std::string comPeriodadobePeriodgranitePeriodsecurityPeriodui = request->get_query_parameter("comPeriodadobePeriodgranitePeriodsecurityPeriodui", "");
			const std::string comPeriodadobePeriodgranitePeriodstartup = request->get_query_parameter("comPeriodadobePeriodgranitePeriodstartup", "");
			const std::string comPeriodadobePeriodgranitePeriodtagsoup = request->get_query_parameter("comPeriodadobePeriodgranitePeriodtagsoup", "");
			const std::string comPeriodadobePeriodgranitePeriodtaskmanagementPeriodcore = request->get_query_parameter("comPeriodadobePeriodgranitePeriodtaskmanagementPeriodcore", "");
			const std::string comPeriodadobePeriodgranitePeriodtaskmanagementPeriodworkflow = request->get_query_parameter("comPeriodadobePeriodgranitePeriodtaskmanagementPeriodworkflow", "");
			const std::string comPeriodadobePeriodgranitePerioduiPeriodclientlibsPeriodcompilerPeriodless = request->get_query_parameter("comPeriodadobePeriodgranitePerioduiPeriodclientlibsPeriodcompilerPeriodless", "");
			const std::string comPeriodadobePeriodgranitePerioduiPeriodclientlibsPeriodprocessorPeriodgcc = request->get_query_parameter("comPeriodadobePeriodgranitePerioduiPeriodclientlibsPeriodprocessorPeriodgcc", "");
			const std::string comPeriodadobePeriodgranitePeriodwebconsolePeriodplugins = request->get_query_parameter("comPeriodadobePeriodgranitePeriodwebconsolePeriodplugins", "");
			const std::string comPeriodadobePeriodgranitePeriodworkflowPeriodconsole = request->get_query_parameter("comPeriodadobePeriodgranitePeriodworkflowPeriodconsole", "");
			const std::string comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodlinux = request->get_query_parameter("comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodlinux", "");
			const std::string comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodmacosx = request->get_query_parameter("comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodmacosx", "");
			const std::string comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodwin = request->get_query_parameter("comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodwin", "");
			const std::string comPerioddayPeriodcommonsPeriodosgiPeriodwrapperPeriodsimpleJndi = request->get_query_parameter("comPerioddayPeriodcommonsPeriodosgiPeriodwrapperPeriodsimpleJndi", "");
			const std::string comPerioddayPeriodcqPeriodcqAuthhandler = request->get_query_parameter("comPerioddayPeriodcqPeriodcqAuthhandler", "");
			const std::string comPerioddayPeriodcqPeriodcqCompatConfigupdate = request->get_query_parameter("comPerioddayPeriodcqPeriodcqCompatConfigupdate", "");
			const std::string comPerioddayPeriodcqPeriodcqLicensebranding = request->get_query_parameter("comPerioddayPeriodcqPeriodcqLicensebranding", "");
			const std::string comPerioddayPeriodcqPeriodcqNotifcationImpl = request->get_query_parameter("comPerioddayPeriodcqPeriodcqNotifcationImpl", "");
			const std::string comPerioddayPeriodcqPeriodcqReplicationAudit = request->get_query_parameter("comPerioddayPeriodcqPeriodcqReplicationAudit", "");
			const std::string comPerioddayPeriodcqPeriodcqSearchExt = request->get_query_parameter("comPerioddayPeriodcqPeriodcqSearchExt", "");
			const std::string comPerioddayPeriodcqPerioddamPeriodcqDamAnnotationPrint = request->get_query_parameter("comPerioddayPeriodcqPerioddamPeriodcqDamAnnotationPrint", "");
			const std::string comPerioddayPeriodcqPerioddamPeriodcqDamAssetUsage = request->get_query_parameter("comPerioddayPeriodcqPerioddamPeriodcqDamAssetUsage", "");
			const std::string comPerioddayPeriodcqPerioddamPeriodcqDamS7dam = request->get_query_parameter("comPerioddayPeriodcqPerioddamPeriodcqDamS7dam", "");
			const std::string comPerioddayPeriodcqPerioddamPeriodcqDamSimilaritysearch = request->get_query_parameter("comPerioddayPeriodcqPerioddamPeriodcqDamSimilaritysearch", "");
			const std::string comPerioddayPeriodcqPerioddamPerioddamWebdavSupport = request->get_query_parameter("comPerioddayPeriodcqPerioddamPerioddamWebdavSupport", "");
			const std::string comPerioddayPeriodcqPeriodpreUpgradeTasks = request->get_query_parameter("comPerioddayPeriodcqPeriodpreUpgradeTasks", "");
			const std::string comPerioddayPeriodcqPeriodreplicationPeriodextensions = request->get_query_parameter("comPerioddayPeriodcqPeriodreplicationPeriodextensions", "");
			const std::string comPerioddayPeriodcqPeriodwcmPeriodcqMsmCore = request->get_query_parameter("comPerioddayPeriodcqPeriodwcmPeriodcqMsmCore", "");
			const std::string comPerioddayPeriodcqPeriodwcmPeriodcqWcmTranslation = request->get_query_parameter("comPerioddayPeriodcqPeriodwcmPeriodcqWcmTranslation", "");
			const std::string dayCommonsJrawio = request->get_query_parameter("dayCommonsJrawio", "");
			const std::string orgPeriodapachePeriodariesPeriodjmxPeriodwhiteboard = request->get_query_parameter("orgPeriodapachePeriodariesPeriodjmxPeriodwhiteboard", "");
			const std::string orgPeriodapachePeriodfelixPeriodhttpPeriodsslfilter = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodhttpPeriodsslfilter", "");
			const std::string orgPeriodapachePeriodfelixPeriodorgPeriodapachePeriodfelixPeriodthreaddump = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodorgPeriodapachePeriodfelixPeriodthreaddump", "");
			const std::string orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodds = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodds", "");
			const std::string orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodevent = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodevent", "");
			const std::string orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodmemoryusage = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodmemoryusage", "");
			const std::string orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodpackageadmin = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodpackageadmin", "");
			const std::string orgPeriodapachePeriodjackrabbitPeriodoakAuthLdap = request->get_query_parameter("orgPeriodapachePeriodjackrabbitPeriodoakAuthLdap", "");
			const std::string orgPeriodapachePeriodjackrabbitPeriodoakSegmentTar = request->get_query_parameter("orgPeriodapachePeriodjackrabbitPeriodoakSegmentTar", "");
			const std::string orgPeriodapachePeriodjackrabbitPeriodoakSolrOsgi = request->get_query_parameter("orgPeriodapachePeriodjackrabbitPeriodoakSolrOsgi", "");
			const std::string orgPeriodapachePeriodslingPeriodbundleresourcePeriodimpl = request->get_query_parameter("orgPeriodapachePeriodslingPeriodbundleresourcePeriodimpl", "");
			const std::string orgPeriodapachePeriodslingPeriodcommonsPeriodfsclassloader = request->get_query_parameter("orgPeriodapachePeriodslingPeriodcommonsPeriodfsclassloader", "");
			const std::string orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodwebconsole = request->get_query_parameter("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodwebconsole", "");
			const std::string orgPeriodapachePeriodslingPerioddatasource = request->get_query_parameter("orgPeriodapachePeriodslingPerioddatasource", "");
			const std::string orgPeriodapachePeriodslingPerioddiscoveryPeriodbase = request->get_query_parameter("orgPeriodapachePeriodslingPerioddiscoveryPeriodbase", "");
			const std::string orgPeriodapachePeriodslingPerioddiscoveryPeriodoak = request->get_query_parameter("orgPeriodapachePeriodslingPerioddiscoveryPeriodoak", "");
			const std::string orgPeriodapachePeriodslingPerioddiscoveryPeriodsupport = request->get_query_parameter("orgPeriodapachePeriodslingPerioddiscoveryPeriodsupport", "");
			const std::string orgPeriodapachePeriodslingPerioddistributionPeriodapi = request->get_query_parameter("orgPeriodapachePeriodslingPerioddistributionPeriodapi", "");
			const std::string orgPeriodapachePeriodslingPerioddistributionPeriodcore = request->get_query_parameter("orgPeriodapachePeriodslingPerioddistributionPeriodcore", "");
			const std::string orgPeriodapachePeriodslingPeriodextensionsPeriodwebconsolesecurityprovider = request->get_query_parameter("orgPeriodapachePeriodslingPeriodextensionsPeriodwebconsolesecurityprovider", "");
			const std::string orgPeriodapachePeriodslingPeriodhcPeriodwebconsole = request->get_query_parameter("orgPeriodapachePeriodslingPeriodhcPeriodwebconsole", "");
			const std::string orgPeriodapachePeriodslingPeriodinstallerPeriodconsole = request->get_query_parameter("orgPeriodapachePeriodslingPeriodinstallerPeriodconsole", "");
			const std::string orgPeriodapachePeriodslingPeriodinstallerPeriodproviderPeriodfile = request->get_query_parameter("orgPeriodapachePeriodslingPeriodinstallerPeriodproviderPeriodfile", "");
			const std::string orgPeriodapachePeriodslingPeriodinstallerPeriodproviderPeriodjcr = request->get_query_parameter("orgPeriodapachePeriodslingPeriodinstallerPeriodproviderPeriodjcr", "");
			const std::string orgPeriodapachePeriodslingPeriodjcrPerioddavex = request->get_query_parameter("orgPeriodapachePeriodslingPeriodjcrPerioddavex", "");
			const std::string orgPeriodapachePeriodslingPeriodjcrPeriodresourcesecurity = request->get_query_parameter("orgPeriodapachePeriodslingPeriodjcrPeriodresourcesecurity", "");
			const std::string orgPeriodapachePeriodslingPeriodjmxPeriodprovider = request->get_query_parameter("orgPeriodapachePeriodslingPeriodjmxPeriodprovider", "");
			const std::string orgPeriodapachePeriodslingPeriodlaunchpadPeriodinstaller = request->get_query_parameter("orgPeriodapachePeriodslingPeriodlaunchpadPeriodinstaller", "");
			const std::string orgPeriodapachePeriodslingPeriodmodelsPeriodimpl = request->get_query_parameter("orgPeriodapachePeriodslingPeriodmodelsPeriodimpl", "");
			const std::string orgPeriodapachePeriodslingPeriodrepoinitPeriodparser = request->get_query_parameter("orgPeriodapachePeriodslingPeriodrepoinitPeriodparser", "");
			const std::string orgPeriodapachePeriodslingPeriodresourcePeriodinventory = request->get_query_parameter("orgPeriodapachePeriodslingPeriodresourcePeriodinventory", "");
			const std::string orgPeriodapachePeriodslingPeriodresourceresolver = request->get_query_parameter("orgPeriodapachePeriodslingPeriodresourceresolver", "");
			const std::string orgPeriodapachePeriodslingPeriodscriptingPeriodjavascript = request->get_query_parameter("orgPeriodapachePeriodslingPeriodscriptingPeriodjavascript", "");
			const std::string orgPeriodapachePeriodslingPeriodscriptingPeriodjst = request->get_query_parameter("orgPeriodapachePeriodslingPeriodscriptingPeriodjst", "");
			const std::string orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodjsPeriodprovider = request->get_query_parameter("orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodjsPeriodprovider", "");
			const std::string orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodmodelsPeriodprovider = request->get_query_parameter("orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodmodelsPeriodprovider", "");
			const std::string orgPeriodapachePeriodslingPeriodsecurity = request->get_query_parameter("orgPeriodapachePeriodslingPeriodsecurity", "");
			const std::string orgPeriodapachePeriodslingPeriodservletsPeriodcompat = request->get_query_parameter("orgPeriodapachePeriodslingPeriodservletsPeriodcompat", "");
			const std::string orgPeriodapachePeriodslingPeriodservletsPeriodget = request->get_query_parameter("orgPeriodapachePeriodslingPeriodservletsPeriodget", "");
			const std::string orgPeriodapachePeriodslingPeriodstartupfilterPerioddisabler = request->get_query_parameter("orgPeriodapachePeriodslingPeriodstartupfilterPerioddisabler", "");
			const std::string orgPeriodapachePeriodslingPeriodtracer = request->get_query_parameter("orgPeriodapachePeriodslingPeriodtracer", "");
			const std::string wePeriodretailPeriodclientPeriodappPeriodcore = request->get_query_parameter("wePeriodretailPeriodclientPeriodappPeriodcore", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.cert.impl.ClientCertAuthHandlerResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.cert.impl.ClientCertAuthHandlerResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.auth.cert.impl.ClientCertAuthHandler/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.cert.impl.ClientCertAuthHandlerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.cert.impl.ClientCertAuthHandlerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.cert.impl.ClientCertAuthHandlerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.cert.impl.ClientCertAuthHandlerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string path = request->get_query_parameter("path", "");
			const int32_t servicePeriodranking = request->get_query_parameter("servicePeriodranking", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.imsResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.imsResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.auth.ims/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.imsResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.imsResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.imsResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.imsResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string configid = request->get_query_parameter("configid", "");
			const std::string scope = request->get_query_parameter("scope", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.ims.impl.ExternalUserIdMappingProviderExtensionResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.ims.impl.ExternalUserIdMappingProviderExtensionResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.auth.ims.impl.ExternalUserIdMappingProviderExtension/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.ims.impl.ExternalUserIdMappingProviderExtensionResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.ims.impl.ExternalUserIdMappingProviderExtensionResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.ims.impl.ExternalUserIdMappingProviderExtensionResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.ims.impl.ExternalUserIdMappingProviderExtensionResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string oauthPeriodproviderPeriodid = request->get_query_parameter("oauthPeriodproviderPeriodid", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.ims.impl.IMSAccessTokenRequestCustomizerImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.ims.impl.IMSAccessTokenRequestCustomizerImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSAccessTokenRequestCustomizerImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.ims.impl.IMSAccessTokenRequestCustomizerImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.ims.impl.IMSAccessTokenRequestCustomizerImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.ims.impl.IMSAccessTokenRequestCustomizerImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.ims.impl.IMSAccessTokenRequestCustomizerImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string authPeriodimsPeriodclientPeriodsecret = request->get_query_parameter("authPeriodimsPeriodclientPeriodsecret", "");
			const std::string customizerPeriodtype = request->get_query_parameter("customizerPeriodtype", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.ims.impl.IMSInstanceCredentialsValidatorResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.ims.impl.IMSInstanceCredentialsValidatorResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSInstanceCredentialsValidator/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.ims.impl.IMSInstanceCredentialsValidatorResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.ims.impl.IMSInstanceCredentialsValidatorResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.ims.impl.IMSInstanceCredentialsValidatorResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.ims.impl.IMSInstanceCredentialsValidatorResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string oauthPeriodproviderPeriodid = request->get_query_parameter("oauthPeriodproviderPeriodid", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.ims.impl.IMSProviderImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.ims.impl.IMSProviderImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSProviderImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.ims.impl.IMSProviderImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.ims.impl.IMSProviderImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.ims.impl.IMSProviderImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.ims.impl.IMSProviderImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string oauthPeriodproviderPeriodid = request->get_query_parameter("oauthPeriodproviderPeriodid", "");
			const std::string oauthPeriodproviderPeriodimsPeriodauthorizationPeriodurl = request->get_query_parameter("oauthPeriodproviderPeriodimsPeriodauthorizationPeriodurl", "");
			const std::string oauthPeriodproviderPeriodimsPeriodtokenPeriodurl = request->get_query_parameter("oauthPeriodproviderPeriodimsPeriodtokenPeriodurl", "");
			const std::string oauthPeriodproviderPeriodimsPeriodprofilePeriodurl = request->get_query_parameter("oauthPeriodproviderPeriodimsPeriodprofilePeriodurl", "");
			const std::string oauthPeriodproviderPeriodimsPeriodvalidatePeriodtokenPeriodurl = request->get_query_parameter("oauthPeriodproviderPeriodimsPeriodvalidatePeriodtokenPeriodurl", "");
			const std::string oauthPeriodproviderPeriodimsPeriodsessionPeriodproperty = request->get_query_parameter("oauthPeriodproviderPeriodimsPeriodsessionPeriodproperty", "");
			const std::string oauthPeriodproviderPeriodimsPeriodservicePeriodtokenPeriodclientPeriodid = request->get_query_parameter("oauthPeriodproviderPeriodimsPeriodservicePeriodtokenPeriodclientPeriodid", "");
			const std::string oauthPeriodproviderPeriodimsPeriodservicePeriodtokenPeriodclientPeriodsecret = request->get_query_parameter("oauthPeriodproviderPeriodimsPeriodservicePeriodtokenPeriodclientPeriodsecret", "");
			const std::string oauthPeriodproviderPeriodimsPeriodservicePeriodtoken = request->get_query_parameter("oauthPeriodproviderPeriodimsPeriodservicePeriodtoken", "");
			const std::string imsPeriodorgPeriodref = request->get_query_parameter("imsPeriodorgPeriodref", "");
			const bool oauthPeriodproviderPeriodimsPeriodonlyPeriodlicensePeriodgroup = request->get_query_parameter("oauthPeriodproviderPeriodimsPeriodonlyPeriodlicensePeriodgroup", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.ims.impl.ImsConfigProviderImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.ims.impl.ImsConfigProviderImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.auth.ims.impl.ImsConfigProviderImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.ims.impl.ImsConfigProviderImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.ims.impl.ImsConfigProviderImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.ims.impl.ImsConfigProviderImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.ims.impl.ImsConfigProviderImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string oauthPeriodconfigmanagerPeriodimsPeriodconfigid = request->get_query_parameter("oauthPeriodconfigmanagerPeriodimsPeriodconfigid", "");
			const std::string imsPeriodowningEntity = request->get_query_parameter("imsPeriodowningEntity", "");
			const std::string aemPeriodinstanceId = request->get_query_parameter("aemPeriodinstanceId", "");
			const std::string imsPeriodserviceCode = request->get_query_parameter("imsPeriodserviceCode", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.accesstoken.providerResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.accesstoken.providerResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.auth.oauth.accesstoken.provider/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.accesstoken.providerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.accesstoken.providerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.accesstoken.providerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.accesstoken.providerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string name = request->get_query_parameter("name", "");
			const std::string authPeriodtokenPeriodproviderPeriodtitle = request->get_query_parameter("authPeriodtokenPeriodproviderPeriodtitle", "");
			const std::string authPeriodtokenPeriodproviderPeriodendpoint = request->get_query_parameter("authPeriodtokenPeriodproviderPeriodendpoint", "");
			const std::string authPeriodaccessPeriodtokenPeriodrequest = request->get_query_parameter("authPeriodaccessPeriodtokenPeriodrequest", "");
			const std::string authPeriodtokenPeriodproviderPeriodkeypairPeriodalias = request->get_query_parameter("authPeriodtokenPeriodproviderPeriodkeypairPeriodalias", "");
			const int32_t authPeriodtokenPeriodproviderPeriodconnPeriodtimeout = request->get_query_parameter("authPeriodtokenPeriodproviderPeriodconnPeriodtimeout", 0);
			const int32_t authPeriodtokenPeriodproviderPeriodsoPeriodtimeout = request->get_query_parameter("authPeriodtokenPeriodproviderPeriodsoPeriodtimeout", 0);
			const std::string authPeriodtokenPeriodproviderPeriodclientPeriodid = request->get_query_parameter("authPeriodtokenPeriodproviderPeriodclientPeriodid", "");
			const std::string authPeriodtokenPeriodproviderPeriodscope = request->get_query_parameter("authPeriodtokenPeriodproviderPeriodscope", "");
			const bool authPeriodtokenPeriodproviderPeriodreusePeriodaccessPeriodtoken = request->get_query_parameter("authPeriodtokenPeriodproviderPeriodreusePeriodaccessPeriodtoken", );
			const bool authPeriodtokenPeriodproviderPeriodrelaxedPeriodssl = request->get_query_parameter("authPeriodtokenPeriodproviderPeriodrelaxedPeriodssl", );
			const std::string tokenPeriodrequestPeriodcustomizerPeriodtype = request->get_query_parameter("tokenPeriodrequestPeriodcustomizerPeriodtype", "");
			const std::string authPeriodtokenPeriodvalidatorPeriodtype = request->get_query_parameter("authPeriodtokenPeriodvalidatorPeriodtype", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.BearerAuthenticationHandlerResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.BearerAuthenticationHandlerResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.auth.oauth.impl.BearerAuthenticationHandler/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.BearerAuthenticationHandlerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.BearerAuthenticationHandlerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.BearerAuthenticationHandlerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.BearerAuthenticationHandlerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string path = request->get_query_parameter("path", "");
			const bool authPeriodbearerPeriodsyncPeriodims = request->get_query_parameter("authPeriodbearerPeriodsyncPeriodims", );
			const std::string authPeriodtokenRequestParameter = request->get_query_parameter("authPeriodtokenRequestParameter", "");
			const std::string oauthPeriodbearerPeriodconfigid = request->get_query_parameter("oauthPeriodbearerPeriodconfigid", "");
			const bool oauthPeriodjwtPeriodsupport = request->get_query_parameter("oauthPeriodjwtPeriodsupport", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.DefaultTokenValidatorImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.DefaultTokenValidatorImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.auth.oauth.impl.DefaultTokenValidatorImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.DefaultTokenValidatorImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.DefaultTokenValidatorImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.DefaultTokenValidatorImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.DefaultTokenValidatorImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string authPeriodtokenPeriodvalidatorPeriodtype = request->get_query_parameter("authPeriodtokenPeriodvalidatorPeriodtype", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.FacebookProviderImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.FacebookProviderImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.auth.oauth.impl.FacebookProviderImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.FacebookProviderImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.FacebookProviderImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.FacebookProviderImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.FacebookProviderImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string oauthPeriodproviderPeriodid = request->get_query_parameter("oauthPeriodproviderPeriodid", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.GithubProviderImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.GithubProviderImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.auth.oauth.impl.GithubProviderImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.GithubProviderImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.GithubProviderImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.GithubProviderImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.GithubProviderImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string oauthPeriodproviderPeriodid = request->get_query_parameter("oauthPeriodproviderPeriodid", "");
			const std::string oauthPeriodproviderPeriodgithubPeriodauthorizationPeriodurl = request->get_query_parameter("oauthPeriodproviderPeriodgithubPeriodauthorizationPeriodurl", "");
			const std::string oauthPeriodproviderPeriodgithubPeriodtokenPeriodurl = request->get_query_parameter("oauthPeriodproviderPeriodgithubPeriodtokenPeriodurl", "");
			const std::string oauthPeriodproviderPeriodgithubPeriodprofilePeriodurl = request->get_query_parameter("oauthPeriodproviderPeriodgithubPeriodprofilePeriodurl", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.GraniteProviderResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.GraniteProviderResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.auth.oauth.impl.GraniteProvider/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.GraniteProviderResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.GraniteProviderResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.GraniteProviderResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.GraniteProviderResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string oauthPeriodproviderPeriodid = request->get_query_parameter("oauthPeriodproviderPeriodid", "");
			const std::string oauthPeriodproviderPeriodgranitePeriodauthorizationPeriodurl = request->get_query_parameter("oauthPeriodproviderPeriodgranitePeriodauthorizationPeriodurl", "");
			const std::string oauthPeriodproviderPeriodgranitePeriodtokenPeriodurl = request->get_query_parameter("oauthPeriodproviderPeriodgranitePeriodtokenPeriodurl", "");
			const std::string oauthPeriodproviderPeriodgranitePeriodprofilePeriodurl = request->get_query_parameter("oauthPeriodproviderPeriodgranitePeriodprofilePeriodurl", "");
			const std::string oauthPeriodproviderPeriodgranitePeriodextendedPerioddetailsPeriodurls = request->get_query_parameter("oauthPeriodproviderPeriodgranitePeriodextendedPerioddetailsPeriodurls", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.helper.ProviderConfigManagerResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.helper.ProviderConfigManagerResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManager/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.helper.ProviderConfigManagerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.helper.ProviderConfigManagerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.helper.ProviderConfigManagerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.helper.ProviderConfigManagerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string oauthPeriodcookiePeriodloginPeriodtimeout = request->get_query_parameter("oauthPeriodcookiePeriodloginPeriodtimeout", "");
			const std::string oauthPeriodcookiePeriodmaxPeriodage = request->get_query_parameter("oauthPeriodcookiePeriodmaxPeriodage", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.helper.ProviderConfigManagerInternalResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.helper.ProviderConfigManagerInternalResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManagerInternal/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.helper.ProviderConfigManagerInternalResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.helper.ProviderConfigManagerInternalResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.helper.ProviderConfigManagerInternalResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.helper.ProviderConfigManagerInternalResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string oauthPeriodcookiePeriodloginPeriodtimeout = request->get_query_parameter("oauthPeriodcookiePeriodloginPeriodtimeout", "");
			const std::string oauthPeriodcookiePeriodmaxPeriodage = request->get_query_parameter("oauthPeriodcookiePeriodmaxPeriodage", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.OAuthAuthenticationHandlerResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.OAuthAuthenticationHandlerResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.auth.oauth.impl.OAuthAuthenticationHandler/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.OAuthAuthenticationHandlerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.OAuthAuthenticationHandlerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.OAuthAuthenticationHandlerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.OAuthAuthenticationHandlerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string path = request->get_query_parameter("path", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.TwitterProviderImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.TwitterProviderImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.auth.oauth.impl.TwitterProviderImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.TwitterProviderImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.TwitterProviderImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.TwitterProviderImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.impl.TwitterProviderImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string oauthPeriodproviderPeriodid = request->get_query_parameter("oauthPeriodproviderPeriodid", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.providerResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.providerResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.auth.oauth.provider/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.providerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.providerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.providerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.oauth.providerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string oauthPeriodconfigPeriodid = request->get_query_parameter("oauthPeriodconfigPeriodid", "");
			const std::string oauthPeriodclientPeriodid = request->get_query_parameter("oauthPeriodclientPeriodid", "");
			const std::string oauthPeriodclientPeriodsecret = request->get_query_parameter("oauthPeriodclientPeriodsecret", "");
			const std::string oauthPeriodconfigPeriodproviderPeriodid = request->get_query_parameter("oauthPeriodconfigPeriodproviderPeriodid", "");
			const bool oauthPeriodcreatePeriodusers = request->get_query_parameter("oauthPeriodcreatePeriodusers", );
			const std::string oauthPerioduseridPeriodproperty = request->get_query_parameter("oauthPerioduseridPeriodproperty", "");
			const bool forcePeriodstrictPeriodusernamePeriodmatching = request->get_query_parameter("forcePeriodstrictPeriodusernamePeriodmatching", );
			const bool oauthPeriodencodePerioduserids = request->get_query_parameter("oauthPeriodencodePerioduserids", );
			const bool oauthPeriodhashPerioduserids = request->get_query_parameter("oauthPeriodhashPerioduserids", );
			const std::string oauthPeriodcallBackUrl = request->get_query_parameter("oauthPeriodcallBackUrl", "");
			const bool oauthPeriodaccessPeriodtokenPeriodpersist = request->get_query_parameter("oauthPeriodaccessPeriodtokenPeriodpersist", );
			const bool oauthPeriodaccessPeriodtokenPeriodpersistPeriodcookie = request->get_query_parameter("oauthPeriodaccessPeriodtokenPeriodpersistPeriodcookie", );
			const bool oauthPeriodcsrfPeriodstatePeriodprotection = request->get_query_parameter("oauthPeriodcsrfPeriodstatePeriodprotection", );
			const bool oauthPeriodredirectPeriodrequestPeriodparams = request->get_query_parameter("oauthPeriodredirectPeriodrequestPeriodparams", );
			const bool oauthPeriodconfigPeriodsiblingsPeriodallow = request->get_query_parameter("oauthPeriodconfigPeriodsiblingsPeriodallow", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.requirement.impl.DefaultRequirementHandlerResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.requirement.impl.DefaultRequirementHandlerResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.auth.requirement.impl.DefaultRequirementHandler/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.requirement.impl.DefaultRequirementHandlerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.requirement.impl.DefaultRequirementHandlerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.requirement.impl.DefaultRequirementHandlerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.requirement.impl.DefaultRequirementHandlerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.saml.SamlAuthenticationHandlerResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.saml.SamlAuthenticationHandlerResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.saml.SamlAuthenticationHandlerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.saml.SamlAuthenticationHandlerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.saml.SamlAuthenticationHandlerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.saml.SamlAuthenticationHandlerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t servicePeriodranking = request->get_query_parameter("servicePeriodranking", 0);
			const std::string idpUrl = request->get_query_parameter("idpUrl", "");
			const std::string idpCertAlias = request->get_query_parameter("idpCertAlias", "");
			const bool idpHttpRedirect = request->get_query_parameter("idpHttpRedirect", );
			const std::string serviceProviderEntityId = request->get_query_parameter("serviceProviderEntityId", "");
			const std::string assertionConsumerServiceURL = request->get_query_parameter("assertionConsumerServiceURL", "");
			const std::string spPrivateKeyAlias = request->get_query_parameter("spPrivateKeyAlias", "");
			const std::string keyStorePassword = request->get_query_parameter("keyStorePassword", "");
			const std::string defaultRedirectUrl = request->get_query_parameter("defaultRedirectUrl", "");
			const std::string userIDAttribute = request->get_query_parameter("userIDAttribute", "");
			const bool useEncryption = request->get_query_parameter("useEncryption", );
			const bool createUser = request->get_query_parameter("createUser", );
			const std::string userIntermediatePath = request->get_query_parameter("userIntermediatePath", "");
			const bool addGroupMemberships = request->get_query_parameter("addGroupMemberships", );
			const std::string groupMembershipAttribute = request->get_query_parameter("groupMembershipAttribute", "");
			const std::string nameIdFormat = request->get_query_parameter("nameIdFormat", "");
			const bool handleLogout = request->get_query_parameter("handleLogout", );
			const std::string logoutUrl = request->get_query_parameter("logoutUrl", "");
			const int32_t clockTolerance = request->get_query_parameter("clockTolerance", 0);
			const std::string digestMethod = request->get_query_parameter("digestMethod", "");
			const std::string signatureMethod = request->get_query_parameter("signatureMethod", "");
			const std::string identitySyncType = request->get_query_parameter("identitySyncType", "");
			const std::string idpIdentifier = request->get_query_parameter("idpIdentifier", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.sso.impl.SsoAuthenticationHandlerResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.sso.impl.SsoAuthenticationHandlerResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.auth.sso.impl.SsoAuthenticationHandler/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.sso.impl.SsoAuthenticationHandlerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.sso.impl.SsoAuthenticationHandlerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.sso.impl.SsoAuthenticationHandlerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.auth.sso.impl.SsoAuthenticationHandlerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string path = request->get_query_parameter("path", "");
			const int32_t servicePeriodranking = request->get_query_parameter("servicePeriodranking", 0);
			const std::string jaasPeriodcontrolFlag = request->get_query_parameter("jaasPeriodcontrolFlag", "");
			const std::string jaasPeriodrealmName = request->get_query_parameter("jaasPeriodrealmName", "");
			const int32_t jaasPeriodranking = request->get_query_parameter("jaasPeriodranking", 0);
			const std::string format = request->get_query_parameter("format", "");
			const std::string trustedCredentialsAttribute = request->get_query_parameter("trustedCredentialsAttribute", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.CodeCacheHealthCheckResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.CodeCacheHealthCheckResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.bundles.hc.impl.CodeCacheHealthCheck/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.CodeCacheHealthCheckResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.CodeCacheHealthCheckResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.CodeCacheHealthCheckResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.CodeCacheHealthCheckResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t minimumPeriodcodePeriodcachePeriodsize = request->get_query_parameter("minimumPeriodcodePeriodcachePeriodsize", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.CrxdeSupportBundleHealthCheckResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.CrxdeSupportBundleHealthCheckResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.bundles.hc.impl.CrxdeSupportBundleHealthCheck/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.CrxdeSupportBundleHealthCheckResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.CrxdeSupportBundleHealthCheckResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.CrxdeSupportBundleHealthCheckResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.CrxdeSupportBundleHealthCheckResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.DavExBundleHealthCheckResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.DavExBundleHealthCheckResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.bundles.hc.impl.DavExBundleHealthCheck/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.DavExBundleHealthCheckResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.DavExBundleHealthCheckResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.DavExBundleHealthCheckResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.DavExBundleHealthCheckResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.InactiveBundlesHealthCheckResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.InactiveBundlesHealthCheckResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.bundles.hc.impl.InactiveBundlesHealthCheck/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.InactiveBundlesHealthCheckResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.InactiveBundlesHealthCheckResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.InactiveBundlesHealthCheckResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.InactiveBundlesHealthCheckResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.JobsHealthCheckResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.JobsHealthCheckResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.bundles.hc.impl.JobsHealthCheck/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.JobsHealthCheckResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.JobsHealthCheckResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.JobsHealthCheckResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.JobsHealthCheckResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t maxPeriodqueuedPeriodjobs = request->get_query_parameter("maxPeriodqueuedPeriodjobs", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.SlingGetServletHealthCheckResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.SlingGetServletHealthCheckResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingGetServletHealthCheck/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.SlingGetServletHealthCheckResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.SlingGetServletHealthCheckResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.SlingGetServletHealthCheckResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.SlingGetServletHealthCheckResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.SlingJavaScriptHandlerHealthCheckResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.SlingJavaScriptHandlerHealthCheckResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJavaScriptHandlerHealthCheck/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.SlingJavaScriptHandlerHealthCheckResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.SlingJavaScriptHandlerHealthCheckResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.SlingJavaScriptHandlerHealthCheckResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.SlingJavaScriptHandlerHealthCheckResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.SlingJspScriptHandlerHealthCheckResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.SlingJspScriptHandlerHealthCheckResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJspScriptHandlerHealthCheck/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.SlingJspScriptHandlerHealthCheckResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.SlingJspScriptHandlerHealthCheckResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.SlingJspScriptHandlerHealthCheckResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.SlingJspScriptHandlerHealthCheckResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.SlingReferrerFilterHealthCheckResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.SlingReferrerFilterHealthCheckResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingReferrerFilterHealthCheck/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.SlingReferrerFilterHealthCheckResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.SlingReferrerFilterHealthCheckResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.SlingReferrerFilterHealthCheckResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.SlingReferrerFilterHealthCheckResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.WebDavBundleHealthCheckResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.WebDavBundleHealthCheckResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.bundles.hc.impl.WebDavBundleHealthCheck/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.WebDavBundleHealthCheckResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.WebDavBundleHealthCheckResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.WebDavBundleHealthCheckResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.bundles.hc.impl.WebDavBundleHealthCheckResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.comments.internal.CommentReplicationContentFilterFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.comments.internal.CommentReplicationContentFilterFactoryResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.comments.internal.CommentReplicationContentFilterFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.comments.internal.CommentReplicationContentFilterFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.comments.internal.CommentReplicationContentFilterFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.comments.internal.CommentReplicationContentFilterFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.comments.internal.CommentReplicationContentFilterFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.compatrouter.impl.CompatSwitchingServiceImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.compatrouter.impl.CompatSwitchingServiceImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.compatrouter.impl.CompatSwitchingServiceImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.compatrouter.impl.CompatSwitchingServiceImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.compatrouter.impl.CompatSwitchingServiceImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.compatrouter.impl.CompatSwitchingServiceImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.compatrouter.impl.CompatSwitchingServiceImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool enabled = request->get_query_parameter("enabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.compatrouter.impl.RoutingConfigResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.compatrouter.impl.RoutingConfigResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.compatrouter.impl.RoutingConfig/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.compatrouter.impl.RoutingConfigResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.compatrouter.impl.RoutingConfigResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.compatrouter.impl.RoutingConfigResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.compatrouter.impl.RoutingConfigResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string id = request->get_query_parameter("id", "");
			const std::string compatPath = request->get_query_parameter("compatPath", "");
			const std::string newPath = request->get_query_parameter("newPath", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.compatrouter.impl.SwitchMappingConfigResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.compatrouter.impl.SwitchMappingConfigResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.compatrouter.impl.SwitchMappingConfig/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.compatrouter.impl.SwitchMappingConfigResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.compatrouter.impl.SwitchMappingConfigResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.compatrouter.impl.SwitchMappingConfigResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.compatrouter.impl.SwitchMappingConfigResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string group = request->get_query_parameter("group", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.conf.impl.RuntimeAwareConfigurationResourceResolvingStrategyResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.conf.impl.RuntimeAwareConfigurationResourceResolvingStrategyResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.conf.impl.RuntimeAwareConfigurationResourceResolvingStrategy/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.conf.impl.RuntimeAwareConfigurationResourceResolvingStrategyResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.conf.impl.RuntimeAwareConfigurationResourceResolvingStrategyResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.conf.impl.RuntimeAwareConfigurationResourceResolvingStrategyResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.conf.impl.RuntimeAwareConfigurationResourceResolvingStrategyResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool enabled = request->get_query_parameter("enabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.contexthub.impl.ContextHubImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.contexthub.impl.ContextHubImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.contexthub.impl.ContextHubImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.contexthub.impl.ContextHubImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.contexthub.impl.ContextHubImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.contexthub.impl.ContextHubImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.contexthub.impl.ContextHubImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool comPeriodadobePeriodgranitePeriodcontexthubPeriodsilentMode = request->get_query_parameter("comPeriodadobePeriodgranitePeriodcontexthubPeriodsilentMode", );
			const bool comPeriodadobePeriodgranitePeriodcontexthubPeriodshowUi = request->get_query_parameter("comPeriodadobePeriodgranitePeriodcontexthubPeriodshowUi", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.cors.impl.CORSPolicyImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.cors.impl.CORSPolicyImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.cors.impl.CORSPolicyImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.cors.impl.CORSPolicyImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.cors.impl.CORSPolicyImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.cors.impl.CORSPolicyImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.cors.impl.CORSPolicyImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t maxage = request->get_query_parameter("maxage", 0);
			const bool supportscredentials = request->get_query_parameter("supportscredentials", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.csrf.impl.CSRFFilterResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.csrf.impl.CSRFFilterResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.csrf.impl.CSRFFilter/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.csrf.impl.CSRFFilterResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.csrf.impl.CSRFFilterResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.csrf.impl.CSRFFilterResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.csrf.impl.CSRFFilterResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool filterPeriodenablePeriodsafePerioduserPeriodagents = request->get_query_parameter("filterPeriodenablePeriodsafePerioduserPeriodagents", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.csrf.impl.CSRFServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.csrf.impl.CSRFServletResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.csrf.impl.CSRFServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.csrf.impl.CSRFServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.csrf.impl.CSRFServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.csrf.impl.CSRFServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.csrf.impl.CSRFServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t csrfPeriodtokenPeriodexpiresPeriodin = request->get_query_parameter("csrfPeriodtokenPeriodexpiresPeriodin", 0);
			const std::string slingPeriodauthPeriodrequirements = request->get_query_parameter("slingPeriodauthPeriodrequirements", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.CryptoDistributionTransportSecretProviderResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.CryptoDistributionTransportSecretProviderResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.distribution.core.impl.CryptoDistributionTransportSecretProvider/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.CryptoDistributionTransportSecretProviderResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.CryptoDistributionTransportSecretProviderResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.CryptoDistributionTransportSecretProviderResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.CryptoDistributionTransportSecretProviderResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string name = request->get_query_parameter("name", "");
			const std::string username = request->get_query_parameter("username", "");
			const std::string encryptedPassword = request->get_query_parameter("encryptedPassword", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.diff.DiffChangesObserverResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.diff.DiffChangesObserverResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffChangesObserver/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.diff.DiffChangesObserverResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.diff.DiffChangesObserverResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.diff.DiffChangesObserverResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.diff.DiffChangesObserverResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool enabled = request->get_query_parameter("enabled", );
			const std::string agentName = request->get_query_parameter("agentName", "");
			const std::string diffPath = request->get_query_parameter("diffPath", "");
			const std::string observedPath = request->get_query_parameter("observedPath", "");
			const std::string serviceName = request->get_query_parameter("serviceName", "");
			const std::string propertyNames = request->get_query_parameter("propertyNames", "");
			const int32_t distributionDelay = request->get_query_parameter("distributionDelay", 0);
			const std::string serviceUserPeriodtarget = request->get_query_parameter("serviceUserPeriodtarget", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.diff.DiffEventListenerResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.diff.DiffEventListenerResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffEventListener/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.diff.DiffEventListenerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.diff.DiffEventListenerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.diff.DiffEventListenerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.diff.DiffEventListenerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string diffPath = request->get_query_parameter("diffPath", "");
			const std::string serviceName = request->get_query_parameter("serviceName", "");
			const std::string serviceUserPeriodtarget = request->get_query_parameter("serviceUserPeriodtarget", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.DistributionToReplicationEventTransformerResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.DistributionToReplicationEventTransformerResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.distribution.core.impl.DistributionToReplicationEventTransformer/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.DistributionToReplicationEventTransformerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.DistributionToReplicationEventTransformerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.DistributionToReplicationEventTransformerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.DistributionToReplicationEventTransformerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.replication.adapters.ReplicationAgentProviderResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.replication.adapters.ReplicationAgentProviderResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.adapters.ReplicationAgentProvider/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.replication.adapters.ReplicationAgentProviderResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.replication.adapters.ReplicationAgentProviderResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.replication.adapters.ReplicationAgentProviderResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.replication.adapters.ReplicationAgentProviderResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string providerName = request->get_query_parameter("providerName", "");
			const bool forwardPeriodrequests = request->get_query_parameter("forwardPeriodrequests", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.replication.DistributionTransportHandlerResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.replication.DistributionTransportHandlerResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.DistributionTransportHandler/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.replication.DistributionTransportHandlerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.replication.DistributionTransportHandlerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.replication.DistributionTransportHandlerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.replication.DistributionTransportHandlerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool forwardPeriodrequests = request->get_query_parameter("forwardPeriodrequests", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.transport.AccessTokenDistributionTransportSecretProviderResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.transport.AccessTokenDistributionTransportSecretProviderResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.distribution.core.impl.transport.AccessTokenDistributionTransportSecretProvider/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.transport.AccessTokenDistributionTransportSecretProviderResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.transport.AccessTokenDistributionTransportSecretProviderResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.transport.AccessTokenDistributionTransportSecretProviderResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.distribution.core.impl.transport.AccessTokenDistributionTransportSecretProviderResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string name = request->get_query_parameter("name", "");
			const std::string serviceName = request->get_query_parameter("serviceName", "");
			const std::string userId = request->get_query_parameter("userId", "");
			const std::string accessTokenProviderPeriodtarget = request->get_query_parameter("accessTokenProviderPeriodtarget", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.frags.impl.CheckHttpHeaderFlagResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.frags.impl.CheckHttpHeaderFlagResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.frags.impl.CheckHttpHeaderFlag/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.frags.impl.CheckHttpHeaderFlagResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.frags.impl.CheckHttpHeaderFlagResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.frags.impl.CheckHttpHeaderFlagResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.frags.impl.CheckHttpHeaderFlagResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string featurePeriodname = request->get_query_parameter("featurePeriodname", "");
			const std::string featurePerioddescription = request->get_query_parameter("featurePerioddescription", "");
			const std::string httpPeriodheaderPeriodname = request->get_query_parameter("httpPeriodheaderPeriodname", "");
			const std::string httpPeriodheaderPeriodvaluepattern = request->get_query_parameter("httpPeriodheaderPeriodvaluepattern", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.frags.impl.RandomFeatureResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.frags.impl.RandomFeatureResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.frags.impl.RandomFeature/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.frags.impl.RandomFeatureResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.frags.impl.RandomFeatureResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.frags.impl.RandomFeatureResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.frags.impl.RandomFeatureResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string featurePeriodname = request->get_query_parameter("featurePeriodname", "");
			const std::string featurePerioddescription = request->get_query_parameter("featurePerioddescription", "");
			const std::string activePeriodpercentage = request->get_query_parameter("activePeriodpercentage", "");
			const std::string cookiePeriodname = request->get_query_parameter("cookiePeriodname", "");
			const int32_t cookiePeriodmaxAge = request->get_query_parameter("cookiePeriodmaxAge", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.httpcache.file.FileCacheStoreResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.httpcache.file.FileCacheStoreResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.httpcache.file.FileCacheStore/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.httpcache.file.FileCacheStoreResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.httpcache.file.FileCacheStoreResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.httpcache.file.FileCacheStoreResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.httpcache.file.FileCacheStoreResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string comPeriodadobePeriodgranitePeriodhttpcachePeriodfilePerioddocumentRoot = request->get_query_parameter("comPeriodadobePeriodgranitePeriodhttpcachePeriodfilePerioddocumentRoot", "");
			const std::string comPeriodadobePeriodgranitePeriodhttpcachePeriodfilePeriodincludeHost = request->get_query_parameter("comPeriodadobePeriodgranitePeriodhttpcachePeriodfilePeriodincludeHost", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.httpcache.impl.OuterCacheFilterResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.httpcache.impl.OuterCacheFilterResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.httpcache.impl.OuterCacheFilter/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.httpcache.impl.OuterCacheFilterResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.httpcache.impl.OuterCacheFilterResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.httpcache.impl.OuterCacheFilterResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.httpcache.impl.OuterCacheFilterResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.i18n.impl.bundle.PseudoTranslationsResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.i18n.impl.bundle.PseudoTranslationsResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.i18n.impl.bundle.PseudoTranslations/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.i18n.impl.bundle.PseudoTranslationsResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.i18n.impl.bundle.PseudoTranslationsResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.i18n.impl.bundle.PseudoTranslationsResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.i18n.impl.bundle.PseudoTranslationsResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.i18n.impl.PreferencesLocaleResolverServiceResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.i18n.impl.PreferencesLocaleResolverServiceResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.i18n.impl.PreferencesLocaleResolverService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.i18n.impl.PreferencesLocaleResolverServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.i18n.impl.PreferencesLocaleResolverServiceResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.i18n.impl.PreferencesLocaleResolverServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.i18n.impl.PreferencesLocaleResolverServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string securityPeriodpreferencesPeriodname = request->get_query_parameter("securityPeriodpreferencesPeriodname", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.infocollector.InfoCollectorResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.infocollector.InfoCollectorResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.infocollector.InfoCollector/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.infocollector.InfoCollectorResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.infocollector.InfoCollectorResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.infocollector.InfoCollectorResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.infocollector.InfoCollectorResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool granitePeriodinfocollectorPeriodincludeThreadDumps = request->get_query_parameter("granitePeriodinfocollectorPeriodincludeThreadDumps", );
			const bool granitePeriodinfocollectorPeriodincludeHeapDump = request->get_query_parameter("granitePeriodinfocollectorPeriodincludeHeapDump", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.jetty.ssl.internal.GraniteSslConnectorFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.jetty.ssl.internal.GraniteSslConnectorFactoryResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.jetty.ssl.internal.GraniteSslConnectorFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.jetty.ssl.internal.GraniteSslConnectorFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.jetty.ssl.internal.GraniteSslConnectorFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.jetty.ssl.internal.GraniteSslConnectorFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.jetty.ssl.internal.GraniteSslConnectorFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodport = request->get_query_parameter("comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodport", 0);
			const std::string comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodkeystorePerioduser = request->get_query_parameter("comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodkeystorePerioduser", "");
			const std::string comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodkeystorePeriodpassword = request->get_query_parameter("comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodkeystorePeriodpassword", "");
			const std::string comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodclientPeriodcertificate = request->get_query_parameter("comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodclientPeriodcertificate", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.license.impl.LicenseCheckFilterResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.license.impl.LicenseCheckFilterResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.license.impl.LicenseCheckFilter/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.license.impl.LicenseCheckFilterResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.license.impl.LicenseCheckFilterResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.license.impl.LicenseCheckFilterResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.license.impl.LicenseCheckFilterResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t checkInternval = request->get_query_parameter("checkInternval", 0);
			const bool encryptPing = request->get_query_parameter("encryptPing", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.logging.impl.LogAnalyserImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.logging.impl.LogAnalyserImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.logging.impl.LogAnalyserImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.logging.impl.LogAnalyserImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.logging.impl.LogAnalyserImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.logging.impl.LogAnalyserImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.logging.impl.LogAnalyserImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t messagesPeriodqueuePeriodsize = request->get_query_parameter("messagesPeriodqueuePeriodsize", 0);
			const int32_t messagesPeriodsize = request->get_query_parameter("messagesPeriodsize", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.logging.impl.LogErrorHealthCheckResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.logging.impl.LogErrorHealthCheckResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.logging.impl.LogErrorHealthCheck/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.logging.impl.LogErrorHealthCheckResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.logging.impl.LogErrorHealthCheckResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.logging.impl.LogErrorHealthCheckResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.logging.impl.LogErrorHealthCheckResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.maintenance.crx.impl.DataStoreGarbageCollectionTaskResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.maintenance.crx.impl.DataStoreGarbageCollectionTaskResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.DataStoreGarbageCollectionTask/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.maintenance.crx.impl.DataStoreGarbageCollectionTaskResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.maintenance.crx.impl.DataStoreGarbageCollectionTaskResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.maintenance.crx.impl.DataStoreGarbageCollectionTaskResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.maintenance.crx.impl.DataStoreGarbageCollectionTaskResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool granitePeriodmaintenancePeriodmandatory = request->get_query_parameter("granitePeriodmaintenancePeriodmandatory", );
			const std::string jobPeriodtopics = request->get_query_parameter("jobPeriodtopics", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.maintenance.crx.impl.LuceneBinariesCleanupTaskResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.maintenance.crx.impl.LuceneBinariesCleanupTaskResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.LuceneBinariesCleanupTask/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.maintenance.crx.impl.LuceneBinariesCleanupTaskResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.maintenance.crx.impl.LuceneBinariesCleanupTaskResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.maintenance.crx.impl.LuceneBinariesCleanupTaskResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.maintenance.crx.impl.LuceneBinariesCleanupTaskResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string jobPeriodtopics = request->get_query_parameter("jobPeriodtopics", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.maintenance.crx.impl.RevisionCleanupTaskResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.maintenance.crx.impl.RevisionCleanupTaskResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.RevisionCleanupTask/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.maintenance.crx.impl.RevisionCleanupTaskResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.maintenance.crx.impl.RevisionCleanupTaskResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.maintenance.crx.impl.RevisionCleanupTaskResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.maintenance.crx.impl.RevisionCleanupTaskResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.monitoring.impl.ScriptConfigImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.monitoring.impl.ScriptConfigImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.monitoring.impl.ScriptConfigImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.monitoring.impl.ScriptConfigImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.monitoring.impl.ScriptConfigImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.monitoring.impl.ScriptConfigImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.monitoring.impl.ScriptConfigImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string scriptPeriodfilename = request->get_query_parameter("scriptPeriodfilename", "");
			const std::string scriptPerioddisplay = request->get_query_parameter("scriptPerioddisplay", "");
			const std::string scriptPeriodpath = request->get_query_parameter("scriptPeriodpath", "");
			const int32_t interval = request->get_query_parameter("interval", 0);
			const std::string jmxdomain = request->get_query_parameter("jmxdomain", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.auth.impl.OAuth2ServerAuthenticationHandlerResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.auth.impl.OAuth2ServerAuthenticationHandlerResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.oauth.server.auth.impl.OAuth2ServerAuthenticationHandler/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.auth.impl.OAuth2ServerAuthenticationHandlerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.auth.impl.OAuth2ServerAuthenticationHandlerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.auth.impl.OAuth2ServerAuthenticationHandlerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.auth.impl.OAuth2ServerAuthenticationHandlerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string path = request->get_query_parameter("path", "");
			const std::string jaasPeriodcontrolFlag = request->get_query_parameter("jaasPeriodcontrolFlag", "");
			const std::string jaasPeriodrealmName = request->get_query_parameter("jaasPeriodrealmName", "");
			const int32_t jaasPeriodranking = request->get_query_parameter("jaasPeriodranking", 0);
			const bool oauthPeriodofflinePeriodvalidation = request->get_query_parameter("oauthPeriodofflinePeriodvalidation", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.impl.AccessTokenCleanupTaskResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.impl.AccessTokenCleanupTaskResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.oauth.server.impl.AccessTokenCleanupTask/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.impl.AccessTokenCleanupTaskResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.impl.AccessTokenCleanupTaskResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.impl.AccessTokenCleanupTaskResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.impl.AccessTokenCleanupTaskResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string schedulerPeriodexpression = request->get_query_parameter("schedulerPeriodexpression", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.impl.OAuth2ClientRevocationServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.impl.OAuth2ClientRevocationServletResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2ClientRevocationServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.impl.OAuth2ClientRevocationServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.impl.OAuth2ClientRevocationServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.impl.OAuth2ClientRevocationServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.impl.OAuth2ClientRevocationServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool oauthPeriodclientPeriodrevocationPeriodactive = request->get_query_parameter("oauthPeriodclientPeriodrevocationPeriodactive", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.impl.OAuth2RevocationEndpointServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.impl.OAuth2RevocationEndpointServletResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2RevocationEndpointServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.impl.OAuth2RevocationEndpointServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.impl.OAuth2RevocationEndpointServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.impl.OAuth2RevocationEndpointServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.impl.OAuth2RevocationEndpointServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string slingPeriodservletPeriodpaths = request->get_query_parameter("slingPeriodservletPeriodpaths", "");
			const bool oauthPeriodrevocationPeriodactive = request->get_query_parameter("oauthPeriodrevocationPeriodactive", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.impl.OAuth2TokenEndpointServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.impl.OAuth2TokenEndpointServletResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenEndpointServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.impl.OAuth2TokenEndpointServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.impl.OAuth2TokenEndpointServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.impl.OAuth2TokenEndpointServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.impl.OAuth2TokenEndpointServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string oauthPeriodissuer = request->get_query_parameter("oauthPeriodissuer", "");
			const std::string oauthPeriodaccessPeriodtokenPeriodexpiresPeriodin = request->get_query_parameter("oauthPeriodaccessPeriodtokenPeriodexpiresPeriodin", "");
			const std::string osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern = request->get_query_parameter("osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern", "");
			const std::string osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect = request->get_query_parameter("osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.impl.OAuth2TokenRevocationServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.impl.OAuth2TokenRevocationServletResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenRevocationServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.impl.OAuth2TokenRevocationServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.impl.OAuth2TokenRevocationServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.impl.OAuth2TokenRevocationServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.oauth.server.impl.OAuth2TokenRevocationServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool oauthPeriodtokenPeriodrevocationPeriodactive = request->get_query_parameter("oauthPeriodtokenPeriodrevocationPeriodactive", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.offloading.impl.OffloadingConfiguratorResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.offloading.impl.OffloadingConfiguratorResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingConfigurator/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.offloading.impl.OffloadingConfiguratorResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.offloading.impl.OffloadingConfiguratorResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.offloading.impl.OffloadingConfiguratorResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.offloading.impl.OffloadingConfiguratorResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string offloadingPeriodtransporter = request->get_query_parameter("offloadingPeriodtransporter", "");
			const bool offloadingPeriodcleanupPeriodpayload = request->get_query_parameter("offloadingPeriodcleanupPeriodpayload", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.offloading.impl.OffloadingJobClonerResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.offloading.impl.OffloadingJobClonerResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobCloner/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.offloading.impl.OffloadingJobClonerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.offloading.impl.OffloadingJobClonerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.offloading.impl.OffloadingJobClonerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.offloading.impl.OffloadingJobClonerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool offloadingPeriodjobclonerPeriodenabled = request->get_query_parameter("offloadingPeriodjobclonerPeriodenabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.offloading.impl.OffloadingJobOffloaderResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.offloading.impl.OffloadingJobOffloaderResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobOffloader/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.offloading.impl.OffloadingJobOffloaderResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.offloading.impl.OffloadingJobOffloaderResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.offloading.impl.OffloadingJobOffloaderResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.offloading.impl.OffloadingJobOffloaderResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool offloadingPeriodoffloaderPeriodenabled = request->get_query_parameter("offloadingPeriodoffloaderPeriodenabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.offloading.impl.transporter.OffloadingAgentManagerResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.offloading.impl.transporter.OffloadingAgentManagerResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingAgentManager/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.offloading.impl.transporter.OffloadingAgentManagerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.offloading.impl.transporter.OffloadingAgentManagerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.offloading.impl.transporter.OffloadingAgentManagerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.offloading.impl.transporter.OffloadingAgentManagerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool offloadingPeriodagentmanagerPeriodenabled = request->get_query_parameter("offloadingPeriodagentmanagerPeriodenabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.offloading.impl.transporter.OffloadingDefaultTransporterResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.offloading.impl.transporter.OffloadingDefaultTransporterResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingDefaultTransporter/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.offloading.impl.transporter.OffloadingDefaultTransporterResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.offloading.impl.transporter.OffloadingDefaultTransporterResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.offloading.impl.transporter.OffloadingDefaultTransporterResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.offloading.impl.transporter.OffloadingDefaultTransporterResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string defaultPeriodtransportPeriodagentToWorkerPeriodprefix = request->get_query_parameter("defaultPeriodtransportPeriodagentToWorkerPeriodprefix", "");
			const std::string defaultPeriodtransportPeriodagentToMasterPeriodprefix = request->get_query_parameter("defaultPeriodtransportPeriodagentToMasterPeriodprefix", "");
			const std::string defaultPeriodtransportPeriodinputPeriodpackage = request->get_query_parameter("defaultPeriodtransportPeriodinputPeriodpackage", "");
			const std::string defaultPeriodtransportPeriodoutputPeriodpackage = request->get_query_parameter("defaultPeriodtransportPeriodoutputPeriodpackage", "");
			const bool defaultPeriodtransportPeriodreplicationPeriodsynchronous = request->get_query_parameter("defaultPeriodtransportPeriodreplicationPeriodsynchronous", );
			const bool defaultPeriodtransportPeriodcontentpackage = request->get_query_parameter("defaultPeriodtransportPeriodcontentpackage", );
			const bool offloadingPeriodtransporterPerioddefaultPeriodenabled = request->get_query_parameter("offloadingPeriodtransporterPerioddefaultPeriodenabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.omnisearch.impl.core.OmniSearchServiceImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.omnisearch.impl.core.OmniSearchServiceImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.omnisearch.impl.core.OmniSearchServiceImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.omnisearch.impl.core.OmniSearchServiceImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.omnisearch.impl.core.OmniSearchServiceImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.omnisearch.impl.core.OmniSearchServiceImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.omnisearch.impl.core.OmniSearchServiceImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t omnisearchPeriodsuggestionPeriodrequiretextPeriodmin = request->get_query_parameter("omnisearchPeriodsuggestionPeriodrequiretextPeriodmin", 0);
			const bool omnisearchPeriodsuggestionPeriodspellcheckPeriodrequire = request->get_query_parameter("omnisearchPeriodsuggestionPeriodspellcheckPeriodrequire", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.optout.impl.OptOutServiceImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.optout.impl.OptOutServiceImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.optout.impl.OptOutServiceImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.optout.impl.OptOutServiceImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.optout.impl.OptOutServiceImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.optout.impl.OptOutServiceImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.optout.impl.OptOutServiceImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.queries.impl.hc.AsyncIndexHealthCheckResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.queries.impl.hc.AsyncIndexHealthCheckResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.queries.impl.hc.AsyncIndexHealthCheck/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.queries.impl.hc.AsyncIndexHealthCheckResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.queries.impl.hc.AsyncIndexHealthCheckResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.queries.impl.hc.AsyncIndexHealthCheckResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.queries.impl.hc.AsyncIndexHealthCheckResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t indexingPeriodcriticalPeriodthreshold = request->get_query_parameter("indexingPeriodcriticalPeriodthreshold", 0);
			const int32_t indexingPeriodwarnPeriodthreshold = request->get_query_parameter("indexingPeriodwarnPeriodthreshold", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.queries.impl.hc.LargeIndexHealthCheckResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.queries.impl.hc.LargeIndexHealthCheckResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.queries.impl.hc.LargeIndexHealthCheck/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.queries.impl.hc.LargeIndexHealthCheckResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.queries.impl.hc.LargeIndexHealthCheckResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.queries.impl.hc.LargeIndexHealthCheckResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.queries.impl.hc.LargeIndexHealthCheckResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t largePeriodindexPeriodcriticalPeriodthreshold = request->get_query_parameter("largePeriodindexPeriodcriticalPeriodthreshold", 0);
			const int32_t largePeriodindexPeriodwarnPeriodthreshold = request->get_query_parameter("largePeriodindexPeriodwarnPeriodthreshold", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.queries.impl.hc.QueriesStatusHealthCheckResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.queries.impl.hc.QueriesStatusHealthCheckResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueriesStatusHealthCheck/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.queries.impl.hc.QueriesStatusHealthCheckResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.queries.impl.hc.QueriesStatusHealthCheckResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.queries.impl.hc.QueriesStatusHealthCheckResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.queries.impl.hc.QueriesStatusHealthCheckResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.queries.impl.hc.QueryHealthCheckMetricsResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.queries.impl.hc.QueryHealthCheckMetricsResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryHealthCheckMetrics/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.queries.impl.hc.QueryHealthCheckMetricsResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.queries.impl.hc.QueryHealthCheckMetricsResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.queries.impl.hc.QueryHealthCheckMetricsResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.queries.impl.hc.QueryHealthCheckMetricsResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t getPeriod = request->get_query_parameter("getPeriod", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.queries.impl.hc.QueryLimitsHealthCheckResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.queries.impl.hc.QueryLimitsHealthCheckResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryLimitsHealthCheck/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.queries.impl.hc.QueryLimitsHealthCheckResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.queries.impl.hc.QueryLimitsHealthCheckResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.queries.impl.hc.QueryLimitsHealthCheckResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.queries.impl.hc.QueryLimitsHealthCheckResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.replication.hc.impl.ReplicationQueueHealthCheckResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.replication.hc.impl.ReplicationQueueHealthCheckResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationQueueHealthCheck/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.replication.hc.impl.ReplicationQueueHealthCheckResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.replication.hc.impl.ReplicationQueueHealthCheckResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.replication.hc.impl.ReplicationQueueHealthCheckResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.replication.hc.impl.ReplicationQueueHealthCheckResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t numberPeriodofPeriodretriesPeriodallowed = request->get_query_parameter("numberPeriodofPeriodretriesPeriodallowed", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.replication.hc.impl.ReplicationTransportUsersHealthCheckResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.replication.hc.impl.ReplicationTransportUsersHealthCheckResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationTransportUsersHealthCheck/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.replication.hc.impl.ReplicationTransportUsersHealthCheckResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.replication.hc.impl.ReplicationTransportUsersHealthCheckResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.replication.hc.impl.ReplicationTransportUsersHealthCheckResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.replication.hc.impl.ReplicationTransportUsersHealthCheckResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.AuthorizableNodeNameHealthCheckResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.AuthorizableNodeNameHealthCheckResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.repository.hc.impl.AuthorizableNodeNameHealthCheck/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.AuthorizableNodeNameHealthCheckResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.AuthorizableNodeNameHealthCheckResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.AuthorizableNodeNameHealthCheckResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.AuthorizableNodeNameHealthCheckResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.content.sling.SlingContentHealthCheckResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.content.sling.SlingContentHealthCheckResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.repository.hc.impl.content.sling.SlingContentHealthCheck/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.content.sling.SlingContentHealthCheckResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.content.sling.SlingContentHealthCheckResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.content.sling.SlingContentHealthCheckResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.content.sling.SlingContentHealthCheckResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.ContinuousRGCHealthCheckResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.ContinuousRGCHealthCheckResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.repository.hc.impl.ContinuousRGCHealthCheck/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.ContinuousRGCHealthCheckResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.ContinuousRGCHealthCheckResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.ContinuousRGCHealthCheckResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.ContinuousRGCHealthCheckResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.DefaultAccessUserProfileHealthCheckResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.DefaultAccessUserProfileHealthCheckResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultAccessUserProfileHealthCheck/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.DefaultAccessUserProfileHealthCheckResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.DefaultAccessUserProfileHealthCheckResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.DefaultAccessUserProfileHealthCheckResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.DefaultAccessUserProfileHealthCheckResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.DefaultLoginsHealthCheckResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.DefaultLoginsHealthCheckResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultLoginsHealthCheck/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.DefaultLoginsHealthCheckResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.DefaultLoginsHealthCheckResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.DefaultLoginsHealthCheckResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.DefaultLoginsHealthCheckResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.DiskSpaceHealthCheckResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.DiskSpaceHealthCheckResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.repository.hc.impl.DiskSpaceHealthCheck/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.DiskSpaceHealthCheckResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.DiskSpaceHealthCheckResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.DiskSpaceHealthCheckResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.DiskSpaceHealthCheckResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t diskPeriodspacePeriodwarnPeriodthreshold = request->get_query_parameter("diskPeriodspacePeriodwarnPeriodthreshold", 0);
			const int32_t diskPeriodspacePerioderrorPeriodthreshold = request->get_query_parameter("diskPeriodspacePerioderrorPeriodthreshold", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.ObservationQueueLengthHealthCheckResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.ObservationQueueLengthHealthCheckResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.repository.hc.impl.ObservationQueueLengthHealthCheck/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.ObservationQueueLengthHealthCheckResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.ObservationQueueLengthHealthCheckResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.ObservationQueueLengthHealthCheckResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.hc.impl.ObservationQueueLengthHealthCheckResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.impl.CommitStatsConfigResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.impl.CommitStatsConfigResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.repository.impl.CommitStatsConfig/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.impl.CommitStatsConfigResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.impl.CommitStatsConfigResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.impl.CommitStatsConfigResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.impl.CommitStatsConfigResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool enabled = request->get_query_parameter("enabled", );
			const int32_t intervalSeconds = request->get_query_parameter("intervalSeconds", 0);
			const int32_t commitsPerIntervalThreshold = request->get_query_parameter("commitsPerIntervalThreshold", 0);
			const int32_t maxLocationLength = request->get_query_parameter("maxLocationLength", 0);
			const int32_t maxDetailsShown = request->get_query_parameter("maxDetailsShown", 0);
			const int32_t minDetailsPercentage = request->get_query_parameter("minDetailsPercentage", 0);
			const int32_t maxGreedyDepth = request->get_query_parameter("maxGreedyDepth", 0);
			const std::string greedyStackMatchers = request->get_query_parameter("greedyStackMatchers", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.ServiceUserConfigurationResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.ServiceUserConfigurationResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.repository.ServiceUserConfiguration/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.ServiceUserConfigurationResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.ServiceUserConfigurationResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.ServiceUserConfigurationResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.repository.ServiceUserConfigurationResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t servicePeriodranking = request->get_query_parameter("servicePeriodranking", 0);
			const bool serviceusersPeriodsimpleSubjectPopulation = request->get_query_parameter("serviceusersPeriodsimpleSubjectPopulation", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.requests.logging.impl.hc.RequestsStatusHealthCheckImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.requests.logging.impl.hc.RequestsStatusHealthCheckImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.requests.logging.impl.hc.RequestsStatusHealthCheckImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.requests.logging.impl.hc.RequestsStatusHealthCheckImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.requests.logging.impl.hc.RequestsStatusHealthCheckImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.requests.logging.impl.hc.RequestsStatusHealthCheckImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.requests.logging.impl.hc.RequestsStatusHealthCheckImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.resourcestatus.impl.CompositeStatusTypeResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.resourcestatus.impl.CompositeStatusTypeResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.resourcestatus.impl.CompositeStatusType/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.resourcestatus.impl.CompositeStatusTypeResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.resourcestatus.impl.CompositeStatusTypeResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.resourcestatus.impl.CompositeStatusTypeResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.resourcestatus.impl.CompositeStatusTypeResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string name = request->get_query_parameter("name", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.resourcestatus.impl.StatusResourceProviderImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.resourcestatus.impl.StatusResourceProviderImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.resourcestatus.impl.StatusResourceProviderImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.resourcestatus.impl.StatusResourceProviderImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.resourcestatus.impl.StatusResourceProviderImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.resourcestatus.impl.StatusResourceProviderImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.resourcestatus.impl.StatusResourceProviderImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string providerPeriodroot = request->get_query_parameter("providerPeriodroot", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.rest.assets.impl.AssetContentDispositionFilterResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.rest.assets.impl.AssetContentDispositionFilterResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.rest.assets.impl.AssetContentDispositionFilter/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.rest.assets.impl.AssetContentDispositionFilterResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.rest.assets.impl.AssetContentDispositionFilterResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.rest.assets.impl.AssetContentDispositionFilterResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.rest.assets.impl.AssetContentDispositionFilterResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool mimePeriodallowEmpty = request->get_query_parameter("mimePeriodallowEmpty", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.rest.impl.ApiEndpointResourceProviderFactoryImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.rest.impl.ApiEndpointResourceProviderFactoryImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.rest.impl.ApiEndpointResourceProviderFactoryImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.rest.impl.ApiEndpointResourceProviderFactoryImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.rest.impl.ApiEndpointResourceProviderFactoryImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.rest.impl.ApiEndpointResourceProviderFactoryImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.rest.impl.ApiEndpointResourceProviderFactoryImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string providerPeriodroots = request->get_query_parameter("providerPeriodroots", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.rest.impl.servlet.DefaultGETServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.rest.impl.servlet.DefaultGETServletResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.rest.impl.servlet.DefaultGETServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.rest.impl.servlet.DefaultGETServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.rest.impl.servlet.DefaultGETServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.rest.impl.servlet.DefaultGETServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.rest.impl.servlet.DefaultGETServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t defaultPeriodlimit = request->get_query_parameter("defaultPeriodlimit", 0);
			const bool usePeriodabsolutePerioduri = request->get_query_parameter("usePeriodabsolutePerioduri", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.security.user.ui.internal.servlets.SSLConfigurationServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.security.user.ui.internal.servlets.SSLConfigurationServletResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.security.user.ui.internal.servlets.SSLConfigurationServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.security.user.ui.internal.servlets.SSLConfigurationServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.security.user.ui.internal.servlets.SSLConfigurationServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.security.user.ui.internal.servlets.SSLConfigurationServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.security.user.ui.internal.servlets.SSLConfigurationServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.security.user.UserPropertiesServiceResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.security.user.UserPropertiesServiceResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.security.user.UserPropertiesService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.security.user.UserPropertiesServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.security.user.UserPropertiesServiceResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.security.user.UserPropertiesServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.security.user.UserPropertiesServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string adapterPeriodcondition = request->get_query_parameter("adapterPeriodcondition", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.socialgraph.impl.SocialGraphFactoryImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.socialgraph.impl.SocialGraphFactoryImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.socialgraph.impl.SocialGraphFactoryImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.socialgraph.impl.SocialGraphFactoryImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.socialgraph.impl.SocialGraphFactoryImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.socialgraph.impl.SocialGraphFactoryImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.socialgraph.impl.SocialGraphFactoryImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string group2memberPeriodrelationshipPeriodoutgoing = request->get_query_parameter("group2memberPeriodrelationshipPeriodoutgoing", "");
			const std::string group2memberPeriodrelationshipPeriodincoming = request->get_query_parameter("group2memberPeriodrelationshipPeriodincoming", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.system.monitoring.impl.SystemStatsMBeanImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.system.monitoring.impl.SystemStatsMBeanImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.system.monitoring.impl.SystemStatsMBeanImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.system.monitoring.impl.SystemStatsMBeanImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.system.monitoring.impl.SystemStatsMBeanImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.system.monitoring.impl.SystemStatsMBeanImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.system.monitoring.impl.SystemStatsMBeanImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string schedulerPeriodexpression = request->get_query_parameter("schedulerPeriodexpression", "");
			const std::string jmxPeriodobjectname = request->get_query_parameter("jmxPeriodobjectname", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.taskmanagement.impl.jcr.TaskAdapterFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.taskmanagement.impl.jcr.TaskAdapterFactoryResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskAdapterFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.taskmanagement.impl.jcr.TaskAdapterFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.taskmanagement.impl.jcr.TaskAdapterFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.taskmanagement.impl.jcr.TaskAdapterFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.taskmanagement.impl.jcr.TaskAdapterFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string adapterPeriodcondition = request->get_query_parameter("adapterPeriodcondition", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.taskmanagement.impl.jcr.TaskArchiveServiceResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.taskmanagement.impl.jcr.TaskArchiveServiceResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskArchiveService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.taskmanagement.impl.jcr.TaskArchiveServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.taskmanagement.impl.jcr.TaskArchiveServiceResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.taskmanagement.impl.jcr.TaskArchiveServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.taskmanagement.impl.jcr.TaskArchiveServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool archivingPeriodenabled = request->get_query_parameter("archivingPeriodenabled", );
			const std::string schedulerPeriodexpression = request->get_query_parameter("schedulerPeriodexpression", "");
			const int32_t archivePeriodsincePerioddaysPeriodcompleted = request->get_query_parameter("archivePeriodsincePerioddaysPeriodcompleted", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.taskmanagement.impl.purge.TaskPurgeMaintenanceTaskResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.taskmanagement.impl.purge.TaskPurgeMaintenanceTaskResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.taskmanagement.impl.purge.TaskPurgeMaintenanceTask/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.taskmanagement.impl.purge.TaskPurgeMaintenanceTaskResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.taskmanagement.impl.purge.TaskPurgeMaintenanceTaskResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.taskmanagement.impl.purge.TaskPurgeMaintenanceTaskResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.taskmanagement.impl.purge.TaskPurgeMaintenanceTaskResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool purgeCompleted = request->get_query_parameter("purgeCompleted", );
			const int32_t completedAge = request->get_query_parameter("completedAge", 0);
			const bool purgeActive = request->get_query_parameter("purgeActive", );
			const int32_t activeAge = request->get_query_parameter("activeAge", 0);
			const int32_t saveThreshold = request->get_query_parameter("saveThreshold", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.taskmanagement.impl.service.TaskManagerAdapterFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.taskmanagement.impl.service.TaskManagerAdapterFactoryResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.taskmanagement.impl.service.TaskManagerAdapterFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.taskmanagement.impl.service.TaskManagerAdapterFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.taskmanagement.impl.service.TaskManagerAdapterFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.taskmanagement.impl.service.TaskManagerAdapterFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.taskmanagement.impl.service.TaskManagerAdapterFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string adapterPeriodcondition = request->get_query_parameter("adapterPeriodcondition", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.threaddump.ThreadDumpCollectorResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.threaddump.ThreadDumpCollectorResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.threaddump.ThreadDumpCollector/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.threaddump.ThreadDumpCollectorResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.threaddump.ThreadDumpCollectorResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.threaddump.ThreadDumpCollectorResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.threaddump.ThreadDumpCollectorResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t schedulerPeriodperiod = request->get_query_parameter("schedulerPeriodperiod", 0);
			const std::string schedulerPeriodrunOn = request->get_query_parameter("schedulerPeriodrunOn", "");
			const bool granitePeriodthreaddumpPeriodenabled = request->get_query_parameter("granitePeriodthreaddumpPeriodenabled", );
			const int32_t granitePeriodthreaddumpPerioddumpsPerFile = request->get_query_parameter("granitePeriodthreaddumpPerioddumpsPerFile", 0);
			const bool granitePeriodthreaddumpPeriodenableGzipCompression = request->get_query_parameter("granitePeriodthreaddumpPeriodenableGzipCompression", );
			const bool granitePeriodthreaddumpPeriodenableDirectoriesCompression = request->get_query_parameter("granitePeriodthreaddumpPeriodenableDirectoriesCompression", );
			const bool granitePeriodthreaddumpPeriodenableJStack = request->get_query_parameter("granitePeriodthreaddumpPeriodenableJStack", );
			const int32_t granitePeriodthreaddumpPeriodmaxBackupDays = request->get_query_parameter("granitePeriodthreaddumpPeriodmaxBackupDays", 0);
			const std::string granitePeriodthreaddumpPeriodbackupCleanTrigger = request->get_query_parameter("granitePeriodthreaddumpPeriodbackupCleanTrigger", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.translation.connector.msft.core.impl.MicrosoftTranslationServiceFactoryImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.translation.connector.msft.core.impl.MicrosoftTranslationServiceFactoryImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.translation.connector.msft.core.impl.MicrosoftTranslationServiceFactoryImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.translation.connector.msft.core.impl.MicrosoftTranslationServiceFactoryImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.translation.connector.msft.core.impl.MicrosoftTranslationServiceFactoryImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.translation.connector.msft.core.impl.MicrosoftTranslationServiceFactoryImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.translation.connector.msft.core.impl.MicrosoftTranslationServiceFactoryImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string translationFactory = request->get_query_parameter("translationFactory", "");
			const std::string defaultConnectorLabel = request->get_query_parameter("defaultConnectorLabel", "");
			const std::string defaultConnectorAttribution = request->get_query_parameter("defaultConnectorAttribution", "");
			const std::string defaultConnectorWorkspaceId = request->get_query_parameter("defaultConnectorWorkspaceId", "");
			const std::string defaultConnectorSubscriptionKey = request->get_query_parameter("defaultConnectorSubscriptionKey", "");
			const std::string languageMapLocation = request->get_query_parameter("languageMapLocation", "");
			const std::string categoryMapLocation = request->get_query_parameter("categoryMapLocation", "");
			const int32_t retryAttempts = request->get_query_parameter("retryAttempts", 0);
			const int32_t timeoutCount = request->get_query_parameter("timeoutCount", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.translation.core.impl.TranslationManagerImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.translation.core.impl.TranslationManagerImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.translation.core.impl.TranslationManagerImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.translation.core.impl.TranslationManagerImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.translation.core.impl.TranslationManagerImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.translation.core.impl.TranslationManagerImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.translation.core.impl.TranslationManagerImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string defaultConnectorName = request->get_query_parameter("defaultConnectorName", "");
			const std::string defaultCategory = request->get_query_parameter("defaultCategory", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.ui.clientlibs.impl.HtmlLibraryManagerImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.ui.clientlibs.impl.HtmlLibraryManagerImplResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.ui.clientlibs.impl.HtmlLibraryManagerImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.ui.clientlibs.impl.HtmlLibraryManagerImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.ui.clientlibs.impl.HtmlLibraryManagerImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.ui.clientlibs.impl.HtmlLibraryManagerImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.ui.clientlibs.impl.HtmlLibraryManagerImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool htmllibmanagerPeriodtiming = request->get_query_parameter("htmllibmanagerPeriodtiming", );
			const std::string htmllibmanagerPerioddebugPeriodinitPeriodjs = request->get_query_parameter("htmllibmanagerPerioddebugPeriodinitPeriodjs", "");
			const bool htmllibmanagerPeriodminify = request->get_query_parameter("htmllibmanagerPeriodminify", );
			const bool htmllibmanagerPerioddebug = request->get_query_parameter("htmllibmanagerPerioddebug", );
			const bool htmllibmanagerPeriodgzip = request->get_query_parameter("htmllibmanagerPeriodgzip", );
			const int32_t htmllibmanagerPeriodmaxDataUriSize = request->get_query_parameter("htmllibmanagerPeriodmaxDataUriSize", 0);
			const int32_t htmllibmanagerPeriodmaxage = request->get_query_parameter("htmllibmanagerPeriodmaxage", 0);
			const bool htmllibmanagerPeriodforceCQUrlInfo = request->get_query_parameter("htmllibmanagerPeriodforceCQUrlInfo", );
			const std::string htmllibmanagerPerioddefaultthemename = request->get_query_parameter("htmllibmanagerPerioddefaultthemename", "");
			const std::string htmllibmanagerPerioddefaultuserthemename = request->get_query_parameter("htmllibmanagerPerioddefaultuserthemename", "");
			const std::string htmllibmanagerPeriodclientmanager = request->get_query_parameter("htmllibmanagerPeriodclientmanager", "");
			const std::string htmllibmanagerPeriodlongcachePeriodformat = request->get_query_parameter("htmllibmanagerPeriodlongcachePeriodformat", "");
			const bool htmllibmanagerPerioduseFileSystemOutputCache = request->get_query_parameter("htmllibmanagerPerioduseFileSystemOutputCache", );
			const std::string htmllibmanagerPeriodfileSystemOutputCacheLocation = request->get_query_parameter("htmllibmanagerPeriodfileSystemOutputCacheLocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.console.frags.WorkflowWithdrawFeatureResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.console.frags.WorkflowWithdrawFeatureResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.workflow.console.frags.WorkflowWithdrawFeature/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.console.frags.WorkflowWithdrawFeatureResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.console.frags.WorkflowWithdrawFeatureResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.console.frags.WorkflowWithdrawFeatureResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.console.frags.WorkflowWithdrawFeatureResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool enabled = request->get_query_parameter("enabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.console.publish.WorkflowPublishEventServiceResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.console.publish.WorkflowPublishEventServiceResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.workflow.console.publish.WorkflowPublishEventService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.console.publish.WorkflowPublishEventServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.console.publish.WorkflowPublishEventServiceResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.console.publish.WorkflowPublishEventServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.console.publish.WorkflowPublishEventServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool granitePeriodworkflowPeriodWorkflowPublishEventServicePeriodenabled = request->get_query_parameter("granitePeriodworkflowPeriodWorkflowPublishEventServicePeriodenabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.jcr.WorkflowBucketManagerResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.jcr.WorkflowBucketManagerResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.workflow.core.jcr.WorkflowBucketManager/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.jcr.WorkflowBucketManagerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.jcr.WorkflowBucketManagerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.jcr.WorkflowBucketManagerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.jcr.WorkflowBucketManagerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t bucketSize = request->get_query_parameter("bucketSize", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.job.ExternalProcessJobHandlerResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.job.ExternalProcessJobHandlerResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.workflow.core.job.ExternalProcessJobHandler/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.job.ExternalProcessJobHandlerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.job.ExternalProcessJobHandlerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.job.ExternalProcessJobHandlerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.job.ExternalProcessJobHandlerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t defaultPeriodtimeout = request->get_query_parameter("defaultPeriodtimeout", 0);
			const int32_t maxPeriodtimeout = request->get_query_parameter("maxPeriodtimeout", 0);
			const int32_t defaultPeriodperiod = request->get_query_parameter("defaultPeriodperiod", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.job.JobHandlerResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.job.JobHandlerResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.workflow.core.job.JobHandler/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.job.JobHandlerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.job.JobHandlerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.job.JobHandlerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.job.JobHandlerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool allowPeriodselfPeriodprocessPeriodtermination = request->get_query_parameter("allowPeriodselfPeriodprocessPeriodtermination", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.offloading.WorkflowOffloadingJobConsumerResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.offloading.WorkflowOffloadingJobConsumerResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.workflow.core.offloading.WorkflowOffloadingJobConsumer/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.offloading.WorkflowOffloadingJobConsumerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.offloading.WorkflowOffloadingJobConsumerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.offloading.WorkflowOffloadingJobConsumerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.offloading.WorkflowOffloadingJobConsumerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string jobPeriodtopics = request->get_query_parameter("jobPeriodtopics", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.PayloadMapCacheResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.PayloadMapCacheResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.workflow.core.PayloadMapCache/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.PayloadMapCacheResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.PayloadMapCacheResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.PayloadMapCacheResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.PayloadMapCacheResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string getPackageRootPath = request->get_query_parameter("getPackageRootPath", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.payloadmap.PayloadMoveListenerResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.payloadmap.PayloadMoveListenerResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.workflow.core.payloadmap.PayloadMoveListener/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.payloadmap.PayloadMoveListenerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.payloadmap.PayloadMoveListenerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.payloadmap.PayloadMoveListenerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.payloadmap.PayloadMoveListenerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool payloadPeriodmovePeriodhandlePeriodfromPeriodworkflowPeriodprocess = request->get_query_parameter("payloadPeriodmovePeriodhandlePeriodfromPeriodworkflowPeriodprocess", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.WorkflowConfigResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.WorkflowConfigResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.workflow.core.WorkflowConfig/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.WorkflowConfigResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.WorkflowConfigResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.WorkflowConfigResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.WorkflowConfigResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool cqPeriodworkflowPeriodconfigPeriodworkflowPeriodprocessPeriodlegacyPeriodmode = request->get_query_parameter("cqPeriodworkflowPeriodconfigPeriodworkflowPeriodprocessPeriodlegacyPeriodmode", );
			const bool cqPeriodworkflowPeriodconfigPeriodallowPeriodlocking = request->get_query_parameter("cqPeriodworkflowPeriodconfigPeriodallowPeriodlocking", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.WorkflowSessionFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.WorkflowSessionFactoryResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.workflow.core.WorkflowSessionFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.WorkflowSessionFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.WorkflowSessionFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.WorkflowSessionFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.core.WorkflowSessionFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string granitePeriodworkflowinboxPeriodsortPeriodpropertyName = request->get_query_parameter("granitePeriodworkflowinboxPeriodsortPeriodpropertyName", "");
			const std::string granitePeriodworkflowinboxPeriodsortPeriodorder = request->get_query_parameter("granitePeriodworkflowinboxPeriodsortPeriodorder", "");
			const int32_t cqPeriodworkflowPeriodjobPeriodretry = request->get_query_parameter("cqPeriodworkflowPeriodjobPeriodretry", 0);
			const int32_t granitePeriodworkflowPeriodinboxQuerySize = request->get_query_parameter("granitePeriodworkflowPeriodinboxQuerySize", 0);
			const bool granitePeriodworkflowPeriodadminUserGroupFilter = request->get_query_parameter("granitePeriodworkflowPeriodadminUserGroupFilter", );
			const bool granitePeriodworkflowPeriodenforceWorkitemAssigneePermissions = request->get_query_parameter("granitePeriodworkflowPeriodenforceWorkitemAssigneePermissions", );
			const bool granitePeriodworkflowPeriodenforceWorkflowInitiatorPermissions = request->get_query_parameter("granitePeriodworkflowPeriodenforceWorkflowInitiatorPermissions", );
			const bool granitePeriodworkflowPeriodinjectTenantIdInJobTopics = request->get_query_parameter("granitePeriodworkflowPeriodinjectTenantIdInJobTopics", );
			const int32_t granitePeriodworkflowPeriodmaxPurgeSaveThreshold = request->get_query_parameter("granitePeriodworkflowPeriodmaxPurgeSaveThreshold", 0);
			const int32_t granitePeriodworkflowPeriodmaxPurgeQueryCount = request->get_query_parameter("granitePeriodworkflowPeriodmaxPurgeQueryCount", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.purge.SchedulerResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.purge.SchedulerResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.workflow.purge.Scheduler/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.purge.SchedulerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.purge.SchedulerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.purge.SchedulerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.granite.workflow.purge.SchedulerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string scheduledpurgePeriodname = request->get_query_parameter("scheduledpurgePeriodname", "");
			const std::string scheduledpurgePeriodworkflowStatus = request->get_query_parameter("scheduledpurgePeriodworkflowStatus", "");
			const int32_t scheduledpurgePerioddaysold = request->get_query_parameter("scheduledpurgePerioddaysold", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.octopus.ncomm.bootstrapResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.octopus.ncomm.bootstrapResource()
{
	this->set_path("/system/console/configMgr/com.adobe.octopus.ncomm.bootstrap/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.octopus.ncomm.bootstrapResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.octopus.ncomm.bootstrapResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.octopus.ncomm.bootstrapResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.octopus.ncomm.bootstrapResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t maxConnections = request->get_query_parameter("maxConnections", 0);
			const int32_t maxRequests = request->get_query_parameter("maxRequests", 0);
			const int32_t requestTimeout = request->get_query_parameter("requestTimeout", 0);
			const int32_t requestRetries = request->get_query_parameter("requestRetries", 0);
			const int32_t launchTimeout = request->get_query_parameter("launchTimeout", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.social.integrations.livefyre.user.pingforpull.impl.PingPullServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.social.integrations.livefyre.user.pingforpull.impl.PingPullServletResource()
{
	this->set_path("/system/console/configMgr/com.adobe.social.integrations.livefyre.user.pingforpull.impl.PingPullServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.social.integrations.livefyre.user.pingforpull.impl.PingPullServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.social.integrations.livefyre.user.pingforpull.impl.PingPullServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.social.integrations.livefyre.user.pingforpull.impl.PingPullServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.social.integrations.livefyre.user.pingforpull.impl.PingPullServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string communitiesPeriodintegrationPeriodlivefyrePeriodslingPeriodeventPeriodfilter = request->get_query_parameter("communitiesPeriodintegrationPeriodlivefyrePeriodslingPeriodeventPeriodfilter", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.adobe.xmp.worker.files.ncomm.XMPFilesNCommResource::ConfigmgrApiSystemConsoleConfigMgrCom.adobe.xmp.worker.files.ncomm.XMPFilesNCommResource()
{
	this->set_path("/system/console/configMgr/com.adobe.xmp.worker.files.ncomm.XMPFilesNComm/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.adobe.xmp.worker.files.ncomm.XMPFilesNCommResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.adobe.xmp.worker.files.ncomm.XMPFilesNCommResource::~ConfigmgrApiSystemConsoleConfigMgrCom.adobe.xmp.worker.files.ncomm.XMPFilesNCommResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.adobe.xmp.worker.files.ncomm.XMPFilesNCommResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string maxConnections = request->get_query_parameter("maxConnections", "");
			const std::string maxRequests = request->get_query_parameter("maxRequests", "");
			const std::string requestTimeout = request->get_query_parameter("requestTimeout", "");
			const std::string logDir = request->get_query_parameter("logDir", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.commons.datasource.jdbcpool.JdbcPoolServiceResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.commons.datasource.jdbcpool.JdbcPoolServiceResource()
{
	this->set_path("/system/console/configMgr/com.day.commons.datasource.jdbcpool.JdbcPoolService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.commons.datasource.jdbcpool.JdbcPoolServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.commons.datasource.jdbcpool.JdbcPoolServiceResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.commons.datasource.jdbcpool.JdbcPoolServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.commons.datasource.jdbcpool.JdbcPoolServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string jdbcPerioddriverPeriodclass = request->get_query_parameter("jdbcPerioddriverPeriodclass", "");
			const std::string jdbcPeriodconnectionPerioduri = request->get_query_parameter("jdbcPeriodconnectionPerioduri", "");
			const std::string jdbcPeriodusername = request->get_query_parameter("jdbcPeriodusername", "");
			const std::string jdbcPeriodpassword = request->get_query_parameter("jdbcPeriodpassword", "");
			const std::string jdbcPeriodvalidationPeriodquery = request->get_query_parameter("jdbcPeriodvalidationPeriodquery", "");
			const bool defaultPeriodreadonly = request->get_query_parameter("defaultPeriodreadonly", );
			const bool defaultPeriodautocommit = request->get_query_parameter("defaultPeriodautocommit", );
			const int32_t poolPeriodsize = request->get_query_parameter("poolPeriodsize", 0);
			const int32_t poolPeriodmaxPeriodwaitPeriodmsec = request->get_query_parameter("poolPeriodmaxPeriodwaitPeriodmsec", 0);
			const std::string datasourcePeriodname = request->get_query_parameter("datasourcePeriodname", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.commons.httpclientResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.commons.httpclientResource()
{
	this->set_path("/system/console/configMgr/com.day.commons.httpclient/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.commons.httpclientResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.commons.httpclientResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.commons.httpclientResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.commons.httpclientResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool proxyPeriodenabled = request->get_query_parameter("proxyPeriodenabled", );
			const std::string proxyPeriodhost = request->get_query_parameter("proxyPeriodhost", "");
			const std::string proxyPerioduser = request->get_query_parameter("proxyPerioduser", "");
			const std::string proxyPeriodpassword = request->get_query_parameter("proxyPeriodpassword", "");
			const std::string proxyPeriodntlmPeriodhost = request->get_query_parameter("proxyPeriodntlmPeriodhost", "");
			const std::string proxyPeriodntlmPerioddomain = request->get_query_parameter("proxyPeriodntlmPerioddomain", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.impl.StorePropertiesChangeListenerResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.impl.StorePropertiesChangeListenerResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.analytics.impl.StorePropertiesChangeListener/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.impl.StorePropertiesChangeListenerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.impl.StorePropertiesChangeListenerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.impl.StorePropertiesChangeListenerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.impl.StorePropertiesChangeListenerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.sitecatalyst.impl.exporter.ClassificationsExporterResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.sitecatalyst.impl.exporter.ClassificationsExporterResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.exporter.ClassificationsExporter/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.sitecatalyst.impl.exporter.ClassificationsExporterResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.sitecatalyst.impl.exporter.ClassificationsExporterResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.sitecatalyst.impl.exporter.ClassificationsExporterResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.sitecatalyst.impl.exporter.ClassificationsExporterResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t cqPeriodanalyticsPeriodsaintPeriodexporterPeriodpagesize = request->get_query_parameter("cqPeriodanalyticsPeriodsaintPeriodexporterPeriodpagesize", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.sitecatalyst.impl.importer.ReportImporterResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.sitecatalyst.impl.importer.ReportImporterResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.importer.ReportImporter/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.sitecatalyst.impl.importer.ReportImporterResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.sitecatalyst.impl.importer.ReportImporterResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.sitecatalyst.impl.importer.ReportImporterResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.sitecatalyst.impl.importer.ReportImporterResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t reportPeriodfetchPeriodattempts = request->get_query_parameter("reportPeriodfetchPeriodattempts", 0);
			const int32_t reportPeriodfetchPerioddelay = request->get_query_parameter("reportPeriodfetchPerioddelay", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.sitecatalyst.impl.SitecatalystAdapterFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.sitecatalyst.impl.SitecatalystAdapterFactoryResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystAdapterFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.sitecatalyst.impl.SitecatalystAdapterFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.sitecatalyst.impl.SitecatalystAdapterFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.sitecatalyst.impl.SitecatalystAdapterFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.sitecatalyst.impl.SitecatalystAdapterFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.sitecatalyst.impl.SitecatalystHttpClientImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.sitecatalyst.impl.SitecatalystHttpClientImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystHttpClientImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.sitecatalyst.impl.SitecatalystHttpClientImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.sitecatalyst.impl.SitecatalystHttpClientImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.sitecatalyst.impl.SitecatalystHttpClientImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.sitecatalyst.impl.SitecatalystHttpClientImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t connectionPeriodtimeout = request->get_query_parameter("connectionPeriodtimeout", 0);
			const int32_t socketPeriodtimeout = request->get_query_parameter("socketPeriodtimeout", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.AccountOptionsUpdaterResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.AccountOptionsUpdaterResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.AccountOptionsUpdater/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.AccountOptionsUpdaterResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.AccountOptionsUpdaterResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.AccountOptionsUpdaterResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.AccountOptionsUpdaterResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool cqPeriodanalyticsPeriodtestandtargetPeriodaccountoptionsupdaterPeriodenabled = request->get_query_parameter("cqPeriodanalyticsPeriodtestandtargetPeriodaccountoptionsupdaterPeriodenabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.DeleteAuthorActivityListenerResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.DeleteAuthorActivityListenerResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.DeleteAuthorActivityListener/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.DeleteAuthorActivityListenerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.DeleteAuthorActivityListenerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.DeleteAuthorActivityListenerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.DeleteAuthorActivityListenerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool cqPeriodanalyticsPeriodtestandtargetPerioddeleteauthoractivitylistenerPeriodenabled = request->get_query_parameter("cqPeriodanalyticsPeriodtestandtargetPerioddeleteauthoractivitylistenerPeriodenabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.PushAuthorCampaignPageListenerResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.PushAuthorCampaignPageListenerResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.PushAuthorCampaignPageListener/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.PushAuthorCampaignPageListenerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.PushAuthorCampaignPageListenerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.PushAuthorCampaignPageListenerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.PushAuthorCampaignPageListenerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool cqPeriodanalyticsPeriodtestandtargetPeriodpushauthorcampaignpagelistenerPeriodenabled = request->get_query_parameter("cqPeriodanalyticsPeriodtestandtargetPeriodpushauthorcampaignpagelistenerPeriodenabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.SegmentImporterResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.SegmentImporterResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.SegmentImporter/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.SegmentImporterResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.SegmentImporterResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.SegmentImporterResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.SegmentImporterResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool cqPeriodanalyticsPeriodtestandtargetPeriodsegmentimporterPeriodenabled = request->get_query_parameter("cqPeriodanalyticsPeriodtestandtargetPeriodsegmentimporterPeriodenabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.service.WebServiceImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.service.WebServiceImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.service.WebServiceImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.service.WebServiceImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.service.WebServiceImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.service.WebServiceImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.service.WebServiceImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string endpointUri = request->get_query_parameter("endpointUri", "");
			const int32_t connectionTimeout = request->get_query_parameter("connectionTimeout", 0);
			const int32_t socketTimeout = request->get_query_parameter("socketTimeout", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.servlets.AdminServerServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.servlets.AdminServerServletResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.servlets.AdminServerServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.servlets.AdminServerServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.servlets.AdminServerServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.servlets.AdminServerServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.servlets.AdminServerServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string testandtargetPeriodendpointPeriodurl = request->get_query_parameter("testandtargetPeriodendpointPeriodurl", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.TestandtargetHttpClientImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.TestandtargetHttpClientImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.TestandtargetHttpClientImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.TestandtargetHttpClientImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.TestandtargetHttpClientImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.TestandtargetHttpClientImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.analytics.testandtarget.impl.TestandtargetHttpClientImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string cqPeriodanalyticsPeriodtestandtargetPeriodapiPeriodurl = request->get_query_parameter("cqPeriodanalyticsPeriodtestandtargetPeriodapiPeriodurl", "");
			const int32_t cqPeriodanalyticsPeriodtestandtargetPeriodtimeout = request->get_query_parameter("cqPeriodanalyticsPeriodtestandtargetPeriodtimeout", 0);
			const int32_t cqPeriodanalyticsPeriodtestandtargetPeriodsockettimeout = request->get_query_parameter("cqPeriodanalyticsPeriodtestandtargetPeriodsockettimeout", 0);
			const std::string cqPeriodanalyticsPeriodtestandtargetPeriodrecommendationsPeriodurlPeriodreplace = request->get_query_parameter("cqPeriodanalyticsPeriodtestandtargetPeriodrecommendationsPeriodurlPeriodreplace", "");
			const std::string cqPeriodanalyticsPeriodtestandtargetPeriodrecommendationsPeriodurlPeriodreplacewith = request->get_query_parameter("cqPeriodanalyticsPeriodtestandtargetPeriodrecommendationsPeriodurlPeriodreplacewith", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.auth.impl.cug.CugSupportImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.auth.impl.cug.CugSupportImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.auth.impl.cug.CugSupportImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.auth.impl.cug.CugSupportImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.auth.impl.cug.CugSupportImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.auth.impl.cug.CugSupportImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.auth.impl.cug.CugSupportImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool cugPeriodenabled = request->get_query_parameter("cugPeriodenabled", );
			const std::string cugPeriodprincipalsPeriodregex = request->get_query_parameter("cugPeriodprincipalsPeriodregex", "");
			const std::string cugPeriodprincipalsPeriodreplacement = request->get_query_parameter("cugPeriodprincipalsPeriodreplacement", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.auth.impl.LoginSelectorHandlerResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.auth.impl.LoginSelectorHandlerResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.auth.impl.LoginSelectorHandler/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.auth.impl.LoginSelectorHandlerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.auth.impl.LoginSelectorHandlerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.auth.impl.LoginSelectorHandlerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.auth.impl.LoginSelectorHandlerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string path = request->get_query_parameter("path", "");
			const int32_t servicePeriodranking = request->get_query_parameter("servicePeriodranking", 0);
			const std::string authPeriodloginselectorPerioddefaultloginpage = request->get_query_parameter("authPeriodloginselectorPerioddefaultloginpage", "");
			const std::string authPeriodloginselectorPerioddefaultchangepwpage = request->get_query_parameter("authPeriodloginselectorPerioddefaultchangepwpage", "");
			const bool authPeriodloginselectorPeriodhandlePeriodallPeriodextensions = request->get_query_parameter("authPeriodloginselectorPeriodhandlePeriodallPeriodextensions", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.commons.impl.ExternalizerImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.commons.impl.ExternalizerImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.commons.impl.ExternalizerImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.commons.impl.ExternalizerImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.commons.impl.ExternalizerImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.commons.impl.ExternalizerImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.commons.impl.ExternalizerImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string externalizerPeriodhost = request->get_query_parameter("externalizerPeriodhost", "");
			const std::string externalizerPeriodcontextpath = request->get_query_parameter("externalizerPeriodcontextpath", "");
			const bool externalizerPeriodencodedpath = request->get_query_parameter("externalizerPeriodencodedpath", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.commons.servlets.RootMappingServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.commons.servlets.RootMappingServletResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.commons.servlets.RootMappingServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.commons.servlets.RootMappingServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.commons.servlets.RootMappingServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.commons.servlets.RootMappingServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.commons.servlets.RootMappingServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string rootmappingPeriodtarget = request->get_query_parameter("rootmappingPeriodtarget", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.compat.codeupgrade.impl.CodeUpgradeExecutionConditionCheckerResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.compat.codeupgrade.impl.CodeUpgradeExecutionConditionCheckerResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.CodeUpgradeExecutionConditionChecker/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.compat.codeupgrade.impl.CodeUpgradeExecutionConditionCheckerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.compat.codeupgrade.impl.CodeUpgradeExecutionConditionCheckerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.compat.codeupgrade.impl.CodeUpgradeExecutionConditionCheckerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.compat.codeupgrade.impl.CodeUpgradeExecutionConditionCheckerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.compat.codeupgrade.impl.UpgradeTaskIgnoreListResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.compat.codeupgrade.impl.UpgradeTaskIgnoreListResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.UpgradeTaskIgnoreList/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.compat.codeupgrade.impl.UpgradeTaskIgnoreListResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.compat.codeupgrade.impl.UpgradeTaskIgnoreListResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.compat.codeupgrade.impl.UpgradeTaskIgnoreListResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.compat.codeupgrade.impl.UpgradeTaskIgnoreListResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.compat.codeupgrade.impl.VersionRangeTaskIgnorelistResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.compat.codeupgrade.impl.VersionRangeTaskIgnorelistResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.VersionRangeTaskIgnorelist/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.compat.codeupgrade.impl.VersionRangeTaskIgnorelistResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.compat.codeupgrade.impl.VersionRangeTaskIgnorelistResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.compat.codeupgrade.impl.VersionRangeTaskIgnorelistResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.compat.codeupgrade.impl.VersionRangeTaskIgnorelistResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string effectiveBundleListPath = request->get_query_parameter("effectiveBundleListPath", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.contentsync.impl.ContentSyncManagerImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.contentsync.impl.ContentSyncManagerImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.contentsync.impl.ContentSyncManagerImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.contentsync.impl.ContentSyncManagerImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.contentsync.impl.ContentSyncManagerImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.contentsync.impl.ContentSyncManagerImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.contentsync.impl.ContentSyncManagerImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string contentsyncPeriodfallbackPeriodauthorizable = request->get_query_parameter("contentsyncPeriodfallbackPeriodauthorizable", "");
			const std::string contentsyncPeriodfallbackPeriodupdateuser = request->get_query_parameter("contentsyncPeriodfallbackPeriodupdateuser", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.commons.handler.StandardImageHandlerResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.commons.handler.StandardImageHandlerResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.commons.handler.StandardImageHandler/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.commons.handler.StandardImageHandlerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.commons.handler.StandardImageHandlerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.commons.handler.StandardImageHandlerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.commons.handler.StandardImageHandlerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t largeFileThreshold = request->get_query_parameter("largeFileThreshold", 0);
			const int32_t largeCommentThreshold = request->get_query_parameter("largeCommentThreshold", 0);
			const bool cqPerioddamPeriodenablePeriodextPeriodmetaPeriodextraction = request->get_query_parameter("cqPerioddamPeriodenablePeriodextPeriodmetaPeriodextraction", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.commons.metadata.XmpFilterBlackWhiteResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.commons.metadata.XmpFilterBlackWhiteResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.commons.metadata.XmpFilterBlackWhite/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.commons.metadata.XmpFilterBlackWhiteResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.commons.metadata.XmpFilterBlackWhiteResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.commons.metadata.XmpFilterBlackWhiteResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.commons.metadata.XmpFilterBlackWhiteResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool xmpPeriodfilterPeriodapplyWhitelist = request->get_query_parameter("xmpPeriodfilterPeriodapplyWhitelist", );
			const bool xmpPeriodfilterPeriodapplyBlacklist = request->get_query_parameter("xmpPeriodfilterPeriodapplyBlacklist", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.commons.util.impl.AssetCacheImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.commons.util.impl.AssetCacheImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.commons.util.impl.AssetCacheImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.commons.util.impl.AssetCacheImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.commons.util.impl.AssetCacheImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.commons.util.impl.AssetCacheImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.commons.util.impl.AssetCacheImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t largePeriodfilePeriodmin = request->get_query_parameter("largePeriodfilePeriodmin", 0);
			const bool cachePeriodapply = request->get_query_parameter("cachePeriodapply", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.annotation.pdf.AnnotationPdfConfigResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.annotation.pdf.AnnotationPdfConfigResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.core.impl.annotation.pdf.AnnotationPdfConfig/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.annotation.pdf.AnnotationPdfConfigResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.annotation.pdf.AnnotationPdfConfigResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.annotation.pdf.AnnotationPdfConfigResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.annotation.pdf.AnnotationPdfConfigResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodwidth = request->get_query_parameter("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodwidth", 0);
			const int32_t cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodheight = request->get_query_parameter("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodheight", 0);
			const int32_t cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodpaddingPeriodhorizontal = request->get_query_parameter("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodpaddingPeriodhorizontal", 0);
			const int32_t cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodpaddingPeriodvertical = request->get_query_parameter("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodpaddingPeriodvertical", 0);
			const int32_t cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodsize = request->get_query_parameter("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodsize", 0);
			const std::string cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodcolor = request->get_query_parameter("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodcolor", "");
			const std::string cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodfamily = request->get_query_parameter("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodfamily", "");
			const std::string cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodlight = request->get_query_parameter("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodlight", "");
			const int32_t cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodmarginTextImage = request->get_query_parameter("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodmarginTextImage", 0);
			const int32_t cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodminImageHeight = request->get_query_parameter("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodminImageHeight", 0);
			const int32_t cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodwidth = request->get_query_parameter("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodwidth", 0);
			const std::string cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodapproved = request->get_query_parameter("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodapproved", "");
			const std::string cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodrejected = request->get_query_parameter("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodrejected", "");
			const std::string cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodchangesRequested = request->get_query_parameter("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodchangesRequested", "");
			const int32_t cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodannotationMarkerPeriodwidth = request->get_query_parameter("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodannotationMarkerPeriodwidth", 0);
			const int32_t cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodassetPeriodminheight = request->get_query_parameter("cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodassetPeriodminheight", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.AssetMoveListenerResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.AssetMoveListenerResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.core.impl.AssetMoveListener/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.AssetMoveListenerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.AssetMoveListenerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.AssetMoveListenerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.AssetMoveListenerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool enabled = request->get_query_parameter("enabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.assethome.AssetHomePageConfigurationResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.assethome.AssetHomePageConfigurationResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.core.impl.assethome.AssetHomePageConfiguration/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.assethome.AssetHomePageConfigurationResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.assethome.AssetHomePageConfigurationResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.assethome.AssetHomePageConfigurationResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.assethome.AssetHomePageConfigurationResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool isEnabled = request->get_query_parameter("isEnabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.assetlinkshare.AdhocAssetShareProxyServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.assetlinkshare.AdhocAssetShareProxyServletResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.core.impl.assetlinkshare.AdhocAssetShareProxyServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.assetlinkshare.AdhocAssetShareProxyServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.assetlinkshare.AdhocAssetShareProxyServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.assetlinkshare.AdhocAssetShareProxyServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.assetlinkshare.AdhocAssetShareProxyServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t cqPerioddamPeriodadhocPeriodassetPeriodsharePeriodprezipPeriodmaxcontentsize = request->get_query_parameter("cqPerioddamPeriodadhocPeriodassetPeriodsharePeriodprezipPeriodmaxcontentsize", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.cache.CQBufferedImageCacheResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.cache.CQBufferedImageCacheResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.core.impl.cache.CQBufferedImageCache/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.cache.CQBufferedImageCacheResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.cache.CQBufferedImageCacheResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.cache.CQBufferedImageCacheResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.cache.CQBufferedImageCacheResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t cqPerioddamPeriodimagePeriodcachePeriodmaxPeriodmemory = request->get_query_parameter("cqPerioddamPeriodimagePeriodcachePeriodmaxPeriodmemory", 0);
			const int32_t cqPerioddamPeriodimagePeriodcachePeriodmaxPeriodage = request->get_query_parameter("cqPerioddamPeriodimagePeriodcachePeriodmaxPeriodage", 0);
			const std::string cqPerioddamPeriodimagePeriodcachePeriodmaxPerioddimension = request->get_query_parameter("cqPerioddamPeriodimagePeriodcachePeriodmaxPerioddimension", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.DamChangeEventListenerResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.DamChangeEventListenerResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.core.impl.DamChangeEventListener/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.DamChangeEventListenerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.DamChangeEventListenerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.DamChangeEventListenerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.DamChangeEventListenerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.DamEventPurgeServiceResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.DamEventPurgeServiceResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.core.impl.DamEventPurgeService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.DamEventPurgeServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.DamEventPurgeServiceResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.DamEventPurgeServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.DamEventPurgeServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string schedulerPeriodexpression = request->get_query_parameter("schedulerPeriodexpression", "");
			const int32_t maxSavedActivities = request->get_query_parameter("maxSavedActivities", 0);
			const int32_t saveInterval = request->get_query_parameter("saveInterval", 0);
			const bool enableActivityPurge = request->get_query_parameter("enableActivityPurge", );
			const std::string eventTypes = request->get_query_parameter("eventTypes", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.DamEventRecorderImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.DamEventRecorderImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.core.impl.DamEventRecorderImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.DamEventRecorderImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.DamEventRecorderImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.DamEventRecorderImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.DamEventRecorderImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string eventPeriodfilter = request->get_query_parameter("eventPeriodfilter", "");
			const int32_t eventPeriodqueuePeriodlength = request->get_query_parameter("eventPeriodqueuePeriodlength", 0);
			const bool eventrecorderPeriodenabled = request->get_query_parameter("eventrecorderPeriodenabled", );
			const std::string eventrecorderPeriodeventtypes = request->get_query_parameter("eventrecorderPeriodeventtypes", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.event.DamEventAuditListenerResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.event.DamEventAuditListenerResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.core.impl.event.DamEventAuditListener/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.event.DamEventAuditListenerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.event.DamEventAuditListenerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.event.DamEventAuditListenerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.event.DamEventAuditListenerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string eventPeriodfilter = request->get_query_parameter("eventPeriodfilter", "");
			const bool enabled = request->get_query_parameter("enabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.ExpiryNotificationJobImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.ExpiryNotificationJobImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.core.impl.ExpiryNotificationJobImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.ExpiryNotificationJobImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.ExpiryNotificationJobImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.ExpiryNotificationJobImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.ExpiryNotificationJobImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodistimebased = request->get_query_parameter("cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodistimebased", );
			const std::string cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodtimebasedPeriodrule = request->get_query_parameter("cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodtimebasedPeriodrule", "");
			const int32_t cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodperiodPeriodrule = request->get_query_parameter("cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodperiodPeriodrule", 0);
			const bool sendEmail = request->get_query_parameter("sendEmail", );
			const int32_t assetExpiredLimit = request->get_query_parameter("assetExpiredLimit", 0);
			const int32_t priorNotificationSeconds = request->get_query_parameter("priorNotificationSeconds", 0);
			const std::string cqPerioddamPeriodexpiryPeriodnotificationPeriodurlPeriodprotocol = request->get_query_parameter("cqPerioddamPeriodexpiryPeriodnotificationPeriodurlPeriodprotocol", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.foldermetadataschema.FolderMetadataSchemaFeatureFlagResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.foldermetadataschema.FolderMetadataSchemaFeatureFlagResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.core.impl.foldermetadataschema.FolderMetadataSchemaFeatureFlag/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.foldermetadataschema.FolderMetadataSchemaFeatureFlagResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.foldermetadataschema.FolderMetadataSchemaFeatureFlagResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.foldermetadataschema.FolderMetadataSchemaFeatureFlagResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.foldermetadataschema.FolderMetadataSchemaFeatureFlagResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool isEnabled = request->get_query_parameter("isEnabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.gfx.CommonsGfxRendererResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.gfx.CommonsGfxRendererResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.core.impl.gfx.CommonsGfxRenderer/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.gfx.CommonsGfxRendererResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.gfx.CommonsGfxRendererResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.gfx.CommonsGfxRendererResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.gfx.CommonsGfxRendererResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool skipPeriodbufferedcache = request->get_query_parameter("skipPeriodbufferedcache", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.handler.EPSFormatHandlerResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.handler.EPSFormatHandlerResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.core.impl.handler.EPSFormatHandler/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.handler.EPSFormatHandlerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.handler.EPSFormatHandlerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.handler.EPSFormatHandlerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.handler.EPSFormatHandlerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string mimetype = request->get_query_parameter("mimetype", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.handler.IndesignFormatHandlerResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.handler.IndesignFormatHandlerResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.core.impl.handler.IndesignFormatHandler/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.handler.IndesignFormatHandlerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.handler.IndesignFormatHandlerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.handler.IndesignFormatHandlerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.handler.IndesignFormatHandlerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.handler.JpegHandlerResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.handler.JpegHandlerResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.core.impl.handler.JpegHandler/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.handler.JpegHandlerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.handler.JpegHandlerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.handler.JpegHandlerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.handler.JpegHandlerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool cqPerioddamPeriodenablePeriodextPeriodmetaPeriodextraction = request->get_query_parameter("cqPerioddamPeriodenablePeriodextPeriodmetaPeriodextraction", );
			const int32_t largeFileThreshold = request->get_query_parameter("largeFileThreshold", 0);
			const int32_t largeCommentThreshold = request->get_query_parameter("largeCommentThreshold", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.handler.xmp.NCommXMPHandlerResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.handler.xmp.NCommXMPHandlerResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.core.impl.handler.xmp.NCommXMPHandler/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.handler.xmp.NCommXMPHandlerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.handler.xmp.NCommXMPHandlerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.handler.xmp.NCommXMPHandlerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.handler.xmp.NCommXMPHandlerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.jmx.AssetIndexUpdateMonitorResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.jmx.AssetIndexUpdateMonitorResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetIndexUpdateMonitor/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.jmx.AssetIndexUpdateMonitorResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.jmx.AssetIndexUpdateMonitorResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.jmx.AssetIndexUpdateMonitorResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.jmx.AssetIndexUpdateMonitorResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string jmxPeriodobjectname = request->get_query_parameter("jmxPeriodobjectname", "");
			const bool propertyPeriodmeasurePeriodenabled = request->get_query_parameter("propertyPeriodmeasurePeriodenabled", );
			const std::string propertyPeriodname = request->get_query_parameter("propertyPeriodname", "");
			const int32_t propertyPeriodmaxPeriodwaitPeriodms = request->get_query_parameter("propertyPeriodmaxPeriodwaitPeriodms", 0);
			const double propertyPeriodmaxPeriodrate = request->get_query_parameter("propertyPeriodmaxPeriodrate", 0.0);
			const bool fulltextPeriodmeasurePeriodenabled = request->get_query_parameter("fulltextPeriodmeasurePeriodenabled", );
			const std::string fulltextPeriodname = request->get_query_parameter("fulltextPeriodname", "");
			const int32_t fulltextPeriodmaxPeriodwaitPeriodms = request->get_query_parameter("fulltextPeriodmaxPeriodwaitPeriodms", 0);
			const double fulltextPeriodmaxPeriodrate = request->get_query_parameter("fulltextPeriodmaxPeriodrate", 0.0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.jmx.AssetMigrationMBeanImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.jmx.AssetMigrationMBeanImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetMigrationMBeanImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.jmx.AssetMigrationMBeanImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.jmx.AssetMigrationMBeanImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.jmx.AssetMigrationMBeanImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.jmx.AssetMigrationMBeanImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string jmxPeriodobjectname = request->get_query_parameter("jmxPeriodobjectname", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.jmx.AssetUpdateMonitorImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.jmx.AssetUpdateMonitorImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetUpdateMonitorImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.jmx.AssetUpdateMonitorImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.jmx.AssetUpdateMonitorImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.jmx.AssetUpdateMonitorImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.jmx.AssetUpdateMonitorImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string jmxPeriodobjectname = request->get_query_parameter("jmxPeriodobjectname", "");
			const bool active = request->get_query_parameter("active", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.jobs.metadataexport.AsyncMetadataExportConfigProviderServiceResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.jobs.metadataexport.AsyncMetadataExportConfigProviderServiceResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataexport.AsyncMetadataExportConfigProviderService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.jobs.metadataexport.AsyncMetadataExportConfigProviderServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.jobs.metadataexport.AsyncMetadataExportConfigProviderServiceResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.jobs.metadataexport.AsyncMetadataExportConfigProviderServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.jobs.metadataexport.AsyncMetadataExportConfigProviderServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string operation = request->get_query_parameter("operation", "");
			const bool emailEnabled = request->get_query_parameter("emailEnabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.jobs.metadataimport.AsyncMetadataImportConfigProviderServiceResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.jobs.metadataimport.AsyncMetadataImportConfigProviderServiceResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataimport.AsyncMetadataImportConfigProviderService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.jobs.metadataimport.AsyncMetadataImportConfigProviderServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.jobs.metadataimport.AsyncMetadataImportConfigProviderServiceResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.jobs.metadataimport.AsyncMetadataImportConfigProviderServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.jobs.metadataimport.AsyncMetadataImportConfigProviderServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string operation = request->get_query_parameter("operation", "");
			const std::string operationIcon = request->get_query_parameter("operationIcon", "");
			const std::string topicName = request->get_query_parameter("topicName", "");
			const bool emailEnabled = request->get_query_parameter("emailEnabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.lightbox.LightboxServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.lightbox.LightboxServletResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.core.impl.lightbox.LightboxServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.lightbox.LightboxServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.lightbox.LightboxServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.lightbox.LightboxServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.lightbox.LightboxServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string slingPeriodservletPeriodpaths = request->get_query_parameter("slingPeriodservletPeriodpaths", "");
			const bool cqPerioddamPeriodenablePeriodanonymous = request->get_query_parameter("cqPerioddamPeriodenablePeriodanonymous", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.metadata.editor.SelectComponentHandlerResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.metadata.editor.SelectComponentHandlerResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.core.impl.metadata.editor.SelectComponentHandler/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.metadata.editor.SelectComponentHandlerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.metadata.editor.SelectComponentHandlerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.metadata.editor.SelectComponentHandlerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.metadata.editor.SelectComponentHandlerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.mimeType.AssetUploadRestrictionHelperResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.mimeType.AssetUploadRestrictionHelperResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.core.impl.mimeType.AssetUploadRestrictionHelper/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.mimeType.AssetUploadRestrictionHelperResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.mimeType.AssetUploadRestrictionHelperResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.mimeType.AssetUploadRestrictionHelperResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.mimeType.AssetUploadRestrictionHelperResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool cqPerioddamPeriodallowPeriodallPeriodmime = request->get_query_parameter("cqPerioddamPeriodallowPeriodallPeriodmime", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.mimeType.DamMimeTypeServiceImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.mimeType.DamMimeTypeServiceImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.core.impl.mimeType.DamMimeTypeServiceImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.mimeType.DamMimeTypeServiceImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.mimeType.DamMimeTypeServiceImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.mimeType.DamMimeTypeServiceImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.mimeType.DamMimeTypeServiceImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool cqPerioddamPerioddetectPeriodassetPeriodmimePeriodfromPeriodcontent = request->get_query_parameter("cqPerioddamPerioddetectPeriodassetPeriodmimePeriodfromPeriodcontent", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.MissingMetadataNotificationJobResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.MissingMetadataNotificationJobResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.core.impl.MissingMetadataNotificationJob/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.MissingMetadataNotificationJobResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.MissingMetadataNotificationJobResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.MissingMetadataNotificationJobResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.MissingMetadataNotificationJobResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodistimebased = request->get_query_parameter("cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodistimebased", );
			const std::string cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodtimebasedPeriodrule = request->get_query_parameter("cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodtimebasedPeriodrule", "");
			const int32_t cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodperiodPeriodrule = request->get_query_parameter("cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodperiodPeriodrule", 0);
			const std::string cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodrecipient = request->get_query_parameter("cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodrecipient", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.process.SendTransientWorkflowCompletedEmailProcessResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.process.SendTransientWorkflowCompletedEmailProcessResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.core.impl.process.SendTransientWorkflowCompletedEmailProcess/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.process.SendTransientWorkflowCompletedEmailProcessResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.process.SendTransientWorkflowCompletedEmailProcessResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.process.SendTransientWorkflowCompletedEmailProcessResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.process.SendTransientWorkflowCompletedEmailProcessResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string processPeriodlabel = request->get_query_parameter("processPeriodlabel", "");
			const bool notify_on_Complete = request->get_query_parameter("notify_on_Complete", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.process.TextExtractionProcessResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.process.TextExtractionProcessResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.core.impl.process.TextExtractionProcess/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.process.TextExtractionProcessResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.process.TextExtractionProcessResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.process.TextExtractionProcessResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.process.TextExtractionProcessResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t maxExtract = request->get_query_parameter("maxExtract", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.RenditionMakerImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.RenditionMakerImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.core.impl.RenditionMakerImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.RenditionMakerImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.RenditionMakerImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.RenditionMakerImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.RenditionMakerImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool xmpPeriodpropagate = request->get_query_parameter("xmpPeriodpropagate", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.reports.ReportExportServiceResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.reports.ReportExportServiceResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportExportService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.reports.ReportExportServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.reports.ReportExportServiceResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.reports.ReportExportServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.reports.ReportExportServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t queryBatchSize = request->get_query_parameter("queryBatchSize", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.reports.ReportPurgeServiceResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.reports.ReportPurgeServiceResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportPurgeService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.reports.ReportPurgeServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.reports.ReportPurgeServiceResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.reports.ReportPurgeServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.reports.ReportPurgeServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string schedulerPeriodexpression = request->get_query_parameter("schedulerPeriodexpression", "");
			const int32_t maxSavedReports = request->get_query_parameter("maxSavedReports", 0);
			const int32_t timeDuration = request->get_query_parameter("timeDuration", 0);
			const bool enableReportPurge = request->get_query_parameter("enableReportPurge", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.AssetDownloadServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.AssetDownloadServletResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetDownloadServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.AssetDownloadServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.AssetDownloadServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.AssetDownloadServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.AssetDownloadServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool enabled = request->get_query_parameter("enabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.AssetStatusServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.AssetStatusServletResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetStatusServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.AssetStatusServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.AssetStatusServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.AssetStatusServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.AssetStatusServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t cqPerioddamPeriodbatchPeriodstatusPeriodmaxassets = request->get_query_parameter("cqPerioddamPeriodbatchPeriodstatusPeriodmaxassets", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.AssetXMPSearchServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.AssetXMPSearchServletResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetXMPSearchServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.AssetXMPSearchServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.AssetXMPSearchServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.AssetXMPSearchServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.AssetXMPSearchServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t cqPerioddamPeriodbatchPeriodindesignPeriodmaxassets = request->get_query_parameter("cqPerioddamPeriodbatchPeriodindesignPeriodmaxassets", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.BatchMetadataServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.BatchMetadataServletResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.BatchMetadataServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.BatchMetadataServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.BatchMetadataServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.BatchMetadataServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.BatchMetadataServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t cqPerioddamPeriodbatchPeriodmetadataPeriodmaxresources = request->get_query_parameter("cqPerioddamPeriodbatchPeriodmetadataPeriodmaxresources", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.BinaryProviderServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.BinaryProviderServletResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.BinaryProviderServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.BinaryProviderServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.BinaryProviderServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.BinaryProviderServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.BinaryProviderServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool cqPerioddamPerioddrmPeriodenable = request->get_query_parameter("cqPerioddamPerioddrmPeriodenable", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.CollectionServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.CollectionServletResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.CollectionServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.CollectionServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.CollectionServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.CollectionServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t cqPerioddamPeriodbatchPeriodcollectionPeriodmaxcollections = request->get_query_parameter("cqPerioddamPeriodbatchPeriodcollectionPeriodmaxcollections", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.CollectionsServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.CollectionsServletResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionsServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.CollectionsServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.CollectionsServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.CollectionsServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.CollectionsServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t cqPerioddamPeriodbatchPeriodcollectionsPeriodlimit = request->get_query_parameter("cqPerioddamPeriodbatchPeriodcollectionsPeriodlimit", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.CompanionServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.CompanionServletResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CompanionServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.CompanionServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.CompanionServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.CompanionServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.CompanionServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string more_Info = request->get_query_parameter("more_Info", "");
			const std::string SlashmntSlashoverlaySlashdamSlashguiSlashcontentSlashassetsSlashmoreinfoPeriodhtmlSlashDollarLeft_Curly_BracketpathRight_Curly_Bracket = request->get_query_parameter("SlashmntSlashoverlaySlashdamSlashguiSlashcontentSlashassetsSlashmoreinfoPeriodhtmlSlashDollarLeft_Curly_BracketpathRight_Curly_Bracket", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.CreateAssetServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.CreateAssetServletResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CreateAssetServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.CreateAssetServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.CreateAssetServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.CreateAssetServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.CreateAssetServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool detectDuplicate = request->get_query_parameter("detectDuplicate", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.DamContentDispositionFilterResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.DamContentDispositionFilterResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.DamContentDispositionFilter/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.DamContentDispositionFilterResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.DamContentDispositionFilterResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.DamContentDispositionFilterResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.DamContentDispositionFilterResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool cqPerioddamPeriodemptyPeriodmime = request->get_query_parameter("cqPerioddamPeriodemptyPeriodmime", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.GuidLookupFilterResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.GuidLookupFilterResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.GuidLookupFilter/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.GuidLookupFilterResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.GuidLookupFilterResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.GuidLookupFilterResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.GuidLookupFilterResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool cqPerioddamPeriodcorePeriodguidlookupfilterPeriodenabled = request->get_query_parameter("cqPerioddamPeriodcorePeriodguidlookupfilterPeriodenabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.HealthCheckServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.HealthCheckServletResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.HealthCheckServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.HealthCheckServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.HealthCheckServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.HealthCheckServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.HealthCheckServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string cqPerioddamPeriodsyncPeriodworkflowPeriodid = request->get_query_parameter("cqPerioddamPeriodsyncPeriodworkflowPeriodid", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.MetadataGetServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.MetadataGetServletResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.MetadataGetServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.MetadataGetServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.MetadataGetServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.MetadataGetServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.MetadataGetServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string slingPeriodservletPeriodresourceTypes = request->get_query_parameter("slingPeriodservletPeriodresourceTypes", "");
			const std::string slingPeriodservletPeriodmethods = request->get_query_parameter("slingPeriodservletPeriodmethods", "");
			const std::string slingPeriodservletPeriodextensions = request->get_query_parameter("slingPeriodservletPeriodextensions", "");
			const std::string slingPeriodservletPeriodselectors = request->get_query_parameter("slingPeriodservletPeriodselectors", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.MultipleLicenseAcceptServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.MultipleLicenseAcceptServletResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.MultipleLicenseAcceptServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.MultipleLicenseAcceptServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.MultipleLicenseAcceptServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.MultipleLicenseAcceptServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.MultipleLicenseAcceptServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool cqPerioddamPerioddrmPeriodenable = request->get_query_parameter("cqPerioddamPerioddrmPeriodenable", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.ResourceCollectionServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.ResourceCollectionServletResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.ResourceCollectionServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.ResourceCollectionServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.ResourceCollectionServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.ResourceCollectionServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.servlet.ResourceCollectionServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string slingPeriodservletPeriodmethods = request->get_query_parameter("slingPeriodservletPeriodmethods", "");
			const std::string slingPeriodservletPeriodselectors = request->get_query_parameter("slingPeriodservletPeriodselectors", "");
			const std::string downloadPeriodconfig = request->get_query_parameter("downloadPeriodconfig", "");
			const std::string viewPeriodselector = request->get_query_parameter("viewPeriodselector", "");
			const bool sendEmail = request->get_query_parameter("sendEmail", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.ui.preview.FolderPreviewUpdaterImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.ui.preview.FolderPreviewUpdaterImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.core.impl.ui.preview.FolderPreviewUpdaterImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.ui.preview.FolderPreviewUpdaterImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.ui.preview.FolderPreviewUpdaterImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.ui.preview.FolderPreviewUpdaterImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.ui.preview.FolderPreviewUpdaterImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool createPreviewEnabled = request->get_query_parameter("createPreviewEnabled", );
			const bool updatePreviewEnabled = request->get_query_parameter("updatePreviewEnabled", );
			const int32_t queueSize = request->get_query_parameter("queueSize", 0);
			const std::string folderPreviewRenditionRegex = request->get_query_parameter("folderPreviewRenditionRegex", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.unzip.UnzipConfigResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.unzip.UnzipConfigResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.core.impl.unzip.UnzipConfig/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.unzip.UnzipConfigResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.unzip.UnzipConfigResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.unzip.UnzipConfigResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.impl.unzip.UnzipConfigResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t cqPerioddamPeriodconfigPeriodunzipPeriodmaxuncompressedsize = request->get_query_parameter("cqPerioddamPeriodconfigPeriodunzipPeriodmaxuncompressedsize", 0);
			const std::string cqPerioddamPeriodconfigPeriodunzipPeriodencoding = request->get_query_parameter("cqPerioddamPeriodconfigPeriodunzipPeriodencoding", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.process.ExifToolExtractMetadataProcessResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.process.ExifToolExtractMetadataProcessResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.core.process.ExifToolExtractMetadataProcess/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.process.ExifToolExtractMetadataProcessResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.process.ExifToolExtractMetadataProcessResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.process.ExifToolExtractMetadataProcessResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.process.ExifToolExtractMetadataProcessResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string processPeriodlabel = request->get_query_parameter("processPeriodlabel", "");
			const bool cqPerioddamPeriodenablePeriodsha1 = request->get_query_parameter("cqPerioddamPeriodenablePeriodsha1", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.process.ExtractMetadataProcessResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.process.ExtractMetadataProcessResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.core.process.ExtractMetadataProcess/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.process.ExtractMetadataProcessResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.process.ExtractMetadataProcessResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.process.ExtractMetadataProcessResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.process.ExtractMetadataProcessResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string processPeriodlabel = request->get_query_parameter("processPeriodlabel", "");
			const bool cqPerioddamPeriodenablePeriodsha1 = request->get_query_parameter("cqPerioddamPeriodenablePeriodsha1", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.process.MetadataProcessorProcessResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.process.MetadataProcessorProcessResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.core.process.MetadataProcessorProcess/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.process.MetadataProcessorProcessResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.process.MetadataProcessorProcessResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.process.MetadataProcessorProcessResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.core.process.MetadataProcessorProcessResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string processPeriodlabel = request->get_query_parameter("processPeriodlabel", "");
			const bool cqPerioddamPeriodenablePeriodsha1 = request->get_query_parameter("cqPerioddamPeriodenablePeriodsha1", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.handler.ffmpeg.LocatorImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.handler.ffmpeg.LocatorImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.handler.ffmpeg.LocatorImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.handler.ffmpeg.LocatorImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.handler.ffmpeg.LocatorImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.handler.ffmpeg.LocatorImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.handler.ffmpeg.LocatorImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.handler.gibson.fontmanager.impl.FontManagerServiceImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.handler.gibson.fontmanager.impl.FontManagerServiceImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.handler.gibson.fontmanager.impl.FontManagerServiceImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.handler.gibson.fontmanager.impl.FontManagerServiceImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.handler.gibson.fontmanager.impl.FontManagerServiceImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.handler.gibson.fontmanager.impl.FontManagerServiceImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.handler.gibson.fontmanager.impl.FontManagerServiceImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string eventPeriodfilter = request->get_query_parameter("eventPeriodfilter", "");
			const std::string fontmgrPeriodadobePeriodfontPerioddir = request->get_query_parameter("fontmgrPeriodadobePeriodfontPerioddir", "");
			const std::string fontmgrPeriodcustomerPeriodfontPerioddir = request->get_query_parameter("fontmgrPeriodcustomerPeriodfontPerioddir", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.handler.standard.pdf.PdfHandlerResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.handler.standard.pdf.PdfHandlerResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.handler.standard.pdf.PdfHandler/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.handler.standard.pdf.PdfHandlerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.handler.standard.pdf.PdfHandlerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.handler.standard.pdf.PdfHandlerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.handler.standard.pdf.PdfHandlerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool rasterPeriodannotation = request->get_query_parameter("rasterPeriodannotation", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.handler.standard.ps.PostScriptHandlerResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.handler.standard.ps.PostScriptHandlerResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.handler.standard.ps.PostScriptHandler/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.handler.standard.ps.PostScriptHandlerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.handler.standard.ps.PostScriptHandlerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.handler.standard.ps.PostScriptHandlerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.handler.standard.ps.PostScriptHandlerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool rasterPeriodannotation = request->get_query_parameter("rasterPeriodannotation", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.handler.standard.psd.PsdHandlerResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.handler.standard.psd.PsdHandlerResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.handler.standard.psd.PsdHandler/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.handler.standard.psd.PsdHandlerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.handler.standard.psd.PsdHandlerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.handler.standard.psd.PsdHandlerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.handler.standard.psd.PsdHandlerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t largeFileThreshold = request->get_query_parameter("largeFileThreshold", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.ids.impl.IDSJobProcessorResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.ids.impl.IDSJobProcessorResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.ids.impl.IDSJobProcessor/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.ids.impl.IDSJobProcessorResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.ids.impl.IDSJobProcessorResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.ids.impl.IDSJobProcessorResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.ids.impl.IDSJobProcessorResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool enablePeriodmultisession = request->get_query_parameter("enablePeriodmultisession", );
			const bool idsPeriodccPeriodenable = request->get_query_parameter("idsPeriodccPeriodenable", );
			const bool enablePeriodretry = request->get_query_parameter("enablePeriodretry", );
			const bool enablePeriodretryPeriodscripterror = request->get_query_parameter("enablePeriodretryPeriodscripterror", );
			const std::string externalizerPerioddomainPeriodcqhost = request->get_query_parameter("externalizerPerioddomainPeriodcqhost", "");
			const std::string externalizerPerioddomainPeriodhttp = request->get_query_parameter("externalizerPerioddomainPeriodhttp", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.ids.impl.IDSPoolManagerImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.ids.impl.IDSPoolManagerImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.ids.impl.IDSPoolManagerImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.ids.impl.IDSPoolManagerImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.ids.impl.IDSPoolManagerImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.ids.impl.IDSPoolManagerImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.ids.impl.IDSPoolManagerImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t maxPerioderrorsPeriodtoPeriodblacklist = request->get_query_parameter("maxPerioderrorsPeriodtoPeriodblacklist", 0);
			const int32_t retryPeriodintervalPeriodtoPeriodwhitelist = request->get_query_parameter("retryPeriodintervalPeriodtoPeriodwhitelist", 0);
			const int32_t connectPeriodtimeout = request->get_query_parameter("connectPeriodtimeout", 0);
			const int32_t socketPeriodtimeout = request->get_query_parameter("socketPeriodtimeout", 0);
			const std::string processPeriodlabel = request->get_query_parameter("processPeriodlabel", "");
			const int32_t connectionPeriodusePeriodmax = request->get_query_parameter("connectionPeriodusePeriodmax", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.indd.impl.handler.IndesignXMPHandlerResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.indd.impl.handler.IndesignXMPHandlerResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.indd.impl.handler.IndesignXMPHandler/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.indd.impl.handler.IndesignXMPHandlerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.indd.impl.handler.IndesignXMPHandlerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.indd.impl.handler.IndesignXMPHandlerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.indd.impl.handler.IndesignXMPHandlerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string processPeriodlabel = request->get_query_parameter("processPeriodlabel", "");
			const bool extractPeriodpages = request->get_query_parameter("extractPeriodpages", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.indd.impl.servlet.SnippetCreationServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.indd.impl.servlet.SnippetCreationServletResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.indd.impl.servlet.SnippetCreationServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.indd.impl.servlet.SnippetCreationServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.indd.impl.servlet.SnippetCreationServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.indd.impl.servlet.SnippetCreationServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.indd.impl.servlet.SnippetCreationServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t snippetcreationPeriodmaxcollections = request->get_query_parameter("snippetcreationPeriodmaxcollections", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.indd.process.INDDMediaExtractProcessResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.indd.process.INDDMediaExtractProcessResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.indd.process.INDDMediaExtractProcess/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.indd.process.INDDMediaExtractProcessResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.indd.process.INDDMediaExtractProcessResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.indd.process.INDDMediaExtractProcessResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.indd.process.INDDMediaExtractProcessResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string processPeriodlabel = request->get_query_parameter("processPeriodlabel", "");
			const std::string cqPerioddamPeriodinddPeriodpagesPeriodregex = request->get_query_parameter("cqPerioddamPeriodinddPeriodpagesPeriodregex", "");
			const bool idsPeriodjobPerioddecoupled = request->get_query_parameter("idsPeriodjobPerioddecoupled", );
			const std::string idsPeriodjobPeriodworkflowPeriodmodel = request->get_query_parameter("idsPeriodjobPeriodworkflowPeriodmodel", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.performance.internal.AssetPerformanceDataHandlerImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.performance.internal.AssetPerformanceDataHandlerImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceDataHandlerImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.performance.internal.AssetPerformanceDataHandlerImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.performance.internal.AssetPerformanceDataHandlerImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.performance.internal.AssetPerformanceDataHandlerImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.performance.internal.AssetPerformanceDataHandlerImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t batchPeriodcommitPeriodsize = request->get_query_parameter("batchPeriodcommitPeriodsize", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.performance.internal.AssetPerformanceReportSyncJobResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.performance.internal.AssetPerformanceReportSyncJobResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceReportSyncJob/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.performance.internal.AssetPerformanceReportSyncJobResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.performance.internal.AssetPerformanceReportSyncJobResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.performance.internal.AssetPerformanceReportSyncJobResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.performance.internal.AssetPerformanceReportSyncJobResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string schedulerPeriodexpression = request->get_query_parameter("schedulerPeriodexpression", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.pim.impl.sourcing.upload.process.ProductAssetsUploadProcessResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.pim.impl.sourcing.upload.process.ProductAssetsUploadProcessResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.pim.impl.sourcing.upload.process.ProductAssetsUploadProcess/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.pim.impl.sourcing.upload.process.ProductAssetsUploadProcessResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.pim.impl.sourcing.upload.process.ProductAssetsUploadProcessResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.pim.impl.sourcing.upload.process.ProductAssetsUploadProcessResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.pim.impl.sourcing.upload.process.ProductAssetsUploadProcessResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool deletePeriodzipPeriodfile = request->get_query_parameter("deletePeriodzipPeriodfile", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.analytics.impl.S7damDynamicMediaConfigEventListenerResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.analytics.impl.S7damDynamicMediaConfigEventListenerResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.S7damDynamicMediaConfigEventListener/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.analytics.impl.S7damDynamicMediaConfigEventListenerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.analytics.impl.S7damDynamicMediaConfigEventListenerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.analytics.impl.S7damDynamicMediaConfigEventListenerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.analytics.impl.S7damDynamicMediaConfigEventListenerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool cqPerioddamPeriods7damPerioddynamicmediaconfigeventlistenerPeriodenabled = request->get_query_parameter("cqPerioddamPeriods7damPerioddynamicmediaconfigeventlistenerPeriodenabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.analytics.impl.SiteCatalystReportRunnerResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.analytics.impl.SiteCatalystReportRunnerResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.SiteCatalystReportRunner/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.analytics.impl.SiteCatalystReportRunnerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.analytics.impl.SiteCatalystReportRunnerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.analytics.impl.SiteCatalystReportRunnerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.analytics.impl.SiteCatalystReportRunnerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string schedulerPeriodexpression = request->get_query_parameter("schedulerPeriodexpression", "");
			const bool schedulerPeriodconcurrent = request->get_query_parameter("schedulerPeriodconcurrent", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.post.servlets.SetCreateHandlerResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.post.servlets.SetCreateHandlerResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetCreateHandler/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.post.servlets.SetCreateHandlerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.post.servlets.SetCreateHandlerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.post.servlets.SetCreateHandlerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.post.servlets.SetCreateHandlerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string slingPeriodpostPeriodoperation = request->get_query_parameter("slingPeriodpostPeriodoperation", "");
			const std::string slingPeriodservletPeriodmethods = request->get_query_parameter("slingPeriodservletPeriodmethods", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.post.servlets.SetModifyHandlerResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.post.servlets.SetModifyHandlerResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetModifyHandler/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.post.servlets.SetModifyHandlerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.post.servlets.SetModifyHandlerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.post.servlets.SetModifyHandlerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.post.servlets.SetModifyHandlerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string slingPeriodpostPeriodoperation = request->get_query_parameter("slingPeriodpostPeriodoperation", "");
			const std::string slingPeriodservletPeriodmethods = request->get_query_parameter("slingPeriodservletPeriodmethods", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.process.VideoThumbnailDownloadProcessResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.process.VideoThumbnailDownloadProcessResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.s7dam.common.process.VideoThumbnailDownloadProcess/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.process.VideoThumbnailDownloadProcessResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.process.VideoThumbnailDownloadProcessResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.process.VideoThumbnailDownloadProcessResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.process.VideoThumbnailDownloadProcessResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string processPeriodlabel = request->get_query_parameter("processPeriodlabel", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.S7damDamChangeEventListenerResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.S7damDamChangeEventListenerResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.s7dam.common.S7damDamChangeEventListener/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.S7damDamChangeEventListenerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.S7damDamChangeEventListenerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.S7damDamChangeEventListenerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.S7damDamChangeEventListenerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool cqPerioddamPeriods7damPerioddamchangeeventlistenerPeriodenabled = request->get_query_parameter("cqPerioddamPeriods7damPerioddamchangeeventlistenerPeriodenabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.servlets.S7damProductInfoServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.servlets.S7damProductInfoServletResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.s7dam.common.servlets.S7damProductInfoServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.servlets.S7damProductInfoServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.servlets.S7damProductInfoServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.servlets.S7damProductInfoServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.servlets.S7damProductInfoServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string slingPeriodservletPeriodpaths = request->get_query_parameter("slingPeriodservletPeriodpaths", "");
			const std::string slingPeriodservletPeriodmethods = request->get_query_parameter("slingPeriodservletPeriodmethods", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.video.impl.VideoProxyClientServiceImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.video.impl.VideoProxyClientServiceImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.s7dam.common.video.impl.VideoProxyClientServiceImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.video.impl.VideoProxyClientServiceImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.video.impl.VideoProxyClientServiceImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.video.impl.VideoProxyClientServiceImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.s7dam.common.video.impl.VideoProxyClientServiceImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodminsizePeriodname = request->get_query_parameter("cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodminsizePeriodname", 0);
			const int32_t cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodpartsizePeriodname = request->get_query_parameter("cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodpartsizePeriodname", 0);
			const int32_t cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodnumthreadPeriodname = request->get_query_parameter("cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodnumthreadPeriodname", 0);
			const int32_t cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodreadtimeoutPeriodname = request->get_query_parameter("cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodreadtimeoutPeriodname", 0);
			const int32_t cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodconnectiontimeoutPeriodname = request->get_query_parameter("cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodconnectiontimeoutPeriodname", 0);
			const int32_t cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodmaxretrycountPeriodname = request->get_query_parameter("cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodmaxretrycountPeriodname", 0);
			const int32_t cqPerioddamPeriods7damPeriodvideoproxyclientservicePerioduploadprogressPeriodintervalPeriodname = request->get_query_parameter("cqPerioddamPeriods7damPeriodvideoproxyclientservicePerioduploadprogressPeriodintervalPeriodname", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7APIClientImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7APIClientImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7APIClientImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7APIClientImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7APIClientImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7APIClientImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7APIClientImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t cqPerioddamPeriodscene7PeriodapiclientPeriodrecordsperpagePeriodnofilterPeriodname = request->get_query_parameter("cqPerioddamPeriodscene7PeriodapiclientPeriodrecordsperpagePeriodnofilterPeriodname", 0);
			const int32_t cqPerioddamPeriodscene7PeriodapiclientPeriodrecordsperpagePeriodwithfilterPeriodname = request->get_query_parameter("cqPerioddamPeriodscene7PeriodapiclientPeriodrecordsperpagePeriodwithfilterPeriodname", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7AssetMimeTypeServiceImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7AssetMimeTypeServiceImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7AssetMimeTypeServiceImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7AssetMimeTypeServiceImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7AssetMimeTypeServiceImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7AssetMimeTypeServiceImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7AssetMimeTypeServiceImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7ConfigurationEventListenerResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7ConfigurationEventListenerResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7ConfigurationEventListener/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7ConfigurationEventListenerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7ConfigurationEventListenerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7ConfigurationEventListenerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7ConfigurationEventListenerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool cqPerioddamPeriodscene7PeriodconfigurationeventlistenerPeriodenabled = request->get_query_parameter("cqPerioddamPeriodscene7PeriodconfigurationeventlistenerPeriodenabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7DamChangeEventListenerResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7DamChangeEventListenerResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7DamChangeEventListener/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7DamChangeEventListenerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7DamChangeEventListenerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7DamChangeEventListenerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7DamChangeEventListenerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool cqPerioddamPeriodscene7PerioddamchangeeventlistenerPeriodenabled = request->get_query_parameter("cqPerioddamPeriodscene7PerioddamchangeeventlistenerPeriodenabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7FlashTemplatesServiceImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7FlashTemplatesServiceImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7FlashTemplatesServiceImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7FlashTemplatesServiceImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7FlashTemplatesServiceImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7FlashTemplatesServiceImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7FlashTemplatesServiceImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string scene7FlashTemplatesPeriodrti = request->get_query_parameter("scene7FlashTemplatesPeriodrti", "");
			const std::string scene7FlashTemplatesPeriodrsi = request->get_query_parameter("scene7FlashTemplatesPeriodrsi", "");
			const std::string scene7FlashTemplatesPeriodrb = request->get_query_parameter("scene7FlashTemplatesPeriodrb", "");
			const std::string scene7FlashTemplatesPeriodrurl = request->get_query_parameter("scene7FlashTemplatesPeriodrurl", "");
			const std::string scene7FlashTemplatePeriodurlFormatParameter = request->get_query_parameter("scene7FlashTemplatePeriodurlFormatParameter", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7UploadServiceImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7UploadServiceImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7UploadServiceImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7UploadServiceImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7UploadServiceImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7UploadServiceImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.scene7.impl.Scene7UploadServiceImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t cqPerioddamPeriodscene7PerioduploadservicePeriodactivejobtimeoutPeriodlabel = request->get_query_parameter("cqPerioddamPeriodscene7PerioduploadservicePeriodactivejobtimeoutPeriodlabel", 0);
			const int32_t cqPerioddamPeriodscene7PerioduploadservicePeriodconnectionmaxperroutePeriodlabel = request->get_query_parameter("cqPerioddamPeriodscene7PerioduploadservicePeriodconnectionmaxperroutePeriodlabel", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.stock.integration.impl.cache.StockCacheConfigurationServiceImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.stock.integration.impl.cache.StockCacheConfigurationServiceImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.stock.integration.impl.cache.StockCacheConfigurationServiceImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.stock.integration.impl.cache.StockCacheConfigurationServiceImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.stock.integration.impl.cache.StockCacheConfigurationServiceImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.stock.integration.impl.cache.StockCacheConfigurationServiceImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.stock.integration.impl.cache.StockCacheConfigurationServiceImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string getCacheExpirationUnit = request->get_query_parameter("getCacheExpirationUnit", "");
			const int32_t getCacheExpirationValue = request->get_query_parameter("getCacheExpirationValue", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.stock.integration.impl.configuration.StockConfigurationImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.stock.integration.impl.configuration.StockConfigurationImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.stock.integration.impl.configuration.StockConfigurationImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.stock.integration.impl.configuration.StockConfigurationImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.stock.integration.impl.configuration.StockConfigurationImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.stock.integration.impl.configuration.StockConfigurationImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.stock.integration.impl.configuration.StockConfigurationImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string name = request->get_query_parameter("name", "");
			const std::string locale = request->get_query_parameter("locale", "");
			const std::string imsConfig = request->get_query_parameter("imsConfig", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.video.impl.servlet.VideoTestServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.video.impl.servlet.VideoTestServletResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.dam.video.impl.servlet.VideoTestServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.video.impl.servlet.VideoTestServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.video.impl.servlet.VideoTestServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.video.impl.servlet.VideoTestServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.dam.video.impl.servlet.VideoTestServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool enabled = request->get_query_parameter("enabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.extwidget.servlets.ImageSpriteServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.extwidget.servlets.ImageSpriteServletResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.extwidget.servlets.ImageSpriteServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.extwidget.servlets.ImageSpriteServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.extwidget.servlets.ImageSpriteServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.extwidget.servlets.ImageSpriteServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.extwidget.servlets.ImageSpriteServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t maxWidth = request->get_query_parameter("maxWidth", 0);
			const int32_t maxHeight = request->get_query_parameter("maxHeight", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.image.internal.font.FontHelperResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.image.internal.font.FontHelperResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.image.internal.font.FontHelper/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.image.internal.font.FontHelperResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.image.internal.font.FontHelperResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.image.internal.font.FontHelperResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.image.internal.font.FontHelperResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t oversamplingFactor = request->get_query_parameter("oversamplingFactor", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.jcrclustersupport.ClusterStartLevelControllerResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.jcrclustersupport.ClusterStartLevelControllerResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.jcrclustersupport.ClusterStartLevelController/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.jcrclustersupport.ClusterStartLevelControllerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.jcrclustersupport.ClusterStartLevelControllerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.jcrclustersupport.ClusterStartLevelControllerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.jcrclustersupport.ClusterStartLevelControllerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool clusterPeriodlevelPeriodenable = request->get_query_parameter("clusterPeriodlevelPeriodenable", );
			const int32_t clusterPeriodmasterPeriodlevel = request->get_query_parameter("clusterPeriodmasterPeriodlevel", 0);
			const int32_t clusterPeriodslavePeriodlevel = request->get_query_parameter("clusterPeriodslavePeriodlevel", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mailer.DefaultMailServiceResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mailer.DefaultMailServiceResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.mailer.DefaultMailService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mailer.DefaultMailServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mailer.DefaultMailServiceResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mailer.DefaultMailServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mailer.DefaultMailServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string smtpPeriodhost = request->get_query_parameter("smtpPeriodhost", "");
			const int32_t smtpPeriodport = request->get_query_parameter("smtpPeriodport", 0);
			const std::string smtpPerioduser = request->get_query_parameter("smtpPerioduser", "");
			const std::string smtpPeriodpassword = request->get_query_parameter("smtpPeriodpassword", "");
			const std::string fromPeriodaddress = request->get_query_parameter("fromPeriodaddress", "");
			const bool smtpPeriodssl = request->get_query_parameter("smtpPeriodssl", );
			const bool smtpPeriodstarttls = request->get_query_parameter("smtpPeriodstarttls", );
			const bool debugPeriodemail = request->get_query_parameter("debugPeriodemail", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mailer.impl.CqMailingServiceResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mailer.impl.CqMailingServiceResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.mailer.impl.CqMailingService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mailer.impl.CqMailingServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mailer.impl.CqMailingServiceResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mailer.impl.CqMailingServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mailer.impl.CqMailingServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string maxPeriodrecipientPeriodcount = request->get_query_parameter("maxPeriodrecipientPeriodcount", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mailer.impl.email.CqEmailTemplateFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mailer.impl.email.CqEmailTemplateFactoryResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.mailer.impl.email.CqEmailTemplateFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mailer.impl.email.CqEmailTemplateFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mailer.impl.email.CqEmailTemplateFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mailer.impl.email.CqEmailTemplateFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mailer.impl.email.CqEmailTemplateFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string mailerPeriodemailPeriodcharset = request->get_query_parameter("mailerPeriodemailPeriodcharset", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mailer.impl.email.CqRetrieverTemplateFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mailer.impl.email.CqRetrieverTemplateFactoryResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.mailer.impl.email.CqRetrieverTemplateFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mailer.impl.email.CqRetrieverTemplateFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mailer.impl.email.CqRetrieverTemplateFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mailer.impl.email.CqRetrieverTemplateFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mailer.impl.email.CqRetrieverTemplateFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool mailerPeriodemailPeriodembed = request->get_query_parameter("mailerPeriodemailPeriodembed", );
			const std::string mailerPeriodemailPeriodcharset = request->get_query_parameter("mailerPeriodemailPeriodcharset", "");
			const std::string mailerPeriodemailPeriodretrieverUserID = request->get_query_parameter("mailerPeriodemailPeriodretrieverUserID", "");
			const std::string mailerPeriodemailPeriodretrieverUserPWD = request->get_query_parameter("mailerPeriodemailPeriodretrieverUserPWD", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.campaign.impl.IntegrationConfigImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.campaign.impl.IntegrationConfigImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.mcm.campaign.impl.IntegrationConfigImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.campaign.impl.IntegrationConfigImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.campaign.impl.IntegrationConfigImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.campaign.impl.IntegrationConfigImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.campaign.impl.IntegrationConfigImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string aemPeriodmcmPeriodcampaignPeriodpublicUrl = request->get_query_parameter("aemPeriodmcmPeriodcampaignPeriodpublicUrl", "");
			const bool aemPeriodmcmPeriodcampaignPeriodrelaxedSSL = request->get_query_parameter("aemPeriodmcmPeriodcampaignPeriodrelaxedSSL", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.campaign.importer.PersonalizedTextHandlerFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.campaign.importer.PersonalizedTextHandlerFactoryResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.mcm.campaign.importer.PersonalizedTextHandlerFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.campaign.importer.PersonalizedTextHandlerFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.campaign.importer.PersonalizedTextHandlerFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.campaign.importer.PersonalizedTextHandlerFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.campaign.importer.PersonalizedTextHandlerFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t servicePeriodranking = request->get_query_parameter("servicePeriodranking", 0);
			const std::string tagpattern = request->get_query_parameter("tagpattern", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.core.newsletter.NewsletterEmailServiceImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.core.newsletter.NewsletterEmailServiceImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.mcm.core.newsletter.NewsletterEmailServiceImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.core.newsletter.NewsletterEmailServiceImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.core.newsletter.NewsletterEmailServiceImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.core.newsletter.NewsletterEmailServiceImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.core.newsletter.NewsletterEmailServiceImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string fromPeriodaddress = request->get_query_parameter("fromPeriodaddress", "");
			const std::string senderPeriodhost = request->get_query_parameter("senderPeriodhost", "");
			const std::string maxPeriodbouncePeriodcount = request->get_query_parameter("maxPeriodbouncePeriodcount", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.impl.MCMConfigurationResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.impl.MCMConfigurationResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.mcm.impl.MCMConfiguration/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.impl.MCMConfigurationResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.impl.MCMConfigurationResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.impl.MCMConfigurationResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.impl.MCMConfigurationResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.landingpage.parser.taghandlers.cta.ClickThroughComponentTagHandlerFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.landingpage.parser.taghandlers.cta.ClickThroughComponentTagHandlerFactoryResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.ClickThroughComponentTagHandlerFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.landingpage.parser.taghandlers.cta.ClickThroughComponentTagHandlerFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.landingpage.parser.taghandlers.cta.ClickThroughComponentTagHandlerFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.landingpage.parser.taghandlers.cta.ClickThroughComponentTagHandlerFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.landingpage.parser.taghandlers.cta.ClickThroughComponentTagHandlerFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t servicePeriodranking = request->get_query_parameter("servicePeriodranking", 0);
			const std::string tagpattern = request->get_query_parameter("tagpattern", "");
			const std::string componentPeriodresourceType = request->get_query_parameter("componentPeriodresourceType", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.landingpage.parser.taghandlers.cta.GraphicalClickThroughComponentTagHandlerFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.landingpage.parser.taghandlers.cta.GraphicalClickThroughComponentTagHandlerFactoryResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.GraphicalClickThroughComponentTagHandlerFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.landingpage.parser.taghandlers.cta.GraphicalClickThroughComponentTagHandlerFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.landingpage.parser.taghandlers.cta.GraphicalClickThroughComponentTagHandlerFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.landingpage.parser.taghandlers.cta.GraphicalClickThroughComponentTagHandlerFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.landingpage.parser.taghandlers.cta.GraphicalClickThroughComponentTagHandlerFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t servicePeriodranking = request->get_query_parameter("servicePeriodranking", 0);
			const std::string tagpattern = request->get_query_parameter("tagpattern", "");
			const std::string componentPeriodresourceType = request->get_query_parameter("componentPeriodresourceType", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.landingpage.parser.taghandlers.cta.LeadFormCTAComponentTagHandlerFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.landingpage.parser.taghandlers.cta.LeadFormCTAComponentTagHandlerFactoryResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.LeadFormCTAComponentTagHandlerFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.landingpage.parser.taghandlers.cta.LeadFormCTAComponentTagHandlerFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.landingpage.parser.taghandlers.cta.LeadFormCTAComponentTagHandlerFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.landingpage.parser.taghandlers.cta.LeadFormCTAComponentTagHandlerFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.landingpage.parser.taghandlers.cta.LeadFormCTAComponentTagHandlerFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t servicePeriodranking = request->get_query_parameter("servicePeriodranking", 0);
			const std::string tagpattern = request->get_query_parameter("tagpattern", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.landingpage.parser.taghandlers.mbox.MBoxExperienceTagHandlerFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.landingpage.parser.taghandlers.mbox.MBoxExperienceTagHandlerFactoryResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.MBoxExperienceTagHandlerFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.landingpage.parser.taghandlers.mbox.MBoxExperienceTagHandlerFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.landingpage.parser.taghandlers.mbox.MBoxExperienceTagHandlerFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.landingpage.parser.taghandlers.mbox.MBoxExperienceTagHandlerFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.landingpage.parser.taghandlers.mbox.MBoxExperienceTagHandlerFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t servicePeriodranking = request->get_query_parameter("servicePeriodranking", 0);
			const std::string tagpattern = request->get_query_parameter("tagpattern", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.landingpage.parser.taghandlers.mbox.TargetComponentTagHandlerFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.landingpage.parser.taghandlers.mbox.TargetComponentTagHandlerFactoryResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.TargetComponentTagHandlerFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.landingpage.parser.taghandlers.mbox.TargetComponentTagHandlerFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.landingpage.parser.taghandlers.mbox.TargetComponentTagHandlerFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.landingpage.parser.taghandlers.mbox.TargetComponentTagHandlerFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.mcm.landingpage.parser.taghandlers.mbox.TargetComponentTagHandlerFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t servicePeriodranking = request->get_query_parameter("servicePeriodranking", 0);
			const std::string tagpattern = request->get_query_parameter("tagpattern", "");
			const std::string componentPeriodresourceType = request->get_query_parameter("componentPeriodresourceType", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.notification.impl.NotificationServiceImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.notification.impl.NotificationServiceImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.notification.impl.NotificationServiceImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.notification.impl.NotificationServiceImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.notification.impl.NotificationServiceImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.notification.impl.NotificationServiceImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.notification.impl.NotificationServiceImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string eventPeriodfilter = request->get_query_parameter("eventPeriodfilter", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.personalization.impl.servlets.TargetingConfigurationServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.personalization.impl.servlets.TargetingConfigurationServletResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.personalization.impl.servlets.TargetingConfigurationServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.personalization.impl.servlets.TargetingConfigurationServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.personalization.impl.servlets.TargetingConfigurationServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.personalization.impl.servlets.TargetingConfigurationServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.personalization.impl.servlets.TargetingConfigurationServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool forcelocation = request->get_query_parameter("forcelocation", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.polling.importer.impl.ManagedPollConfigImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.polling.importer.impl.ManagedPollConfigImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollConfigImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.polling.importer.impl.ManagedPollConfigImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.polling.importer.impl.ManagedPollConfigImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.polling.importer.impl.ManagedPollConfigImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.polling.importer.impl.ManagedPollConfigImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string id = request->get_query_parameter("id", "");
			const bool enabled = request->get_query_parameter("enabled", );
			const bool reference = request->get_query_parameter("reference", );
			const int32_t interval = request->get_query_parameter("interval", 0);
			const std::string expression = request->get_query_parameter("expression", "");
			const std::string source = request->get_query_parameter("source", "");
			const std::string target = request->get_query_parameter("target", "");
			const std::string login = request->get_query_parameter("login", "");
			const std::string password = request->get_query_parameter("password", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.polling.importer.impl.ManagedPollingImporterImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.polling.importer.impl.ManagedPollingImporterImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollingImporterImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.polling.importer.impl.ManagedPollingImporterImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.polling.importer.impl.ManagedPollingImporterImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.polling.importer.impl.ManagedPollingImporterImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.polling.importer.impl.ManagedPollingImporterImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string importerPerioduser = request->get_query_parameter("importerPerioduser", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.polling.importer.impl.PollingImporterImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.polling.importer.impl.PollingImporterImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.polling.importer.impl.PollingImporterImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.polling.importer.impl.PollingImporterImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.polling.importer.impl.PollingImporterImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.polling.importer.impl.PollingImporterImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.polling.importer.impl.PollingImporterImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t importerPeriodminPeriodinterval = request->get_query_parameter("importerPeriodminPeriodinterval", 0);
			const std::string importerPerioduser = request->get_query_parameter("importerPerioduser", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.audit.ReplicationEventListenerResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.audit.ReplicationEventListenerResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.replication.audit.ReplicationEventListener/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.audit.ReplicationEventListenerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.audit.ReplicationEventListenerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.audit.ReplicationEventListenerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.audit.ReplicationEventListenerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t servicePeriodranking = request->get_query_parameter("servicePeriodranking", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.content.StaticContentBuilderResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.content.StaticContentBuilderResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.replication.content.StaticContentBuilder/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.content.StaticContentBuilderResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.content.StaticContentBuilderResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.content.StaticContentBuilderResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.content.StaticContentBuilderResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string host = request->get_query_parameter("host", "");
			const int32_t port = request->get_query_parameter("port", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.AgentManagerImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.AgentManagerImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.replication.impl.AgentManagerImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.AgentManagerImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.AgentManagerImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.AgentManagerImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.AgentManagerImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string jobPeriodtopics = request->get_query_parameter("jobPeriodtopics", "");
			const std::string serviceUserPeriodtarget = request->get_query_parameter("serviceUserPeriodtarget", "");
			const std::string agentProviderPeriodtarget = request->get_query_parameter("agentProviderPeriodtarget", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.content.durbo.BinaryLessContentBuilderResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.content.durbo.BinaryLessContentBuilderResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.replication.impl.content.durbo.BinaryLessContentBuilder/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.content.durbo.BinaryLessContentBuilderResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.content.durbo.BinaryLessContentBuilderResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.content.durbo.BinaryLessContentBuilderResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.content.durbo.BinaryLessContentBuilderResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t binaryPeriodthreshold = request->get_query_parameter("binaryPeriodthreshold", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.content.durbo.DurboImportConfigurationProviderServiceResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.content.durbo.DurboImportConfigurationProviderServiceResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.replication.impl.content.durbo.DurboImportConfigurationProviderService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.content.durbo.DurboImportConfigurationProviderServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.content.durbo.DurboImportConfigurationProviderServiceResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.content.durbo.DurboImportConfigurationProviderServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.content.durbo.DurboImportConfigurationProviderServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool preservePeriodhierarchyPeriodnodes = request->get_query_parameter("preservePeriodhierarchyPeriodnodes", );
			const bool ignorePeriodversioning = request->get_query_parameter("ignorePeriodversioning", );
			const bool importPeriodacl = request->get_query_parameter("importPeriodacl", );
			const int32_t savePeriodthreshold = request->get_query_parameter("savePeriodthreshold", 0);
			const bool preservePerioduserPeriodpaths = request->get_query_parameter("preservePerioduserPeriodpaths", );
			const bool preservePerioduuid = request->get_query_parameter("preservePerioduuid", );
			const bool autoPeriodcommit = request->get_query_parameter("autoPeriodcommit", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.ReplicationContentFactoryProviderImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.ReplicationContentFactoryProviderImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.replication.impl.ReplicationContentFactoryProviderImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.ReplicationContentFactoryProviderImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.ReplicationContentFactoryProviderImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.ReplicationContentFactoryProviderImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.ReplicationContentFactoryProviderImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool replicationPeriodcontentPerioduseFileStorage = request->get_query_parameter("replicationPeriodcontentPerioduseFileStorage", );
			const int32_t replicationPeriodcontentPeriodmaxCommitAttempts = request->get_query_parameter("replicationPeriodcontentPeriodmaxCommitAttempts", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.ReplicationReceiverImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.ReplicationReceiverImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.replication.impl.ReplicationReceiverImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.ReplicationReceiverImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.ReplicationReceiverImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.ReplicationReceiverImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.ReplicationReceiverImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t receiverPeriodtmpfilePeriodthreshold = request->get_query_parameter("receiverPeriodtmpfilePeriodthreshold", 0);
			const bool receiverPeriodpackagesPeriodusePeriodinstall = request->get_query_parameter("receiverPeriodpackagesPeriodusePeriodinstall", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.ReplicatorImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.ReplicatorImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.replication.impl.ReplicatorImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.ReplicatorImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.ReplicatorImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.ReplicatorImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.ReplicatorImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool distributeEvents = request->get_query_parameter("distributeEvents", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.ReverseReplicatorResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.ReverseReplicatorResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.replication.impl.ReverseReplicator/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.ReverseReplicatorResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.ReverseReplicatorResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.ReverseReplicatorResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.ReverseReplicatorResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t schedulerPeriodperiod = request->get_query_parameter("schedulerPeriodperiod", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.transport.BinaryLessTransportHandlerResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.transport.BinaryLessTransportHandlerResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.replication.impl.transport.BinaryLessTransportHandler/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.transport.BinaryLessTransportHandlerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.transport.BinaryLessTransportHandlerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.transport.BinaryLessTransportHandlerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.transport.BinaryLessTransportHandlerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.transport.HttpResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.transport.HttpResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.replication.impl.transport.Http/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.transport.HttpResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.transport.HttpResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.transport.HttpResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.replication.impl.transport.HttpResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.reporting.impl.cache.CacheImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.reporting.impl.cache.CacheImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.reporting.impl.cache.CacheImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.reporting.impl.cache.CacheImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.reporting.impl.cache.CacheImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.reporting.impl.cache.CacheImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.reporting.impl.cache.CacheImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool repcachePeriodenable = request->get_query_parameter("repcachePeriodenable", );
			const int32_t repcachePeriodttl = request->get_query_parameter("repcachePeriodttl", 0);
			const int32_t repcachePeriodmax = request->get_query_parameter("repcachePeriodmax", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.reporting.impl.ConfigServiceImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.reporting.impl.ConfigServiceImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.reporting.impl.ConfigServiceImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.reporting.impl.ConfigServiceImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.reporting.impl.ConfigServiceImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.reporting.impl.ConfigServiceImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.reporting.impl.ConfigServiceImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string repconfPeriodtimezone = request->get_query_parameter("repconfPeriodtimezone", "");
			const std::string repconfPeriodlocale = request->get_query_parameter("repconfPeriodlocale", "");
			const std::string repconfPeriodsnapshots = request->get_query_parameter("repconfPeriodsnapshots", "");
			const std::string repconfPeriodrepdir = request->get_query_parameter("repconfPeriodrepdir", "");
			const int32_t repconfPeriodhourofday = request->get_query_parameter("repconfPeriodhourofday", 0);
			const int32_t repconfPeriodminofhour = request->get_query_parameter("repconfPeriodminofhour", 0);
			const int32_t repconfPeriodmaxrows = request->get_query_parameter("repconfPeriodmaxrows", 0);
			const bool repconfPeriodfakedata = request->get_query_parameter("repconfPeriodfakedata", );
			const std::string repconfPeriodsnapshotuser = request->get_query_parameter("repconfPeriodsnapshotuser", "");
			const bool repconfPeriodenforcesnapshotuser = request->get_query_parameter("repconfPeriodenforcesnapshotuser", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.reporting.impl.RLogAnalyzerResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.reporting.impl.RLogAnalyzerResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.reporting.impl.RLogAnalyzer/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.reporting.impl.RLogAnalyzerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.reporting.impl.RLogAnalyzerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.reporting.impl.RLogAnalyzerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.reporting.impl.RLogAnalyzerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string requestPeriodlogPeriodoutput = request->get_query_parameter("requestPeriodlogPeriodoutput", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.rewriter.linkchecker.impl.LinkCheckerImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.rewriter.linkchecker.impl.LinkCheckerImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.rewriter.linkchecker.impl.LinkCheckerImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.rewriter.linkchecker.impl.LinkCheckerImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.rewriter.linkchecker.impl.LinkCheckerImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.rewriter.linkchecker.impl.LinkCheckerImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t schedulerPeriodperiod = request->get_query_parameter("schedulerPeriodperiod", 0);
			const bool schedulerPeriodconcurrent = request->get_query_parameter("schedulerPeriodconcurrent", );
			const int32_t servicePeriodbadLinkToleranceInterval = request->get_query_parameter("servicePeriodbadLinkToleranceInterval", 0);
			const bool servicePeriodcacheBrokenInternalLinks = request->get_query_parameter("servicePeriodcacheBrokenInternalLinks", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.rewriter.linkchecker.impl.LinkCheckerTaskResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.rewriter.linkchecker.impl.LinkCheckerTaskResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTask/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.rewriter.linkchecker.impl.LinkCheckerTaskResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.rewriter.linkchecker.impl.LinkCheckerTaskResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.rewriter.linkchecker.impl.LinkCheckerTaskResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.rewriter.linkchecker.impl.LinkCheckerTaskResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t schedulerPeriodperiod = request->get_query_parameter("schedulerPeriodperiod", 0);
			const bool schedulerPeriodconcurrent = request->get_query_parameter("schedulerPeriodconcurrent", );
			const int32_t goodLinkTestInterval = request->get_query_parameter("goodLinkTestInterval", 0);
			const int32_t badLinkTestInterval = request->get_query_parameter("badLinkTestInterval", 0);
			const int32_t linkUnusedInterval = request->get_query_parameter("linkUnusedInterval", 0);
			const int32_t connectionPeriodtimeout = request->get_query_parameter("connectionPeriodtimeout", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.rewriter.linkchecker.impl.LinkCheckerTransformerFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.rewriter.linkchecker.impl.LinkCheckerTransformerFactoryResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTransformerFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.rewriter.linkchecker.impl.LinkCheckerTransformerFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.rewriter.linkchecker.impl.LinkCheckerTransformerFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.rewriter.linkchecker.impl.LinkCheckerTransformerFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.rewriter.linkchecker.impl.LinkCheckerTransformerFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool linkcheckertransformerPerioddisableRewriting = request->get_query_parameter("linkcheckertransformerPerioddisableRewriting", );
			const bool linkcheckertransformerPerioddisableChecking = request->get_query_parameter("linkcheckertransformerPerioddisableChecking", );
			const int32_t linkcheckertransformerPeriodmapCacheSize = request->get_query_parameter("linkcheckertransformerPeriodmapCacheSize", 0);
			const bool linkcheckertransformerPeriodstrictExtensionCheck = request->get_query_parameter("linkcheckertransformerPeriodstrictExtensionCheck", );
			const bool linkcheckertransformerPeriodstripHtmltExtension = request->get_query_parameter("linkcheckertransformerPeriodstripHtmltExtension", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.rewriter.linkchecker.impl.LinkInfoStorageImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.rewriter.linkchecker.impl.LinkInfoStorageImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkInfoStorageImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.rewriter.linkchecker.impl.LinkInfoStorageImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.rewriter.linkchecker.impl.LinkInfoStorageImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.rewriter.linkchecker.impl.LinkInfoStorageImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.rewriter.linkchecker.impl.LinkInfoStorageImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t servicePeriodmaxLinksPerHost = request->get_query_parameter("servicePeriodmaxLinksPerHost", 0);
			const bool servicePeriodsaveExternalLinkReferences = request->get_query_parameter("servicePeriodsaveExternalLinkReferences", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.rewriter.processor.impl.HtmlParserFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.rewriter.processor.impl.HtmlParserFactoryResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.rewriter.processor.impl.HtmlParserFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.rewriter.processor.impl.HtmlParserFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.rewriter.processor.impl.HtmlParserFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.rewriter.processor.impl.HtmlParserFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.rewriter.processor.impl.HtmlParserFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool htmlparserPeriodpreserveCamelCase = request->get_query_parameter("htmlparserPeriodpreserveCamelCase", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.search.impl.builder.QueryBuilderImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.search.impl.builder.QueryBuilderImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.search.impl.builder.QueryBuilderImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.search.impl.builder.QueryBuilderImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.search.impl.builder.QueryBuilderImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.search.impl.builder.QueryBuilderImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.search.impl.builder.QueryBuilderImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t cachePeriodmaxPeriodentries = request->get_query_parameter("cachePeriodmaxPeriodentries", 0);
			const int32_t cachePeriodentryPeriodlifetime = request->get_query_parameter("cachePeriodentryPeriodlifetime", 0);
			const bool xpathPeriodunion = request->get_query_parameter("xpathPeriodunion", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.search.suggest.impl.SuggestionIndexManagerImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.search.suggest.impl.SuggestionIndexManagerImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.search.suggest.impl.SuggestionIndexManagerImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.search.suggest.impl.SuggestionIndexManagerImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.search.suggest.impl.SuggestionIndexManagerImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.search.suggest.impl.SuggestionIndexManagerImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.search.suggest.impl.SuggestionIndexManagerImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string pathBuilderPeriodtarget = request->get_query_parameter("pathBuilderPeriodtarget", "");
			const std::string suggestPeriodbasepath = request->get_query_parameter("suggestPeriodbasepath", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.searchpromote.impl.PublishSearchPromoteConfigHandlerResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.searchpromote.impl.PublishSearchPromoteConfigHandlerResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.searchpromote.impl.PublishSearchPromoteConfigHandler/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.searchpromote.impl.PublishSearchPromoteConfigHandlerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.searchpromote.impl.PublishSearchPromoteConfigHandlerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.searchpromote.impl.PublishSearchPromoteConfigHandlerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.searchpromote.impl.PublishSearchPromoteConfigHandlerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool cqPeriodsearchpromotePeriodconfighandlerPeriodenabled = request->get_query_parameter("cqPeriodsearchpromotePeriodconfighandlerPeriodenabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.searchpromote.impl.SearchPromoteServiceImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.searchpromote.impl.SearchPromoteServiceImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.searchpromote.impl.SearchPromoteServiceImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.searchpromote.impl.SearchPromoteServiceImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.searchpromote.impl.SearchPromoteServiceImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.searchpromote.impl.SearchPromoteServiceImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.searchpromote.impl.SearchPromoteServiceImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string cqPeriodsearchpromotePeriodconfigurationPeriodserverPerioduri = request->get_query_parameter("cqPeriodsearchpromotePeriodconfigurationPeriodserverPerioduri", "");
			const std::string cqPeriodsearchpromotePeriodconfigurationPeriodenvironment = request->get_query_parameter("cqPeriodsearchpromotePeriodconfigurationPeriodenvironment", "");
			const int32_t connectionPeriodtimeout = request->get_query_parameter("connectionPeriodtimeout", 0);
			const int32_t socketPeriodtimeout = request->get_query_parameter("socketPeriodtimeout", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.security.ACLSetupResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.security.ACLSetupResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.security.ACLSetup/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.security.ACLSetupResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.security.ACLSetupResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.security.ACLSetupResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.security.ACLSetupResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.statistics.impl.StatisticsServiceImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.statistics.impl.StatisticsServiceImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.statistics.impl.StatisticsServiceImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.statistics.impl.StatisticsServiceImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.statistics.impl.StatisticsServiceImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.statistics.impl.StatisticsServiceImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.statistics.impl.StatisticsServiceImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t schedulerPeriodperiod = request->get_query_parameter("schedulerPeriodperiod", 0);
			const bool schedulerPeriodconcurrent = request->get_query_parameter("schedulerPeriodconcurrent", );
			const std::string path = request->get_query_parameter("path", "");
			const std::string workspace = request->get_query_parameter("workspace", "");
			const std::string keywordsPath = request->get_query_parameter("keywordsPath", "");
			const bool asyncEntries = request->get_query_parameter("asyncEntries", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.tagging.impl.JcrTagManagerFactoryImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.tagging.impl.JcrTagManagerFactoryImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.tagging.impl.JcrTagManagerFactoryImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.tagging.impl.JcrTagManagerFactoryImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.tagging.impl.JcrTagManagerFactoryImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.tagging.impl.JcrTagManagerFactoryImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.tagging.impl.JcrTagManagerFactoryImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool validationPeriodenabled = request->get_query_parameter("validationPeriodenabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.tagging.impl.search.TagPredicateEvaluatorResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.tagging.impl.search.TagPredicateEvaluatorResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.tagging.impl.search.TagPredicateEvaluator/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.tagging.impl.search.TagPredicateEvaluatorResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.tagging.impl.search.TagPredicateEvaluatorResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.tagging.impl.search.TagPredicateEvaluatorResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.tagging.impl.search.TagPredicateEvaluatorResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool ignorePath = request->get_query_parameter("ignorePath", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.tagging.impl.TagGarbageCollectorResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.tagging.impl.TagGarbageCollectorResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.tagging.impl.TagGarbageCollector/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.tagging.impl.TagGarbageCollectorResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.tagging.impl.TagGarbageCollectorResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.tagging.impl.TagGarbageCollectorResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.tagging.impl.TagGarbageCollectorResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string schedulerPeriodexpression = request->get_query_parameter("schedulerPeriodexpression", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.contentsync.impl.handler.PagesUpdateHandlerResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.contentsync.impl.handler.PagesUpdateHandlerResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.contentsync.impl.handler.PagesUpdateHandler/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.contentsync.impl.handler.PagesUpdateHandlerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.contentsync.impl.handler.PagesUpdateHandlerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.contentsync.impl.handler.PagesUpdateHandlerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.contentsync.impl.handler.PagesUpdateHandlerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.contentsync.impl.rewriter.PathRewriterTransformerFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.contentsync.impl.rewriter.PathRewriterTransformerFactoryResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.contentsync.impl.rewriter.PathRewriterTransformerFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.contentsync.impl.rewriter.PathRewriterTransformerFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.contentsync.impl.rewriter.PathRewriterTransformerFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.contentsync.impl.rewriter.PathRewriterTransformerFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.contentsync.impl.rewriter.PathRewriterTransformerFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string cqPeriodcontentsyncPeriodpathrewritertransformerPeriodattributePeriodpattern = request->get_query_parameter("cqPeriodcontentsyncPeriodpathrewritertransformerPeriodattributePeriodpattern", "");
			const std::string cqPeriodcontentsyncPeriodpathrewritertransformerPeriodclientlibraryPeriodpattern = request->get_query_parameter("cqPeriodcontentsyncPeriodpathrewritertransformerPeriodclientlibraryPeriodpattern", "");
			const std::string cqPeriodcontentsyncPeriodpathrewritertransformerPeriodclientlibraryPeriodreplace = request->get_query_parameter("cqPeriodcontentsyncPeriodpathrewritertransformerPeriodclientlibraryPeriodreplace", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.AuthoringUIModeServiceImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.AuthoringUIModeServiceImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.core.impl.AuthoringUIModeServiceImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.AuthoringUIModeServiceImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.AuthoringUIModeServiceImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.AuthoringUIModeServiceImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.AuthoringUIModeServiceImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string authoringUIModeServicePerioddefault = request->get_query_parameter("authoringUIModeServicePerioddefault", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.commands.WCMCommandServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.commands.WCMCommandServletResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.core.impl.commands.WCMCommandServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.commands.WCMCommandServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.commands.WCMCommandServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.commands.WCMCommandServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.commands.WCMCommandServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.devicedetection.DeviceIdentificationModeImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.devicedetection.DeviceIdentificationModeImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.core.impl.devicedetection.DeviceIdentificationModeImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.devicedetection.DeviceIdentificationModeImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.devicedetection.DeviceIdentificationModeImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.devicedetection.DeviceIdentificationModeImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.devicedetection.DeviceIdentificationModeImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string dimPerioddefaultPeriodmode = request->get_query_parameter("dimPerioddefaultPeriodmode", "");
			const bool dimPeriodappcachePeriodenabled = request->get_query_parameter("dimPeriodappcachePeriodenabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.event.PageEventAuditListenerResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.event.PageEventAuditListenerResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.core.impl.event.PageEventAuditListener/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.event.PageEventAuditListenerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.event.PageEventAuditListenerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.event.PageEventAuditListenerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.event.PageEventAuditListenerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string configured = request->get_query_parameter("configured", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.event.PagePostProcessorResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.event.PagePostProcessorResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.core.impl.event.PagePostProcessor/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.event.PagePostProcessorResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.event.PagePostProcessorResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.event.PagePostProcessorResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.event.PagePostProcessorResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.event.RepositoryChangeEventListenerResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.event.RepositoryChangeEventListenerResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.core.impl.event.RepositoryChangeEventListener/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.event.RepositoryChangeEventListenerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.event.RepositoryChangeEventListenerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.event.RepositoryChangeEventListenerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.event.RepositoryChangeEventListenerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.event.TemplatePostProcessorResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.event.TemplatePostProcessorResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.core.impl.event.TemplatePostProcessor/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.event.TemplatePostProcessorResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.event.TemplatePostProcessorResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.event.TemplatePostProcessorResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.event.TemplatePostProcessorResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string paths = request->get_query_parameter("paths", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.LanguageManagerImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.LanguageManagerImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.core.impl.LanguageManagerImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.LanguageManagerImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.LanguageManagerImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.LanguageManagerImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.LanguageManagerImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string langmgrPeriodlistPeriodpath = request->get_query_parameter("langmgrPeriodlistPeriodpath", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.LinkCheckerConfigurationFactoryImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.LinkCheckerConfigurationFactoryImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.core.impl.LinkCheckerConfigurationFactoryImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.LinkCheckerConfigurationFactoryImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.LinkCheckerConfigurationFactoryImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.LinkCheckerConfigurationFactoryImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.LinkCheckerConfigurationFactoryImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string linkPeriodexpiredPeriodprefix = request->get_query_parameter("linkPeriodexpiredPeriodprefix", "");
			const bool linkPeriodexpiredPeriodremove = request->get_query_parameter("linkPeriodexpiredPeriodremove", );
			const std::string linkPeriodexpiredPeriodsuffix = request->get_query_parameter("linkPeriodexpiredPeriodsuffix", "");
			const std::string linkPeriodinvalidPeriodprefix = request->get_query_parameter("linkPeriodinvalidPeriodprefix", "");
			const bool linkPeriodinvalidPeriodremove = request->get_query_parameter("linkPeriodinvalidPeriodremove", );
			const std::string linkPeriodinvalidPeriodsuffix = request->get_query_parameter("linkPeriodinvalidPeriodsuffix", "");
			const std::string linkPeriodpredatedPeriodprefix = request->get_query_parameter("linkPeriodpredatedPeriodprefix", "");
			const bool linkPeriodpredatedPeriodremove = request->get_query_parameter("linkPeriodpredatedPeriodremove", );
			const std::string linkPeriodpredatedPeriodsuffix = request->get_query_parameter("linkPeriodpredatedPeriodsuffix", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.page.PageInfoAggregatorImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.page.PageInfoAggregatorImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.core.impl.page.PageInfoAggregatorImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.page.PageInfoAggregatorImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.page.PageInfoAggregatorImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.page.PageInfoAggregatorImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.page.PageInfoAggregatorImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string pagePeriodinfoPeriodproviderPeriodpropertyPeriodregexPerioddefault = request->get_query_parameter("pagePeriodinfoPeriodproviderPeriodpropertyPeriodregexPerioddefault", "");
			const std::string pagePeriodinfoPeriodproviderPeriodpropertyPeriodname = request->get_query_parameter("pagePeriodinfoPeriodproviderPeriodpropertyPeriodname", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.page.PageManagerFactoryImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.page.PageManagerFactoryImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.core.impl.page.PageManagerFactoryImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.page.PageManagerFactoryImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.page.PageManagerFactoryImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.page.PageManagerFactoryImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.page.PageManagerFactoryImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string illegalCharMapping = request->get_query_parameter("illegalCharMapping", "");
			const bool pageSubTreeActivationCheck = request->get_query_parameter("pageSubTreeActivationCheck", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.references.content.ContentReferenceConfigResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.references.content.ContentReferenceConfigResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.core.impl.references.content.ContentReferenceConfig/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.references.content.ContentReferenceConfigResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.references.content.ContentReferenceConfigResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.references.content.ContentReferenceConfigResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.references.content.ContentReferenceConfigResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.contentfinder.AssetViewHandlerResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.contentfinder.AssetViewHandlerResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.AssetViewHandler/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.contentfinder.AssetViewHandlerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.contentfinder.AssetViewHandlerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.contentfinder.AssetViewHandlerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.contentfinder.AssetViewHandlerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool damPeriodshowexpired = request->get_query_parameter("damPeriodshowexpired", );
			const bool damPeriodshowhidden = request->get_query_parameter("damPeriodshowhidden", );
			const bool tagTitleSearch = request->get_query_parameter("tagTitleSearch", );
			const std::string guessTotal = request->get_query_parameter("guessTotal", "");
			const std::string damPeriodexpiryProperty = request->get_query_parameter("damPeriodexpiryProperty", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.contentfinder.connector.ConnectorViewHandlerResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.contentfinder.connector.ConnectorViewHandlerResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.connector.ConnectorViewHandler/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.contentfinder.connector.ConnectorViewHandlerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.contentfinder.connector.ConnectorViewHandlerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.contentfinder.connector.ConnectorViewHandlerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.contentfinder.connector.ConnectorViewHandlerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.contentfinder.PageViewHandlerResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.contentfinder.PageViewHandlerResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.PageViewHandler/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.contentfinder.PageViewHandlerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.contentfinder.PageViewHandlerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.contentfinder.PageViewHandlerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.contentfinder.PageViewHandlerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string guessTotal = request->get_query_parameter("guessTotal", "");
			const bool tagTitleSearch = request->get_query_parameter("tagTitleSearch", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.FindReplaceServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.FindReplaceServletResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.FindReplaceServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.FindReplaceServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.FindReplaceServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.FindReplaceServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.FindReplaceServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.ReferenceSearchServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.ReferenceSearchServletResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ReferenceSearchServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.ReferenceSearchServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.ReferenceSearchServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.ReferenceSearchServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.ReferenceSearchServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t referencesearchservletPeriodmaxReferencesPerPage = request->get_query_parameter("referencesearchservletPeriodmaxReferencesPerPage", 0);
			const int32_t referencesearchservletPeriodmaxPages = request->get_query_parameter("referencesearchservletPeriodmaxPages", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.ThumbnailServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.ThumbnailServletResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ThumbnailServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.ThumbnailServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.ThumbnailServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.ThumbnailServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.servlets.ThumbnailServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string workspace = request->get_query_parameter("workspace", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.utils.DefaultPageNameValidatorResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.utils.DefaultPageNameValidatorResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.core.impl.utils.DefaultPageNameValidator/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.utils.DefaultPageNameValidatorResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.utils.DefaultPageNameValidatorResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.utils.DefaultPageNameValidatorResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.utils.DefaultPageNameValidatorResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string nonValidChars = request->get_query_parameter("nonValidChars", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.variants.PageVariantsProviderImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.variants.PageVariantsProviderImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.core.impl.variants.PageVariantsProviderImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.variants.PageVariantsProviderImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.variants.PageVariantsProviderImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.variants.PageVariantsProviderImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.variants.PageVariantsProviderImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string defaultPeriodexternalizerPerioddomain = request->get_query_parameter("defaultPeriodexternalizerPerioddomain", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.VersionManagerImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.VersionManagerImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.core.impl.VersionManagerImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.VersionManagerImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.VersionManagerImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.VersionManagerImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.VersionManagerImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool versionmanagerPeriodcreateVersionOnActivation = request->get_query_parameter("versionmanagerPeriodcreateVersionOnActivation", );
			const bool versionmanagerPeriodpurgingEnabled = request->get_query_parameter("versionmanagerPeriodpurgingEnabled", );
			const int32_t versionmanagerPeriodmaxAgeDays = request->get_query_parameter("versionmanagerPeriodmaxAgeDays", 0);
			const int32_t versionmanagerPeriodmaxNumberVersions = request->get_query_parameter("versionmanagerPeriodmaxNumberVersions", 0);
			const int32_t versionmanagerPeriodminNumberVersions = request->get_query_parameter("versionmanagerPeriodminNumberVersions", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.VersionPurgeTaskResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.VersionPurgeTaskResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.core.impl.VersionPurgeTask/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.VersionPurgeTaskResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.VersionPurgeTaskResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.VersionPurgeTaskResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.VersionPurgeTaskResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool versionpurgePeriodrecursive = request->get_query_parameter("versionpurgePeriodrecursive", );
			const int32_t versionpurgePeriodmaxVersions = request->get_query_parameter("versionpurgePeriodmaxVersions", 0);
			const int32_t versionpurgePeriodminVersions = request->get_query_parameter("versionpurgePeriodminVersions", 0);
			const int32_t versionpurgePeriodmaxAgeDays = request->get_query_parameter("versionpurgePeriodmaxAgeDays", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.WCMDebugFilterResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.WCMDebugFilterResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.core.impl.WCMDebugFilter/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.WCMDebugFilterResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.WCMDebugFilterResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.WCMDebugFilterResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.WCMDebugFilterResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool wcmdbgfilterPeriodenabled = request->get_query_parameter("wcmdbgfilterPeriodenabled", );
			const bool wcmdbgfilterPeriodjspDebug = request->get_query_parameter("wcmdbgfilterPeriodjspDebug", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.WCMDeveloperModeFilterResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.WCMDeveloperModeFilterResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.core.impl.WCMDeveloperModeFilter/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.WCMDeveloperModeFilterResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.WCMDeveloperModeFilterResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.WCMDeveloperModeFilterResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.WCMDeveloperModeFilterResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool wcmdevmodefilterPeriodenabled = request->get_query_parameter("wcmdevmodefilterPeriodenabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.warp.TimeWarpFilterResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.warp.TimeWarpFilterResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.core.impl.warp.TimeWarpFilter/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.warp.TimeWarpFilterResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.warp.TimeWarpFilterResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.warp.TimeWarpFilterResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.impl.warp.TimeWarpFilterResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string filterPeriodorder = request->get_query_parameter("filterPeriodorder", "");
			const std::string filterPeriodscope = request->get_query_parameter("filterPeriodscope", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.mvt.MVTStatisticsImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.mvt.MVTStatisticsImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.core.mvt.MVTStatisticsImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.mvt.MVTStatisticsImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.mvt.MVTStatisticsImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.mvt.MVTStatisticsImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.mvt.MVTStatisticsImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string mvtstatisticsPeriodtrackingurl = request->get_query_parameter("mvtstatisticsPeriodtrackingurl", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.stats.PageViewStatisticsImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.stats.PageViewStatisticsImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.core.stats.PageViewStatisticsImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.stats.PageViewStatisticsImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.stats.PageViewStatisticsImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.stats.PageViewStatisticsImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.stats.PageViewStatisticsImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string pageviewstatisticsPeriodtrackingurl = request->get_query_parameter("pageviewstatisticsPeriodtrackingurl", "");
			const std::string pageviewstatisticsPeriodtrackingscriptPeriodenabled = request->get_query_parameter("pageviewstatisticsPeriodtrackingscriptPeriodenabled", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.WCMRequestFilterResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.WCMRequestFilterResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.core.WCMRequestFilter/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.WCMRequestFilterResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.WCMRequestFilterResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.WCMRequestFilterResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.core.WCMRequestFilterResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string wcmfilterPeriodmode = request->get_query_parameter("wcmfilterPeriodmode", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.DesignPackageImporterResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.DesignPackageImporterResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.designimporter.DesignPackageImporter/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.DesignPackageImporterResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.DesignPackageImporterResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.DesignPackageImporterResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.DesignPackageImporterResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.impl.CanvasBuilderImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.impl.CanvasBuilderImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasBuilderImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.impl.CanvasBuilderImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.impl.CanvasBuilderImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.impl.CanvasBuilderImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.impl.CanvasBuilderImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string filepattern = request->get_query_parameter("filepattern", "");
			const bool buildPeriodpagePeriodnodes = request->get_query_parameter("buildPeriodpagePeriodnodes", );
			const bool buildPeriodclientPeriodlibs = request->get_query_parameter("buildPeriodclientPeriodlibs", );
			const bool buildPeriodcanvasPeriodcomponent = request->get_query_parameter("buildPeriodcanvasPeriodcomponent", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.impl.CanvasPageDeleteHandlerResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.impl.CanvasPageDeleteHandlerResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasPageDeleteHandler/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.impl.CanvasPageDeleteHandlerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.impl.CanvasPageDeleteHandlerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.impl.CanvasPageDeleteHandlerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.impl.CanvasPageDeleteHandlerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t minThreadPoolSize = request->get_query_parameter("minThreadPoolSize", 0);
			const int32_t maxThreadPoolSize = request->get_query_parameter("maxThreadPoolSize", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.impl.EntryPreprocessorImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.impl.EntryPreprocessorImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.designimporter.impl.EntryPreprocessorImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.impl.EntryPreprocessorImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.impl.EntryPreprocessorImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.impl.EntryPreprocessorImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.impl.EntryPreprocessorImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string searchPeriodpattern = request->get_query_parameter("searchPeriodpattern", "");
			const std::string replacePeriodpattern = request->get_query_parameter("replacePeriodpattern", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.impl.MobileCanvasBuilderImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.impl.MobileCanvasBuilderImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.designimporter.impl.MobileCanvasBuilderImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.impl.MobileCanvasBuilderImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.impl.MobileCanvasBuilderImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.impl.MobileCanvasBuilderImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.impl.MobileCanvasBuilderImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string filepattern = request->get_query_parameter("filepattern", "");
			const bool buildPeriodpagePeriodnodes = request->get_query_parameter("buildPeriodpagePeriodnodes", );
			const bool buildPeriodclientPeriodlibs = request->get_query_parameter("buildPeriodclientPeriodlibs", );
			const bool buildPeriodcanvasPeriodcomponent = request->get_query_parameter("buildPeriodcanvasPeriodcomponent", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.CanvasComponentTagHandlerFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.CanvasComponentTagHandlerFactoryResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.CanvasComponentTagHandlerFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.CanvasComponentTagHandlerFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.CanvasComponentTagHandlerFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.CanvasComponentTagHandlerFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.CanvasComponentTagHandlerFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t servicePeriodranking = request->get_query_parameter("servicePeriodranking", 0);
			const std::string tagpattern = request->get_query_parameter("tagpattern", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultComponentTagHandlerFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultComponentTagHandlerFactoryResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultComponentTagHandlerFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultComponentTagHandlerFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultComponentTagHandlerFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultComponentTagHandlerFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultComponentTagHandlerFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t servicePeriodranking = request->get_query_parameter("servicePeriodranking", 0);
			const std::string tagpattern = request->get_query_parameter("tagpattern", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultTagHandlerFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultTagHandlerFactoryResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultTagHandlerFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultTagHandlerFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultTagHandlerFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultTagHandlerFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultTagHandlerFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t servicePeriodranking = request->get_query_parameter("servicePeriodranking", 0);
			const std::string tagpattern = request->get_query_parameter("tagpattern", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.HeadTagHandlerFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.HeadTagHandlerFactoryResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.HeadTagHandlerFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.HeadTagHandlerFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.HeadTagHandlerFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.HeadTagHandlerFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.HeadTagHandlerFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t servicePeriodranking = request->get_query_parameter("servicePeriodranking", 0);
			const std::string tagpattern = request->get_query_parameter("tagpattern", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.IFrameTagHandlerFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.IFrameTagHandlerFactoryResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.IFrameTagHandlerFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.IFrameTagHandlerFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.IFrameTagHandlerFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.IFrameTagHandlerFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.IFrameTagHandlerFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t servicePeriodranking = request->get_query_parameter("servicePeriodranking", 0);
			const std::string tagpattern = request->get_query_parameter("tagpattern", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.ImageComponentTagHandlerFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.ImageComponentTagHandlerFactoryResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImageComponentTagHandlerFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.ImageComponentTagHandlerFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.ImageComponentTagHandlerFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.ImageComponentTagHandlerFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.ImageComponentTagHandlerFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t servicePeriodranking = request->get_query_parameter("servicePeriodranking", 0);
			const std::string tagpattern = request->get_query_parameter("tagpattern", "");
			const std::string componentPeriodresourceType = request->get_query_parameter("componentPeriodresourceType", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.ImgTagHandlerFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.ImgTagHandlerFactoryResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImgTagHandlerFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.ImgTagHandlerFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.ImgTagHandlerFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.ImgTagHandlerFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.ImgTagHandlerFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t servicePeriodranking = request->get_query_parameter("servicePeriodranking", 0);
			const std::string tagpattern = request->get_query_parameter("tagpattern", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.InlineScriptTagHandlerFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.InlineScriptTagHandlerFactoryResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.InlineScriptTagHandlerFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.InlineScriptTagHandlerFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.InlineScriptTagHandlerFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.InlineScriptTagHandlerFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.InlineScriptTagHandlerFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t servicePeriodranking = request->get_query_parameter("servicePeriodranking", 0);
			const std::string tagpattern = request->get_query_parameter("tagpattern", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.LinkTagHandlerFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.LinkTagHandlerFactoryResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.LinkTagHandlerFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.LinkTagHandlerFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.LinkTagHandlerFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.LinkTagHandlerFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.LinkTagHandlerFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t servicePeriodranking = request->get_query_parameter("servicePeriodranking", 0);
			const std::string tagpattern = request->get_query_parameter("tagpattern", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.MetaTagHandlerFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.MetaTagHandlerFactoryResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.MetaTagHandlerFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.MetaTagHandlerFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.MetaTagHandlerFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.MetaTagHandlerFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.MetaTagHandlerFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t servicePeriodranking = request->get_query_parameter("servicePeriodranking", 0);
			const std::string tagpattern = request->get_query_parameter("tagpattern", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.NonScriptTagHandlerFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.NonScriptTagHandlerFactoryResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.NonScriptTagHandlerFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.NonScriptTagHandlerFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.NonScriptTagHandlerFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.NonScriptTagHandlerFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.NonScriptTagHandlerFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t servicePeriodranking = request->get_query_parameter("servicePeriodranking", 0);
			const std::string tagpattern = request->get_query_parameter("tagpattern", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.ParsysComponentTagHandlerFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.ParsysComponentTagHandlerFactoryResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ParsysComponentTagHandlerFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.ParsysComponentTagHandlerFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.ParsysComponentTagHandlerFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.ParsysComponentTagHandlerFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.ParsysComponentTagHandlerFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t servicePeriodranking = request->get_query_parameter("servicePeriodranking", 0);
			const std::string tagpattern = request->get_query_parameter("tagpattern", "");
			const std::string componentPeriodresourceType = request->get_query_parameter("componentPeriodresourceType", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.ScriptTagHandlerFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.ScriptTagHandlerFactoryResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ScriptTagHandlerFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.ScriptTagHandlerFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.ScriptTagHandlerFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.ScriptTagHandlerFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.ScriptTagHandlerFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t servicePeriodranking = request->get_query_parameter("servicePeriodranking", 0);
			const std::string tagpattern = request->get_query_parameter("tagpattern", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.StyleTagHandlerFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.StyleTagHandlerFactoryResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.StyleTagHandlerFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.StyleTagHandlerFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.StyleTagHandlerFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.StyleTagHandlerFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.StyleTagHandlerFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t servicePeriodranking = request->get_query_parameter("servicePeriodranking", 0);
			const std::string tagpattern = request->get_query_parameter("tagpattern", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.TextComponentTagHandlerFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.TextComponentTagHandlerFactoryResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TextComponentTagHandlerFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.TextComponentTagHandlerFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.TextComponentTagHandlerFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.TextComponentTagHandlerFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.TextComponentTagHandlerFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t servicePeriodranking = request->get_query_parameter("servicePeriodranking", 0);
			const std::string tagpattern = request->get_query_parameter("tagpattern", "");
			const std::string componentPeriodresourceType = request->get_query_parameter("componentPeriodresourceType", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleComponentTagHandlerFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleComponentTagHandlerFactoryResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleComponentTagHandlerFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleComponentTagHandlerFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleComponentTagHandlerFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleComponentTagHandlerFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleComponentTagHandlerFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t servicePeriodranking = request->get_query_parameter("servicePeriodranking", 0);
			const std::string tagpattern = request->get_query_parameter("tagpattern", "");
			const std::string componentPeriodresourceType = request->get_query_parameter("componentPeriodresourceType", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleTagHandlerFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleTagHandlerFactoryResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleTagHandlerFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleTagHandlerFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleTagHandlerFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleTagHandlerFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleTagHandlerFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t servicePeriodranking = request->get_query_parameter("servicePeriodranking", 0);
			const std::string tagpattern = request->get_query_parameter("tagpattern", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.forms.impl.FormChooserServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.forms.impl.FormChooserServletResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormChooserServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.forms.impl.FormChooserServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.forms.impl.FormChooserServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.forms.impl.FormChooserServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.forms.impl.FormChooserServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string servicePeriodname = request->get_query_parameter("servicePeriodname", "");
			const std::string slingPeriodservletPeriodresourceTypes = request->get_query_parameter("slingPeriodservletPeriodresourceTypes", "");
			const std::string slingPeriodservletPeriodselectors = request->get_query_parameter("slingPeriodservletPeriodselectors", "");
			const bool formsPeriodformchooserservletPeriodadvansesearchPeriodrequire = request->get_query_parameter("formsPeriodformchooserservletPeriodadvansesearchPeriodrequire", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.forms.impl.FormParagraphPostProcessorResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.forms.impl.FormParagraphPostProcessorResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormParagraphPostProcessor/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.forms.impl.FormParagraphPostProcessorResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.forms.impl.FormParagraphPostProcessorResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.forms.impl.FormParagraphPostProcessorResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.forms.impl.FormParagraphPostProcessorResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool formsPeriodformparagraphpostprocessorPeriodenabled = request->get_query_parameter("formsPeriodformparagraphpostprocessorPeriodenabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.forms.impl.FormsHandlingServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.forms.impl.FormsHandlingServletResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormsHandlingServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.forms.impl.FormsHandlingServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.forms.impl.FormsHandlingServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.forms.impl.FormsHandlingServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.forms.impl.FormsHandlingServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string namePeriodwhitelist = request->get_query_parameter("namePeriodwhitelist", "");
			const bool allowPeriodexpressions = request->get_query_parameter("allowPeriodexpressions", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.forms.impl.MailServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.forms.impl.MailServletResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.MailServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.forms.impl.MailServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.forms.impl.MailServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.forms.impl.MailServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.forms.impl.MailServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string slingPeriodservletPeriodresourceTypes = request->get_query_parameter("slingPeriodservletPeriodresourceTypes", "");
			const std::string slingPeriodservletPeriodselectors = request->get_query_parameter("slingPeriodservletPeriodselectors", "");
			const std::string resourcePeriodblacklist = request->get_query_parameter("resourcePeriodblacklist", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.impl.AdaptiveImageComponentServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.impl.AdaptiveImageComponentServletResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.foundation.impl.AdaptiveImageComponentServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.impl.AdaptiveImageComponentServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.impl.AdaptiveImageComponentServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.impl.AdaptiveImageComponentServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.impl.AdaptiveImageComponentServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.impl.HTTPAuthHandlerResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.impl.HTTPAuthHandlerResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.foundation.impl.HTTPAuthHandler/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.impl.HTTPAuthHandlerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.impl.HTTPAuthHandlerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.impl.HTTPAuthHandlerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.impl.HTTPAuthHandlerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string path = request->get_query_parameter("path", "");
			const bool authPeriodhttpPeriodnologin = request->get_query_parameter("authPeriodhttpPeriodnologin", );
			const std::string authPeriodhttpPeriodrealm = request->get_query_parameter("authPeriodhttpPeriodrealm", "");
			const std::string authPerioddefaultPeriodloginpage = request->get_query_parameter("authPerioddefaultPeriodloginpage", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.impl.PageImpressionsTrackerResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.impl.PageImpressionsTrackerResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.foundation.impl.PageImpressionsTracker/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.impl.PageImpressionsTrackerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.impl.PageImpressionsTrackerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.impl.PageImpressionsTrackerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.impl.PageImpressionsTrackerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string slingPeriodauthPeriodrequirements = request->get_query_parameter("slingPeriodauthPeriodrequirements", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.impl.PageRedirectServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.impl.PageRedirectServletResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.foundation.impl.PageRedirectServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.impl.PageRedirectServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.impl.PageRedirectServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.impl.PageRedirectServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.impl.PageRedirectServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.security.impl.DefaultAttachmentTypeBlacklistServiceResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.security.impl.DefaultAttachmentTypeBlacklistServiceResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.foundation.security.impl.DefaultAttachmentTypeBlacklistService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.security.impl.DefaultAttachmentTypeBlacklistServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.security.impl.DefaultAttachmentTypeBlacklistServiceResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.security.impl.DefaultAttachmentTypeBlacklistServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.security.impl.DefaultAttachmentTypeBlacklistServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.security.impl.SaferSlingPostValidatorImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.security.impl.SaferSlingPostValidatorImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.foundation.security.impl.SaferSlingPostValidatorImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.security.impl.SaferSlingPostValidatorImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.security.impl.SaferSlingPostValidatorImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.security.impl.SaferSlingPostValidatorImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.foundation.security.impl.SaferSlingPostValidatorImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.mobile.core.impl.device.DeviceInfoTransformerFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.mobile.core.impl.device.DeviceInfoTransformerFactoryResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.mobile.core.impl.device.DeviceInfoTransformerFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.mobile.core.impl.device.DeviceInfoTransformerFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.mobile.core.impl.device.DeviceInfoTransformerFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.mobile.core.impl.device.DeviceInfoTransformerFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.mobile.core.impl.device.DeviceInfoTransformerFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool devicePeriodinfoPeriodtransformerPeriodenabled = request->get_query_parameter("devicePeriodinfoPeriodtransformerPeriodenabled", );
			const std::string devicePeriodinfoPeriodtransformerPeriodcssPeriodstyle = request->get_query_parameter("devicePeriodinfoPeriodtransformerPeriodcssPeriodstyle", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.mobile.core.impl.redirect.RedirectFilterResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.mobile.core.impl.redirect.RedirectFilterResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.mobile.core.impl.redirect.RedirectFilter/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.mobile.core.impl.redirect.RedirectFilterResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.mobile.core.impl.redirect.RedirectFilterResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.mobile.core.impl.redirect.RedirectFilterResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.mobile.core.impl.redirect.RedirectFilterResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool redirectPeriodenabled = request->get_query_parameter("redirectPeriodenabled", );
			const bool redirectPeriodstatsPeriodenabled = request->get_query_parameter("redirectPeriodstatsPeriodenabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.ContentCopyActionFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.ContentCopyActionFactoryResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentCopyActionFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.ContentCopyActionFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.ContentCopyActionFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.ContentCopyActionFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.ContentCopyActionFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string contentcopyactionPeriodorderPeriodstyle = request->get_query_parameter("contentcopyactionPeriodorderPeriodstyle", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.ContentDeleteActionFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.ContentDeleteActionFactoryResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentDeleteActionFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.ContentDeleteActionFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.ContentDeleteActionFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.ContentDeleteActionFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.ContentDeleteActionFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.ContentUpdateActionFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.ContentUpdateActionFactoryResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentUpdateActionFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.ContentUpdateActionFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.ContentUpdateActionFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.ContentUpdateActionFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.ContentUpdateActionFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.OrderChildrenActionFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.OrderChildrenActionFactoryResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.OrderChildrenActionFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.OrderChildrenActionFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.OrderChildrenActionFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.OrderChildrenActionFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.OrderChildrenActionFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.PageMoveActionFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.PageMoveActionFactoryResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.PageMoveActionFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.PageMoveActionFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.PageMoveActionFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.PageMoveActionFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.PageMoveActionFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool cqPeriodwcmPeriodmsmPeriodimplPeriodactionsPeriodpagemovePeriodpropReferenceUpdate = request->get_query_parameter("cqPeriodwcmPeriodmsmPeriodimplPeriodactionsPeriodpagemovePeriodpropReferenceUpdate", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.ReferencesUpdateActionFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.ReferencesUpdateActionFactoryResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ReferencesUpdateActionFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.ReferencesUpdateActionFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.ReferencesUpdateActionFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.ReferencesUpdateActionFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.ReferencesUpdateActionFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool cqPeriodwcmPeriodmsmPeriodimplPeriodactionPeriodreferencesupdatePeriodpropUpdateNested = request->get_query_parameter("cqPeriodwcmPeriodmsmPeriodimplPeriodactionPeriodreferencesupdatePeriodpropUpdateNested", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.VersionCopyActionFactoryResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.VersionCopyActionFactoryResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.VersionCopyActionFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.VersionCopyActionFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.VersionCopyActionFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.VersionCopyActionFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.actions.VersionCopyActionFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.LiveRelationshipManagerImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.LiveRelationshipManagerImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.msm.impl.LiveRelationshipManagerImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.LiveRelationshipManagerImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.LiveRelationshipManagerImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.LiveRelationshipManagerImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.LiveRelationshipManagerImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string liverelationshipmgrPeriodrelationsconfigPerioddefault = request->get_query_parameter("liverelationshipmgrPeriodrelationsconfigPerioddefault", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.RolloutManagerImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.RolloutManagerImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.msm.impl.RolloutManagerImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.RolloutManagerImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.RolloutManagerImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.RolloutManagerImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.RolloutManagerImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string eventPeriodfilter = request->get_query_parameter("eventPeriodfilter", "");
			const int32_t rolloutmgrPeriodthreadpoolPeriodmaxsize = request->get_query_parameter("rolloutmgrPeriodthreadpoolPeriodmaxsize", 0);
			const int32_t rolloutmgrPeriodthreadpoolPeriodmaxshutdowntime = request->get_query_parameter("rolloutmgrPeriodthreadpoolPeriodmaxshutdowntime", 0);
			const std::string rolloutmgrPeriodthreadpoolPeriodpriority = request->get_query_parameter("rolloutmgrPeriodthreadpoolPeriodpriority", "");
			const int32_t rolloutmgrPeriodcommitPeriodsize = request->get_query_parameter("rolloutmgrPeriodcommitPeriodsize", 0);
			const bool rolloutmgrPeriodconflicthandlingPeriodenabled = request->get_query_parameter("rolloutmgrPeriodconflicthandlingPeriodenabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.servlets.AuditLogServletResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.servlets.AuditLogServletResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.msm.impl.servlets.AuditLogServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.servlets.AuditLogServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.servlets.AuditLogServletResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.servlets.AuditLogServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.msm.impl.servlets.AuditLogServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t auditlogservletPerioddefaultPeriodeventsPeriodcount = request->get_query_parameter("auditlogservletPerioddefaultPeriodeventsPeriodcount", 0);
			const std::string auditlogservletPerioddefaultPeriodpath = request->get_query_parameter("auditlogservletPerioddefaultPeriodpath", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.notification.email.impl.EmailChannelResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.notification.email.impl.EmailChannelResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.notification.email.impl.EmailChannel/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.notification.email.impl.EmailChannelResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.notification.email.impl.EmailChannelResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.notification.email.impl.EmailChannelResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.notification.email.impl.EmailChannelResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string emailPeriodfrom = request->get_query_parameter("emailPeriodfrom", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.notification.impl.NotificationManagerImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.notification.impl.NotificationManagerImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.notification.impl.NotificationManagerImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.notification.impl.NotificationManagerImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.notification.impl.NotificationManagerImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.notification.impl.NotificationManagerImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.notification.impl.NotificationManagerImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.scripting.impl.BVPManagerResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.scripting.impl.BVPManagerResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.scripting.impl.BVPManager/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.scripting.impl.BVPManagerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.scripting.impl.BVPManagerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.scripting.impl.BVPManagerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.scripting.impl.BVPManagerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.undo.UndoConfigResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.undo.UndoConfigResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.undo.UndoConfig/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.undo.UndoConfigResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.undo.UndoConfigResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.undo.UndoConfigResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.undo.UndoConfigResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool cqPeriodwcmPeriodundoPeriodenabled = request->get_query_parameter("cqPeriodwcmPeriodundoPeriodenabled", );
			const std::string cqPeriodwcmPeriodundoPeriodpath = request->get_query_parameter("cqPeriodwcmPeriodundoPeriodpath", "");
			const int32_t cqPeriodwcmPeriodundoPeriodvalidity = request->get_query_parameter("cqPeriodwcmPeriodundoPeriodvalidity", 0);
			const int32_t cqPeriodwcmPeriodundoPeriodsteps = request->get_query_parameter("cqPeriodwcmPeriodundoPeriodsteps", 0);
			const std::string cqPeriodwcmPeriodundoPeriodpersistence = request->get_query_parameter("cqPeriodwcmPeriodundoPeriodpersistence", "");
			const bool cqPeriodwcmPeriodundoPeriodpersistencePeriodmode = request->get_query_parameter("cqPeriodwcmPeriodundoPeriodpersistencePeriodmode", );
			const std::string cqPeriodwcmPeriodundoPeriodmarkermode = request->get_query_parameter("cqPeriodwcmPeriodundoPeriodmarkermode", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.webservicesupport.impl.ReplicationEventListenerResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.webservicesupport.impl.ReplicationEventListenerResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.webservicesupport.impl.ReplicationEventListener/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.webservicesupport.impl.ReplicationEventListenerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.webservicesupport.impl.ReplicationEventListenerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.webservicesupport.impl.ReplicationEventListenerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.webservicesupport.impl.ReplicationEventListenerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.workflow.impl.WcmWorkflowServiceImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.workflow.impl.WcmWorkflowServiceImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.workflow.impl.WcmWorkflowServiceImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.workflow.impl.WcmWorkflowServiceImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.workflow.impl.WcmWorkflowServiceImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.workflow.impl.WcmWorkflowServiceImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.workflow.impl.WcmWorkflowServiceImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string eventPeriodfilter = request->get_query_parameter("eventPeriodfilter", "");
			const int32_t minThreadPoolSize = request->get_query_parameter("minThreadPoolSize", 0);
			const int32_t maxThreadPoolSize = request->get_query_parameter("maxThreadPoolSize", 0);
			const bool cqPeriodwcmPeriodworkflowPeriodterminatePeriodonPeriodactivate = request->get_query_parameter("cqPeriodwcmPeriodworkflowPeriodterminatePeriodonPeriodactivate", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.workflow.impl.WorkflowPackageInfoProviderResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.workflow.impl.WorkflowPackageInfoProviderResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.wcm.workflow.impl.WorkflowPackageInfoProvider/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.workflow.impl.WorkflowPackageInfoProviderResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.workflow.impl.WorkflowPackageInfoProviderResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.workflow.impl.WorkflowPackageInfoProviderResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.wcm.workflow.impl.WorkflowPackageInfoProviderResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string workflowpackageinfoproviderPeriodfilterPeriodrootpath = request->get_query_parameter("workflowpackageinfoproviderPeriodfilterPeriodrootpath", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.widget.impl.HtmlLibraryManagerImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.widget.impl.HtmlLibraryManagerImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.widget.impl.HtmlLibraryManagerImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.widget.impl.HtmlLibraryManagerImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.widget.impl.HtmlLibraryManagerImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.widget.impl.HtmlLibraryManagerImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.widget.impl.HtmlLibraryManagerImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string htmllibmanagerPeriodclientmanager = request->get_query_parameter("htmllibmanagerPeriodclientmanager", "");
			const bool htmllibmanagerPerioddebug = request->get_query_parameter("htmllibmanagerPerioddebug", );
			const bool htmllibmanagerPerioddebugPeriodconsole = request->get_query_parameter("htmllibmanagerPerioddebugPeriodconsole", );
			const std::string htmllibmanagerPerioddebugPeriodinitPeriodjs = request->get_query_parameter("htmllibmanagerPerioddebugPeriodinitPeriodjs", "");
			const std::string htmllibmanagerPerioddefaultthemename = request->get_query_parameter("htmllibmanagerPerioddefaultthemename", "");
			const std::string htmllibmanagerPerioddefaultuserthemename = request->get_query_parameter("htmllibmanagerPerioddefaultuserthemename", "");
			const std::string htmllibmanagerPeriodfirebuglitePeriodpath = request->get_query_parameter("htmllibmanagerPeriodfirebuglitePeriodpath", "");
			const bool htmllibmanagerPeriodforceCQUrlInfo = request->get_query_parameter("htmllibmanagerPeriodforceCQUrlInfo", );
			const bool htmllibmanagerPeriodgzip = request->get_query_parameter("htmllibmanagerPeriodgzip", );
			const int32_t htmllibmanagerPeriodmaxage = request->get_query_parameter("htmllibmanagerPeriodmaxage", 0);
			const int32_t htmllibmanagerPeriodmaxDataUriSize = request->get_query_parameter("htmllibmanagerPeriodmaxDataUriSize", 0);
			const bool htmllibmanagerPeriodminify = request->get_query_parameter("htmllibmanagerPeriodminify", );
			const bool htmllibmanagerPeriodtiming = request->get_query_parameter("htmllibmanagerPeriodtiming", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.widget.impl.WidgetExtensionProviderImplResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.widget.impl.WidgetExtensionProviderImplResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.widget.impl.WidgetExtensionProviderImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.widget.impl.WidgetExtensionProviderImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.widget.impl.WidgetExtensionProviderImplResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.widget.impl.WidgetExtensionProviderImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.widget.impl.WidgetExtensionProviderImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool widgetextensionproviderPerioddebug = request->get_query_parameter("widgetextensionproviderPerioddebug", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.workflow.impl.email.EMailNotificationServiceResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.workflow.impl.email.EMailNotificationServiceResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.workflow.impl.email.EMailNotificationService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.workflow.impl.email.EMailNotificationServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.workflow.impl.email.EMailNotificationServiceResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.workflow.impl.email.EMailNotificationServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.workflow.impl.email.EMailNotificationServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string fromPeriodaddress = request->get_query_parameter("fromPeriodaddress", "");
			const std::string hostPeriodprefix = request->get_query_parameter("hostPeriodprefix", "");
			const bool notifyPeriodonabort = request->get_query_parameter("notifyPeriodonabort", );
			const bool notifyPeriodoncomplete = request->get_query_parameter("notifyPeriodoncomplete", );
			const bool notifyPeriodoncontainercomplete = request->get_query_parameter("notifyPeriodoncontainercomplete", );
			const bool notifyPerioduseronly = request->get_query_parameter("notifyPerioduseronly", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.workflow.impl.email.TaskEMailNotificationServiceResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.workflow.impl.email.TaskEMailNotificationServiceResource()
{
	this->set_path("/system/console/configMgr/com.day.cq.workflow.impl.email.TaskEMailNotificationService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.workflow.impl.email.TaskEMailNotificationServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.workflow.impl.email.TaskEMailNotificationServiceResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.workflow.impl.email.TaskEMailNotificationServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.cq.workflow.impl.email.TaskEMailNotificationServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool notifyPeriodonupdate = request->get_query_parameter("notifyPeriodonupdate", );
			const bool notifyPeriodoncomplete = request->get_query_parameter("notifyPeriodoncomplete", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.crx.security.token.impl.impl.TokenAuthenticationHandlerResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.crx.security.token.impl.impl.TokenAuthenticationHandlerResource()
{
	this->set_path("/system/console/configMgr/com.day.crx.security.token.impl.impl.TokenAuthenticationHandler/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.crx.security.token.impl.impl.TokenAuthenticationHandlerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.crx.security.token.impl.impl.TokenAuthenticationHandlerResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.crx.security.token.impl.impl.TokenAuthenticationHandlerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.crx.security.token.impl.impl.TokenAuthenticationHandlerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string path = request->get_query_parameter("path", "");
			const std::string tokenPeriodrequiredPeriodattr = request->get_query_parameter("tokenPeriodrequiredPeriodattr", "");
			const std::string tokenPeriodalternatePeriodurl = request->get_query_parameter("tokenPeriodalternatePeriodurl", "");
			const bool tokenPeriodencapsulated = request->get_query_parameter("tokenPeriodencapsulated", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrCom.day.crx.security.token.impl.TokenCleanupTaskResource::ConfigmgrApiSystemConsoleConfigMgrCom.day.crx.security.token.impl.TokenCleanupTaskResource()
{
	this->set_path("/system/console/configMgr/com.day.crx.security.token.impl.TokenCleanupTask/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrCom.day.crx.security.token.impl.TokenCleanupTaskResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrCom.day.crx.security.token.impl.TokenCleanupTaskResource::~ConfigmgrApiSystemConsoleConfigMgrCom.day.crx.security.token.impl.TokenCleanupTaskResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrCom.day.crx.security.token.impl.TokenCleanupTaskResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool enablePeriodtokenPeriodcleanupPeriodtask = request->get_query_parameter("enablePeriodtokenPeriodcleanupPeriodtask", );
			const std::string schedulerPeriodexpression = request->get_query_parameter("schedulerPeriodexpression", "");
			const int32_t batchPeriodsize = request->get_query_parameter("batchPeriodsize", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrGuide Localization ServiceResource::ConfigmgrApiSystemConsoleConfigMgrGuide Localization ServiceResource()
{
	this->set_path("/system/console/configMgr/Guide Localization Service/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrGuide Localization ServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrGuide Localization ServiceResource::~ConfigmgrApiSystemConsoleConfigMgrGuide Localization ServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrGuide Localization ServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrMessagingUserComponentFactoryResource::ConfigmgrApiSystemConsoleConfigMgrMessagingUserComponentFactoryResource()
{
	this->set_path("/system/console/configMgr/MessagingUserComponentFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrMessagingUserComponentFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrMessagingUserComponentFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrMessagingUserComponentFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrMessagingUserComponentFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t priority = request->get_query_parameter("priority", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.aries.jmx.framework.StateConfigResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.aries.jmx.framework.StateConfigResource()
{
	this->set_path("/system/console/configMgr/org.apache.aries.jmx.framework.StateConfig/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.aries.jmx.framework.StateConfigResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.aries.jmx.framework.StateConfigResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.aries.jmx.framework.StateConfigResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.aries.jmx.framework.StateConfigResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool attributeChangeNotificationEnabled = request->get_query_parameter("attributeChangeNotificationEnabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.eventadmin.impl.EventAdminResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.eventadmin.impl.EventAdminResource()
{
	this->set_path("/system/console/configMgr/org.apache.felix.eventadmin.impl.EventAdmin/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.eventadmin.impl.EventAdminResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.eventadmin.impl.EventAdminResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.eventadmin.impl.EventAdminResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.eventadmin.impl.EventAdminResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t orgPeriodapachePeriodfelixPeriodeventadminPeriodThreadPoolSize = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodeventadminPeriodThreadPoolSize", 0);
			const double orgPeriodapachePeriodfelixPeriodeventadminPeriodAsyncToSyncThreadRatio = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodeventadminPeriodAsyncToSyncThreadRatio", 0.0);
			const int32_t orgPeriodapachePeriodfelixPeriodeventadminPeriodTimeout = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodeventadminPeriodTimeout", 0);
			const bool orgPeriodapachePeriodfelixPeriodeventadminPeriodRequireTopic = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodeventadminPeriodRequireTopic", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.httpResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.httpResource()
{
	this->set_path("/system/console/configMgr/org.apache.felix.http/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.httpResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.httpResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.httpResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.httpResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string orgPeriodapachePeriodfelixPeriodhttpPeriodhost = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodhttpPeriodhost", "");
			const bool orgPeriodapachePeriodfelixPeriodhttpPeriodenable = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodhttpPeriodenable", );
			const int32_t orgPeriodosgiPeriodservicePeriodhttpPeriodport = request->get_query_parameter("orgPeriodosgiPeriodservicePeriodhttpPeriodport", 0);
			const int32_t orgPeriodapachePeriodfelixPeriodhttpPeriodtimeout = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodhttpPeriodtimeout", 0);
			const bool orgPeriodapachePeriodfelixPeriodhttpsPeriodenable = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodhttpsPeriodenable", );
			const int32_t orgPeriodosgiPeriodservicePeriodhttpPeriodportPeriodsecure = request->get_query_parameter("orgPeriodosgiPeriodservicePeriodhttpPeriodportPeriodsecure", 0);
			const std::string orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystore = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystore", "");
			const std::string orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodpassword = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodpassword", "");
			const std::string orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyPeriodpassword = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyPeriodpassword", "");
			const std::string orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststore = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststore", "");
			const std::string orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststorePeriodpassword = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststorePeriodpassword", "");
			const std::string orgPeriodapachePeriodfelixPeriodhttpsPeriodclientcertificate = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodhttpsPeriodclientcertificate", "");
			const std::string orgPeriodapachePeriodfelixPeriodhttpPeriodcontextPath = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodhttpPeriodcontextPath", "");
			const bool orgPeriodapachePeriodfelixPeriodhttpPeriodmbeans = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodhttpPeriodmbeans", );
			const int32_t orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPeriodtimeout = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPeriodtimeout", 0);
			const int32_t orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodthreadpoolPeriodmax = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodthreadpoolPeriodmax", 0);
			const int32_t orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodacceptors = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodacceptors", 0);
			const int32_t orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodselectors = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodselectors", 0);
			const int32_t orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodheaderBufferSize = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodheaderBufferSize", 0);
			const int32_t orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodrequestBufferSize = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodrequestBufferSize", 0);
			const int32_t orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodresponseBufferSize = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodresponseBufferSize", 0);
			const int32_t orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodmaxFormSize = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodmaxFormSize", 0);
			const bool orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodsendServerHeader = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodsendServerHeader", );
			const bool orgPeriodapachePeriodfelixPeriodproxyPeriodloadPeriodbalancerPeriodconnectionPeriodenable = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodproxyPeriodloadPeriodbalancerPeriodconnectionPeriodenable", );
			const bool orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodrenegotiateAllowed = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodrenegotiateAllowed", );
			const bool orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodsessionPeriodcookiePeriodhttpOnly = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodsessionPeriodcookiePeriodhttpOnly", );
			const bool orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodsessionPeriodcookiePeriodsecure = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodsessionPeriodcookiePeriodsecure", );
			const std::string orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionIdPathParameterName = request->get_query_parameter("orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionIdPathParameterName", "");
			const bool orgPeriodeclipsePeriodjettyPeriodservletPeriodCheckingRemoteSessionIdEncoding = request->get_query_parameter("orgPeriodeclipsePeriodjettyPeriodservletPeriodCheckingRemoteSessionIdEncoding", );
			const std::string orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionCookie = request->get_query_parameter("orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionCookie", "");
			const std::string orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionDomain = request->get_query_parameter("orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionDomain", "");
			const std::string orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionPath = request->get_query_parameter("orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionPath", "");
			const int32_t orgPeriodeclipsePeriodjettyPeriodservletPeriodMaxAge = request->get_query_parameter("orgPeriodeclipsePeriodjettyPeriodservletPeriodMaxAge", 0);
			const std::string orgPeriodapachePeriodfelixPeriodhttpPeriodname = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodhttpPeriodname", "");
			const bool orgPeriodapachePeriodfelixPeriodjettyPeriodgziphandlerPeriodenable = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodjettyPeriodgziphandlerPeriodenable", );
			const int32_t orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodminGzipSize = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodminGzipSize", 0);
			const int32_t orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodcompressionLevel = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodcompressionLevel", 0);
			const int32_t orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodinflateBufferSize = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodinflateBufferSize", 0);
			const bool orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodsyncFlush = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodsyncFlush", );
			const bool orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPeriodinvalidate = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPeriodinvalidate", );
			const bool orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPerioduniqueid = request->get_query_parameter("orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPerioduniqueid", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.http.sslfilter.SslFilterResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.http.sslfilter.SslFilterResource()
{
	this->set_path("/system/console/configMgr/org.apache.felix.http.sslfilter.SslFilter/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.http.sslfilter.SslFilterResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.http.sslfilter.SslFilterResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.http.sslfilter.SslFilterResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.http.sslfilter.SslFilterResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string sslForwardPeriodheader = request->get_query_parameter("sslForwardPeriodheader", "");
			const std::string sslForwardPeriodvalue = request->get_query_parameter("sslForwardPeriodvalue", "");
			const std::string sslForwardCertPeriodheader = request->get_query_parameter("sslForwardCertPeriodheader", "");
			const bool rewritePeriodabsolutePeriodurls = request->get_query_parameter("rewritePeriodabsolutePeriodurls", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.jaas.Configuration.factoryResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.jaas.Configuration.factoryResource()
{
	this->set_path("/system/console/configMgr/org.apache.felix.jaas.Configuration.factory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.jaas.Configuration.factoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.jaas.Configuration.factoryResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.jaas.Configuration.factoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.jaas.Configuration.factoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string jaasPeriodcontrolFlag = request->get_query_parameter("jaasPeriodcontrolFlag", "");
			const int32_t jaasPeriodranking = request->get_query_parameter("jaasPeriodranking", 0);
			const std::string jaasPeriodrealmName = request->get_query_parameter("jaasPeriodrealmName", "");
			const std::string jaasPeriodclassname = request->get_query_parameter("jaasPeriodclassname", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.jaas.ConfigurationSpiResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.jaas.ConfigurationSpiResource()
{
	this->set_path("/system/console/configMgr/org.apache.felix.jaas.ConfigurationSpi/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.jaas.ConfigurationSpiResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.jaas.ConfigurationSpiResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.jaas.ConfigurationSpiResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.jaas.ConfigurationSpiResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string jaasPerioddefaultRealmName = request->get_query_parameter("jaasPerioddefaultRealmName", "");
			const std::string jaasPeriodconfigProviderName = request->get_query_parameter("jaasPeriodconfigProviderName", "");
			const std::string jaasPeriodglobalConfigPolicy = request->get_query_parameter("jaasPeriodglobalConfigPolicy", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.scr.ScrServiceResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.scr.ScrServiceResource()
{
	this->set_path("/system/console/configMgr/org.apache.felix.scr.ScrService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.scr.ScrServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.scr.ScrServiceResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.scr.ScrServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.scr.ScrServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t dsPeriodloglevel = request->get_query_parameter("dsPeriodloglevel", 0);
			const bool dsPeriodfactoryPeriodenabled = request->get_query_parameter("dsPeriodfactoryPeriodenabled", );
			const bool dsPerioddelayedPeriodkeepInstances = request->get_query_parameter("dsPerioddelayedPeriodkeepInstances", );
			const int32_t dsPeriodlockPeriodtimeoutPeriodmilliseconds = request->get_query_parameter("dsPeriodlockPeriodtimeoutPeriodmilliseconds", 0);
			const int32_t dsPeriodstopPeriodtimeoutPeriodmilliseconds = request->get_query_parameter("dsPeriodstopPeriodtimeoutPeriodmilliseconds", 0);
			const bool dsPeriodglobalPeriodextender = request->get_query_parameter("dsPeriodglobalPeriodextender", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.impl.ComponentsCheckResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.impl.ComponentsCheckResource()
{
	this->set_path("/system/console/configMgr/org.apache.felix.systemready.impl.ComponentsCheck/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.impl.ComponentsCheckResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.impl.ComponentsCheckResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.impl.ComponentsCheckResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.impl.ComponentsCheckResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string type = request->get_query_parameter("type", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.impl.FrameworkStartCheckResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.impl.FrameworkStartCheckResource()
{
	this->set_path("/system/console/configMgr/org.apache.felix.systemready.impl.FrameworkStartCheck/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.impl.FrameworkStartCheckResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.impl.FrameworkStartCheckResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.impl.FrameworkStartCheckResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.impl.FrameworkStartCheckResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t timeout = request->get_query_parameter("timeout", 0);
			const int32_t targetPeriodstartPeriodlevel = request->get_query_parameter("targetPeriodstartPeriodlevel", 0);
			const std::string targetPeriodstartPeriodlevelPeriodpropPeriodname = request->get_query_parameter("targetPeriodstartPeriodlevelPeriodpropPeriodname", "");
			const std::string type = request->get_query_parameter("type", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.impl.ServicesCheckResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.impl.ServicesCheckResource()
{
	this->set_path("/system/console/configMgr/org.apache.felix.systemready.impl.ServicesCheck/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.impl.ServicesCheckResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.impl.ServicesCheckResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.impl.ServicesCheckResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.impl.ServicesCheckResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string type = request->get_query_parameter("type", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.impl.servlet.SystemAliveServletResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.impl.servlet.SystemAliveServletResource()
{
	this->set_path("/system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemAliveServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.impl.servlet.SystemAliveServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.impl.servlet.SystemAliveServletResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.impl.servlet.SystemAliveServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.impl.servlet.SystemAliveServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern = request->get_query_parameter("osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern", "");
			const std::string osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect = request->get_query_parameter("osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.impl.servlet.SystemReadyServletResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.impl.servlet.SystemReadyServletResource()
{
	this->set_path("/system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemReadyServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.impl.servlet.SystemReadyServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.impl.servlet.SystemReadyServletResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.impl.servlet.SystemReadyServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.impl.servlet.SystemReadyServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern = request->get_query_parameter("osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern", "");
			const std::string osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect = request->get_query_parameter("osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.SystemReadyMonitorResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.SystemReadyMonitorResource()
{
	this->set_path("/system/console/configMgr/org.apache.felix.systemready.SystemReadyMonitor/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.SystemReadyMonitorResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.SystemReadyMonitorResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.SystemReadyMonitorResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.systemready.SystemReadyMonitorResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t pollPeriodinterval = request->get_query_parameter("pollPeriodinterval", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.webconsole.internal.servlet.OsgiManagerResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.webconsole.internal.servlet.OsgiManagerResource()
{
	this->set_path("/system/console/configMgr/org.apache.felix.webconsole.internal.servlet.OsgiManager/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.webconsole.internal.servlet.OsgiManagerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.webconsole.internal.servlet.OsgiManagerResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.webconsole.internal.servlet.OsgiManagerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.webconsole.internal.servlet.OsgiManagerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string managerPeriodroot = request->get_query_parameter("managerPeriodroot", "");
			const std::string httpPeriodservicePeriodfilter = request->get_query_parameter("httpPeriodservicePeriodfilter", "");
			const std::string defaultPeriodrender = request->get_query_parameter("defaultPeriodrender", "");
			const std::string realm = request->get_query_parameter("realm", "");
			const std::string username = request->get_query_parameter("username", "");
			const std::string password = request->get_query_parameter("password", "");
			const std::string category = request->get_query_parameter("category", "");
			const std::string locale = request->get_query_parameter("locale", "");
			const int32_t loglevel = request->get_query_parameter("loglevel", 0);
			const std::string plugins = request->get_query_parameter("plugins", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.webconsole.plugins.event.internal.PluginServletResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.webconsole.plugins.event.internal.PluginServletResource()
{
	this->set_path("/system/console/configMgr/org.apache.felix.webconsole.plugins.event.internal.PluginServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.webconsole.plugins.event.internal.PluginServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.webconsole.plugins.event.internal.PluginServletResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.webconsole.plugins.event.internal.PluginServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.webconsole.plugins.event.internal.PluginServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t maxPeriodsize = request->get_query_parameter("maxPeriodsize", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.webconsole.plugins.memoryusage.internal.MemoryUsageConfiguratorResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.webconsole.plugins.memoryusage.internal.MemoryUsageConfiguratorResource()
{
	this->set_path("/system/console/configMgr/org.apache.felix.webconsole.plugins.memoryusage.internal.MemoryUsageConfigurator/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.webconsole.plugins.memoryusage.internal.MemoryUsageConfiguratorResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.webconsole.plugins.memoryusage.internal.MemoryUsageConfiguratorResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.webconsole.plugins.memoryusage.internal.MemoryUsageConfiguratorResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.felix.webconsole.plugins.memoryusage.internal.MemoryUsageConfiguratorResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t felixPeriodmemoryusagePerioddumpPeriodthreshold = request->get_query_parameter("felixPeriodmemoryusagePerioddumpPeriodthreshold", 0);
			const int32_t felixPeriodmemoryusagePerioddumpPeriodinterval = request->get_query_parameter("felixPeriodmemoryusagePerioddumpPeriodinterval", 0);
			const std::string felixPeriodmemoryusagePerioddumpPeriodlocation = request->get_query_parameter("felixPeriodmemoryusagePerioddumpPeriodlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.http.proxyconfiguratorResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.http.proxyconfiguratorResource()
{
	this->set_path("/system/console/configMgr/org.apache.http.proxyconfigurator/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.http.proxyconfiguratorResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.http.proxyconfiguratorResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.http.proxyconfiguratorResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.http.proxyconfiguratorResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool proxyPeriodenabled = request->get_query_parameter("proxyPeriodenabled", );
			const std::string proxyPeriodhost = request->get_query_parameter("proxyPeriodhost", "");
			const int32_t proxyPeriodport = request->get_query_parameter("proxyPeriodport", 0);
			const std::string proxyPerioduser = request->get_query_parameter("proxyPerioduser", "");
			const std::string proxyPeriodpassword = request->get_query_parameter("proxyPeriodpassword", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreTextProviderServiceResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreTextProviderServiceResource()
{
	this->set_path("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreTextProviderService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreTextProviderServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreTextProviderServiceResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreTextProviderServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreTextProviderServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string dir = request->get_query_parameter("dir", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.blob.datastore.FileDataStoreResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.blob.datastore.FileDataStoreResource()
{
	this->set_path("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.FileDataStore/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.blob.datastore.FileDataStoreResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.blob.datastore.FileDataStoreResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.blob.datastore.FileDataStoreResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.blob.datastore.FileDataStoreResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string path = request->get_query_parameter("path", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreServiceResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreServiceResource()
{
	this->set_path("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreServiceResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string mongouri = request->get_query_parameter("mongouri", "");
			const std::string db = request->get_query_parameter("db", "");
			const bool socketKeepAlive = request->get_query_parameter("socketKeepAlive", );
			const int32_t cache = request->get_query_parameter("cache", 0);
			const int32_t nodeCachePercentage = request->get_query_parameter("nodeCachePercentage", 0);
			const int32_t prevDocCachePercentage = request->get_query_parameter("prevDocCachePercentage", 0);
			const int32_t childrenCachePercentage = request->get_query_parameter("childrenCachePercentage", 0);
			const int32_t diffCachePercentage = request->get_query_parameter("diffCachePercentage", 0);
			const int32_t cacheSegmentCount = request->get_query_parameter("cacheSegmentCount", 0);
			const int32_t cacheStackMoveDistance = request->get_query_parameter("cacheStackMoveDistance", 0);
			const int32_t blobCacheSize = request->get_query_parameter("blobCacheSize", 0);
			const std::string persistentCache = request->get_query_parameter("persistentCache", "");
			const std::string journalCache = request->get_query_parameter("journalCache", "");
			const bool customBlobStore = request->get_query_parameter("customBlobStore", );
			const int32_t journalGCInterval = request->get_query_parameter("journalGCInterval", 0);
			const int32_t journalGCMaxAge = request->get_query_parameter("journalGCMaxAge", 0);
			const bool prefetchExternalChanges = request->get_query_parameter("prefetchExternalChanges", );
			const std::string role = request->get_query_parameter("role", "");
			const int32_t versionGcMaxAgeInSecs = request->get_query_parameter("versionGcMaxAgeInSecs", 0);
			const std::string versionGCExpression = request->get_query_parameter("versionGCExpression", "");
			const int32_t versionGCTimeLimitInSecs = request->get_query_parameter("versionGCTimeLimitInSecs", 0);
			const int32_t blobGcMaxAgeInSecs = request->get_query_parameter("blobGcMaxAgeInSecs", 0);
			const int32_t blobTrackSnapshotIntervalInSecs = request->get_query_parameter("blobTrackSnapshotIntervalInSecs", 0);
			const std::string repositoryPeriodhome = request->get_query_parameter("repositoryPeriodhome", "");
			const int32_t maxReplicationLagInSecs = request->get_query_parameter("maxReplicationLagInSecs", 0);
			const std::string documentStoreType = request->get_query_parameter("documentStoreType", "");
			const bool bundlingDisabled = request->get_query_parameter("bundlingDisabled", );
			const int32_t updateLimit = request->get_query_parameter("updateLimit", 0);
			const std::string leaseCheckMode = request->get_query_parameter("leaseCheckMode", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreServicePresetResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreServicePresetResource()
{
	this->set_path("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreServicePreset/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreServicePresetResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreServicePresetResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreServicePresetResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreServicePresetResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.document.secondary.SecondaryStoreCacheServiceResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.document.secondary.SecondaryStoreCacheServiceResource()
{
	this->set_path("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.secondary.SecondaryStoreCacheService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.document.secondary.SecondaryStoreCacheServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.document.secondary.SecondaryStoreCacheServiceResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.document.secondary.SecondaryStoreCacheServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.document.secondary.SecondaryStoreCacheServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool enableAsyncObserver = request->get_query_parameter("enableAsyncObserver", );
			const int32_t observerQueueSize = request->get_query_parameter("observerQueueSize", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.AsyncIndexerServiceResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.AsyncIndexerServiceResource()
{
	this->set_path("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.AsyncIndexerService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.AsyncIndexerServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.AsyncIndexerServiceResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.AsyncIndexerServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.AsyncIndexerServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t leaseTimeOutMinutes = request->get_query_parameter("leaseTimeOutMinutes", 0);
			const int32_t failingIndexTimeoutSeconds = request->get_query_parameter("failingIndexTimeoutSeconds", 0);
			const int32_t errorWarnIntervalSeconds = request->get_query_parameter("errorWarnIntervalSeconds", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexProviderServiceResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexProviderServiceResource()
{
	this->set_path("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexProviderService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexProviderServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexProviderServiceResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexProviderServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexProviderServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool disabled = request->get_query_parameter("disabled", );
			const bool debug = request->get_query_parameter("debug", );
			const std::string localIndexDir = request->get_query_parameter("localIndexDir", "");
			const bool enableOpenIndexAsync = request->get_query_parameter("enableOpenIndexAsync", );
			const int32_t threadPoolSize = request->get_query_parameter("threadPoolSize", 0);
			const bool prefetchIndexFiles = request->get_query_parameter("prefetchIndexFiles", );
			const int32_t extractedTextCacheSizeInMB = request->get_query_parameter("extractedTextCacheSizeInMB", 0);
			const int32_t extractedTextCacheExpiryInSecs = request->get_query_parameter("extractedTextCacheExpiryInSecs", 0);
			const bool alwaysUsePreExtractedCache = request->get_query_parameter("alwaysUsePreExtractedCache", );
			const int32_t booleanClauseLimit = request->get_query_parameter("booleanClauseLimit", 0);
			const bool enableHybridIndexing = request->get_query_parameter("enableHybridIndexing", );
			const int32_t hybridQueueSize = request->get_query_parameter("hybridQueueSize", 0);
			const bool disableStoredIndexDefinition = request->get_query_parameter("disableStoredIndexDefinition", );
			const bool deletedBlobsCollectionEnabled = request->get_query_parameter("deletedBlobsCollectionEnabled", );
			const int32_t propIndexCleanerIntervalInSecs = request->get_query_parameter("propIndexCleanerIntervalInSecs", 0);
			const bool enableSingleBlobIndexFiles = request->get_query_parameter("enableSingleBlobIndexFiles", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.EmbeddedSolrServerConfigurationProviderResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.EmbeddedSolrServerConfigurationProviderResource()
{
	this->set_path("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.EmbeddedSolrServerConfigurationProvider/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.EmbeddedSolrServerConfigurationProviderResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.EmbeddedSolrServerConfigurationProviderResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.EmbeddedSolrServerConfigurationProviderResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.EmbeddedSolrServerConfigurationProviderResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string solrPeriodhomePeriodpath = request->get_query_parameter("solrPeriodhomePeriodpath", "");
			const std::string solrPeriodcorePeriodname = request->get_query_parameter("solrPeriodcorePeriodname", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.NodeStateSolrServersObserverServiceResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.NodeStateSolrServersObserverServiceResource()
{
	this->set_path("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.NodeStateSolrServersObserverService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.NodeStateSolrServersObserverServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.NodeStateSolrServersObserverServiceResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.NodeStateSolrServersObserverServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.NodeStateSolrServersObserverServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool enabled = request->get_query_parameter("enabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.OakSolrConfigurationProviderServiceResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.OakSolrConfigurationProviderServiceResource()
{
	this->set_path("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.OakSolrConfigurationProviderService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.OakSolrConfigurationProviderServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.OakSolrConfigurationProviderServiceResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.OakSolrConfigurationProviderServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.OakSolrConfigurationProviderServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string pathPerioddescPeriodfield = request->get_query_parameter("pathPerioddescPeriodfield", "");
			const std::string pathPeriodchildPeriodfield = request->get_query_parameter("pathPeriodchildPeriodfield", "");
			const std::string pathPeriodparentPeriodfield = request->get_query_parameter("pathPeriodparentPeriodfield", "");
			const std::string pathPeriodexactPeriodfield = request->get_query_parameter("pathPeriodexactPeriodfield", "");
			const std::string catchPeriodallPeriodfield = request->get_query_parameter("catchPeriodallPeriodfield", "");
			const std::string collapsedPeriodpathPeriodfield = request->get_query_parameter("collapsedPeriodpathPeriodfield", "");
			const std::string pathPerioddepthPeriodfield = request->get_query_parameter("pathPerioddepthPeriodfield", "");
			const std::string commitPeriodpolicy = request->get_query_parameter("commitPeriodpolicy", "");
			const int32_t rows = request->get_query_parameter("rows", 0);
			const bool pathPeriodrestrictions = request->get_query_parameter("pathPeriodrestrictions", );
			const bool propertyPeriodrestrictions = request->get_query_parameter("propertyPeriodrestrictions", );
			const bool primarytypesPeriodrestrictions = request->get_query_parameter("primarytypesPeriodrestrictions", );
			const bool collapsePeriodjcrcontentPeriodnodes = request->get_query_parameter("collapsePeriodjcrcontentPeriodnodes", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.RemoteSolrServerConfigurationProviderResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.RemoteSolrServerConfigurationProviderResource()
{
	this->set_path("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.RemoteSolrServerConfigurationProvider/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.RemoteSolrServerConfigurationProviderResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.RemoteSolrServerConfigurationProviderResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.RemoteSolrServerConfigurationProviderResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.RemoteSolrServerConfigurationProviderResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string solrPeriodhttpPeriodurl = request->get_query_parameter("solrPeriodhttpPeriodurl", "");
			const std::string solrPeriodzkPeriodhost = request->get_query_parameter("solrPeriodzkPeriodhost", "");
			const std::string solrPeriodcollection = request->get_query_parameter("solrPeriodcollection", "");
			const int32_t solrPeriodsocketPeriodtimeout = request->get_query_parameter("solrPeriodsocketPeriodtimeout", 0);
			const int32_t solrPeriodconnectionPeriodtimeout = request->get_query_parameter("solrPeriodconnectionPeriodtimeout", 0);
			const int32_t solrPeriodshardsPeriodno = request->get_query_parameter("solrPeriodshardsPeriodno", 0);
			const int32_t solrPeriodreplicationPeriodfactor = request->get_query_parameter("solrPeriodreplicationPeriodfactor", 0);
			const std::string solrPeriodconfPerioddir = request->get_query_parameter("solrPeriodconfPerioddir", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrQueryIndexProviderServiceResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrQueryIndexProviderServiceResource()
{
	this->set_path("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrQueryIndexProviderService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrQueryIndexProviderServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrQueryIndexProviderServiceResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrQueryIndexProviderServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrQueryIndexProviderServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool queryPeriodaggregation = request->get_query_parameter("queryPeriodaggregation", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrServerProviderServiceResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrServerProviderServiceResource()
{
	this->set_path("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrServerProviderService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrServerProviderServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrServerProviderServiceResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrServerProviderServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrServerProviderServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string serverPeriodtype = request->get_query_parameter("serverPeriodtype", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.metric.StatisticsProviderFactoryResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.metric.StatisticsProviderFactoryResource()
{
	this->set_path("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.metric.StatisticsProviderFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.metric.StatisticsProviderFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.metric.StatisticsProviderFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.metric.StatisticsProviderFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.metric.StatisticsProviderFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string providerType = request->get_query_parameter("providerType", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.observation.ChangeCollectorProviderResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.observation.ChangeCollectorProviderResource()
{
	this->set_path("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.observation.ChangeCollectorProvider/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.observation.ChangeCollectorProviderResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.observation.ChangeCollectorProviderResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.observation.ChangeCollectorProviderResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.plugins.observation.ChangeCollectorProviderResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t maxItems = request->get_query_parameter("maxItems", 0);
			const int32_t maxPathDepth = request->get_query_parameter("maxPathDepth", 0);
			const bool enabled = request->get_query_parameter("enabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.query.QueryEngineSettingsServiceResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.query.QueryEngineSettingsServiceResource()
{
	this->set_path("/system/console/configMgr/org.apache.jackrabbit.oak.query.QueryEngineSettingsService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.query.QueryEngineSettingsServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.query.QueryEngineSettingsServiceResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.query.QueryEngineSettingsServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.query.QueryEngineSettingsServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t queryLimitInMemory = request->get_query_parameter("queryLimitInMemory", 0);
			const int32_t queryLimitReads = request->get_query_parameter("queryLimitReads", 0);
			const bool queryFailTraversal = request->get_query_parameter("queryFailTraversal", );
			const bool fastQuerySize = request->get_query_parameter("fastQuerySize", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.authentication.AuthenticationConfigurationImplResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.authentication.AuthenticationConfigurationImplResource()
{
	this->set_path("/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.AuthenticationConfigurationImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.authentication.AuthenticationConfigurationImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.authentication.AuthenticationConfigurationImplResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.authentication.AuthenticationConfigurationImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.authentication.AuthenticationConfigurationImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string orgPeriodapachePeriodjackrabbitPeriodoakPeriodauthenticationPeriodappName = request->get_query_parameter("orgPeriodapachePeriodjackrabbitPeriodoakPeriodauthenticationPeriodappName", "");
			const std::string orgPeriodapachePeriodjackrabbitPeriodoakPeriodauthenticationPeriodconfigSpiName = request->get_query_parameter("orgPeriodapachePeriodjackrabbitPeriodoakPeriodauthenticationPeriodconfigSpiName", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.authentication.ldap.impl.LdapIdentityProviderResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.authentication.ldap.impl.LdapIdentityProviderResource()
{
	this->set_path("/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.ldap.impl.LdapIdentityProvider/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.authentication.ldap.impl.LdapIdentityProviderResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.authentication.ldap.impl.LdapIdentityProviderResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.authentication.ldap.impl.LdapIdentityProviderResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.authentication.ldap.impl.LdapIdentityProviderResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string providerPeriodname = request->get_query_parameter("providerPeriodname", "");
			const std::string hostPeriodname = request->get_query_parameter("hostPeriodname", "");
			const int32_t hostPeriodport = request->get_query_parameter("hostPeriodport", 0);
			const bool hostPeriodssl = request->get_query_parameter("hostPeriodssl", );
			const bool hostPeriodtls = request->get_query_parameter("hostPeriodtls", );
			const bool hostPeriodnoCertCheck = request->get_query_parameter("hostPeriodnoCertCheck", );
			const std::string bindPerioddn = request->get_query_parameter("bindPerioddn", "");
			const std::string bindPeriodpassword = request->get_query_parameter("bindPeriodpassword", "");
			const std::string searchTimeout = request->get_query_parameter("searchTimeout", "");
			const int32_t adminPoolPeriodmaxActive = request->get_query_parameter("adminPoolPeriodmaxActive", 0);
			const bool adminPoolPeriodlookupOnValidate = request->get_query_parameter("adminPoolPeriodlookupOnValidate", );
			const int32_t userPoolPeriodmaxActive = request->get_query_parameter("userPoolPeriodmaxActive", 0);
			const bool userPoolPeriodlookupOnValidate = request->get_query_parameter("userPoolPeriodlookupOnValidate", );
			const std::string userPeriodbaseDN = request->get_query_parameter("userPeriodbaseDN", "");
			const std::string userPeriodidAttribute = request->get_query_parameter("userPeriodidAttribute", "");
			const std::string userPeriodextraFilter = request->get_query_parameter("userPeriodextraFilter", "");
			const bool userPeriodmakeDnPath = request->get_query_parameter("userPeriodmakeDnPath", );
			const std::string groupPeriodbaseDN = request->get_query_parameter("groupPeriodbaseDN", "");
			const std::string groupPeriodnameAttribute = request->get_query_parameter("groupPeriodnameAttribute", "");
			const std::string groupPeriodextraFilter = request->get_query_parameter("groupPeriodextraFilter", "");
			const bool groupPeriodmakeDnPath = request->get_query_parameter("groupPeriodmakeDnPath", );
			const std::string groupPeriodmemberAttribute = request->get_query_parameter("groupPeriodmemberAttribute", "");
			const bool useUidForExtId = request->get_query_parameter("useUidForExtId", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.authentication.token.TokenConfigurationImplResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.authentication.token.TokenConfigurationImplResource()
{
	this->set_path("/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.token.TokenConfigurationImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.authentication.token.TokenConfigurationImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.authentication.token.TokenConfigurationImplResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.authentication.token.TokenConfigurationImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.authentication.token.TokenConfigurationImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string tokenExpiration = request->get_query_parameter("tokenExpiration", "");
			const std::string tokenLength = request->get_query_parameter("tokenLength", "");
			const bool tokenRefresh = request->get_query_parameter("tokenRefresh", );
			const int32_t tokenCleanupThreshold = request->get_query_parameter("tokenCleanupThreshold", 0);
			const std::string passwordHashAlgorithm = request->get_query_parameter("passwordHashAlgorithm", "");
			const int32_t passwordHashIterations = request->get_query_parameter("passwordHashIterations", 0);
			const int32_t passwordSaltSize = request->get_query_parameter("passwordSaltSize", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.authorization.AuthorizationConfigurationImplResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.authorization.AuthorizationConfigurationImplResource()
{
	this->set_path("/system/console/configMgr/org.apache.jackrabbit.oak.security.authorization.AuthorizationConfigurationImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.authorization.AuthorizationConfigurationImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.authorization.AuthorizationConfigurationImplResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.authorization.AuthorizationConfigurationImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.authorization.AuthorizationConfigurationImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string permissionsJr2 = request->get_query_parameter("permissionsJr2", "");
			const std::string importBehavior = request->get_query_parameter("importBehavior", "");
			const int32_t configurationRanking = request->get_query_parameter("configurationRanking", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.internal.SecurityProviderRegistrationResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.internal.SecurityProviderRegistrationResource()
{
	this->set_path("/system/console/configMgr/org.apache.jackrabbit.oak.security.internal.SecurityProviderRegistration/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.internal.SecurityProviderRegistrationResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.internal.SecurityProviderRegistrationResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.internal.SecurityProviderRegistrationResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.internal.SecurityProviderRegistrationResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string authorizationCompositionType = request->get_query_parameter("authorizationCompositionType", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.user.RandomAuthorizableNodeNameResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.user.RandomAuthorizableNodeNameResource()
{
	this->set_path("/system/console/configMgr/org.apache.jackrabbit.oak.security.user.RandomAuthorizableNodeName/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.user.RandomAuthorizableNodeNameResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.user.RandomAuthorizableNodeNameResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.user.RandomAuthorizableNodeNameResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.user.RandomAuthorizableNodeNameResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t length = request->get_query_parameter("length", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.user.UserConfigurationImplResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.user.UserConfigurationImplResource()
{
	this->set_path("/system/console/configMgr/org.apache.jackrabbit.oak.security.user.UserConfigurationImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.user.UserConfigurationImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.user.UserConfigurationImplResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.user.UserConfigurationImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.security.user.UserConfigurationImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string usersPath = request->get_query_parameter("usersPath", "");
			const std::string groupsPath = request->get_query_parameter("groupsPath", "");
			const std::string systemRelativePath = request->get_query_parameter("systemRelativePath", "");
			const int32_t defaultDepth = request->get_query_parameter("defaultDepth", 0);
			const std::string importBehavior = request->get_query_parameter("importBehavior", "");
			const std::string passwordHashAlgorithm = request->get_query_parameter("passwordHashAlgorithm", "");
			const int32_t passwordHashIterations = request->get_query_parameter("passwordHashIterations", 0);
			const int32_t passwordSaltSize = request->get_query_parameter("passwordSaltSize", 0);
			const bool omitAdminPw = request->get_query_parameter("omitAdminPw", );
			const bool supportAutoSave = request->get_query_parameter("supportAutoSave", );
			const int32_t passwordMaxAge = request->get_query_parameter("passwordMaxAge", 0);
			const bool initialPasswordChange = request->get_query_parameter("initialPasswordChange", );
			const int32_t passwordHistorySize = request->get_query_parameter("passwordHistorySize", 0);
			const bool passwordExpiryForAdmin = request->get_query_parameter("passwordExpiryForAdmin", );
			const int32_t cacheExpiration = request->get_query_parameter("cacheExpiration", 0);
			const bool enableRFC7613UsercaseMappedProfile = request->get_query_parameter("enableRFC7613UsercaseMappedProfile", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.segment.azure.AzureSegmentStoreServiceResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.segment.azure.AzureSegmentStoreServiceResource()
{
	this->set_path("/system/console/configMgr/org.apache.jackrabbit.oak.segment.azure.AzureSegmentStoreService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.segment.azure.AzureSegmentStoreServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.segment.azure.AzureSegmentStoreServiceResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.segment.azure.AzureSegmentStoreServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.segment.azure.AzureSegmentStoreServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string accountName = request->get_query_parameter("accountName", "");
			const std::string containerName = request->get_query_parameter("containerName", "");
			const std::string accessKey = request->get_query_parameter("accessKey", "");
			const std::string rootPath = request->get_query_parameter("rootPath", "");
			const std::string connectionURL = request->get_query_parameter("connectionURL", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.segment.SegmentNodeStoreFactoryResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.segment.SegmentNodeStoreFactoryResource()
{
	this->set_path("/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.segment.SegmentNodeStoreFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.segment.SegmentNodeStoreFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.segment.SegmentNodeStoreFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.segment.SegmentNodeStoreFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string repositoryPeriodhome = request->get_query_parameter("repositoryPeriodhome", "");
			const std::string tarmkPeriodmode = request->get_query_parameter("tarmkPeriodmode", "");
			const int32_t tarmkPeriodsize = request->get_query_parameter("tarmkPeriodsize", 0);
			const int32_t segmentCachePeriodsize = request->get_query_parameter("segmentCachePeriodsize", 0);
			const int32_t stringCachePeriodsize = request->get_query_parameter("stringCachePeriodsize", 0);
			const int32_t templateCachePeriodsize = request->get_query_parameter("templateCachePeriodsize", 0);
			const int32_t stringDeduplicationCachePeriodsize = request->get_query_parameter("stringDeduplicationCachePeriodsize", 0);
			const int32_t templateDeduplicationCachePeriodsize = request->get_query_parameter("templateDeduplicationCachePeriodsize", 0);
			const int32_t nodeDeduplicationCachePeriodsize = request->get_query_parameter("nodeDeduplicationCachePeriodsize", 0);
			const bool pauseCompaction = request->get_query_parameter("pauseCompaction", );
			const int32_t compactionPeriodretryCount = request->get_query_parameter("compactionPeriodretryCount", 0);
			const int32_t compactionPeriodforcePeriodtimeout = request->get_query_parameter("compactionPeriodforcePeriodtimeout", 0);
			const int32_t compactionPeriodsizeDeltaEstimation = request->get_query_parameter("compactionPeriodsizeDeltaEstimation", 0);
			const bool compactionPerioddisableEstimation = request->get_query_parameter("compactionPerioddisableEstimation", );
			const int32_t compactionPeriodretainedGenerations = request->get_query_parameter("compactionPeriodretainedGenerations", 0);
			const int32_t compactionPeriodmemoryThreshold = request->get_query_parameter("compactionPeriodmemoryThreshold", 0);
			const int32_t compactionPeriodprogressLog = request->get_query_parameter("compactionPeriodprogressLog", 0);
			const bool standby = request->get_query_parameter("standby", );
			const bool customBlobStore = request->get_query_parameter("customBlobStore", );
			const bool customSegmentStore = request->get_query_parameter("customSegmentStore", );
			const bool splitPersistence = request->get_query_parameter("splitPersistence", );
			const std::string repositoryPeriodbackupPerioddir = request->get_query_parameter("repositoryPeriodbackupPerioddir", "");
			const int32_t blobGcMaxAgeInSecs = request->get_query_parameter("blobGcMaxAgeInSecs", 0);
			const int32_t blobTrackSnapshotIntervalInSecs = request->get_query_parameter("blobTrackSnapshotIntervalInSecs", 0);
			const std::string role = request->get_query_parameter("role", "");
			const bool registerDescriptors = request->get_query_parameter("registerDescriptors", );
			const bool dispatchChanges = request->get_query_parameter("dispatchChanges", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.segment.SegmentNodeStoreMonitorServiceResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.segment.SegmentNodeStoreMonitorServiceResource()
{
	this->set_path("/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreMonitorService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.segment.SegmentNodeStoreMonitorServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.segment.SegmentNodeStoreMonitorServiceResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.segment.SegmentNodeStoreMonitorServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.segment.SegmentNodeStoreMonitorServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.segment.SegmentNodeStoreServiceResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.segment.SegmentNodeStoreServiceResource()
{
	this->set_path("/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.segment.SegmentNodeStoreServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.segment.SegmentNodeStoreServiceResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.segment.SegmentNodeStoreServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.segment.SegmentNodeStoreServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string repositoryPeriodhome = request->get_query_parameter("repositoryPeriodhome", "");
			const std::string tarmkPeriodmode = request->get_query_parameter("tarmkPeriodmode", "");
			const int32_t tarmkPeriodsize = request->get_query_parameter("tarmkPeriodsize", 0);
			const int32_t segmentCachePeriodsize = request->get_query_parameter("segmentCachePeriodsize", 0);
			const int32_t stringCachePeriodsize = request->get_query_parameter("stringCachePeriodsize", 0);
			const int32_t templateCachePeriodsize = request->get_query_parameter("templateCachePeriodsize", 0);
			const int32_t stringDeduplicationCachePeriodsize = request->get_query_parameter("stringDeduplicationCachePeriodsize", 0);
			const int32_t templateDeduplicationCachePeriodsize = request->get_query_parameter("templateDeduplicationCachePeriodsize", 0);
			const int32_t nodeDeduplicationCachePeriodsize = request->get_query_parameter("nodeDeduplicationCachePeriodsize", 0);
			const bool pauseCompaction = request->get_query_parameter("pauseCompaction", );
			const int32_t compactionPeriodretryCount = request->get_query_parameter("compactionPeriodretryCount", 0);
			const int32_t compactionPeriodforcePeriodtimeout = request->get_query_parameter("compactionPeriodforcePeriodtimeout", 0);
			const int32_t compactionPeriodsizeDeltaEstimation = request->get_query_parameter("compactionPeriodsizeDeltaEstimation", 0);
			const bool compactionPerioddisableEstimation = request->get_query_parameter("compactionPerioddisableEstimation", );
			const int32_t compactionPeriodretainedGenerations = request->get_query_parameter("compactionPeriodretainedGenerations", 0);
			const int32_t compactionPeriodmemoryThreshold = request->get_query_parameter("compactionPeriodmemoryThreshold", 0);
			const int32_t compactionPeriodprogressLog = request->get_query_parameter("compactionPeriodprogressLog", 0);
			const bool standby = request->get_query_parameter("standby", );
			const bool customBlobStore = request->get_query_parameter("customBlobStore", );
			const bool customSegmentStore = request->get_query_parameter("customSegmentStore", );
			const bool splitPersistence = request->get_query_parameter("splitPersistence", );
			const std::string repositoryPeriodbackupPerioddir = request->get_query_parameter("repositoryPeriodbackupPerioddir", "");
			const int32_t blobGcMaxAgeInSecs = request->get_query_parameter("blobGcMaxAgeInSecs", 0);
			const int32_t blobTrackSnapshotIntervalInSecs = request->get_query_parameter("blobTrackSnapshotIntervalInSecs", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.segment.standby.store.StandbyStoreServiceResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.segment.standby.store.StandbyStoreServiceResource()
{
	this->set_path("/system/console/configMgr/org.apache.jackrabbit.oak.segment.standby.store.StandbyStoreService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.segment.standby.store.StandbyStoreServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.segment.standby.store.StandbyStoreServiceResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.segment.standby.store.StandbyStoreServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.segment.standby.store.StandbyStoreServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool orgPeriodapachePeriodslingPeriodinstallerPeriodconfigurationPeriodpersist = request->get_query_parameter("orgPeriodapachePeriodslingPeriodinstallerPeriodconfigurationPeriodpersist", );
			const std::string mode = request->get_query_parameter("mode", "");
			const int32_t port = request->get_query_parameter("port", 0);
			const std::string primaryPeriodhost = request->get_query_parameter("primaryPeriodhost", "");
			const int32_t interval = request->get_query_parameter("interval", 0);
			const bool secure = request->get_query_parameter("secure", );
			const int32_t standbyPeriodreadtimeout = request->get_query_parameter("standbyPeriodreadtimeout", 0);
			const bool standbyPeriodautoclean = request->get_query_parameter("standbyPeriodautoclean", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.authentication.external.impl.DefaultSyncHandlerResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.authentication.external.impl.DefaultSyncHandlerResource()
{
	this->set_path("/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.DefaultSyncHandler/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.authentication.external.impl.DefaultSyncHandlerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.authentication.external.impl.DefaultSyncHandlerResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.authentication.external.impl.DefaultSyncHandlerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.authentication.external.impl.DefaultSyncHandlerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string handlerPeriodname = request->get_query_parameter("handlerPeriodname", "");
			const std::string userPeriodexpirationTime = request->get_query_parameter("userPeriodexpirationTime", "");
			const std::string userPeriodpathPrefix = request->get_query_parameter("userPeriodpathPrefix", "");
			const std::string userPeriodmembershipExpTime = request->get_query_parameter("userPeriodmembershipExpTime", "");
			const int32_t userPeriodmembershipNestingDepth = request->get_query_parameter("userPeriodmembershipNestingDepth", 0);
			const bool userPerioddynamicMembership = request->get_query_parameter("userPerioddynamicMembership", );
			const bool userPerioddisableMissing = request->get_query_parameter("userPerioddisableMissing", );
			const std::string groupPeriodexpirationTime = request->get_query_parameter("groupPeriodexpirationTime", "");
			const std::string groupPeriodpathPrefix = request->get_query_parameter("groupPeriodpathPrefix", "");
			const bool enableRFC7613UsercaseMappedProfile = request->get_query_parameter("enableRFC7613UsercaseMappedProfile", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.authentication.external.impl.ExternalLoginModuleFactoryResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.authentication.external.impl.ExternalLoginModuleFactoryResource()
{
	this->set_path("/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.ExternalLoginModuleFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.authentication.external.impl.ExternalLoginModuleFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.authentication.external.impl.ExternalLoginModuleFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.authentication.external.impl.ExternalLoginModuleFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.authentication.external.impl.ExternalLoginModuleFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t jaasPeriodranking = request->get_query_parameter("jaasPeriodranking", 0);
			const std::string jaasPeriodcontrolFlag = request->get_query_parameter("jaasPeriodcontrolFlag", "");
			const std::string jaasPeriodrealmName = request->get_query_parameter("jaasPeriodrealmName", "");
			const std::string idpPeriodname = request->get_query_parameter("idpPeriodname", "");
			const std::string syncPeriodhandlerName = request->get_query_parameter("syncPeriodhandlerName", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.authentication.external.impl.principal.ExternalPrincipalConfigurationResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.authentication.external.impl.principal.ExternalPrincipalConfigurationResource()
{
	this->set_path("/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.principal.ExternalPrincipalConfiguration/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.authentication.external.impl.principal.ExternalPrincipalConfigurationResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.authentication.external.impl.principal.ExternalPrincipalConfigurationResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.authentication.external.impl.principal.ExternalPrincipalConfigurationResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.authentication.external.impl.principal.ExternalPrincipalConfigurationResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool protectExternalId = request->get_query_parameter("protectExternalId", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugConfigurationResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugConfigurationResource()
{
	this->set_path("/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugConfiguration/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugConfigurationResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugConfigurationResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugConfigurationResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugConfigurationResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool cugEnabled = request->get_query_parameter("cugEnabled", );
			const int32_t configurationRanking = request->get_query_parameter("configurationRanking", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugExcludeImplResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugExcludeImplResource()
{
	this->set_path("/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugExcludeImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugExcludeImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugExcludeImplResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugExcludeImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugExcludeImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.user.action.DefaultAuthorizableActionProviderResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.user.action.DefaultAuthorizableActionProviderResource()
{
	this->set_path("/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.user.action.DefaultAuthorizableActionProvider/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.user.action.DefaultAuthorizableActionProviderResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.user.action.DefaultAuthorizableActionProviderResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.user.action.DefaultAuthorizableActionProviderResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.oak.spi.security.user.action.DefaultAuthorizableActionProviderResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string enabledActions = request->get_query_parameter("enabledActions", "");
			const std::string constraint = request->get_query_parameter("constraint", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.vault.packaging.impl.PackagingImplResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.vault.packaging.impl.PackagingImplResource()
{
	this->set_path("/system/console/configMgr/org.apache.jackrabbit.vault.packaging.impl.PackagingImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.vault.packaging.impl.PackagingImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.vault.packaging.impl.PackagingImplResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.vault.packaging.impl.PackagingImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.vault.packaging.impl.PackagingImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.vault.packaging.registry.impl.FSPackageRegistryResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.vault.packaging.registry.impl.FSPackageRegistryResource()
{
	this->set_path("/system/console/configMgr/org.apache.jackrabbit.vault.packaging.registry.impl.FSPackageRegistry/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.vault.packaging.registry.impl.FSPackageRegistryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.vault.packaging.registry.impl.FSPackageRegistryResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.vault.packaging.registry.impl.FSPackageRegistryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.jackrabbit.vault.packaging.registry.impl.FSPackageRegistryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string homePath = request->get_query_parameter("homePath", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.auth.core.impl.LogoutServletResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.auth.core.impl.LogoutServletResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.auth.core.impl.LogoutServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.auth.core.impl.LogoutServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.auth.core.impl.LogoutServletResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.auth.core.impl.LogoutServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.auth.core.impl.LogoutServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string slingPeriodservletPeriodpaths = request->get_query_parameter("slingPeriodservletPeriodpaths", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.ConfigurationBindingsValueProviderResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.ConfigurationBindingsValueProviderResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationBindingsValueProvider/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.ConfigurationBindingsValueProviderResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.ConfigurationBindingsValueProviderResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.ConfigurationBindingsValueProviderResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.ConfigurationBindingsValueProviderResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool enabled = request->get_query_parameter("enabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.ConfigurationResolverImplResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.ConfigurationResolverImplResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationResolverImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.ConfigurationResolverImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.ConfigurationResolverImplResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.ConfigurationResolverImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.ConfigurationResolverImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.def.DefaultConfigurationInheritanceStrategyResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.def.DefaultConfigurationInheritanceStrategyResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationInheritanceStrategy/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.def.DefaultConfigurationInheritanceStrategyResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.def.DefaultConfigurationInheritanceStrategyResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.def.DefaultConfigurationInheritanceStrategyResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.def.DefaultConfigurationInheritanceStrategyResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool enabled = request->get_query_parameter("enabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.def.DefaultConfigurationPersistenceStrategyResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.def.DefaultConfigurationPersistenceStrategyResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationPersistenceStrategy/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.def.DefaultConfigurationPersistenceStrategyResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.def.DefaultConfigurationPersistenceStrategyResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.def.DefaultConfigurationPersistenceStrategyResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.def.DefaultConfigurationPersistenceStrategyResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool enabled = request->get_query_parameter("enabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.override.OsgiConfigurationOverrideProviderResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.override.OsgiConfigurationOverrideProviderResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.caconfig.impl.override.OsgiConfigurationOverrideProvider/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.override.OsgiConfigurationOverrideProviderResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.override.OsgiConfigurationOverrideProviderResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.override.OsgiConfigurationOverrideProviderResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.override.OsgiConfigurationOverrideProviderResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string description = request->get_query_parameter("description", "");
			const bool enabled = request->get_query_parameter("enabled", );
			const int32_t servicePeriodranking = request->get_query_parameter("servicePeriodranking", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.override.SystemPropertyConfigurationOverrideProviderResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.override.SystemPropertyConfigurationOverrideProviderResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.caconfig.impl.override.SystemPropertyConfigurationOverrideProvider/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.override.SystemPropertyConfigurationOverrideProviderResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.override.SystemPropertyConfigurationOverrideProviderResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.override.SystemPropertyConfigurationOverrideProviderResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.impl.override.SystemPropertyConfigurationOverrideProviderResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool enabled = request->get_query_parameter("enabled", );
			const int32_t servicePeriodranking = request->get_query_parameter("servicePeriodranking", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.management.impl.ConfigurationManagementSettingsImplResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.management.impl.ConfigurationManagementSettingsImplResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.caconfig.management.impl.ConfigurationManagementSettingsImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.management.impl.ConfigurationManagementSettingsImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.management.impl.ConfigurationManagementSettingsImplResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.management.impl.ConfigurationManagementSettingsImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.management.impl.ConfigurationManagementSettingsImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.resource.impl.def.DefaultConfigurationResourceResolvingStrategyResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.resource.impl.def.DefaultConfigurationResourceResolvingStrategyResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultConfigurationResourceResolvingStrategy/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.resource.impl.def.DefaultConfigurationResourceResolvingStrategyResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.resource.impl.def.DefaultConfigurationResourceResolvingStrategyResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.resource.impl.def.DefaultConfigurationResourceResolvingStrategyResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.resource.impl.def.DefaultConfigurationResourceResolvingStrategyResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool enabled = request->get_query_parameter("enabled", );
			const std::string configPath = request->get_query_parameter("configPath", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.resource.impl.def.DefaultContextPathStrategyResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.resource.impl.def.DefaultContextPathStrategyResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultContextPathStrategy/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.resource.impl.def.DefaultContextPathStrategyResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.resource.impl.def.DefaultContextPathStrategyResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.resource.impl.def.DefaultContextPathStrategyResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.caconfig.resource.impl.def.DefaultContextPathStrategyResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool enabled = request->get_query_parameter("enabled", );
			const int32_t servicePeriodranking = request->get_query_parameter("servicePeriodranking", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.html.internal.TagsoupHtmlParserResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.html.internal.TagsoupHtmlParserResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.commons.html.internal.TagsoupHtmlParser/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.html.internal.TagsoupHtmlParserResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.html.internal.TagsoupHtmlParserResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.html.internal.TagsoupHtmlParserResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.html.internal.TagsoupHtmlParserResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.log.LogManagerResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.log.LogManagerResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.commons.log.LogManager/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.log.LogManagerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.log.LogManagerResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.log.LogManagerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.log.LogManagerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodlevel = request->get_query_parameter("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodlevel", "");
			const std::string orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile = request->get_query_parameter("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile", "");
			const int32_t orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodnumber = request->get_query_parameter("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodnumber", 0);
			const std::string orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodsize = request->get_query_parameter("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodsize", "");
			const std::string orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpattern = request->get_query_parameter("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpattern", "");
			const std::string orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodconfigurationFile = request->get_query_parameter("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodconfigurationFile", "");
			const bool orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpackagingDataEnabled = request->get_query_parameter("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpackagingDataEnabled", );
			const int32_t orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodmaxCallerDataDepth = request->get_query_parameter("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodmaxCallerDataDepth", 0);
			const int32_t orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodmaxOldFileCountInDump = request->get_query_parameter("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodmaxOldFileCountInDump", 0);
			const int32_t orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodnumOfLines = request->get_query_parameter("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodnumOfLines", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.log.LogManager.factory.configResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.log.LogManager.factory.configResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.config/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.log.LogManager.factory.configResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.log.LogManager.factory.configResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.log.LogManager.factory.configResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.log.LogManager.factory.configResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodlevel = request->get_query_parameter("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodlevel", "");
			const std::string orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile = request->get_query_parameter("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile", "");
			const std::string orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpattern = request->get_query_parameter("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpattern", "");
			const bool orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodadditiv = request->get_query_parameter("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodadditiv", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.log.LogManager.factory.writerResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.log.LogManager.factory.writerResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.writer/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.log.LogManager.factory.writerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.log.LogManager.factory.writerResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.log.LogManager.factory.writerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.log.LogManager.factory.writerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile = request->get_query_parameter("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile", "");
			const int32_t orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodnumber = request->get_query_parameter("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodnumber", 0);
			const std::string orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodsize = request->get_query_parameter("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodsize", "");
			const bool orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodbuffered = request->get_query_parameter("orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodbuffered", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.metrics.internal.LogReporterResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.metrics.internal.LogReporterResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.commons.metrics.internal.LogReporter/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.metrics.internal.LogReporterResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.metrics.internal.LogReporterResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.metrics.internal.LogReporterResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.metrics.internal.LogReporterResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t period = request->get_query_parameter("period", 0);
			const std::string timeUnit = request->get_query_parameter("timeUnit", "");
			const std::string level = request->get_query_parameter("level", "");
			const std::string loggerName = request->get_query_parameter("loggerName", "");
			const std::string prefix = request->get_query_parameter("prefix", "");
			const std::string pattern = request->get_query_parameter("pattern", "");
			const std::string registryName = request->get_query_parameter("registryName", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.metrics.rrd4j.impl.CodahaleMetricsReporterResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.metrics.rrd4j.impl.CodahaleMetricsReporterResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.commons.metrics.rrd4j.impl.CodahaleMetricsReporter/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.metrics.rrd4j.impl.CodahaleMetricsReporterResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.metrics.rrd4j.impl.CodahaleMetricsReporterResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.metrics.rrd4j.impl.CodahaleMetricsReporterResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.metrics.rrd4j.impl.CodahaleMetricsReporterResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t step = request->get_query_parameter("step", 0);
			const std::string path = request->get_query_parameter("path", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.mime.internal.MimeTypeServiceImplResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.mime.internal.MimeTypeServiceImplResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.commons.mime.internal.MimeTypeServiceImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.mime.internal.MimeTypeServiceImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.mime.internal.MimeTypeServiceImplResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.mime.internal.MimeTypeServiceImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.mime.internal.MimeTypeServiceImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.scheduler.impl.QuartzSchedulerResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.scheduler.impl.QuartzSchedulerResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.commons.scheduler.impl.QuartzScheduler/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.scheduler.impl.QuartzSchedulerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.scheduler.impl.QuartzSchedulerResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.scheduler.impl.QuartzSchedulerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.scheduler.impl.QuartzSchedulerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string poolName = request->get_query_parameter("poolName", "");
			const bool schedulerPerioduseleaderforsingle = request->get_query_parameter("schedulerPerioduseleaderforsingle", );
			const int32_t slowThresholdMillis = request->get_query_parameter("slowThresholdMillis", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.scheduler.impl.SchedulerHealthCheckResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.scheduler.impl.SchedulerHealthCheckResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.commons.scheduler.impl.SchedulerHealthCheck/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.scheduler.impl.SchedulerHealthCheckResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.scheduler.impl.SchedulerHealthCheckResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.scheduler.impl.SchedulerHealthCheckResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.scheduler.impl.SchedulerHealthCheckResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t maxPeriodquartzJobPerioddurationPeriodacceptable = request->get_query_parameter("maxPeriodquartzJobPerioddurationPeriodacceptable", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.threads.impl.DefaultThreadPool.factoryResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.threads.impl.DefaultThreadPool.factoryResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.commons.threads.impl.DefaultThreadPool.factory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.threads.impl.DefaultThreadPool.factoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.threads.impl.DefaultThreadPool.factoryResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.threads.impl.DefaultThreadPool.factoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.commons.threads.impl.DefaultThreadPool.factoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string name = request->get_query_parameter("name", "");
			const int32_t minPoolSize = request->get_query_parameter("minPoolSize", 0);
			const int32_t maxPoolSize = request->get_query_parameter("maxPoolSize", 0);
			const int32_t queueSize = request->get_query_parameter("queueSize", 0);
			const int32_t maxThreadAge = request->get_query_parameter("maxThreadAge", 0);
			const int32_t keepAliveTime = request->get_query_parameter("keepAliveTime", 0);
			const std::string blockPolicy = request->get_query_parameter("blockPolicy", "");
			const bool shutdownGraceful = request->get_query_parameter("shutdownGraceful", );
			const bool daemon = request->get_query_parameter("daemon", );
			const int32_t shutdownWaitTime = request->get_query_parameter("shutdownWaitTime", 0);
			const std::string priority = request->get_query_parameter("priority", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.datasource.DataSourceFactoryResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.datasource.DataSourceFactoryResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.datasource.DataSourceFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.datasource.DataSourceFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.datasource.DataSourceFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.datasource.DataSourceFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.datasource.DataSourceFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string datasourcePeriodname = request->get_query_parameter("datasourcePeriodname", "");
			const std::string datasourcePeriodsvcPeriodpropPeriodname = request->get_query_parameter("datasourcePeriodsvcPeriodpropPeriodname", "");
			const std::string driverClassName = request->get_query_parameter("driverClassName", "");
			const std::string url = request->get_query_parameter("url", "");
			const std::string username = request->get_query_parameter("username", "");
			const std::string password = request->get_query_parameter("password", "");
			const std::string defaultAutoCommit = request->get_query_parameter("defaultAutoCommit", "");
			const std::string defaultReadOnly = request->get_query_parameter("defaultReadOnly", "");
			const std::string defaultTransactionIsolation = request->get_query_parameter("defaultTransactionIsolation", "");
			const std::string defaultCatalog = request->get_query_parameter("defaultCatalog", "");
			const int32_t maxActive = request->get_query_parameter("maxActive", 0);
			const int32_t maxIdle = request->get_query_parameter("maxIdle", 0);
			const int32_t minIdle = request->get_query_parameter("minIdle", 0);
			const int32_t initialSize = request->get_query_parameter("initialSize", 0);
			const int32_t maxWait = request->get_query_parameter("maxWait", 0);
			const int32_t maxAge = request->get_query_parameter("maxAge", 0);
			const bool testOnBorrow = request->get_query_parameter("testOnBorrow", );
			const bool testOnReturn = request->get_query_parameter("testOnReturn", );
			const bool testWhileIdle = request->get_query_parameter("testWhileIdle", );
			const std::string validationQuery = request->get_query_parameter("validationQuery", "");
			const int32_t validationQueryTimeout = request->get_query_parameter("validationQueryTimeout", 0);
			const int32_t timeBetweenEvictionRunsMillis = request->get_query_parameter("timeBetweenEvictionRunsMillis", 0);
			const int32_t minEvictableIdleTimeMillis = request->get_query_parameter("minEvictableIdleTimeMillis", 0);
			const std::string connectionProperties = request->get_query_parameter("connectionProperties", "");
			const std::string initSQL = request->get_query_parameter("initSQL", "");
			const std::string jdbcInterceptors = request->get_query_parameter("jdbcInterceptors", "");
			const int32_t validationInterval = request->get_query_parameter("validationInterval", 0);
			const bool logValidationErrors = request->get_query_parameter("logValidationErrors", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.datasource.JNDIDataSourceFactoryResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.datasource.JNDIDataSourceFactoryResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.datasource.JNDIDataSourceFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.datasource.JNDIDataSourceFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.datasource.JNDIDataSourceFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.datasource.JNDIDataSourceFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.datasource.JNDIDataSourceFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string datasourcePeriodname = request->get_query_parameter("datasourcePeriodname", "");
			const std::string datasourcePeriodsvcPeriodpropPeriodname = request->get_query_parameter("datasourcePeriodsvcPeriodpropPeriodname", "");
			const std::string datasourcePeriodjndiPeriodname = request->get_query_parameter("datasourcePeriodjndiPeriodname", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.discovery.oak.ConfigResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.discovery.oak.ConfigResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.discovery.oak.Config/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.discovery.oak.ConfigResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.discovery.oak.ConfigResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.discovery.oak.ConfigResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.discovery.oak.ConfigResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t connectorPingTimeout = request->get_query_parameter("connectorPingTimeout", 0);
			const int32_t connectorPingInterval = request->get_query_parameter("connectorPingInterval", 0);
			const int32_t discoveryLiteCheckInterval = request->get_query_parameter("discoveryLiteCheckInterval", 0);
			const int32_t clusterSyncServiceTimeout = request->get_query_parameter("clusterSyncServiceTimeout", 0);
			const int32_t clusterSyncServiceInterval = request->get_query_parameter("clusterSyncServiceInterval", 0);
			const bool enableSyncToken = request->get_query_parameter("enableSyncToken", );
			const int32_t minEventDelay = request->get_query_parameter("minEventDelay", 0);
			const int32_t socketConnectTimeout = request->get_query_parameter("socketConnectTimeout", 0);
			const int32_t soTimeout = request->get_query_parameter("soTimeout", 0);
			const bool autoStopLocalLoopEnabled = request->get_query_parameter("autoStopLocalLoopEnabled", );
			const bool gzipConnectorRequestsEnabled = request->get_query_parameter("gzipConnectorRequestsEnabled", );
			const bool hmacEnabled = request->get_query_parameter("hmacEnabled", );
			const bool enableEncryption = request->get_query_parameter("enableEncryption", );
			const std::string sharedKey = request->get_query_parameter("sharedKey", "");
			const int32_t hmacSharedKeyTTL = request->get_query_parameter("hmacSharedKeyTTL", 0);
			const std::string backoffStandbyFactor = request->get_query_parameter("backoffStandbyFactor", "");
			const std::string backoffStableFactor = request->get_query_parameter("backoffStableFactor", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.discovery.oak.SynchronizedClocksHealthCheckResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.discovery.oak.SynchronizedClocksHealthCheckResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.discovery.oak.SynchronizedClocksHealthCheck/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.discovery.oak.SynchronizedClocksHealthCheckResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.discovery.oak.SynchronizedClocksHealthCheckResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.discovery.oak.SynchronizedClocksHealthCheckResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.discovery.oak.SynchronizedClocksHealthCheckResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string hcPeriodname = request->get_query_parameter("hcPeriodname", "");
			const std::string hcPeriodmbeanPeriodname = request->get_query_parameter("hcPeriodmbeanPeriodname", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.ForwardDistributionAgentFactoryResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.ForwardDistributionAgentFactoryResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.distribution.agent.impl.ForwardDistributionAgentFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.ForwardDistributionAgentFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.ForwardDistributionAgentFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.ForwardDistributionAgentFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.ForwardDistributionAgentFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string name = request->get_query_parameter("name", "");
			const std::string title = request->get_query_parameter("title", "");
			const std::string details = request->get_query_parameter("details", "");
			const bool enabled = request->get_query_parameter("enabled", );
			const std::string serviceName = request->get_query_parameter("serviceName", "");
			const std::string logPeriodlevel = request->get_query_parameter("logPeriodlevel", "");
			const bool queuePeriodprocessingPeriodenabled = request->get_query_parameter("queuePeriodprocessingPeriodenabled", );
			const std::string retryPeriodstrategy = request->get_query_parameter("retryPeriodstrategy", "");
			const int32_t retryPeriodattempts = request->get_query_parameter("retryPeriodattempts", 0);
			const std::string requestAuthorizationStrategyPeriodtarget = request->get_query_parameter("requestAuthorizationStrategyPeriodtarget", "");
			const std::string transportSecretProviderPeriodtarget = request->get_query_parameter("transportSecretProviderPeriodtarget", "");
			const std::string packageBuilderPeriodtarget = request->get_query_parameter("packageBuilderPeriodtarget", "");
			const std::string triggersPeriodtarget = request->get_query_parameter("triggersPeriodtarget", "");
			const std::string queuePeriodprovider = request->get_query_parameter("queuePeriodprovider", "");
			const bool asyncPerioddelivery = request->get_query_parameter("asyncPerioddelivery", );
			const int32_t httpPeriodconnPeriodtimeout = request->get_query_parameter("httpPeriodconnPeriodtimeout", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.PrivilegeDistributionRequestAuthorizationStrategyFactoryResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.PrivilegeDistributionRequestAuthorizationStrategyFactoryResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.distribution.agent.impl.PrivilegeDistributionRequestAuthorizationStrategyFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.PrivilegeDistributionRequestAuthorizationStrategyFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.PrivilegeDistributionRequestAuthorizationStrategyFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.PrivilegeDistributionRequestAuthorizationStrategyFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.PrivilegeDistributionRequestAuthorizationStrategyFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string name = request->get_query_parameter("name", "");
			const std::string jcrPrivilege = request->get_query_parameter("jcrPrivilege", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.QueueDistributionAgentFactoryResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.QueueDistributionAgentFactoryResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.distribution.agent.impl.QueueDistributionAgentFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.QueueDistributionAgentFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.QueueDistributionAgentFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.QueueDistributionAgentFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.QueueDistributionAgentFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string name = request->get_query_parameter("name", "");
			const std::string title = request->get_query_parameter("title", "");
			const std::string details = request->get_query_parameter("details", "");
			const bool enabled = request->get_query_parameter("enabled", );
			const std::string serviceName = request->get_query_parameter("serviceName", "");
			const std::string logPeriodlevel = request->get_query_parameter("logPeriodlevel", "");
			const std::string requestAuthorizationStrategyPeriodtarget = request->get_query_parameter("requestAuthorizationStrategyPeriodtarget", "");
			const std::string queueProviderFactoryPeriodtarget = request->get_query_parameter("queueProviderFactoryPeriodtarget", "");
			const std::string packageBuilderPeriodtarget = request->get_query_parameter("packageBuilderPeriodtarget", "");
			const std::string triggersPeriodtarget = request->get_query_parameter("triggersPeriodtarget", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.ReverseDistributionAgentFactoryResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.ReverseDistributionAgentFactoryResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.distribution.agent.impl.ReverseDistributionAgentFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.ReverseDistributionAgentFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.ReverseDistributionAgentFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.ReverseDistributionAgentFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.ReverseDistributionAgentFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string name = request->get_query_parameter("name", "");
			const std::string title = request->get_query_parameter("title", "");
			const std::string details = request->get_query_parameter("details", "");
			const bool enabled = request->get_query_parameter("enabled", );
			const std::string serviceName = request->get_query_parameter("serviceName", "");
			const std::string logPeriodlevel = request->get_query_parameter("logPeriodlevel", "");
			const bool queuePeriodprocessingPeriodenabled = request->get_query_parameter("queuePeriodprocessingPeriodenabled", );
			const int32_t pullPerioditems = request->get_query_parameter("pullPerioditems", 0);
			const int32_t httpPeriodconnPeriodtimeout = request->get_query_parameter("httpPeriodconnPeriodtimeout", 0);
			const std::string requestAuthorizationStrategyPeriodtarget = request->get_query_parameter("requestAuthorizationStrategyPeriodtarget", "");
			const std::string transportSecretProviderPeriodtarget = request->get_query_parameter("transportSecretProviderPeriodtarget", "");
			const std::string packageBuilderPeriodtarget = request->get_query_parameter("packageBuilderPeriodtarget", "");
			const std::string triggersPeriodtarget = request->get_query_parameter("triggersPeriodtarget", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.SimpleDistributionAgentFactoryResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.SimpleDistributionAgentFactoryResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.distribution.agent.impl.SimpleDistributionAgentFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.SimpleDistributionAgentFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.SimpleDistributionAgentFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.SimpleDistributionAgentFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.SimpleDistributionAgentFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string name = request->get_query_parameter("name", "");
			const std::string title = request->get_query_parameter("title", "");
			const std::string details = request->get_query_parameter("details", "");
			const bool enabled = request->get_query_parameter("enabled", );
			const std::string serviceName = request->get_query_parameter("serviceName", "");
			const std::string logPeriodlevel = request->get_query_parameter("logPeriodlevel", "");
			const bool queuePeriodprocessingPeriodenabled = request->get_query_parameter("queuePeriodprocessingPeriodenabled", );
			const std::string packageExporterPeriodtarget = request->get_query_parameter("packageExporterPeriodtarget", "");
			const std::string packageImporterPeriodtarget = request->get_query_parameter("packageImporterPeriodtarget", "");
			const std::string requestAuthorizationStrategyPeriodtarget = request->get_query_parameter("requestAuthorizationStrategyPeriodtarget", "");
			const std::string triggersPeriodtarget = request->get_query_parameter("triggersPeriodtarget", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.SyncDistributionAgentFactoryResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.SyncDistributionAgentFactoryResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.distribution.agent.impl.SyncDistributionAgentFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.SyncDistributionAgentFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.SyncDistributionAgentFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.SyncDistributionAgentFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.agent.impl.SyncDistributionAgentFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string name = request->get_query_parameter("name", "");
			const std::string title = request->get_query_parameter("title", "");
			const std::string details = request->get_query_parameter("details", "");
			const bool enabled = request->get_query_parameter("enabled", );
			const std::string serviceName = request->get_query_parameter("serviceName", "");
			const std::string logPeriodlevel = request->get_query_parameter("logPeriodlevel", "");
			const bool queuePeriodprocessingPeriodenabled = request->get_query_parameter("queuePeriodprocessingPeriodenabled", );
			const std::string retryPeriodstrategy = request->get_query_parameter("retryPeriodstrategy", "");
			const int32_t retryPeriodattempts = request->get_query_parameter("retryPeriodattempts", 0);
			const int32_t pullPerioditems = request->get_query_parameter("pullPerioditems", 0);
			const int32_t httpPeriodconnPeriodtimeout = request->get_query_parameter("httpPeriodconnPeriodtimeout", 0);
			const std::string requestAuthorizationStrategyPeriodtarget = request->get_query_parameter("requestAuthorizationStrategyPeriodtarget", "");
			const std::string transportSecretProviderPeriodtarget = request->get_query_parameter("transportSecretProviderPeriodtarget", "");
			const std::string packageBuilderPeriodtarget = request->get_query_parameter("packageBuilderPeriodtarget", "");
			const std::string triggersPeriodtarget = request->get_query_parameter("triggersPeriodtarget", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.monitor.DistributionQueueHealthCheckResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.monitor.DistributionQueueHealthCheckResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.distribution.monitor.DistributionQueueHealthCheck/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.monitor.DistributionQueueHealthCheckResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.monitor.DistributionQueueHealthCheckResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.monitor.DistributionQueueHealthCheckResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.monitor.DistributionQueueHealthCheckResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string hcPeriodname = request->get_query_parameter("hcPeriodname", "");
			const std::string hcPeriodmbeanPeriodname = request->get_query_parameter("hcPeriodmbeanPeriodname", "");
			const int32_t numberOfRetriesAllowed = request->get_query_parameter("numberOfRetriesAllowed", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.exporter.AgentDistributionPackageExporterFactoryResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.exporter.AgentDistributionPackageExporterFactoryResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.AgentDistributionPackageExporterFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.exporter.AgentDistributionPackageExporterFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.exporter.AgentDistributionPackageExporterFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.exporter.AgentDistributionPackageExporterFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.exporter.AgentDistributionPackageExporterFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string name = request->get_query_parameter("name", "");
			const std::string queue = request->get_query_parameter("queue", "");
			const bool dropPeriodinvalidPerioditems = request->get_query_parameter("dropPeriodinvalidPerioditems", );
			const std::string agentPeriodtarget = request->get_query_parameter("agentPeriodtarget", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.exporter.LocalDistributionPackageExporterFactoryResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.exporter.LocalDistributionPackageExporterFactoryResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.LocalDistributionPackageExporterFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.exporter.LocalDistributionPackageExporterFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.exporter.LocalDistributionPackageExporterFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.exporter.LocalDistributionPackageExporterFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.exporter.LocalDistributionPackageExporterFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string name = request->get_query_parameter("name", "");
			const std::string packageBuilderPeriodtarget = request->get_query_parameter("packageBuilderPeriodtarget", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.exporter.RemoteDistributionPackageExporterFactoryResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.exporter.RemoteDistributionPackageExporterFactoryResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.RemoteDistributionPackageExporterFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.exporter.RemoteDistributionPackageExporterFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.exporter.RemoteDistributionPackageExporterFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.exporter.RemoteDistributionPackageExporterFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.exporter.RemoteDistributionPackageExporterFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string name = request->get_query_parameter("name", "");
			const int32_t pullPerioditems = request->get_query_parameter("pullPerioditems", 0);
			const std::string packageBuilderPeriodtarget = request->get_query_parameter("packageBuilderPeriodtarget", "");
			const std::string transportSecretProviderPeriodtarget = request->get_query_parameter("transportSecretProviderPeriodtarget", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.importer.LocalDistributionPackageImporterFactoryResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.importer.LocalDistributionPackageImporterFactoryResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.LocalDistributionPackageImporterFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.importer.LocalDistributionPackageImporterFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.importer.LocalDistributionPackageImporterFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.importer.LocalDistributionPackageImporterFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.importer.LocalDistributionPackageImporterFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string name = request->get_query_parameter("name", "");
			const std::string packageBuilderPeriodtarget = request->get_query_parameter("packageBuilderPeriodtarget", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.importer.RemoteDistributionPackageImporterFactoryResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.importer.RemoteDistributionPackageImporterFactoryResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RemoteDistributionPackageImporterFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.importer.RemoteDistributionPackageImporterFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.importer.RemoteDistributionPackageImporterFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.importer.RemoteDistributionPackageImporterFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.importer.RemoteDistributionPackageImporterFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string name = request->get_query_parameter("name", "");
			const std::string transportSecretProviderPeriodtarget = request->get_query_parameter("transportSecretProviderPeriodtarget", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.importer.RepositoryDistributionPackageImporterFactoryResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.importer.RepositoryDistributionPackageImporterFactoryResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RepositoryDistributionPackageImporterFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.importer.RepositoryDistributionPackageImporterFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.importer.RepositoryDistributionPackageImporterFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.importer.RepositoryDistributionPackageImporterFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.packaging.impl.importer.RepositoryDistributionPackageImporterFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string name = request->get_query_parameter("name", "");
			const std::string servicePeriodname = request->get_query_parameter("servicePeriodname", "");
			const std::string path = request->get_query_parameter("path", "");
			const std::string privilegePeriodname = request->get_query_parameter("privilegePeriodname", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.resources.impl.DistributionConfigurationResourceProviderFactoryResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.resources.impl.DistributionConfigurationResourceProviderFactoryResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionConfigurationResourceProviderFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.resources.impl.DistributionConfigurationResourceProviderFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.resources.impl.DistributionConfigurationResourceProviderFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.resources.impl.DistributionConfigurationResourceProviderFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.resources.impl.DistributionConfigurationResourceProviderFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string providerPeriodroots = request->get_query_parameter("providerPeriodroots", "");
			const std::string kind = request->get_query_parameter("kind", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.resources.impl.DistributionServiceResourceProviderFactoryResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.resources.impl.DistributionServiceResourceProviderFactoryResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionServiceResourceProviderFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.resources.impl.DistributionServiceResourceProviderFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.resources.impl.DistributionServiceResourceProviderFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.resources.impl.DistributionServiceResourceProviderFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.resources.impl.DistributionServiceResourceProviderFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string providerPeriodroots = request->get_query_parameter("providerPeriodroots", "");
			const std::string kind = request->get_query_parameter("kind", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.serialization.impl.DistributionPackageBuilderFactoryResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.serialization.impl.DistributionPackageBuilderFactoryResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.distribution.serialization.impl.DistributionPackageBuilderFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.serialization.impl.DistributionPackageBuilderFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.serialization.impl.DistributionPackageBuilderFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.serialization.impl.DistributionPackageBuilderFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.serialization.impl.DistributionPackageBuilderFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string name = request->get_query_parameter("name", "");
			const std::string type = request->get_query_parameter("type", "");
			const std::string formatPeriodtarget = request->get_query_parameter("formatPeriodtarget", "");
			const std::string tempFsFolder = request->get_query_parameter("tempFsFolder", "");
			const int32_t fileThreshold = request->get_query_parameter("fileThreshold", 0);
			const std::string memoryUnit = request->get_query_parameter("memoryUnit", "");
			const bool useOffHeapMemory = request->get_query_parameter("useOffHeapMemory", );
			const std::string digestAlgorithm = request->get_query_parameter("digestAlgorithm", "");
			const int32_t monitoringQueueSize = request->get_query_parameter("monitoringQueueSize", 0);
			const int32_t cleanupDelay = request->get_query_parameter("cleanupDelay", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.serialization.impl.vlt.VaultDistributionPackageBuilderFactoryResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.serialization.impl.vlt.VaultDistributionPackageBuilderFactoryResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.distribution.serialization.impl.vlt.VaultDistributionPackageBuilderFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.serialization.impl.vlt.VaultDistributionPackageBuilderFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.serialization.impl.vlt.VaultDistributionPackageBuilderFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.serialization.impl.vlt.VaultDistributionPackageBuilderFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.serialization.impl.vlt.VaultDistributionPackageBuilderFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string name = request->get_query_parameter("name", "");
			const std::string type = request->get_query_parameter("type", "");
			const std::string importMode = request->get_query_parameter("importMode", "");
			const std::string aclHandling = request->get_query_parameter("aclHandling", "");
			const std::string packagePeriodroots = request->get_query_parameter("packagePeriodroots", "");
			const std::string tempFsFolder = request->get_query_parameter("tempFsFolder", "");
			const bool useBinaryReferences = request->get_query_parameter("useBinaryReferences", );
			const int32_t autoSaveThreshold = request->get_query_parameter("autoSaveThreshold", 0);
			const int32_t cleanupDelay = request->get_query_parameter("cleanupDelay", 0);
			const int32_t fileThreshold = request->get_query_parameter("fileThreshold", 0);
			const std::string mEGABYTES = request->get_query_parameter("mEGABYTES", "");
			const bool useOffHeapMemory = request->get_query_parameter("useOffHeapMemory", );
			const std::string digestAlgorithm = request->get_query_parameter("digestAlgorithm", "");
			const int32_t monitoringQueueSize = request->get_query_parameter("monitoringQueueSize", 0);
			const bool strictImport = request->get_query_parameter("strictImport", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.transport.impl.UserCredentialsDistributionTransportSecretProviderResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.transport.impl.UserCredentialsDistributionTransportSecretProviderResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.distribution.transport.impl.UserCredentialsDistributionTransportSecretProvider/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.transport.impl.UserCredentialsDistributionTransportSecretProviderResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.transport.impl.UserCredentialsDistributionTransportSecretProviderResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.transport.impl.UserCredentialsDistributionTransportSecretProviderResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.transport.impl.UserCredentialsDistributionTransportSecretProviderResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string name = request->get_query_parameter("name", "");
			const std::string username = request->get_query_parameter("username", "");
			const std::string password = request->get_query_parameter("password", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.DistributionEventDistributeDistributionTriggerFactoryResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.DistributionEventDistributeDistributionTriggerFactoryResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.distribution.trigger.impl.DistributionEventDistributeDistributionTriggerFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.DistributionEventDistributeDistributionTriggerFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.DistributionEventDistributeDistributionTriggerFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.DistributionEventDistributeDistributionTriggerFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.DistributionEventDistributeDistributionTriggerFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string name = request->get_query_parameter("name", "");
			const std::string path = request->get_query_parameter("path", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.JcrEventDistributionTriggerFactoryResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.JcrEventDistributionTriggerFactoryResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.distribution.trigger.impl.JcrEventDistributionTriggerFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.JcrEventDistributionTriggerFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.JcrEventDistributionTriggerFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.JcrEventDistributionTriggerFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.JcrEventDistributionTriggerFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string name = request->get_query_parameter("name", "");
			const std::string path = request->get_query_parameter("path", "");
			const std::string serviceName = request->get_query_parameter("serviceName", "");
			const bool deep = request->get_query_parameter("deep", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.PersistedJcrEventDistributionTriggerFactoryResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.PersistedJcrEventDistributionTriggerFactoryResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.distribution.trigger.impl.PersistedJcrEventDistributionTriggerFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.PersistedJcrEventDistributionTriggerFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.PersistedJcrEventDistributionTriggerFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.PersistedJcrEventDistributionTriggerFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.PersistedJcrEventDistributionTriggerFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string name = request->get_query_parameter("name", "");
			const std::string path = request->get_query_parameter("path", "");
			const std::string serviceName = request->get_query_parameter("serviceName", "");
			const std::string nuggetsPath = request->get_query_parameter("nuggetsPath", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.RemoteEventDistributionTriggerFactoryResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.RemoteEventDistributionTriggerFactoryResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.distribution.trigger.impl.RemoteEventDistributionTriggerFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.RemoteEventDistributionTriggerFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.RemoteEventDistributionTriggerFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.RemoteEventDistributionTriggerFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.RemoteEventDistributionTriggerFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string name = request->get_query_parameter("name", "");
			const std::string endpoint = request->get_query_parameter("endpoint", "");
			const std::string transportSecretProviderPeriodtarget = request->get_query_parameter("transportSecretProviderPeriodtarget", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.ResourceEventDistributionTriggerFactoryResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.ResourceEventDistributionTriggerFactoryResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.distribution.trigger.impl.ResourceEventDistributionTriggerFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.ResourceEventDistributionTriggerFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.ResourceEventDistributionTriggerFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.ResourceEventDistributionTriggerFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.ResourceEventDistributionTriggerFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string name = request->get_query_parameter("name", "");
			const std::string path = request->get_query_parameter("path", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.ScheduledDistributionTriggerFactoryResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.ScheduledDistributionTriggerFactoryResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.distribution.trigger.impl.ScheduledDistributionTriggerFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.ScheduledDistributionTriggerFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.ScheduledDistributionTriggerFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.ScheduledDistributionTriggerFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.distribution.trigger.impl.ScheduledDistributionTriggerFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string name = request->get_query_parameter("name", "");
			const std::string path = request->get_query_parameter("path", "");
			const std::string seconds = request->get_query_parameter("seconds", "");
			const std::string serviceName = request->get_query_parameter("serviceName", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.impl.auth.SlingAuthenticatorResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.impl.auth.SlingAuthenticatorResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.engine.impl.auth.SlingAuthenticator/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.impl.auth.SlingAuthenticatorResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.impl.auth.SlingAuthenticatorResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.impl.auth.SlingAuthenticatorResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.impl.auth.SlingAuthenticatorResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect = request->get_query_parameter("osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect", "");
			const std::string osgiPeriodhttpPeriodwhiteboardPeriodlistener = request->get_query_parameter("osgiPeriodhttpPeriodwhiteboardPeriodlistener", "");
			const std::string authPeriodsudoPeriodcookie = request->get_query_parameter("authPeriodsudoPeriodcookie", "");
			const std::string authPeriodsudoPeriodparameter = request->get_query_parameter("authPeriodsudoPeriodparameter", "");
			const bool authPeriodannonymous = request->get_query_parameter("authPeriodannonymous", );
			const std::string slingPeriodauthPeriodanonymousPerioduser = request->get_query_parameter("slingPeriodauthPeriodanonymousPerioduser", "");
			const std::string slingPeriodauthPeriodanonymousPeriodpassword = request->get_query_parameter("slingPeriodauthPeriodanonymousPeriodpassword", "");
			const std::string authPeriodhttp = request->get_query_parameter("authPeriodhttp", "");
			const std::string authPeriodhttpPeriodrealm = request->get_query_parameter("authPeriodhttpPeriodrealm", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.impl.debug.RequestProgressTrackerLogFilterResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.impl.debug.RequestProgressTrackerLogFilterResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.engine.impl.debug.RequestProgressTrackerLogFilter/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.impl.debug.RequestProgressTrackerLogFilterResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.impl.debug.RequestProgressTrackerLogFilterResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.impl.debug.RequestProgressTrackerLogFilterResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.impl.debug.RequestProgressTrackerLogFilterResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t minDurationMs = request->get_query_parameter("minDurationMs", 0);
			const int32_t maxDurationMs = request->get_query_parameter("maxDurationMs", 0);
			const bool compactLogFormat = request->get_query_parameter("compactLogFormat", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.impl.log.RequestLoggerResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.impl.log.RequestLoggerResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.engine.impl.log.RequestLogger/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.impl.log.RequestLoggerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.impl.log.RequestLoggerResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.impl.log.RequestLoggerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.impl.log.RequestLoggerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string requestPeriodlogPeriodoutput = request->get_query_parameter("requestPeriodlogPeriodoutput", "");
			const int32_t requestPeriodlogPeriodoutputtype = request->get_query_parameter("requestPeriodlogPeriodoutputtype", 0);
			const bool requestPeriodlogPeriodenabled = request->get_query_parameter("requestPeriodlogPeriodenabled", );
			const std::string accessPeriodlogPeriodoutput = request->get_query_parameter("accessPeriodlogPeriodoutput", "");
			const int32_t accessPeriodlogPeriodoutputtype = request->get_query_parameter("accessPeriodlogPeriodoutputtype", 0);
			const bool accessPeriodlogPeriodenabled = request->get_query_parameter("accessPeriodlogPeriodenabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.impl.log.RequestLoggerServiceResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.impl.log.RequestLoggerServiceResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.engine.impl.log.RequestLoggerService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.impl.log.RequestLoggerServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.impl.log.RequestLoggerServiceResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.impl.log.RequestLoggerServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.impl.log.RequestLoggerServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string requestPeriodlogPeriodservicePeriodformat = request->get_query_parameter("requestPeriodlogPeriodservicePeriodformat", "");
			const std::string requestPeriodlogPeriodservicePeriodoutput = request->get_query_parameter("requestPeriodlogPeriodservicePeriodoutput", "");
			const int32_t requestPeriodlogPeriodservicePeriodoutputtype = request->get_query_parameter("requestPeriodlogPeriodservicePeriodoutputtype", 0);
			const bool requestPeriodlogPeriodservicePeriodonentry = request->get_query_parameter("requestPeriodlogPeriodservicePeriodonentry", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.impl.SlingMainServletResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.impl.SlingMainServletResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.engine.impl.SlingMainServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.impl.SlingMainServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.impl.SlingMainServletResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.impl.SlingMainServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.impl.SlingMainServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t slingPeriodmaxPeriodcalls = request->get_query_parameter("slingPeriodmaxPeriodcalls", 0);
			const int32_t slingPeriodmaxPeriodinclusions = request->get_query_parameter("slingPeriodmaxPeriodinclusions", 0);
			const bool slingPeriodtracePeriodallow = request->get_query_parameter("slingPeriodtracePeriodallow", );
			const int32_t slingPeriodmaxPeriodrecordPeriodrequests = request->get_query_parameter("slingPeriodmaxPeriodrecordPeriodrequests", 0);
			const std::string slingPeriodserverinfo = request->get_query_parameter("slingPeriodserverinfo", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.parametersResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.parametersResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.engine.parameters/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.parametersResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.parametersResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.parametersResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.engine.parametersResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string slingPerioddefaultPeriodparameterPeriodencoding = request->get_query_parameter("slingPerioddefaultPeriodparameterPeriodencoding", "");
			const int32_t slingPerioddefaultPeriodmaxPeriodparameters = request->get_query_parameter("slingPerioddefaultPeriodmaxPeriodparameters", 0);
			const std::string filePeriodlocation = request->get_query_parameter("filePeriodlocation", "");
			const int32_t filePeriodthreshold = request->get_query_parameter("filePeriodthreshold", 0);
			const int32_t filePeriodmax = request->get_query_parameter("filePeriodmax", 0);
			const int32_t requestPeriodmax = request->get_query_parameter("requestPeriodmax", 0);
			const bool slingPerioddefaultPeriodparameterPeriodcheckForAdditionalContainerParameters = request->get_query_parameter("slingPerioddefaultPeriodparameterPeriodcheckForAdditionalContainerParameters", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.event.impl.EventingThreadPoolResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.event.impl.EventingThreadPoolResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.event.impl.EventingThreadPool/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.event.impl.EventingThreadPoolResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.event.impl.EventingThreadPoolResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.event.impl.EventingThreadPoolResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.event.impl.EventingThreadPoolResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t minPoolSize = request->get_query_parameter("minPoolSize", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.event.impl.jobs.DefaultJobManagerResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.event.impl.jobs.DefaultJobManagerResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.event.impl.jobs.DefaultJobManager/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.event.impl.jobs.DefaultJobManagerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.event.impl.jobs.DefaultJobManagerResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.event.impl.jobs.DefaultJobManagerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.event.impl.jobs.DefaultJobManagerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string queuePeriodpriority = request->get_query_parameter("queuePeriodpriority", "");
			const int32_t queuePeriodretries = request->get_query_parameter("queuePeriodretries", 0);
			const int32_t queuePeriodretrydelay = request->get_query_parameter("queuePeriodretrydelay", 0);
			const int32_t queuePeriodmaxparallel = request->get_query_parameter("queuePeriodmaxparallel", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.event.impl.jobs.jcr.PersistenceHandlerResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.event.impl.jobs.jcr.PersistenceHandlerResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.event.impl.jobs.jcr.PersistenceHandler/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.event.impl.jobs.jcr.PersistenceHandlerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.event.impl.jobs.jcr.PersistenceHandlerResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.event.impl.jobs.jcr.PersistenceHandlerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.event.impl.jobs.jcr.PersistenceHandlerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool jobPeriodconsumermanagerPerioddisableDistribution = request->get_query_parameter("jobPeriodconsumermanagerPerioddisableDistribution", );
			const int32_t startupPerioddelay = request->get_query_parameter("startupPerioddelay", 0);
			const int32_t cleanupPeriodperiod = request->get_query_parameter("cleanupPeriodperiod", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.event.impl.jobs.JobConsumerManagerResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.event.impl.jobs.JobConsumerManagerResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.event.impl.jobs.JobConsumerManager/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.event.impl.jobs.JobConsumerManagerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.event.impl.jobs.JobConsumerManagerResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.event.impl.jobs.JobConsumerManagerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.event.impl.jobs.JobConsumerManagerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool orgPeriodapachePeriodslingPeriodinstallerPeriodconfigurationPeriodpersist = request->get_query_parameter("orgPeriodapachePeriodslingPeriodinstallerPeriodconfigurationPeriodpersist", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.event.jobs.QueueConfigurationResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.event.jobs.QueueConfigurationResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.event.jobs.QueueConfiguration/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.event.jobs.QueueConfigurationResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.event.jobs.QueueConfigurationResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.event.jobs.QueueConfigurationResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.event.jobs.QueueConfigurationResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string queuePeriodname = request->get_query_parameter("queuePeriodname", "");
			const std::string queuePeriodtype = request->get_query_parameter("queuePeriodtype", "");
			const std::string queuePeriodpriority = request->get_query_parameter("queuePeriodpriority", "");
			const int32_t queuePeriodretries = request->get_query_parameter("queuePeriodretries", 0);
			const int32_t queuePeriodretrydelay = request->get_query_parameter("queuePeriodretrydelay", 0);
			const double queuePeriodmaxparallel = request->get_query_parameter("queuePeriodmaxparallel", 0.0);
			const bool queuePeriodkeepJobs = request->get_query_parameter("queuePeriodkeepJobs", );
			const bool queuePeriodpreferRunOnCreationInstance = request->get_query_parameter("queuePeriodpreferRunOnCreationInstance", );
			const int32_t queuePeriodthreadPoolSize = request->get_query_parameter("queuePeriodthreadPoolSize", 0);
			const int32_t servicePeriodranking = request->get_query_parameter("servicePeriodranking", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.extensions.webconsolesecurityprovider.internal.SlingWebConsoleSecurityProviderResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.extensions.webconsolesecurityprovider.internal.SlingWebConsoleSecurityProviderResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.extensions.webconsolesecurityprovider.internal.SlingWebConsoleSecurityProvider/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.extensions.webconsolesecurityprovider.internal.SlingWebConsoleSecurityProviderResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.extensions.webconsolesecurityprovider.internal.SlingWebConsoleSecurityProviderResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.extensions.webconsolesecurityprovider.internal.SlingWebConsoleSecurityProviderResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.extensions.webconsolesecurityprovider.internal.SlingWebConsoleSecurityProviderResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.featureflags.FeatureResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.featureflags.FeatureResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.featureflags.Feature/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.featureflags.FeatureResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.featureflags.FeatureResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.featureflags.FeatureResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.featureflags.FeatureResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string name = request->get_query_parameter("name", "");
			const std::string description = request->get_query_parameter("description", "");
			const bool enabled = request->get_query_parameter("enabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.featureflags.impl.ConfiguredFeatureResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.featureflags.impl.ConfiguredFeatureResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.featureflags.impl.ConfiguredFeature/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.featureflags.impl.ConfiguredFeatureResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.featureflags.impl.ConfiguredFeatureResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.featureflags.impl.ConfiguredFeatureResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.featureflags.impl.ConfiguredFeatureResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string name = request->get_query_parameter("name", "");
			const std::string description = request->get_query_parameter("description", "");
			const bool enabled = request->get_query_parameter("enabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hapi.impl.HApiUtilImplResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hapi.impl.HApiUtilImplResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.hapi.impl.HApiUtilImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hapi.impl.HApiUtilImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hapi.impl.HApiUtilImplResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hapi.impl.HApiUtilImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hapi.impl.HApiUtilImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodresourcetype = request->get_query_parameter("orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodresourcetype", "");
			const std::string orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodcollectionresourcetype = request->get_query_parameter("orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodcollectionresourcetype", "");
			const std::string orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodexternalurl = request->get_query_parameter("orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodexternalurl", "");
			const bool orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodenabled = request->get_query_parameter("orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodenabled", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.CompositeHealthCheckResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.CompositeHealthCheckResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.hc.core.impl.CompositeHealthCheck/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.CompositeHealthCheckResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.CompositeHealthCheckResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.CompositeHealthCheckResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.CompositeHealthCheckResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string hcPeriodname = request->get_query_parameter("hcPeriodname", "");
			const std::string hcPeriodmbeanPeriodname = request->get_query_parameter("hcPeriodmbeanPeriodname", "");
			const bool filterPeriodcombineTagsWithOr = request->get_query_parameter("filterPeriodcombineTagsWithOr", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.executor.HealthCheckExecutorImplResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.executor.HealthCheckExecutorImplResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.hc.core.impl.executor.HealthCheckExecutorImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.executor.HealthCheckExecutorImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.executor.HealthCheckExecutorImplResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.executor.HealthCheckExecutorImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.executor.HealthCheckExecutorImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t timeoutInMs = request->get_query_parameter("timeoutInMs", 0);
			const int32_t longRunningFutureThresholdForCriticalMs = request->get_query_parameter("longRunningFutureThresholdForCriticalMs", 0);
			const int32_t resultCacheTtlInMs = request->get_query_parameter("resultCacheTtlInMs", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.JmxAttributeHealthCheckResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.JmxAttributeHealthCheckResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.hc.core.impl.JmxAttributeHealthCheck/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.JmxAttributeHealthCheckResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.JmxAttributeHealthCheckResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.JmxAttributeHealthCheckResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.JmxAttributeHealthCheckResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string hcPeriodname = request->get_query_parameter("hcPeriodname", "");
			const std::string hcPeriodmbeanPeriodname = request->get_query_parameter("hcPeriodmbeanPeriodname", "");
			const std::string mbeanPeriodname = request->get_query_parameter("mbeanPeriodname", "");
			const std::string attributePeriodname = request->get_query_parameter("attributePeriodname", "");
			const std::string attributePeriodvaluePeriodconstraint = request->get_query_parameter("attributePeriodvaluePeriodconstraint", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.ScriptableHealthCheckResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.ScriptableHealthCheckResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.hc.core.impl.ScriptableHealthCheck/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.ScriptableHealthCheckResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.ScriptableHealthCheckResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.ScriptableHealthCheckResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.ScriptableHealthCheckResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string hcPeriodname = request->get_query_parameter("hcPeriodname", "");
			const std::string hcPeriodmbeanPeriodname = request->get_query_parameter("hcPeriodmbeanPeriodname", "");
			const std::string expression = request->get_query_parameter("expression", "");
			const std::string languagePeriodextension = request->get_query_parameter("languagePeriodextension", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.servlet.HealthCheckExecutorServletResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.servlet.HealthCheckExecutorServletResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.hc.core.impl.servlet.HealthCheckExecutorServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.servlet.HealthCheckExecutorServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.servlet.HealthCheckExecutorServletResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.servlet.HealthCheckExecutorServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.servlet.HealthCheckExecutorServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string servletPath = request->get_query_parameter("servletPath", "");
			const bool disabled = request->get_query_parameter("disabled", );
			const std::string corsPeriodaccessControlAllowOrigin = request->get_query_parameter("corsPeriodaccessControlAllowOrigin", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.servlet.ResultTxtVerboseSerializerResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.servlet.ResultTxtVerboseSerializerResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.hc.core.impl.servlet.ResultTxtVerboseSerializer/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.servlet.ResultTxtVerboseSerializerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.servlet.ResultTxtVerboseSerializerResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.servlet.ResultTxtVerboseSerializerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.hc.core.impl.servlet.ResultTxtVerboseSerializerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t totalWidth = request->get_query_parameter("totalWidth", 0);
			const int32_t colWidthName = request->get_query_parameter("colWidthName", 0);
			const int32_t colWidthResult = request->get_query_parameter("colWidthResult", 0);
			const int32_t colWidthTiming = request->get_query_parameter("colWidthTiming", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.i18n.impl.I18NFilterResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.i18n.impl.I18NFilterResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.i18n.impl.I18NFilter/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.i18n.impl.I18NFilterResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.i18n.impl.I18NFilterResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.i18n.impl.I18NFilterResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.i18n.impl.I18NFilterResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t servicePeriodranking = request->get_query_parameter("servicePeriodranking", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.i18n.impl.JcrResourceBundleProviderResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.i18n.impl.JcrResourceBundleProviderResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.i18n.impl.JcrResourceBundleProvider/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.i18n.impl.JcrResourceBundleProviderResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.i18n.impl.JcrResourceBundleProviderResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.i18n.impl.JcrResourceBundleProviderResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.i18n.impl.JcrResourceBundleProviderResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string localePerioddefault = request->get_query_parameter("localePerioddefault", "");
			const bool preloadPeriodbundles = request->get_query_parameter("preloadPeriodbundles", );
			const int32_t invalidationPerioddelay = request->get_query_parameter("invalidationPerioddelay", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.installer.provider.jcr.impl.JcrInstallerResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.installer.provider.jcr.impl.JcrInstallerResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.installer.provider.jcr.impl.JcrInstaller/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.installer.provider.jcr.impl.JcrInstallerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.installer.provider.jcr.impl.JcrInstallerResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.installer.provider.jcr.impl.JcrInstallerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.installer.provider.jcr.impl.JcrInstallerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string slingPeriodjcrinstallPeriodfolderPeriodnamePeriodregexp = request->get_query_parameter("slingPeriodjcrinstallPeriodfolderPeriodnamePeriodregexp", "");
			const int32_t slingPeriodjcrinstallPeriodfolderPeriodmaxPerioddepth = request->get_query_parameter("slingPeriodjcrinstallPeriodfolderPeriodmaxPerioddepth", 0);
			const std::string slingPeriodjcrinstallPeriodnewPeriodconfigPeriodpath = request->get_query_parameter("slingPeriodjcrinstallPeriodnewPeriodconfigPeriodpath", "");
			const std::string slingPeriodjcrinstallPeriodsignalPeriodpath = request->get_query_parameter("slingPeriodjcrinstallPeriodsignalPeriodpath", "");
			const bool slingPeriodjcrinstallPeriodenablePeriodwriteback = request->get_query_parameter("slingPeriodjcrinstallPeriodenablePeriodwriteback", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.base.internal.LoginAdminWhitelistResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.base.internal.LoginAdminWhitelistResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.base.internal.LoginAdminWhitelistResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.base.internal.LoginAdminWhitelistResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.base.internal.LoginAdminWhitelistResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.base.internal.LoginAdminWhitelistResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool whitelistPeriodbypass = request->get_query_parameter("whitelistPeriodbypass", );
			const std::string whitelistPeriodbundlesPeriodregexp = request->get_query_parameter("whitelistPeriodbundlesPeriodregexp", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.base.internal.LoginAdminWhitelist.fragmentResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.base.internal.LoginAdminWhitelist.fragmentResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist.fragment/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.base.internal.LoginAdminWhitelist.fragmentResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.base.internal.LoginAdminWhitelist.fragmentResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.base.internal.LoginAdminWhitelist.fragmentResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.base.internal.LoginAdminWhitelist.fragmentResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string whitelistPeriodname = request->get_query_parameter("whitelistPeriodname", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.davex.impl.servlets.SlingDavExServletResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.davex.impl.servlets.SlingDavExServletResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.davex.impl.servlets.SlingDavExServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.davex.impl.servlets.SlingDavExServletResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.davex.impl.servlets.SlingDavExServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.davex.impl.servlets.SlingDavExServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string alias = request->get_query_parameter("alias", "");
			const bool davPeriodcreateAbsoluteUri = request->get_query_parameter("davPeriodcreateAbsoluteUri", );
			const std::string davPeriodprotectedhandlers = request->get_query_parameter("davPeriodprotectedhandlers", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.jackrabbit.server.JndiRegistrationSupportResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.jackrabbit.server.JndiRegistrationSupportResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.JndiRegistrationSupport/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.jackrabbit.server.JndiRegistrationSupportResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.jackrabbit.server.JndiRegistrationSupportResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.jackrabbit.server.JndiRegistrationSupportResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.jackrabbit.server.JndiRegistrationSupportResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string javaPeriodnamingPeriodfactoryPeriodinitial = request->get_query_parameter("javaPeriodnamingPeriodfactoryPeriodinitial", "");
			const std::string javaPeriodnamingPeriodproviderPeriodurl = request->get_query_parameter("javaPeriodnamingPeriodproviderPeriodurl", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.jackrabbit.server.RmiRegistrationSupportResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.jackrabbit.server.RmiRegistrationSupportResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.RmiRegistrationSupport/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.jackrabbit.server.RmiRegistrationSupportResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.jackrabbit.server.RmiRegistrationSupportResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.jackrabbit.server.RmiRegistrationSupportResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.jackrabbit.server.RmiRegistrationSupportResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t port = request->get_query_parameter("port", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.repoinit.impl.RepositoryInitializerResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.repoinit.impl.RepositoryInitializerResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.jcr.repoinit.impl.RepositoryInitializer/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.repoinit.impl.RepositoryInitializerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.repoinit.impl.RepositoryInitializerResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.repoinit.impl.RepositoryInitializerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.repoinit.impl.RepositoryInitializerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.repoinit.RepositoryInitializerResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.repoinit.RepositoryInitializerResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.jcr.repoinit.RepositoryInitializer/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.repoinit.RepositoryInitializerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.repoinit.RepositoryInitializerResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.repoinit.RepositoryInitializerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.repoinit.RepositoryInitializerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.resource.internal.JcrResourceResolverFactoryImplResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.resource.internal.JcrResourceResolverFactoryImplResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrResourceResolverFactoryImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.resource.internal.JcrResourceResolverFactoryImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.resource.internal.JcrResourceResolverFactoryImplResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.resource.internal.JcrResourceResolverFactoryImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.resource.internal.JcrResourceResolverFactoryImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool resourcePeriodresolverPeriodmanglenamespaces = request->get_query_parameter("resourcePeriodresolverPeriodmanglenamespaces", );
			const bool resourcePeriodresolverPeriodallowDirect = request->get_query_parameter("resourcePeriodresolverPeriodallowDirect", );
			const std::string resourcePeriodresolverPeriodmapPeriodlocation = request->get_query_parameter("resourcePeriodresolverPeriodmapPeriodlocation", "");
			const int32_t resourcePeriodresolverPerioddefaultPeriodvanityPeriodredirectPeriodstatus = request->get_query_parameter("resourcePeriodresolverPerioddefaultPeriodvanityPeriodredirectPeriodstatus", 0);
			const bool resourcePeriodresolverPeriodenablePeriodvanitypath = request->get_query_parameter("resourcePeriodresolverPeriodenablePeriodvanitypath", );
			const int32_t resourcePeriodresolverPeriodvanitypathPeriodmaxEntries = request->get_query_parameter("resourcePeriodresolverPeriodvanitypathPeriodmaxEntries", 0);
			const bool resourcePeriodresolverPeriodvanitypathPeriodmaxEntriesPeriodstartup = request->get_query_parameter("resourcePeriodresolverPeriodvanitypathPeriodmaxEntriesPeriodstartup", );
			const int32_t resourcePeriodresolverPeriodvanitypathPeriodbloomfilterPeriodmaxBytes = request->get_query_parameter("resourcePeriodresolverPeriodvanitypathPeriodbloomfilterPeriodmaxBytes", 0);
			const bool resourcePeriodresolverPeriodoptimizePeriodaliasPeriodresolution = request->get_query_parameter("resourcePeriodresolverPeriodoptimizePeriodaliasPeriodresolution", );
			const bool resourcePeriodresolverPeriodvanityPeriodprecedence = request->get_query_parameter("resourcePeriodresolverPeriodvanityPeriodprecedence", );
			const bool resourcePeriodresolverPeriodproviderhandlingPeriodparanoid = request->get_query_parameter("resourcePeriodresolverPeriodproviderhandlingPeriodparanoid", );
			const bool resourcePeriodresolverPeriodlogPeriodclosing = request->get_query_parameter("resourcePeriodresolverPeriodlogPeriodclosing", );
			const bool resourcePeriodresolverPeriodlogPeriodunclosed = request->get_query_parameter("resourcePeriodresolverPeriodlogPeriodunclosed", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.resource.internal.JcrSystemUserValidatorResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.resource.internal.JcrSystemUserValidatorResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrSystemUserValidator/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.resource.internal.JcrSystemUserValidatorResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.resource.internal.JcrSystemUserValidatorResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.resource.internal.JcrSystemUserValidatorResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.resource.internal.JcrSystemUserValidatorResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool allowPeriodonlyPeriodsystemPerioduser = request->get_query_parameter("allowPeriodonlyPeriodsystemPerioduser", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.resourcesecurity.impl.ResourceAccessGateFactoryResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.resourcesecurity.impl.ResourceAccessGateFactoryResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.jcr.resourcesecurity.impl.ResourceAccessGateFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.resourcesecurity.impl.ResourceAccessGateFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.resourcesecurity.impl.ResourceAccessGateFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.resourcesecurity.impl.ResourceAccessGateFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.resourcesecurity.impl.ResourceAccessGateFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string path = request->get_query_parameter("path", "");
			const std::string checkpathPeriodprefix = request->get_query_parameter("checkpathPeriodprefix", "");
			const std::string jcrPath = request->get_query_parameter("jcrPath", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.webdav.impl.handler.DefaultHandlerServiceResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.webdav.impl.handler.DefaultHandlerServiceResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DefaultHandlerService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.webdav.impl.handler.DefaultHandlerServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.webdav.impl.handler.DefaultHandlerServiceResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.webdav.impl.handler.DefaultHandlerServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.webdav.impl.handler.DefaultHandlerServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t servicePeriodranking = request->get_query_parameter("servicePeriodranking", 0);
			const std::string typePeriodcollections = request->get_query_parameter("typePeriodcollections", "");
			const std::string typePeriodnoncollections = request->get_query_parameter("typePeriodnoncollections", "");
			const std::string typePeriodcontent = request->get_query_parameter("typePeriodcontent", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.webdav.impl.handler.DirListingExportHandlerServiceResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.webdav.impl.handler.DirListingExportHandlerServiceResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DirListingExportHandlerService/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.webdav.impl.handler.DirListingExportHandlerServiceResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.webdav.impl.handler.DirListingExportHandlerServiceResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.webdav.impl.handler.DirListingExportHandlerServiceResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.webdav.impl.handler.DirListingExportHandlerServiceResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t servicePeriodranking = request->get_query_parameter("servicePeriodranking", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.webdav.impl.servlets.SimpleWebDavServletResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.webdav.impl.servlets.SimpleWebDavServletResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.jcr.webdav.impl.servlets.SimpleWebDavServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.webdav.impl.servlets.SimpleWebDavServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.webdav.impl.servlets.SimpleWebDavServletResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.webdav.impl.servlets.SimpleWebDavServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jcr.webdav.impl.servlets.SimpleWebDavServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string davPeriodroot = request->get_query_parameter("davPeriodroot", "");
			const bool davPeriodcreateAbsoluteUri = request->get_query_parameter("davPeriodcreateAbsoluteUri", );
			const std::string davPeriodrealm = request->get_query_parameter("davPeriodrealm", "");
			const std::string filterPeriodtypes = request->get_query_parameter("filterPeriodtypes", "");
			const std::string filterPerioduris = request->get_query_parameter("filterPerioduris", "");
			const std::string typePeriodcollections = request->get_query_parameter("typePeriodcollections", "");
			const std::string typePeriodnoncollections = request->get_query_parameter("typePeriodnoncollections", "");
			const std::string typePeriodcontent = request->get_query_parameter("typePeriodcontent", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jmx.provider.impl.JMXResourceProviderResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jmx.provider.impl.JMXResourceProviderResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.jmx.provider.impl.JMXResourceProvider/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jmx.provider.impl.JMXResourceProviderResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jmx.provider.impl.JMXResourceProviderResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jmx.provider.impl.JMXResourceProviderResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.jmx.provider.impl.JMXResourceProviderResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string providerPeriodroots = request->get_query_parameter("providerPeriodroots", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.models.impl.ModelAdapterFactoryResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.models.impl.ModelAdapterFactoryResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.models.impl.ModelAdapterFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.models.impl.ModelAdapterFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.models.impl.ModelAdapterFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.models.impl.ModelAdapterFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.models.impl.ModelAdapterFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string osgiPeriodhttpPeriodwhiteboardPeriodlistener = request->get_query_parameter("osgiPeriodhttpPeriodwhiteboardPeriodlistener", "");
			const std::string osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect = request->get_query_parameter("osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect", "");
			const int32_t maxPeriodrecursionPerioddepth = request->get_query_parameter("maxPeriodrecursionPerioddepth", 0);
			const int32_t cleanupPeriodjobPeriodperiod = request->get_query_parameter("cleanupPeriodjobPeriodperiod", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.models.jacksonexporter.impl.ResourceModuleProviderResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.models.jacksonexporter.impl.ResourceModuleProviderResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.models.jacksonexporter.impl.ResourceModuleProvider/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.models.jacksonexporter.impl.ResourceModuleProviderResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.models.jacksonexporter.impl.ResourceModuleProviderResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.models.jacksonexporter.impl.ResourceModuleProviderResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.models.jacksonexporter.impl.ResourceModuleProviderResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t maxPeriodrecursionPeriodlevels = request->get_query_parameter("maxPeriodrecursionPeriodlevels", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.resource.inventory.impl.ResourceInventoryPrinterFactoryResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.resource.inventory.impl.ResourceInventoryPrinterFactoryResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.resource.inventory.impl.ResourceInventoryPrinterFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.resource.inventory.impl.ResourceInventoryPrinterFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.resource.inventory.impl.ResourceInventoryPrinterFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.resource.inventory.impl.ResourceInventoryPrinterFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.resource.inventory.impl.ResourceInventoryPrinterFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string felixPeriodinventoryPeriodprinterPeriodname = request->get_query_parameter("felixPeriodinventoryPeriodprinterPeriodname", "");
			const std::string felixPeriodinventoryPeriodprinterPeriodtitle = request->get_query_parameter("felixPeriodinventoryPeriodprinterPeriodtitle", "");
			const std::string path = request->get_query_parameter("path", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.resourcemerger.impl.MergedResourceProviderFactoryResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.resourcemerger.impl.MergedResourceProviderFactoryResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.resourcemerger.impl.MergedResourceProviderFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.resourcemerger.impl.MergedResourceProviderFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.resourcemerger.impl.MergedResourceProviderFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.resourcemerger.impl.MergedResourceProviderFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.resourcemerger.impl.MergedResourceProviderFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string mergePeriodroot = request->get_query_parameter("mergePeriodroot", "");
			const bool mergePeriodreadOnly = request->get_query_parameter("mergePeriodreadOnly", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.resourcemerger.picker.overridingResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.resourcemerger.picker.overridingResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.resourcemerger.picker.overriding/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.resourcemerger.picker.overridingResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.resourcemerger.picker.overridingResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.resourcemerger.picker.overridingResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.resourcemerger.picker.overridingResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string mergePeriodroot = request->get_query_parameter("mergePeriodroot", "");
			const bool mergePeriodreadOnly = request->get_query_parameter("mergePeriodreadOnly", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.core.impl.ScriptCacheImplResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.core.impl.ScriptCacheImplResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptCacheImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.core.impl.ScriptCacheImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.core.impl.ScriptCacheImplResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.core.impl.ScriptCacheImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.core.impl.ScriptCacheImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t orgPeriodapachePeriodslingPeriodscriptingPeriodcachePeriodsize = request->get_query_parameter("orgPeriodapachePeriodslingPeriodscriptingPeriodcachePeriodsize", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.core.impl.ScriptingResourceResolverProviderImplResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.core.impl.ScriptingResourceResolverProviderImplResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptingResourceResolverProviderImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.core.impl.ScriptingResourceResolverProviderImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.core.impl.ScriptingResourceResolverProviderImplResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.core.impl.ScriptingResourceResolverProviderImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.core.impl.ScriptingResourceResolverProviderImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool logPeriodstacktracePeriodonclose = request->get_query_parameter("logPeriodstacktracePeriodonclose", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.java.impl.JavaScriptEngineFactoryResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.java.impl.JavaScriptEngineFactoryResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.scripting.java.impl.JavaScriptEngineFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.java.impl.JavaScriptEngineFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.java.impl.JavaScriptEngineFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.java.impl.JavaScriptEngineFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.java.impl.JavaScriptEngineFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool javaPeriodclassdebuginfo = request->get_query_parameter("javaPeriodclassdebuginfo", );
			const std::string javaPeriodjavaEncoding = request->get_query_parameter("javaPeriodjavaEncoding", "");
			const std::string javaPeriodcompilerSourceVM = request->get_query_parameter("javaPeriodcompilerSourceVM", "");
			const std::string javaPeriodcompilerTargetVM = request->get_query_parameter("javaPeriodcompilerTargetVM", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.javascript.internal.RhinoJavaScriptEngineFactoryResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.javascript.internal.RhinoJavaScriptEngineFactoryResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.scripting.javascript.internal.RhinoJavaScriptEngineFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.javascript.internal.RhinoJavaScriptEngineFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.javascript.internal.RhinoJavaScriptEngineFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.javascript.internal.RhinoJavaScriptEngineFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.javascript.internal.RhinoJavaScriptEngineFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t orgPeriodapachePeriodslingPeriodscriptingPeriodjavascriptPeriodrhinoPeriodoptLevel = request->get_query_parameter("orgPeriodapachePeriodslingPeriodscriptingPeriodjavascriptPeriodrhinoPeriodoptLevel", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.jsp.JspScriptEngineFactoryResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.jsp.JspScriptEngineFactoryResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.scripting.jsp.JspScriptEngineFactory/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.jsp.JspScriptEngineFactoryResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.jsp.JspScriptEngineFactoryResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.jsp.JspScriptEngineFactoryResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.jsp.JspScriptEngineFactoryResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string jasperPeriodcompilerTargetVM = request->get_query_parameter("jasperPeriodcompilerTargetVM", "");
			const std::string jasperPeriodcompilerSourceVM = request->get_query_parameter("jasperPeriodcompilerSourceVM", "");
			const bool jasperPeriodclassdebuginfo = request->get_query_parameter("jasperPeriodclassdebuginfo", );
			const bool jasperPeriodenablePooling = request->get_query_parameter("jasperPeriodenablePooling", );
			const std::string jasperPeriodieClassId = request->get_query_parameter("jasperPeriodieClassId", "");
			const bool jasperPeriodgenStringAsCharArray = request->get_query_parameter("jasperPeriodgenStringAsCharArray", );
			const bool jasperPeriodkeepgenerated = request->get_query_parameter("jasperPeriodkeepgenerated", );
			const bool jasperPeriodmappedfile = request->get_query_parameter("jasperPeriodmappedfile", );
			const bool jasperPeriodtrimSpaces = request->get_query_parameter("jasperPeriodtrimSpaces", );
			const bool jasperPerioddisplaySourceFragments = request->get_query_parameter("jasperPerioddisplaySourceFragments", );
			const bool defaultPeriodisPeriodsession = request->get_query_parameter("defaultPeriodisPeriodsession", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.sightly.js.impl.jsapi.SlyBindingsValuesProviderResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.sightly.js.impl.jsapi.SlyBindingsValuesProviderResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.scripting.sightly.js.impl.jsapi.SlyBindingsValuesProvider/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.sightly.js.impl.jsapi.SlyBindingsValuesProviderResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.sightly.js.impl.jsapi.SlyBindingsValuesProviderResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.sightly.js.impl.jsapi.SlyBindingsValuesProviderResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.scripting.sightly.js.impl.jsapi.SlyBindingsValuesProviderResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.security.impl.ContentDispositionFilterResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.security.impl.ContentDispositionFilterResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.security.impl.ContentDispositionFilter/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.security.impl.ContentDispositionFilterResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.security.impl.ContentDispositionFilterResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.security.impl.ContentDispositionFilterResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.security.impl.ContentDispositionFilterResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool slingPeriodcontentPerioddispositionPeriodallPeriodpaths = request->get_query_parameter("slingPeriodcontentPerioddispositionPeriodallPeriodpaths", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.security.impl.ReferrerFilterResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.security.impl.ReferrerFilterResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.security.impl.ReferrerFilter/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.security.impl.ReferrerFilterResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.security.impl.ReferrerFilterResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.security.impl.ReferrerFilterResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.security.impl.ReferrerFilterResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool allowPeriodempty = request->get_query_parameter("allowPeriodempty", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.serviceusermapping.impl.ServiceUserMapperImplResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.serviceusermapping.impl.ServiceUserMapperImplResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.serviceusermapping.impl.ServiceUserMapperImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.serviceusermapping.impl.ServiceUserMapperImplResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.serviceusermapping.impl.ServiceUserMapperImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.serviceusermapping.impl.ServiceUserMapperImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string userPerioddefault = request->get_query_parameter("userPerioddefault", "");
			const bool userPeriodenablePerioddefaultPeriodmapping = request->get_query_parameter("userPeriodenablePerioddefaultPeriodmapping", );
			const bool requirePeriodvalidation = request->get_query_parameter("requirePeriodvalidation", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl.amendedResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl.amendedResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl.amended/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl.amendedResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl.amendedResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl.amendedResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl.amendedResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t servicePeriodranking = request->get_query_parameter("servicePeriodranking", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.servlets.get.DefaultGetServletResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.servlets.get.DefaultGetServletResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.servlets.get.DefaultGetServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.servlets.get.DefaultGetServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.servlets.get.DefaultGetServletResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.servlets.get.DefaultGetServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.servlets.get.DefaultGetServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool index = request->get_query_parameter("index", );
			const bool enablePeriodhtml = request->get_query_parameter("enablePeriodhtml", );
			const bool enablePeriodjson = request->get_query_parameter("enablePeriodjson", );
			const bool enablePeriodtxt = request->get_query_parameter("enablePeriodtxt", );
			const bool enablePeriodxml = request->get_query_parameter("enablePeriodxml", );
			const int32_t jsonPeriodmaximumresults = request->get_query_parameter("jsonPeriodmaximumresults", 0);
			const bool ecmaSuport = request->get_query_parameter("ecmaSuport", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.servlets.get.impl.version.VersionInfoServletResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.servlets.get.impl.version.VersionInfoServletResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.servlets.get.impl.version.VersionInfoServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.servlets.get.impl.version.VersionInfoServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.servlets.get.impl.version.VersionInfoServletResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.servlets.get.impl.version.VersionInfoServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.servlets.get.impl.version.VersionInfoServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool ecmaSuport = request->get_query_parameter("ecmaSuport", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.servlets.post.impl.helper.ChunkCleanUpTaskResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.servlets.post.impl.helper.ChunkCleanUpTaskResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.servlets.post.impl.helper.ChunkCleanUpTask/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.servlets.post.impl.helper.ChunkCleanUpTaskResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.servlets.post.impl.helper.ChunkCleanUpTaskResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.servlets.post.impl.helper.ChunkCleanUpTaskResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.servlets.post.impl.helper.ChunkCleanUpTaskResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string schedulerPeriodexpression = request->get_query_parameter("schedulerPeriodexpression", "");
			const bool schedulerPeriodconcurrent = request->get_query_parameter("schedulerPeriodconcurrent", );
			const int32_t chunkPeriodcleanupPeriodage = request->get_query_parameter("chunkPeriodcleanupPeriodage", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.servlets.post.impl.SlingPostServletResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.servlets.post.impl.SlingPostServletResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.servlets.post.impl.SlingPostServlet/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.servlets.post.impl.SlingPostServletResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.servlets.post.impl.SlingPostServletResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.servlets.post.impl.SlingPostServletResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.servlets.post.impl.SlingPostServletResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t servletPeriodpostPeriodnodeNameMaxLength = request->get_query_parameter("servletPeriodpostPeriodnodeNameMaxLength", 0);
			const bool servletPeriodpostPeriodcheckinNewVersionableNodes = request->get_query_parameter("servletPeriodpostPeriodcheckinNewVersionableNodes", );
			const bool servletPeriodpostPeriodautoCheckout = request->get_query_parameter("servletPeriodpostPeriodautoCheckout", );
			const bool servletPeriodpostPeriodautoCheckin = request->get_query_parameter("servletPeriodpostPeriodautoCheckin", );
			const std::string servletPeriodpostPeriodignorePattern = request->get_query_parameter("servletPeriodpostPeriodignorePattern", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.servlets.resolver.SlingServletResolverResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.servlets.resolver.SlingServletResolverResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.servlets.resolver.SlingServletResolver/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.servlets.resolver.SlingServletResolverResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.servlets.resolver.SlingServletResolverResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.servlets.resolver.SlingServletResolverResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.servlets.resolver.SlingServletResolverResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string servletresolverPeriodservletRoot = request->get_query_parameter("servletresolverPeriodservletRoot", "");
			const int32_t servletresolverPeriodcacheSize = request->get_query_parameter("servletresolverPeriodcacheSize", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.settings.impl.SlingSettingsServiceImplResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.settings.impl.SlingSettingsServiceImplResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.settings.impl.SlingSettingsServiceImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.settings.impl.SlingSettingsServiceImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.settings.impl.SlingSettingsServiceImplResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.settings.impl.SlingSettingsServiceImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.settings.impl.SlingSettingsServiceImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string slingPeriodname = request->get_query_parameter("slingPeriodname", "");
			const std::string slingPerioddescription = request->get_query_parameter("slingPerioddescription", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.startupfilter.impl.StartupFilterImplResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.startupfilter.impl.StartupFilterImplResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.startupfilter.impl.StartupFilterImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.startupfilter.impl.StartupFilterImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.startupfilter.impl.StartupFilterImplResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.startupfilter.impl.StartupFilterImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.startupfilter.impl.StartupFilterImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool activePeriodbyPerioddefault = request->get_query_parameter("activePeriodbyPerioddefault", );
			const std::string defaultPeriodmessage = request->get_query_parameter("defaultPeriodmessage", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.tenant.internal.TenantProviderImplResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.tenant.internal.TenantProviderImplResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.tenant.internal.TenantProviderImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.tenant.internal.TenantProviderImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.tenant.internal.TenantProviderImplResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.tenant.internal.TenantProviderImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.tenant.internal.TenantProviderImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string tenantPeriodroot = request->get_query_parameter("tenantPeriodroot", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.tracer.internal.LogTracerResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.tracer.internal.LogTracerResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.tracer.internal.LogTracer/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.tracer.internal.LogTracerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.tracer.internal.LogTracerResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.tracer.internal.LogTracerResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.tracer.internal.LogTracerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const bool enabled = request->get_query_parameter("enabled", );
			const bool servletEnabled = request->get_query_parameter("servletEnabled", );
			const int32_t recordingCacheSizeInMB = request->get_query_parameter("recordingCacheSizeInMB", 0);
			const int32_t recordingCacheDurationInSecs = request->get_query_parameter("recordingCacheDurationInSecs", 0);
			const bool recordingCompressionEnabled = request->get_query_parameter("recordingCompressionEnabled", );
			const bool gzipResponse = request->get_query_parameter("gzipResponse", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.xss.impl.XSSFilterImplResource::ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.xss.impl.XSSFilterImplResource()
{
	this->set_path("/system/console/configMgr/org.apache.sling.xss.impl.XSSFilterImpl/");
	this->set_method_handler("POST",
		std::bind(&ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.xss.impl.XSSFilterImplResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.xss.impl.XSSFilterImplResource::~ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.xss.impl.XSSFilterImplResource()
{
}

void ConfigmgrApiSystemConsoleConfigMgrOrg.apache.sling.xss.impl.XSSFilterImplResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const std::string policyPath = request->get_query_parameter("policyPath", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved configuration parameters", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}




}
}
}
}

