<?php
/**
 * ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */
class ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties 
{
        /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyString|null
     * @SerializedName("version.id")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyString")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyString")
     */
    protected $versionId;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyBoolean|null
     * @SerializedName("cache.on")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyBoolean")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyBoolean")
     */
    protected $cacheOn;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyInteger|null
     * @SerializedName("concurrency.level")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyInteger")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyInteger")
     */
    protected $concurrencyLevel;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyInteger|null
     * @SerializedName("cache.start.size")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyInteger")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyInteger")
     */
    protected $cacheStartSize;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyInteger|null
     * @SerializedName("cache.ttl")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyInteger")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyInteger")
     */
    protected $cacheTtl;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyInteger|null
     * @SerializedName("cache.size")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyInteger")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyInteger")
     */
    protected $cacheSize;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyInteger|null
     * @SerializedName("time.limit")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyInteger")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyInteger")
     */
    protected $timeLimit;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->versionId = isset($data['versionId']) ? $data['versionId'] : null;
        $this->cacheOn = isset($data['cacheOn']) ? $data['cacheOn'] : null;
        $this->concurrencyLevel = isset($data['concurrencyLevel']) ? $data['concurrencyLevel'] : null;
        $this->cacheStartSize = isset($data['cacheStartSize']) ? $data['cacheStartSize'] : null;
        $this->cacheTtl = isset($data['cacheTtl']) ? $data['cacheTtl'] : null;
        $this->cacheSize = isset($data['cacheSize']) ? $data['cacheSize'] : null;
        $this->timeLimit = isset($data['timeLimit']) ? $data['timeLimit'] : null;
    }

    /**
     * Gets versionId.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyString|null
     */
    public function getVersionId()
    {
        return $this->versionId;
    }

    /**
     * Sets versionId.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyString|null $versionId
     *
     * @return $this
     */
    public function setVersionId(ConfigNodePropertyString $versionId = null)
    {
        $this->versionId = $versionId;

        return $this;
    }

    /**
     * Gets cacheOn.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyBoolean|null
     */
    public function getCacheOn()
    {
        return $this->cacheOn;
    }

    /**
     * Sets cacheOn.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyBoolean|null $cacheOn
     *
     * @return $this
     */
    public function setCacheOn(ConfigNodePropertyBoolean $cacheOn = null)
    {
        $this->cacheOn = $cacheOn;

        return $this;
    }

    /**
     * Gets concurrencyLevel.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyInteger|null
     */
    public function getConcurrencyLevel()
    {
        return $this->concurrencyLevel;
    }

    /**
     * Sets concurrencyLevel.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyInteger|null $concurrencyLevel
     *
     * @return $this
     */
    public function setConcurrencyLevel(ConfigNodePropertyInteger $concurrencyLevel = null)
    {
        $this->concurrencyLevel = $concurrencyLevel;

        return $this;
    }

    /**
     * Gets cacheStartSize.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyInteger|null
     */
    public function getCacheStartSize()
    {
        return $this->cacheStartSize;
    }

    /**
     * Sets cacheStartSize.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyInteger|null $cacheStartSize
     *
     * @return $this
     */
    public function setCacheStartSize(ConfigNodePropertyInteger $cacheStartSize = null)
    {
        $this->cacheStartSize = $cacheStartSize;

        return $this;
    }

    /**
     * Gets cacheTtl.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyInteger|null
     */
    public function getCacheTtl()
    {
        return $this->cacheTtl;
    }

    /**
     * Sets cacheTtl.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyInteger|null $cacheTtl
     *
     * @return $this
     */
    public function setCacheTtl(ConfigNodePropertyInteger $cacheTtl = null)
    {
        $this->cacheTtl = $cacheTtl;

        return $this;
    }

    /**
     * Gets cacheSize.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyInteger|null
     */
    public function getCacheSize()
    {
        return $this->cacheSize;
    }

    /**
     * Sets cacheSize.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyInteger|null $cacheSize
     *
     * @return $this
     */
    public function setCacheSize(ConfigNodePropertyInteger $cacheSize = null)
    {
        $this->cacheSize = $cacheSize;

        return $this;
    }

    /**
     * Gets timeLimit.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyInteger|null
     */
    public function getTimeLimit()
    {
        return $this->timeLimit;
    }

    /**
     * Sets timeLimit.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyInteger|null $timeLimit
     *
     * @return $this
     */
    public function setTimeLimit(ConfigNodePropertyInteger $timeLimit = null)
    {
        $this->timeLimit = $timeLimit;

        return $this;
    }
}


