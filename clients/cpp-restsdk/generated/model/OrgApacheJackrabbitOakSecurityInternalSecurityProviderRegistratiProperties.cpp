/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties::OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties()
{
    m_RequiredServicePidsIsSet = false;
    m_AuthorizationCompositionTypeIsSet = false;
}

OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties::~OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties()
{
}

void OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_RequiredServicePidsIsSet)
    {
        val[utility::conversions::to_string_t("requiredServicePids")] = ModelBase::toJson(m_RequiredServicePids);
    }
    if(m_AuthorizationCompositionTypeIsSet)
    {
        val[utility::conversions::to_string_t("authorizationCompositionType")] = ModelBase::toJson(m_AuthorizationCompositionType);
    }

    return val;
}

void OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("requiredServicePids")))
    {
        if(!val[utility::conversions::to_string_t("requiredServicePids")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("requiredServicePids")]);
            setRequiredServicePids( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("authorizationCompositionType")))
    {
        if(!val[utility::conversions::to_string_t("authorizationCompositionType")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("authorizationCompositionType")]);
            setAuthorizationCompositionType( newItem );
        }
    }
}

void OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_RequiredServicePidsIsSet)
    {
        if (m_RequiredServicePids.get())
        {
            m_RequiredServicePids->toMultipart(multipart, utility::conversions::to_string_t("requiredServicePids."));
        }
    }
    if(m_AuthorizationCompositionTypeIsSet)
    {
        if (m_AuthorizationCompositionType.get())
        {
            m_AuthorizationCompositionType->toMultipart(multipart, utility::conversions::to_string_t("authorizationCompositionType."));
        }
    }
}

void OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("requiredServicePids")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("requiredServicePids")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("requiredServicePids."));
            setRequiredServicePids( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("authorizationCompositionType")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("authorizationCompositionType")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("authorizationCompositionType."));
            setAuthorizationCompositionType( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties::getRequiredServicePids() const
{
    return m_RequiredServicePids;
}


void OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties::setRequiredServicePids(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_RequiredServicePids = value;
    m_RequiredServicePidsIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties::requiredServicePidsIsSet() const
{
    return m_RequiredServicePidsIsSet;
}

void OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties::unsetRequiredServicePids()
{
    m_RequiredServicePidsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyDropDown> OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties::getAuthorizationCompositionType() const
{
    return m_AuthorizationCompositionType;
}


void OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties::setAuthorizationCompositionType(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_AuthorizationCompositionType = value;
    m_AuthorizationCompositionTypeIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties::authorizationCompositionTypeIsSet() const
{
    return m_AuthorizationCompositionTypeIsSet;
}

void OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties::unsetAuthorizationCompositionType()
{
    m_AuthorizationCompositionTypeIsSet = false;
}

}
}
}
}

