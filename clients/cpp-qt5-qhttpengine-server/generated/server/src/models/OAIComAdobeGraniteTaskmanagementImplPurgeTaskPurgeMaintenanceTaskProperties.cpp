/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties::OAIComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties::OAIComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties() {
    this->init();
}

OAIComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties::~OAIComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties() {
    
}

void
OAIComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties::init() {
    m_purge_completed_isSet = false;
    m_completed_age_isSet = false;
    m_purge_active_isSet = false;
    m_active_age_isSet = false;
    m_save_threshold_isSet = false;
}

void
OAIComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(purge_completed, json[QString("purgeCompleted")]);
    
    ::OpenAPI::fromJsonValue(completed_age, json[QString("completedAge")]);
    
    ::OpenAPI::fromJsonValue(purge_active, json[QString("purgeActive")]);
    
    ::OpenAPI::fromJsonValue(active_age, json[QString("activeAge")]);
    
    ::OpenAPI::fromJsonValue(save_threshold, json[QString("saveThreshold")]);
    
}

QString
OAIComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties::asJsonObject() const {
    QJsonObject obj;
	if(purge_completed.isSet()){
        obj.insert(QString("purgeCompleted"), ::OpenAPI::toJsonValue(purge_completed));
    }
	if(completed_age.isSet()){
        obj.insert(QString("completedAge"), ::OpenAPI::toJsonValue(completed_age));
    }
	if(purge_active.isSet()){
        obj.insert(QString("purgeActive"), ::OpenAPI::toJsonValue(purge_active));
    }
	if(active_age.isSet()){
        obj.insert(QString("activeAge"), ::OpenAPI::toJsonValue(active_age));
    }
	if(save_threshold.isSet()){
        obj.insert(QString("saveThreshold"), ::OpenAPI::toJsonValue(save_threshold));
    }
    return obj;
}

OAIConfigNodePropertyBoolean
OAIComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties::getPurgeCompleted() const {
    return purge_completed;
}
void
OAIComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties::setPurgeCompleted(const OAIConfigNodePropertyBoolean &purge_completed) {
    this->purge_completed = purge_completed;
    this->m_purge_completed_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties::getCompletedAge() const {
    return completed_age;
}
void
OAIComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties::setCompletedAge(const OAIConfigNodePropertyInteger &completed_age) {
    this->completed_age = completed_age;
    this->m_completed_age_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties::getPurgeActive() const {
    return purge_active;
}
void
OAIComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties::setPurgeActive(const OAIConfigNodePropertyBoolean &purge_active) {
    this->purge_active = purge_active;
    this->m_purge_active_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties::getActiveAge() const {
    return active_age;
}
void
OAIComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties::setActiveAge(const OAIConfigNodePropertyInteger &active_age) {
    this->active_age = active_age;
    this->m_active_age_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties::getSaveThreshold() const {
    return save_threshold;
}
void
OAIComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties::setSaveThreshold(const OAIConfigNodePropertyInteger &save_threshold) {
    this->save_threshold = save_threshold;
    this->m_save_threshold_isSet = true;
}


bool
OAIComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(purge_completed.isSet()){ isObjectUpdated = true; break;}
    
        if(completed_age.isSet()){ isObjectUpdated = true; break;}
    
        if(purge_active.isSet()){ isObjectUpdated = true; break;}
    
        if(active_age.isSet()){ isObjectUpdated = true; break;}
    
        if(save_threshold.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

