/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIConfigmgrApiRequest.h"

namespace OpenAPI {

OAIConfigmgrApiRequest::OAIConfigmgrApiRequest(QHttpEngine::Socket *s, OAIConfigmgrApiHandler* hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }     
}

OAIConfigmgrApiRequest::~OAIConfigmgrApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIConfigmgrApiRequest::~OAIConfigmgrApiRequest()";
}

QMap<QString, QString> 
OAIConfigmgrApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIConfigmgrApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIConfigmgrApiRequest::getRawSocket(){
    return socket;
}


void OAIConfigmgrApiRequest::adaptiveFormAndInteractiveCommunicationWebChannelConfigurationRequest(){
    qDebug() << "//system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Configuration";
    connect(this, &OAIConfigmgrApiRequest::adaptiveFormAndInteractiveCommunicationWebChannelConfiguration, handler, &OAIConfigmgrApiHandler::adaptiveFormAndInteractiveCommunicationWebChannelConfiguration);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool show_placeholder;   
    if(socket->queryString().keys().contains("show_placeholder")){
        fromStringValue(socket->queryString().value("show_placeholder"), show_placeholder);
    }
    
    qint32 maximum_cache_entries;   
    if(socket->queryString().keys().contains("maximum_cache_entries")){
        fromStringValue(socket->queryString().value("maximum_cache_entries"), maximum_cache_entries);
    }
    
    QString af_scripting_compatversion;   
    if(socket->queryString().keys().contains("af_scripting_compatversion")){
        fromStringValue(socket->queryString().value("af_scripting_compatversion"), af_scripting_compatversion);
    }
    
    bool make_file_name_unique;   
    if(socket->queryString().keys().contains("make_file_name_unique")){
        fromStringValue(socket->queryString().value("make_file_name_unique"), make_file_name_unique);
    }
    
    bool generating_compliant_data;   
    if(socket->queryString().keys().contains("generating_compliant_data")){
        fromStringValue(socket->queryString().value("generating_compliant_data"), generating_compliant_data);
    }
    


    emit adaptiveFormAndInteractiveCommunicationWebChannelConfiguration( post,  apply,  _delete,  action,  location,  propertylist,  show_placeholder,  maximum_cache_entries,  af_scripting_compatversion,  make_file_name_unique,  generating_compliant_data);
}


void OAIConfigmgrApiRequest::adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurRequest(){
    qDebug() << "//system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Theme Configuration";
    connect(this, &OAIConfigmgrApiRequest::adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur, handler, &OAIConfigmgrApiHandler::adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> font_list;   
    if(socket->queryString().keys().contains("font_list")){
        fromStringValue(socket->queryString().values("font_list"), font_list);
    }
    


    emit adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur( post,  apply,  _delete,  action,  location,  propertylist,  font_list);
}


void OAIConfigmgrApiRequest::analyticsComponentQueryCacheServiceRequest(){
    qDebug() << "//system/console/configMgr/Analytics Component Query Cache Service";
    connect(this, &OAIConfigmgrApiRequest::analyticsComponentQueryCacheService, handler, &OAIConfigmgrApiHandler::analyticsComponentQueryCacheService);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 cq_analytics_component_query_cache_size;   
    if(socket->queryString().keys().contains("cq_analytics_component_query_cache_size")){
        fromStringValue(socket->queryString().value("cq_analytics_component_query_cache_size"), cq_analytics_component_query_cache_size);
    }
    


    emit analyticsComponentQueryCacheService( post,  apply,  _delete,  action,  location,  propertylist,  cq_analytics_component_query_cache_size);
}


void OAIConfigmgrApiRequest::apacheSlingHealthCheckResultHTMLSerializerRequest(){
    qDebug() << "//system/console/configMgr/Apache Sling Health Check Result HTML Serializer";
    connect(this, &OAIConfigmgrApiRequest::apacheSlingHealthCheckResultHTMLSerializer, handler, &OAIConfigmgrApiHandler::apacheSlingHealthCheckResultHTMLSerializer);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString style_string;   
    if(socket->queryString().keys().contains("style_string")){
        fromStringValue(socket->queryString().value("style_string"), style_string);
    }
    


    emit apacheSlingHealthCheckResultHTMLSerializer( post,  apply,  _delete,  action,  location,  propertylist,  style_string);
}


void OAIConfigmgrApiRequest::comAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.aem.formsndocuments.config.AEMFormsManagerConfiguration";
    connect(this, &OAIConfigmgrApiRequest::comAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration, handler, &OAIConfigmgrApiHandler::comAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool forms_manager_config_include_ootb_templates;   
    if(socket->queryString().keys().contains("forms_manager_config_include_ootb_templates")){
        fromStringValue(socket->queryString().value("forms_manager_config_include_ootb_templates"), forms_manager_config_include_ootb_templates);
    }
    
    bool forms_manager_config_include_deprecated_templates;   
    if(socket->queryString().keys().contains("forms_manager_config_include_deprecated_templates")){
        fromStringValue(socket->queryString().value("forms_manager_config_include_deprecated_templates"), forms_manager_config_include_deprecated_templates);
    }
    


    emit comAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration( post,  apply,  _delete,  action,  location,  propertylist,  forms_manager_config_include_ootb_templates,  forms_manager_config_include_deprecated_templates);
}


void OAIConfigmgrApiRequest::comAdobeAemTransactionCoreImplTransactionRecorderRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.aem.transaction.core.impl.TransactionRecorder";
    connect(this, &OAIConfigmgrApiRequest::comAdobeAemTransactionCoreImplTransactionRecorder, handler, &OAIConfigmgrApiHandler::comAdobeAemTransactionCoreImplTransactionRecorder);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool is_transaction_recording_enabled;   
    if(socket->queryString().keys().contains("is_transaction_recording_enabled")){
        fromStringValue(socket->queryString().value("is_transaction_recording_enabled"), is_transaction_recording_enabled);
    }
    


    emit comAdobeAemTransactionCoreImplTransactionRecorder( post,  apply,  _delete,  action,  location,  propertylist,  is_transaction_recording_enabled);
}


void OAIConfigmgrApiRequest::comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.DeprecateIndexesHC";
    connect(this, &OAIConfigmgrApiRequest::comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC, handler, &OAIConfigmgrApiHandler::comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString hc_name;   
    if(socket->queryString().keys().contains("hc_name")){
        fromStringValue(socket->queryString().value("hc_name"), hc_name);
    }
    
    QList<QString> hc_tags;   
    if(socket->queryString().keys().contains("hc_tags")){
        fromStringValue(socket->queryString().values("hc_tags"), hc_tags);
    }
    
    QString hc_mbean_name;   
    if(socket->queryString().keys().contains("hc_mbean_name")){
        fromStringValue(socket->queryString().value("hc_mbean_name"), hc_mbean_name);
    }
    


    emit comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC( post,  apply,  _delete,  action,  location,  propertylist,  hc_name,  hc_tags,  hc_mbean_name);
}


void OAIConfigmgrApiRequest::comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.ReplicationAgentsDisabledHC";
    connect(this, &OAIConfigmgrApiRequest::comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC, handler, &OAIConfigmgrApiHandler::comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString hc_name;   
    if(socket->queryString().keys().contains("hc_name")){
        fromStringValue(socket->queryString().value("hc_name"), hc_name);
    }
    
    QList<QString> hc_tags;   
    if(socket->queryString().keys().contains("hc_tags")){
        fromStringValue(socket->queryString().values("hc_tags"), hc_tags);
    }
    
    QString hc_mbean_name;   
    if(socket->queryString().keys().contains("hc_mbean_name")){
        fromStringValue(socket->queryString().value("hc_mbean_name"), hc_mbean_name);
    }
    


    emit comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC( post,  apply,  _delete,  action,  location,  propertylist,  hc_name,  hc_tags,  hc_mbean_name);
}


void OAIConfigmgrApiRequest::comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.aem.upgrade.prechecks.mbean.impl.PreUpgradeTasksMBeanImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl, handler, &OAIConfigmgrApiHandler::comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> pre_upgrade_maintenance_tasks;   
    if(socket->queryString().keys().contains("pre_upgrade_maintenance_tasks")){
        fromStringValue(socket->queryString().values("pre_upgrade_maintenance_tasks"), pre_upgrade_maintenance_tasks);
    }
    
    QList<QString> pre_upgrade_hc_tags;   
    if(socket->queryString().keys().contains("pre_upgrade_hc_tags")){
        fromStringValue(socket->queryString().values("pre_upgrade_hc_tags"), pre_upgrade_hc_tags);
    }
    


    emit comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl( post,  apply,  _delete,  action,  location,  propertylist,  pre_upgrade_maintenance_tasks,  pre_upgrade_hc_tags);
}


void OAIConfigmgrApiRequest::comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.aem.upgrade.prechecks.tasks.impl.ConsistencyCheckTaskImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl, handler, &OAIConfigmgrApiHandler::comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString root_path;   
    if(socket->queryString().keys().contains("root_path")){
        fromStringValue(socket->queryString().value("root_path"), root_path);
    }
    
    bool fix_inconsistencies;   
    if(socket->queryString().keys().contains("fix_inconsistencies")){
        fromStringValue(socket->queryString().value("fix_inconsistencies"), fix_inconsistencies);
    }
    


    emit comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl( post,  apply,  _delete,  action,  location,  propertylist,  root_path,  fix_inconsistencies);
}


void OAIConfigmgrApiRequest::comAdobeCqAccountApiAccountManagementServiceRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.account.api.AccountManagementService";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqAccountApiAccountManagementService, handler, &OAIConfigmgrApiHandler::comAdobeCqAccountApiAccountManagementService);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 cq_accountmanager_token_validity_period;   
    if(socket->queryString().keys().contains("cq_accountmanager_token_validity_period")){
        fromStringValue(socket->queryString().value("cq_accountmanager_token_validity_period"), cq_accountmanager_token_validity_period);
    }
    
    QString cq_accountmanager_config_requestnewaccount_mail;   
    if(socket->queryString().keys().contains("cq_accountmanager_config_requestnewaccount_mail")){
        fromStringValue(socket->queryString().value("cq_accountmanager_config_requestnewaccount_mail"), cq_accountmanager_config_requestnewaccount_mail);
    }
    
    QString cq_accountmanager_config_requestnewpwd_mail;   
    if(socket->queryString().keys().contains("cq_accountmanager_config_requestnewpwd_mail")){
        fromStringValue(socket->queryString().value("cq_accountmanager_config_requestnewpwd_mail"), cq_accountmanager_config_requestnewpwd_mail);
    }
    


    emit comAdobeCqAccountApiAccountManagementService( post,  apply,  _delete,  action,  location,  propertylist,  cq_accountmanager_token_validity_period,  cq_accountmanager_config_requestnewaccount_mail,  cq_accountmanager_config_requestnewpwd_mail);
}


void OAIConfigmgrApiRequest::comAdobeCqAccountImplAccountManagementServletRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.account.impl.AccountManagementServlet";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqAccountImplAccountManagementServlet, handler, &OAIConfigmgrApiHandler::comAdobeCqAccountImplAccountManagementServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString cq_accountmanager_config_informnewaccount_mail;   
    if(socket->queryString().keys().contains("cq_accountmanager_config_informnewaccount_mail")){
        fromStringValue(socket->queryString().value("cq_accountmanager_config_informnewaccount_mail"), cq_accountmanager_config_informnewaccount_mail);
    }
    
    QString cq_accountmanager_config_informnewpwd_mail;   
    if(socket->queryString().keys().contains("cq_accountmanager_config_informnewpwd_mail")){
        fromStringValue(socket->queryString().value("cq_accountmanager_config_informnewpwd_mail"), cq_accountmanager_config_informnewpwd_mail);
    }
    


    emit comAdobeCqAccountImplAccountManagementServlet( post,  apply,  _delete,  action,  location,  propertylist,  cq_accountmanager_config_informnewaccount_mail,  cq_accountmanager_config_informnewpwd_mail);
}


void OAIConfigmgrApiRequest::comAdobeCqAddressImplLocationLocationListServletRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.address.impl.location.LocationListServlet";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqAddressImplLocationLocationListServlet, handler, &OAIConfigmgrApiHandler::comAdobeCqAddressImplLocationLocationListServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 cq_address_location_default_max_results;   
    if(socket->queryString().keys().contains("cq_address_location_default_max_results")){
        fromStringValue(socket->queryString().value("cq_address_location_default_max_results"), cq_address_location_default_max_results);
    }
    


    emit comAdobeCqAddressImplLocationLocationListServlet( post,  apply,  _delete,  action,  location,  propertylist,  cq_address_location_default_max_results);
}


void OAIConfigmgrApiRequest::comAdobeCqAuditPurgeDamRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.audit.purge.Dam";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqAuditPurgeDam, handler, &OAIConfigmgrApiHandler::comAdobeCqAuditPurgeDam);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString auditlog_rule_name;   
    if(socket->queryString().keys().contains("auditlog_rule_name")){
        fromStringValue(socket->queryString().value("auditlog_rule_name"), auditlog_rule_name);
    }
    
    QString auditlog_rule_contentpath;   
    if(socket->queryString().keys().contains("auditlog_rule_contentpath")){
        fromStringValue(socket->queryString().value("auditlog_rule_contentpath"), auditlog_rule_contentpath);
    }
    
    qint32 auditlog_rule_minimumage;   
    if(socket->queryString().keys().contains("auditlog_rule_minimumage")){
        fromStringValue(socket->queryString().value("auditlog_rule_minimumage"), auditlog_rule_minimumage);
    }
    
    QString auditlog_rule_types;   
    if(socket->queryString().keys().contains("auditlog_rule_types")){
        fromStringValue(socket->queryString().value("auditlog_rule_types"), auditlog_rule_types);
    }
    


    emit comAdobeCqAuditPurgeDam( post,  apply,  _delete,  action,  location,  propertylist,  auditlog_rule_name,  auditlog_rule_contentpath,  auditlog_rule_minimumage,  auditlog_rule_types);
}


void OAIConfigmgrApiRequest::comAdobeCqAuditPurgePagesRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.audit.purge.Pages";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqAuditPurgePages, handler, &OAIConfigmgrApiHandler::comAdobeCqAuditPurgePages);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString auditlog_rule_name;   
    if(socket->queryString().keys().contains("auditlog_rule_name")){
        fromStringValue(socket->queryString().value("auditlog_rule_name"), auditlog_rule_name);
    }
    
    QString auditlog_rule_contentpath;   
    if(socket->queryString().keys().contains("auditlog_rule_contentpath")){
        fromStringValue(socket->queryString().value("auditlog_rule_contentpath"), auditlog_rule_contentpath);
    }
    
    qint32 auditlog_rule_minimumage;   
    if(socket->queryString().keys().contains("auditlog_rule_minimumage")){
        fromStringValue(socket->queryString().value("auditlog_rule_minimumage"), auditlog_rule_minimumage);
    }
    
    QString auditlog_rule_types;   
    if(socket->queryString().keys().contains("auditlog_rule_types")){
        fromStringValue(socket->queryString().value("auditlog_rule_types"), auditlog_rule_types);
    }
    


    emit comAdobeCqAuditPurgePages( post,  apply,  _delete,  action,  location,  propertylist,  auditlog_rule_name,  auditlog_rule_contentpath,  auditlog_rule_minimumage,  auditlog_rule_types);
}


void OAIConfigmgrApiRequest::comAdobeCqAuditPurgeReplicationRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.audit.purge.Replication";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqAuditPurgeReplication, handler, &OAIConfigmgrApiHandler::comAdobeCqAuditPurgeReplication);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString auditlog_rule_name;   
    if(socket->queryString().keys().contains("auditlog_rule_name")){
        fromStringValue(socket->queryString().value("auditlog_rule_name"), auditlog_rule_name);
    }
    
    QString auditlog_rule_contentpath;   
    if(socket->queryString().keys().contains("auditlog_rule_contentpath")){
        fromStringValue(socket->queryString().value("auditlog_rule_contentpath"), auditlog_rule_contentpath);
    }
    
    qint32 auditlog_rule_minimumage;   
    if(socket->queryString().keys().contains("auditlog_rule_minimumage")){
        fromStringValue(socket->queryString().value("auditlog_rule_minimumage"), auditlog_rule_minimumage);
    }
    
    QString auditlog_rule_types;   
    if(socket->queryString().keys().contains("auditlog_rule_types")){
        fromStringValue(socket->queryString().value("auditlog_rule_types"), auditlog_rule_types);
    }
    


    emit comAdobeCqAuditPurgeReplication( post,  apply,  _delete,  action,  location,  propertylist,  auditlog_rule_name,  auditlog_rule_contentpath,  auditlog_rule_minimumage,  auditlog_rule_types);
}


void OAIConfigmgrApiRequest::comAdobeCqCdnRewriterImplAWSCloudFrontRewriterRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.AWSCloudFrontRewriter";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqCdnRewriterImplAWSCloudFrontRewriter, handler, &OAIConfigmgrApiHandler::comAdobeCqCdnRewriterImplAWSCloudFrontRewriter);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 service_ranking;   
    if(socket->queryString().keys().contains("service_ranking")){
        fromStringValue(socket->queryString().value("service_ranking"), service_ranking);
    }
    
    QString keypair_id;   
    if(socket->queryString().keys().contains("keypair_id")){
        fromStringValue(socket->queryString().value("keypair_id"), keypair_id);
    }
    
    QString keypair_alias;   
    if(socket->queryString().keys().contains("keypair_alias")){
        fromStringValue(socket->queryString().value("keypair_alias"), keypair_alias);
    }
    
    QList<QString> cdnrewriter_attributes;   
    if(socket->queryString().keys().contains("cdnrewriter_attributes")){
        fromStringValue(socket->queryString().values("cdnrewriter_attributes"), cdnrewriter_attributes);
    }
    
    QString cdn_rewriter_distribution_domain;   
    if(socket->queryString().keys().contains("cdn_rewriter_distribution_domain")){
        fromStringValue(socket->queryString().value("cdn_rewriter_distribution_domain"), cdn_rewriter_distribution_domain);
    }
    


    emit comAdobeCqCdnRewriterImplAWSCloudFrontRewriter( post,  apply,  _delete,  action,  location,  propertylist,  service_ranking,  keypair_id,  keypair_alias,  cdnrewriter_attributes,  cdn_rewriter_distribution_domain);
}


void OAIConfigmgrApiRequest::comAdobeCqCdnRewriterImplCDNConfigServiceImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNConfigServiceImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqCdnRewriterImplCDNConfigServiceImpl, handler, &OAIConfigmgrApiHandler::comAdobeCqCdnRewriterImplCDNConfigServiceImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString cdn_config_distribution_domain;   
    if(socket->queryString().keys().contains("cdn_config_distribution_domain")){
        fromStringValue(socket->queryString().value("cdn_config_distribution_domain"), cdn_config_distribution_domain);
    }
    
    bool cdn_config_enable_rewriting;   
    if(socket->queryString().keys().contains("cdn_config_enable_rewriting")){
        fromStringValue(socket->queryString().value("cdn_config_enable_rewriting"), cdn_config_enable_rewriting);
    }
    
    QList<QString> cdn_config_path_prefixes;   
    if(socket->queryString().keys().contains("cdn_config_path_prefixes")){
        fromStringValue(socket->queryString().values("cdn_config_path_prefixes"), cdn_config_path_prefixes);
    }
    
    qint32 cdn_config_cdnttl;   
    if(socket->queryString().keys().contains("cdn_config_cdnttl")){
        fromStringValue(socket->queryString().value("cdn_config_cdnttl"), cdn_config_cdnttl);
    }
    
    QString cdn_config_application_protocol;   
    if(socket->queryString().keys().contains("cdn_config_application_protocol")){
        fromStringValue(socket->queryString().value("cdn_config_application_protocol"), cdn_config_application_protocol);
    }
    


    emit comAdobeCqCdnRewriterImplCDNConfigServiceImpl( post,  apply,  _delete,  action,  location,  propertylist,  cdn_config_distribution_domain,  cdn_config_enable_rewriting,  cdn_config_path_prefixes,  cdn_config_cdnttl,  cdn_config_application_protocol);
}


void OAIConfigmgrApiRequest::comAdobeCqCdnRewriterImplCDNRewriterRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNRewriter";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqCdnRewriterImplCDNRewriter, handler, &OAIConfigmgrApiHandler::comAdobeCqCdnRewriterImplCDNRewriter);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 service_ranking;   
    if(socket->queryString().keys().contains("service_ranking")){
        fromStringValue(socket->queryString().value("service_ranking"), service_ranking);
    }
    
    QList<QString> cdnrewriter_attributes;   
    if(socket->queryString().keys().contains("cdnrewriter_attributes")){
        fromStringValue(socket->queryString().values("cdnrewriter_attributes"), cdnrewriter_attributes);
    }
    
    QString cdn_rewriter_distribution_domain;   
    if(socket->queryString().keys().contains("cdn_rewriter_distribution_domain")){
        fromStringValue(socket->queryString().value("cdn_rewriter_distribution_domain"), cdn_rewriter_distribution_domain);
    }
    


    emit comAdobeCqCdnRewriterImplCDNRewriter( post,  apply,  _delete,  action,  location,  propertylist,  service_ranking,  cdnrewriter_attributes,  cdn_rewriter_distribution_domain);
}


void OAIConfigmgrApiRequest::comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.cloudconfig.core.impl.ConfigurationReplicationEventHandler";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle, handler, &OAIConfigmgrApiHandler::comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> flush_agents;   
    if(socket->queryString().keys().contains("flush_agents")){
        fromStringValue(socket->queryString().values("flush_agents"), flush_agents);
    }
    


    emit comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle( post,  apply,  _delete,  action,  location,  propertylist,  flush_agents);
}


void OAIConfigmgrApiRequest::comAdobeCqCommerceImplAssetDynamicImageHandlerRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.commerce.impl.asset.DynamicImageHandler";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqCommerceImplAssetDynamicImageHandler, handler, &OAIConfigmgrApiHandler::comAdobeCqCommerceImplAssetDynamicImageHandler);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool cq_commerce_asset_handler_active;   
    if(socket->queryString().keys().contains("cq_commerce_asset_handler_active")){
        fromStringValue(socket->queryString().value("cq_commerce_asset_handler_active"), cq_commerce_asset_handler_active);
    }
    
    QString cq_commerce_asset_handler_name;   
    if(socket->queryString().keys().contains("cq_commerce_asset_handler_name")){
        fromStringValue(socket->queryString().value("cq_commerce_asset_handler_name"), cq_commerce_asset_handler_name);
    }
    


    emit comAdobeCqCommerceImplAssetDynamicImageHandler( post,  apply,  _delete,  action,  location,  propertylist,  cq_commerce_asset_handler_active,  cq_commerce_asset_handler_name);
}


void OAIConfigmgrApiRequest::comAdobeCqCommerceImplAssetProductAssetHandlerProviderImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.commerce.impl.asset.ProductAssetHandlerProviderImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl, handler, &OAIConfigmgrApiHandler::comAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString cq_commerce_asset_handler_fallback;   
    if(socket->queryString().keys().contains("cq_commerce_asset_handler_fallback")){
        fromStringValue(socket->queryString().value("cq_commerce_asset_handler_fallback"), cq_commerce_asset_handler_fallback);
    }
    


    emit comAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl( post,  apply,  _delete,  action,  location,  propertylist,  cq_commerce_asset_handler_fallback);
}


void OAIConfigmgrApiRequest::comAdobeCqCommerceImplAssetStaticImageHandlerRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.commerce.impl.asset.StaticImageHandler";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqCommerceImplAssetStaticImageHandler, handler, &OAIConfigmgrApiHandler::comAdobeCqCommerceImplAssetStaticImageHandler);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool cq_commerce_asset_handler_active;   
    if(socket->queryString().keys().contains("cq_commerce_asset_handler_active")){
        fromStringValue(socket->queryString().value("cq_commerce_asset_handler_active"), cq_commerce_asset_handler_active);
    }
    
    QString cq_commerce_asset_handler_name;   
    if(socket->queryString().keys().contains("cq_commerce_asset_handler_name")){
        fromStringValue(socket->queryString().value("cq_commerce_asset_handler_name"), cq_commerce_asset_handler_name);
    }
    


    emit comAdobeCqCommerceImplAssetStaticImageHandler( post,  apply,  _delete,  action,  location,  propertylist,  cq_commerce_asset_handler_active,  cq_commerce_asset_handler_name);
}


void OAIConfigmgrApiRequest::comAdobeCqCommerceImplAssetVideoHandlerRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.commerce.impl.asset.VideoHandler";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqCommerceImplAssetVideoHandler, handler, &OAIConfigmgrApiHandler::comAdobeCqCommerceImplAssetVideoHandler);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool cq_commerce_asset_handler_active;   
    if(socket->queryString().keys().contains("cq_commerce_asset_handler_active")){
        fromStringValue(socket->queryString().value("cq_commerce_asset_handler_active"), cq_commerce_asset_handler_active);
    }
    
    QString cq_commerce_asset_handler_name;   
    if(socket->queryString().keys().contains("cq_commerce_asset_handler_name")){
        fromStringValue(socket->queryString().value("cq_commerce_asset_handler_name"), cq_commerce_asset_handler_name);
    }
    


    emit comAdobeCqCommerceImplAssetVideoHandler( post,  apply,  _delete,  action,  location,  propertylist,  cq_commerce_asset_handler_active,  cq_commerce_asset_handler_name);
}


void OAIConfigmgrApiRequest::comAdobeCqCommerceImplPromotionPromotionManagerImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.commerce.impl.promotion.PromotionManagerImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqCommerceImplPromotionPromotionManagerImpl, handler, &OAIConfigmgrApiHandler::comAdobeCqCommerceImplPromotionPromotionManagerImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString cq_commerce_promotion_root;   
    if(socket->queryString().keys().contains("cq_commerce_promotion_root")){
        fromStringValue(socket->queryString().value("cq_commerce_promotion_root"), cq_commerce_promotion_root);
    }
    


    emit comAdobeCqCommerceImplPromotionPromotionManagerImpl( post,  apply,  _delete,  action,  location,  propertylist,  cq_commerce_promotion_root);
}


void OAIConfigmgrApiRequest::comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.commerce.pim.impl.cataloggenerator.CatalogGeneratorImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl, handler, &OAIConfigmgrApiHandler::comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 cq_commerce_cataloggenerator_bucketsize;   
    if(socket->queryString().keys().contains("cq_commerce_cataloggenerator_bucketsize")){
        fromStringValue(socket->queryString().value("cq_commerce_cataloggenerator_bucketsize"), cq_commerce_cataloggenerator_bucketsize);
    }
    
    QString cq_commerce_cataloggenerator_bucketname;   
    if(socket->queryString().keys().contains("cq_commerce_cataloggenerator_bucketname")){
        fromStringValue(socket->queryString().value("cq_commerce_cataloggenerator_bucketname"), cq_commerce_cataloggenerator_bucketname);
    }
    
    QList<QString> cq_commerce_cataloggenerator_excludedtemplateproperties;   
    if(socket->queryString().keys().contains("cq_commerce_cataloggenerator_excludedtemplateproperties")){
        fromStringValue(socket->queryString().values("cq_commerce_cataloggenerator_excludedtemplateproperties"), cq_commerce_cataloggenerator_excludedtemplateproperties);
    }
    


    emit comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl( post,  apply,  _delete,  action,  location,  propertylist,  cq_commerce_cataloggenerator_bucketsize,  cq_commerce_cataloggenerator_bucketname,  cq_commerce_cataloggenerator_excludedtemplateproperties);
}


void OAIConfigmgrApiRequest::comAdobeCqCommercePimImplPageEventListenerRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.commerce.pim.impl.PageEventListener";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqCommercePimImplPageEventListener, handler, &OAIConfigmgrApiHandler::comAdobeCqCommercePimImplPageEventListener);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool cq_commerce_pageeventlistener_enabled;   
    if(socket->queryString().keys().contains("cq_commerce_pageeventlistener_enabled")){
        fromStringValue(socket->queryString().value("cq_commerce_pageeventlistener_enabled"), cq_commerce_pageeventlistener_enabled);
    }
    


    emit comAdobeCqCommercePimImplPageEventListener( post,  apply,  _delete,  action,  location,  propertylist,  cq_commerce_pageeventlistener_enabled);
}


void OAIConfigmgrApiRequest::comAdobeCqCommercePimImplProductfeedProductFeedServiceImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.commerce.pim.impl.productfeed.ProductFeedServiceImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqCommercePimImplProductfeedProductFeedServiceImpl, handler, &OAIConfigmgrApiHandler::comAdobeCqCommercePimImplProductfeedProductFeedServiceImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString feed_generator_algorithm;   
    if(socket->queryString().keys().contains("feed_generator_algorithm")){
        fromStringValue(socket->queryString().value("feed_generator_algorithm"), feed_generator_algorithm);
    }
    


    emit comAdobeCqCommercePimImplProductfeedProductFeedServiceImpl( post,  apply,  _delete,  action,  location,  propertylist,  feed_generator_algorithm);
}


void OAIConfigmgrApiRequest::comAdobeCqContentinsightImplReportingServicesSettingsProviderRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.contentinsight.impl.ReportingServicesSettingsProvider";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqContentinsightImplReportingServicesSettingsProvider, handler, &OAIConfigmgrApiHandler::comAdobeCqContentinsightImplReportingServicesSettingsProvider);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString reportingservices_url;   
    if(socket->queryString().keys().contains("reportingservices_url")){
        fromStringValue(socket->queryString().value("reportingservices_url"), reportingservices_url);
    }
    


    emit comAdobeCqContentinsightImplReportingServicesSettingsProvider( post,  apply,  _delete,  action,  location,  propertylist,  reportingservices_url);
}


void OAIConfigmgrApiRequest::comAdobeCqContentinsightImplServletsBrightEdgeProxyServletRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.BrightEdgeProxyServlet";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqContentinsightImplServletsBrightEdgeProxyServlet, handler, &OAIConfigmgrApiHandler::comAdobeCqContentinsightImplServletsBrightEdgeProxyServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString brightedge_url;   
    if(socket->queryString().keys().contains("brightedge_url")){
        fromStringValue(socket->queryString().value("brightedge_url"), brightedge_url);
    }
    


    emit comAdobeCqContentinsightImplServletsBrightEdgeProxyServlet( post,  apply,  _delete,  action,  location,  propertylist,  brightedge_url);
}


void OAIConfigmgrApiRequest::comAdobeCqContentinsightImplServletsReportingServicesProxyServleRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.ReportingServicesProxyServlet";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqContentinsightImplServletsReportingServicesProxyServle, handler, &OAIConfigmgrApiHandler::comAdobeCqContentinsightImplServletsReportingServicesProxyServle);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> reportingservices_proxy_whitelist;   
    if(socket->queryString().keys().contains("reportingservices_proxy_whitelist")){
        fromStringValue(socket->queryString().values("reportingservices_proxy_whitelist"), reportingservices_proxy_whitelist);
    }
    


    emit comAdobeCqContentinsightImplServletsReportingServicesProxyServle( post,  apply,  _delete,  action,  location,  propertylist,  reportingservices_proxy_whitelist);
}


void OAIConfigmgrApiRequest::comAdobeCqDamCfmImplComponentComponentConfigImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.dam.cfm.impl.component.ComponentConfigImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqDamCfmImplComponentComponentConfigImpl, handler, &OAIConfigmgrApiHandler::comAdobeCqDamCfmImplComponentComponentConfigImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString dam_cfm_component_resource_type;   
    if(socket->queryString().keys().contains("dam_cfm_component_resource_type")){
        fromStringValue(socket->queryString().value("dam_cfm_component_resource_type"), dam_cfm_component_resource_type);
    }
    
    QString dam_cfm_component_file_reference_prop;   
    if(socket->queryString().keys().contains("dam_cfm_component_file_reference_prop")){
        fromStringValue(socket->queryString().value("dam_cfm_component_file_reference_prop"), dam_cfm_component_file_reference_prop);
    }
    
    QString dam_cfm_component_elements_prop;   
    if(socket->queryString().keys().contains("dam_cfm_component_elements_prop")){
        fromStringValue(socket->queryString().value("dam_cfm_component_elements_prop"), dam_cfm_component_elements_prop);
    }
    
    QString dam_cfm_component_variation_prop;   
    if(socket->queryString().keys().contains("dam_cfm_component_variation_prop")){
        fromStringValue(socket->queryString().value("dam_cfm_component_variation_prop"), dam_cfm_component_variation_prop);
    }
    


    emit comAdobeCqDamCfmImplComponentComponentConfigImpl( post,  apply,  _delete,  action,  location,  propertylist,  dam_cfm_component_resource_type,  dam_cfm_component_file_reference_prop,  dam_cfm_component_elements_prop,  dam_cfm_component_variation_prop);
}


void OAIConfigmgrApiRequest::comAdobeCqDamCfmImplConfFeatureConfigImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.dam.cfm.impl.conf.FeatureConfigImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqDamCfmImplConfFeatureConfigImpl, handler, &OAIConfigmgrApiHandler::comAdobeCqDamCfmImplConfFeatureConfigImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> dam_cfm_resource_types;   
    if(socket->queryString().keys().contains("dam_cfm_resource_types")){
        fromStringValue(socket->queryString().values("dam_cfm_resource_types"), dam_cfm_resource_types);
    }
    
    QList<QString> dam_cfm_reference_properties;   
    if(socket->queryString().keys().contains("dam_cfm_reference_properties")){
        fromStringValue(socket->queryString().values("dam_cfm_reference_properties"), dam_cfm_reference_properties);
    }
    


    emit comAdobeCqDamCfmImplConfFeatureConfigImpl( post,  apply,  _delete,  action,  location,  propertylist,  dam_cfm_resource_types,  dam_cfm_reference_properties);
}


void OAIConfigmgrApiRequest::comAdobeCqDamCfmImplContentRewriterAssetProcessorRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.AssetProcessor";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqDamCfmImplContentRewriterAssetProcessor, handler, &OAIConfigmgrApiHandler::comAdobeCqDamCfmImplContentRewriterAssetProcessor);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString pipeline_type;   
    if(socket->queryString().keys().contains("pipeline_type")){
        fromStringValue(socket->queryString().value("pipeline_type"), pipeline_type);
    }
    


    emit comAdobeCqDamCfmImplContentRewriterAssetProcessor( post,  apply,  _delete,  action,  location,  propertylist,  pipeline_type);
}


void OAIConfigmgrApiRequest::comAdobeCqDamCfmImplContentRewriterParRangeFilterRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.ParRangeFilter";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqDamCfmImplContentRewriterParRangeFilter, handler, &OAIConfigmgrApiHandler::comAdobeCqDamCfmImplContentRewriterParRangeFilter);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString pipeline_type;   
    if(socket->queryString().keys().contains("pipeline_type")){
        fromStringValue(socket->queryString().value("pipeline_type"), pipeline_type);
    }
    


    emit comAdobeCqDamCfmImplContentRewriterParRangeFilter( post,  apply,  _delete,  action,  location,  propertylist,  pipeline_type);
}


void OAIConfigmgrApiRequest::comAdobeCqDamCfmImplContentRewriterPayloadFilterRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.PayloadFilter";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqDamCfmImplContentRewriterPayloadFilter, handler, &OAIConfigmgrApiHandler::comAdobeCqDamCfmImplContentRewriterPayloadFilter);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString pipeline_type;   
    if(socket->queryString().keys().contains("pipeline_type")){
        fromStringValue(socket->queryString().value("pipeline_type"), pipeline_type);
    }
    


    emit comAdobeCqDamCfmImplContentRewriterPayloadFilter( post,  apply,  _delete,  action,  location,  propertylist,  pipeline_type);
}


void OAIConfigmgrApiRequest::comAdobeCqDamDmProcessImagePTiffManagerImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.dam.dm.process.image.PTiffManagerImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqDamDmProcessImagePTiffManagerImpl, handler, &OAIConfigmgrApiHandler::comAdobeCqDamDmProcessImagePTiffManagerImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 max_memory;   
    if(socket->queryString().keys().contains("max_memory")){
        fromStringValue(socket->queryString().value("max_memory"), max_memory);
    }
    


    emit comAdobeCqDamDmProcessImagePTiffManagerImpl( post,  apply,  _delete,  action,  location,  propertylist,  max_memory);
}


void OAIConfigmgrApiRequest::comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.dam.ips.impl.replication.trigger.ReplicateOnModifyWorker";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker, handler, &OAIConfigmgrApiHandler::comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool dmreplicateonmodify_enabled;   
    if(socket->queryString().keys().contains("dmreplicateonmodify_enabled")){
        fromStringValue(socket->queryString().value("dmreplicateonmodify_enabled"), dmreplicateonmodify_enabled);
    }
    
    bool dmreplicateonmodify_forcesyncdeletes;   
    if(socket->queryString().keys().contains("dmreplicateonmodify_forcesyncdeletes")){
        fromStringValue(socket->queryString().value("dmreplicateonmodify_forcesyncdeletes"), dmreplicateonmodify_forcesyncdeletes);
    }
    


    emit comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker( post,  apply,  _delete,  action,  location,  propertylist,  dmreplicateonmodify_enabled,  dmreplicateonmodify_forcesyncdeletes);
}


void OAIConfigmgrApiRequest::comAdobeCqDamMacSyncHelperImplMACSyncClientImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.dam.mac.sync.helper.impl.MACSyncClientImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqDamMacSyncHelperImplMACSyncClientImpl, handler, &OAIConfigmgrApiHandler::comAdobeCqDamMacSyncHelperImplMACSyncClientImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 com_adobe_dam_mac_sync_client_so_timeout;   
    if(socket->queryString().keys().contains("com_adobe_dam_mac_sync_client_so_timeout")){
        fromStringValue(socket->queryString().value("com_adobe_dam_mac_sync_client_so_timeout"), com_adobe_dam_mac_sync_client_so_timeout);
    }
    


    emit comAdobeCqDamMacSyncHelperImplMACSyncClientImpl( post,  apply,  _delete,  action,  location,  propertylist,  com_adobe_dam_mac_sync_client_so_timeout);
}


void OAIConfigmgrApiRequest::comAdobeCqDamMacSyncImplDAMSyncServiceImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.dam.mac.sync.impl.DAMSyncServiceImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqDamMacSyncImplDAMSyncServiceImpl, handler, &OAIConfigmgrApiHandler::comAdobeCqDamMacSyncImplDAMSyncServiceImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> com_adobe_cq_dam_mac_sync_damsyncservice_registered_paths;   
    if(socket->queryString().keys().contains("com_adobe_cq_dam_mac_sync_damsyncservice_registered_paths")){
        fromStringValue(socket->queryString().values("com_adobe_cq_dam_mac_sync_damsyncservice_registered_paths"), com_adobe_cq_dam_mac_sync_damsyncservice_registered_paths);
    }
    
    bool com_adobe_cq_dam_mac_sync_damsyncservice_sync_renditions;   
    if(socket->queryString().keys().contains("com_adobe_cq_dam_mac_sync_damsyncservice_sync_renditions")){
        fromStringValue(socket->queryString().value("com_adobe_cq_dam_mac_sync_damsyncservice_sync_renditions"), com_adobe_cq_dam_mac_sync_damsyncservice_sync_renditions);
    }
    
    qint32 com_adobe_cq_dam_mac_sync_damsyncservice_replicate_thread_wait_ms;   
    if(socket->queryString().keys().contains("com_adobe_cq_dam_mac_sync_damsyncservice_replicate_thread_wait_ms")){
        fromStringValue(socket->queryString().value("com_adobe_cq_dam_mac_sync_damsyncservice_replicate_thread_wait_ms"), com_adobe_cq_dam_mac_sync_damsyncservice_replicate_thread_wait_ms);
    }
    
    QString com_adobe_cq_dam_mac_sync_damsyncservice_platform;   
    if(socket->queryString().keys().contains("com_adobe_cq_dam_mac_sync_damsyncservice_platform")){
        fromStringValue(socket->queryString().value("com_adobe_cq_dam_mac_sync_damsyncservice_platform"), com_adobe_cq_dam_mac_sync_damsyncservice_platform);
    }
    


    emit comAdobeCqDamMacSyncImplDAMSyncServiceImpl( post,  apply,  _delete,  action,  location,  propertylist,  com_adobe_cq_dam_mac_sync_damsyncservice_registered_paths,  com_adobe_cq_dam_mac_sync_damsyncservice_sync_renditions,  com_adobe_cq_dam_mac_sync_damsyncservice_replicate_thread_wait_ms,  com_adobe_cq_dam_mac_sync_damsyncservice_platform);
}


void OAIConfigmgrApiRequest::comAdobeCqDamProcessorNuiImplNuiAssetProcessorRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.dam.processor.nui.impl.NuiAssetProcessor";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqDamProcessorNuiImplNuiAssetProcessor, handler, &OAIConfigmgrApiHandler::comAdobeCqDamProcessorNuiImplNuiAssetProcessor);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool nui_enabled;   
    if(socket->queryString().keys().contains("nui_enabled")){
        fromStringValue(socket->queryString().value("nui_enabled"), nui_enabled);
    }
    
    QString nui_service_url;   
    if(socket->queryString().keys().contains("nui_service_url")){
        fromStringValue(socket->queryString().value("nui_service_url"), nui_service_url);
    }
    
    QString nui_api_key;   
    if(socket->queryString().keys().contains("nui_api_key")){
        fromStringValue(socket->queryString().value("nui_api_key"), nui_api_key);
    }
    


    emit comAdobeCqDamProcessorNuiImplNuiAssetProcessor( post,  apply,  _delete,  action,  location,  propertylist,  nui_enabled,  nui_service_url,  nui_api_key);
}


void OAIConfigmgrApiRequest::comAdobeCqDamS7imagingImplIsImageServerComponentRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.is.ImageServerComponent";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqDamS7imagingImplIsImageServerComponent, handler, &OAIConfigmgrApiHandler::comAdobeCqDamS7imagingImplIsImageServerComponent);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString tcp_port;   
    if(socket->queryString().keys().contains("tcp_port")){
        fromStringValue(socket->queryString().value("tcp_port"), tcp_port);
    }
    
    bool allow_remote_access;   
    if(socket->queryString().keys().contains("allow_remote_access")){
        fromStringValue(socket->queryString().value("allow_remote_access"), allow_remote_access);
    }
    
    QString max_render_rgn_pixels;   
    if(socket->queryString().keys().contains("max_render_rgn_pixels")){
        fromStringValue(socket->queryString().value("max_render_rgn_pixels"), max_render_rgn_pixels);
    }
    
    QString max_message_size;   
    if(socket->queryString().keys().contains("max_message_size")){
        fromStringValue(socket->queryString().value("max_message_size"), max_message_size);
    }
    
    qint32 random_access_url_timeout;   
    if(socket->queryString().keys().contains("random_access_url_timeout")){
        fromStringValue(socket->queryString().value("random_access_url_timeout"), random_access_url_timeout);
    }
    
    qint32 worker_threads;   
    if(socket->queryString().keys().contains("worker_threads")){
        fromStringValue(socket->queryString().value("worker_threads"), worker_threads);
    }
    


    emit comAdobeCqDamS7imagingImplIsImageServerComponent( post,  apply,  _delete,  action,  location,  propertylist,  tcp_port,  allow_remote_access,  max_render_rgn_pixels,  max_message_size,  random_access_url_timeout,  worker_threads);
}


void OAIConfigmgrApiRequest::comAdobeCqDamS7imagingImplPsPlatformServerServletRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.ps.PlatformServerServlet";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqDamS7imagingImplPsPlatformServerServlet, handler, &OAIConfigmgrApiHandler::comAdobeCqDamS7imagingImplPsPlatformServerServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool cache_enable;   
    if(socket->queryString().keys().contains("cache_enable")){
        fromStringValue(socket->queryString().value("cache_enable"), cache_enable);
    }
    
    QList<QString> cache_root_paths;   
    if(socket->queryString().keys().contains("cache_root_paths")){
        fromStringValue(socket->queryString().values("cache_root_paths"), cache_root_paths);
    }
    
    qint32 cache_max_size;   
    if(socket->queryString().keys().contains("cache_max_size")){
        fromStringValue(socket->queryString().value("cache_max_size"), cache_max_size);
    }
    
    qint32 cache_max_entries;   
    if(socket->queryString().keys().contains("cache_max_entries")){
        fromStringValue(socket->queryString().value("cache_max_entries"), cache_max_entries);
    }
    


    emit comAdobeCqDamS7imagingImplPsPlatformServerServlet( post,  apply,  _delete,  action,  location,  propertylist,  cache_enable,  cache_root_paths,  cache_max_size,  cache_max_entries);
}


void OAIConfigmgrApiRequest::comAdobeCqDamWebdavImplIoAssetIOHandlerRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.AssetIOHandler";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqDamWebdavImplIoAssetIOHandler, handler, &OAIConfigmgrApiHandler::comAdobeCqDamWebdavImplIoAssetIOHandler);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 service_ranking;   
    if(socket->queryString().keys().contains("service_ranking")){
        fromStringValue(socket->queryString().value("service_ranking"), service_ranking);
    }
    
    QString path_prefix;   
    if(socket->queryString().keys().contains("path_prefix")){
        fromStringValue(socket->queryString().value("path_prefix"), path_prefix);
    }
    
    bool create_version;   
    if(socket->queryString().keys().contains("create_version")){
        fromStringValue(socket->queryString().value("create_version"), create_version);
    }
    


    emit comAdobeCqDamWebdavImplIoAssetIOHandler( post,  apply,  _delete,  action,  location,  propertylist,  service_ranking,  path_prefix,  create_version);
}


void OAIConfigmgrApiRequest::comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.DamWebdavVersionLinkingJob";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob, handler, &OAIConfigmgrApiHandler::comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool cq_dam_webdav_version_linking_enable;   
    if(socket->queryString().keys().contains("cq_dam_webdav_version_linking_enable")){
        fromStringValue(socket->queryString().value("cq_dam_webdav_version_linking_enable"), cq_dam_webdav_version_linking_enable);
    }
    
    qint32 cq_dam_webdav_version_linking_scheduler_period;   
    if(socket->queryString().keys().contains("cq_dam_webdav_version_linking_scheduler_period")){
        fromStringValue(socket->queryString().value("cq_dam_webdav_version_linking_scheduler_period"), cq_dam_webdav_version_linking_scheduler_period);
    }
    
    qint32 cq_dam_webdav_version_linking_staging_timeout;   
    if(socket->queryString().keys().contains("cq_dam_webdav_version_linking_staging_timeout")){
        fromStringValue(socket->queryString().value("cq_dam_webdav_version_linking_staging_timeout"), cq_dam_webdav_version_linking_staging_timeout);
    }
    


    emit comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob( post,  apply,  _delete,  action,  location,  propertylist,  cq_dam_webdav_version_linking_enable,  cq_dam_webdav_version_linking_scheduler_period,  cq_dam_webdav_version_linking_staging_timeout);
}


void OAIConfigmgrApiRequest::comAdobeCqDamWebdavImplIoSpecialFilesHandlerRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.SpecialFilesHandler";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqDamWebdavImplIoSpecialFilesHandler, handler, &OAIConfigmgrApiHandler::comAdobeCqDamWebdavImplIoSpecialFilesHandler);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> com_day_cq_dam_core_impl_io_special_files_handler_filepatters;   
    if(socket->queryString().keys().contains("com_day_cq_dam_core_impl_io_special_files_handler_filepatters")){
        fromStringValue(socket->queryString().values("com_day_cq_dam_core_impl_io_special_files_handler_filepatters"), com_day_cq_dam_core_impl_io_special_files_handler_filepatters);
    }
    


    emit comAdobeCqDamWebdavImplIoSpecialFilesHandler( post,  apply,  _delete,  action,  location,  propertylist,  com_day_cq_dam_core_impl_io_special_files_handler_filepatters);
}


void OAIConfigmgrApiRequest::comAdobeCqDeserfwImplDeserializationFirewallImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.deserfw.impl.DeserializationFirewallImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqDeserfwImplDeserializationFirewallImpl, handler, &OAIConfigmgrApiHandler::comAdobeCqDeserfwImplDeserializationFirewallImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> firewall_deserialization_whitelist;   
    if(socket->queryString().keys().contains("firewall_deserialization_whitelist")){
        fromStringValue(socket->queryString().values("firewall_deserialization_whitelist"), firewall_deserialization_whitelist);
    }
    
    QList<QString> firewall_deserialization_blacklist;   
    if(socket->queryString().keys().contains("firewall_deserialization_blacklist")){
        fromStringValue(socket->queryString().values("firewall_deserialization_blacklist"), firewall_deserialization_blacklist);
    }
    
    QString firewall_deserialization_diagnostics;   
    if(socket->queryString().keys().contains("firewall_deserialization_diagnostics")){
        fromStringValue(socket->queryString().value("firewall_deserialization_diagnostics"), firewall_deserialization_diagnostics);
    }
    


    emit comAdobeCqDeserfwImplDeserializationFirewallImpl( post,  apply,  _delete,  action,  location,  propertylist,  firewall_deserialization_whitelist,  firewall_deserialization_blacklist,  firewall_deserialization_diagnostics);
}


void OAIConfigmgrApiRequest::comAdobeCqDtmImplServiceDTMWebServiceImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.dtm.impl.service.DTMWebServiceImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqDtmImplServiceDTMWebServiceImpl, handler, &OAIConfigmgrApiHandler::comAdobeCqDtmImplServiceDTMWebServiceImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 connection_timeout;   
    if(socket->queryString().keys().contains("connection_timeout")){
        fromStringValue(socket->queryString().value("connection_timeout"), connection_timeout);
    }
    
    qint32 socket_timeout;   
    if(socket->queryString().keys().contains("socket_timeout")){
        fromStringValue(socket->queryString().value("socket_timeout"), socket_timeout);
    }
    


    emit comAdobeCqDtmImplServiceDTMWebServiceImpl( post,  apply,  _delete,  action,  location,  propertylist,  connection_timeout,  socket_timeout);
}


void OAIConfigmgrApiRequest::comAdobeCqDtmImplServletsDTMDeployHookServletRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.dtm.impl.servlets.DTMDeployHookServlet";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqDtmImplServletsDTMDeployHookServlet, handler, &OAIConfigmgrApiHandler::comAdobeCqDtmImplServletsDTMDeployHookServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> dtm_staging_ip_whitelist;   
    if(socket->queryString().keys().contains("dtm_staging_ip_whitelist")){
        fromStringValue(socket->queryString().values("dtm_staging_ip_whitelist"), dtm_staging_ip_whitelist);
    }
    
    QList<QString> dtm_production_ip_whitelist;   
    if(socket->queryString().keys().contains("dtm_production_ip_whitelist")){
        fromStringValue(socket->queryString().values("dtm_production_ip_whitelist"), dtm_production_ip_whitelist);
    }
    


    emit comAdobeCqDtmImplServletsDTMDeployHookServlet( post,  apply,  _delete,  action,  location,  propertylist,  dtm_staging_ip_whitelist,  dtm_production_ip_whitelist);
}


void OAIConfigmgrApiRequest::comAdobeCqDtmReactorImplServiceWebServiceImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.dtm.reactor.impl.service.WebServiceImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqDtmReactorImplServiceWebServiceImpl, handler, &OAIConfigmgrApiHandler::comAdobeCqDtmReactorImplServiceWebServiceImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString endpoint_uri;   
    if(socket->queryString().keys().contains("endpoint_uri")){
        fromStringValue(socket->queryString().value("endpoint_uri"), endpoint_uri);
    }
    
    qint32 connection_timeout;   
    if(socket->queryString().keys().contains("connection_timeout")){
        fromStringValue(socket->queryString().value("connection_timeout"), connection_timeout);
    }
    
    qint32 socket_timeout;   
    if(socket->queryString().keys().contains("socket_timeout")){
        fromStringValue(socket->queryString().value("socket_timeout"), socket_timeout);
    }
    


    emit comAdobeCqDtmReactorImplServiceWebServiceImpl( post,  apply,  _delete,  action,  location,  propertylist,  endpoint_uri,  connection_timeout,  socket_timeout);
}


void OAIConfigmgrApiRequest::comAdobeCqExperiencelogImplExperienceLogConfigServletRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.experiencelog.impl.ExperienceLogConfigServlet";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqExperiencelogImplExperienceLogConfigServlet, handler, &OAIConfigmgrApiHandler::comAdobeCqExperiencelogImplExperienceLogConfigServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool enabled;   
    if(socket->queryString().keys().contains("enabled")){
        fromStringValue(socket->queryString().value("enabled"), enabled);
    }
    
    QList<QString> disabled_for_groups;   
    if(socket->queryString().keys().contains("disabled_for_groups")){
        fromStringValue(socket->queryString().values("disabled_for_groups"), disabled_for_groups);
    }
    


    emit comAdobeCqExperiencelogImplExperienceLogConfigServlet( post,  apply,  _delete,  action,  location,  propertylist,  enabled,  disabled_for_groups);
}


void OAIConfigmgrApiRequest::comAdobeCqHcContentPackagesHealthCheckRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.hc.ContentPackagesHealthCheck";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqHcContentPackagesHealthCheck, handler, &OAIConfigmgrApiHandler::comAdobeCqHcContentPackagesHealthCheck);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString hc_name;   
    if(socket->queryString().keys().contains("hc_name")){
        fromStringValue(socket->queryString().value("hc_name"), hc_name);
    }
    
    QList<QString> hc_tags;   
    if(socket->queryString().keys().contains("hc_tags")){
        fromStringValue(socket->queryString().values("hc_tags"), hc_tags);
    }
    
    QString hc_mbean_name;   
    if(socket->queryString().keys().contains("hc_mbean_name")){
        fromStringValue(socket->queryString().value("hc_mbean_name"), hc_mbean_name);
    }
    
    QList<QString> package_names;   
    if(socket->queryString().keys().contains("package_names")){
        fromStringValue(socket->queryString().values("package_names"), package_names);
    }
    


    emit comAdobeCqHcContentPackagesHealthCheck( post,  apply,  _delete,  action,  location,  propertylist,  hc_name,  hc_tags,  hc_mbean_name,  package_names);
}


void OAIConfigmgrApiRequest::comAdobeCqHistoryImplHistoryRequestFilterRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.history.impl.HistoryRequestFilter";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqHistoryImplHistoryRequestFilter, handler, &OAIConfigmgrApiHandler::comAdobeCqHistoryImplHistoryRequestFilter);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> history_request_filter_excluded_selectors;   
    if(socket->queryString().keys().contains("history_request_filter_excluded_selectors")){
        fromStringValue(socket->queryString().values("history_request_filter_excluded_selectors"), history_request_filter_excluded_selectors);
    }
    
    QList<QString> history_request_filter_excluded_extensions;   
    if(socket->queryString().keys().contains("history_request_filter_excluded_extensions")){
        fromStringValue(socket->queryString().values("history_request_filter_excluded_extensions"), history_request_filter_excluded_extensions);
    }
    


    emit comAdobeCqHistoryImplHistoryRequestFilter( post,  apply,  _delete,  action,  location,  propertylist,  history_request_filter_excluded_selectors,  history_request_filter_excluded_extensions);
}


void OAIConfigmgrApiRequest::comAdobeCqHistoryImplHistoryServiceImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.history.impl.HistoryServiceImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqHistoryImplHistoryServiceImpl, handler, &OAIConfigmgrApiHandler::comAdobeCqHistoryImplHistoryServiceImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> history_service_resource_types;   
    if(socket->queryString().keys().contains("history_service_resource_types")){
        fromStringValue(socket->queryString().values("history_service_resource_types"), history_service_resource_types);
    }
    
    QList<QString> history_service_path_filter;   
    if(socket->queryString().keys().contains("history_service_path_filter")){
        fromStringValue(socket->queryString().values("history_service_path_filter"), history_service_path_filter);
    }
    


    emit comAdobeCqHistoryImplHistoryServiceImpl( post,  apply,  _delete,  action,  location,  propertylist,  history_service_resource_types,  history_service_path_filter);
}


void OAIConfigmgrApiRequest::comAdobeCqInboxImplTypeproviderItemTypeProviderRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.inbox.impl.typeprovider.ItemTypeProvider";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqInboxImplTypeproviderItemTypeProvider, handler, &OAIConfigmgrApiHandler::comAdobeCqInboxImplTypeproviderItemTypeProvider);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> inbox_impl_typeprovider_registrypaths;   
    if(socket->queryString().keys().contains("inbox_impl_typeprovider_registrypaths")){
        fromStringValue(socket->queryString().values("inbox_impl_typeprovider_registrypaths"), inbox_impl_typeprovider_registrypaths);
    }
    
    QList<QString> inbox_impl_typeprovider_legacypaths;   
    if(socket->queryString().keys().contains("inbox_impl_typeprovider_legacypaths")){
        fromStringValue(socket->queryString().values("inbox_impl_typeprovider_legacypaths"), inbox_impl_typeprovider_legacypaths);
    }
    
    QString inbox_impl_typeprovider_defaulturl_failureitem;   
    if(socket->queryString().keys().contains("inbox_impl_typeprovider_defaulturl_failureitem")){
        fromStringValue(socket->queryString().value("inbox_impl_typeprovider_defaulturl_failureitem"), inbox_impl_typeprovider_defaulturl_failureitem);
    }
    
    QString inbox_impl_typeprovider_defaulturl_workitem;   
    if(socket->queryString().keys().contains("inbox_impl_typeprovider_defaulturl_workitem")){
        fromStringValue(socket->queryString().value("inbox_impl_typeprovider_defaulturl_workitem"), inbox_impl_typeprovider_defaulturl_workitem);
    }
    
    QString inbox_impl_typeprovider_defaulturl_task;   
    if(socket->queryString().keys().contains("inbox_impl_typeprovider_defaulturl_task")){
        fromStringValue(socket->queryString().value("inbox_impl_typeprovider_defaulturl_task"), inbox_impl_typeprovider_defaulturl_task);
    }
    


    emit comAdobeCqInboxImplTypeproviderItemTypeProvider( post,  apply,  _delete,  action,  location,  propertylist,  inbox_impl_typeprovider_registrypaths,  inbox_impl_typeprovider_legacypaths,  inbox_impl_typeprovider_defaulturl_failureitem,  inbox_impl_typeprovider_defaulturl_workitem,  inbox_impl_typeprovider_defaulturl_task);
}


void OAIConfigmgrApiRequest::comAdobeCqProjectsImplServletProjectImageServletRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.projects.impl.servlet.ProjectImageServlet";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqProjectsImplServletProjectImageServlet, handler, &OAIConfigmgrApiHandler::comAdobeCqProjectsImplServletProjectImageServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString image_quality;   
    if(socket->queryString().keys().contains("image_quality")){
        fromStringValue(socket->queryString().value("image_quality"), image_quality);
    }
    
    QString image_supported_resolutions;   
    if(socket->queryString().keys().contains("image_supported_resolutions")){
        fromStringValue(socket->queryString().value("image_supported_resolutions"), image_supported_resolutions);
    }
    


    emit comAdobeCqProjectsImplServletProjectImageServlet( post,  apply,  _delete,  action,  location,  propertylist,  image_quality,  image_supported_resolutions);
}


void OAIConfigmgrApiRequest::comAdobeCqProjectsPurgeSchedulerRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.projects.purge.Scheduler";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqProjectsPurgeScheduler, handler, &OAIConfigmgrApiHandler::comAdobeCqProjectsPurgeScheduler);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString scheduledpurge_name;   
    if(socket->queryString().keys().contains("scheduledpurge_name")){
        fromStringValue(socket->queryString().value("scheduledpurge_name"), scheduledpurge_name);
    }
    
    bool scheduledpurge_purge_active;   
    if(socket->queryString().keys().contains("scheduledpurge_purge_active")){
        fromStringValue(socket->queryString().value("scheduledpurge_purge_active"), scheduledpurge_purge_active);
    }
    
    QList<QString> scheduledpurge_templates;   
    if(socket->queryString().keys().contains("scheduledpurge_templates")){
        fromStringValue(socket->queryString().values("scheduledpurge_templates"), scheduledpurge_templates);
    }
    
    bool scheduledpurge_purge_groups;   
    if(socket->queryString().keys().contains("scheduledpurge_purge_groups")){
        fromStringValue(socket->queryString().value("scheduledpurge_purge_groups"), scheduledpurge_purge_groups);
    }
    
    bool scheduledpurge_purge_assets;   
    if(socket->queryString().keys().contains("scheduledpurge_purge_assets")){
        fromStringValue(socket->queryString().value("scheduledpurge_purge_assets"), scheduledpurge_purge_assets);
    }
    
    bool scheduledpurge_terminate_running_workflows;   
    if(socket->queryString().keys().contains("scheduledpurge_terminate_running_workflows")){
        fromStringValue(socket->queryString().value("scheduledpurge_terminate_running_workflows"), scheduledpurge_terminate_running_workflows);
    }
    
    qint32 scheduledpurge_daysold;   
    if(socket->queryString().keys().contains("scheduledpurge_daysold")){
        fromStringValue(socket->queryString().value("scheduledpurge_daysold"), scheduledpurge_daysold);
    }
    
    qint32 scheduledpurge_save_threshold;   
    if(socket->queryString().keys().contains("scheduledpurge_save_threshold")){
        fromStringValue(socket->queryString().value("scheduledpurge_save_threshold"), scheduledpurge_save_threshold);
    }
    


    emit comAdobeCqProjectsPurgeScheduler( post,  apply,  _delete,  action,  location,  propertylist,  scheduledpurge_name,  scheduledpurge_purge_active,  scheduledpurge_templates,  scheduledpurge_purge_groups,  scheduledpurge_purge_assets,  scheduledpurge_terminate_running_workflows,  scheduledpurge_daysold,  scheduledpurge_save_threshold);
}


void OAIConfigmgrApiRequest::comAdobeCqScheduledExporterImplScheduledExporterImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.scheduled.exporter.impl.ScheduledExporterImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqScheduledExporterImplScheduledExporterImpl, handler, &OAIConfigmgrApiHandler::comAdobeCqScheduledExporterImplScheduledExporterImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> include_paths;   
    if(socket->queryString().keys().contains("include_paths")){
        fromStringValue(socket->queryString().values("include_paths"), include_paths);
    }
    
    QString exporter_user;   
    if(socket->queryString().keys().contains("exporter_user")){
        fromStringValue(socket->queryString().value("exporter_user"), exporter_user);
    }
    


    emit comAdobeCqScheduledExporterImplScheduledExporterImpl( post,  apply,  _delete,  action,  location,  propertylist,  include_paths,  exporter_user);
}


void OAIConfigmgrApiRequest::comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.screens.analytics.impl.ScreensAnalyticsServiceImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl, handler, &OAIConfigmgrApiHandler::comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString com_adobe_cq_screens_analytics_impl_url;   
    if(socket->queryString().keys().contains("com_adobe_cq_screens_analytics_impl_url")){
        fromStringValue(socket->queryString().value("com_adobe_cq_screens_analytics_impl_url"), com_adobe_cq_screens_analytics_impl_url);
    }
    
    QString com_adobe_cq_screens_analytics_impl_apikey;   
    if(socket->queryString().keys().contains("com_adobe_cq_screens_analytics_impl_apikey")){
        fromStringValue(socket->queryString().value("com_adobe_cq_screens_analytics_impl_apikey"), com_adobe_cq_screens_analytics_impl_apikey);
    }
    
    QString com_adobe_cq_screens_analytics_impl_project;   
    if(socket->queryString().keys().contains("com_adobe_cq_screens_analytics_impl_project")){
        fromStringValue(socket->queryString().value("com_adobe_cq_screens_analytics_impl_project"), com_adobe_cq_screens_analytics_impl_project);
    }
    
    QString com_adobe_cq_screens_analytics_impl_environment;   
    if(socket->queryString().keys().contains("com_adobe_cq_screens_analytics_impl_environment")){
        fromStringValue(socket->queryString().value("com_adobe_cq_screens_analytics_impl_environment"), com_adobe_cq_screens_analytics_impl_environment);
    }
    
    qint32 com_adobe_cq_screens_analytics_impl_send_frequency;   
    if(socket->queryString().keys().contains("com_adobe_cq_screens_analytics_impl_send_frequency")){
        fromStringValue(socket->queryString().value("com_adobe_cq_screens_analytics_impl_send_frequency"), com_adobe_cq_screens_analytics_impl_send_frequency);
    }
    


    emit comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl( post,  apply,  _delete,  action,  location,  propertylist,  com_adobe_cq_screens_analytics_impl_url,  com_adobe_cq_screens_analytics_impl_apikey,  com_adobe_cq_screens_analytics_impl_project,  com_adobe_cq_screens_analytics_impl_environment,  com_adobe_cq_screens_analytics_impl_send_frequency);
}


void OAIConfigmgrApiRequest::comAdobeCqScreensDeviceImplDeviceServiceRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.screens.device.impl.DeviceService";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqScreensDeviceImplDeviceService, handler, &OAIConfigmgrApiHandler::comAdobeCqScreensDeviceImplDeviceService);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 com_adobe_aem_screens_player_pingfrequency;   
    if(socket->queryString().keys().contains("com_adobe_aem_screens_player_pingfrequency")){
        fromStringValue(socket->queryString().value("com_adobe_aem_screens_player_pingfrequency"), com_adobe_aem_screens_player_pingfrequency);
    }
    
    QString com_adobe_aem_screens_device_pasword_specialchars;   
    if(socket->queryString().keys().contains("com_adobe_aem_screens_device_pasword_specialchars")){
        fromStringValue(socket->queryString().value("com_adobe_aem_screens_device_pasword_specialchars"), com_adobe_aem_screens_device_pasword_specialchars);
    }
    
    qint32 com_adobe_aem_screens_device_pasword_minlowercasechars;   
    if(socket->queryString().keys().contains("com_adobe_aem_screens_device_pasword_minlowercasechars")){
        fromStringValue(socket->queryString().value("com_adobe_aem_screens_device_pasword_minlowercasechars"), com_adobe_aem_screens_device_pasword_minlowercasechars);
    }
    
    qint32 com_adobe_aem_screens_device_pasword_minuppercasechars;   
    if(socket->queryString().keys().contains("com_adobe_aem_screens_device_pasword_minuppercasechars")){
        fromStringValue(socket->queryString().value("com_adobe_aem_screens_device_pasword_minuppercasechars"), com_adobe_aem_screens_device_pasword_minuppercasechars);
    }
    
    qint32 com_adobe_aem_screens_device_pasword_minnumberchars;   
    if(socket->queryString().keys().contains("com_adobe_aem_screens_device_pasword_minnumberchars")){
        fromStringValue(socket->queryString().value("com_adobe_aem_screens_device_pasword_minnumberchars"), com_adobe_aem_screens_device_pasword_minnumberchars);
    }
    
    qint32 com_adobe_aem_screens_device_pasword_minspecialchars;   
    if(socket->queryString().keys().contains("com_adobe_aem_screens_device_pasword_minspecialchars")){
        fromStringValue(socket->queryString().value("com_adobe_aem_screens_device_pasword_minspecialchars"), com_adobe_aem_screens_device_pasword_minspecialchars);
    }
    
    qint32 com_adobe_aem_screens_device_pasword_minlength;   
    if(socket->queryString().keys().contains("com_adobe_aem_screens_device_pasword_minlength")){
        fromStringValue(socket->queryString().value("com_adobe_aem_screens_device_pasword_minlength"), com_adobe_aem_screens_device_pasword_minlength);
    }
    


    emit comAdobeCqScreensDeviceImplDeviceService( post,  apply,  _delete,  action,  location,  propertylist,  com_adobe_aem_screens_player_pingfrequency,  com_adobe_aem_screens_device_pasword_specialchars,  com_adobe_aem_screens_device_pasword_minlowercasechars,  com_adobe_aem_screens_device_pasword_minuppercasechars,  com_adobe_aem_screens_device_pasword_minnumberchars,  com_adobe_aem_screens_device_pasword_minspecialchars,  com_adobe_aem_screens_device_pasword_minlength);
}


void OAIConfigmgrApiRequest::comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.screens.device.registration.impl.RegistrationServiceImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl, handler, &OAIConfigmgrApiHandler::comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 device_registration_timeout;   
    if(socket->queryString().keys().contains("device_registration_timeout")){
        fromStringValue(socket->queryString().value("device_registration_timeout"), device_registration_timeout);
    }
    


    emit comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl( post,  apply,  _delete,  action,  location,  propertylist,  device_registration_timeout);
}


void OAIConfigmgrApiRequest::comAdobeCqScreensImplHandlerChannelsUpdateHandlerRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.screens.impl.handler.ChannelsUpdateHandler";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqScreensImplHandlerChannelsUpdateHandler, handler, &OAIConfigmgrApiHandler::comAdobeCqScreensImplHandlerChannelsUpdateHandler);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> cq_pagesupdatehandler_imageresourcetypes;   
    if(socket->queryString().keys().contains("cq_pagesupdatehandler_imageresourcetypes")){
        fromStringValue(socket->queryString().values("cq_pagesupdatehandler_imageresourcetypes"), cq_pagesupdatehandler_imageresourcetypes);
    }
    
    QList<QString> cq_pagesupdatehandler_productresourcetypes;   
    if(socket->queryString().keys().contains("cq_pagesupdatehandler_productresourcetypes")){
        fromStringValue(socket->queryString().values("cq_pagesupdatehandler_productresourcetypes"), cq_pagesupdatehandler_productresourcetypes);
    }
    
    QList<QString> cq_pagesupdatehandler_videoresourcetypes;   
    if(socket->queryString().keys().contains("cq_pagesupdatehandler_videoresourcetypes")){
        fromStringValue(socket->queryString().values("cq_pagesupdatehandler_videoresourcetypes"), cq_pagesupdatehandler_videoresourcetypes);
    }
    
    QList<QString> cq_pagesupdatehandler_dynamicsequenceresourcetypes;   
    if(socket->queryString().keys().contains("cq_pagesupdatehandler_dynamicsequenceresourcetypes")){
        fromStringValue(socket->queryString().values("cq_pagesupdatehandler_dynamicsequenceresourcetypes"), cq_pagesupdatehandler_dynamicsequenceresourcetypes);
    }
    
    QList<QString> cq_pagesupdatehandler_previewmodepaths;   
    if(socket->queryString().keys().contains("cq_pagesupdatehandler_previewmodepaths")){
        fromStringValue(socket->queryString().values("cq_pagesupdatehandler_previewmodepaths"), cq_pagesupdatehandler_previewmodepaths);
    }
    


    emit comAdobeCqScreensImplHandlerChannelsUpdateHandler( post,  apply,  _delete,  action,  location,  propertylist,  cq_pagesupdatehandler_imageresourcetypes,  cq_pagesupdatehandler_productresourcetypes,  cq_pagesupdatehandler_videoresourcetypes,  cq_pagesupdatehandler_dynamicsequenceresourcetypes,  cq_pagesupdatehandler_previewmodepaths);
}


void OAIConfigmgrApiRequest::comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.screens.impl.jobs.DistributedDevicesStatiUpdateJob";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob, handler, &OAIConfigmgrApiHandler::comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString scheduler_expression;   
    if(socket->queryString().keys().contains("scheduler_expression")){
        fromStringValue(socket->queryString().value("scheduler_expression"), scheduler_expression);
    }
    


    emit comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob( post,  apply,  _delete,  action,  location,  propertylist,  scheduler_expression);
}


void OAIConfigmgrApiRequest::comAdobeCqScreensImplRemoteImplDistributedHttpClientImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.screens.impl.remote.impl.DistributedHttpClientImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqScreensImplRemoteImplDistributedHttpClientImpl, handler, &OAIConfigmgrApiHandler::comAdobeCqScreensImplRemoteImplDistributedHttpClientImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 com_adobe_aem_screens_impl_remote_request_timeout;   
    if(socket->queryString().keys().contains("com_adobe_aem_screens_impl_remote_request_timeout")){
        fromStringValue(socket->queryString().value("com_adobe_aem_screens_impl_remote_request_timeout"), com_adobe_aem_screens_impl_remote_request_timeout);
    }
    


    emit comAdobeCqScreensImplRemoteImplDistributedHttpClientImpl( post,  apply,  _delete,  action,  location,  propertylist,  com_adobe_aem_screens_impl_remote_request_timeout);
}


void OAIConfigmgrApiRequest::comAdobeCqScreensImplScreensChannelPostProcessorRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.screens.impl.ScreensChannelPostProcessor";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqScreensImplScreensChannelPostProcessor, handler, &OAIConfigmgrApiHandler::comAdobeCqScreensImplScreensChannelPostProcessor);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> screens_channels_properties_to_remove;   
    if(socket->queryString().keys().contains("screens_channels_properties_to_remove")){
        fromStringValue(socket->queryString().values("screens_channels_properties_to_remove"), screens_channels_properties_to_remove);
    }
    


    emit comAdobeCqScreensImplScreensChannelPostProcessor( post,  apply,  _delete,  action,  location,  propertylist,  screens_channels_properties_to_remove);
}


void OAIConfigmgrApiRequest::comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl, handler, &OAIConfigmgrApiHandler::comAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_project_path;   
    if(socket->queryString().keys().contains("com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_project_path")){
        fromStringValue(socket->queryString().values("com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_project_path"), com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_project_path);
    }
    
    QString com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_schedule_frequency;   
    if(socket->queryString().keys().contains("com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_schedule_frequency")){
        fromStringValue(socket->queryString().value("com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_schedule_frequency"), com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_schedule_frequency);
    }
    
    qint32 com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_ping_timeout;   
    if(socket->queryString().keys().contains("com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_ping_timeout")){
        fromStringValue(socket->queryString().value("com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_ping_timeout"), com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_ping_timeout);
    }
    
    QString com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_recipients;   
    if(socket->queryString().keys().contains("com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_recipients")){
        fromStringValue(socket->queryString().value("com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_recipients"), com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_recipients);
    }
    
    QString com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpserver;   
    if(socket->queryString().keys().contains("com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpserver")){
        fromStringValue(socket->queryString().value("com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpserver"), com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpserver);
    }
    
    qint32 com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpport;   
    if(socket->queryString().keys().contains("com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpport")){
        fromStringValue(socket->queryString().value("com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpport"), com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpport);
    }
    
    bool com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_usetls;   
    if(socket->queryString().keys().contains("com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_usetls")){
        fromStringValue(socket->queryString().value("com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_usetls"), com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_usetls);
    }
    
    QString com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_username;   
    if(socket->queryString().keys().contains("com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_username")){
        fromStringValue(socket->queryString().value("com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_username"), com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_username);
    }
    
    QString com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_password;   
    if(socket->queryString().keys().contains("com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_password")){
        fromStringValue(socket->queryString().value("com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_password"), com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_password);
    }
    


    emit comAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl( post,  apply,  _delete,  action,  location,  propertylist,  com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_project_path,  com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_schedule_frequency,  com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_ping_timeout,  com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_recipients,  com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpserver,  com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpport,  com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_usetls,  com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_username,  com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_password);
}


void OAIConfigmgrApiRequest::comAdobeCqScreensMqActivemqImplArtemisJMSProviderRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.screens.mq.activemq.impl.ArtemisJMSProvider";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqScreensMqActivemqImplArtemisJMSProvider, handler, &OAIConfigmgrApiHandler::comAdobeCqScreensMqActivemqImplArtemisJMSProvider);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 service_ranking;   
    if(socket->queryString().keys().contains("service_ranking")){
        fromStringValue(socket->queryString().value("service_ranking"), service_ranking);
    }
    
    qint32 global_size;   
    if(socket->queryString().keys().contains("global_size")){
        fromStringValue(socket->queryString().value("global_size"), global_size);
    }
    
    qint32 max_disk_usage;   
    if(socket->queryString().keys().contains("max_disk_usage")){
        fromStringValue(socket->queryString().value("max_disk_usage"), max_disk_usage);
    }
    
    bool persistence_enabled;   
    if(socket->queryString().keys().contains("persistence_enabled")){
        fromStringValue(socket->queryString().value("persistence_enabled"), persistence_enabled);
    }
    
    qint32 thread_pool_max_size;   
    if(socket->queryString().keys().contains("thread_pool_max_size")){
        fromStringValue(socket->queryString().value("thread_pool_max_size"), thread_pool_max_size);
    }
    
    qint32 scheduled_thread_pool_max_size;   
    if(socket->queryString().keys().contains("scheduled_thread_pool_max_size")){
        fromStringValue(socket->queryString().value("scheduled_thread_pool_max_size"), scheduled_thread_pool_max_size);
    }
    
    qint32 graceful_shutdown_timeout;   
    if(socket->queryString().keys().contains("graceful_shutdown_timeout")){
        fromStringValue(socket->queryString().value("graceful_shutdown_timeout"), graceful_shutdown_timeout);
    }
    
    QList<QString> queues;   
    if(socket->queryString().keys().contains("queues")){
        fromStringValue(socket->queryString().values("queues"), queues);
    }
    
    QList<QString> topics;   
    if(socket->queryString().keys().contains("topics")){
        fromStringValue(socket->queryString().values("topics"), topics);
    }
    
    qint32 addresses_max_delivery_attempts;   
    if(socket->queryString().keys().contains("addresses_max_delivery_attempts")){
        fromStringValue(socket->queryString().value("addresses_max_delivery_attempts"), addresses_max_delivery_attempts);
    }
    
    qint32 addresses_expiry_delay;   
    if(socket->queryString().keys().contains("addresses_expiry_delay")){
        fromStringValue(socket->queryString().value("addresses_expiry_delay"), addresses_expiry_delay);
    }
    
    QString addresses_address_full_message_policy;   
    if(socket->queryString().keys().contains("addresses_address_full_message_policy")){
        fromStringValue(socket->queryString().value("addresses_address_full_message_policy"), addresses_address_full_message_policy);
    }
    
    qint32 addresses_max_size_bytes;   
    if(socket->queryString().keys().contains("addresses_max_size_bytes")){
        fromStringValue(socket->queryString().value("addresses_max_size_bytes"), addresses_max_size_bytes);
    }
    
    qint32 addresses_page_size_bytes;   
    if(socket->queryString().keys().contains("addresses_page_size_bytes")){
        fromStringValue(socket->queryString().value("addresses_page_size_bytes"), addresses_page_size_bytes);
    }
    
    qint32 addresses_page_cache_max_size;   
    if(socket->queryString().keys().contains("addresses_page_cache_max_size")){
        fromStringValue(socket->queryString().value("addresses_page_cache_max_size"), addresses_page_cache_max_size);
    }
    
    QString cluster_user;   
    if(socket->queryString().keys().contains("cluster_user")){
        fromStringValue(socket->queryString().value("cluster_user"), cluster_user);
    }
    
    QString cluster_password;   
    if(socket->queryString().keys().contains("cluster_password")){
        fromStringValue(socket->queryString().value("cluster_password"), cluster_password);
    }
    
    qint32 cluster_call_timeout;   
    if(socket->queryString().keys().contains("cluster_call_timeout")){
        fromStringValue(socket->queryString().value("cluster_call_timeout"), cluster_call_timeout);
    }
    
    qint32 cluster_call_failover_timeout;   
    if(socket->queryString().keys().contains("cluster_call_failover_timeout")){
        fromStringValue(socket->queryString().value("cluster_call_failover_timeout"), cluster_call_failover_timeout);
    }
    
    qint32 cluster_client_failure_check_period;   
    if(socket->queryString().keys().contains("cluster_client_failure_check_period")){
        fromStringValue(socket->queryString().value("cluster_client_failure_check_period"), cluster_client_failure_check_period);
    }
    
    qint32 cluster_notification_attempts;   
    if(socket->queryString().keys().contains("cluster_notification_attempts")){
        fromStringValue(socket->queryString().value("cluster_notification_attempts"), cluster_notification_attempts);
    }
    
    qint32 cluster_notification_interval;   
    if(socket->queryString().keys().contains("cluster_notification_interval")){
        fromStringValue(socket->queryString().value("cluster_notification_interval"), cluster_notification_interval);
    }
    
    qint32 id_cache_size;   
    if(socket->queryString().keys().contains("id_cache_size")){
        fromStringValue(socket->queryString().value("id_cache_size"), id_cache_size);
    }
    
    qint32 cluster_confirmation_window_size;   
    if(socket->queryString().keys().contains("cluster_confirmation_window_size")){
        fromStringValue(socket->queryString().value("cluster_confirmation_window_size"), cluster_confirmation_window_size);
    }
    
    qint32 cluster_connection_ttl;   
    if(socket->queryString().keys().contains("cluster_connection_ttl")){
        fromStringValue(socket->queryString().value("cluster_connection_ttl"), cluster_connection_ttl);
    }
    
    bool cluster_duplicate_detection;   
    if(socket->queryString().keys().contains("cluster_duplicate_detection")){
        fromStringValue(socket->queryString().value("cluster_duplicate_detection"), cluster_duplicate_detection);
    }
    
    qint32 cluster_initial_connect_attempts;   
    if(socket->queryString().keys().contains("cluster_initial_connect_attempts")){
        fromStringValue(socket->queryString().value("cluster_initial_connect_attempts"), cluster_initial_connect_attempts);
    }
    
    qint32 cluster_max_retry_interval;   
    if(socket->queryString().keys().contains("cluster_max_retry_interval")){
        fromStringValue(socket->queryString().value("cluster_max_retry_interval"), cluster_max_retry_interval);
    }
    
    qint32 cluster_min_large_message_size;   
    if(socket->queryString().keys().contains("cluster_min_large_message_size")){
        fromStringValue(socket->queryString().value("cluster_min_large_message_size"), cluster_min_large_message_size);
    }
    
    qint32 cluster_producer_window_size;   
    if(socket->queryString().keys().contains("cluster_producer_window_size")){
        fromStringValue(socket->queryString().value("cluster_producer_window_size"), cluster_producer_window_size);
    }
    
    qint32 cluster_reconnect_attempts;   
    if(socket->queryString().keys().contains("cluster_reconnect_attempts")){
        fromStringValue(socket->queryString().value("cluster_reconnect_attempts"), cluster_reconnect_attempts);
    }
    
    qint32 cluster_retry_interval;   
    if(socket->queryString().keys().contains("cluster_retry_interval")){
        fromStringValue(socket->queryString().value("cluster_retry_interval"), cluster_retry_interval);
    }
    
    OAINumber cluster_retry_interval_multiplier;   
    if(socket->queryString().keys().contains("cluster_retry_interval_multiplier")){
        fromStringValue(socket->queryString().value("cluster_retry_interval_multiplier"), cluster_retry_interval_multiplier);
    }
    


    emit comAdobeCqScreensMqActivemqImplArtemisJMSProvider( post,  apply,  _delete,  action,  location,  propertylist,  service_ranking,  global_size,  max_disk_usage,  persistence_enabled,  thread_pool_max_size,  scheduled_thread_pool_max_size,  graceful_shutdown_timeout,  queues,  topics,  addresses_max_delivery_attempts,  addresses_expiry_delay,  addresses_address_full_message_policy,  addresses_max_size_bytes,  addresses_page_size_bytes,  addresses_page_cache_max_size,  cluster_user,  cluster_password,  cluster_call_timeout,  cluster_call_failover_timeout,  cluster_client_failure_check_period,  cluster_notification_attempts,  cluster_notification_interval,  id_cache_size,  cluster_confirmation_window_size,  cluster_connection_ttl,  cluster_duplicate_detection,  cluster_initial_connect_attempts,  cluster_max_retry_interval,  cluster_min_large_message_size,  cluster_producer_window_size,  cluster_reconnect_attempts,  cluster_retry_interval,  cluster_retry_interval_multiplier);
}


void OAIConfigmgrApiRequest::comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl, handler, &OAIConfigmgrApiHandler::comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl_project_path;   
    if(socket->queryString().keys().contains("com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl_project_path")){
        fromStringValue(socket->queryString().values("com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl_project_path"), com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl_project_path);
    }
    
    QString com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl_schedule_frequency;   
    if(socket->queryString().keys().contains("com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl_schedule_frequency")){
        fromStringValue(socket->queryString().value("com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl_schedule_frequency"), com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl_schedule_frequency);
    }
    


    emit comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl( post,  apply,  _delete,  action,  location,  propertylist,  com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl_project_path,  com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl_schedule_frequency);
}


void OAIConfigmgrApiRequest::comAdobeCqScreensOfflinecontentImplOfflineContentServiceImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.OfflineContentServiceImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl, handler, &OAIConfigmgrApiHandler::comAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool disable_smart_sync;   
    if(socket->queryString().keys().contains("disable_smart_sync")){
        fromStringValue(socket->queryString().value("disable_smart_sync"), disable_smart_sync);
    }
    


    emit comAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl( post,  apply,  _delete,  action,  location,  propertylist,  disable_smart_sync);
}


void OAIConfigmgrApiRequest::comAdobeCqScreensSegmentationImplSegmentationFeatureFlagRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.screens.segmentation.impl.SegmentationFeatureFlag";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqScreensSegmentationImplSegmentationFeatureFlag, handler, &OAIConfigmgrApiHandler::comAdobeCqScreensSegmentationImplSegmentationFeatureFlag);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool enable_data_triggered_content;   
    if(socket->queryString().keys().contains("enable_data_triggered_content")){
        fromStringValue(socket->queryString().value("enable_data_triggered_content"), enable_data_triggered_content);
    }
    


    emit comAdobeCqScreensSegmentationImplSegmentationFeatureFlag( post,  apply,  _delete,  action,  location,  propertylist,  enable_data_triggered_content);
}


void OAIConfigmgrApiRequest::comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.HtmlLibraryManagerConfigHealthCheck";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh, handler, &OAIConfigmgrApiHandler::comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> hc_tags;   
    if(socket->queryString().keys().contains("hc_tags")){
        fromStringValue(socket->queryString().values("hc_tags"), hc_tags);
    }
    


    emit comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh( post,  apply,  _delete,  action,  location,  propertylist,  hc_tags);
}


void OAIConfigmgrApiRequest::comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.WcmFilterHealthCheck";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck, handler, &OAIConfigmgrApiHandler::comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> hc_tags;   
    if(socket->queryString().keys().contains("hc_tags")){
        fromStringValue(socket->queryString().values("hc_tags"), hc_tags);
    }
    


    emit comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck( post,  apply,  _delete,  action,  location,  propertylist,  hc_tags);
}


void OAIConfigmgrApiRequest::comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.security.hc.dispatcher.impl.DispatcherAccessHealthCheck";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck, handler, &OAIConfigmgrApiHandler::comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> hc_tags;   
    if(socket->queryString().keys().contains("hc_tags")){
        fromStringValue(socket->queryString().values("hc_tags"), hc_tags);
    }
    
    QString dispatcher_address;   
    if(socket->queryString().keys().contains("dispatcher_address")){
        fromStringValue(socket->queryString().value("dispatcher_address"), dispatcher_address);
    }
    
    QList<QString> dispatcher_filter_allowed;   
    if(socket->queryString().keys().contains("dispatcher_filter_allowed")){
        fromStringValue(socket->queryString().values("dispatcher_filter_allowed"), dispatcher_filter_allowed);
    }
    
    QList<QString> dispatcher_filter_blocked;   
    if(socket->queryString().keys().contains("dispatcher_filter_blocked")){
        fromStringValue(socket->queryString().values("dispatcher_filter_blocked"), dispatcher_filter_blocked);
    }
    


    emit comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck( post,  apply,  _delete,  action,  location,  propertylist,  hc_tags,  dispatcher_address,  dispatcher_filter_allowed,  dispatcher_filter_blocked);
}


void OAIConfigmgrApiRequest::comAdobeCqSecurityHcPackagesImplExampleContentHealthCheckRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.security.hc.packages.impl.ExampleContentHealthCheck";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSecurityHcPackagesImplExampleContentHealthCheck, handler, &OAIConfigmgrApiHandler::comAdobeCqSecurityHcPackagesImplExampleContentHealthCheck);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> hc_tags;   
    if(socket->queryString().keys().contains("hc_tags")){
        fromStringValue(socket->queryString().values("hc_tags"), hc_tags);
    }
    


    emit comAdobeCqSecurityHcPackagesImplExampleContentHealthCheck( post,  apply,  _delete,  action,  location,  propertylist,  hc_tags);
}


void OAIConfigmgrApiRequest::comAdobeCqSecurityHcWebserverImplClickjackingHealthCheckRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.security.hc.webserver.impl.ClickjackingHealthCheck";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSecurityHcWebserverImplClickjackingHealthCheck, handler, &OAIConfigmgrApiHandler::comAdobeCqSecurityHcWebserverImplClickjackingHealthCheck);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> hc_tags;   
    if(socket->queryString().keys().contains("hc_tags")){
        fromStringValue(socket->queryString().values("hc_tags"), hc_tags);
    }
    
    QString webserver_address;   
    if(socket->queryString().keys().contains("webserver_address")){
        fromStringValue(socket->queryString().value("webserver_address"), webserver_address);
    }
    


    emit comAdobeCqSecurityHcWebserverImplClickjackingHealthCheck( post,  apply,  _delete,  action,  location,  propertylist,  hc_tags,  webserver_address);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialAccountverificationImplAccountManagementConfigImRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.accountverification.impl.AccountManagementConfigImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialAccountverificationImplAccountManagementConfigIm, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialAccountverificationImplAccountManagementConfigIm);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool enable;   
    if(socket->queryString().keys().contains("enable")){
        fromStringValue(socket->queryString().value("enable"), enable);
    }
    
    qint32 ttl1;   
    if(socket->queryString().keys().contains("ttl1")){
        fromStringValue(socket->queryString().value("ttl1"), ttl1);
    }
    
    qint32 ttl2;   
    if(socket->queryString().keys().contains("ttl2")){
        fromStringValue(socket->queryString().value("ttl2"), ttl2);
    }
    


    emit comAdobeCqSocialAccountverificationImplAccountManagementConfigIm( post,  apply,  _delete,  action,  location,  propertylist,  enable,  ttl1,  ttl2);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialActivitystreamsClientImplSocialActivityComponenRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityComponentFactoryImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialActivitystreamsClientImplSocialActivityComponen, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialActivitystreamsClientImplSocialActivityComponen);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 priority;   
    if(socket->queryString().keys().contains("priority")){
        fromStringValue(socket->queryString().value("priority"), priority);
    }
    


    emit comAdobeCqSocialActivitystreamsClientImplSocialActivityComponen( post,  apply,  _delete,  action,  location,  propertylist,  priority);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityStreamComponentFactory";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 priority;   
    if(socket->queryString().keys().contains("priority")){
        fromStringValue(socket->queryString().value("priority"), priority);
    }
    


    emit comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo( post,  apply,  _delete,  action,  location,  propertylist,  priority);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.EventListenerHandler";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialActivitystreamsListenerImplEventListenerHandler, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialActivitystreamsListenerImplEventListenerHandler);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString event_topics;   
    if(socket->queryString().keys().contains("event_topics")){
        fromStringValue(socket->queryString().value("event_topics"), event_topics);
    }
    
    QString event_filter;   
    if(socket->queryString().keys().contains("event_filter")){
        fromStringValue(socket->queryString().value("event_filter"), event_filter);
    }
    


    emit comAdobeCqSocialActivitystreamsListenerImplEventListenerHandler( post,  apply,  _delete,  action,  location,  propertylist,  event_topics,  event_filter);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialActivitystreamsListenerImplModerationEventExtenRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ModerationEventExtension";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialActivitystreamsListenerImplModerationEventExten, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialActivitystreamsListenerImplModerationEventExten);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool accepted;   
    if(socket->queryString().keys().contains("accepted")){
        fromStringValue(socket->queryString().value("accepted"), accepted);
    }
    
    qint32 ranked;   
    if(socket->queryString().keys().contains("ranked")){
        fromStringValue(socket->queryString().value("ranked"), ranked);
    }
    


    emit comAdobeCqSocialActivitystreamsListenerImplModerationEventExten( post,  apply,  _delete,  action,  location,  propertylist,  accepted,  ranked);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.RatingEventActivitySuppressor";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 ranking;   
    if(socket->queryString().keys().contains("ranking")){
        fromStringValue(socket->queryString().value("ranking"), ranking);
    }
    
    bool enable;   
    if(socket->queryString().keys().contains("enable")){
        fromStringValue(socket->queryString().value("enable"), enable);
    }
    


    emit comAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS( post,  apply,  _delete,  action,  location,  propertylist,  ranking,  enable);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialActivitystreamsListenerImplResourceActivityStreRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ResourceActivityStreamProviderFactory";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialActivitystreamsListenerImplResourceActivityStre, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialActivitystreamsListenerImplResourceActivityStre);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString stream_path;   
    if(socket->queryString().keys().contains("stream_path")){
        fromStringValue(socket->queryString().value("stream_path"), stream_path);
    }
    
    QString stream_name;   
    if(socket->queryString().keys().contains("stream_name")){
        fromStringValue(socket->queryString().value("stream_name"), stream_name);
    }
    


    emit comAdobeCqSocialActivitystreamsListenerImplResourceActivityStre( post,  apply,  _delete,  action,  location,  propertylist,  stream_path,  stream_name);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.calendar.client.endpoints.impl.CalendarOperationsImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 max_retry;   
    if(socket->queryString().keys().contains("max_retry")){
        fromStringValue(socket->queryString().value("max_retry"), max_retry);
    }
    
    QList<QString> field_whitelist;   
    if(socket->queryString().keys().contains("field_whitelist")){
        fromStringValue(socket->queryString().values("field_whitelist"), field_whitelist);
    }
    
    QList<QString> attachment_type_blacklist;   
    if(socket->queryString().keys().contains("attachment_type_blacklist")){
        fromStringValue(socket->queryString().values("attachment_type_blacklist"), attachment_type_blacklist);
    }
    


    emit comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI( post,  apply,  _delete,  action,  location,  propertylist,  max_retry,  field_whitelist,  attachment_type_blacklist);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialCalendarClientOperationextensionsEventAttachmenRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.calendar.client.operationextensions.EventAttachment";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialCalendarClientOperationextensionsEventAttachmen, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialCalendarClientOperationextensionsEventAttachmen);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString attachment_type_blacklist;   
    if(socket->queryString().keys().contains("attachment_type_blacklist")){
        fromStringValue(socket->queryString().value("attachment_type_blacklist"), attachment_type_blacklist);
    }
    
    qint32 extension_order;   
    if(socket->queryString().keys().contains("extension_order")){
        fromStringValue(socket->queryString().value("extension_order"), extension_order);
    }
    


    emit comAdobeCqSocialCalendarClientOperationextensionsEventAttachmen( post,  apply,  _delete,  action,  location,  propertylist,  attachment_type_blacklist,  extension_order);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialCalendarServletsTimeZoneServletRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.calendar.servlets.TimeZoneServlet";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialCalendarServletsTimeZoneServlet, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialCalendarServletsTimeZoneServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 timezones_expirytime;   
    if(socket->queryString().keys().contains("timezones_expirytime")){
        fromStringValue(socket->queryString().value("timezones_expirytime"), timezones_expirytime);
    }
    


    emit comAdobeCqSocialCalendarServletsTimeZoneServlet( post,  apply,  _delete,  action,  location,  propertylist,  timezones_expirytime);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentDeleteEventActivitySuppressor";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 ranking;   
    if(socket->queryString().keys().contains("ranking")){
        fromStringValue(socket->queryString().value("ranking"), ranking);
    }
    


    emit comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent( post,  apply,  _delete,  action,  location,  propertylist,  ranking);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentOperationService";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> field_whitelist;   
    if(socket->queryString().keys().contains("field_whitelist")){
        fromStringValue(socket->queryString().values("field_whitelist"), field_whitelist);
    }
    
    QList<QString> attachment_type_blacklist;   
    if(socket->queryString().keys().contains("attachment_type_blacklist")){
        fromStringValue(socket->queryString().values("attachment_type_blacklist"), attachment_type_blacklist);
    }
    


    emit comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe( post,  apply,  _delete,  action,  location,  propertylist,  field_whitelist,  attachment_type_blacklist);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.TranslationOperationService";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> field_whitelist;   
    if(socket->queryString().keys().contains("field_whitelist")){
        fromStringValue(socket->queryString().values("field_whitelist"), field_whitelist);
    }
    
    QList<QString> attachment_type_blacklist;   
    if(socket->queryString().keys().contains("attachment_type_blacklist")){
        fromStringValue(socket->queryString().values("attachment_type_blacklist"), attachment_type_blacklist);
    }
    


    emit comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati( post,  apply,  _delete,  action,  location,  propertylist,  field_whitelist,  attachment_type_blacklist);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.commons.comments.listing.impl.SearchCommentSocialComponentListProvider";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 num_user_limit;   
    if(socket->queryString().keys().contains("num_user_limit")){
        fromStringValue(socket->queryString().value("num_user_limit"), num_user_limit);
    }
    


    emit comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC( post,  apply,  _delete,  action,  location,  propertylist,  num_user_limit);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.commons.comments.scheduler.impl.SearchScheduledPosts";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool enable_scheduled_posts_search;   
    if(socket->queryString().keys().contains("enable_scheduled_posts_search")){
        fromStringValue(socket->queryString().value("enable_scheduled_posts_search"), enable_scheduled_posts_search);
    }
    
    qint32 number_of_minutes;   
    if(socket->queryString().keys().contains("number_of_minutes")){
        fromStringValue(socket->queryString().value("number_of_minutes"), number_of_minutes);
    }
    
    qint32 max_search_limit;   
    if(socket->queryString().keys().contains("max_search_limit")){
        fromStringValue(socket->queryString().value("max_search_limit"), max_search_limit);
    }
    


    emit comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos( post,  apply,  _delete,  action,  location,  propertylist,  enable_scheduled_posts_search,  number_of_minutes,  max_search_limit);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsCorsCORSAuthenticationFilterRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.commons.cors.CORSAuthenticationFilter";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialCommonsCorsCORSAuthenticationFilter, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialCommonsCorsCORSAuthenticationFilter);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool cors_enabling;   
    if(socket->queryString().keys().contains("cors_enabling")){
        fromStringValue(socket->queryString().value("cors_enabling"), cors_enabling);
    }
    


    emit comAdobeCqSocialCommonsCorsCORSAuthenticationFilter( post,  apply,  _delete,  action,  location,  propertylist,  cors_enabling);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.AndroidEmailClientProvider";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 priority_order;   
    if(socket->queryString().keys().contains("priority_order")){
        fromStringValue(socket->queryString().value("priority_order"), priority_order);
    }
    
    QList<QString> reply_email_patterns;   
    if(socket->queryString().keys().contains("reply_email_patterns")){
        fromStringValue(socket->queryString().values("reply_email_patterns"), reply_email_patterns);
    }
    


    emit comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider( post,  apply,  _delete,  action,  location,  propertylist,  priority_order,  reply_email_patterns);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailBuilderImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString context_path;   
    if(socket->queryString().keys().contains("context_path")){
        fromStringValue(socket->queryString().value("context_path"), context_path);
    }
    


    emit comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl( post,  apply,  _delete,  action,  location,  propertylist,  context_path);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailEventListener";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString event_topics;   
    if(socket->queryString().keys().contains("event_topics")){
        fromStringValue(socket->queryString().value("event_topics"), event_topics);
    }
    


    emit comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener( post,  apply,  _delete,  action,  location,  propertylist,  event_topics);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CustomEmailClientProvider";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 priority_order;   
    if(socket->queryString().keys().contains("priority_order")){
        fromStringValue(socket->queryString().value("priority_order"), priority_order);
    }
    
    QList<QString> reply_email_patterns;   
    if(socket->queryString().keys().contains("reply_email_patterns")){
        fromStringValue(socket->queryString().values("reply_email_patterns"), reply_email_patterns);
    }
    


    emit comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider( post,  apply,  _delete,  action,  location,  propertylist,  priority_order,  reply_email_patterns);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailQuotedTextPatternsImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString pattern_time;   
    if(socket->queryString().keys().contains("pattern_time")){
        fromStringValue(socket->queryString().value("pattern_time"), pattern_time);
    }
    
    QString pattern_newline;   
    if(socket->queryString().keys().contains("pattern_newline")){
        fromStringValue(socket->queryString().value("pattern_newline"), pattern_newline);
    }
    
    QString pattern_day_of_month;   
    if(socket->queryString().keys().contains("pattern_day_of_month")){
        fromStringValue(socket->queryString().value("pattern_day_of_month"), pattern_day_of_month);
    }
    
    QString pattern_month;   
    if(socket->queryString().keys().contains("pattern_month")){
        fromStringValue(socket->queryString().value("pattern_month"), pattern_month);
    }
    
    QString pattern_year;   
    if(socket->queryString().keys().contains("pattern_year")){
        fromStringValue(socket->queryString().value("pattern_year"), pattern_year);
    }
    
    QString pattern_date;   
    if(socket->queryString().keys().contains("pattern_date")){
        fromStringValue(socket->queryString().value("pattern_date"), pattern_date);
    }
    
    QString pattern_date_time;   
    if(socket->queryString().keys().contains("pattern_date_time")){
        fromStringValue(socket->queryString().value("pattern_date_time"), pattern_date_time);
    }
    
    QString pattern_email;   
    if(socket->queryString().keys().contains("pattern_email")){
        fromStringValue(socket->queryString().value("pattern_email"), pattern_email);
    }
    


    emit comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp( post,  apply,  _delete,  action,  location,  propertylist,  pattern_time,  pattern_newline,  pattern_day_of_month,  pattern_month,  pattern_year,  pattern_date,  pattern_date_time,  pattern_email);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyConfigurationImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString email_name;   
    if(socket->queryString().keys().contains("email_name")){
        fromStringValue(socket->queryString().value("email_name"), email_name);
    }
    
    bool email_create_post_from_reply;   
    if(socket->queryString().keys().contains("email_create_post_from_reply")){
        fromStringValue(socket->queryString().value("email_create_post_from_reply"), email_create_post_from_reply);
    }
    
    QString email_add_comment_id_to;   
    if(socket->queryString().keys().contains("email_add_comment_id_to")){
        fromStringValue(socket->queryString().value("email_add_comment_id_to"), email_add_comment_id_to);
    }
    
    qint32 email_subject_maximum_length;   
    if(socket->queryString().keys().contains("email_subject_maximum_length")){
        fromStringValue(socket->queryString().value("email_subject_maximum_length"), email_subject_maximum_length);
    }
    
    QString email_reply_to_address;   
    if(socket->queryString().keys().contains("email_reply_to_address")){
        fromStringValue(socket->queryString().value("email_reply_to_address"), email_reply_to_address);
    }
    
    QString email_reply_to_delimiter;   
    if(socket->queryString().keys().contains("email_reply_to_delimiter")){
        fromStringValue(socket->queryString().value("email_reply_to_delimiter"), email_reply_to_delimiter);
    }
    
    QString email_tracker_id_prefix_in_subject;   
    if(socket->queryString().keys().contains("email_tracker_id_prefix_in_subject")){
        fromStringValue(socket->queryString().value("email_tracker_id_prefix_in_subject"), email_tracker_id_prefix_in_subject);
    }
    
    QString email_tracker_id_prefix_in_body;   
    if(socket->queryString().keys().contains("email_tracker_id_prefix_in_body")){
        fromStringValue(socket->queryString().value("email_tracker_id_prefix_in_body"), email_tracker_id_prefix_in_body);
    }
    
    bool email_as_html;   
    if(socket->queryString().keys().contains("email_as_html")){
        fromStringValue(socket->queryString().value("email_as_html"), email_as_html);
    }
    
    QString email_default_user_name;   
    if(socket->queryString().keys().contains("email_default_user_name")){
        fromStringValue(socket->queryString().value("email_default_user_name"), email_default_user_name);
    }
    
    QString email_templates_root_path;   
    if(socket->queryString().keys().contains("email_templates_root_path")){
        fromStringValue(socket->queryString().value("email_templates_root_path"), email_templates_root_path);
    }
    


    emit comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp( post,  apply,  _delete,  action,  location,  propertylist,  email_name,  email_create_post_from_reply,  email_add_comment_id_to,  email_subject_maximum_length,  email_reply_to_address,  email_reply_to_delimiter,  email_tracker_id_prefix_in_subject,  email_tracker_id_prefix_in_body,  email_as_html,  email_default_user_name,  email_templates_root_path);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyImporter";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString connect_protocol;   
    if(socket->queryString().keys().contains("connect_protocol")){
        fromStringValue(socket->queryString().value("connect_protocol"), connect_protocol);
    }
    


    emit comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter( post,  apply,  _delete,  action,  location,  propertylist,  connect_protocol);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.GmailEmailClientProvider";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 priority_order;   
    if(socket->queryString().keys().contains("priority_order")){
        fromStringValue(socket->queryString().value("priority_order"), priority_order);
    }
    
    QList<QString> reply_email_patterns;   
    if(socket->queryString().keys().contains("reply_email_patterns")){
        fromStringValue(socket->queryString().values("reply_email_patterns"), reply_email_patterns);
    }
    


    emit comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider( post,  apply,  _delete,  action,  location,  propertylist,  priority_order,  reply_email_patterns);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.IOSEmailClientProvider";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 priority_order;   
    if(socket->queryString().keys().contains("priority_order")){
        fromStringValue(socket->queryString().value("priority_order"), priority_order);
    }
    
    QList<QString> reply_email_patterns;   
    if(socket->queryString().keys().contains("reply_email_patterns")){
        fromStringValue(socket->queryString().values("reply_email_patterns"), reply_email_patterns);
    }
    


    emit comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider( post,  apply,  _delete,  action,  location,  propertylist,  priority_order,  reply_email_patterns);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.MacmailEmailClientProvider";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 priority_order;   
    if(socket->queryString().keys().contains("priority_order")){
        fromStringValue(socket->queryString().value("priority_order"), priority_order);
    }
    
    QList<QString> reply_email_patterns;   
    if(socket->queryString().keys().contains("reply_email_patterns")){
        fromStringValue(socket->queryString().values("reply_email_patterns"), reply_email_patterns);
    }
    


    emit comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider( post,  apply,  _delete,  action,  location,  propertylist,  priority_order,  reply_email_patterns);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.OutLookEmailClientProvider";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 priority_order;   
    if(socket->queryString().keys().contains("priority_order")){
        fromStringValue(socket->queryString().value("priority_order"), priority_order);
    }
    
    QList<QString> reply_email_patterns;   
    if(socket->queryString().keys().contains("reply_email_patterns")){
        fromStringValue(socket->queryString().values("reply_email_patterns"), reply_email_patterns);
    }
    


    emit comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider( post,  apply,  _delete,  action,  location,  propertylist,  priority_order,  reply_email_patterns);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.UnknownEmailClientProvider";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> reply_email_patterns;   
    if(socket->queryString().keys().contains("reply_email_patterns")){
        fromStringValue(socket->queryString().values("reply_email_patterns"), reply_email_patterns);
    }
    
    qint32 priority_order;   
    if(socket->queryString().keys().contains("priority_order")){
        fromStringValue(socket->queryString().value("priority_order"), priority_order);
    }
    


    emit comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider( post,  apply,  _delete,  action,  location,  propertylist,  reply_email_patterns,  priority_order);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.YahooEmailClientProvider";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 priority_order;   
    if(socket->queryString().keys().contains("priority_order")){
        fromStringValue(socket->queryString().value("priority_order"), priority_order);
    }
    
    QList<QString> reply_email_patterns;   
    if(socket->queryString().keys().contains("reply_email_patterns")){
        fromStringValue(socket->queryString().values("reply_email_patterns"), reply_email_patterns);
    }
    


    emit comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider( post,  apply,  _delete,  action,  location,  propertylist,  priority_order,  reply_email_patterns);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.commons.maintainance.impl.DeleteTempUGCImageUploads";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 number_of_days;   
    if(socket->queryString().keys().contains("number_of_days")){
        fromStringValue(socket->queryString().value("number_of_days"), number_of_days);
    }
    
    qint32 age_of_file;   
    if(socket->queryString().keys().contains("age_of_file")){
        fromStringValue(socket->queryString().value("age_of_file"), age_of_file);
    }
    


    emit comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload( post,  apply,  _delete,  action,  location,  propertylist,  number_of_days,  age_of_file);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.commons.ugclimiter.impl.UGCLimiterServiceImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString event_topics;   
    if(socket->queryString().keys().contains("event_topics")){
        fromStringValue(socket->queryString().value("event_topics"), event_topics);
    }
    
    QString event_filter;   
    if(socket->queryString().keys().contains("event_filter")){
        fromStringValue(socket->queryString().value("event_filter"), event_filter);
    }
    
    QList<QString> verbs;   
    if(socket->queryString().keys().contains("verbs")){
        fromStringValue(socket->queryString().values("verbs"), verbs);
    }
    


    emit comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl( post,  apply,  _delete,  action,  location,  propertylist,  event_topics,  event_filter,  verbs);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.commons.ugclimitsconfig.impl.CommunityUserUGCLimitsConfigImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool enable;   
    if(socket->queryString().keys().contains("enable")){
        fromStringValue(socket->queryString().value("enable"), enable);
    }
    
    qint32 ugc_limit;   
    if(socket->queryString().keys().contains("ugc_limit")){
        fromStringValue(socket->queryString().value("ugc_limit"), ugc_limit);
    }
    
    qint32 ugc_limit_duration;   
    if(socket->queryString().keys().contains("ugc_limit_duration")){
        fromStringValue(socket->queryString().value("ugc_limit_duration"), ugc_limit_duration);
    }
    
    QList<QString> domains;   
    if(socket->queryString().keys().contains("domains")){
        fromStringValue(socket->queryString().values("domains"), domains);
    }
    
    QList<QString> to_list;   
    if(socket->queryString().keys().contains("to_list")){
        fromStringValue(socket->queryString().values("to_list"), to_list);
    }
    


    emit comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit( post,  apply,  _delete,  action,  location,  propertylist,  enable,  ugc_limit,  ugc_limit_duration,  domains,  to_list);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialConnectOauthImplFacebookProviderImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.FacebookProviderImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialConnectOauthImplFacebookProviderImpl, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialConnectOauthImplFacebookProviderImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString oauth_provider_id;   
    if(socket->queryString().keys().contains("oauth_provider_id")){
        fromStringValue(socket->queryString().value("oauth_provider_id"), oauth_provider_id);
    }
    
    QString oauth_cloud_config_root;   
    if(socket->queryString().keys().contains("oauth_cloud_config_root")){
        fromStringValue(socket->queryString().value("oauth_cloud_config_root"), oauth_cloud_config_root);
    }
    
    QString provider_config_root;   
    if(socket->queryString().keys().contains("provider_config_root")){
        fromStringValue(socket->queryString().value("provider_config_root"), provider_config_root);
    }
    
    bool provider_config_create_tags_enabled;   
    if(socket->queryString().keys().contains("provider_config_create_tags_enabled")){
        fromStringValue(socket->queryString().value("provider_config_create_tags_enabled"), provider_config_create_tags_enabled);
    }
    
    QString provider_config_user_folder;   
    if(socket->queryString().keys().contains("provider_config_user_folder")){
        fromStringValue(socket->queryString().value("provider_config_user_folder"), provider_config_user_folder);
    }
    
    bool provider_config_facebook_fetch_fields;   
    if(socket->queryString().keys().contains("provider_config_facebook_fetch_fields")){
        fromStringValue(socket->queryString().value("provider_config_facebook_fetch_fields"), provider_config_facebook_fetch_fields);
    }
    
    QList<QString> provider_config_facebook_fields;   
    if(socket->queryString().keys().contains("provider_config_facebook_fields")){
        fromStringValue(socket->queryString().values("provider_config_facebook_fields"), provider_config_facebook_fields);
    }
    
    bool provider_config_refresh_userdata_enabled;   
    if(socket->queryString().keys().contains("provider_config_refresh_userdata_enabled")){
        fromStringValue(socket->queryString().value("provider_config_refresh_userdata_enabled"), provider_config_refresh_userdata_enabled);
    }
    


    emit comAdobeCqSocialConnectOauthImplFacebookProviderImpl( post,  apply,  _delete,  action,  location,  propertylist,  oauth_provider_id,  oauth_cloud_config_root,  provider_config_root,  provider_config_create_tags_enabled,  provider_config_user_folder,  provider_config_facebook_fetch_fields,  provider_config_facebook_fields,  provider_config_refresh_userdata_enabled);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthAuthenticationHandler";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> path;   
    if(socket->queryString().keys().contains("path")){
        fromStringValue(socket->queryString().values("path"), path);
    }
    
    qint32 service_ranking;   
    if(socket->queryString().keys().contains("service_ranking")){
        fromStringValue(socket->queryString().value("service_ranking"), service_ranking);
    }
    


    emit comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle( post,  apply,  _delete,  action,  location,  propertylist,  path,  service_ranking);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthUserProfileMapper";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> facebook;   
    if(socket->queryString().keys().contains("facebook")){
        fromStringValue(socket->queryString().values("facebook"), facebook);
    }
    
    QList<QString> twitter;   
    if(socket->queryString().keys().contains("twitter")){
        fromStringValue(socket->queryString().values("twitter"), twitter);
    }
    
    QString provider_config_user_folder;   
    if(socket->queryString().keys().contains("provider_config_user_folder")){
        fromStringValue(socket->queryString().value("provider_config_user_folder"), provider_config_user_folder);
    }
    


    emit comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper( post,  apply,  _delete,  action,  location,  propertylist,  facebook,  twitter,  provider_config_user_folder);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialConnectOauthImplTwitterProviderImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.TwitterProviderImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialConnectOauthImplTwitterProviderImpl, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialConnectOauthImplTwitterProviderImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString oauth_provider_id;   
    if(socket->queryString().keys().contains("oauth_provider_id")){
        fromStringValue(socket->queryString().value("oauth_provider_id"), oauth_provider_id);
    }
    
    QString oauth_cloud_config_root;   
    if(socket->queryString().keys().contains("oauth_cloud_config_root")){
        fromStringValue(socket->queryString().value("oauth_cloud_config_root"), oauth_cloud_config_root);
    }
    
    QString provider_config_root;   
    if(socket->queryString().keys().contains("provider_config_root")){
        fromStringValue(socket->queryString().value("provider_config_root"), provider_config_root);
    }
    
    QString provider_config_user_folder;   
    if(socket->queryString().keys().contains("provider_config_user_folder")){
        fromStringValue(socket->queryString().value("provider_config_user_folder"), provider_config_user_folder);
    }
    
    bool provider_config_twitter_enable_params;   
    if(socket->queryString().keys().contains("provider_config_twitter_enable_params")){
        fromStringValue(socket->queryString().value("provider_config_twitter_enable_params"), provider_config_twitter_enable_params);
    }
    
    QList<QString> provider_config_twitter_params;   
    if(socket->queryString().keys().contains("provider_config_twitter_params")){
        fromStringValue(socket->queryString().values("provider_config_twitter_params"), provider_config_twitter_params);
    }
    
    bool provider_config_refresh_userdata_enabled;   
    if(socket->queryString().keys().contains("provider_config_refresh_userdata_enabled")){
        fromStringValue(socket->queryString().value("provider_config_refresh_userdata_enabled"), provider_config_refresh_userdata_enabled);
    }
    


    emit comAdobeCqSocialConnectOauthImplTwitterProviderImpl( post,  apply,  _delete,  action,  location,  propertylist,  oauth_provider_id,  oauth_cloud_config_root,  provider_config_root,  provider_config_user_folder,  provider_config_twitter_enable_params,  provider_config_twitter_params,  provider_config_refresh_userdata_enabled);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.content.fragments.services.impl.CommunitiesFragmentCreationServiceImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool cq_social_content_fragments_services_enabled;   
    if(socket->queryString().keys().contains("cq_social_content_fragments_services_enabled")){
        fromStringValue(socket->queryString().value("cq_social_content_fragments_services_enabled"), cq_social_content_fragments_services_enabled);
    }
    
    qint32 cq_social_content_fragments_services_wait_time_seconds;   
    if(socket->queryString().keys().contains("cq_social_content_fragments_services_wait_time_seconds")){
        fromStringValue(socket->queryString().value("cq_social_content_fragments_services_wait_time_seconds"), cq_social_content_fragments_services_wait_time_seconds);
    }
    


    emit comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen( post,  apply,  _delete,  action,  location,  propertylist,  cq_social_content_fragments_services_enabled,  cq_social_content_fragments_services_wait_time_seconds);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialDatastoreAsImplASResourceProviderFactoryRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.datastore.as.impl.ASResourceProviderFactory";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialDatastoreAsImplASResourceProviderFactory, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialDatastoreAsImplASResourceProviderFactory);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString version_id;   
    if(socket->queryString().keys().contains("version_id")){
        fromStringValue(socket->queryString().value("version_id"), version_id);
    }
    
    bool cache_on;   
    if(socket->queryString().keys().contains("cache_on")){
        fromStringValue(socket->queryString().value("cache_on"), cache_on);
    }
    
    qint32 concurrency_level;   
    if(socket->queryString().keys().contains("concurrency_level")){
        fromStringValue(socket->queryString().value("concurrency_level"), concurrency_level);
    }
    
    qint32 cache_start_size;   
    if(socket->queryString().keys().contains("cache_start_size")){
        fromStringValue(socket->queryString().value("cache_start_size"), cache_start_size);
    }
    
    qint32 cache_ttl;   
    if(socket->queryString().keys().contains("cache_ttl")){
        fromStringValue(socket->queryString().value("cache_ttl"), cache_ttl);
    }
    
    qint32 cache_size;   
    if(socket->queryString().keys().contains("cache_size")){
        fromStringValue(socket->queryString().value("cache_size"), cache_size);
    }
    
    qint32 time_limit;   
    if(socket->queryString().keys().contains("time_limit")){
        fromStringValue(socket->queryString().value("time_limit"), time_limit);
    }
    


    emit comAdobeCqSocialDatastoreAsImplASResourceProviderFactory( post,  apply,  _delete,  action,  location,  propertylist,  version_id,  cache_on,  concurrency_level,  cache_start_size,  cache_ttl,  cache_size,  time_limit);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.datastore.op.impl.SocialMSResourceProviderFactory";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString solr_zk_timeout;   
    if(socket->queryString().keys().contains("solr_zk_timeout")){
        fromStringValue(socket->queryString().value("solr_zk_timeout"), solr_zk_timeout);
    }
    
    QString solr_commit;   
    if(socket->queryString().keys().contains("solr_commit")){
        fromStringValue(socket->queryString().value("solr_commit"), solr_commit);
    }
    
    bool cache_on;   
    if(socket->queryString().keys().contains("cache_on")){
        fromStringValue(socket->queryString().value("cache_on"), cache_on);
    }
    
    qint32 concurrency_level;   
    if(socket->queryString().keys().contains("concurrency_level")){
        fromStringValue(socket->queryString().value("concurrency_level"), concurrency_level);
    }
    
    qint32 cache_start_size;   
    if(socket->queryString().keys().contains("cache_start_size")){
        fromStringValue(socket->queryString().value("cache_start_size"), cache_start_size);
    }
    
    qint32 cache_ttl;   
    if(socket->queryString().keys().contains("cache_ttl")){
        fromStringValue(socket->queryString().value("cache_ttl"), cache_ttl);
    }
    
    qint32 cache_size;   
    if(socket->queryString().keys().contains("cache_size")){
        fromStringValue(socket->queryString().value("cache_size"), cache_size);
    }
    


    emit comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory( post,  apply,  _delete,  action,  location,  propertylist,  solr_zk_timeout,  solr_commit,  cache_on,  concurrency_level,  cache_start_size,  cache_ttl,  cache_size);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.datastore.rdb.impl.SocialRDBResourceProviderFactory";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString solr_zk_timeout;   
    if(socket->queryString().keys().contains("solr_zk_timeout")){
        fromStringValue(socket->queryString().value("solr_zk_timeout"), solr_zk_timeout);
    }
    
    QString solr_commit;   
    if(socket->queryString().keys().contains("solr_commit")){
        fromStringValue(socket->queryString().value("solr_commit"), solr_commit);
    }
    
    bool cache_on;   
    if(socket->queryString().keys().contains("cache_on")){
        fromStringValue(socket->queryString().value("cache_on"), cache_on);
    }
    
    qint32 concurrency_level;   
    if(socket->queryString().keys().contains("concurrency_level")){
        fromStringValue(socket->queryString().value("concurrency_level"), concurrency_level);
    }
    
    qint32 cache_start_size;   
    if(socket->queryString().keys().contains("cache_start_size")){
        fromStringValue(socket->queryString().value("cache_start_size"), cache_start_size);
    }
    
    qint32 cache_ttl;   
    if(socket->queryString().keys().contains("cache_ttl")){
        fromStringValue(socket->queryString().value("cache_ttl"), cache_ttl);
    }
    
    qint32 cache_size;   
    if(socket->queryString().keys().contains("cache_size")){
        fromStringValue(socket->queryString().value("cache_size"), cache_size);
    }
    


    emit comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor( post,  apply,  _delete,  action,  location,  propertylist,  solr_zk_timeout,  solr_commit,  cache_on,  concurrency_level,  cache_start_size,  cache_ttl,  cache_size);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementLearningPathAdaptorFactory";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool is_member_check;   
    if(socket->queryString().keys().contains("is_member_check")){
        fromStringValue(socket->queryString().value("is_member_check"), is_member_check);
    }
    


    emit comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF( post,  apply,  _delete,  action,  location,  propertylist,  is_member_check);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementResourceAdaptorFactory";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool is_member_check;   
    if(socket->queryString().keys().contains("is_member_check")){
        fromStringValue(socket->queryString().value("is_member_check"), is_member_check);
    }
    


    emit comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto( post,  apply,  _delete,  action,  location,  propertylist,  is_member_check);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.enablement.learningpath.endpoints.impl.EnablementLearningPathModelOperationService";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> field_whitelist;   
    if(socket->queryString().keys().contains("field_whitelist")){
        fromStringValue(socket->queryString().values("field_whitelist"), field_whitelist);
    }
    


    emit comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL( post,  apply,  _delete,  action,  location,  propertylist,  field_whitelist);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialEnablementResourceEndpointsImplEnablementResouRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.enablement.resource.endpoints.impl.EnablementResourceModelOperationService";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialEnablementResourceEndpointsImplEnablementResou, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialEnablementResourceEndpointsImplEnablementResou);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> field_whitelist;   
    if(socket->queryString().keys().contains("field_whitelist")){
        fromStringValue(socket->queryString().values("field_whitelist"), field_whitelist);
    }
    


    emit comAdobeCqSocialEnablementResourceEndpointsImplEnablementResou( post,  apply,  _delete,  action,  location,  propertylist,  field_whitelist);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialEnablementServicesImplAuthorMarkerImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.enablement.services.impl.AuthorMarkerImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialEnablementServicesImplAuthorMarkerImpl, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialEnablementServicesImplAuthorMarkerImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 service_ranking;   
    if(socket->queryString().keys().contains("service_ranking")){
        fromStringValue(socket->queryString().value("service_ranking"), service_ranking);
    }
    


    emit comAdobeCqSocialEnablementServicesImplAuthorMarkerImpl( post,  apply,  _delete,  action,  location,  propertylist,  service_ranking);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.FilelibraryDownloadGetServlet";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString sling_servlet_selectors;   
    if(socket->queryString().keys().contains("sling_servlet_selectors")){
        fromStringValue(socket->queryString().value("sling_servlet_selectors"), sling_servlet_selectors);
    }
    
    QString sling_servlet_extensions;   
    if(socket->queryString().keys().contains("sling_servlet_extensions")){
        fromStringValue(socket->queryString().value("sling_servlet_extensions"), sling_servlet_extensions);
    }
    


    emit comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe( post,  apply,  _delete,  action,  location,  propertylist,  sling_servlet_selectors,  sling_servlet_extensions);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.impl.FileLibraryOperationsService";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> field_whitelist;   
    if(socket->queryString().keys().contains("field_whitelist")){
        fromStringValue(socket->queryString().values("field_whitelist"), field_whitelist);
    }
    
    QList<QString> attachment_type_blacklist;   
    if(socket->queryString().keys().contains("attachment_type_blacklist")){
        fromStringValue(socket->queryString().values("attachment_type_blacklist"), attachment_type_blacklist);
    }
    


    emit comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera( post,  apply,  _delete,  action,  location,  propertylist,  field_whitelist,  attachment_type_blacklist);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialForumClientEndpointsImplForumOperationsServiceRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.forum.client.endpoints.impl.ForumOperationsService";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialForumClientEndpointsImplForumOperationsService, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialForumClientEndpointsImplForumOperationsService);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> field_whitelist;   
    if(socket->queryString().keys().contains("field_whitelist")){
        fromStringValue(socket->queryString().values("field_whitelist"), field_whitelist);
    }
    
    QList<QString> attachment_type_blacklist;   
    if(socket->queryString().keys().contains("attachment_type_blacklist")){
        fromStringValue(socket->queryString().values("attachment_type_blacklist"), attachment_type_blacklist);
    }
    


    emit comAdobeCqSocialForumClientEndpointsImplForumOperationsService( post,  apply,  _delete,  action,  location,  propertylist,  field_whitelist,  attachment_type_blacklist);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialForumDispatcherImplFlushOperationsRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.forum.dispatcher.impl.FlushOperations";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialForumDispatcherImplFlushOperations, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialForumDispatcherImplFlushOperations);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 extension_order;   
    if(socket->queryString().keys().contains("extension_order")){
        fromStringValue(socket->queryString().value("extension_order"), extension_order);
    }
    
    bool flush_forumontopic;   
    if(socket->queryString().keys().contains("flush_forumontopic")){
        fromStringValue(socket->queryString().value("flush_forumontopic"), flush_forumontopic);
    }
    


    emit comAdobeCqSocialForumDispatcherImplFlushOperations( post,  apply,  _delete,  action,  location,  propertylist,  extension_order,  flush_forumontopic);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.group.client.impl.CommunityGroupCollectionComponentFactory";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool group_listing_pagination_enable;   
    if(socket->queryString().keys().contains("group_listing_pagination_enable")){
        fromStringValue(socket->queryString().value("group_listing_pagination_enable"), group_listing_pagination_enable);
    }
    
    bool group_listing_lazyloading_enable;   
    if(socket->queryString().keys().contains("group_listing_lazyloading_enable")){
        fromStringValue(socket->queryString().value("group_listing_lazyloading_enable"), group_listing_lazyloading_enable);
    }
    
    qint32 page_size;   
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    
    qint32 priority;   
    if(socket->queryString().keys().contains("priority")){
        fromStringValue(socket->queryString().value("priority"), priority);
    }
    


    emit comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen( post,  apply,  _delete,  action,  location,  propertylist,  group_listing_pagination_enable,  group_listing_lazyloading_enable,  page_size,  priority);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialGroupImplGroupServiceImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.group.impl.GroupServiceImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialGroupImplGroupServiceImpl, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialGroupImplGroupServiceImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 max_wait_time;   
    if(socket->queryString().keys().contains("max_wait_time")){
        fromStringValue(socket->queryString().value("max_wait_time"), max_wait_time);
    }
    
    qint32 min_wait_between_retries;   
    if(socket->queryString().keys().contains("min_wait_between_retries")){
        fromStringValue(socket->queryString().value("min_wait_between_retries"), min_wait_between_retries);
    }
    


    emit comAdobeCqSocialGroupImplGroupServiceImpl( post,  apply,  _delete,  action,  location,  propertylist,  max_wait_time,  min_wait_between_retries);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialHandlebarsGuavaTemplateCacheImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.handlebars.GuavaTemplateCacheImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialHandlebarsGuavaTemplateCacheImpl, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialHandlebarsGuavaTemplateCacheImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool parameter_guava_cache_enabled;   
    if(socket->queryString().keys().contains("parameter_guava_cache_enabled")){
        fromStringValue(socket->queryString().value("parameter_guava_cache_enabled"), parameter_guava_cache_enabled);
    }
    
    QString parameter_guava_cache_params;   
    if(socket->queryString().keys().contains("parameter_guava_cache_params")){
        fromStringValue(socket->queryString().value("parameter_guava_cache_params"), parameter_guava_cache_params);
    }
    
    bool parameter_guava_cache_reload;   
    if(socket->queryString().keys().contains("parameter_guava_cache_reload")){
        fromStringValue(socket->queryString().value("parameter_guava_cache_reload"), parameter_guava_cache_reload);
    }
    
    qint32 service_ranking;   
    if(socket->queryString().keys().contains("service_ranking")){
        fromStringValue(socket->queryString().value("service_ranking"), service_ranking);
    }
    


    emit comAdobeCqSocialHandlebarsGuavaTemplateCacheImpl( post,  apply,  _delete,  action,  location,  propertylist,  parameter_guava_cache_enabled,  parameter_guava_cache_params,  parameter_guava_cache_reload,  service_ranking);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.ideation.client.endpoints.impl.IdeationOperationsService";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> field_whitelist;   
    if(socket->queryString().keys().contains("field_whitelist")){
        fromStringValue(socket->queryString().values("field_whitelist"), field_whitelist);
    }
    
    QList<QString> attachment_type_blacklist;   
    if(socket->queryString().keys().contains("attachment_type_blacklist")){
        fromStringValue(socket->queryString().values("attachment_type_blacklist"), attachment_type_blacklist);
    }
    


    emit comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS( post,  apply,  _delete,  action,  location,  propertylist,  field_whitelist,  attachment_type_blacklist);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.journal.client.endpoints.impl.JournalOperationsService";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> field_whitelist;   
    if(socket->queryString().keys().contains("field_whitelist")){
        fromStringValue(socket->queryString().values("field_whitelist"), field_whitelist);
    }
    
    QList<QString> attachment_type_blacklist;   
    if(socket->queryString().keys().contains("attachment_type_blacklist")){
        fromStringValue(socket->queryString().values("attachment_type_blacklist"), attachment_type_blacklist);
    }
    


    emit comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer( post,  apply,  _delete,  action,  location,  propertylist,  field_whitelist,  attachment_type_blacklist);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberGroupProfileOperationService";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> field_whitelist;   
    if(socket->queryString().keys().contains("field_whitelist")){
        fromStringValue(socket->queryString().values("field_whitelist"), field_whitelist);
    }
    


    emit comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile( post,  apply,  _delete,  action,  location,  propertylist,  field_whitelist);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileORequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberUserProfileOperationService";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> field_whitelist;   
    if(socket->queryString().keys().contains("field_whitelist")){
        fromStringValue(socket->queryString().values("field_whitelist"), field_whitelist);
    }
    


    emit comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO( post,  apply,  _delete,  action,  location,  propertylist,  field_whitelist);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.members.impl.CommunityMemberGroupProfileComponentFactory";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 everyone_limit;   
    if(socket->queryString().keys().contains("everyone_limit")){
        fromStringValue(socket->queryString().value("everyone_limit"), everyone_limit);
    }
    
    qint32 priority;   
    if(socket->queryString().keys().contains("priority")){
        fromStringValue(socket->queryString().value("priority"), priority);
    }
    


    emit comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF( post,  apply,  _delete,  action,  location,  propertylist,  everyone_limit,  priority);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialMessagingClientEndpointsImplMessagingOperationRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.messaging.client.endpoints.impl.MessagingOperationsServiceImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialMessagingClientEndpointsImplMessagingOperation, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialMessagingClientEndpointsImplMessagingOperation);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> message_properties;   
    if(socket->queryString().keys().contains("message_properties")){
        fromStringValue(socket->queryString().values("message_properties"), message_properties);
    }
    
    qint32 message_box_size_limit;   
    if(socket->queryString().keys().contains("message_box_size_limit")){
        fromStringValue(socket->queryString().value("message_box_size_limit"), message_box_size_limit);
    }
    
    qint32 message_count_limit;   
    if(socket->queryString().keys().contains("message_count_limit")){
        fromStringValue(socket->queryString().value("message_count_limit"), message_count_limit);
    }
    
    bool notify_failure;   
    if(socket->queryString().keys().contains("notify_failure")){
        fromStringValue(socket->queryString().value("notify_failure"), notify_failure);
    }
    
    QString failure_message_from;   
    if(socket->queryString().keys().contains("failure_message_from")){
        fromStringValue(socket->queryString().value("failure_message_from"), failure_message_from);
    }
    
    QString failure_template_path;   
    if(socket->queryString().keys().contains("failure_template_path")){
        fromStringValue(socket->queryString().value("failure_template_path"), failure_template_path);
    }
    
    qint32 max_retries;   
    if(socket->queryString().keys().contains("max_retries")){
        fromStringValue(socket->queryString().value("max_retries"), max_retries);
    }
    
    qint32 min_wait_between_retries;   
    if(socket->queryString().keys().contains("min_wait_between_retries")){
        fromStringValue(socket->queryString().value("min_wait_between_retries"), min_wait_between_retries);
    }
    
    qint32 count_update_pool_size;   
    if(socket->queryString().keys().contains("count_update_pool_size")){
        fromStringValue(socket->queryString().value("count_update_pool_size"), count_update_pool_size);
    }
    
    QString inbox_path;   
    if(socket->queryString().keys().contains("inbox_path")){
        fromStringValue(socket->queryString().value("inbox_path"), inbox_path);
    }
    
    QString sentitems_path;   
    if(socket->queryString().keys().contains("sentitems_path")){
        fromStringValue(socket->queryString().value("sentitems_path"), sentitems_path);
    }
    
    bool support_attachments;   
    if(socket->queryString().keys().contains("support_attachments")){
        fromStringValue(socket->queryString().value("support_attachments"), support_attachments);
    }
    
    bool support_group_messaging;   
    if(socket->queryString().keys().contains("support_group_messaging")){
        fromStringValue(socket->queryString().value("support_group_messaging"), support_group_messaging);
    }
    
    qint32 max_total_recipients;   
    if(socket->queryString().keys().contains("max_total_recipients")){
        fromStringValue(socket->queryString().value("max_total_recipients"), max_total_recipients);
    }
    
    qint32 batch_size;   
    if(socket->queryString().keys().contains("batch_size")){
        fromStringValue(socket->queryString().value("batch_size"), batch_size);
    }
    
    qint32 max_total_attachment_size;   
    if(socket->queryString().keys().contains("max_total_attachment_size")){
        fromStringValue(socket->queryString().value("max_total_attachment_size"), max_total_attachment_size);
    }
    
    QList<QString> attachment_type_blacklist;   
    if(socket->queryString().keys().contains("attachment_type_blacklist")){
        fromStringValue(socket->queryString().values("attachment_type_blacklist"), attachment_type_blacklist);
    }
    
    QList<QString> allowed_attachment_types;   
    if(socket->queryString().keys().contains("allowed_attachment_types")){
        fromStringValue(socket->queryString().values("allowed_attachment_types"), allowed_attachment_types);
    }
    
    QString service_selector;   
    if(socket->queryString().keys().contains("service_selector")){
        fromStringValue(socket->queryString().value("service_selector"), service_selector);
    }
    
    QList<QString> field_whitelist;   
    if(socket->queryString().keys().contains("field_whitelist")){
        fromStringValue(socket->queryString().values("field_whitelist"), field_whitelist);
    }
    


    emit comAdobeCqSocialMessagingClientEndpointsImplMessagingOperation( post,  apply,  _delete,  action,  location,  propertylist,  message_properties,  message_box_size_limit,  message_count_limit,  notify_failure,  failure_message_from,  failure_template_path,  max_retries,  min_wait_between_retries,  count_update_pool_size,  inbox_path,  sentitems_path,  support_attachments,  support_group_messaging,  max_total_recipients,  batch_size,  max_total_attachment_size,  attachment_type_blacklist,  allowed_attachment_types,  service_selector,  field_whitelist);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.FilterGroupSocialComponentFactory";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> resource_type_filters;   
    if(socket->queryString().keys().contains("resource_type_filters")){
        fromStringValue(socket->queryString().values("resource_type_filters"), resource_type_filters);
    }
    
    qint32 priority;   
    if(socket->queryString().keys().contains("priority")){
        fromStringValue(socket->queryString().value("priority"), priority);
    }
    


    emit comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen( post,  apply,  _delete,  action,  location,  propertylist,  resource_type_filters,  priority);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialModerationDashboardApiModerationDashboardSocialRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.ModerationDashboardSocialComponentFactory";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialModerationDashboardApiModerationDashboardSocial, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialModerationDashboardApiModerationDashboardSocial);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 priority;   
    if(socket->queryString().keys().contains("priority")){
        fromStringValue(socket->queryString().value("priority"), priority);
    }
    


    emit comAdobeCqSocialModerationDashboardApiModerationDashboardSocial( post,  apply,  _delete,  action,  location,  propertylist,  priority);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.UserDetailsSocialComponentFactory";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 priority;   
    if(socket->queryString().keys().contains("priority")){
        fromStringValue(socket->queryString().value("priority"), priority);
    }
    


    emit comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen( post,  apply,  _delete,  action,  location,  propertylist,  priority);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialModerationDashboardInternalImplFilterGroupSociRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.moderation.dashboard.internal.impl.FilterGroupSocialComponentFactoryV2";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> resource_type_filters;   
    if(socket->queryString().keys().contains("resource_type_filters")){
        fromStringValue(socket->queryString().values("resource_type_filters"), resource_type_filters);
    }
    
    qint32 priority;   
    if(socket->queryString().keys().contains("priority")){
        fromStringValue(socket->queryString().value("priority"), priority);
    }
    


    emit comAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci( post,  apply,  _delete,  action,  location,  propertylist,  resource_type_filters,  priority);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialNotificationsImplMentionsRouterRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.notifications.impl.MentionsRouter";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialNotificationsImplMentionsRouter, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialNotificationsImplMentionsRouter);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString event_topics;   
    if(socket->queryString().keys().contains("event_topics")){
        fromStringValue(socket->queryString().value("event_topics"), event_topics);
    }
    
    QString event_filter;   
    if(socket->queryString().keys().contains("event_filter")){
        fromStringValue(socket->queryString().value("event_filter"), event_filter);
    }
    


    emit comAdobeCqSocialNotificationsImplMentionsRouter( post,  apply,  _delete,  action,  location,  propertylist,  event_topics,  event_filter);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialNotificationsImplNotificationManagerImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationManagerImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialNotificationsImplNotificationManagerImpl, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialNotificationsImplNotificationManagerImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 max_unread_notification_count;   
    if(socket->queryString().keys().contains("max_unread_notification_count")){
        fromStringValue(socket->queryString().value("max_unread_notification_count"), max_unread_notification_count);
    }
    


    emit comAdobeCqSocialNotificationsImplNotificationManagerImpl( post,  apply,  _delete,  action,  location,  propertylist,  max_unread_notification_count);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialNotificationsImplNotificationsRouterRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationsRouter";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialNotificationsImplNotificationsRouter, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialNotificationsImplNotificationsRouter);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString event_topics;   
    if(socket->queryString().keys().contains("event_topics")){
        fromStringValue(socket->queryString().value("event_topics"), event_topics);
    }
    
    QString event_filter;   
    if(socket->queryString().keys().contains("event_filter")){
        fromStringValue(socket->queryString().value("event_filter"), event_filter);
    }
    


    emit comAdobeCqSocialNotificationsImplNotificationsRouter( post,  apply,  _delete,  action,  location,  propertylist,  event_topics,  event_filter);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.qna.client.endpoints.impl.QnaForumOperationsService";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> field_whitelist;   
    if(socket->queryString().keys().contains("field_whitelist")){
        fromStringValue(socket->queryString().values("field_whitelist"), field_whitelist);
    }
    
    QList<QString> attachment_type_blacklist;   
    if(socket->queryString().keys().contains("attachment_type_blacklist")){
        fromStringValue(socket->queryString().values("attachment_type_blacklist"), attachment_type_blacklist);
    }
    


    emit comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic( post,  apply,  _delete,  action,  location,  propertylist,  field_whitelist,  attachment_type_blacklist);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportImporterServiceImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 cq_social_reporting_analytics_polling_importer_interval;   
    if(socket->queryString().keys().contains("cq_social_reporting_analytics_polling_importer_interval")){
        fromStringValue(socket->queryString().value("cq_social_reporting_analytics_polling_importer_interval"), cq_social_reporting_analytics_polling_importer_interval);
    }
    
    qint32 cq_social_reporting_analytics_polling_importer_page_size;   
    if(socket->queryString().keys().contains("cq_social_reporting_analytics_polling_importer_page_size")){
        fromStringValue(socket->queryString().value("cq_social_reporting_analytics_polling_importer_page_size"), cq_social_reporting_analytics_polling_importer_page_size);
    }
    


    emit comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI( post,  apply,  _delete,  action,  location,  propertylist,  cq_social_reporting_analytics_polling_importer_interval,  cq_social_reporting_analytics_polling_importer_page_size);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportManagementServiceImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 report_fetch_delay;   
    if(socket->queryString().keys().contains("report_fetch_delay")){
        fromStringValue(socket->queryString().value("report_fetch_delay"), report_fetch_delay);
    }
    


    emit comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM( post,  apply,  _delete,  action,  location,  propertylist,  report_fetch_delay);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.SiteTrendReportSocialComponentFactory";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> cq_social_console_analytics_sites_mapping;   
    if(socket->queryString().keys().contains("cq_social_console_analytics_sites_mapping")){
        fromStringValue(socket->queryString().values("cq_social_console_analytics_sites_mapping"), cq_social_console_analytics_sites_mapping);
    }
    
    qint32 priority;   
    if(socket->queryString().keys().contains("priority")){
        fromStringValue(socket->queryString().value("priority"), priority);
    }
    


    emit comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS( post,  apply,  _delete,  action,  location,  propertylist,  cq_social_console_analytics_sites_mapping,  priority);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.review.client.endpoints.impl.ReviewOperationsService";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> field_whitelist;   
    if(socket->queryString().keys().contains("field_whitelist")){
        fromStringValue(socket->queryString().values("field_whitelist"), field_whitelist);
    }
    
    QList<QString> attachment_type_blacklist;   
    if(socket->queryString().keys().contains("attachment_type_blacklist")){
        fromStringValue(socket->queryString().values("attachment_type_blacklist"), attachment_type_blacklist);
    }
    


    emit comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi( post,  apply,  _delete,  action,  location,  propertylist,  field_whitelist,  attachment_type_blacklist);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialScfCoreOperationsImplSocialOperationsServletRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.scf.core.operations.impl.SocialOperationsServlet";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString sling_servlet_selectors;   
    if(socket->queryString().keys().contains("sling_servlet_selectors")){
        fromStringValue(socket->queryString().value("sling_servlet_selectors"), sling_servlet_selectors);
    }
    
    QString sling_servlet_extensions;   
    if(socket->queryString().keys().contains("sling_servlet_extensions")){
        fromStringValue(socket->queryString().value("sling_servlet_extensions"), sling_servlet_extensions);
    }
    


    emit comAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet( post,  apply,  _delete,  action,  location,  propertylist,  sling_servlet_selectors,  sling_servlet_extensions);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialScfEndpointsImplDefaultSocialGetServletRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.scf.endpoints.impl.DefaultSocialGetServlet";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> sling_servlet_selectors;   
    if(socket->queryString().keys().contains("sling_servlet_selectors")){
        fromStringValue(socket->queryString().values("sling_servlet_selectors"), sling_servlet_selectors);
    }
    
    QString sling_servlet_extensions;   
    if(socket->queryString().keys().contains("sling_servlet_extensions")){
        fromStringValue(socket->queryString().value("sling_servlet_extensions"), sling_servlet_extensions);
    }
    


    emit comAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet( post,  apply,  _delete,  action,  location,  propertylist,  sling_servlet_selectors,  sling_servlet_extensions);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialScoringImplScoringEventListenerRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.scoring.impl.ScoringEventListener";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialScoringImplScoringEventListener, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialScoringImplScoringEventListener);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString event_topics;   
    if(socket->queryString().keys().contains("event_topics")){
        fromStringValue(socket->queryString().value("event_topics"), event_topics);
    }
    
    QString event_filter;   
    if(socket->queryString().keys().contains("event_filter")){
        fromStringValue(socket->queryString().value("event_filter"), event_filter);
    }
    


    emit comAdobeCqSocialScoringImplScoringEventListener( post,  apply,  _delete,  action,  location,  propertylist,  event_topics,  event_filter);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.serviceusers.internal.impl.ServiceUserWrapperImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool enable_fallback;   
    if(socket->queryString().keys().contains("enable_fallback")){
        fromStringValue(socket->queryString().value("enable_fallback"), enable_fallback);
    }
    


    emit comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl( post,  apply,  _delete,  action,  location,  propertylist,  enable_fallback);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialSiteEndpointsImplSiteOperationServiceRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.site.endpoints.impl.SiteOperationService";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialSiteEndpointsImplSiteOperationService, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialSiteEndpointsImplSiteOperationService);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> field_whitelist;   
    if(socket->queryString().keys().contains("field_whitelist")){
        fromStringValue(socket->queryString().values("field_whitelist"), field_whitelist);
    }
    
    QList<QString> site_path_filters;   
    if(socket->queryString().keys().contains("site_path_filters")){
        fromStringValue(socket->queryString().values("site_path_filters"), site_path_filters);
    }
    
    QString site_package_group;   
    if(socket->queryString().keys().contains("site_package_group")){
        fromStringValue(socket->queryString().value("site_package_group"), site_package_group);
    }
    


    emit comAdobeCqSocialSiteEndpointsImplSiteOperationService( post,  apply,  _delete,  action,  location,  propertylist,  field_whitelist,  site_path_filters,  site_package_group);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.site.impl.AnalyticsComponentConfigurationServiceImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> cq_social_console_analytics_components;   
    if(socket->queryString().keys().contains("cq_social_console_analytics_components")){
        fromStringValue(socket->queryString().values("cq_social_console_analytics_components"), cq_social_console_analytics_components);
    }
    


    emit comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm( post,  apply,  _delete,  action,  location,  propertylist,  cq_social_console_analytics_components);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialSiteImplSiteConfiguratorImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.site.impl.SiteConfiguratorImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialSiteImplSiteConfiguratorImpl, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialSiteImplSiteConfiguratorImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> components_using_tags;   
    if(socket->queryString().keys().contains("components_using_tags")){
        fromStringValue(socket->queryString().values("components_using_tags"), components_using_tags);
    }
    


    emit comAdobeCqSocialSiteImplSiteConfiguratorImpl( post,  apply,  _delete,  action,  location,  propertylist,  components_using_tags);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialSrpImplSocialSolrConnectorRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.srp.impl.SocialSolrConnector";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialSrpImplSocialSolrConnector, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialSrpImplSocialSolrConnector);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString srp_type;   
    if(socket->queryString().keys().contains("srp_type")){
        fromStringValue(socket->queryString().value("srp_type"), srp_type);
    }
    


    emit comAdobeCqSocialSrpImplSocialSolrConnector( post,  apply,  _delete,  action,  location,  propertylist,  srp_type);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialSyncImplDiffChangesObserverRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.sync.impl.DiffChangesObserver";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialSyncImplDiffChangesObserver, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialSyncImplDiffChangesObserver);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool enabled;   
    if(socket->queryString().keys().contains("enabled")){
        fromStringValue(socket->queryString().value("enabled"), enabled);
    }
    
    QString agent_name;   
    if(socket->queryString().keys().contains("agent_name")){
        fromStringValue(socket->queryString().value("agent_name"), agent_name);
    }
    
    QString diff_path;   
    if(socket->queryString().keys().contains("diff_path")){
        fromStringValue(socket->queryString().value("diff_path"), diff_path);
    }
    
    QString property_names;   
    if(socket->queryString().keys().contains("property_names")){
        fromStringValue(socket->queryString().value("property_names"), property_names);
    }
    


    emit comAdobeCqSocialSyncImplDiffChangesObserver( post,  apply,  _delete,  action,  location,  propertylist,  enabled,  agent_name,  diff_path,  property_names);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialSyncImplGroupSyncListenerImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.sync.impl.GroupSyncListenerImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialSyncImplGroupSyncListenerImpl, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialSyncImplGroupSyncListenerImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> nodetypes;   
    if(socket->queryString().keys().contains("nodetypes")){
        fromStringValue(socket->queryString().values("nodetypes"), nodetypes);
    }
    
    QList<QString> ignorableprops;   
    if(socket->queryString().keys().contains("ignorableprops")){
        fromStringValue(socket->queryString().values("ignorableprops"), ignorableprops);
    }
    
    QString ignorablenodes;   
    if(socket->queryString().keys().contains("ignorablenodes")){
        fromStringValue(socket->queryString().value("ignorablenodes"), ignorablenodes);
    }
    
    bool enabled;   
    if(socket->queryString().keys().contains("enabled")){
        fromStringValue(socket->queryString().value("enabled"), enabled);
    }
    
    QString distfolders;   
    if(socket->queryString().keys().contains("distfolders")){
        fromStringValue(socket->queryString().value("distfolders"), distfolders);
    }
    


    emit comAdobeCqSocialSyncImplGroupSyncListenerImpl( post,  apply,  _delete,  action,  location,  propertylist,  nodetypes,  ignorableprops,  ignorablenodes,  enabled,  distfolders);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialSyncImplPublisherSyncServiceImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.sync.impl.PublisherSyncServiceImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialSyncImplPublisherSyncServiceImpl, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialSyncImplPublisherSyncServiceImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> active_run_modes;   
    if(socket->queryString().keys().contains("active_run_modes")){
        fromStringValue(socket->queryString().values("active_run_modes"), active_run_modes);
    }
    


    emit comAdobeCqSocialSyncImplPublisherSyncServiceImpl( post,  apply,  _delete,  action,  location,  propertylist,  active_run_modes);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialSyncImplUserSyncListenerImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.sync.impl.UserSyncListenerImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialSyncImplUserSyncListenerImpl, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialSyncImplUserSyncListenerImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> nodetypes;   
    if(socket->queryString().keys().contains("nodetypes")){
        fromStringValue(socket->queryString().values("nodetypes"), nodetypes);
    }
    
    QList<QString> ignorableprops;   
    if(socket->queryString().keys().contains("ignorableprops")){
        fromStringValue(socket->queryString().values("ignorableprops"), ignorableprops);
    }
    
    QList<QString> ignorablenodes;   
    if(socket->queryString().keys().contains("ignorablenodes")){
        fromStringValue(socket->queryString().values("ignorablenodes"), ignorablenodes);
    }
    
    bool enabled;   
    if(socket->queryString().keys().contains("enabled")){
        fromStringValue(socket->queryString().value("enabled"), enabled);
    }
    
    QList<QString> distfolders;   
    if(socket->queryString().keys().contains("distfolders")){
        fromStringValue(socket->queryString().values("distfolders"), distfolders);
    }
    


    emit comAdobeCqSocialSyncImplUserSyncListenerImpl( post,  apply,  _delete,  action,  location,  propertylist,  nodetypes,  ignorableprops,  ignorablenodes,  enabled,  distfolders);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialTranslationImplTranslationServiceConfigManagerRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.translation.impl.TranslationServiceConfigManager";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialTranslationImplTranslationServiceConfigManager, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialTranslationImplTranslationServiceConfigManager);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString translate_language;   
    if(socket->queryString().keys().contains("translate_language")){
        fromStringValue(socket->queryString().value("translate_language"), translate_language);
    }
    
    QString translate_display;   
    if(socket->queryString().keys().contains("translate_display")){
        fromStringValue(socket->queryString().value("translate_display"), translate_display);
    }
    
    bool translate_attribution;   
    if(socket->queryString().keys().contains("translate_attribution")){
        fromStringValue(socket->queryString().value("translate_attribution"), translate_attribution);
    }
    
    QString translate_caching;   
    if(socket->queryString().keys().contains("translate_caching")){
        fromStringValue(socket->queryString().value("translate_caching"), translate_caching);
    }
    
    QString translate_smart_rendering;   
    if(socket->queryString().keys().contains("translate_smart_rendering")){
        fromStringValue(socket->queryString().value("translate_smart_rendering"), translate_smart_rendering);
    }
    
    QString translate_caching_duration;   
    if(socket->queryString().keys().contains("translate_caching_duration")){
        fromStringValue(socket->queryString().value("translate_caching_duration"), translate_caching_duration);
    }
    
    QString translate_session_save_interval;   
    if(socket->queryString().keys().contains("translate_session_save_interval")){
        fromStringValue(socket->queryString().value("translate_session_save_interval"), translate_session_save_interval);
    }
    
    QString translate_session_save_batch_limit;   
    if(socket->queryString().keys().contains("translate_session_save_batch_limit")){
        fromStringValue(socket->queryString().value("translate_session_save_batch_limit"), translate_session_save_batch_limit);
    }
    


    emit comAdobeCqSocialTranslationImplTranslationServiceConfigManager( post,  apply,  _delete,  action,  location,  propertylist,  translate_language,  translate_display,  translate_attribution,  translate_caching,  translate_smart_rendering,  translate_caching_duration,  translate_session_save_interval,  translate_session_save_batch_limit);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialTranslationImplUGCLanguageDetectorRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.translation.impl.UGCLanguageDetector";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialTranslationImplUGCLanguageDetector, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialTranslationImplUGCLanguageDetector);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString event_topics;   
    if(socket->queryString().keys().contains("event_topics")){
        fromStringValue(socket->queryString().value("event_topics"), event_topics);
    }
    
    QString event_filter;   
    if(socket->queryString().keys().contains("event_filter")){
        fromStringValue(socket->queryString().value("event_filter"), event_filter);
    }
    
    QList<QString> translate_listener_type;   
    if(socket->queryString().keys().contains("translate_listener_type")){
        fromStringValue(socket->queryString().values("translate_listener_type"), translate_listener_type);
    }
    
    QList<QString> translate_property_list;   
    if(socket->queryString().keys().contains("translate_property_list")){
        fromStringValue(socket->queryString().values("translate_property_list"), translate_property_list);
    }
    
    qint32 pool_size;   
    if(socket->queryString().keys().contains("pool_size")){
        fromStringValue(socket->queryString().value("pool_size"), pool_size);
    }
    
    qint32 max_pool_size;   
    if(socket->queryString().keys().contains("max_pool_size")){
        fromStringValue(socket->queryString().value("max_pool_size"), max_pool_size);
    }
    
    qint32 queue_size;   
    if(socket->queryString().keys().contains("queue_size")){
        fromStringValue(socket->queryString().value("queue_size"), queue_size);
    }
    
    qint32 keep_alive_time;   
    if(socket->queryString().keys().contains("keep_alive_time")){
        fromStringValue(socket->queryString().value("keep_alive_time"), keep_alive_time);
    }
    


    emit comAdobeCqSocialTranslationImplUGCLanguageDetector( post,  apply,  _delete,  action,  location,  propertylist,  event_topics,  event_filter,  translate_listener_type,  translate_property_list,  pool_size,  max_pool_size,  queue_size,  keep_alive_time);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.ugcbase.dispatcher.impl.FlushServiceImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 thread_pool_size;   
    if(socket->queryString().keys().contains("thread_pool_size")){
        fromStringValue(socket->queryString().value("thread_pool_size"), thread_pool_size);
    }
    
    qint32 delay_time;   
    if(socket->queryString().keys().contains("delay_time")){
        fromStringValue(socket->queryString().value("delay_time"), delay_time);
    }
    
    qint32 worker_sleep_time;   
    if(socket->queryString().keys().contains("worker_sleep_time")){
        fromStringValue(socket->queryString().value("worker_sleep_time"), worker_sleep_time);
    }
    


    emit comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl( post,  apply,  _delete,  action,  location,  propertylist,  thread_pool_size,  delay_time,  worker_sleep_time);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.ugcbase.impl.AysncReverseReplicatorImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 pool_size;   
    if(socket->queryString().keys().contains("pool_size")){
        fromStringValue(socket->queryString().value("pool_size"), pool_size);
    }
    
    qint32 max_pool_size;   
    if(socket->queryString().keys().contains("max_pool_size")){
        fromStringValue(socket->queryString().value("max_pool_size"), max_pool_size);
    }
    
    qint32 queue_size;   
    if(socket->queryString().keys().contains("queue_size")){
        fromStringValue(socket->queryString().value("queue_size"), queue_size);
    }
    
    qint32 keep_alive_time;   
    if(socket->queryString().keys().contains("keep_alive_time")){
        fromStringValue(socket->queryString().value("keep_alive_time"), keep_alive_time);
    }
    


    emit comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl( post,  apply,  _delete,  action,  location,  propertylist,  pool_size,  max_pool_size,  queue_size,  keep_alive_time);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialUgcbaseImplPublisherConfigurationImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.ugcbase.impl.PublisherConfigurationImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialUgcbaseImplPublisherConfigurationImpl, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialUgcbaseImplPublisherConfigurationImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool is_primary_publisher;   
    if(socket->queryString().keys().contains("is_primary_publisher")){
        fromStringValue(socket->queryString().value("is_primary_publisher"), is_primary_publisher);
    }
    


    emit comAdobeCqSocialUgcbaseImplPublisherConfigurationImpl( post,  apply,  _delete,  action,  location,  propertylist,  is_primary_publisher);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialUgcbaseImplSocialUtilsImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.ugcbase.impl.SocialUtilsImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialUgcbaseImplSocialUtilsImpl, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialUgcbaseImplSocialUtilsImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool legacy_cloud_ugc_path_mapping;   
    if(socket->queryString().keys().contains("legacy_cloud_ugc_path_mapping")){
        fromStringValue(socket->queryString().value("legacy_cloud_ugc_path_mapping"), legacy_cloud_ugc_path_mapping);
    }
    


    emit comAdobeCqSocialUgcbaseImplSocialUtilsImpl( post,  apply,  _delete,  action,  location,  propertylist,  legacy_cloud_ugc_path_mapping);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialUgcbaseModerationImplAutoModerationImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.AutoModerationImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialUgcbaseModerationImplAutoModerationImpl, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialUgcbaseModerationImplAutoModerationImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> automoderation_sequence;   
    if(socket->queryString().keys().contains("automoderation_sequence")){
        fromStringValue(socket->queryString().values("automoderation_sequence"), automoderation_sequence);
    }
    
    bool automoderation_onfailurestop;   
    if(socket->queryString().keys().contains("automoderation_onfailurestop")){
        fromStringValue(socket->queryString().value("automoderation_onfailurestop"), automoderation_onfailurestop);
    }
    


    emit comAdobeCqSocialUgcbaseModerationImplAutoModerationImpl( post,  apply,  _delete,  action,  location,  propertylist,  automoderation_sequence,  automoderation_onfailurestop);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialUgcbaseModerationImplSentimentProcessRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.SentimentProcess";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialUgcbaseModerationImplSentimentProcess, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialUgcbaseModerationImplSentimentProcess);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> watchwords_positive;   
    if(socket->queryString().keys().contains("watchwords_positive")){
        fromStringValue(socket->queryString().values("watchwords_positive"), watchwords_positive);
    }
    
    QList<QString> watchwords_negative;   
    if(socket->queryString().keys().contains("watchwords_negative")){
        fromStringValue(socket->queryString().values("watchwords_negative"), watchwords_negative);
    }
    
    QString watchwords_path;   
    if(socket->queryString().keys().contains("watchwords_path")){
        fromStringValue(socket->queryString().value("watchwords_path"), watchwords_path);
    }
    
    QString sentiment_path;   
    if(socket->queryString().keys().contains("sentiment_path")){
        fromStringValue(socket->queryString().value("sentiment_path"), sentiment_path);
    }
    


    emit comAdobeCqSocialUgcbaseModerationImplSentimentProcess( post,  apply,  _delete,  action,  location,  propertylist,  watchwords_positive,  watchwords_negative,  watchwords_path,  sentiment_path);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.DefaultAttachmentTypeBlacklistService";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> default_attachment_type_blacklist;   
    if(socket->queryString().keys().contains("default_attachment_type_blacklist")){
        fromStringValue(socket->queryString().values("default_attachment_type_blacklist"), default_attachment_type_blacklist);
    }
    
    QList<QString> baseline_attachment_type_blacklist;   
    if(socket->queryString().keys().contains("baseline_attachment_type_blacklist")){
        fromStringValue(socket->queryString().values("baseline_attachment_type_blacklist"), baseline_attachment_type_blacklist);
    }
    


    emit comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli( post,  apply,  _delete,  action,  location,  propertylist,  default_attachment_type_blacklist,  baseline_attachment_type_blacklist);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.SaferSlingPostValidatorImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> parameter_whitelist;   
    if(socket->queryString().keys().contains("parameter_whitelist")){
        fromStringValue(socket->queryString().values("parameter_whitelist"), parameter_whitelist);
    }
    
    QList<QString> parameter_whitelist_prefixes;   
    if(socket->queryString().keys().contains("parameter_whitelist_prefixes")){
        fromStringValue(socket->queryString().values("parameter_whitelist_prefixes"), parameter_whitelist_prefixes);
    }
    
    QList<QString> binary_parameter_whitelist;   
    if(socket->queryString().keys().contains("binary_parameter_whitelist")){
        fromStringValue(socket->queryString().values("binary_parameter_whitelist"), binary_parameter_whitelist);
    }
    
    QList<QString> modifier_whitelist;   
    if(socket->queryString().keys().contains("modifier_whitelist")){
        fromStringValue(socket->queryString().values("modifier_whitelist"), modifier_whitelist);
    }
    
    QList<QString> operation_whitelist;   
    if(socket->queryString().keys().contains("operation_whitelist")){
        fromStringValue(socket->queryString().values("operation_whitelist"), operation_whitelist);
    }
    
    QList<QString> operation_whitelist_prefixes;   
    if(socket->queryString().keys().contains("operation_whitelist_prefixes")){
        fromStringValue(socket->queryString().values("operation_whitelist_prefixes"), operation_whitelist_prefixes);
    }
    
    QList<QString> typehint_whitelist;   
    if(socket->queryString().keys().contains("typehint_whitelist")){
        fromStringValue(socket->queryString().values("typehint_whitelist"), typehint_whitelist);
    }
    
    QList<QString> resourcetype_whitelist;   
    if(socket->queryString().keys().contains("resourcetype_whitelist")){
        fromStringValue(socket->queryString().values("resourcetype_whitelist"), resourcetype_whitelist);
    }
    


    emit comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl( post,  apply,  _delete,  action,  location,  propertylist,  parameter_whitelist,  parameter_whitelist_prefixes,  binary_parameter_whitelist,  modifier_whitelist,  operation_whitelist,  operation_whitelist_prefixes,  typehint_whitelist,  resourcetype_whitelist);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.user.endpoints.impl.UsersGroupFromPublishServlet";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString sling_servlet_extensions;   
    if(socket->queryString().keys().contains("sling_servlet_extensions")){
        fromStringValue(socket->queryString().value("sling_servlet_extensions"), sling_servlet_extensions);
    }
    
    QString sling_servlet_paths;   
    if(socket->queryString().keys().contains("sling_servlet_paths")){
        fromStringValue(socket->queryString().value("sling_servlet_paths"), sling_servlet_paths);
    }
    
    QString sling_servlet_methods;   
    if(socket->queryString().keys().contains("sling_servlet_methods")){
        fromStringValue(socket->queryString().value("sling_servlet_methods"), sling_servlet_methods);
    }
    


    emit comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet( post,  apply,  _delete,  action,  location,  propertylist,  sling_servlet_extensions,  sling_servlet_paths,  sling_servlet_methods);
}


void OAIConfigmgrApiRequest::comAdobeCqSocialUserImplTransportHttpToPublisherRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.social.user.impl.transport.HttpToPublisher";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqSocialUserImplTransportHttpToPublisher, handler, &OAIConfigmgrApiHandler::comAdobeCqSocialUserImplTransportHttpToPublisher);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool enable;   
    if(socket->queryString().keys().contains("enable")){
        fromStringValue(socket->queryString().value("enable"), enable);
    }
    
    QList<QString> agent_configuration;   
    if(socket->queryString().keys().contains("agent_configuration")){
        fromStringValue(socket->queryString().values("agent_configuration"), agent_configuration);
    }
    
    QString context_path;   
    if(socket->queryString().keys().contains("context_path")){
        fromStringValue(socket->queryString().value("context_path"), context_path);
    }
    
    QList<QString> disabled_cipher_suites;   
    if(socket->queryString().keys().contains("disabled_cipher_suites")){
        fromStringValue(socket->queryString().values("disabled_cipher_suites"), disabled_cipher_suites);
    }
    
    QList<QString> enabled_cipher_suites;   
    if(socket->queryString().keys().contains("enabled_cipher_suites")){
        fromStringValue(socket->queryString().values("enabled_cipher_suites"), enabled_cipher_suites);
    }
    


    emit comAdobeCqSocialUserImplTransportHttpToPublisher( post,  apply,  _delete,  action,  location,  propertylist,  enable,  agent_configuration,  context_path,  disabled_cipher_suites,  enabled_cipher_suites);
}


void OAIConfigmgrApiRequest::comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.ui.wcm.commons.internal.servlets.rte.RTEFilterServletFactory.amended";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact, handler, &OAIConfigmgrApiHandler::comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> resource_types;   
    if(socket->queryString().keys().contains("resource_types")){
        fromStringValue(socket->queryString().values("resource_types"), resource_types);
    }
    


    emit comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact( post,  apply,  _delete,  action,  location,  propertylist,  resource_types);
}


void OAIConfigmgrApiRequest::comAdobeCqUpgradesCleanupImplUpgradeContentCleanupRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeContentCleanup";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqUpgradesCleanupImplUpgradeContentCleanup, handler, &OAIConfigmgrApiHandler::comAdobeCqUpgradesCleanupImplUpgradeContentCleanup);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> delete_path_regexps;   
    if(socket->queryString().keys().contains("delete_path_regexps")){
        fromStringValue(socket->queryString().values("delete_path_regexps"), delete_path_regexps);
    }
    
    QString delete_sql2_query;   
    if(socket->queryString().keys().contains("delete_sql2_query")){
        fromStringValue(socket->queryString().value("delete_sql2_query"), delete_sql2_query);
    }
    


    emit comAdobeCqUpgradesCleanupImplUpgradeContentCleanup( post,  apply,  _delete,  action,  location,  propertylist,  delete_path_regexps,  delete_sql2_query);
}


void OAIConfigmgrApiRequest::comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeInstallFolderCleanup";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup, handler, &OAIConfigmgrApiHandler::comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> delete_name_regexps;   
    if(socket->queryString().keys().contains("delete_name_regexps")){
        fromStringValue(socket->queryString().values("delete_name_regexps"), delete_name_regexps);
    }
    


    emit comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup( post,  apply,  _delete,  action,  location,  propertylist,  delete_name_regexps);
}


void OAIConfigmgrApiRequest::comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncDeleteConfigProviderService";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService, handler, &OAIConfigmgrApiHandler::comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 threshold;   
    if(socket->queryString().keys().contains("threshold")){
        fromStringValue(socket->queryString().value("threshold"), threshold);
    }
    
    QString job_topic_name;   
    if(socket->queryString().keys().contains("job_topic_name")){
        fromStringValue(socket->queryString().value("job_topic_name"), job_topic_name);
    }
    
    bool email_enabled;   
    if(socket->queryString().keys().contains("email_enabled")){
        fromStringValue(socket->queryString().value("email_enabled"), email_enabled);
    }
    


    emit comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService( post,  apply,  _delete,  action,  location,  propertylist,  threshold,  job_topic_name,  email_enabled);
}


void OAIConfigmgrApiRequest::comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncJobCleanUpTask";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask, handler, &OAIConfigmgrApiHandler::comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString scheduler_expression;   
    if(socket->queryString().keys().contains("scheduler_expression")){
        fromStringValue(socket->queryString().value("scheduler_expression"), scheduler_expression);
    }
    
    qint32 job_purge_threshold;   
    if(socket->queryString().keys().contains("job_purge_threshold")){
        fromStringValue(socket->queryString().value("job_purge_threshold"), job_purge_threshold);
    }
    
    qint32 job_purge_max_jobs;   
    if(socket->queryString().keys().contains("job_purge_max_jobs")){
        fromStringValue(socket->queryString().value("job_purge_max_jobs"), job_purge_max_jobs);
    }
    


    emit comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask( post,  apply,  _delete,  action,  location,  propertylist,  scheduler_expression,  job_purge_threshold,  job_purge_max_jobs);
}


void OAIConfigmgrApiRequest::comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncMoveConfigProviderService";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService, handler, &OAIConfigmgrApiHandler::comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 threshold;   
    if(socket->queryString().keys().contains("threshold")){
        fromStringValue(socket->queryString().value("threshold"), threshold);
    }
    
    QString job_topic_name;   
    if(socket->queryString().keys().contains("job_topic_name")){
        fromStringValue(socket->queryString().value("job_topic_name"), job_topic_name);
    }
    
    bool email_enabled;   
    if(socket->queryString().keys().contains("email_enabled")){
        fromStringValue(socket->queryString().value("email_enabled"), email_enabled);
    }
    


    emit comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService( post,  apply,  _delete,  action,  location,  propertylist,  threshold,  job_topic_name,  email_enabled);
}


void OAIConfigmgrApiRequest::comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncPageMoveConfigProviderService";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService, handler, &OAIConfigmgrApiHandler::comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 threshold;   
    if(socket->queryString().keys().contains("threshold")){
        fromStringValue(socket->queryString().value("threshold"), threshold);
    }
    
    QString job_topic_name;   
    if(socket->queryString().keys().contains("job_topic_name")){
        fromStringValue(socket->queryString().value("job_topic_name"), job_topic_name);
    }
    
    bool email_enabled;   
    if(socket->queryString().keys().contains("email_enabled")){
        fromStringValue(socket->queryString().value("email_enabled"), email_enabled);
    }
    


    emit comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService( post,  apply,  _delete,  action,  location,  propertylist,  threshold,  job_topic_name,  email_enabled);
}


void OAIConfigmgrApiRequest::comAdobeCqWcmLaunchesImplLaunchesEventHandlerRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.wcm.launches.impl.LaunchesEventHandler";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqWcmLaunchesImplLaunchesEventHandler, handler, &OAIConfigmgrApiHandler::comAdobeCqWcmLaunchesImplLaunchesEventHandler);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString event_filter;   
    if(socket->queryString().keys().contains("event_filter")){
        fromStringValue(socket->queryString().value("event_filter"), event_filter);
    }
    
    qint32 launches_eventhandler_threadpool_maxsize;   
    if(socket->queryString().keys().contains("launches_eventhandler_threadpool_maxsize")){
        fromStringValue(socket->queryString().value("launches_eventhandler_threadpool_maxsize"), launches_eventhandler_threadpool_maxsize);
    }
    
    QString launches_eventhandler_threadpool_priority;   
    if(socket->queryString().keys().contains("launches_eventhandler_threadpool_priority")){
        fromStringValue(socket->queryString().value("launches_eventhandler_threadpool_priority"), launches_eventhandler_threadpool_priority);
    }
    
    bool launches_eventhandler_updatelastmodification;   
    if(socket->queryString().keys().contains("launches_eventhandler_updatelastmodification")){
        fromStringValue(socket->queryString().value("launches_eventhandler_updatelastmodification"), launches_eventhandler_updatelastmodification);
    }
    


    emit comAdobeCqWcmLaunchesImplLaunchesEventHandler( post,  apply,  _delete,  action,  location,  propertylist,  event_filter,  launches_eventhandler_threadpool_maxsize,  launches_eventhandler_threadpool_priority,  launches_eventhandler_updatelastmodification);
}


void OAIConfigmgrApiRequest::comAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.wcm.mobile.qrcode.servlet.QRCodeImageGenerator";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator, handler, &OAIConfigmgrApiHandler::comAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> cq_wcm_qrcode_servlet_whitelist;   
    if(socket->queryString().keys().contains("cq_wcm_qrcode_servlet_whitelist")){
        fromStringValue(socket->queryString().values("cq_wcm_qrcode_servlet_whitelist"), cq_wcm_qrcode_servlet_whitelist);
    }
    


    emit comAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator( post,  apply,  _delete,  action,  location,  propertylist,  cq_wcm_qrcode_servlet_whitelist);
}


void OAIConfigmgrApiRequest::comAdobeCqWcmStyleInternalComponentStyleInfoCacheImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.wcm.style.internal.ComponentStyleInfoCacheImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl, handler, &OAIConfigmgrApiHandler::comAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 size;   
    if(socket->queryString().keys().contains("size")){
        fromStringValue(socket->queryString().value("size"), size);
    }
    


    emit comAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl( post,  apply,  _delete,  action,  location,  propertylist,  size);
}


void OAIConfigmgrApiRequest::comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.cq.wcm.translation.impl.TranslationPlatformConfigurationImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl, handler, &OAIConfigmgrApiHandler::comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString sync_translation_state_scheduling_format;   
    if(socket->queryString().keys().contains("sync_translation_state_scheduling_format")){
        fromStringValue(socket->queryString().value("sync_translation_state_scheduling_format"), sync_translation_state_scheduling_format);
    }
    
    QString scheduling_repeat_translation_scheduling_format;   
    if(socket->queryString().keys().contains("scheduling_repeat_translation_scheduling_format")){
        fromStringValue(socket->queryString().value("scheduling_repeat_translation_scheduling_format"), scheduling_repeat_translation_scheduling_format);
    }
    
    QString sync_translation_state_lock_timeout_in_minutes;   
    if(socket->queryString().keys().contains("sync_translation_state_lock_timeout_in_minutes")){
        fromStringValue(socket->queryString().value("sync_translation_state_lock_timeout_in_minutes"), sync_translation_state_lock_timeout_in_minutes);
    }
    
    QString export_format;   
    if(socket->queryString().keys().contains("export_format")){
        fromStringValue(socket->queryString().value("export_format"), export_format);
    }
    


    emit comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl( post,  apply,  _delete,  action,  location,  propertylist,  sync_translation_state_scheduling_format,  scheduling_repeat_translation_scheduling_format,  sync_translation_state_lock_timeout_in_minutes,  export_format);
}


void OAIConfigmgrApiRequest::comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.fd.fp.config.FormsPortalDraftsandSubmissionConfigService";
    connect(this, &OAIConfigmgrApiRequest::comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService, handler, &OAIConfigmgrApiHandler::comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> portal_outboxes;   
    if(socket->queryString().keys().contains("portal_outboxes")){
        fromStringValue(socket->queryString().values("portal_outboxes"), portal_outboxes);
    }
    
    QString draft_data_service;   
    if(socket->queryString().keys().contains("draft_data_service")){
        fromStringValue(socket->queryString().value("draft_data_service"), draft_data_service);
    }
    
    QString draft_metadata_service;   
    if(socket->queryString().keys().contains("draft_metadata_service")){
        fromStringValue(socket->queryString().value("draft_metadata_service"), draft_metadata_service);
    }
    
    QString submit_data_service;   
    if(socket->queryString().keys().contains("submit_data_service")){
        fromStringValue(socket->queryString().value("submit_data_service"), submit_data_service);
    }
    
    QString submit_metadata_service;   
    if(socket->queryString().keys().contains("submit_metadata_service")){
        fromStringValue(socket->queryString().value("submit_metadata_service"), submit_metadata_service);
    }
    
    QString pending_sign_data_service;   
    if(socket->queryString().keys().contains("pending_sign_data_service")){
        fromStringValue(socket->queryString().value("pending_sign_data_service"), pending_sign_data_service);
    }
    
    QString pending_sign_metadata_service;   
    if(socket->queryString().keys().contains("pending_sign_metadata_service")){
        fromStringValue(socket->queryString().value("pending_sign_metadata_service"), pending_sign_metadata_service);
    }
    


    emit comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService( post,  apply,  _delete,  action,  location,  propertylist,  portal_outboxes,  draft_data_service,  draft_metadata_service,  submit_data_service,  submit_metadata_service,  pending_sign_data_service,  pending_sign_metadata_service);
}


void OAIConfigmgrApiRequest::comAdobeFdFpConfigFormsPortalSchedulerServiceRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.fd.fp.config.FormsPortalSchedulerService";
    connect(this, &OAIConfigmgrApiRequest::comAdobeFdFpConfigFormsPortalSchedulerService, handler, &OAIConfigmgrApiHandler::comAdobeFdFpConfigFormsPortalSchedulerService);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString formportal_interval;   
    if(socket->queryString().keys().contains("formportal_interval")){
        fromStringValue(socket->queryString().value("formportal_interval"), formportal_interval);
    }
    


    emit comAdobeFdFpConfigFormsPortalSchedulerService( post,  apply,  _delete,  action,  location,  propertylist,  formportal_interval);
}


void OAIConfigmgrApiRequest::comAdobeFormsCommonServiceImplDefaultDataProviderRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.forms.common.service.impl.DefaultDataProvider";
    connect(this, &OAIConfigmgrApiRequest::comAdobeFormsCommonServiceImplDefaultDataProvider, handler, &OAIConfigmgrApiHandler::comAdobeFormsCommonServiceImplDefaultDataProvider);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> alloweddata_file_locations;   
    if(socket->queryString().keys().contains("alloweddata_file_locations")){
        fromStringValue(socket->queryString().values("alloweddata_file_locations"), alloweddata_file_locations);
    }
    


    emit comAdobeFormsCommonServiceImplDefaultDataProvider( post,  apply,  _delete,  action,  location,  propertylist,  alloweddata_file_locations);
}


void OAIConfigmgrApiRequest::comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.forms.common.service.impl.FormsCommonConfigurationServiceImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp, handler, &OAIConfigmgrApiHandler::comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString temp_storage_config;   
    if(socket->queryString().keys().contains("temp_storage_config")){
        fromStringValue(socket->queryString().value("temp_storage_config"), temp_storage_config);
    }
    


    emit comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp( post,  apply,  _delete,  action,  location,  propertylist,  temp_storage_config);
}


void OAIConfigmgrApiRequest::comAdobeFormsCommonServletTempCleanUpTaskRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.forms.common.servlet.TempCleanUpTask";
    connect(this, &OAIConfigmgrApiRequest::comAdobeFormsCommonServletTempCleanUpTask, handler, &OAIConfigmgrApiHandler::comAdobeFormsCommonServletTempCleanUpTask);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString scheduler_expression;   
    if(socket->queryString().keys().contains("scheduler_expression")){
        fromStringValue(socket->queryString().value("scheduler_expression"), scheduler_expression);
    }
    
    QString duration_for_temporary_storage;   
    if(socket->queryString().keys().contains("duration_for_temporary_storage")){
        fromStringValue(socket->queryString().value("duration_for_temporary_storage"), duration_for_temporary_storage);
    }
    
    QString duration_for_anonymous_storage;   
    if(socket->queryString().keys().contains("duration_for_anonymous_storage")){
        fromStringValue(socket->queryString().value("duration_for_anonymous_storage"), duration_for_anonymous_storage);
    }
    


    emit comAdobeFormsCommonServletTempCleanUpTask( post,  apply,  _delete,  action,  location,  propertylist,  scheduler_expression,  duration_for_temporary_storage,  duration_for_anonymous_storage);
}


void OAIConfigmgrApiRequest::comAdobeGraniteAcpPlatformPlatformServletRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.acp.platform.PlatformServlet";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteAcpPlatformPlatformServlet, handler, &OAIConfigmgrApiHandler::comAdobeGraniteAcpPlatformPlatformServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 query_limit;   
    if(socket->queryString().keys().contains("query_limit")){
        fromStringValue(socket->queryString().value("query_limit"), query_limit);
    }
    
    QList<QString> file_type_extension_map;   
    if(socket->queryString().keys().contains("file_type_extension_map")){
        fromStringValue(socket->queryString().values("file_type_extension_map"), file_type_extension_map);
    }
    


    emit comAdobeGraniteAcpPlatformPlatformServlet( post,  apply,  _delete,  action,  location,  propertylist,  query_limit,  file_type_extension_map);
}


void OAIConfigmgrApiRequest::comAdobeGraniteActivitystreamsImplActivityManagerImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.activitystreams.impl.ActivityManagerImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteActivitystreamsImplActivityManagerImpl, handler, &OAIConfigmgrApiHandler::comAdobeGraniteActivitystreamsImplActivityManagerImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> aggregate_relationships;   
    if(socket->queryString().keys().contains("aggregate_relationships")){
        fromStringValue(socket->queryString().values("aggregate_relationships"), aggregate_relationships);
    }
    
    bool aggregate_descend_virtual;   
    if(socket->queryString().keys().contains("aggregate_descend_virtual")){
        fromStringValue(socket->queryString().value("aggregate_descend_virtual"), aggregate_descend_virtual);
    }
    


    emit comAdobeGraniteActivitystreamsImplActivityManagerImpl( post,  apply,  _delete,  action,  location,  propertylist,  aggregate_relationships,  aggregate_descend_virtual);
}


void OAIConfigmgrApiRequest::comAdobeGraniteAnalyzerBaseSystemStatusServletRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.analyzer.base.SystemStatusServlet";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteAnalyzerBaseSystemStatusServlet, handler, &OAIConfigmgrApiHandler::comAdobeGraniteAnalyzerBaseSystemStatusServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool disabled;   
    if(socket->queryString().keys().contains("disabled")){
        fromStringValue(socket->queryString().value("disabled"), disabled);
    }
    


    emit comAdobeGraniteAnalyzerBaseSystemStatusServlet( post,  apply,  _delete,  action,  location,  propertylist,  disabled);
}


void OAIConfigmgrApiRequest::comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.analyzer.scripts.compile.AllScriptsCompilerServlet";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet, handler, &OAIConfigmgrApiHandler::comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool disabled;   
    if(socket->queryString().keys().contains("disabled")){
        fromStringValue(socket->queryString().value("disabled"), disabled);
    }
    


    emit comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet( post,  apply,  _delete,  action,  location,  propertylist,  disabled);
}


void OAIConfigmgrApiRequest::comAdobeGraniteApicontrollerFilterResolverHookFactoryRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.apicontroller.FilterResolverHookFactory";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteApicontrollerFilterResolverHookFactory, handler, &OAIConfigmgrApiHandler::comAdobeGraniteApicontrollerFilterResolverHookFactory);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString com_adobe_cq_cdn_cdn_rewriter;   
    if(socket->queryString().keys().contains("com_adobe_cq_cdn_cdn_rewriter")){
        fromStringValue(socket->queryString().value("com_adobe_cq_cdn_cdn_rewriter"), com_adobe_cq_cdn_cdn_rewriter);
    }
    
    QString com_adobe_cq_cloud_config_components;   
    if(socket->queryString().keys().contains("com_adobe_cq_cloud_config_components")){
        fromStringValue(socket->queryString().value("com_adobe_cq_cloud_config_components"), com_adobe_cq_cloud_config_components);
    }
    
    QString com_adobe_cq_cloud_config_core;   
    if(socket->queryString().keys().contains("com_adobe_cq_cloud_config_core")){
        fromStringValue(socket->queryString().value("com_adobe_cq_cloud_config_core"), com_adobe_cq_cloud_config_core);
    }
    
    QString com_adobe_cq_cloud_config_ui;   
    if(socket->queryString().keys().contains("com_adobe_cq_cloud_config_ui")){
        fromStringValue(socket->queryString().value("com_adobe_cq_cloud_config_ui"), com_adobe_cq_cloud_config_ui);
    }
    
    QString com_adobe_cq_com_adobe_cq_editor;   
    if(socket->queryString().keys().contains("com_adobe_cq_com_adobe_cq_editor")){
        fromStringValue(socket->queryString().value("com_adobe_cq_com_adobe_cq_editor"), com_adobe_cq_com_adobe_cq_editor);
    }
    
    QString com_adobe_cq_com_adobe_cq_projects_core;   
    if(socket->queryString().keys().contains("com_adobe_cq_com_adobe_cq_projects_core")){
        fromStringValue(socket->queryString().value("com_adobe_cq_com_adobe_cq_projects_core"), com_adobe_cq_com_adobe_cq_projects_core);
    }
    
    QString com_adobe_cq_com_adobe_cq_projects_wcm_core;   
    if(socket->queryString().keys().contains("com_adobe_cq_com_adobe_cq_projects_wcm_core")){
        fromStringValue(socket->queryString().value("com_adobe_cq_com_adobe_cq_projects_wcm_core"), com_adobe_cq_com_adobe_cq_projects_wcm_core);
    }
    
    QString com_adobe_cq_com_adobe_cq_ui_commons;   
    if(socket->queryString().keys().contains("com_adobe_cq_com_adobe_cq_ui_commons")){
        fromStringValue(socket->queryString().value("com_adobe_cq_com_adobe_cq_ui_commons"), com_adobe_cq_com_adobe_cq_ui_commons);
    }
    
    QString com_adobe_cq_com_adobe_cq_wcm_style;   
    if(socket->queryString().keys().contains("com_adobe_cq_com_adobe_cq_wcm_style")){
        fromStringValue(socket->queryString().value("com_adobe_cq_com_adobe_cq_wcm_style"), com_adobe_cq_com_adobe_cq_wcm_style);
    }
    
    QString com_adobe_cq_cq_activitymap_integration;   
    if(socket->queryString().keys().contains("com_adobe_cq_cq_activitymap_integration")){
        fromStringValue(socket->queryString().value("com_adobe_cq_cq_activitymap_integration"), com_adobe_cq_cq_activitymap_integration);
    }
    
    QString com_adobe_cq_cq_contexthub_commons;   
    if(socket->queryString().keys().contains("com_adobe_cq_cq_contexthub_commons")){
        fromStringValue(socket->queryString().value("com_adobe_cq_cq_contexthub_commons"), com_adobe_cq_cq_contexthub_commons);
    }
    
    QString com_adobe_cq_cq_dtm;   
    if(socket->queryString().keys().contains("com_adobe_cq_cq_dtm")){
        fromStringValue(socket->queryString().value("com_adobe_cq_cq_dtm"), com_adobe_cq_cq_dtm);
    }
    
    QString com_adobe_cq_cq_healthcheck;   
    if(socket->queryString().keys().contains("com_adobe_cq_cq_healthcheck")){
        fromStringValue(socket->queryString().value("com_adobe_cq_cq_healthcheck"), com_adobe_cq_cq_healthcheck);
    }
    
    QString com_adobe_cq_cq_multisite_targeting;   
    if(socket->queryString().keys().contains("com_adobe_cq_cq_multisite_targeting")){
        fromStringValue(socket->queryString().value("com_adobe_cq_cq_multisite_targeting"), com_adobe_cq_cq_multisite_targeting);
    }
    
    QString com_adobe_cq_cq_pre_upgrade_cleanup;   
    if(socket->queryString().keys().contains("com_adobe_cq_cq_pre_upgrade_cleanup")){
        fromStringValue(socket->queryString().value("com_adobe_cq_cq_pre_upgrade_cleanup"), com_adobe_cq_cq_pre_upgrade_cleanup);
    }
    
    QString com_adobe_cq_cq_product_info_provider;   
    if(socket->queryString().keys().contains("com_adobe_cq_cq_product_info_provider")){
        fromStringValue(socket->queryString().value("com_adobe_cq_cq_product_info_provider"), com_adobe_cq_cq_product_info_provider);
    }
    
    QString com_adobe_cq_cq_rest_sites;   
    if(socket->queryString().keys().contains("com_adobe_cq_cq_rest_sites")){
        fromStringValue(socket->queryString().value("com_adobe_cq_cq_rest_sites"), com_adobe_cq_cq_rest_sites);
    }
    
    QString com_adobe_cq_cq_security_hc;   
    if(socket->queryString().keys().contains("com_adobe_cq_cq_security_hc")){
        fromStringValue(socket->queryString().value("com_adobe_cq_cq_security_hc"), com_adobe_cq_cq_security_hc);
    }
    
    QString com_adobe_cq_dam_cq_dam_svg_handler;   
    if(socket->queryString().keys().contains("com_adobe_cq_dam_cq_dam_svg_handler")){
        fromStringValue(socket->queryString().value("com_adobe_cq_dam_cq_dam_svg_handler"), com_adobe_cq_dam_cq_dam_svg_handler);
    }
    
    QString com_adobe_cq_dam_cq_scene7_imaging;   
    if(socket->queryString().keys().contains("com_adobe_cq_dam_cq_scene7_imaging")){
        fromStringValue(socket->queryString().value("com_adobe_cq_dam_cq_scene7_imaging"), com_adobe_cq_dam_cq_scene7_imaging);
    }
    
    QString com_adobe_cq_dtm_reactor_core;   
    if(socket->queryString().keys().contains("com_adobe_cq_dtm_reactor_core")){
        fromStringValue(socket->queryString().value("com_adobe_cq_dtm_reactor_core"), com_adobe_cq_dtm_reactor_core);
    }
    
    QString com_adobe_cq_dtm_reactor_ui;   
    if(socket->queryString().keys().contains("com_adobe_cq_dtm_reactor_ui")){
        fromStringValue(socket->queryString().value("com_adobe_cq_dtm_reactor_ui"), com_adobe_cq_dtm_reactor_ui);
    }
    
    QString com_adobe_cq_exp_jspel_resolver;   
    if(socket->queryString().keys().contains("com_adobe_cq_exp_jspel_resolver")){
        fromStringValue(socket->queryString().value("com_adobe_cq_exp_jspel_resolver"), com_adobe_cq_exp_jspel_resolver);
    }
    
    QString com_adobe_cq_inbox_cq_inbox;   
    if(socket->queryString().keys().contains("com_adobe_cq_inbox_cq_inbox")){
        fromStringValue(socket->queryString().value("com_adobe_cq_inbox_cq_inbox"), com_adobe_cq_inbox_cq_inbox);
    }
    
    QString com_adobe_cq_json_schema_parser;   
    if(socket->queryString().keys().contains("com_adobe_cq_json_schema_parser")){
        fromStringValue(socket->queryString().value("com_adobe_cq_json_schema_parser"), com_adobe_cq_json_schema_parser);
    }
    
    QString com_adobe_cq_media_cq_media_publishing_dps_fp_core;   
    if(socket->queryString().keys().contains("com_adobe_cq_media_cq_media_publishing_dps_fp_core")){
        fromStringValue(socket->queryString().value("com_adobe_cq_media_cq_media_publishing_dps_fp_core"), com_adobe_cq_media_cq_media_publishing_dps_fp_core);
    }
    
    QString com_adobe_cq_mobile_cq_mobile_caas;   
    if(socket->queryString().keys().contains("com_adobe_cq_mobile_cq_mobile_caas")){
        fromStringValue(socket->queryString().value("com_adobe_cq_mobile_cq_mobile_caas"), com_adobe_cq_mobile_cq_mobile_caas);
    }
    
    QString com_adobe_cq_mobile_cq_mobile_index_builder;   
    if(socket->queryString().keys().contains("com_adobe_cq_mobile_cq_mobile_index_builder")){
        fromStringValue(socket->queryString().value("com_adobe_cq_mobile_cq_mobile_index_builder"), com_adobe_cq_mobile_cq_mobile_index_builder);
    }
    
    QString com_adobe_cq_mobile_cq_mobile_phonegap_build;   
    if(socket->queryString().keys().contains("com_adobe_cq_mobile_cq_mobile_phonegap_build")){
        fromStringValue(socket->queryString().value("com_adobe_cq_mobile_cq_mobile_phonegap_build"), com_adobe_cq_mobile_cq_mobile_phonegap_build);
    }
    
    QString com_adobe_cq_myspell;   
    if(socket->queryString().keys().contains("com_adobe_cq_myspell")){
        fromStringValue(socket->queryString().value("com_adobe_cq_myspell"), com_adobe_cq_myspell);
    }
    
    QString com_adobe_cq_sample_we_retail_core;   
    if(socket->queryString().keys().contains("com_adobe_cq_sample_we_retail_core")){
        fromStringValue(socket->queryString().value("com_adobe_cq_sample_we_retail_core"), com_adobe_cq_sample_we_retail_core);
    }
    
    QString com_adobe_cq_screens_com_adobe_cq_screens_dcc;   
    if(socket->queryString().keys().contains("com_adobe_cq_screens_com_adobe_cq_screens_dcc")){
        fromStringValue(socket->queryString().value("com_adobe_cq_screens_com_adobe_cq_screens_dcc"), com_adobe_cq_screens_com_adobe_cq_screens_dcc);
    }
    
    QString com_adobe_cq_screens_com_adobe_cq_screens_mq_core;   
    if(socket->queryString().keys().contains("com_adobe_cq_screens_com_adobe_cq_screens_mq_core")){
        fromStringValue(socket->queryString().value("com_adobe_cq_screens_com_adobe_cq_screens_mq_core"), com_adobe_cq_screens_com_adobe_cq_screens_mq_core);
    }
    
    QString com_adobe_cq_social_cq_social_as_provider;   
    if(socket->queryString().keys().contains("com_adobe_cq_social_cq_social_as_provider")){
        fromStringValue(socket->queryString().value("com_adobe_cq_social_cq_social_as_provider"), com_adobe_cq_social_cq_social_as_provider);
    }
    
    QString com_adobe_cq_social_cq_social_badging_basic_impl;   
    if(socket->queryString().keys().contains("com_adobe_cq_social_cq_social_badging_basic_impl")){
        fromStringValue(socket->queryString().value("com_adobe_cq_social_cq_social_badging_basic_impl"), com_adobe_cq_social_cq_social_badging_basic_impl);
    }
    
    QString com_adobe_cq_social_cq_social_badging_impl;   
    if(socket->queryString().keys().contains("com_adobe_cq_social_cq_social_badging_impl")){
        fromStringValue(socket->queryString().value("com_adobe_cq_social_cq_social_badging_impl"), com_adobe_cq_social_cq_social_badging_impl);
    }
    
    QString com_adobe_cq_social_cq_social_calendar_impl;   
    if(socket->queryString().keys().contains("com_adobe_cq_social_cq_social_calendar_impl")){
        fromStringValue(socket->queryString().value("com_adobe_cq_social_cq_social_calendar_impl"), com_adobe_cq_social_cq_social_calendar_impl);
    }
    
    QString com_adobe_cq_social_cq_social_content_fragments_impl;   
    if(socket->queryString().keys().contains("com_adobe_cq_social_cq_social_content_fragments_impl")){
        fromStringValue(socket->queryString().value("com_adobe_cq_social_cq_social_content_fragments_impl"), com_adobe_cq_social_cq_social_content_fragments_impl);
    }
    
    QString com_adobe_cq_social_cq_social_enablement_impl;   
    if(socket->queryString().keys().contains("com_adobe_cq_social_cq_social_enablement_impl")){
        fromStringValue(socket->queryString().value("com_adobe_cq_social_cq_social_enablement_impl"), com_adobe_cq_social_cq_social_enablement_impl);
    }
    
    QString com_adobe_cq_social_cq_social_graph_impl;   
    if(socket->queryString().keys().contains("com_adobe_cq_social_cq_social_graph_impl")){
        fromStringValue(socket->queryString().value("com_adobe_cq_social_cq_social_graph_impl"), com_adobe_cq_social_cq_social_graph_impl);
    }
    
    QString com_adobe_cq_social_cq_social_ideation_impl;   
    if(socket->queryString().keys().contains("com_adobe_cq_social_cq_social_ideation_impl")){
        fromStringValue(socket->queryString().value("com_adobe_cq_social_cq_social_ideation_impl"), com_adobe_cq_social_cq_social_ideation_impl);
    }
    
    QString com_adobe_cq_social_cq_social_jcr_provider;   
    if(socket->queryString().keys().contains("com_adobe_cq_social_cq_social_jcr_provider")){
        fromStringValue(socket->queryString().value("com_adobe_cq_social_cq_social_jcr_provider"), com_adobe_cq_social_cq_social_jcr_provider);
    }
    
    QString com_adobe_cq_social_cq_social_members_impl;   
    if(socket->queryString().keys().contains("com_adobe_cq_social_cq_social_members_impl")){
        fromStringValue(socket->queryString().value("com_adobe_cq_social_cq_social_members_impl"), com_adobe_cq_social_cq_social_members_impl);
    }
    
    QString com_adobe_cq_social_cq_social_ms_provider;   
    if(socket->queryString().keys().contains("com_adobe_cq_social_cq_social_ms_provider")){
        fromStringValue(socket->queryString().value("com_adobe_cq_social_cq_social_ms_provider"), com_adobe_cq_social_cq_social_ms_provider);
    }
    
    QString com_adobe_cq_social_cq_social_notifications_channels_web;   
    if(socket->queryString().keys().contains("com_adobe_cq_social_cq_social_notifications_channels_web")){
        fromStringValue(socket->queryString().value("com_adobe_cq_social_cq_social_notifications_channels_web"), com_adobe_cq_social_cq_social_notifications_channels_web);
    }
    
    QString com_adobe_cq_social_cq_social_notifications_impl;   
    if(socket->queryString().keys().contains("com_adobe_cq_social_cq_social_notifications_impl")){
        fromStringValue(socket->queryString().value("com_adobe_cq_social_cq_social_notifications_impl"), com_adobe_cq_social_cq_social_notifications_impl);
    }
    
    QString com_adobe_cq_social_cq_social_rdb_provider;   
    if(socket->queryString().keys().contains("com_adobe_cq_social_cq_social_rdb_provider")){
        fromStringValue(socket->queryString().value("com_adobe_cq_social_cq_social_rdb_provider"), com_adobe_cq_social_cq_social_rdb_provider);
    }
    
    QString com_adobe_cq_social_cq_social_scf_impl;   
    if(socket->queryString().keys().contains("com_adobe_cq_social_cq_social_scf_impl")){
        fromStringValue(socket->queryString().value("com_adobe_cq_social_cq_social_scf_impl"), com_adobe_cq_social_cq_social_scf_impl);
    }
    
    QString com_adobe_cq_social_cq_social_scoring_basic_impl;   
    if(socket->queryString().keys().contains("com_adobe_cq_social_cq_social_scoring_basic_impl")){
        fromStringValue(socket->queryString().value("com_adobe_cq_social_cq_social_scoring_basic_impl"), com_adobe_cq_social_cq_social_scoring_basic_impl);
    }
    
    QString com_adobe_cq_social_cq_social_scoring_impl;   
    if(socket->queryString().keys().contains("com_adobe_cq_social_cq_social_scoring_impl")){
        fromStringValue(socket->queryString().value("com_adobe_cq_social_cq_social_scoring_impl"), com_adobe_cq_social_cq_social_scoring_impl);
    }
    
    QString com_adobe_cq_social_cq_social_serviceusers_impl;   
    if(socket->queryString().keys().contains("com_adobe_cq_social_cq_social_serviceusers_impl")){
        fromStringValue(socket->queryString().value("com_adobe_cq_social_cq_social_serviceusers_impl"), com_adobe_cq_social_cq_social_serviceusers_impl);
    }
    
    QString com_adobe_cq_social_cq_social_srp_impl;   
    if(socket->queryString().keys().contains("com_adobe_cq_social_cq_social_srp_impl")){
        fromStringValue(socket->queryString().value("com_adobe_cq_social_cq_social_srp_impl"), com_adobe_cq_social_cq_social_srp_impl);
    }
    
    QString com_adobe_cq_social_cq_social_ugcbase_impl;   
    if(socket->queryString().keys().contains("com_adobe_cq_social_cq_social_ugcbase_impl")){
        fromStringValue(socket->queryString().value("com_adobe_cq_social_cq_social_ugcbase_impl"), com_adobe_cq_social_cq_social_ugcbase_impl);
    }
    
    QString com_adobe_dam_cq_dam_cfm_impl;   
    if(socket->queryString().keys().contains("com_adobe_dam_cq_dam_cfm_impl")){
        fromStringValue(socket->queryString().value("com_adobe_dam_cq_dam_cfm_impl"), com_adobe_dam_cq_dam_cfm_impl);
    }
    
    QString com_adobe_forms_foundation_forms_foundation_base;   
    if(socket->queryString().keys().contains("com_adobe_forms_foundation_forms_foundation_base")){
        fromStringValue(socket->queryString().value("com_adobe_forms_foundation_forms_foundation_base"), com_adobe_forms_foundation_forms_foundation_base);
    }
    
    QString com_adobe_granite_apicontroller;   
    if(socket->queryString().keys().contains("com_adobe_granite_apicontroller")){
        fromStringValue(socket->queryString().value("com_adobe_granite_apicontroller"), com_adobe_granite_apicontroller);
    }
    
    QString com_adobe_granite_asset_core;   
    if(socket->queryString().keys().contains("com_adobe_granite_asset_core")){
        fromStringValue(socket->queryString().value("com_adobe_granite_asset_core"), com_adobe_granite_asset_core);
    }
    
    QString com_adobe_granite_auth_sso;   
    if(socket->queryString().keys().contains("com_adobe_granite_auth_sso")){
        fromStringValue(socket->queryString().value("com_adobe_granite_auth_sso"), com_adobe_granite_auth_sso);
    }
    
    QString com_adobe_granite_bundles_hc_impl;   
    if(socket->queryString().keys().contains("com_adobe_granite_bundles_hc_impl")){
        fromStringValue(socket->queryString().value("com_adobe_granite_bundles_hc_impl"), com_adobe_granite_bundles_hc_impl);
    }
    
    QString com_adobe_granite_compat_router;   
    if(socket->queryString().keys().contains("com_adobe_granite_compat_router")){
        fromStringValue(socket->queryString().value("com_adobe_granite_compat_router"), com_adobe_granite_compat_router);
    }
    
    QString com_adobe_granite_conf;   
    if(socket->queryString().keys().contains("com_adobe_granite_conf")){
        fromStringValue(socket->queryString().value("com_adobe_granite_conf"), com_adobe_granite_conf);
    }
    
    QString com_adobe_granite_conf_ui_core;   
    if(socket->queryString().keys().contains("com_adobe_granite_conf_ui_core")){
        fromStringValue(socket->queryString().value("com_adobe_granite_conf_ui_core"), com_adobe_granite_conf_ui_core);
    }
    
    QString com_adobe_granite_cors;   
    if(socket->queryString().keys().contains("com_adobe_granite_cors")){
        fromStringValue(socket->queryString().value("com_adobe_granite_cors"), com_adobe_granite_cors);
    }
    
    QString com_adobe_granite_crx_explorer;   
    if(socket->queryString().keys().contains("com_adobe_granite_crx_explorer")){
        fromStringValue(socket->queryString().value("com_adobe_granite_crx_explorer"), com_adobe_granite_crx_explorer);
    }
    
    QString com_adobe_granite_crxde_lite;   
    if(socket->queryString().keys().contains("com_adobe_granite_crxde_lite")){
        fromStringValue(socket->queryString().value("com_adobe_granite_crxde_lite"), com_adobe_granite_crxde_lite);
    }
    
    QString com_adobe_granite_crypto_config;   
    if(socket->queryString().keys().contains("com_adobe_granite_crypto_config")){
        fromStringValue(socket->queryString().value("com_adobe_granite_crypto_config"), com_adobe_granite_crypto_config);
    }
    
    QString com_adobe_granite_crypto_extension;   
    if(socket->queryString().keys().contains("com_adobe_granite_crypto_extension")){
        fromStringValue(socket->queryString().value("com_adobe_granite_crypto_extension"), com_adobe_granite_crypto_extension);
    }
    
    QString com_adobe_granite_crypto_file;   
    if(socket->queryString().keys().contains("com_adobe_granite_crypto_file")){
        fromStringValue(socket->queryString().value("com_adobe_granite_crypto_file"), com_adobe_granite_crypto_file);
    }
    
    QString com_adobe_granite_crypto_jcr;   
    if(socket->queryString().keys().contains("com_adobe_granite_crypto_jcr")){
        fromStringValue(socket->queryString().value("com_adobe_granite_crypto_jcr"), com_adobe_granite_crypto_jcr);
    }
    
    QString com_adobe_granite_csrf;   
    if(socket->queryString().keys().contains("com_adobe_granite_csrf")){
        fromStringValue(socket->queryString().value("com_adobe_granite_csrf"), com_adobe_granite_csrf);
    }
    
    QString com_adobe_granite_distribution_core;   
    if(socket->queryString().keys().contains("com_adobe_granite_distribution_core")){
        fromStringValue(socket->queryString().value("com_adobe_granite_distribution_core"), com_adobe_granite_distribution_core);
    }
    
    QString com_adobe_granite_dropwizard_metrics;   
    if(socket->queryString().keys().contains("com_adobe_granite_dropwizard_metrics")){
        fromStringValue(socket->queryString().value("com_adobe_granite_dropwizard_metrics"), com_adobe_granite_dropwizard_metrics);
    }
    
    QString com_adobe_granite_frags_impl;   
    if(socket->queryString().keys().contains("com_adobe_granite_frags_impl")){
        fromStringValue(socket->queryString().value("com_adobe_granite_frags_impl"), com_adobe_granite_frags_impl);
    }
    
    QString com_adobe_granite_gibson;   
    if(socket->queryString().keys().contains("com_adobe_granite_gibson")){
        fromStringValue(socket->queryString().value("com_adobe_granite_gibson"), com_adobe_granite_gibson);
    }
    
    QString com_adobe_granite_infocollector;   
    if(socket->queryString().keys().contains("com_adobe_granite_infocollector")){
        fromStringValue(socket->queryString().value("com_adobe_granite_infocollector"), com_adobe_granite_infocollector);
    }
    
    QString com_adobe_granite_installer_factory_packages;   
    if(socket->queryString().keys().contains("com_adobe_granite_installer_factory_packages")){
        fromStringValue(socket->queryString().value("com_adobe_granite_installer_factory_packages"), com_adobe_granite_installer_factory_packages);
    }
    
    QString com_adobe_granite_jetty_ssl;   
    if(socket->queryString().keys().contains("com_adobe_granite_jetty_ssl")){
        fromStringValue(socket->queryString().value("com_adobe_granite_jetty_ssl"), com_adobe_granite_jetty_ssl);
    }
    
    QString com_adobe_granite_jobs_async;   
    if(socket->queryString().keys().contains("com_adobe_granite_jobs_async")){
        fromStringValue(socket->queryString().value("com_adobe_granite_jobs_async"), com_adobe_granite_jobs_async);
    }
    
    QString com_adobe_granite_maintenance_oak;   
    if(socket->queryString().keys().contains("com_adobe_granite_maintenance_oak")){
        fromStringValue(socket->queryString().value("com_adobe_granite_maintenance_oak"), com_adobe_granite_maintenance_oak);
    }
    
    QString com_adobe_granite_monitoring_core;   
    if(socket->queryString().keys().contains("com_adobe_granite_monitoring_core")){
        fromStringValue(socket->queryString().value("com_adobe_granite_monitoring_core"), com_adobe_granite_monitoring_core);
    }
    
    QString com_adobe_granite_queries;   
    if(socket->queryString().keys().contains("com_adobe_granite_queries")){
        fromStringValue(socket->queryString().value("com_adobe_granite_queries"), com_adobe_granite_queries);
    }
    
    QString com_adobe_granite_replication_hc_impl;   
    if(socket->queryString().keys().contains("com_adobe_granite_replication_hc_impl")){
        fromStringValue(socket->queryString().value("com_adobe_granite_replication_hc_impl"), com_adobe_granite_replication_hc_impl);
    }
    
    QString com_adobe_granite_repository_checker;   
    if(socket->queryString().keys().contains("com_adobe_granite_repository_checker")){
        fromStringValue(socket->queryString().value("com_adobe_granite_repository_checker"), com_adobe_granite_repository_checker);
    }
    
    QString com_adobe_granite_repository_hc_impl;   
    if(socket->queryString().keys().contains("com_adobe_granite_repository_hc_impl")){
        fromStringValue(socket->queryString().value("com_adobe_granite_repository_hc_impl"), com_adobe_granite_repository_hc_impl);
    }
    
    QString com_adobe_granite_rest_assets;   
    if(socket->queryString().keys().contains("com_adobe_granite_rest_assets")){
        fromStringValue(socket->queryString().value("com_adobe_granite_rest_assets"), com_adobe_granite_rest_assets);
    }
    
    QString com_adobe_granite_security_ui;   
    if(socket->queryString().keys().contains("com_adobe_granite_security_ui")){
        fromStringValue(socket->queryString().value("com_adobe_granite_security_ui"), com_adobe_granite_security_ui);
    }
    
    QString com_adobe_granite_startup;   
    if(socket->queryString().keys().contains("com_adobe_granite_startup")){
        fromStringValue(socket->queryString().value("com_adobe_granite_startup"), com_adobe_granite_startup);
    }
    
    QString com_adobe_granite_tagsoup;   
    if(socket->queryString().keys().contains("com_adobe_granite_tagsoup")){
        fromStringValue(socket->queryString().value("com_adobe_granite_tagsoup"), com_adobe_granite_tagsoup);
    }
    
    QString com_adobe_granite_taskmanagement_core;   
    if(socket->queryString().keys().contains("com_adobe_granite_taskmanagement_core")){
        fromStringValue(socket->queryString().value("com_adobe_granite_taskmanagement_core"), com_adobe_granite_taskmanagement_core);
    }
    
    QString com_adobe_granite_taskmanagement_workflow;   
    if(socket->queryString().keys().contains("com_adobe_granite_taskmanagement_workflow")){
        fromStringValue(socket->queryString().value("com_adobe_granite_taskmanagement_workflow"), com_adobe_granite_taskmanagement_workflow);
    }
    
    QString com_adobe_granite_ui_clientlibs_compiler_less;   
    if(socket->queryString().keys().contains("com_adobe_granite_ui_clientlibs_compiler_less")){
        fromStringValue(socket->queryString().value("com_adobe_granite_ui_clientlibs_compiler_less"), com_adobe_granite_ui_clientlibs_compiler_less);
    }
    
    QString com_adobe_granite_ui_clientlibs_processor_gcc;   
    if(socket->queryString().keys().contains("com_adobe_granite_ui_clientlibs_processor_gcc")){
        fromStringValue(socket->queryString().value("com_adobe_granite_ui_clientlibs_processor_gcc"), com_adobe_granite_ui_clientlibs_processor_gcc);
    }
    
    QString com_adobe_granite_webconsole_plugins;   
    if(socket->queryString().keys().contains("com_adobe_granite_webconsole_plugins")){
        fromStringValue(socket->queryString().value("com_adobe_granite_webconsole_plugins"), com_adobe_granite_webconsole_plugins);
    }
    
    QString com_adobe_granite_workflow_console;   
    if(socket->queryString().keys().contains("com_adobe_granite_workflow_console")){
        fromStringValue(socket->queryString().value("com_adobe_granite_workflow_console"), com_adobe_granite_workflow_console);
    }
    
    QString com_adobe_xmp_worker_files_native_fragment_linux;   
    if(socket->queryString().keys().contains("com_adobe_xmp_worker_files_native_fragment_linux")){
        fromStringValue(socket->queryString().value("com_adobe_xmp_worker_files_native_fragment_linux"), com_adobe_xmp_worker_files_native_fragment_linux);
    }
    
    QString com_adobe_xmp_worker_files_native_fragment_macosx;   
    if(socket->queryString().keys().contains("com_adobe_xmp_worker_files_native_fragment_macosx")){
        fromStringValue(socket->queryString().value("com_adobe_xmp_worker_files_native_fragment_macosx"), com_adobe_xmp_worker_files_native_fragment_macosx);
    }
    
    QString com_adobe_xmp_worker_files_native_fragment_win;   
    if(socket->queryString().keys().contains("com_adobe_xmp_worker_files_native_fragment_win")){
        fromStringValue(socket->queryString().value("com_adobe_xmp_worker_files_native_fragment_win"), com_adobe_xmp_worker_files_native_fragment_win);
    }
    
    QString com_day_commons_osgi_wrapper_simple_jndi;   
    if(socket->queryString().keys().contains("com_day_commons_osgi_wrapper_simple_jndi")){
        fromStringValue(socket->queryString().value("com_day_commons_osgi_wrapper_simple_jndi"), com_day_commons_osgi_wrapper_simple_jndi);
    }
    
    QString com_day_cq_cq_authhandler;   
    if(socket->queryString().keys().contains("com_day_cq_cq_authhandler")){
        fromStringValue(socket->queryString().value("com_day_cq_cq_authhandler"), com_day_cq_cq_authhandler);
    }
    
    QString com_day_cq_cq_compat_configupdate;   
    if(socket->queryString().keys().contains("com_day_cq_cq_compat_configupdate")){
        fromStringValue(socket->queryString().value("com_day_cq_cq_compat_configupdate"), com_day_cq_cq_compat_configupdate);
    }
    
    QString com_day_cq_cq_licensebranding;   
    if(socket->queryString().keys().contains("com_day_cq_cq_licensebranding")){
        fromStringValue(socket->queryString().value("com_day_cq_cq_licensebranding"), com_day_cq_cq_licensebranding);
    }
    
    QString com_day_cq_cq_notifcation_impl;   
    if(socket->queryString().keys().contains("com_day_cq_cq_notifcation_impl")){
        fromStringValue(socket->queryString().value("com_day_cq_cq_notifcation_impl"), com_day_cq_cq_notifcation_impl);
    }
    
    QString com_day_cq_cq_replication_audit;   
    if(socket->queryString().keys().contains("com_day_cq_cq_replication_audit")){
        fromStringValue(socket->queryString().value("com_day_cq_cq_replication_audit"), com_day_cq_cq_replication_audit);
    }
    
    QString com_day_cq_cq_search_ext;   
    if(socket->queryString().keys().contains("com_day_cq_cq_search_ext")){
        fromStringValue(socket->queryString().value("com_day_cq_cq_search_ext"), com_day_cq_cq_search_ext);
    }
    
    QString com_day_cq_dam_cq_dam_annotation_print;   
    if(socket->queryString().keys().contains("com_day_cq_dam_cq_dam_annotation_print")){
        fromStringValue(socket->queryString().value("com_day_cq_dam_cq_dam_annotation_print"), com_day_cq_dam_cq_dam_annotation_print);
    }
    
    QString com_day_cq_dam_cq_dam_asset_usage;   
    if(socket->queryString().keys().contains("com_day_cq_dam_cq_dam_asset_usage")){
        fromStringValue(socket->queryString().value("com_day_cq_dam_cq_dam_asset_usage"), com_day_cq_dam_cq_dam_asset_usage);
    }
    
    QString com_day_cq_dam_cq_dam_s7dam;   
    if(socket->queryString().keys().contains("com_day_cq_dam_cq_dam_s7dam")){
        fromStringValue(socket->queryString().value("com_day_cq_dam_cq_dam_s7dam"), com_day_cq_dam_cq_dam_s7dam);
    }
    
    QString com_day_cq_dam_cq_dam_similaritysearch;   
    if(socket->queryString().keys().contains("com_day_cq_dam_cq_dam_similaritysearch")){
        fromStringValue(socket->queryString().value("com_day_cq_dam_cq_dam_similaritysearch"), com_day_cq_dam_cq_dam_similaritysearch);
    }
    
    QString com_day_cq_dam_dam_webdav_support;   
    if(socket->queryString().keys().contains("com_day_cq_dam_dam_webdav_support")){
        fromStringValue(socket->queryString().value("com_day_cq_dam_dam_webdav_support"), com_day_cq_dam_dam_webdav_support);
    }
    
    QString com_day_cq_pre_upgrade_tasks;   
    if(socket->queryString().keys().contains("com_day_cq_pre_upgrade_tasks")){
        fromStringValue(socket->queryString().value("com_day_cq_pre_upgrade_tasks"), com_day_cq_pre_upgrade_tasks);
    }
    
    QString com_day_cq_replication_extensions;   
    if(socket->queryString().keys().contains("com_day_cq_replication_extensions")){
        fromStringValue(socket->queryString().value("com_day_cq_replication_extensions"), com_day_cq_replication_extensions);
    }
    
    QString com_day_cq_wcm_cq_msm_core;   
    if(socket->queryString().keys().contains("com_day_cq_wcm_cq_msm_core")){
        fromStringValue(socket->queryString().value("com_day_cq_wcm_cq_msm_core"), com_day_cq_wcm_cq_msm_core);
    }
    
    QString com_day_cq_wcm_cq_wcm_translation;   
    if(socket->queryString().keys().contains("com_day_cq_wcm_cq_wcm_translation")){
        fromStringValue(socket->queryString().value("com_day_cq_wcm_cq_wcm_translation"), com_day_cq_wcm_cq_wcm_translation);
    }
    
    QString day_commons_jrawio;   
    if(socket->queryString().keys().contains("day_commons_jrawio")){
        fromStringValue(socket->queryString().value("day_commons_jrawio"), day_commons_jrawio);
    }
    
    QString org_apache_aries_jmx_whiteboard;   
    if(socket->queryString().keys().contains("org_apache_aries_jmx_whiteboard")){
        fromStringValue(socket->queryString().value("org_apache_aries_jmx_whiteboard"), org_apache_aries_jmx_whiteboard);
    }
    
    QString org_apache_felix_http_sslfilter;   
    if(socket->queryString().keys().contains("org_apache_felix_http_sslfilter")){
        fromStringValue(socket->queryString().value("org_apache_felix_http_sslfilter"), org_apache_felix_http_sslfilter);
    }
    
    QString org_apache_felix_org_apache_felix_threaddump;   
    if(socket->queryString().keys().contains("org_apache_felix_org_apache_felix_threaddump")){
        fromStringValue(socket->queryString().value("org_apache_felix_org_apache_felix_threaddump"), org_apache_felix_org_apache_felix_threaddump);
    }
    
    QString org_apache_felix_webconsole_plugins_ds;   
    if(socket->queryString().keys().contains("org_apache_felix_webconsole_plugins_ds")){
        fromStringValue(socket->queryString().value("org_apache_felix_webconsole_plugins_ds"), org_apache_felix_webconsole_plugins_ds);
    }
    
    QString org_apache_felix_webconsole_plugins_event;   
    if(socket->queryString().keys().contains("org_apache_felix_webconsole_plugins_event")){
        fromStringValue(socket->queryString().value("org_apache_felix_webconsole_plugins_event"), org_apache_felix_webconsole_plugins_event);
    }
    
    QString org_apache_felix_webconsole_plugins_memoryusage;   
    if(socket->queryString().keys().contains("org_apache_felix_webconsole_plugins_memoryusage")){
        fromStringValue(socket->queryString().value("org_apache_felix_webconsole_plugins_memoryusage"), org_apache_felix_webconsole_plugins_memoryusage);
    }
    
    QString org_apache_felix_webconsole_plugins_packageadmin;   
    if(socket->queryString().keys().contains("org_apache_felix_webconsole_plugins_packageadmin")){
        fromStringValue(socket->queryString().value("org_apache_felix_webconsole_plugins_packageadmin"), org_apache_felix_webconsole_plugins_packageadmin);
    }
    
    QString org_apache_jackrabbit_oak_auth_ldap;   
    if(socket->queryString().keys().contains("org_apache_jackrabbit_oak_auth_ldap")){
        fromStringValue(socket->queryString().value("org_apache_jackrabbit_oak_auth_ldap"), org_apache_jackrabbit_oak_auth_ldap);
    }
    
    QString org_apache_jackrabbit_oak_segment_tar;   
    if(socket->queryString().keys().contains("org_apache_jackrabbit_oak_segment_tar")){
        fromStringValue(socket->queryString().value("org_apache_jackrabbit_oak_segment_tar"), org_apache_jackrabbit_oak_segment_tar);
    }
    
    QString org_apache_jackrabbit_oak_solr_osgi;   
    if(socket->queryString().keys().contains("org_apache_jackrabbit_oak_solr_osgi")){
        fromStringValue(socket->queryString().value("org_apache_jackrabbit_oak_solr_osgi"), org_apache_jackrabbit_oak_solr_osgi);
    }
    
    QString org_apache_sling_bundleresource_impl;   
    if(socket->queryString().keys().contains("org_apache_sling_bundleresource_impl")){
        fromStringValue(socket->queryString().value("org_apache_sling_bundleresource_impl"), org_apache_sling_bundleresource_impl);
    }
    
    QString org_apache_sling_commons_fsclassloader;   
    if(socket->queryString().keys().contains("org_apache_sling_commons_fsclassloader")){
        fromStringValue(socket->queryString().value("org_apache_sling_commons_fsclassloader"), org_apache_sling_commons_fsclassloader);
    }
    
    QString org_apache_sling_commons_log_webconsole;   
    if(socket->queryString().keys().contains("org_apache_sling_commons_log_webconsole")){
        fromStringValue(socket->queryString().value("org_apache_sling_commons_log_webconsole"), org_apache_sling_commons_log_webconsole);
    }
    
    QString org_apache_sling_datasource;   
    if(socket->queryString().keys().contains("org_apache_sling_datasource")){
        fromStringValue(socket->queryString().value("org_apache_sling_datasource"), org_apache_sling_datasource);
    }
    
    QString org_apache_sling_discovery_base;   
    if(socket->queryString().keys().contains("org_apache_sling_discovery_base")){
        fromStringValue(socket->queryString().value("org_apache_sling_discovery_base"), org_apache_sling_discovery_base);
    }
    
    QString org_apache_sling_discovery_oak;   
    if(socket->queryString().keys().contains("org_apache_sling_discovery_oak")){
        fromStringValue(socket->queryString().value("org_apache_sling_discovery_oak"), org_apache_sling_discovery_oak);
    }
    
    QString org_apache_sling_discovery_support;   
    if(socket->queryString().keys().contains("org_apache_sling_discovery_support")){
        fromStringValue(socket->queryString().value("org_apache_sling_discovery_support"), org_apache_sling_discovery_support);
    }
    
    QString org_apache_sling_distribution_api;   
    if(socket->queryString().keys().contains("org_apache_sling_distribution_api")){
        fromStringValue(socket->queryString().value("org_apache_sling_distribution_api"), org_apache_sling_distribution_api);
    }
    
    QString org_apache_sling_distribution_core;   
    if(socket->queryString().keys().contains("org_apache_sling_distribution_core")){
        fromStringValue(socket->queryString().value("org_apache_sling_distribution_core"), org_apache_sling_distribution_core);
    }
    
    QString org_apache_sling_extensions_webconsolesecurityprovider;   
    if(socket->queryString().keys().contains("org_apache_sling_extensions_webconsolesecurityprovider")){
        fromStringValue(socket->queryString().value("org_apache_sling_extensions_webconsolesecurityprovider"), org_apache_sling_extensions_webconsolesecurityprovider);
    }
    
    QString org_apache_sling_hc_webconsole;   
    if(socket->queryString().keys().contains("org_apache_sling_hc_webconsole")){
        fromStringValue(socket->queryString().value("org_apache_sling_hc_webconsole"), org_apache_sling_hc_webconsole);
    }
    
    QString org_apache_sling_installer_console;   
    if(socket->queryString().keys().contains("org_apache_sling_installer_console")){
        fromStringValue(socket->queryString().value("org_apache_sling_installer_console"), org_apache_sling_installer_console);
    }
    
    QString org_apache_sling_installer_provider_file;   
    if(socket->queryString().keys().contains("org_apache_sling_installer_provider_file")){
        fromStringValue(socket->queryString().value("org_apache_sling_installer_provider_file"), org_apache_sling_installer_provider_file);
    }
    
    QString org_apache_sling_installer_provider_jcr;   
    if(socket->queryString().keys().contains("org_apache_sling_installer_provider_jcr")){
        fromStringValue(socket->queryString().value("org_apache_sling_installer_provider_jcr"), org_apache_sling_installer_provider_jcr);
    }
    
    QString org_apache_sling_jcr_davex;   
    if(socket->queryString().keys().contains("org_apache_sling_jcr_davex")){
        fromStringValue(socket->queryString().value("org_apache_sling_jcr_davex"), org_apache_sling_jcr_davex);
    }
    
    QString org_apache_sling_jcr_resourcesecurity;   
    if(socket->queryString().keys().contains("org_apache_sling_jcr_resourcesecurity")){
        fromStringValue(socket->queryString().value("org_apache_sling_jcr_resourcesecurity"), org_apache_sling_jcr_resourcesecurity);
    }
    
    QString org_apache_sling_jmx_provider;   
    if(socket->queryString().keys().contains("org_apache_sling_jmx_provider")){
        fromStringValue(socket->queryString().value("org_apache_sling_jmx_provider"), org_apache_sling_jmx_provider);
    }
    
    QString org_apache_sling_launchpad_installer;   
    if(socket->queryString().keys().contains("org_apache_sling_launchpad_installer")){
        fromStringValue(socket->queryString().value("org_apache_sling_launchpad_installer"), org_apache_sling_launchpad_installer);
    }
    
    QString org_apache_sling_models_impl;   
    if(socket->queryString().keys().contains("org_apache_sling_models_impl")){
        fromStringValue(socket->queryString().value("org_apache_sling_models_impl"), org_apache_sling_models_impl);
    }
    
    QString org_apache_sling_repoinit_parser;   
    if(socket->queryString().keys().contains("org_apache_sling_repoinit_parser")){
        fromStringValue(socket->queryString().value("org_apache_sling_repoinit_parser"), org_apache_sling_repoinit_parser);
    }
    
    QString org_apache_sling_resource_inventory;   
    if(socket->queryString().keys().contains("org_apache_sling_resource_inventory")){
        fromStringValue(socket->queryString().value("org_apache_sling_resource_inventory"), org_apache_sling_resource_inventory);
    }
    
    QString org_apache_sling_resourceresolver;   
    if(socket->queryString().keys().contains("org_apache_sling_resourceresolver")){
        fromStringValue(socket->queryString().value("org_apache_sling_resourceresolver"), org_apache_sling_resourceresolver);
    }
    
    QString org_apache_sling_scripting_javascript;   
    if(socket->queryString().keys().contains("org_apache_sling_scripting_javascript")){
        fromStringValue(socket->queryString().value("org_apache_sling_scripting_javascript"), org_apache_sling_scripting_javascript);
    }
    
    QString org_apache_sling_scripting_jst;   
    if(socket->queryString().keys().contains("org_apache_sling_scripting_jst")){
        fromStringValue(socket->queryString().value("org_apache_sling_scripting_jst"), org_apache_sling_scripting_jst);
    }
    
    QString org_apache_sling_scripting_sightly_js_provider;   
    if(socket->queryString().keys().contains("org_apache_sling_scripting_sightly_js_provider")){
        fromStringValue(socket->queryString().value("org_apache_sling_scripting_sightly_js_provider"), org_apache_sling_scripting_sightly_js_provider);
    }
    
    QString org_apache_sling_scripting_sightly_models_provider;   
    if(socket->queryString().keys().contains("org_apache_sling_scripting_sightly_models_provider")){
        fromStringValue(socket->queryString().value("org_apache_sling_scripting_sightly_models_provider"), org_apache_sling_scripting_sightly_models_provider);
    }
    
    QString org_apache_sling_security;   
    if(socket->queryString().keys().contains("org_apache_sling_security")){
        fromStringValue(socket->queryString().value("org_apache_sling_security"), org_apache_sling_security);
    }
    
    QString org_apache_sling_servlets_compat;   
    if(socket->queryString().keys().contains("org_apache_sling_servlets_compat")){
        fromStringValue(socket->queryString().value("org_apache_sling_servlets_compat"), org_apache_sling_servlets_compat);
    }
    
    QString org_apache_sling_servlets_get;   
    if(socket->queryString().keys().contains("org_apache_sling_servlets_get")){
        fromStringValue(socket->queryString().value("org_apache_sling_servlets_get"), org_apache_sling_servlets_get);
    }
    
    QString org_apache_sling_startupfilter_disabler;   
    if(socket->queryString().keys().contains("org_apache_sling_startupfilter_disabler")){
        fromStringValue(socket->queryString().value("org_apache_sling_startupfilter_disabler"), org_apache_sling_startupfilter_disabler);
    }
    
    QString org_apache_sling_tracer;   
    if(socket->queryString().keys().contains("org_apache_sling_tracer")){
        fromStringValue(socket->queryString().value("org_apache_sling_tracer"), org_apache_sling_tracer);
    }
    
    QString we_retail_client_app_core;   
    if(socket->queryString().keys().contains("we_retail_client_app_core")){
        fromStringValue(socket->queryString().value("we_retail_client_app_core"), we_retail_client_app_core);
    }
    


    emit comAdobeGraniteApicontrollerFilterResolverHookFactory( post,  apply,  _delete,  action,  location,  propertylist,  com_adobe_cq_cdn_cdn_rewriter,  com_adobe_cq_cloud_config_components,  com_adobe_cq_cloud_config_core,  com_adobe_cq_cloud_config_ui,  com_adobe_cq_com_adobe_cq_editor,  com_adobe_cq_com_adobe_cq_projects_core,  com_adobe_cq_com_adobe_cq_projects_wcm_core,  com_adobe_cq_com_adobe_cq_ui_commons,  com_adobe_cq_com_adobe_cq_wcm_style,  com_adobe_cq_cq_activitymap_integration,  com_adobe_cq_cq_contexthub_commons,  com_adobe_cq_cq_dtm,  com_adobe_cq_cq_healthcheck,  com_adobe_cq_cq_multisite_targeting,  com_adobe_cq_cq_pre_upgrade_cleanup,  com_adobe_cq_cq_product_info_provider,  com_adobe_cq_cq_rest_sites,  com_adobe_cq_cq_security_hc,  com_adobe_cq_dam_cq_dam_svg_handler,  com_adobe_cq_dam_cq_scene7_imaging,  com_adobe_cq_dtm_reactor_core,  com_adobe_cq_dtm_reactor_ui,  com_adobe_cq_exp_jspel_resolver,  com_adobe_cq_inbox_cq_inbox,  com_adobe_cq_json_schema_parser,  com_adobe_cq_media_cq_media_publishing_dps_fp_core,  com_adobe_cq_mobile_cq_mobile_caas,  com_adobe_cq_mobile_cq_mobile_index_builder,  com_adobe_cq_mobile_cq_mobile_phonegap_build,  com_adobe_cq_myspell,  com_adobe_cq_sample_we_retail_core,  com_adobe_cq_screens_com_adobe_cq_screens_dcc,  com_adobe_cq_screens_com_adobe_cq_screens_mq_core,  com_adobe_cq_social_cq_social_as_provider,  com_adobe_cq_social_cq_social_badging_basic_impl,  com_adobe_cq_social_cq_social_badging_impl,  com_adobe_cq_social_cq_social_calendar_impl,  com_adobe_cq_social_cq_social_content_fragments_impl,  com_adobe_cq_social_cq_social_enablement_impl,  com_adobe_cq_social_cq_social_graph_impl,  com_adobe_cq_social_cq_social_ideation_impl,  com_adobe_cq_social_cq_social_jcr_provider,  com_adobe_cq_social_cq_social_members_impl,  com_adobe_cq_social_cq_social_ms_provider,  com_adobe_cq_social_cq_social_notifications_channels_web,  com_adobe_cq_social_cq_social_notifications_impl,  com_adobe_cq_social_cq_social_rdb_provider,  com_adobe_cq_social_cq_social_scf_impl,  com_adobe_cq_social_cq_social_scoring_basic_impl,  com_adobe_cq_social_cq_social_scoring_impl,  com_adobe_cq_social_cq_social_serviceusers_impl,  com_adobe_cq_social_cq_social_srp_impl,  com_adobe_cq_social_cq_social_ugcbase_impl,  com_adobe_dam_cq_dam_cfm_impl,  com_adobe_forms_foundation_forms_foundation_base,  com_adobe_granite_apicontroller,  com_adobe_granite_asset_core,  com_adobe_granite_auth_sso,  com_adobe_granite_bundles_hc_impl,  com_adobe_granite_compat_router,  com_adobe_granite_conf,  com_adobe_granite_conf_ui_core,  com_adobe_granite_cors,  com_adobe_granite_crx_explorer,  com_adobe_granite_crxde_lite,  com_adobe_granite_crypto_config,  com_adobe_granite_crypto_extension,  com_adobe_granite_crypto_file,  com_adobe_granite_crypto_jcr,  com_adobe_granite_csrf,  com_adobe_granite_distribution_core,  com_adobe_granite_dropwizard_metrics,  com_adobe_granite_frags_impl,  com_adobe_granite_gibson,  com_adobe_granite_infocollector,  com_adobe_granite_installer_factory_packages,  com_adobe_granite_jetty_ssl,  com_adobe_granite_jobs_async,  com_adobe_granite_maintenance_oak,  com_adobe_granite_monitoring_core,  com_adobe_granite_queries,  com_adobe_granite_replication_hc_impl,  com_adobe_granite_repository_checker,  com_adobe_granite_repository_hc_impl,  com_adobe_granite_rest_assets,  com_adobe_granite_security_ui,  com_adobe_granite_startup,  com_adobe_granite_tagsoup,  com_adobe_granite_taskmanagement_core,  com_adobe_granite_taskmanagement_workflow,  com_adobe_granite_ui_clientlibs_compiler_less,  com_adobe_granite_ui_clientlibs_processor_gcc,  com_adobe_granite_webconsole_plugins,  com_adobe_granite_workflow_console,  com_adobe_xmp_worker_files_native_fragment_linux,  com_adobe_xmp_worker_files_native_fragment_macosx,  com_adobe_xmp_worker_files_native_fragment_win,  com_day_commons_osgi_wrapper_simple_jndi,  com_day_cq_cq_authhandler,  com_day_cq_cq_compat_configupdate,  com_day_cq_cq_licensebranding,  com_day_cq_cq_notifcation_impl,  com_day_cq_cq_replication_audit,  com_day_cq_cq_search_ext,  com_day_cq_dam_cq_dam_annotation_print,  com_day_cq_dam_cq_dam_asset_usage,  com_day_cq_dam_cq_dam_s7dam,  com_day_cq_dam_cq_dam_similaritysearch,  com_day_cq_dam_dam_webdav_support,  com_day_cq_pre_upgrade_tasks,  com_day_cq_replication_extensions,  com_day_cq_wcm_cq_msm_core,  com_day_cq_wcm_cq_wcm_translation,  day_commons_jrawio,  org_apache_aries_jmx_whiteboard,  org_apache_felix_http_sslfilter,  org_apache_felix_org_apache_felix_threaddump,  org_apache_felix_webconsole_plugins_ds,  org_apache_felix_webconsole_plugins_event,  org_apache_felix_webconsole_plugins_memoryusage,  org_apache_felix_webconsole_plugins_packageadmin,  org_apache_jackrabbit_oak_auth_ldap,  org_apache_jackrabbit_oak_segment_tar,  org_apache_jackrabbit_oak_solr_osgi,  org_apache_sling_bundleresource_impl,  org_apache_sling_commons_fsclassloader,  org_apache_sling_commons_log_webconsole,  org_apache_sling_datasource,  org_apache_sling_discovery_base,  org_apache_sling_discovery_oak,  org_apache_sling_discovery_support,  org_apache_sling_distribution_api,  org_apache_sling_distribution_core,  org_apache_sling_extensions_webconsolesecurityprovider,  org_apache_sling_hc_webconsole,  org_apache_sling_installer_console,  org_apache_sling_installer_provider_file,  org_apache_sling_installer_provider_jcr,  org_apache_sling_jcr_davex,  org_apache_sling_jcr_resourcesecurity,  org_apache_sling_jmx_provider,  org_apache_sling_launchpad_installer,  org_apache_sling_models_impl,  org_apache_sling_repoinit_parser,  org_apache_sling_resource_inventory,  org_apache_sling_resourceresolver,  org_apache_sling_scripting_javascript,  org_apache_sling_scripting_jst,  org_apache_sling_scripting_sightly_js_provider,  org_apache_sling_scripting_sightly_models_provider,  org_apache_sling_security,  org_apache_sling_servlets_compat,  org_apache_sling_servlets_get,  org_apache_sling_startupfilter_disabler,  org_apache_sling_tracer,  we_retail_client_app_core);
}


void OAIConfigmgrApiRequest::comAdobeGraniteAuthCertImplClientCertAuthHandlerRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.auth.cert.impl.ClientCertAuthHandler";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteAuthCertImplClientCertAuthHandler, handler, &OAIConfigmgrApiHandler::comAdobeGraniteAuthCertImplClientCertAuthHandler);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString path;   
    if(socket->queryString().keys().contains("path")){
        fromStringValue(socket->queryString().value("path"), path);
    }
    
    qint32 service_ranking;   
    if(socket->queryString().keys().contains("service_ranking")){
        fromStringValue(socket->queryString().value("service_ranking"), service_ranking);
    }
    


    emit comAdobeGraniteAuthCertImplClientCertAuthHandler( post,  apply,  _delete,  action,  location,  propertylist,  path,  service_ranking);
}


void OAIConfigmgrApiRequest::comAdobeGraniteAuthImsRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.auth.ims";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteAuthIms, handler, &OAIConfigmgrApiHandler::comAdobeGraniteAuthIms);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString configid;   
    if(socket->queryString().keys().contains("configid")){
        fromStringValue(socket->queryString().value("configid"), configid);
    }
    
    QString scope;   
    if(socket->queryString().keys().contains("scope")){
        fromStringValue(socket->queryString().value("scope"), scope);
    }
    


    emit comAdobeGraniteAuthIms( post,  apply,  _delete,  action,  location,  propertylist,  configid,  scope);
}


void OAIConfigmgrApiRequest::comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.auth.ims.impl.ExternalUserIdMappingProviderExtension";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension, handler, &OAIConfigmgrApiHandler::comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString oauth_provider_id;   
    if(socket->queryString().keys().contains("oauth_provider_id")){
        fromStringValue(socket->queryString().value("oauth_provider_id"), oauth_provider_id);
    }
    


    emit comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension( post,  apply,  _delete,  action,  location,  propertylist,  oauth_provider_id);
}


void OAIConfigmgrApiRequest::comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSAccessTokenRequestCustomizerImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl, handler, &OAIConfigmgrApiHandler::comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString auth_ims_client_secret;   
    if(socket->queryString().keys().contains("auth_ims_client_secret")){
        fromStringValue(socket->queryString().value("auth_ims_client_secret"), auth_ims_client_secret);
    }
    
    QString customizer_type;   
    if(socket->queryString().keys().contains("customizer_type")){
        fromStringValue(socket->queryString().value("customizer_type"), customizer_type);
    }
    


    emit comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl( post,  apply,  _delete,  action,  location,  propertylist,  auth_ims_client_secret,  customizer_type);
}


void OAIConfigmgrApiRequest::comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSInstanceCredentialsValidator";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator, handler, &OAIConfigmgrApiHandler::comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString oauth_provider_id;   
    if(socket->queryString().keys().contains("oauth_provider_id")){
        fromStringValue(socket->queryString().value("oauth_provider_id"), oauth_provider_id);
    }
    


    emit comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator( post,  apply,  _delete,  action,  location,  propertylist,  oauth_provider_id);
}


void OAIConfigmgrApiRequest::comAdobeGraniteAuthImsImplIMSProviderImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSProviderImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteAuthImsImplIMSProviderImpl, handler, &OAIConfigmgrApiHandler::comAdobeGraniteAuthImsImplIMSProviderImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString oauth_provider_id;   
    if(socket->queryString().keys().contains("oauth_provider_id")){
        fromStringValue(socket->queryString().value("oauth_provider_id"), oauth_provider_id);
    }
    
    QString oauth_provider_ims_authorization_url;   
    if(socket->queryString().keys().contains("oauth_provider_ims_authorization_url")){
        fromStringValue(socket->queryString().value("oauth_provider_ims_authorization_url"), oauth_provider_ims_authorization_url);
    }
    
    QString oauth_provider_ims_token_url;   
    if(socket->queryString().keys().contains("oauth_provider_ims_token_url")){
        fromStringValue(socket->queryString().value("oauth_provider_ims_token_url"), oauth_provider_ims_token_url);
    }
    
    QString oauth_provider_ims_profile_url;   
    if(socket->queryString().keys().contains("oauth_provider_ims_profile_url")){
        fromStringValue(socket->queryString().value("oauth_provider_ims_profile_url"), oauth_provider_ims_profile_url);
    }
    
    QList<QString> oauth_provider_ims_extended_details_urls;   
    if(socket->queryString().keys().contains("oauth_provider_ims_extended_details_urls")){
        fromStringValue(socket->queryString().values("oauth_provider_ims_extended_details_urls"), oauth_provider_ims_extended_details_urls);
    }
    
    QString oauth_provider_ims_validate_token_url;   
    if(socket->queryString().keys().contains("oauth_provider_ims_validate_token_url")){
        fromStringValue(socket->queryString().value("oauth_provider_ims_validate_token_url"), oauth_provider_ims_validate_token_url);
    }
    
    QString oauth_provider_ims_session_property;   
    if(socket->queryString().keys().contains("oauth_provider_ims_session_property")){
        fromStringValue(socket->queryString().value("oauth_provider_ims_session_property"), oauth_provider_ims_session_property);
    }
    
    QString oauth_provider_ims_service_token_client_id;   
    if(socket->queryString().keys().contains("oauth_provider_ims_service_token_client_id")){
        fromStringValue(socket->queryString().value("oauth_provider_ims_service_token_client_id"), oauth_provider_ims_service_token_client_id);
    }
    
    QString oauth_provider_ims_service_token_client_secret;   
    if(socket->queryString().keys().contains("oauth_provider_ims_service_token_client_secret")){
        fromStringValue(socket->queryString().value("oauth_provider_ims_service_token_client_secret"), oauth_provider_ims_service_token_client_secret);
    }
    
    QString oauth_provider_ims_service_token;   
    if(socket->queryString().keys().contains("oauth_provider_ims_service_token")){
        fromStringValue(socket->queryString().value("oauth_provider_ims_service_token"), oauth_provider_ims_service_token);
    }
    
    QString ims_org_ref;   
    if(socket->queryString().keys().contains("ims_org_ref")){
        fromStringValue(socket->queryString().value("ims_org_ref"), ims_org_ref);
    }
    
    QList<QString> ims_group_mapping;   
    if(socket->queryString().keys().contains("ims_group_mapping")){
        fromStringValue(socket->queryString().values("ims_group_mapping"), ims_group_mapping);
    }
    
    bool oauth_provider_ims_only_license_group;   
    if(socket->queryString().keys().contains("oauth_provider_ims_only_license_group")){
        fromStringValue(socket->queryString().value("oauth_provider_ims_only_license_group"), oauth_provider_ims_only_license_group);
    }
    


    emit comAdobeGraniteAuthImsImplIMSProviderImpl( post,  apply,  _delete,  action,  location,  propertylist,  oauth_provider_id,  oauth_provider_ims_authorization_url,  oauth_provider_ims_token_url,  oauth_provider_ims_profile_url,  oauth_provider_ims_extended_details_urls,  oauth_provider_ims_validate_token_url,  oauth_provider_ims_session_property,  oauth_provider_ims_service_token_client_id,  oauth_provider_ims_service_token_client_secret,  oauth_provider_ims_service_token,  ims_org_ref,  ims_group_mapping,  oauth_provider_ims_only_license_group);
}


void OAIConfigmgrApiRequest::comAdobeGraniteAuthImsImplImsConfigProviderImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.auth.ims.impl.ImsConfigProviderImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteAuthImsImplImsConfigProviderImpl, handler, &OAIConfigmgrApiHandler::comAdobeGraniteAuthImsImplImsConfigProviderImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString oauth_configmanager_ims_configid;   
    if(socket->queryString().keys().contains("oauth_configmanager_ims_configid")){
        fromStringValue(socket->queryString().value("oauth_configmanager_ims_configid"), oauth_configmanager_ims_configid);
    }
    
    QString ims_owning_entity;   
    if(socket->queryString().keys().contains("ims_owning_entity")){
        fromStringValue(socket->queryString().value("ims_owning_entity"), ims_owning_entity);
    }
    
    QString aem_instance_id;   
    if(socket->queryString().keys().contains("aem_instance_id")){
        fromStringValue(socket->queryString().value("aem_instance_id"), aem_instance_id);
    }
    
    QString ims_service_code;   
    if(socket->queryString().keys().contains("ims_service_code")){
        fromStringValue(socket->queryString().value("ims_service_code"), ims_service_code);
    }
    


    emit comAdobeGraniteAuthImsImplImsConfigProviderImpl( post,  apply,  _delete,  action,  location,  propertylist,  oauth_configmanager_ims_configid,  ims_owning_entity,  aem_instance_id,  ims_service_code);
}


void OAIConfigmgrApiRequest::comAdobeGraniteAuthOauthAccesstokenProviderRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.auth.oauth.accesstoken.provider";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteAuthOauthAccesstokenProvider, handler, &OAIConfigmgrApiHandler::comAdobeGraniteAuthOauthAccesstokenProvider);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString name;   
    if(socket->queryString().keys().contains("name")){
        fromStringValue(socket->queryString().value("name"), name);
    }
    
    QString auth_token_provider_title;   
    if(socket->queryString().keys().contains("auth_token_provider_title")){
        fromStringValue(socket->queryString().value("auth_token_provider_title"), auth_token_provider_title);
    }
    
    QList<QString> auth_token_provider_default_claims;   
    if(socket->queryString().keys().contains("auth_token_provider_default_claims")){
        fromStringValue(socket->queryString().values("auth_token_provider_default_claims"), auth_token_provider_default_claims);
    }
    
    QString auth_token_provider_endpoint;   
    if(socket->queryString().keys().contains("auth_token_provider_endpoint")){
        fromStringValue(socket->queryString().value("auth_token_provider_endpoint"), auth_token_provider_endpoint);
    }
    
    QString auth_access_token_request;   
    if(socket->queryString().keys().contains("auth_access_token_request")){
        fromStringValue(socket->queryString().value("auth_access_token_request"), auth_access_token_request);
    }
    
    QString auth_token_provider_keypair_alias;   
    if(socket->queryString().keys().contains("auth_token_provider_keypair_alias")){
        fromStringValue(socket->queryString().value("auth_token_provider_keypair_alias"), auth_token_provider_keypair_alias);
    }
    
    qint32 auth_token_provider_conn_timeout;   
    if(socket->queryString().keys().contains("auth_token_provider_conn_timeout")){
        fromStringValue(socket->queryString().value("auth_token_provider_conn_timeout"), auth_token_provider_conn_timeout);
    }
    
    qint32 auth_token_provider_so_timeout;   
    if(socket->queryString().keys().contains("auth_token_provider_so_timeout")){
        fromStringValue(socket->queryString().value("auth_token_provider_so_timeout"), auth_token_provider_so_timeout);
    }
    
    QString auth_token_provider_client_id;   
    if(socket->queryString().keys().contains("auth_token_provider_client_id")){
        fromStringValue(socket->queryString().value("auth_token_provider_client_id"), auth_token_provider_client_id);
    }
    
    QString auth_token_provider_scope;   
    if(socket->queryString().keys().contains("auth_token_provider_scope")){
        fromStringValue(socket->queryString().value("auth_token_provider_scope"), auth_token_provider_scope);
    }
    
    bool auth_token_provider_reuse_access_token;   
    if(socket->queryString().keys().contains("auth_token_provider_reuse_access_token")){
        fromStringValue(socket->queryString().value("auth_token_provider_reuse_access_token"), auth_token_provider_reuse_access_token);
    }
    
    bool auth_token_provider_relaxed_ssl;   
    if(socket->queryString().keys().contains("auth_token_provider_relaxed_ssl")){
        fromStringValue(socket->queryString().value("auth_token_provider_relaxed_ssl"), auth_token_provider_relaxed_ssl);
    }
    
    QString token_request_customizer_type;   
    if(socket->queryString().keys().contains("token_request_customizer_type")){
        fromStringValue(socket->queryString().value("token_request_customizer_type"), token_request_customizer_type);
    }
    
    QString auth_token_validator_type;   
    if(socket->queryString().keys().contains("auth_token_validator_type")){
        fromStringValue(socket->queryString().value("auth_token_validator_type"), auth_token_validator_type);
    }
    


    emit comAdobeGraniteAuthOauthAccesstokenProvider( post,  apply,  _delete,  action,  location,  propertylist,  name,  auth_token_provider_title,  auth_token_provider_default_claims,  auth_token_provider_endpoint,  auth_access_token_request,  auth_token_provider_keypair_alias,  auth_token_provider_conn_timeout,  auth_token_provider_so_timeout,  auth_token_provider_client_id,  auth_token_provider_scope,  auth_token_provider_reuse_access_token,  auth_token_provider_relaxed_ssl,  token_request_customizer_type,  auth_token_validator_type);
}


void OAIConfigmgrApiRequest::comAdobeGraniteAuthOauthImplBearerAuthenticationHandlerRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.auth.oauth.impl.BearerAuthenticationHandler";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteAuthOauthImplBearerAuthenticationHandler, handler, &OAIConfigmgrApiHandler::comAdobeGraniteAuthOauthImplBearerAuthenticationHandler);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString path;   
    if(socket->queryString().keys().contains("path")){
        fromStringValue(socket->queryString().value("path"), path);
    }
    
    QList<QString> oauth_client_ids_allowed;   
    if(socket->queryString().keys().contains("oauth_client_ids_allowed")){
        fromStringValue(socket->queryString().values("oauth_client_ids_allowed"), oauth_client_ids_allowed);
    }
    
    bool auth_bearer_sync_ims;   
    if(socket->queryString().keys().contains("auth_bearer_sync_ims")){
        fromStringValue(socket->queryString().value("auth_bearer_sync_ims"), auth_bearer_sync_ims);
    }
    
    QString auth_token_request_parameter;   
    if(socket->queryString().keys().contains("auth_token_request_parameter")){
        fromStringValue(socket->queryString().value("auth_token_request_parameter"), auth_token_request_parameter);
    }
    
    QString oauth_bearer_configid;   
    if(socket->queryString().keys().contains("oauth_bearer_configid")){
        fromStringValue(socket->queryString().value("oauth_bearer_configid"), oauth_bearer_configid);
    }
    
    bool oauth_jwt_support;   
    if(socket->queryString().keys().contains("oauth_jwt_support")){
        fromStringValue(socket->queryString().value("oauth_jwt_support"), oauth_jwt_support);
    }
    


    emit comAdobeGraniteAuthOauthImplBearerAuthenticationHandler( post,  apply,  _delete,  action,  location,  propertylist,  path,  oauth_client_ids_allowed,  auth_bearer_sync_ims,  auth_token_request_parameter,  oauth_bearer_configid,  oauth_jwt_support);
}


void OAIConfigmgrApiRequest::comAdobeGraniteAuthOauthImplDefaultTokenValidatorImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.auth.oauth.impl.DefaultTokenValidatorImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl, handler, &OAIConfigmgrApiHandler::comAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString auth_token_validator_type;   
    if(socket->queryString().keys().contains("auth_token_validator_type")){
        fromStringValue(socket->queryString().value("auth_token_validator_type"), auth_token_validator_type);
    }
    


    emit comAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl( post,  apply,  _delete,  action,  location,  propertylist,  auth_token_validator_type);
}


void OAIConfigmgrApiRequest::comAdobeGraniteAuthOauthImplFacebookProviderImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.auth.oauth.impl.FacebookProviderImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteAuthOauthImplFacebookProviderImpl, handler, &OAIConfigmgrApiHandler::comAdobeGraniteAuthOauthImplFacebookProviderImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString oauth_provider_id;   
    if(socket->queryString().keys().contains("oauth_provider_id")){
        fromStringValue(socket->queryString().value("oauth_provider_id"), oauth_provider_id);
    }
    


    emit comAdobeGraniteAuthOauthImplFacebookProviderImpl( post,  apply,  _delete,  action,  location,  propertylist,  oauth_provider_id);
}


void OAIConfigmgrApiRequest::comAdobeGraniteAuthOauthImplGithubProviderImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.auth.oauth.impl.GithubProviderImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteAuthOauthImplGithubProviderImpl, handler, &OAIConfigmgrApiHandler::comAdobeGraniteAuthOauthImplGithubProviderImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString oauth_provider_id;   
    if(socket->queryString().keys().contains("oauth_provider_id")){
        fromStringValue(socket->queryString().value("oauth_provider_id"), oauth_provider_id);
    }
    
    QString oauth_provider_github_authorization_url;   
    if(socket->queryString().keys().contains("oauth_provider_github_authorization_url")){
        fromStringValue(socket->queryString().value("oauth_provider_github_authorization_url"), oauth_provider_github_authorization_url);
    }
    
    QString oauth_provider_github_token_url;   
    if(socket->queryString().keys().contains("oauth_provider_github_token_url")){
        fromStringValue(socket->queryString().value("oauth_provider_github_token_url"), oauth_provider_github_token_url);
    }
    
    QString oauth_provider_github_profile_url;   
    if(socket->queryString().keys().contains("oauth_provider_github_profile_url")){
        fromStringValue(socket->queryString().value("oauth_provider_github_profile_url"), oauth_provider_github_profile_url);
    }
    


    emit comAdobeGraniteAuthOauthImplGithubProviderImpl( post,  apply,  _delete,  action,  location,  propertylist,  oauth_provider_id,  oauth_provider_github_authorization_url,  oauth_provider_github_token_url,  oauth_provider_github_profile_url);
}


void OAIConfigmgrApiRequest::comAdobeGraniteAuthOauthImplGraniteProviderRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.auth.oauth.impl.GraniteProvider";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteAuthOauthImplGraniteProvider, handler, &OAIConfigmgrApiHandler::comAdobeGraniteAuthOauthImplGraniteProvider);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString oauth_provider_id;   
    if(socket->queryString().keys().contains("oauth_provider_id")){
        fromStringValue(socket->queryString().value("oauth_provider_id"), oauth_provider_id);
    }
    
    QString oauth_provider_granite_authorization_url;   
    if(socket->queryString().keys().contains("oauth_provider_granite_authorization_url")){
        fromStringValue(socket->queryString().value("oauth_provider_granite_authorization_url"), oauth_provider_granite_authorization_url);
    }
    
    QString oauth_provider_granite_token_url;   
    if(socket->queryString().keys().contains("oauth_provider_granite_token_url")){
        fromStringValue(socket->queryString().value("oauth_provider_granite_token_url"), oauth_provider_granite_token_url);
    }
    
    QString oauth_provider_granite_profile_url;   
    if(socket->queryString().keys().contains("oauth_provider_granite_profile_url")){
        fromStringValue(socket->queryString().value("oauth_provider_granite_profile_url"), oauth_provider_granite_profile_url);
    }
    
    QString oauth_provider_granite_extended_details_urls;   
    if(socket->queryString().keys().contains("oauth_provider_granite_extended_details_urls")){
        fromStringValue(socket->queryString().value("oauth_provider_granite_extended_details_urls"), oauth_provider_granite_extended_details_urls);
    }
    


    emit comAdobeGraniteAuthOauthImplGraniteProvider( post,  apply,  _delete,  action,  location,  propertylist,  oauth_provider_id,  oauth_provider_granite_authorization_url,  oauth_provider_granite_token_url,  oauth_provider_granite_profile_url,  oauth_provider_granite_extended_details_urls);
}


void OAIConfigmgrApiRequest::comAdobeGraniteAuthOauthImplHelperProviderConfigManagerRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManager";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteAuthOauthImplHelperProviderConfigManager, handler, &OAIConfigmgrApiHandler::comAdobeGraniteAuthOauthImplHelperProviderConfigManager);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString oauth_cookie_login_timeout;   
    if(socket->queryString().keys().contains("oauth_cookie_login_timeout")){
        fromStringValue(socket->queryString().value("oauth_cookie_login_timeout"), oauth_cookie_login_timeout);
    }
    
    QString oauth_cookie_max_age;   
    if(socket->queryString().keys().contains("oauth_cookie_max_age")){
        fromStringValue(socket->queryString().value("oauth_cookie_max_age"), oauth_cookie_max_age);
    }
    


    emit comAdobeGraniteAuthOauthImplHelperProviderConfigManager( post,  apply,  _delete,  action,  location,  propertylist,  oauth_cookie_login_timeout,  oauth_cookie_max_age);
}


void OAIConfigmgrApiRequest::comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManagerInternal";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal, handler, &OAIConfigmgrApiHandler::comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString oauth_cookie_login_timeout;   
    if(socket->queryString().keys().contains("oauth_cookie_login_timeout")){
        fromStringValue(socket->queryString().value("oauth_cookie_login_timeout"), oauth_cookie_login_timeout);
    }
    
    QString oauth_cookie_max_age;   
    if(socket->queryString().keys().contains("oauth_cookie_max_age")){
        fromStringValue(socket->queryString().value("oauth_cookie_max_age"), oauth_cookie_max_age);
    }
    


    emit comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal( post,  apply,  _delete,  action,  location,  propertylist,  oauth_cookie_login_timeout,  oauth_cookie_max_age);
}


void OAIConfigmgrApiRequest::comAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.auth.oauth.impl.OAuthAuthenticationHandler";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteAuthOauthImplOAuthAuthenticationHandler, handler, &OAIConfigmgrApiHandler::comAdobeGraniteAuthOauthImplOAuthAuthenticationHandler);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString path;   
    if(socket->queryString().keys().contains("path")){
        fromStringValue(socket->queryString().value("path"), path);
    }
    


    emit comAdobeGraniteAuthOauthImplOAuthAuthenticationHandler( post,  apply,  _delete,  action,  location,  propertylist,  path);
}


void OAIConfigmgrApiRequest::comAdobeGraniteAuthOauthImplTwitterProviderImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.auth.oauth.impl.TwitterProviderImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteAuthOauthImplTwitterProviderImpl, handler, &OAIConfigmgrApiHandler::comAdobeGraniteAuthOauthImplTwitterProviderImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString oauth_provider_id;   
    if(socket->queryString().keys().contains("oauth_provider_id")){
        fromStringValue(socket->queryString().value("oauth_provider_id"), oauth_provider_id);
    }
    


    emit comAdobeGraniteAuthOauthImplTwitterProviderImpl( post,  apply,  _delete,  action,  location,  propertylist,  oauth_provider_id);
}


void OAIConfigmgrApiRequest::comAdobeGraniteAuthOauthProviderRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.auth.oauth.provider";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteAuthOauthProvider, handler, &OAIConfigmgrApiHandler::comAdobeGraniteAuthOauthProvider);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString oauth_config_id;   
    if(socket->queryString().keys().contains("oauth_config_id")){
        fromStringValue(socket->queryString().value("oauth_config_id"), oauth_config_id);
    }
    
    QString oauth_client_id;   
    if(socket->queryString().keys().contains("oauth_client_id")){
        fromStringValue(socket->queryString().value("oauth_client_id"), oauth_client_id);
    }
    
    QString oauth_client_secret;   
    if(socket->queryString().keys().contains("oauth_client_secret")){
        fromStringValue(socket->queryString().value("oauth_client_secret"), oauth_client_secret);
    }
    
    QList<QString> oauth_scope;   
    if(socket->queryString().keys().contains("oauth_scope")){
        fromStringValue(socket->queryString().values("oauth_scope"), oauth_scope);
    }
    
    QString oauth_config_provider_id;   
    if(socket->queryString().keys().contains("oauth_config_provider_id")){
        fromStringValue(socket->queryString().value("oauth_config_provider_id"), oauth_config_provider_id);
    }
    
    bool oauth_create_users;   
    if(socket->queryString().keys().contains("oauth_create_users")){
        fromStringValue(socket->queryString().value("oauth_create_users"), oauth_create_users);
    }
    
    QString oauth_userid_property;   
    if(socket->queryString().keys().contains("oauth_userid_property")){
        fromStringValue(socket->queryString().value("oauth_userid_property"), oauth_userid_property);
    }
    
    bool force_strict_username_matching;   
    if(socket->queryString().keys().contains("force_strict_username_matching")){
        fromStringValue(socket->queryString().value("force_strict_username_matching"), force_strict_username_matching);
    }
    
    bool oauth_encode_userids;   
    if(socket->queryString().keys().contains("oauth_encode_userids")){
        fromStringValue(socket->queryString().value("oauth_encode_userids"), oauth_encode_userids);
    }
    
    bool oauth_hash_userids;   
    if(socket->queryString().keys().contains("oauth_hash_userids")){
        fromStringValue(socket->queryString().value("oauth_hash_userids"), oauth_hash_userids);
    }
    
    QString oauth_call_back_url;   
    if(socket->queryString().keys().contains("oauth_call_back_url")){
        fromStringValue(socket->queryString().value("oauth_call_back_url"), oauth_call_back_url);
    }
    
    bool oauth_access_token_persist;   
    if(socket->queryString().keys().contains("oauth_access_token_persist")){
        fromStringValue(socket->queryString().value("oauth_access_token_persist"), oauth_access_token_persist);
    }
    
    bool oauth_access_token_persist_cookie;   
    if(socket->queryString().keys().contains("oauth_access_token_persist_cookie")){
        fromStringValue(socket->queryString().value("oauth_access_token_persist_cookie"), oauth_access_token_persist_cookie);
    }
    
    bool oauth_csrf_state_protection;   
    if(socket->queryString().keys().contains("oauth_csrf_state_protection")){
        fromStringValue(socket->queryString().value("oauth_csrf_state_protection"), oauth_csrf_state_protection);
    }
    
    bool oauth_redirect_request_params;   
    if(socket->queryString().keys().contains("oauth_redirect_request_params")){
        fromStringValue(socket->queryString().value("oauth_redirect_request_params"), oauth_redirect_request_params);
    }
    
    bool oauth_config_siblings_allow;   
    if(socket->queryString().keys().contains("oauth_config_siblings_allow")){
        fromStringValue(socket->queryString().value("oauth_config_siblings_allow"), oauth_config_siblings_allow);
    }
    


    emit comAdobeGraniteAuthOauthProvider( post,  apply,  _delete,  action,  location,  propertylist,  oauth_config_id,  oauth_client_id,  oauth_client_secret,  oauth_scope,  oauth_config_provider_id,  oauth_create_users,  oauth_userid_property,  force_strict_username_matching,  oauth_encode_userids,  oauth_hash_userids,  oauth_call_back_url,  oauth_access_token_persist,  oauth_access_token_persist_cookie,  oauth_csrf_state_protection,  oauth_redirect_request_params,  oauth_config_siblings_allow);
}


void OAIConfigmgrApiRequest::comAdobeGraniteAuthRequirementImplDefaultRequirementHandlerRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.auth.requirement.impl.DefaultRequirementHandler";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteAuthRequirementImplDefaultRequirementHandler, handler, &OAIConfigmgrApiHandler::comAdobeGraniteAuthRequirementImplDefaultRequirementHandler);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> supported_paths;   
    if(socket->queryString().keys().contains("supported_paths")){
        fromStringValue(socket->queryString().values("supported_paths"), supported_paths);
    }
    


    emit comAdobeGraniteAuthRequirementImplDefaultRequirementHandler( post,  apply,  _delete,  action,  location,  propertylist,  supported_paths);
}


void OAIConfigmgrApiRequest::comAdobeGraniteAuthSamlSamlAuthenticationHandlerRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteAuthSamlSamlAuthenticationHandler, handler, &OAIConfigmgrApiHandler::comAdobeGraniteAuthSamlSamlAuthenticationHandler);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> path;   
    if(socket->queryString().keys().contains("path")){
        fromStringValue(socket->queryString().values("path"), path);
    }
    
    qint32 service_ranking;   
    if(socket->queryString().keys().contains("service_ranking")){
        fromStringValue(socket->queryString().value("service_ranking"), service_ranking);
    }
    
    QString idp_url;   
    if(socket->queryString().keys().contains("idp_url")){
        fromStringValue(socket->queryString().value("idp_url"), idp_url);
    }
    
    QString idp_cert_alias;   
    if(socket->queryString().keys().contains("idp_cert_alias")){
        fromStringValue(socket->queryString().value("idp_cert_alias"), idp_cert_alias);
    }
    
    bool idp_http_redirect;   
    if(socket->queryString().keys().contains("idp_http_redirect")){
        fromStringValue(socket->queryString().value("idp_http_redirect"), idp_http_redirect);
    }
    
    QString service_provider_entity_id;   
    if(socket->queryString().keys().contains("service_provider_entity_id")){
        fromStringValue(socket->queryString().value("service_provider_entity_id"), service_provider_entity_id);
    }
    
    QString assertion_consumer_service_url;   
    if(socket->queryString().keys().contains("assertion_consumer_service_url")){
        fromStringValue(socket->queryString().value("assertion_consumer_service_url"), assertion_consumer_service_url);
    }
    
    QString sp_private_key_alias;   
    if(socket->queryString().keys().contains("sp_private_key_alias")){
        fromStringValue(socket->queryString().value("sp_private_key_alias"), sp_private_key_alias);
    }
    
    QString key_store_password;   
    if(socket->queryString().keys().contains("key_store_password")){
        fromStringValue(socket->queryString().value("key_store_password"), key_store_password);
    }
    
    QString default_redirect_url;   
    if(socket->queryString().keys().contains("default_redirect_url")){
        fromStringValue(socket->queryString().value("default_redirect_url"), default_redirect_url);
    }
    
    QString user_id_attribute;   
    if(socket->queryString().keys().contains("user_id_attribute")){
        fromStringValue(socket->queryString().value("user_id_attribute"), user_id_attribute);
    }
    
    bool use_encryption;   
    if(socket->queryString().keys().contains("use_encryption")){
        fromStringValue(socket->queryString().value("use_encryption"), use_encryption);
    }
    
    bool create_user;   
    if(socket->queryString().keys().contains("create_user")){
        fromStringValue(socket->queryString().value("create_user"), create_user);
    }
    
    QString user_intermediate_path;   
    if(socket->queryString().keys().contains("user_intermediate_path")){
        fromStringValue(socket->queryString().value("user_intermediate_path"), user_intermediate_path);
    }
    
    bool add_group_memberships;   
    if(socket->queryString().keys().contains("add_group_memberships")){
        fromStringValue(socket->queryString().value("add_group_memberships"), add_group_memberships);
    }
    
    QString group_membership_attribute;   
    if(socket->queryString().keys().contains("group_membership_attribute")){
        fromStringValue(socket->queryString().value("group_membership_attribute"), group_membership_attribute);
    }
    
    QList<QString> default_groups;   
    if(socket->queryString().keys().contains("default_groups")){
        fromStringValue(socket->queryString().values("default_groups"), default_groups);
    }
    
    QString name_id_format;   
    if(socket->queryString().keys().contains("name_id_format")){
        fromStringValue(socket->queryString().value("name_id_format"), name_id_format);
    }
    
    QList<QString> synchronize_attributes;   
    if(socket->queryString().keys().contains("synchronize_attributes")){
        fromStringValue(socket->queryString().values("synchronize_attributes"), synchronize_attributes);
    }
    
    bool handle_logout;   
    if(socket->queryString().keys().contains("handle_logout")){
        fromStringValue(socket->queryString().value("handle_logout"), handle_logout);
    }
    
    QString logout_url;   
    if(socket->queryString().keys().contains("logout_url")){
        fromStringValue(socket->queryString().value("logout_url"), logout_url);
    }
    
    qint32 clock_tolerance;   
    if(socket->queryString().keys().contains("clock_tolerance")){
        fromStringValue(socket->queryString().value("clock_tolerance"), clock_tolerance);
    }
    
    QString digest_method;   
    if(socket->queryString().keys().contains("digest_method")){
        fromStringValue(socket->queryString().value("digest_method"), digest_method);
    }
    
    QString signature_method;   
    if(socket->queryString().keys().contains("signature_method")){
        fromStringValue(socket->queryString().value("signature_method"), signature_method);
    }
    
    QString identity_sync_type;   
    if(socket->queryString().keys().contains("identity_sync_type")){
        fromStringValue(socket->queryString().value("identity_sync_type"), identity_sync_type);
    }
    
    QString idp_identifier;   
    if(socket->queryString().keys().contains("idp_identifier")){
        fromStringValue(socket->queryString().value("idp_identifier"), idp_identifier);
    }
    


    emit comAdobeGraniteAuthSamlSamlAuthenticationHandler( post,  apply,  _delete,  action,  location,  propertylist,  path,  service_ranking,  idp_url,  idp_cert_alias,  idp_http_redirect,  service_provider_entity_id,  assertion_consumer_service_url,  sp_private_key_alias,  key_store_password,  default_redirect_url,  user_id_attribute,  use_encryption,  create_user,  user_intermediate_path,  add_group_memberships,  group_membership_attribute,  default_groups,  name_id_format,  synchronize_attributes,  handle_logout,  logout_url,  clock_tolerance,  digest_method,  signature_method,  identity_sync_type,  idp_identifier);
}


void OAIConfigmgrApiRequest::comAdobeGraniteAuthSsoImplSsoAuthenticationHandlerRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.auth.sso.impl.SsoAuthenticationHandler";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteAuthSsoImplSsoAuthenticationHandler, handler, &OAIConfigmgrApiHandler::comAdobeGraniteAuthSsoImplSsoAuthenticationHandler);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString path;   
    if(socket->queryString().keys().contains("path")){
        fromStringValue(socket->queryString().value("path"), path);
    }
    
    qint32 service_ranking;   
    if(socket->queryString().keys().contains("service_ranking")){
        fromStringValue(socket->queryString().value("service_ranking"), service_ranking);
    }
    
    QString jaas_control_flag;   
    if(socket->queryString().keys().contains("jaas_control_flag")){
        fromStringValue(socket->queryString().value("jaas_control_flag"), jaas_control_flag);
    }
    
    QString jaas_realm_name;   
    if(socket->queryString().keys().contains("jaas_realm_name")){
        fromStringValue(socket->queryString().value("jaas_realm_name"), jaas_realm_name);
    }
    
    qint32 jaas_ranking;   
    if(socket->queryString().keys().contains("jaas_ranking")){
        fromStringValue(socket->queryString().value("jaas_ranking"), jaas_ranking);
    }
    
    QList<QString> headers;   
    if(socket->queryString().keys().contains("headers")){
        fromStringValue(socket->queryString().values("headers"), headers);
    }
    
    QList<QString> cookies;   
    if(socket->queryString().keys().contains("cookies")){
        fromStringValue(socket->queryString().values("cookies"), cookies);
    }
    
    QList<QString> parameters;   
    if(socket->queryString().keys().contains("parameters")){
        fromStringValue(socket->queryString().values("parameters"), parameters);
    }
    
    QList<QString> usermap;   
    if(socket->queryString().keys().contains("usermap")){
        fromStringValue(socket->queryString().values("usermap"), usermap);
    }
    
    QString format;   
    if(socket->queryString().keys().contains("format")){
        fromStringValue(socket->queryString().value("format"), format);
    }
    
    QString trusted_credentials_attribute;   
    if(socket->queryString().keys().contains("trusted_credentials_attribute")){
        fromStringValue(socket->queryString().value("trusted_credentials_attribute"), trusted_credentials_attribute);
    }
    


    emit comAdobeGraniteAuthSsoImplSsoAuthenticationHandler( post,  apply,  _delete,  action,  location,  propertylist,  path,  service_ranking,  jaas_control_flag,  jaas_realm_name,  jaas_ranking,  headers,  cookies,  parameters,  usermap,  format,  trusted_credentials_attribute);
}


void OAIConfigmgrApiRequest::comAdobeGraniteBundlesHcImplCodeCacheHealthCheckRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.bundles.hc.impl.CodeCacheHealthCheck";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteBundlesHcImplCodeCacheHealthCheck, handler, &OAIConfigmgrApiHandler::comAdobeGraniteBundlesHcImplCodeCacheHealthCheck);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> hc_tags;   
    if(socket->queryString().keys().contains("hc_tags")){
        fromStringValue(socket->queryString().values("hc_tags"), hc_tags);
    }
    
    qint32 minimum_code_cache_size;   
    if(socket->queryString().keys().contains("minimum_code_cache_size")){
        fromStringValue(socket->queryString().value("minimum_code_cache_size"), minimum_code_cache_size);
    }
    


    emit comAdobeGraniteBundlesHcImplCodeCacheHealthCheck( post,  apply,  _delete,  action,  location,  propertylist,  hc_tags,  minimum_code_cache_size);
}


void OAIConfigmgrApiRequest::comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.bundles.hc.impl.CrxdeSupportBundleHealthCheck";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck, handler, &OAIConfigmgrApiHandler::comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> hc_tags;   
    if(socket->queryString().keys().contains("hc_tags")){
        fromStringValue(socket->queryString().values("hc_tags"), hc_tags);
    }
    


    emit comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck( post,  apply,  _delete,  action,  location,  propertylist,  hc_tags);
}


void OAIConfigmgrApiRequest::comAdobeGraniteBundlesHcImplDavExBundleHealthCheckRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.bundles.hc.impl.DavExBundleHealthCheck";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteBundlesHcImplDavExBundleHealthCheck, handler, &OAIConfigmgrApiHandler::comAdobeGraniteBundlesHcImplDavExBundleHealthCheck);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> hc_tags;   
    if(socket->queryString().keys().contains("hc_tags")){
        fromStringValue(socket->queryString().values("hc_tags"), hc_tags);
    }
    


    emit comAdobeGraniteBundlesHcImplDavExBundleHealthCheck( post,  apply,  _delete,  action,  location,  propertylist,  hc_tags);
}


void OAIConfigmgrApiRequest::comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.bundles.hc.impl.InactiveBundlesHealthCheck";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck, handler, &OAIConfigmgrApiHandler::comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> hc_tags;   
    if(socket->queryString().keys().contains("hc_tags")){
        fromStringValue(socket->queryString().values("hc_tags"), hc_tags);
    }
    
    QList<QString> ignored_bundles;   
    if(socket->queryString().keys().contains("ignored_bundles")){
        fromStringValue(socket->queryString().values("ignored_bundles"), ignored_bundles);
    }
    


    emit comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck( post,  apply,  _delete,  action,  location,  propertylist,  hc_tags,  ignored_bundles);
}


void OAIConfigmgrApiRequest::comAdobeGraniteBundlesHcImplJobsHealthCheckRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.bundles.hc.impl.JobsHealthCheck";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteBundlesHcImplJobsHealthCheck, handler, &OAIConfigmgrApiHandler::comAdobeGraniteBundlesHcImplJobsHealthCheck);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> hc_tags;   
    if(socket->queryString().keys().contains("hc_tags")){
        fromStringValue(socket->queryString().values("hc_tags"), hc_tags);
    }
    
    qint32 max_queued_jobs;   
    if(socket->queryString().keys().contains("max_queued_jobs")){
        fromStringValue(socket->queryString().value("max_queued_jobs"), max_queued_jobs);
    }
    


    emit comAdobeGraniteBundlesHcImplJobsHealthCheck( post,  apply,  _delete,  action,  location,  propertylist,  hc_tags,  max_queued_jobs);
}


void OAIConfigmgrApiRequest::comAdobeGraniteBundlesHcImplSlingGetServletHealthCheckRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingGetServletHealthCheck";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteBundlesHcImplSlingGetServletHealthCheck, handler, &OAIConfigmgrApiHandler::comAdobeGraniteBundlesHcImplSlingGetServletHealthCheck);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> hc_tags;   
    if(socket->queryString().keys().contains("hc_tags")){
        fromStringValue(socket->queryString().values("hc_tags"), hc_tags);
    }
    


    emit comAdobeGraniteBundlesHcImplSlingGetServletHealthCheck( post,  apply,  _delete,  action,  location,  propertylist,  hc_tags);
}


void OAIConfigmgrApiRequest::comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJavaScriptHandlerHealthCheck";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck, handler, &OAIConfigmgrApiHandler::comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> hc_tags;   
    if(socket->queryString().keys().contains("hc_tags")){
        fromStringValue(socket->queryString().values("hc_tags"), hc_tags);
    }
    


    emit comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck( post,  apply,  _delete,  action,  location,  propertylist,  hc_tags);
}


void OAIConfigmgrApiRequest::comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJspScriptHandlerHealthCheck";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck, handler, &OAIConfigmgrApiHandler::comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> hc_tags;   
    if(socket->queryString().keys().contains("hc_tags")){
        fromStringValue(socket->queryString().values("hc_tags"), hc_tags);
    }
    


    emit comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck( post,  apply,  _delete,  action,  location,  propertylist,  hc_tags);
}


void OAIConfigmgrApiRequest::comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingReferrerFilterHealthCheck";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck, handler, &OAIConfigmgrApiHandler::comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> hc_tags;   
    if(socket->queryString().keys().contains("hc_tags")){
        fromStringValue(socket->queryString().values("hc_tags"), hc_tags);
    }
    


    emit comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck( post,  apply,  _delete,  action,  location,  propertylist,  hc_tags);
}


void OAIConfigmgrApiRequest::comAdobeGraniteBundlesHcImplWebDavBundleHealthCheckRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.bundles.hc.impl.WebDavBundleHealthCheck";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteBundlesHcImplWebDavBundleHealthCheck, handler, &OAIConfigmgrApiHandler::comAdobeGraniteBundlesHcImplWebDavBundleHealthCheck);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> hc_tags;   
    if(socket->queryString().keys().contains("hc_tags")){
        fromStringValue(socket->queryString().values("hc_tags"), hc_tags);
    }
    


    emit comAdobeGraniteBundlesHcImplWebDavBundleHealthCheck( post,  apply,  _delete,  action,  location,  propertylist,  hc_tags);
}


void OAIConfigmgrApiRequest::comAdobeGraniteCommentsInternalCommentReplicationContentFilterFacRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.comments.internal.CommentReplicationContentFilterFactory";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteCommentsInternalCommentReplicationContentFilterFac, handler, &OAIConfigmgrApiHandler::comAdobeGraniteCommentsInternalCommentReplicationContentFilterFac);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> replicate_comment_resource_types;   
    if(socket->queryString().keys().contains("replicate_comment_resource_types")){
        fromStringValue(socket->queryString().values("replicate_comment_resource_types"), replicate_comment_resource_types);
    }
    


    emit comAdobeGraniteCommentsInternalCommentReplicationContentFilterFac( post,  apply,  _delete,  action,  location,  propertylist,  replicate_comment_resource_types);
}


void OAIConfigmgrApiRequest::comAdobeGraniteCompatrouterImplCompatSwitchingServiceImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.compatrouter.impl.CompatSwitchingServiceImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl, handler, &OAIConfigmgrApiHandler::comAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> compatgroups;   
    if(socket->queryString().keys().contains("compatgroups")){
        fromStringValue(socket->queryString().values("compatgroups"), compatgroups);
    }
    
    bool enabled;   
    if(socket->queryString().keys().contains("enabled")){
        fromStringValue(socket->queryString().value("enabled"), enabled);
    }
    


    emit comAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl( post,  apply,  _delete,  action,  location,  propertylist,  compatgroups,  enabled);
}


void OAIConfigmgrApiRequest::comAdobeGraniteCompatrouterImplRoutingConfigRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.compatrouter.impl.RoutingConfig";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteCompatrouterImplRoutingConfig, handler, &OAIConfigmgrApiHandler::comAdobeGraniteCompatrouterImplRoutingConfig);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString id;   
    if(socket->queryString().keys().contains("id")){
        fromStringValue(socket->queryString().value("id"), id);
    }
    
    QString compat_path;   
    if(socket->queryString().keys().contains("compat_path")){
        fromStringValue(socket->queryString().value("compat_path"), compat_path);
    }
    
    QString new_path;   
    if(socket->queryString().keys().contains("new_path")){
        fromStringValue(socket->queryString().value("new_path"), new_path);
    }
    


    emit comAdobeGraniteCompatrouterImplRoutingConfig( post,  apply,  _delete,  action,  location,  propertylist,  id,  compat_path,  new_path);
}


void OAIConfigmgrApiRequest::comAdobeGraniteCompatrouterImplSwitchMappingConfigRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.compatrouter.impl.SwitchMappingConfig";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteCompatrouterImplSwitchMappingConfig, handler, &OAIConfigmgrApiHandler::comAdobeGraniteCompatrouterImplSwitchMappingConfig);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString group;   
    if(socket->queryString().keys().contains("group")){
        fromStringValue(socket->queryString().value("group"), group);
    }
    
    QList<QString> ids;   
    if(socket->queryString().keys().contains("ids")){
        fromStringValue(socket->queryString().values("ids"), ids);
    }
    


    emit comAdobeGraniteCompatrouterImplSwitchMappingConfig( post,  apply,  _delete,  action,  location,  propertylist,  group,  ids);
}


void OAIConfigmgrApiRequest::comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.conf.impl.RuntimeAwareConfigurationResourceResolvingStrategy";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving, handler, &OAIConfigmgrApiHandler::comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool enabled;   
    if(socket->queryString().keys().contains("enabled")){
        fromStringValue(socket->queryString().value("enabled"), enabled);
    }
    
    QList<QString> fallback_paths;   
    if(socket->queryString().keys().contains("fallback_paths")){
        fromStringValue(socket->queryString().values("fallback_paths"), fallback_paths);
    }
    


    emit comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving( post,  apply,  _delete,  action,  location,  propertylist,  enabled,  fallback_paths);
}


void OAIConfigmgrApiRequest::comAdobeGraniteContexthubImplContextHubImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.contexthub.impl.ContextHubImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteContexthubImplContextHubImpl, handler, &OAIConfigmgrApiHandler::comAdobeGraniteContexthubImplContextHubImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool com_adobe_granite_contexthub_silent_mode;   
    if(socket->queryString().keys().contains("com_adobe_granite_contexthub_silent_mode")){
        fromStringValue(socket->queryString().value("com_adobe_granite_contexthub_silent_mode"), com_adobe_granite_contexthub_silent_mode);
    }
    
    bool com_adobe_granite_contexthub_show_ui;   
    if(socket->queryString().keys().contains("com_adobe_granite_contexthub_show_ui")){
        fromStringValue(socket->queryString().value("com_adobe_granite_contexthub_show_ui"), com_adobe_granite_contexthub_show_ui);
    }
    


    emit comAdobeGraniteContexthubImplContextHubImpl( post,  apply,  _delete,  action,  location,  propertylist,  com_adobe_granite_contexthub_silent_mode,  com_adobe_granite_contexthub_show_ui);
}


void OAIConfigmgrApiRequest::comAdobeGraniteCorsImplCORSPolicyImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.cors.impl.CORSPolicyImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteCorsImplCORSPolicyImpl, handler, &OAIConfigmgrApiHandler::comAdobeGraniteCorsImplCORSPolicyImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> alloworigin;   
    if(socket->queryString().keys().contains("alloworigin")){
        fromStringValue(socket->queryString().values("alloworigin"), alloworigin);
    }
    
    QList<QString> alloworiginregexp;   
    if(socket->queryString().keys().contains("alloworiginregexp")){
        fromStringValue(socket->queryString().values("alloworiginregexp"), alloworiginregexp);
    }
    
    QList<QString> allowedpaths;   
    if(socket->queryString().keys().contains("allowedpaths")){
        fromStringValue(socket->queryString().values("allowedpaths"), allowedpaths);
    }
    
    QList<QString> exposedheaders;   
    if(socket->queryString().keys().contains("exposedheaders")){
        fromStringValue(socket->queryString().values("exposedheaders"), exposedheaders);
    }
    
    qint32 maxage;   
    if(socket->queryString().keys().contains("maxage")){
        fromStringValue(socket->queryString().value("maxage"), maxage);
    }
    
    QList<QString> supportedheaders;   
    if(socket->queryString().keys().contains("supportedheaders")){
        fromStringValue(socket->queryString().values("supportedheaders"), supportedheaders);
    }
    
    QList<QString> supportedmethods;   
    if(socket->queryString().keys().contains("supportedmethods")){
        fromStringValue(socket->queryString().values("supportedmethods"), supportedmethods);
    }
    
    bool supportscredentials;   
    if(socket->queryString().keys().contains("supportscredentials")){
        fromStringValue(socket->queryString().value("supportscredentials"), supportscredentials);
    }
    


    emit comAdobeGraniteCorsImplCORSPolicyImpl( post,  apply,  _delete,  action,  location,  propertylist,  alloworigin,  alloworiginregexp,  allowedpaths,  exposedheaders,  maxage,  supportedheaders,  supportedmethods,  supportscredentials);
}


void OAIConfigmgrApiRequest::comAdobeGraniteCsrfImplCSRFFilterRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.csrf.impl.CSRFFilter";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteCsrfImplCSRFFilter, handler, &OAIConfigmgrApiHandler::comAdobeGraniteCsrfImplCSRFFilter);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> filter_methods;   
    if(socket->queryString().keys().contains("filter_methods")){
        fromStringValue(socket->queryString().values("filter_methods"), filter_methods);
    }
    
    bool filter_enable_safe_user_agents;   
    if(socket->queryString().keys().contains("filter_enable_safe_user_agents")){
        fromStringValue(socket->queryString().value("filter_enable_safe_user_agents"), filter_enable_safe_user_agents);
    }
    
    QList<QString> filter_safe_user_agents;   
    if(socket->queryString().keys().contains("filter_safe_user_agents")){
        fromStringValue(socket->queryString().values("filter_safe_user_agents"), filter_safe_user_agents);
    }
    
    QList<QString> filter_excluded_paths;   
    if(socket->queryString().keys().contains("filter_excluded_paths")){
        fromStringValue(socket->queryString().values("filter_excluded_paths"), filter_excluded_paths);
    }
    


    emit comAdobeGraniteCsrfImplCSRFFilter( post,  apply,  _delete,  action,  location,  propertylist,  filter_methods,  filter_enable_safe_user_agents,  filter_safe_user_agents,  filter_excluded_paths);
}


void OAIConfigmgrApiRequest::comAdobeGraniteCsrfImplCSRFServletRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.csrf.impl.CSRFServlet";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteCsrfImplCSRFServlet, handler, &OAIConfigmgrApiHandler::comAdobeGraniteCsrfImplCSRFServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 csrf_token_expires_in;   
    if(socket->queryString().keys().contains("csrf_token_expires_in")){
        fromStringValue(socket->queryString().value("csrf_token_expires_in"), csrf_token_expires_in);
    }
    
    QString sling_auth_requirements;   
    if(socket->queryString().keys().contains("sling_auth_requirements")){
        fromStringValue(socket->queryString().value("sling_auth_requirements"), sling_auth_requirements);
    }
    


    emit comAdobeGraniteCsrfImplCSRFServlet( post,  apply,  _delete,  action,  location,  propertylist,  csrf_token_expires_in,  sling_auth_requirements);
}


void OAIConfigmgrApiRequest::comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.distribution.core.impl.CryptoDistributionTransportSecretProvider";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe, handler, &OAIConfigmgrApiHandler::comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString name;   
    if(socket->queryString().keys().contains("name")){
        fromStringValue(socket->queryString().value("name"), name);
    }
    
    QString username;   
    if(socket->queryString().keys().contains("username")){
        fromStringValue(socket->queryString().value("username"), username);
    }
    
    QString encrypted_password;   
    if(socket->queryString().keys().contains("encrypted_password")){
        fromStringValue(socket->queryString().value("encrypted_password"), encrypted_password);
    }
    


    emit comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe( post,  apply,  _delete,  action,  location,  propertylist,  name,  username,  encrypted_password);
}


void OAIConfigmgrApiRequest::comAdobeGraniteDistributionCoreImplDiffDiffChangesObserverRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffChangesObserver";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteDistributionCoreImplDiffDiffChangesObserver, handler, &OAIConfigmgrApiHandler::comAdobeGraniteDistributionCoreImplDiffDiffChangesObserver);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool enabled;   
    if(socket->queryString().keys().contains("enabled")){
        fromStringValue(socket->queryString().value("enabled"), enabled);
    }
    
    QString agent_name;   
    if(socket->queryString().keys().contains("agent_name")){
        fromStringValue(socket->queryString().value("agent_name"), agent_name);
    }
    
    QString diff_path;   
    if(socket->queryString().keys().contains("diff_path")){
        fromStringValue(socket->queryString().value("diff_path"), diff_path);
    }
    
    QString observed_path;   
    if(socket->queryString().keys().contains("observed_path")){
        fromStringValue(socket->queryString().value("observed_path"), observed_path);
    }
    
    QString service_name;   
    if(socket->queryString().keys().contains("service_name")){
        fromStringValue(socket->queryString().value("service_name"), service_name);
    }
    
    QString property_names;   
    if(socket->queryString().keys().contains("property_names")){
        fromStringValue(socket->queryString().value("property_names"), property_names);
    }
    
    qint32 distribution_delay;   
    if(socket->queryString().keys().contains("distribution_delay")){
        fromStringValue(socket->queryString().value("distribution_delay"), distribution_delay);
    }
    
    QString service_user_target;   
    if(socket->queryString().keys().contains("service_user_target")){
        fromStringValue(socket->queryString().value("service_user_target"), service_user_target);
    }
    


    emit comAdobeGraniteDistributionCoreImplDiffDiffChangesObserver( post,  apply,  _delete,  action,  location,  propertylist,  enabled,  agent_name,  diff_path,  observed_path,  service_name,  property_names,  distribution_delay,  service_user_target);
}


void OAIConfigmgrApiRequest::comAdobeGraniteDistributionCoreImplDiffDiffEventListenerRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffEventListener";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteDistributionCoreImplDiffDiffEventListener, handler, &OAIConfigmgrApiHandler::comAdobeGraniteDistributionCoreImplDiffDiffEventListener);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString diff_path;   
    if(socket->queryString().keys().contains("diff_path")){
        fromStringValue(socket->queryString().value("diff_path"), diff_path);
    }
    
    QString service_name;   
    if(socket->queryString().keys().contains("service_name")){
        fromStringValue(socket->queryString().value("service_name"), service_name);
    }
    
    QString service_user_target;   
    if(socket->queryString().keys().contains("service_user_target")){
        fromStringValue(socket->queryString().value("service_user_target"), service_user_target);
    }
    


    emit comAdobeGraniteDistributionCoreImplDiffDiffEventListener( post,  apply,  _delete,  action,  location,  propertylist,  diff_path,  service_name,  service_user_target);
}


void OAIConfigmgrApiRequest::comAdobeGraniteDistributionCoreImplDistributionToReplicationEvenRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.distribution.core.impl.DistributionToReplicationEventTransformer";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteDistributionCoreImplDistributionToReplicationEven, handler, &OAIConfigmgrApiHandler::comAdobeGraniteDistributionCoreImplDistributionToReplicationEven);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> importer_name;   
    if(socket->queryString().keys().contains("importer_name")){
        fromStringValue(socket->queryString().values("importer_name"), importer_name);
    }
    


    emit comAdobeGraniteDistributionCoreImplDistributionToReplicationEven( post,  apply,  _delete,  action,  location,  propertylist,  importer_name);
}


void OAIConfigmgrApiRequest::comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.adapters.ReplicationAgentProvider";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat, handler, &OAIConfigmgrApiHandler::comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString provider_name;   
    if(socket->queryString().keys().contains("provider_name")){
        fromStringValue(socket->queryString().value("provider_name"), provider_name);
    }
    
    bool forward_requests;   
    if(socket->queryString().keys().contains("forward_requests")){
        fromStringValue(socket->queryString().value("forward_requests"), forward_requests);
    }
    


    emit comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat( post,  apply,  _delete,  action,  location,  propertylist,  provider_name,  forward_requests);
}


void OAIConfigmgrApiRequest::comAdobeGraniteDistributionCoreImplReplicationDistributionTransRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.DistributionTransportHandler";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteDistributionCoreImplReplicationDistributionTrans, handler, &OAIConfigmgrApiHandler::comAdobeGraniteDistributionCoreImplReplicationDistributionTrans);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool forward_requests;   
    if(socket->queryString().keys().contains("forward_requests")){
        fromStringValue(socket->queryString().value("forward_requests"), forward_requests);
    }
    


    emit comAdobeGraniteDistributionCoreImplReplicationDistributionTrans( post,  apply,  _delete,  action,  location,  propertylist,  forward_requests);
}


void OAIConfigmgrApiRequest::comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.distribution.core.impl.transport.AccessTokenDistributionTransportSecretProvider";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu, handler, &OAIConfigmgrApiHandler::comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString name;   
    if(socket->queryString().keys().contains("name")){
        fromStringValue(socket->queryString().value("name"), name);
    }
    
    QString service_name;   
    if(socket->queryString().keys().contains("service_name")){
        fromStringValue(socket->queryString().value("service_name"), service_name);
    }
    
    QString user_id;   
    if(socket->queryString().keys().contains("user_id")){
        fromStringValue(socket->queryString().value("user_id"), user_id);
    }
    
    QString access_token_provider_target;   
    if(socket->queryString().keys().contains("access_token_provider_target")){
        fromStringValue(socket->queryString().value("access_token_provider_target"), access_token_provider_target);
    }
    


    emit comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu( post,  apply,  _delete,  action,  location,  propertylist,  name,  service_name,  user_id,  access_token_provider_target);
}


void OAIConfigmgrApiRequest::comAdobeGraniteFragsImplCheckHttpHeaderFlagRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.frags.impl.CheckHttpHeaderFlag";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteFragsImplCheckHttpHeaderFlag, handler, &OAIConfigmgrApiHandler::comAdobeGraniteFragsImplCheckHttpHeaderFlag);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString feature_name;   
    if(socket->queryString().keys().contains("feature_name")){
        fromStringValue(socket->queryString().value("feature_name"), feature_name);
    }
    
    QString feature_description;   
    if(socket->queryString().keys().contains("feature_description")){
        fromStringValue(socket->queryString().value("feature_description"), feature_description);
    }
    
    QString http_header_name;   
    if(socket->queryString().keys().contains("http_header_name")){
        fromStringValue(socket->queryString().value("http_header_name"), http_header_name);
    }
    
    QString http_header_valuepattern;   
    if(socket->queryString().keys().contains("http_header_valuepattern")){
        fromStringValue(socket->queryString().value("http_header_valuepattern"), http_header_valuepattern);
    }
    


    emit comAdobeGraniteFragsImplCheckHttpHeaderFlag( post,  apply,  _delete,  action,  location,  propertylist,  feature_name,  feature_description,  http_header_name,  http_header_valuepattern);
}


void OAIConfigmgrApiRequest::comAdobeGraniteFragsImplRandomFeatureRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.frags.impl.RandomFeature";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteFragsImplRandomFeature, handler, &OAIConfigmgrApiHandler::comAdobeGraniteFragsImplRandomFeature);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString feature_name;   
    if(socket->queryString().keys().contains("feature_name")){
        fromStringValue(socket->queryString().value("feature_name"), feature_name);
    }
    
    QString feature_description;   
    if(socket->queryString().keys().contains("feature_description")){
        fromStringValue(socket->queryString().value("feature_description"), feature_description);
    }
    
    QString active_percentage;   
    if(socket->queryString().keys().contains("active_percentage")){
        fromStringValue(socket->queryString().value("active_percentage"), active_percentage);
    }
    
    QString cookie_name;   
    if(socket->queryString().keys().contains("cookie_name")){
        fromStringValue(socket->queryString().value("cookie_name"), cookie_name);
    }
    
    qint32 cookie_max_age;   
    if(socket->queryString().keys().contains("cookie_max_age")){
        fromStringValue(socket->queryString().value("cookie_max_age"), cookie_max_age);
    }
    


    emit comAdobeGraniteFragsImplRandomFeature( post,  apply,  _delete,  action,  location,  propertylist,  feature_name,  feature_description,  active_percentage,  cookie_name,  cookie_max_age);
}


void OAIConfigmgrApiRequest::comAdobeGraniteHttpcacheFileFileCacheStoreRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.httpcache.file.FileCacheStore";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteHttpcacheFileFileCacheStore, handler, &OAIConfigmgrApiHandler::comAdobeGraniteHttpcacheFileFileCacheStore);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString com_adobe_granite_httpcache_file_document_root;   
    if(socket->queryString().keys().contains("com_adobe_granite_httpcache_file_document_root")){
        fromStringValue(socket->queryString().value("com_adobe_granite_httpcache_file_document_root"), com_adobe_granite_httpcache_file_document_root);
    }
    
    QString com_adobe_granite_httpcache_file_include_host;   
    if(socket->queryString().keys().contains("com_adobe_granite_httpcache_file_include_host")){
        fromStringValue(socket->queryString().value("com_adobe_granite_httpcache_file_include_host"), com_adobe_granite_httpcache_file_include_host);
    }
    


    emit comAdobeGraniteHttpcacheFileFileCacheStore( post,  apply,  _delete,  action,  location,  propertylist,  com_adobe_granite_httpcache_file_document_root,  com_adobe_granite_httpcache_file_include_host);
}


void OAIConfigmgrApiRequest::comAdobeGraniteHttpcacheImplOuterCacheFilterRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.httpcache.impl.OuterCacheFilter";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteHttpcacheImplOuterCacheFilter, handler, &OAIConfigmgrApiHandler::comAdobeGraniteHttpcacheImplOuterCacheFilter);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> com_adobe_granite_httpcache_url_paths;   
    if(socket->queryString().keys().contains("com_adobe_granite_httpcache_url_paths")){
        fromStringValue(socket->queryString().values("com_adobe_granite_httpcache_url_paths"), com_adobe_granite_httpcache_url_paths);
    }
    


    emit comAdobeGraniteHttpcacheImplOuterCacheFilter( post,  apply,  _delete,  action,  location,  propertylist,  com_adobe_granite_httpcache_url_paths);
}


void OAIConfigmgrApiRequest::comAdobeGraniteI18nImplBundlePseudoTranslationsRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.i18n.impl.bundle.PseudoTranslations";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteI18nImplBundlePseudoTranslations, handler, &OAIConfigmgrApiHandler::comAdobeGraniteI18nImplBundlePseudoTranslations);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> pseudo_patterns;   
    if(socket->queryString().keys().contains("pseudo_patterns")){
        fromStringValue(socket->queryString().values("pseudo_patterns"), pseudo_patterns);
    }
    


    emit comAdobeGraniteI18nImplBundlePseudoTranslations( post,  apply,  _delete,  action,  location,  propertylist,  pseudo_patterns);
}


void OAIConfigmgrApiRequest::comAdobeGraniteI18nImplPreferencesLocaleResolverServiceRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.i18n.impl.PreferencesLocaleResolverService";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteI18nImplPreferencesLocaleResolverService, handler, &OAIConfigmgrApiHandler::comAdobeGraniteI18nImplPreferencesLocaleResolverService);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString security_preferences_name;   
    if(socket->queryString().keys().contains("security_preferences_name")){
        fromStringValue(socket->queryString().value("security_preferences_name"), security_preferences_name);
    }
    


    emit comAdobeGraniteI18nImplPreferencesLocaleResolverService( post,  apply,  _delete,  action,  location,  propertylist,  security_preferences_name);
}


void OAIConfigmgrApiRequest::comAdobeGraniteInfocollectorInfoCollectorRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.infocollector.InfoCollector";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteInfocollectorInfoCollector, handler, &OAIConfigmgrApiHandler::comAdobeGraniteInfocollectorInfoCollector);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool granite_infocollector_include_thread_dumps;   
    if(socket->queryString().keys().contains("granite_infocollector_include_thread_dumps")){
        fromStringValue(socket->queryString().value("granite_infocollector_include_thread_dumps"), granite_infocollector_include_thread_dumps);
    }
    
    bool granite_infocollector_include_heap_dump;   
    if(socket->queryString().keys().contains("granite_infocollector_include_heap_dump")){
        fromStringValue(socket->queryString().value("granite_infocollector_include_heap_dump"), granite_infocollector_include_heap_dump);
    }
    


    emit comAdobeGraniteInfocollectorInfoCollector( post,  apply,  _delete,  action,  location,  propertylist,  granite_infocollector_include_thread_dumps,  granite_infocollector_include_heap_dump);
}


void OAIConfigmgrApiRequest::comAdobeGraniteJettySslInternalGraniteSslConnectorFactoryRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.jetty.ssl.internal.GraniteSslConnectorFactory";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteJettySslInternalGraniteSslConnectorFactory, handler, &OAIConfigmgrApiHandler::comAdobeGraniteJettySslInternalGraniteSslConnectorFactory);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 com_adobe_granite_jetty_ssl_port;   
    if(socket->queryString().keys().contains("com_adobe_granite_jetty_ssl_port")){
        fromStringValue(socket->queryString().value("com_adobe_granite_jetty_ssl_port"), com_adobe_granite_jetty_ssl_port);
    }
    
    QString com_adobe_granite_jetty_ssl_keystore_user;   
    if(socket->queryString().keys().contains("com_adobe_granite_jetty_ssl_keystore_user")){
        fromStringValue(socket->queryString().value("com_adobe_granite_jetty_ssl_keystore_user"), com_adobe_granite_jetty_ssl_keystore_user);
    }
    
    QString com_adobe_granite_jetty_ssl_keystore_password;   
    if(socket->queryString().keys().contains("com_adobe_granite_jetty_ssl_keystore_password")){
        fromStringValue(socket->queryString().value("com_adobe_granite_jetty_ssl_keystore_password"), com_adobe_granite_jetty_ssl_keystore_password);
    }
    
    QList<QString> com_adobe_granite_jetty_ssl_ciphersuites_excluded;   
    if(socket->queryString().keys().contains("com_adobe_granite_jetty_ssl_ciphersuites_excluded")){
        fromStringValue(socket->queryString().values("com_adobe_granite_jetty_ssl_ciphersuites_excluded"), com_adobe_granite_jetty_ssl_ciphersuites_excluded);
    }
    
    QList<QString> com_adobe_granite_jetty_ssl_ciphersuites_included;   
    if(socket->queryString().keys().contains("com_adobe_granite_jetty_ssl_ciphersuites_included")){
        fromStringValue(socket->queryString().values("com_adobe_granite_jetty_ssl_ciphersuites_included"), com_adobe_granite_jetty_ssl_ciphersuites_included);
    }
    
    QString com_adobe_granite_jetty_ssl_client_certificate;   
    if(socket->queryString().keys().contains("com_adobe_granite_jetty_ssl_client_certificate")){
        fromStringValue(socket->queryString().value("com_adobe_granite_jetty_ssl_client_certificate"), com_adobe_granite_jetty_ssl_client_certificate);
    }
    


    emit comAdobeGraniteJettySslInternalGraniteSslConnectorFactory( post,  apply,  _delete,  action,  location,  propertylist,  com_adobe_granite_jetty_ssl_port,  com_adobe_granite_jetty_ssl_keystore_user,  com_adobe_granite_jetty_ssl_keystore_password,  com_adobe_granite_jetty_ssl_ciphersuites_excluded,  com_adobe_granite_jetty_ssl_ciphersuites_included,  com_adobe_granite_jetty_ssl_client_certificate);
}


void OAIConfigmgrApiRequest::comAdobeGraniteLicenseImplLicenseCheckFilterRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.license.impl.LicenseCheckFilter";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteLicenseImplLicenseCheckFilter, handler, &OAIConfigmgrApiHandler::comAdobeGraniteLicenseImplLicenseCheckFilter);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 check_internval;   
    if(socket->queryString().keys().contains("check_internval")){
        fromStringValue(socket->queryString().value("check_internval"), check_internval);
    }
    
    QList<QString> exclude_ids;   
    if(socket->queryString().keys().contains("exclude_ids")){
        fromStringValue(socket->queryString().values("exclude_ids"), exclude_ids);
    }
    
    bool encrypt_ping;   
    if(socket->queryString().keys().contains("encrypt_ping")){
        fromStringValue(socket->queryString().value("encrypt_ping"), encrypt_ping);
    }
    


    emit comAdobeGraniteLicenseImplLicenseCheckFilter( post,  apply,  _delete,  action,  location,  propertylist,  check_internval,  exclude_ids,  encrypt_ping);
}


void OAIConfigmgrApiRequest::comAdobeGraniteLoggingImplLogAnalyserImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.logging.impl.LogAnalyserImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteLoggingImplLogAnalyserImpl, handler, &OAIConfigmgrApiHandler::comAdobeGraniteLoggingImplLogAnalyserImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 messages_queue_size;   
    if(socket->queryString().keys().contains("messages_queue_size")){
        fromStringValue(socket->queryString().value("messages_queue_size"), messages_queue_size);
    }
    
    QList<QString> logger_config;   
    if(socket->queryString().keys().contains("logger_config")){
        fromStringValue(socket->queryString().values("logger_config"), logger_config);
    }
    
    qint32 messages_size;   
    if(socket->queryString().keys().contains("messages_size")){
        fromStringValue(socket->queryString().value("messages_size"), messages_size);
    }
    


    emit comAdobeGraniteLoggingImplLogAnalyserImpl( post,  apply,  _delete,  action,  location,  propertylist,  messages_queue_size,  logger_config,  messages_size);
}


void OAIConfigmgrApiRequest::comAdobeGraniteLoggingImplLogErrorHealthCheckRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.logging.impl.LogErrorHealthCheck";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteLoggingImplLogErrorHealthCheck, handler, &OAIConfigmgrApiHandler::comAdobeGraniteLoggingImplLogErrorHealthCheck);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> hc_tags;   
    if(socket->queryString().keys().contains("hc_tags")){
        fromStringValue(socket->queryString().values("hc_tags"), hc_tags);
    }
    


    emit comAdobeGraniteLoggingImplLogErrorHealthCheck( post,  apply,  _delete,  action,  location,  propertylist,  hc_tags);
}


void OAIConfigmgrApiRequest::comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.maintenance.crx.impl.DataStoreGarbageCollectionTask";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask, handler, &OAIConfigmgrApiHandler::comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool granite_maintenance_mandatory;   
    if(socket->queryString().keys().contains("granite_maintenance_mandatory")){
        fromStringValue(socket->queryString().value("granite_maintenance_mandatory"), granite_maintenance_mandatory);
    }
    
    QString job_topics;   
    if(socket->queryString().keys().contains("job_topics")){
        fromStringValue(socket->queryString().value("job_topics"), job_topics);
    }
    


    emit comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask( post,  apply,  _delete,  action,  location,  propertylist,  granite_maintenance_mandatory,  job_topics);
}


void OAIConfigmgrApiRequest::comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.maintenance.crx.impl.LuceneBinariesCleanupTask";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask, handler, &OAIConfigmgrApiHandler::comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString job_topics;   
    if(socket->queryString().keys().contains("job_topics")){
        fromStringValue(socket->queryString().value("job_topics"), job_topics);
    }
    


    emit comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask( post,  apply,  _delete,  action,  location,  propertylist,  job_topics);
}


void OAIConfigmgrApiRequest::comAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.maintenance.crx.impl.RevisionCleanupTask";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteMaintenanceCrxImplRevisionCleanupTask, handler, &OAIConfigmgrApiHandler::comAdobeGraniteMaintenanceCrxImplRevisionCleanupTask);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> full_gc_days;   
    if(socket->queryString().keys().contains("full_gc_days")){
        fromStringValue(socket->queryString().values("full_gc_days"), full_gc_days);
    }
    


    emit comAdobeGraniteMaintenanceCrxImplRevisionCleanupTask( post,  apply,  _delete,  action,  location,  propertylist,  full_gc_days);
}


void OAIConfigmgrApiRequest::comAdobeGraniteMonitoringImplScriptConfigImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.monitoring.impl.ScriptConfigImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteMonitoringImplScriptConfigImpl, handler, &OAIConfigmgrApiHandler::comAdobeGraniteMonitoringImplScriptConfigImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString script_filename;   
    if(socket->queryString().keys().contains("script_filename")){
        fromStringValue(socket->queryString().value("script_filename"), script_filename);
    }
    
    QString script_display;   
    if(socket->queryString().keys().contains("script_display")){
        fromStringValue(socket->queryString().value("script_display"), script_display);
    }
    
    QString script_path;   
    if(socket->queryString().keys().contains("script_path")){
        fromStringValue(socket->queryString().value("script_path"), script_path);
    }
    
    QList<QString> script_platform;   
    if(socket->queryString().keys().contains("script_platform")){
        fromStringValue(socket->queryString().values("script_platform"), script_platform);
    }
    
    qint32 interval;   
    if(socket->queryString().keys().contains("interval")){
        fromStringValue(socket->queryString().value("interval"), interval);
    }
    
    QString jmxdomain;   
    if(socket->queryString().keys().contains("jmxdomain")){
        fromStringValue(socket->queryString().value("jmxdomain"), jmxdomain);
    }
    


    emit comAdobeGraniteMonitoringImplScriptConfigImpl( post,  apply,  _delete,  action,  location,  propertylist,  script_filename,  script_display,  script_path,  script_platform,  interval,  jmxdomain);
}


void OAIConfigmgrApiRequest::comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.oauth.server.auth.impl.OAuth2ServerAuthenticationHandler";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan, handler, &OAIConfigmgrApiHandler::comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString path;   
    if(socket->queryString().keys().contains("path")){
        fromStringValue(socket->queryString().value("path"), path);
    }
    
    QString jaas_control_flag;   
    if(socket->queryString().keys().contains("jaas_control_flag")){
        fromStringValue(socket->queryString().value("jaas_control_flag"), jaas_control_flag);
    }
    
    QString jaas_realm_name;   
    if(socket->queryString().keys().contains("jaas_realm_name")){
        fromStringValue(socket->queryString().value("jaas_realm_name"), jaas_realm_name);
    }
    
    qint32 jaas_ranking;   
    if(socket->queryString().keys().contains("jaas_ranking")){
        fromStringValue(socket->queryString().value("jaas_ranking"), jaas_ranking);
    }
    
    bool oauth_offline_validation;   
    if(socket->queryString().keys().contains("oauth_offline_validation")){
        fromStringValue(socket->queryString().value("oauth_offline_validation"), oauth_offline_validation);
    }
    


    emit comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan( post,  apply,  _delete,  action,  location,  propertylist,  path,  jaas_control_flag,  jaas_realm_name,  jaas_ranking,  oauth_offline_validation);
}


void OAIConfigmgrApiRequest::comAdobeGraniteOauthServerImplAccessTokenCleanupTaskRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.oauth.server.impl.AccessTokenCleanupTask";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteOauthServerImplAccessTokenCleanupTask, handler, &OAIConfigmgrApiHandler::comAdobeGraniteOauthServerImplAccessTokenCleanupTask);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString scheduler_expression;   
    if(socket->queryString().keys().contains("scheduler_expression")){
        fromStringValue(socket->queryString().value("scheduler_expression"), scheduler_expression);
    }
    


    emit comAdobeGraniteOauthServerImplAccessTokenCleanupTask( post,  apply,  _delete,  action,  location,  propertylist,  scheduler_expression);
}


void OAIConfigmgrApiRequest::comAdobeGraniteOauthServerImplOAuth2ClientRevocationServletRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2ClientRevocationServlet";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet, handler, &OAIConfigmgrApiHandler::comAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool oauth_client_revocation_active;   
    if(socket->queryString().keys().contains("oauth_client_revocation_active")){
        fromStringValue(socket->queryString().value("oauth_client_revocation_active"), oauth_client_revocation_active);
    }
    


    emit comAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet( post,  apply,  _delete,  action,  location,  propertylist,  oauth_client_revocation_active);
}


void OAIConfigmgrApiRequest::comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2RevocationEndpointServlet";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet, handler, &OAIConfigmgrApiHandler::comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString sling_servlet_paths;   
    if(socket->queryString().keys().contains("sling_servlet_paths")){
        fromStringValue(socket->queryString().value("sling_servlet_paths"), sling_servlet_paths);
    }
    
    bool oauth_revocation_active;   
    if(socket->queryString().keys().contains("oauth_revocation_active")){
        fromStringValue(socket->queryString().value("oauth_revocation_active"), oauth_revocation_active);
    }
    


    emit comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet( post,  apply,  _delete,  action,  location,  propertylist,  sling_servlet_paths,  oauth_revocation_active);
}


void OAIConfigmgrApiRequest::comAdobeGraniteOauthServerImplOAuth2TokenEndpointServletRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenEndpointServlet";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet, handler, &OAIConfigmgrApiHandler::comAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString oauth_issuer;   
    if(socket->queryString().keys().contains("oauth_issuer")){
        fromStringValue(socket->queryString().value("oauth_issuer"), oauth_issuer);
    }
    
    QString oauth_access_token_expires_in;   
    if(socket->queryString().keys().contains("oauth_access_token_expires_in")){
        fromStringValue(socket->queryString().value("oauth_access_token_expires_in"), oauth_access_token_expires_in);
    }
    
    QString osgi_http_whiteboard_servlet_pattern;   
    if(socket->queryString().keys().contains("osgi_http_whiteboard_servlet_pattern")){
        fromStringValue(socket->queryString().value("osgi_http_whiteboard_servlet_pattern"), osgi_http_whiteboard_servlet_pattern);
    }
    
    QString osgi_http_whiteboard_context_select;   
    if(socket->queryString().keys().contains("osgi_http_whiteboard_context_select")){
        fromStringValue(socket->queryString().value("osgi_http_whiteboard_context_select"), osgi_http_whiteboard_context_select);
    }
    


    emit comAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet( post,  apply,  _delete,  action,  location,  propertylist,  oauth_issuer,  oauth_access_token_expires_in,  osgi_http_whiteboard_servlet_pattern,  osgi_http_whiteboard_context_select);
}


void OAIConfigmgrApiRequest::comAdobeGraniteOauthServerImplOAuth2TokenRevocationServletRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenRevocationServlet";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet, handler, &OAIConfigmgrApiHandler::comAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool oauth_token_revocation_active;   
    if(socket->queryString().keys().contains("oauth_token_revocation_active")){
        fromStringValue(socket->queryString().value("oauth_token_revocation_active"), oauth_token_revocation_active);
    }
    


    emit comAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet( post,  apply,  _delete,  action,  location,  propertylist,  oauth_token_revocation_active);
}


void OAIConfigmgrApiRequest::comAdobeGraniteOffloadingImplOffloadingConfiguratorRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingConfigurator";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteOffloadingImplOffloadingConfigurator, handler, &OAIConfigmgrApiHandler::comAdobeGraniteOffloadingImplOffloadingConfigurator);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString offloading_transporter;   
    if(socket->queryString().keys().contains("offloading_transporter")){
        fromStringValue(socket->queryString().value("offloading_transporter"), offloading_transporter);
    }
    
    bool offloading_cleanup_payload;   
    if(socket->queryString().keys().contains("offloading_cleanup_payload")){
        fromStringValue(socket->queryString().value("offloading_cleanup_payload"), offloading_cleanup_payload);
    }
    


    emit comAdobeGraniteOffloadingImplOffloadingConfigurator( post,  apply,  _delete,  action,  location,  propertylist,  offloading_transporter,  offloading_cleanup_payload);
}


void OAIConfigmgrApiRequest::comAdobeGraniteOffloadingImplOffloadingJobClonerRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobCloner";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteOffloadingImplOffloadingJobCloner, handler, &OAIConfigmgrApiHandler::comAdobeGraniteOffloadingImplOffloadingJobCloner);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool offloading_jobcloner_enabled;   
    if(socket->queryString().keys().contains("offloading_jobcloner_enabled")){
        fromStringValue(socket->queryString().value("offloading_jobcloner_enabled"), offloading_jobcloner_enabled);
    }
    


    emit comAdobeGraniteOffloadingImplOffloadingJobCloner( post,  apply,  _delete,  action,  location,  propertylist,  offloading_jobcloner_enabled);
}


void OAIConfigmgrApiRequest::comAdobeGraniteOffloadingImplOffloadingJobOffloaderRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobOffloader";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteOffloadingImplOffloadingJobOffloader, handler, &OAIConfigmgrApiHandler::comAdobeGraniteOffloadingImplOffloadingJobOffloader);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool offloading_offloader_enabled;   
    if(socket->queryString().keys().contains("offloading_offloader_enabled")){
        fromStringValue(socket->queryString().value("offloading_offloader_enabled"), offloading_offloader_enabled);
    }
    


    emit comAdobeGraniteOffloadingImplOffloadingJobOffloader( post,  apply,  _delete,  action,  location,  propertylist,  offloading_offloader_enabled);
}


void OAIConfigmgrApiRequest::comAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingAgentManager";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteOffloadingImplTransporterOffloadingAgentManager, handler, &OAIConfigmgrApiHandler::comAdobeGraniteOffloadingImplTransporterOffloadingAgentManager);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool offloading_agentmanager_enabled;   
    if(socket->queryString().keys().contains("offloading_agentmanager_enabled")){
        fromStringValue(socket->queryString().value("offloading_agentmanager_enabled"), offloading_agentmanager_enabled);
    }
    


    emit comAdobeGraniteOffloadingImplTransporterOffloadingAgentManager( post,  apply,  _delete,  action,  location,  propertylist,  offloading_agentmanager_enabled);
}


void OAIConfigmgrApiRequest::comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingDefaultTransporter";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo, handler, &OAIConfigmgrApiHandler::comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString default_transport_agent_to_worker_prefix;   
    if(socket->queryString().keys().contains("default_transport_agent_to_worker_prefix")){
        fromStringValue(socket->queryString().value("default_transport_agent_to_worker_prefix"), default_transport_agent_to_worker_prefix);
    }
    
    QString default_transport_agent_to_master_prefix;   
    if(socket->queryString().keys().contains("default_transport_agent_to_master_prefix")){
        fromStringValue(socket->queryString().value("default_transport_agent_to_master_prefix"), default_transport_agent_to_master_prefix);
    }
    
    QString default_transport_input_package;   
    if(socket->queryString().keys().contains("default_transport_input_package")){
        fromStringValue(socket->queryString().value("default_transport_input_package"), default_transport_input_package);
    }
    
    QString default_transport_output_package;   
    if(socket->queryString().keys().contains("default_transport_output_package")){
        fromStringValue(socket->queryString().value("default_transport_output_package"), default_transport_output_package);
    }
    
    bool default_transport_replication_synchronous;   
    if(socket->queryString().keys().contains("default_transport_replication_synchronous")){
        fromStringValue(socket->queryString().value("default_transport_replication_synchronous"), default_transport_replication_synchronous);
    }
    
    bool default_transport_contentpackage;   
    if(socket->queryString().keys().contains("default_transport_contentpackage")){
        fromStringValue(socket->queryString().value("default_transport_contentpackage"), default_transport_contentpackage);
    }
    
    bool offloading_transporter_default_enabled;   
    if(socket->queryString().keys().contains("offloading_transporter_default_enabled")){
        fromStringValue(socket->queryString().value("offloading_transporter_default_enabled"), offloading_transporter_default_enabled);
    }
    


    emit comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo( post,  apply,  _delete,  action,  location,  propertylist,  default_transport_agent_to_worker_prefix,  default_transport_agent_to_master_prefix,  default_transport_input_package,  default_transport_output_package,  default_transport_replication_synchronous,  default_transport_contentpackage,  offloading_transporter_default_enabled);
}


void OAIConfigmgrApiRequest::comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.omnisearch.impl.core.OmniSearchServiceImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl, handler, &OAIConfigmgrApiHandler::comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 omnisearch_suggestion_requiretext_min;   
    if(socket->queryString().keys().contains("omnisearch_suggestion_requiretext_min")){
        fromStringValue(socket->queryString().value("omnisearch_suggestion_requiretext_min"), omnisearch_suggestion_requiretext_min);
    }
    
    bool omnisearch_suggestion_spellcheck_require;   
    if(socket->queryString().keys().contains("omnisearch_suggestion_spellcheck_require")){
        fromStringValue(socket->queryString().value("omnisearch_suggestion_spellcheck_require"), omnisearch_suggestion_spellcheck_require);
    }
    


    emit comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl( post,  apply,  _delete,  action,  location,  propertylist,  omnisearch_suggestion_requiretext_min,  omnisearch_suggestion_spellcheck_require);
}


void OAIConfigmgrApiRequest::comAdobeGraniteOptoutImplOptOutServiceImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.optout.impl.OptOutServiceImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteOptoutImplOptOutServiceImpl, handler, &OAIConfigmgrApiHandler::comAdobeGraniteOptoutImplOptOutServiceImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> optout_cookies;   
    if(socket->queryString().keys().contains("optout_cookies")){
        fromStringValue(socket->queryString().values("optout_cookies"), optout_cookies);
    }
    
    QList<QString> optout_headers;   
    if(socket->queryString().keys().contains("optout_headers")){
        fromStringValue(socket->queryString().values("optout_headers"), optout_headers);
    }
    
    QList<QString> optout_whitelist_cookies;   
    if(socket->queryString().keys().contains("optout_whitelist_cookies")){
        fromStringValue(socket->queryString().values("optout_whitelist_cookies"), optout_whitelist_cookies);
    }
    


    emit comAdobeGraniteOptoutImplOptOutServiceImpl( post,  apply,  _delete,  action,  location,  propertylist,  optout_cookies,  optout_headers,  optout_whitelist_cookies);
}


void OAIConfigmgrApiRequest::comAdobeGraniteQueriesImplHcAsyncIndexHealthCheckRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.queries.impl.hc.AsyncIndexHealthCheck";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteQueriesImplHcAsyncIndexHealthCheck, handler, &OAIConfigmgrApiHandler::comAdobeGraniteQueriesImplHcAsyncIndexHealthCheck);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 indexing_critical_threshold;   
    if(socket->queryString().keys().contains("indexing_critical_threshold")){
        fromStringValue(socket->queryString().value("indexing_critical_threshold"), indexing_critical_threshold);
    }
    
    qint32 indexing_warn_threshold;   
    if(socket->queryString().keys().contains("indexing_warn_threshold")){
        fromStringValue(socket->queryString().value("indexing_warn_threshold"), indexing_warn_threshold);
    }
    
    QList<QString> hc_tags;   
    if(socket->queryString().keys().contains("hc_tags")){
        fromStringValue(socket->queryString().values("hc_tags"), hc_tags);
    }
    


    emit comAdobeGraniteQueriesImplHcAsyncIndexHealthCheck( post,  apply,  _delete,  action,  location,  propertylist,  indexing_critical_threshold,  indexing_warn_threshold,  hc_tags);
}


void OAIConfigmgrApiRequest::comAdobeGraniteQueriesImplHcLargeIndexHealthCheckRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.queries.impl.hc.LargeIndexHealthCheck";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteQueriesImplHcLargeIndexHealthCheck, handler, &OAIConfigmgrApiHandler::comAdobeGraniteQueriesImplHcLargeIndexHealthCheck);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 large_index_critical_threshold;   
    if(socket->queryString().keys().contains("large_index_critical_threshold")){
        fromStringValue(socket->queryString().value("large_index_critical_threshold"), large_index_critical_threshold);
    }
    
    qint32 large_index_warn_threshold;   
    if(socket->queryString().keys().contains("large_index_warn_threshold")){
        fromStringValue(socket->queryString().value("large_index_warn_threshold"), large_index_warn_threshold);
    }
    
    QList<QString> hc_tags;   
    if(socket->queryString().keys().contains("hc_tags")){
        fromStringValue(socket->queryString().values("hc_tags"), hc_tags);
    }
    


    emit comAdobeGraniteQueriesImplHcLargeIndexHealthCheck( post,  apply,  _delete,  action,  location,  propertylist,  large_index_critical_threshold,  large_index_warn_threshold,  hc_tags);
}


void OAIConfigmgrApiRequest::comAdobeGraniteQueriesImplHcQueriesStatusHealthCheckRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.queries.impl.hc.QueriesStatusHealthCheck";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteQueriesImplHcQueriesStatusHealthCheck, handler, &OAIConfigmgrApiHandler::comAdobeGraniteQueriesImplHcQueriesStatusHealthCheck);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> hc_tags;   
    if(socket->queryString().keys().contains("hc_tags")){
        fromStringValue(socket->queryString().values("hc_tags"), hc_tags);
    }
    


    emit comAdobeGraniteQueriesImplHcQueriesStatusHealthCheck( post,  apply,  _delete,  action,  location,  propertylist,  hc_tags);
}


void OAIConfigmgrApiRequest::comAdobeGraniteQueriesImplHcQueryHealthCheckMetricsRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryHealthCheckMetrics";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteQueriesImplHcQueryHealthCheckMetrics, handler, &OAIConfigmgrApiHandler::comAdobeGraniteQueriesImplHcQueryHealthCheckMetrics);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 get_period;   
    if(socket->queryString().keys().contains("get_period")){
        fromStringValue(socket->queryString().value("get_period"), get_period);
    }
    


    emit comAdobeGraniteQueriesImplHcQueryHealthCheckMetrics( post,  apply,  _delete,  action,  location,  propertylist,  get_period);
}


void OAIConfigmgrApiRequest::comAdobeGraniteQueriesImplHcQueryLimitsHealthCheckRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryLimitsHealthCheck";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteQueriesImplHcQueryLimitsHealthCheck, handler, &OAIConfigmgrApiHandler::comAdobeGraniteQueriesImplHcQueryLimitsHealthCheck);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> hc_tags;   
    if(socket->queryString().keys().contains("hc_tags")){
        fromStringValue(socket->queryString().values("hc_tags"), hc_tags);
    }
    


    emit comAdobeGraniteQueriesImplHcQueryLimitsHealthCheck( post,  apply,  _delete,  action,  location,  propertylist,  hc_tags);
}


void OAIConfigmgrApiRequest::comAdobeGraniteReplicationHcImplReplicationQueueHealthCheckRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationQueueHealthCheck";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteReplicationHcImplReplicationQueueHealthCheck, handler, &OAIConfigmgrApiHandler::comAdobeGraniteReplicationHcImplReplicationQueueHealthCheck);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 number_of_retries_allowed;   
    if(socket->queryString().keys().contains("number_of_retries_allowed")){
        fromStringValue(socket->queryString().value("number_of_retries_allowed"), number_of_retries_allowed);
    }
    
    QList<QString> hc_tags;   
    if(socket->queryString().keys().contains("hc_tags")){
        fromStringValue(socket->queryString().values("hc_tags"), hc_tags);
    }
    


    emit comAdobeGraniteReplicationHcImplReplicationQueueHealthCheck( post,  apply,  _delete,  action,  location,  propertylist,  number_of_retries_allowed,  hc_tags);
}


void OAIConfigmgrApiRequest::comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationTransportUsersHealthCheck";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC, handler, &OAIConfigmgrApiHandler::comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> hc_tags;   
    if(socket->queryString().keys().contains("hc_tags")){
        fromStringValue(socket->queryString().values("hc_tags"), hc_tags);
    }
    


    emit comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC( post,  apply,  _delete,  action,  location,  propertylist,  hc_tags);
}


void OAIConfigmgrApiRequest::comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.repository.hc.impl.AuthorizableNodeNameHealthCheck";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck, handler, &OAIConfigmgrApiHandler::comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> hc_tags;   
    if(socket->queryString().keys().contains("hc_tags")){
        fromStringValue(socket->queryString().values("hc_tags"), hc_tags);
    }
    


    emit comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck( post,  apply,  _delete,  action,  location,  propertylist,  hc_tags);
}


void OAIConfigmgrApiRequest::comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.repository.hc.impl.content.sling.SlingContentHealthCheck";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC, handler, &OAIConfigmgrApiHandler::comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> hc_tags;   
    if(socket->queryString().keys().contains("hc_tags")){
        fromStringValue(socket->queryString().values("hc_tags"), hc_tags);
    }
    
    QList<QString> exclude_search_path;   
    if(socket->queryString().keys().contains("exclude_search_path")){
        fromStringValue(socket->queryString().values("exclude_search_path"), exclude_search_path);
    }
    


    emit comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC( post,  apply,  _delete,  action,  location,  propertylist,  hc_tags,  exclude_search_path);
}


void OAIConfigmgrApiRequest::comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.repository.hc.impl.ContinuousRGCHealthCheck";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck, handler, &OAIConfigmgrApiHandler::comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> hc_tags;   
    if(socket->queryString().keys().contains("hc_tags")){
        fromStringValue(socket->queryString().values("hc_tags"), hc_tags);
    }
    


    emit comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck( post,  apply,  _delete,  action,  location,  propertylist,  hc_tags);
}


void OAIConfigmgrApiRequest::comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultAccessUserProfileHealthCheck";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe, handler, &OAIConfigmgrApiHandler::comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> hc_tags;   
    if(socket->queryString().keys().contains("hc_tags")){
        fromStringValue(socket->queryString().values("hc_tags"), hc_tags);
    }
    


    emit comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe( post,  apply,  _delete,  action,  location,  propertylist,  hc_tags);
}


void OAIConfigmgrApiRequest::comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultLoginsHealthCheck";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck, handler, &OAIConfigmgrApiHandler::comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> hc_tags;   
    if(socket->queryString().keys().contains("hc_tags")){
        fromStringValue(socket->queryString().values("hc_tags"), hc_tags);
    }
    
    QList<QString> account_logins;   
    if(socket->queryString().keys().contains("account_logins")){
        fromStringValue(socket->queryString().values("account_logins"), account_logins);
    }
    
    QList<QString> console_logins;   
    if(socket->queryString().keys().contains("console_logins")){
        fromStringValue(socket->queryString().values("console_logins"), console_logins);
    }
    


    emit comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck( post,  apply,  _delete,  action,  location,  propertylist,  hc_tags,  account_logins,  console_logins);
}


void OAIConfigmgrApiRequest::comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.repository.hc.impl.DiskSpaceHealthCheck";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck, handler, &OAIConfigmgrApiHandler::comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> hc_tags;   
    if(socket->queryString().keys().contains("hc_tags")){
        fromStringValue(socket->queryString().values("hc_tags"), hc_tags);
    }
    
    qint32 disk_space_warn_threshold;   
    if(socket->queryString().keys().contains("disk_space_warn_threshold")){
        fromStringValue(socket->queryString().value("disk_space_warn_threshold"), disk_space_warn_threshold);
    }
    
    qint32 disk_space_error_threshold;   
    if(socket->queryString().keys().contains("disk_space_error_threshold")){
        fromStringValue(socket->queryString().value("disk_space_error_threshold"), disk_space_error_threshold);
    }
    


    emit comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck( post,  apply,  _delete,  action,  location,  propertylist,  hc_tags,  disk_space_warn_threshold,  disk_space_error_threshold);
}


void OAIConfigmgrApiRequest::comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.repository.hc.impl.ObservationQueueLengthHealthCheck";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck, handler, &OAIConfigmgrApiHandler::comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> hc_tags;   
    if(socket->queryString().keys().contains("hc_tags")){
        fromStringValue(socket->queryString().values("hc_tags"), hc_tags);
    }
    


    emit comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck( post,  apply,  _delete,  action,  location,  propertylist,  hc_tags);
}


void OAIConfigmgrApiRequest::comAdobeGraniteRepositoryImplCommitStatsConfigRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.repository.impl.CommitStatsConfig";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteRepositoryImplCommitStatsConfig, handler, &OAIConfigmgrApiHandler::comAdobeGraniteRepositoryImplCommitStatsConfig);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool enabled;   
    if(socket->queryString().keys().contains("enabled")){
        fromStringValue(socket->queryString().value("enabled"), enabled);
    }
    
    qint32 interval_seconds;   
    if(socket->queryString().keys().contains("interval_seconds")){
        fromStringValue(socket->queryString().value("interval_seconds"), interval_seconds);
    }
    
    qint32 commits_per_interval_threshold;   
    if(socket->queryString().keys().contains("commits_per_interval_threshold")){
        fromStringValue(socket->queryString().value("commits_per_interval_threshold"), commits_per_interval_threshold);
    }
    
    qint32 max_location_length;   
    if(socket->queryString().keys().contains("max_location_length")){
        fromStringValue(socket->queryString().value("max_location_length"), max_location_length);
    }
    
    qint32 max_details_shown;   
    if(socket->queryString().keys().contains("max_details_shown")){
        fromStringValue(socket->queryString().value("max_details_shown"), max_details_shown);
    }
    
    qint32 min_details_percentage;   
    if(socket->queryString().keys().contains("min_details_percentage")){
        fromStringValue(socket->queryString().value("min_details_percentage"), min_details_percentage);
    }
    
    QList<QString> thread_matchers;   
    if(socket->queryString().keys().contains("thread_matchers")){
        fromStringValue(socket->queryString().values("thread_matchers"), thread_matchers);
    }
    
    qint32 max_greedy_depth;   
    if(socket->queryString().keys().contains("max_greedy_depth")){
        fromStringValue(socket->queryString().value("max_greedy_depth"), max_greedy_depth);
    }
    
    QString greedy_stack_matchers;   
    if(socket->queryString().keys().contains("greedy_stack_matchers")){
        fromStringValue(socket->queryString().value("greedy_stack_matchers"), greedy_stack_matchers);
    }
    
    QList<QString> stack_filters;   
    if(socket->queryString().keys().contains("stack_filters")){
        fromStringValue(socket->queryString().values("stack_filters"), stack_filters);
    }
    
    QList<QString> stack_matchers;   
    if(socket->queryString().keys().contains("stack_matchers")){
        fromStringValue(socket->queryString().values("stack_matchers"), stack_matchers);
    }
    
    QList<QString> stack_categorizers;   
    if(socket->queryString().keys().contains("stack_categorizers")){
        fromStringValue(socket->queryString().values("stack_categorizers"), stack_categorizers);
    }
    
    QList<QString> stack_shorteners;   
    if(socket->queryString().keys().contains("stack_shorteners")){
        fromStringValue(socket->queryString().values("stack_shorteners"), stack_shorteners);
    }
    


    emit comAdobeGraniteRepositoryImplCommitStatsConfig( post,  apply,  _delete,  action,  location,  propertylist,  enabled,  interval_seconds,  commits_per_interval_threshold,  max_location_length,  max_details_shown,  min_details_percentage,  thread_matchers,  max_greedy_depth,  greedy_stack_matchers,  stack_filters,  stack_matchers,  stack_categorizers,  stack_shorteners);
}


void OAIConfigmgrApiRequest::comAdobeGraniteRepositoryServiceUserConfigurationRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.repository.ServiceUserConfiguration";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteRepositoryServiceUserConfiguration, handler, &OAIConfigmgrApiHandler::comAdobeGraniteRepositoryServiceUserConfiguration);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 service_ranking;   
    if(socket->queryString().keys().contains("service_ranking")){
        fromStringValue(socket->queryString().value("service_ranking"), service_ranking);
    }
    
    bool serviceusers_simple_subject_population;   
    if(socket->queryString().keys().contains("serviceusers_simple_subject_population")){
        fromStringValue(socket->queryString().value("serviceusers_simple_subject_population"), serviceusers_simple_subject_population);
    }
    
    QList<QString> serviceusers_list;   
    if(socket->queryString().keys().contains("serviceusers_list")){
        fromStringValue(socket->queryString().values("serviceusers_list"), serviceusers_list);
    }
    


    emit comAdobeGraniteRepositoryServiceUserConfiguration( post,  apply,  _delete,  action,  location,  propertylist,  service_ranking,  serviceusers_simple_subject_population,  serviceusers_list);
}


void OAIConfigmgrApiRequest::comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.requests.logging.impl.hc.RequestsStatusHealthCheckImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm, handler, &OAIConfigmgrApiHandler::comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> hc_tags;   
    if(socket->queryString().keys().contains("hc_tags")){
        fromStringValue(socket->queryString().values("hc_tags"), hc_tags);
    }
    


    emit comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm( post,  apply,  _delete,  action,  location,  propertylist,  hc_tags);
}


void OAIConfigmgrApiRequest::comAdobeGraniteResourcestatusImplCompositeStatusTypeRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.resourcestatus.impl.CompositeStatusType";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteResourcestatusImplCompositeStatusType, handler, &OAIConfigmgrApiHandler::comAdobeGraniteResourcestatusImplCompositeStatusType);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString name;   
    if(socket->queryString().keys().contains("name")){
        fromStringValue(socket->queryString().value("name"), name);
    }
    
    QList<QString> types;   
    if(socket->queryString().keys().contains("types")){
        fromStringValue(socket->queryString().values("types"), types);
    }
    


    emit comAdobeGraniteResourcestatusImplCompositeStatusType( post,  apply,  _delete,  action,  location,  propertylist,  name,  types);
}


void OAIConfigmgrApiRequest::comAdobeGraniteResourcestatusImplStatusResourceProviderImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.resourcestatus.impl.StatusResourceProviderImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteResourcestatusImplStatusResourceProviderImpl, handler, &OAIConfigmgrApiHandler::comAdobeGraniteResourcestatusImplStatusResourceProviderImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString provider_root;   
    if(socket->queryString().keys().contains("provider_root")){
        fromStringValue(socket->queryString().value("provider_root"), provider_root);
    }
    


    emit comAdobeGraniteResourcestatusImplStatusResourceProviderImpl( post,  apply,  _delete,  action,  location,  propertylist,  provider_root);
}


void OAIConfigmgrApiRequest::comAdobeGraniteRestAssetsImplAssetContentDispositionFilterRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.rest.assets.impl.AssetContentDispositionFilter";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteRestAssetsImplAssetContentDispositionFilter, handler, &OAIConfigmgrApiHandler::comAdobeGraniteRestAssetsImplAssetContentDispositionFilter);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool mime_allow_empty;   
    if(socket->queryString().keys().contains("mime_allow_empty")){
        fromStringValue(socket->queryString().value("mime_allow_empty"), mime_allow_empty);
    }
    
    QList<QString> mime_allowed;   
    if(socket->queryString().keys().contains("mime_allowed")){
        fromStringValue(socket->queryString().values("mime_allowed"), mime_allowed);
    }
    


    emit comAdobeGraniteRestAssetsImplAssetContentDispositionFilter( post,  apply,  _delete,  action,  location,  propertylist,  mime_allow_empty,  mime_allowed);
}


void OAIConfigmgrApiRequest::comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.rest.impl.ApiEndpointResourceProviderFactoryImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl, handler, &OAIConfigmgrApiHandler::comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString provider_roots;   
    if(socket->queryString().keys().contains("provider_roots")){
        fromStringValue(socket->queryString().value("provider_roots"), provider_roots);
    }
    


    emit comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl( post,  apply,  _delete,  action,  location,  propertylist,  provider_roots);
}


void OAIConfigmgrApiRequest::comAdobeGraniteRestImplServletDefaultGETServletRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.rest.impl.servlet.DefaultGETServlet";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteRestImplServletDefaultGETServlet, handler, &OAIConfigmgrApiHandler::comAdobeGraniteRestImplServletDefaultGETServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 default_limit;   
    if(socket->queryString().keys().contains("default_limit")){
        fromStringValue(socket->queryString().value("default_limit"), default_limit);
    }
    
    bool use_absolute_uri;   
    if(socket->queryString().keys().contains("use_absolute_uri")){
        fromStringValue(socket->queryString().value("use_absolute_uri"), use_absolute_uri);
    }
    


    emit comAdobeGraniteRestImplServletDefaultGETServlet( post,  apply,  _delete,  action,  location,  propertylist,  default_limit,  use_absolute_uri);
}


void OAIConfigmgrApiRequest::comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.security.user.ui.internal.servlets.SSLConfigurationServlet";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS, handler, &OAIConfigmgrApiHandler::comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> hc_tags;   
    if(socket->queryString().keys().contains("hc_tags")){
        fromStringValue(socket->queryString().values("hc_tags"), hc_tags);
    }
    


    emit comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS( post,  apply,  _delete,  action,  location,  propertylist,  hc_tags);
}


void OAIConfigmgrApiRequest::comAdobeGraniteSecurityUserUserPropertiesServiceRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.security.user.UserPropertiesService";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteSecurityUserUserPropertiesService, handler, &OAIConfigmgrApiHandler::comAdobeGraniteSecurityUserUserPropertiesService);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString adapter_condition;   
    if(socket->queryString().keys().contains("adapter_condition")){
        fromStringValue(socket->queryString().value("adapter_condition"), adapter_condition);
    }
    
    QList<QString> granite_userproperties_nodetypes;   
    if(socket->queryString().keys().contains("granite_userproperties_nodetypes")){
        fromStringValue(socket->queryString().values("granite_userproperties_nodetypes"), granite_userproperties_nodetypes);
    }
    
    QList<QString> granite_userproperties_resourcetypes;   
    if(socket->queryString().keys().contains("granite_userproperties_resourcetypes")){
        fromStringValue(socket->queryString().values("granite_userproperties_resourcetypes"), granite_userproperties_resourcetypes);
    }
    


    emit comAdobeGraniteSecurityUserUserPropertiesService( post,  apply,  _delete,  action,  location,  propertylist,  adapter_condition,  granite_userproperties_nodetypes,  granite_userproperties_resourcetypes);
}


void OAIConfigmgrApiRequest::comAdobeGraniteSocialgraphImplSocialGraphFactoryImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.socialgraph.impl.SocialGraphFactoryImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteSocialgraphImplSocialGraphFactoryImpl, handler, &OAIConfigmgrApiHandler::comAdobeGraniteSocialgraphImplSocialGraphFactoryImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString group2member_relationship_outgoing;   
    if(socket->queryString().keys().contains("group2member_relationship_outgoing")){
        fromStringValue(socket->queryString().value("group2member_relationship_outgoing"), group2member_relationship_outgoing);
    }
    
    QList<QString> group2member_excluded_outgoing;   
    if(socket->queryString().keys().contains("group2member_excluded_outgoing")){
        fromStringValue(socket->queryString().values("group2member_excluded_outgoing"), group2member_excluded_outgoing);
    }
    
    QString group2member_relationship_incoming;   
    if(socket->queryString().keys().contains("group2member_relationship_incoming")){
        fromStringValue(socket->queryString().value("group2member_relationship_incoming"), group2member_relationship_incoming);
    }
    
    QList<QString> group2member_excluded_incoming;   
    if(socket->queryString().keys().contains("group2member_excluded_incoming")){
        fromStringValue(socket->queryString().values("group2member_excluded_incoming"), group2member_excluded_incoming);
    }
    


    emit comAdobeGraniteSocialgraphImplSocialGraphFactoryImpl( post,  apply,  _delete,  action,  location,  propertylist,  group2member_relationship_outgoing,  group2member_excluded_outgoing,  group2member_relationship_incoming,  group2member_excluded_incoming);
}


void OAIConfigmgrApiRequest::comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.system.monitoring.impl.SystemStatsMBeanImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl, handler, &OAIConfigmgrApiHandler::comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString scheduler_expression;   
    if(socket->queryString().keys().contains("scheduler_expression")){
        fromStringValue(socket->queryString().value("scheduler_expression"), scheduler_expression);
    }
    
    QString jmx_objectname;   
    if(socket->queryString().keys().contains("jmx_objectname")){
        fromStringValue(socket->queryString().value("jmx_objectname"), jmx_objectname);
    }
    


    emit comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl( post,  apply,  _delete,  action,  location,  propertylist,  scheduler_expression,  jmx_objectname);
}


void OAIConfigmgrApiRequest::comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskAdapterFactory";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory, handler, &OAIConfigmgrApiHandler::comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString adapter_condition;   
    if(socket->queryString().keys().contains("adapter_condition")){
        fromStringValue(socket->queryString().value("adapter_condition"), adapter_condition);
    }
    


    emit comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory( post,  apply,  _delete,  action,  location,  propertylist,  adapter_condition);
}


void OAIConfigmgrApiRequest::comAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskArchiveService";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteTaskmanagementImplJcrTaskArchiveService, handler, &OAIConfigmgrApiHandler::comAdobeGraniteTaskmanagementImplJcrTaskArchiveService);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool archiving_enabled;   
    if(socket->queryString().keys().contains("archiving_enabled")){
        fromStringValue(socket->queryString().value("archiving_enabled"), archiving_enabled);
    }
    
    QString scheduler_expression;   
    if(socket->queryString().keys().contains("scheduler_expression")){
        fromStringValue(socket->queryString().value("scheduler_expression"), scheduler_expression);
    }
    
    qint32 archive_since_days_completed;   
    if(socket->queryString().keys().contains("archive_since_days_completed")){
        fromStringValue(socket->queryString().value("archive_since_days_completed"), archive_since_days_completed);
    }
    


    emit comAdobeGraniteTaskmanagementImplJcrTaskArchiveService( post,  apply,  _delete,  action,  location,  propertylist,  archiving_enabled,  scheduler_expression,  archive_since_days_completed);
}


void OAIConfigmgrApiRequest::comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.taskmanagement.impl.purge.TaskPurgeMaintenanceTask";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask, handler, &OAIConfigmgrApiHandler::comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool purge_completed;   
    if(socket->queryString().keys().contains("purge_completed")){
        fromStringValue(socket->queryString().value("purge_completed"), purge_completed);
    }
    
    qint32 completed_age;   
    if(socket->queryString().keys().contains("completed_age")){
        fromStringValue(socket->queryString().value("completed_age"), completed_age);
    }
    
    bool purge_active;   
    if(socket->queryString().keys().contains("purge_active")){
        fromStringValue(socket->queryString().value("purge_active"), purge_active);
    }
    
    qint32 active_age;   
    if(socket->queryString().keys().contains("active_age")){
        fromStringValue(socket->queryString().value("active_age"), active_age);
    }
    
    qint32 save_threshold;   
    if(socket->queryString().keys().contains("save_threshold")){
        fromStringValue(socket->queryString().value("save_threshold"), save_threshold);
    }
    


    emit comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask( post,  apply,  _delete,  action,  location,  propertylist,  purge_completed,  completed_age,  purge_active,  active_age,  save_threshold);
}


void OAIConfigmgrApiRequest::comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.taskmanagement.impl.service.TaskManagerAdapterFactory";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor, handler, &OAIConfigmgrApiHandler::comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString adapter_condition;   
    if(socket->queryString().keys().contains("adapter_condition")){
        fromStringValue(socket->queryString().value("adapter_condition"), adapter_condition);
    }
    
    QList<QString> taskmanager_admingroups;   
    if(socket->queryString().keys().contains("taskmanager_admingroups")){
        fromStringValue(socket->queryString().values("taskmanager_admingroups"), taskmanager_admingroups);
    }
    


    emit comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor( post,  apply,  _delete,  action,  location,  propertylist,  adapter_condition,  taskmanager_admingroups);
}


void OAIConfigmgrApiRequest::comAdobeGraniteThreaddumpThreadDumpCollectorRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.threaddump.ThreadDumpCollector";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteThreaddumpThreadDumpCollector, handler, &OAIConfigmgrApiHandler::comAdobeGraniteThreaddumpThreadDumpCollector);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 scheduler_period;   
    if(socket->queryString().keys().contains("scheduler_period")){
        fromStringValue(socket->queryString().value("scheduler_period"), scheduler_period);
    }
    
    QString scheduler_run_on;   
    if(socket->queryString().keys().contains("scheduler_run_on")){
        fromStringValue(socket->queryString().value("scheduler_run_on"), scheduler_run_on);
    }
    
    bool granite_threaddump_enabled;   
    if(socket->queryString().keys().contains("granite_threaddump_enabled")){
        fromStringValue(socket->queryString().value("granite_threaddump_enabled"), granite_threaddump_enabled);
    }
    
    qint32 granite_threaddump_dumps_per_file;   
    if(socket->queryString().keys().contains("granite_threaddump_dumps_per_file")){
        fromStringValue(socket->queryString().value("granite_threaddump_dumps_per_file"), granite_threaddump_dumps_per_file);
    }
    
    bool granite_threaddump_enable_gzip_compression;   
    if(socket->queryString().keys().contains("granite_threaddump_enable_gzip_compression")){
        fromStringValue(socket->queryString().value("granite_threaddump_enable_gzip_compression"), granite_threaddump_enable_gzip_compression);
    }
    
    bool granite_threaddump_enable_directories_compression;   
    if(socket->queryString().keys().contains("granite_threaddump_enable_directories_compression")){
        fromStringValue(socket->queryString().value("granite_threaddump_enable_directories_compression"), granite_threaddump_enable_directories_compression);
    }
    
    bool granite_threaddump_enable_j_stack;   
    if(socket->queryString().keys().contains("granite_threaddump_enable_j_stack")){
        fromStringValue(socket->queryString().value("granite_threaddump_enable_j_stack"), granite_threaddump_enable_j_stack);
    }
    
    qint32 granite_threaddump_max_backup_days;   
    if(socket->queryString().keys().contains("granite_threaddump_max_backup_days")){
        fromStringValue(socket->queryString().value("granite_threaddump_max_backup_days"), granite_threaddump_max_backup_days);
    }
    
    QString granite_threaddump_backup_clean_trigger;   
    if(socket->queryString().keys().contains("granite_threaddump_backup_clean_trigger")){
        fromStringValue(socket->queryString().value("granite_threaddump_backup_clean_trigger"), granite_threaddump_backup_clean_trigger);
    }
    


    emit comAdobeGraniteThreaddumpThreadDumpCollector( post,  apply,  _delete,  action,  location,  propertylist,  scheduler_period,  scheduler_run_on,  granite_threaddump_enabled,  granite_threaddump_dumps_per_file,  granite_threaddump_enable_gzip_compression,  granite_threaddump_enable_directories_compression,  granite_threaddump_enable_j_stack,  granite_threaddump_max_backup_days,  granite_threaddump_backup_clean_trigger);
}


void OAIConfigmgrApiRequest::comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.translation.connector.msft.core.impl.MicrosoftTranslationServiceFactoryImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl, handler, &OAIConfigmgrApiHandler::comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString translation_factory;   
    if(socket->queryString().keys().contains("translation_factory")){
        fromStringValue(socket->queryString().value("translation_factory"), translation_factory);
    }
    
    QString default_connector_label;   
    if(socket->queryString().keys().contains("default_connector_label")){
        fromStringValue(socket->queryString().value("default_connector_label"), default_connector_label);
    }
    
    QString default_connector_attribution;   
    if(socket->queryString().keys().contains("default_connector_attribution")){
        fromStringValue(socket->queryString().value("default_connector_attribution"), default_connector_attribution);
    }
    
    QString default_connector_workspace_id;   
    if(socket->queryString().keys().contains("default_connector_workspace_id")){
        fromStringValue(socket->queryString().value("default_connector_workspace_id"), default_connector_workspace_id);
    }
    
    QString default_connector_subscription_key;   
    if(socket->queryString().keys().contains("default_connector_subscription_key")){
        fromStringValue(socket->queryString().value("default_connector_subscription_key"), default_connector_subscription_key);
    }
    
    QString language_map_location;   
    if(socket->queryString().keys().contains("language_map_location")){
        fromStringValue(socket->queryString().value("language_map_location"), language_map_location);
    }
    
    QString category_map_location;   
    if(socket->queryString().keys().contains("category_map_location")){
        fromStringValue(socket->queryString().value("category_map_location"), category_map_location);
    }
    
    qint32 retry_attempts;   
    if(socket->queryString().keys().contains("retry_attempts")){
        fromStringValue(socket->queryString().value("retry_attempts"), retry_attempts);
    }
    
    qint32 timeout_count;   
    if(socket->queryString().keys().contains("timeout_count")){
        fromStringValue(socket->queryString().value("timeout_count"), timeout_count);
    }
    


    emit comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl( post,  apply,  _delete,  action,  location,  propertylist,  translation_factory,  default_connector_label,  default_connector_attribution,  default_connector_workspace_id,  default_connector_subscription_key,  language_map_location,  category_map_location,  retry_attempts,  timeout_count);
}


void OAIConfigmgrApiRequest::comAdobeGraniteTranslationCoreImplTranslationManagerImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.translation.core.impl.TranslationManagerImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteTranslationCoreImplTranslationManagerImpl, handler, &OAIConfigmgrApiHandler::comAdobeGraniteTranslationCoreImplTranslationManagerImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString default_connector_name;   
    if(socket->queryString().keys().contains("default_connector_name")){
        fromStringValue(socket->queryString().value("default_connector_name"), default_connector_name);
    }
    
    QString default_category;   
    if(socket->queryString().keys().contains("default_category")){
        fromStringValue(socket->queryString().value("default_category"), default_category);
    }
    


    emit comAdobeGraniteTranslationCoreImplTranslationManagerImpl( post,  apply,  _delete,  action,  location,  propertylist,  default_connector_name,  default_category);
}


void OAIConfigmgrApiRequest::comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.ui.clientlibs.impl.HtmlLibraryManagerImpl";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl, handler, &OAIConfigmgrApiHandler::comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool htmllibmanager_timing;   
    if(socket->queryString().keys().contains("htmllibmanager_timing")){
        fromStringValue(socket->queryString().value("htmllibmanager_timing"), htmllibmanager_timing);
    }
    
    QString htmllibmanager_debug_init_js;   
    if(socket->queryString().keys().contains("htmllibmanager_debug_init_js")){
        fromStringValue(socket->queryString().value("htmllibmanager_debug_init_js"), htmllibmanager_debug_init_js);
    }
    
    bool htmllibmanager_minify;   
    if(socket->queryString().keys().contains("htmllibmanager_minify")){
        fromStringValue(socket->queryString().value("htmllibmanager_minify"), htmllibmanager_minify);
    }
    
    bool htmllibmanager_debug;   
    if(socket->queryString().keys().contains("htmllibmanager_debug")){
        fromStringValue(socket->queryString().value("htmllibmanager_debug"), htmllibmanager_debug);
    }
    
    bool htmllibmanager_gzip;   
    if(socket->queryString().keys().contains("htmllibmanager_gzip")){
        fromStringValue(socket->queryString().value("htmllibmanager_gzip"), htmllibmanager_gzip);
    }
    
    qint32 htmllibmanager_max_data_uri_size;   
    if(socket->queryString().keys().contains("htmllibmanager_max_data_uri_size")){
        fromStringValue(socket->queryString().value("htmllibmanager_max_data_uri_size"), htmllibmanager_max_data_uri_size);
    }
    
    qint32 htmllibmanager_maxage;   
    if(socket->queryString().keys().contains("htmllibmanager_maxage")){
        fromStringValue(socket->queryString().value("htmllibmanager_maxage"), htmllibmanager_maxage);
    }
    
    bool htmllibmanager_force_cq_url_info;   
    if(socket->queryString().keys().contains("htmllibmanager_force_cq_url_info")){
        fromStringValue(socket->queryString().value("htmllibmanager_force_cq_url_info"), htmllibmanager_force_cq_url_info);
    }
    
    QString htmllibmanager_defaultthemename;   
    if(socket->queryString().keys().contains("htmllibmanager_defaultthemename")){
        fromStringValue(socket->queryString().value("htmllibmanager_defaultthemename"), htmllibmanager_defaultthemename);
    }
    
    QString htmllibmanager_defaultuserthemename;   
    if(socket->queryString().keys().contains("htmllibmanager_defaultuserthemename")){
        fromStringValue(socket->queryString().value("htmllibmanager_defaultuserthemename"), htmllibmanager_defaultuserthemename);
    }
    
    QString htmllibmanager_clientmanager;   
    if(socket->queryString().keys().contains("htmllibmanager_clientmanager")){
        fromStringValue(socket->queryString().value("htmllibmanager_clientmanager"), htmllibmanager_clientmanager);
    }
    
    QList<QString> htmllibmanager_path_list;   
    if(socket->queryString().keys().contains("htmllibmanager_path_list")){
        fromStringValue(socket->queryString().values("htmllibmanager_path_list"), htmllibmanager_path_list);
    }
    
    QList<QString> htmllibmanager_excluded_path_list;   
    if(socket->queryString().keys().contains("htmllibmanager_excluded_path_list")){
        fromStringValue(socket->queryString().values("htmllibmanager_excluded_path_list"), htmllibmanager_excluded_path_list);
    }
    
    QList<QString> htmllibmanager_processor_js;   
    if(socket->queryString().keys().contains("htmllibmanager_processor_js")){
        fromStringValue(socket->queryString().values("htmllibmanager_processor_js"), htmllibmanager_processor_js);
    }
    
    QList<QString> htmllibmanager_processor_css;   
    if(socket->queryString().keys().contains("htmllibmanager_processor_css")){
        fromStringValue(socket->queryString().values("htmllibmanager_processor_css"), htmllibmanager_processor_css);
    }
    
    QList<QString> htmllibmanager_longcache_patterns;   
    if(socket->queryString().keys().contains("htmllibmanager_longcache_patterns")){
        fromStringValue(socket->queryString().values("htmllibmanager_longcache_patterns"), htmllibmanager_longcache_patterns);
    }
    
    QString htmllibmanager_longcache_format;   
    if(socket->queryString().keys().contains("htmllibmanager_longcache_format")){
        fromStringValue(socket->queryString().value("htmllibmanager_longcache_format"), htmllibmanager_longcache_format);
    }
    
    bool htmllibmanager_use_file_system_output_cache;   
    if(socket->queryString().keys().contains("htmllibmanager_use_file_system_output_cache")){
        fromStringValue(socket->queryString().value("htmllibmanager_use_file_system_output_cache"), htmllibmanager_use_file_system_output_cache);
    }
    
    QString htmllibmanager_file_system_output_cache_location;   
    if(socket->queryString().keys().contains("htmllibmanager_file_system_output_cache_location")){
        fromStringValue(socket->queryString().value("htmllibmanager_file_system_output_cache_location"), htmllibmanager_file_system_output_cache_location);
    }
    
    QList<QString> htmllibmanager_disable_replacement;   
    if(socket->queryString().keys().contains("htmllibmanager_disable_replacement")){
        fromStringValue(socket->queryString().values("htmllibmanager_disable_replacement"), htmllibmanager_disable_replacement);
    }
    


    emit comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl( post,  apply,  _delete,  action,  location,  propertylist,  htmllibmanager_timing,  htmllibmanager_debug_init_js,  htmllibmanager_minify,  htmllibmanager_debug,  htmllibmanager_gzip,  htmllibmanager_max_data_uri_size,  htmllibmanager_maxage,  htmllibmanager_force_cq_url_info,  htmllibmanager_defaultthemename,  htmllibmanager_defaultuserthemename,  htmllibmanager_clientmanager,  htmllibmanager_path_list,  htmllibmanager_excluded_path_list,  htmllibmanager_processor_js,  htmllibmanager_processor_css,  htmllibmanager_longcache_patterns,  htmllibmanager_longcache_format,  htmllibmanager_use_file_system_output_cache,  htmllibmanager_file_system_output_cache_location,  htmllibmanager_disable_replacement);
}


void OAIConfigmgrApiRequest::comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.workflow.console.frags.WorkflowWithdrawFeature";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature, handler, &OAIConfigmgrApiHandler::comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool enabled;   
    if(socket->queryString().keys().contains("enabled")){
        fromStringValue(socket->queryString().value("enabled"), enabled);
    }
    


    emit comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature( post,  apply,  _delete,  action,  location,  propertylist,  enabled);
}


void OAIConfigmgrApiRequest::comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.workflow.console.publish.WorkflowPublishEventService";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService, handler, &OAIConfigmgrApiHandler::comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool granite_workflow_workflow_publish_event_service_enabled;   
    if(socket->queryString().keys().contains("granite_workflow_workflow_publish_event_service_enabled")){
        fromStringValue(socket->queryString().value("granite_workflow_workflow_publish_event_service_enabled"), granite_workflow_workflow_publish_event_service_enabled);
    }
    


    emit comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService( post,  apply,  _delete,  action,  location,  propertylist,  granite_workflow_workflow_publish_event_service_enabled);
}


void OAIConfigmgrApiRequest::comAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.workflow.core.jcr.WorkflowBucketManager";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteWorkflowCoreJcrWorkflowBucketManager, handler, &OAIConfigmgrApiHandler::comAdobeGraniteWorkflowCoreJcrWorkflowBucketManager);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 bucket_size;   
    if(socket->queryString().keys().contains("bucket_size")){
        fromStringValue(socket->queryString().value("bucket_size"), bucket_size);
    }
    


    emit comAdobeGraniteWorkflowCoreJcrWorkflowBucketManager( post,  apply,  _delete,  action,  location,  propertylist,  bucket_size);
}


void OAIConfigmgrApiRequest::comAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.workflow.core.job.ExternalProcessJobHandler";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteWorkflowCoreJobExternalProcessJobHandler, handler, &OAIConfigmgrApiHandler::comAdobeGraniteWorkflowCoreJobExternalProcessJobHandler);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 default_timeout;   
    if(socket->queryString().keys().contains("default_timeout")){
        fromStringValue(socket->queryString().value("default_timeout"), default_timeout);
    }
    
    qint32 max_timeout;   
    if(socket->queryString().keys().contains("max_timeout")){
        fromStringValue(socket->queryString().value("max_timeout"), max_timeout);
    }
    
    qint32 default_period;   
    if(socket->queryString().keys().contains("default_period")){
        fromStringValue(socket->queryString().value("default_period"), default_period);
    }
    


    emit comAdobeGraniteWorkflowCoreJobExternalProcessJobHandler( post,  apply,  _delete,  action,  location,  propertylist,  default_timeout,  max_timeout,  default_period);
}


void OAIConfigmgrApiRequest::comAdobeGraniteWorkflowCoreJobJobHandlerRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.workflow.core.job.JobHandler";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteWorkflowCoreJobJobHandler, handler, &OAIConfigmgrApiHandler::comAdobeGraniteWorkflowCoreJobJobHandler);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> job_topics;   
    if(socket->queryString().keys().contains("job_topics")){
        fromStringValue(socket->queryString().values("job_topics"), job_topics);
    }
    
    bool allow_self_process_termination;   
    if(socket->queryString().keys().contains("allow_self_process_termination")){
        fromStringValue(socket->queryString().value("allow_self_process_termination"), allow_self_process_termination);
    }
    


    emit comAdobeGraniteWorkflowCoreJobJobHandler( post,  apply,  _delete,  action,  location,  propertylist,  job_topics,  allow_self_process_termination);
}


void OAIConfigmgrApiRequest::comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.workflow.core.offloading.WorkflowOffloadingJobConsumer";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum, handler, &OAIConfigmgrApiHandler::comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString job_topics;   
    if(socket->queryString().keys().contains("job_topics")){
        fromStringValue(socket->queryString().value("job_topics"), job_topics);
    }
    


    emit comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum( post,  apply,  _delete,  action,  location,  propertylist,  job_topics);
}


void OAIConfigmgrApiRequest::comAdobeGraniteWorkflowCorePayloadMapCacheRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.workflow.core.PayloadMapCache";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteWorkflowCorePayloadMapCache, handler, &OAIConfigmgrApiHandler::comAdobeGraniteWorkflowCorePayloadMapCache);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> get_system_workflow_models;   
    if(socket->queryString().keys().contains("get_system_workflow_models")){
        fromStringValue(socket->queryString().values("get_system_workflow_models"), get_system_workflow_models);
    }
    
    QString get_package_root_path;   
    if(socket->queryString().keys().contains("get_package_root_path")){
        fromStringValue(socket->queryString().value("get_package_root_path"), get_package_root_path);
    }
    


    emit comAdobeGraniteWorkflowCorePayloadMapCache( post,  apply,  _delete,  action,  location,  propertylist,  get_system_workflow_models,  get_package_root_path);
}


void OAIConfigmgrApiRequest::comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.workflow.core.payloadmap.PayloadMoveListener";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener, handler, &OAIConfigmgrApiHandler::comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> payload_move_white_list;   
    if(socket->queryString().keys().contains("payload_move_white_list")){
        fromStringValue(socket->queryString().values("payload_move_white_list"), payload_move_white_list);
    }
    
    bool payload_move_handle_from_workflow_process;   
    if(socket->queryString().keys().contains("payload_move_handle_from_workflow_process")){
        fromStringValue(socket->queryString().value("payload_move_handle_from_workflow_process"), payload_move_handle_from_workflow_process);
    }
    


    emit comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener( post,  apply,  _delete,  action,  location,  propertylist,  payload_move_white_list,  payload_move_handle_from_workflow_process);
}


void OAIConfigmgrApiRequest::comAdobeGraniteWorkflowCoreWorkflowConfigRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.workflow.core.WorkflowConfig";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteWorkflowCoreWorkflowConfig, handler, &OAIConfigmgrApiHandler::comAdobeGraniteWorkflowCoreWorkflowConfig);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> cq_workflow_config_workflow_packages_root_path;   
    if(socket->queryString().keys().contains("cq_workflow_config_workflow_packages_root_path")){
        fromStringValue(socket->queryString().values("cq_workflow_config_workflow_packages_root_path"), cq_workflow_config_workflow_packages_root_path);
    }
    
    bool cq_workflow_config_workflow_process_legacy_mode;   
    if(socket->queryString().keys().contains("cq_workflow_config_workflow_process_legacy_mode")){
        fromStringValue(socket->queryString().value("cq_workflow_config_workflow_process_legacy_mode"), cq_workflow_config_workflow_process_legacy_mode);
    }
    
    bool cq_workflow_config_allow_locking;   
    if(socket->queryString().keys().contains("cq_workflow_config_allow_locking")){
        fromStringValue(socket->queryString().value("cq_workflow_config_allow_locking"), cq_workflow_config_allow_locking);
    }
    


    emit comAdobeGraniteWorkflowCoreWorkflowConfig( post,  apply,  _delete,  action,  location,  propertylist,  cq_workflow_config_workflow_packages_root_path,  cq_workflow_config_workflow_process_legacy_mode,  cq_workflow_config_allow_locking);
}


void OAIConfigmgrApiRequest::comAdobeGraniteWorkflowCoreWorkflowSessionFactoryRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.workflow.core.WorkflowSessionFactory";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteWorkflowCoreWorkflowSessionFactory, handler, &OAIConfigmgrApiHandler::comAdobeGraniteWorkflowCoreWorkflowSessionFactory);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString granite_workflowinbox_sort_property_name;   
    if(socket->queryString().keys().contains("granite_workflowinbox_sort_property_name")){
        fromStringValue(socket->queryString().value("granite_workflowinbox_sort_property_name"), granite_workflowinbox_sort_property_name);
    }
    
    QString granite_workflowinbox_sort_order;   
    if(socket->queryString().keys().contains("granite_workflowinbox_sort_order")){
        fromStringValue(socket->queryString().value("granite_workflowinbox_sort_order"), granite_workflowinbox_sort_order);
    }
    
    qint32 cq_workflow_job_retry;   
    if(socket->queryString().keys().contains("cq_workflow_job_retry")){
        fromStringValue(socket->queryString().value("cq_workflow_job_retry"), cq_workflow_job_retry);
    }
    
    QList<QString> cq_workflow_superuser;   
    if(socket->queryString().keys().contains("cq_workflow_superuser")){
        fromStringValue(socket->queryString().values("cq_workflow_superuser"), cq_workflow_superuser);
    }
    
    qint32 granite_workflow_inbox_query_size;   
    if(socket->queryString().keys().contains("granite_workflow_inbox_query_size")){
        fromStringValue(socket->queryString().value("granite_workflow_inbox_query_size"), granite_workflow_inbox_query_size);
    }
    
    bool granite_workflow_admin_user_group_filter;   
    if(socket->queryString().keys().contains("granite_workflow_admin_user_group_filter")){
        fromStringValue(socket->queryString().value("granite_workflow_admin_user_group_filter"), granite_workflow_admin_user_group_filter);
    }
    
    bool granite_workflow_enforce_workitem_assignee_permissions;   
    if(socket->queryString().keys().contains("granite_workflow_enforce_workitem_assignee_permissions")){
        fromStringValue(socket->queryString().value("granite_workflow_enforce_workitem_assignee_permissions"), granite_workflow_enforce_workitem_assignee_permissions);
    }
    
    bool granite_workflow_enforce_workflow_initiator_permissions;   
    if(socket->queryString().keys().contains("granite_workflow_enforce_workflow_initiator_permissions")){
        fromStringValue(socket->queryString().value("granite_workflow_enforce_workflow_initiator_permissions"), granite_workflow_enforce_workflow_initiator_permissions);
    }
    
    bool granite_workflow_inject_tenant_id_in_job_topics;   
    if(socket->queryString().keys().contains("granite_workflow_inject_tenant_id_in_job_topics")){
        fromStringValue(socket->queryString().value("granite_workflow_inject_tenant_id_in_job_topics"), granite_workflow_inject_tenant_id_in_job_topics);
    }
    
    qint32 granite_workflow_max_purge_save_threshold;   
    if(socket->queryString().keys().contains("granite_workflow_max_purge_save_threshold")){
        fromStringValue(socket->queryString().value("granite_workflow_max_purge_save_threshold"), granite_workflow_max_purge_save_threshold);
    }
    
    qint32 granite_workflow_max_purge_query_count;   
    if(socket->queryString().keys().contains("granite_workflow_max_purge_query_count")){
        fromStringValue(socket->queryString().value("granite_workflow_max_purge_query_count"), granite_workflow_max_purge_query_count);
    }
    


    emit comAdobeGraniteWorkflowCoreWorkflowSessionFactory( post,  apply,  _delete,  action,  location,  propertylist,  granite_workflowinbox_sort_property_name,  granite_workflowinbox_sort_order,  cq_workflow_job_retry,  cq_workflow_superuser,  granite_workflow_inbox_query_size,  granite_workflow_admin_user_group_filter,  granite_workflow_enforce_workitem_assignee_permissions,  granite_workflow_enforce_workflow_initiator_permissions,  granite_workflow_inject_tenant_id_in_job_topics,  granite_workflow_max_purge_save_threshold,  granite_workflow_max_purge_query_count);
}


void OAIConfigmgrApiRequest::comAdobeGraniteWorkflowPurgeSchedulerRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.granite.workflow.purge.Scheduler";
    connect(this, &OAIConfigmgrApiRequest::comAdobeGraniteWorkflowPurgeScheduler, handler, &OAIConfigmgrApiHandler::comAdobeGraniteWorkflowPurgeScheduler);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString scheduledpurge_name;   
    if(socket->queryString().keys().contains("scheduledpurge_name")){
        fromStringValue(socket->queryString().value("scheduledpurge_name"), scheduledpurge_name);
    }
    
    QString scheduledpurge_workflow_status;   
    if(socket->queryString().keys().contains("scheduledpurge_workflow_status")){
        fromStringValue(socket->queryString().value("scheduledpurge_workflow_status"), scheduledpurge_workflow_status);
    }
    
    QList<QString> scheduledpurge_model_ids;   
    if(socket->queryString().keys().contains("scheduledpurge_model_ids")){
        fromStringValue(socket->queryString().values("scheduledpurge_model_ids"), scheduledpurge_model_ids);
    }
    
    qint32 scheduledpurge_daysold;   
    if(socket->queryString().keys().contains("scheduledpurge_daysold")){
        fromStringValue(socket->queryString().value("scheduledpurge_daysold"), scheduledpurge_daysold);
    }
    


    emit comAdobeGraniteWorkflowPurgeScheduler( post,  apply,  _delete,  action,  location,  propertylist,  scheduledpurge_name,  scheduledpurge_workflow_status,  scheduledpurge_model_ids,  scheduledpurge_daysold);
}


void OAIConfigmgrApiRequest::comAdobeOctopusNcommBootstrapRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.octopus.ncomm.bootstrap";
    connect(this, &OAIConfigmgrApiRequest::comAdobeOctopusNcommBootstrap, handler, &OAIConfigmgrApiHandler::comAdobeOctopusNcommBootstrap);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 max_connections;   
    if(socket->queryString().keys().contains("max_connections")){
        fromStringValue(socket->queryString().value("max_connections"), max_connections);
    }
    
    qint32 max_requests;   
    if(socket->queryString().keys().contains("max_requests")){
        fromStringValue(socket->queryString().value("max_requests"), max_requests);
    }
    
    qint32 request_timeout;   
    if(socket->queryString().keys().contains("request_timeout")){
        fromStringValue(socket->queryString().value("request_timeout"), request_timeout);
    }
    
    qint32 request_retries;   
    if(socket->queryString().keys().contains("request_retries")){
        fromStringValue(socket->queryString().value("request_retries"), request_retries);
    }
    
    qint32 launch_timeout;   
    if(socket->queryString().keys().contains("launch_timeout")){
        fromStringValue(socket->queryString().value("launch_timeout"), launch_timeout);
    }
    


    emit comAdobeOctopusNcommBootstrap( post,  apply,  _delete,  action,  location,  propertylist,  max_connections,  max_requests,  request_timeout,  request_retries,  launch_timeout);
}


void OAIConfigmgrApiRequest::comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.social.integrations.livefyre.user.pingforpull.impl.PingPullServlet";
    connect(this, &OAIConfigmgrApiRequest::comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS, handler, &OAIConfigmgrApiHandler::comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString communities_integration_livefyre_sling_event_filter;   
    if(socket->queryString().keys().contains("communities_integration_livefyre_sling_event_filter")){
        fromStringValue(socket->queryString().value("communities_integration_livefyre_sling_event_filter"), communities_integration_livefyre_sling_event_filter);
    }
    


    emit comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS( post,  apply,  _delete,  action,  location,  propertylist,  communities_integration_livefyre_sling_event_filter);
}


void OAIConfigmgrApiRequest::comAdobeXmpWorkerFilesNcommXMPFilesNCommRequest(){
    qDebug() << "//system/console/configMgr/com.adobe.xmp.worker.files.ncomm.XMPFilesNComm";
    connect(this, &OAIConfigmgrApiRequest::comAdobeXmpWorkerFilesNcommXMPFilesNComm, handler, &OAIConfigmgrApiHandler::comAdobeXmpWorkerFilesNcommXMPFilesNComm);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString max_connections;   
    if(socket->queryString().keys().contains("max_connections")){
        fromStringValue(socket->queryString().value("max_connections"), max_connections);
    }
    
    QString max_requests;   
    if(socket->queryString().keys().contains("max_requests")){
        fromStringValue(socket->queryString().value("max_requests"), max_requests);
    }
    
    QString request_timeout;   
    if(socket->queryString().keys().contains("request_timeout")){
        fromStringValue(socket->queryString().value("request_timeout"), request_timeout);
    }
    
    QString log_dir;   
    if(socket->queryString().keys().contains("log_dir")){
        fromStringValue(socket->queryString().value("log_dir"), log_dir);
    }
    


    emit comAdobeXmpWorkerFilesNcommXMPFilesNComm( post,  apply,  _delete,  action,  location,  propertylist,  max_connections,  max_requests,  request_timeout,  log_dir);
}


void OAIConfigmgrApiRequest::comDayCommonsDatasourceJdbcpoolJdbcPoolServiceRequest(){
    qDebug() << "//system/console/configMgr/com.day.commons.datasource.jdbcpool.JdbcPoolService";
    connect(this, &OAIConfigmgrApiRequest::comDayCommonsDatasourceJdbcpoolJdbcPoolService, handler, &OAIConfigmgrApiHandler::comDayCommonsDatasourceJdbcpoolJdbcPoolService);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString jdbc_driver_class;   
    if(socket->queryString().keys().contains("jdbc_driver_class")){
        fromStringValue(socket->queryString().value("jdbc_driver_class"), jdbc_driver_class);
    }
    
    QString jdbc_connection_uri;   
    if(socket->queryString().keys().contains("jdbc_connection_uri")){
        fromStringValue(socket->queryString().value("jdbc_connection_uri"), jdbc_connection_uri);
    }
    
    QString jdbc_username;   
    if(socket->queryString().keys().contains("jdbc_username")){
        fromStringValue(socket->queryString().value("jdbc_username"), jdbc_username);
    }
    
    QString jdbc_password;   
    if(socket->queryString().keys().contains("jdbc_password")){
        fromStringValue(socket->queryString().value("jdbc_password"), jdbc_password);
    }
    
    QString jdbc_validation_query;   
    if(socket->queryString().keys().contains("jdbc_validation_query")){
        fromStringValue(socket->queryString().value("jdbc_validation_query"), jdbc_validation_query);
    }
    
    bool default_readonly;   
    if(socket->queryString().keys().contains("default_readonly")){
        fromStringValue(socket->queryString().value("default_readonly"), default_readonly);
    }
    
    bool default_autocommit;   
    if(socket->queryString().keys().contains("default_autocommit")){
        fromStringValue(socket->queryString().value("default_autocommit"), default_autocommit);
    }
    
    qint32 pool_size;   
    if(socket->queryString().keys().contains("pool_size")){
        fromStringValue(socket->queryString().value("pool_size"), pool_size);
    }
    
    qint32 pool_max_wait_msec;   
    if(socket->queryString().keys().contains("pool_max_wait_msec")){
        fromStringValue(socket->queryString().value("pool_max_wait_msec"), pool_max_wait_msec);
    }
    
    QString datasource_name;   
    if(socket->queryString().keys().contains("datasource_name")){
        fromStringValue(socket->queryString().value("datasource_name"), datasource_name);
    }
    
    QList<QString> datasource_svc_properties;   
    if(socket->queryString().keys().contains("datasource_svc_properties")){
        fromStringValue(socket->queryString().values("datasource_svc_properties"), datasource_svc_properties);
    }
    


    emit comDayCommonsDatasourceJdbcpoolJdbcPoolService( post,  apply,  _delete,  action,  location,  propertylist,  jdbc_driver_class,  jdbc_connection_uri,  jdbc_username,  jdbc_password,  jdbc_validation_query,  default_readonly,  default_autocommit,  pool_size,  pool_max_wait_msec,  datasource_name,  datasource_svc_properties);
}


void OAIConfigmgrApiRequest::comDayCommonsHttpclientRequest(){
    qDebug() << "//system/console/configMgr/com.day.commons.httpclient";
    connect(this, &OAIConfigmgrApiRequest::comDayCommonsHttpclient, handler, &OAIConfigmgrApiHandler::comDayCommonsHttpclient);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool proxy_enabled;   
    if(socket->queryString().keys().contains("proxy_enabled")){
        fromStringValue(socket->queryString().value("proxy_enabled"), proxy_enabled);
    }
    
    QString proxy_host;   
    if(socket->queryString().keys().contains("proxy_host")){
        fromStringValue(socket->queryString().value("proxy_host"), proxy_host);
    }
    
    QString proxy_user;   
    if(socket->queryString().keys().contains("proxy_user")){
        fromStringValue(socket->queryString().value("proxy_user"), proxy_user);
    }
    
    QString proxy_password;   
    if(socket->queryString().keys().contains("proxy_password")){
        fromStringValue(socket->queryString().value("proxy_password"), proxy_password);
    }
    
    QString proxy_ntlm_host;   
    if(socket->queryString().keys().contains("proxy_ntlm_host")){
        fromStringValue(socket->queryString().value("proxy_ntlm_host"), proxy_ntlm_host);
    }
    
    QString proxy_ntlm_domain;   
    if(socket->queryString().keys().contains("proxy_ntlm_domain")){
        fromStringValue(socket->queryString().value("proxy_ntlm_domain"), proxy_ntlm_domain);
    }
    
    QList<QString> proxy_exceptions;   
    if(socket->queryString().keys().contains("proxy_exceptions")){
        fromStringValue(socket->queryString().values("proxy_exceptions"), proxy_exceptions);
    }
    


    emit comDayCommonsHttpclient( post,  apply,  _delete,  action,  location,  propertylist,  proxy_enabled,  proxy_host,  proxy_user,  proxy_password,  proxy_ntlm_host,  proxy_ntlm_domain,  proxy_exceptions);
}


void OAIConfigmgrApiRequest::comDayCqAnalyticsImplStorePropertiesChangeListenerRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.analytics.impl.StorePropertiesChangeListener";
    connect(this, &OAIConfigmgrApiRequest::comDayCqAnalyticsImplStorePropertiesChangeListener, handler, &OAIConfigmgrApiHandler::comDayCqAnalyticsImplStorePropertiesChangeListener);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> cq_store_listener_additional_store_paths;   
    if(socket->queryString().keys().contains("cq_store_listener_additional_store_paths")){
        fromStringValue(socket->queryString().values("cq_store_listener_additional_store_paths"), cq_store_listener_additional_store_paths);
    }
    


    emit comDayCqAnalyticsImplStorePropertiesChangeListener( post,  apply,  _delete,  action,  location,  propertylist,  cq_store_listener_additional_store_paths);
}


void OAIConfigmgrApiRequest::comDayCqAnalyticsSitecatalystImplExporterClassificationsExporteRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.exporter.ClassificationsExporter";
    connect(this, &OAIConfigmgrApiRequest::comDayCqAnalyticsSitecatalystImplExporterClassificationsExporte, handler, &OAIConfigmgrApiHandler::comDayCqAnalyticsSitecatalystImplExporterClassificationsExporte);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> allowed_paths;   
    if(socket->queryString().keys().contains("allowed_paths")){
        fromStringValue(socket->queryString().values("allowed_paths"), allowed_paths);
    }
    
    qint32 cq_analytics_saint_exporter_pagesize;   
    if(socket->queryString().keys().contains("cq_analytics_saint_exporter_pagesize")){
        fromStringValue(socket->queryString().value("cq_analytics_saint_exporter_pagesize"), cq_analytics_saint_exporter_pagesize);
    }
    


    emit comDayCqAnalyticsSitecatalystImplExporterClassificationsExporte( post,  apply,  _delete,  action,  location,  propertylist,  allowed_paths,  cq_analytics_saint_exporter_pagesize);
}


void OAIConfigmgrApiRequest::comDayCqAnalyticsSitecatalystImplImporterReportImporterRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.importer.ReportImporter";
    connect(this, &OAIConfigmgrApiRequest::comDayCqAnalyticsSitecatalystImplImporterReportImporter, handler, &OAIConfigmgrApiHandler::comDayCqAnalyticsSitecatalystImplImporterReportImporter);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 report_fetch_attempts;   
    if(socket->queryString().keys().contains("report_fetch_attempts")){
        fromStringValue(socket->queryString().value("report_fetch_attempts"), report_fetch_attempts);
    }
    
    qint32 report_fetch_delay;   
    if(socket->queryString().keys().contains("report_fetch_delay")){
        fromStringValue(socket->queryString().value("report_fetch_delay"), report_fetch_delay);
    }
    


    emit comDayCqAnalyticsSitecatalystImplImporterReportImporter( post,  apply,  _delete,  action,  location,  propertylist,  report_fetch_attempts,  report_fetch_delay);
}


void OAIConfigmgrApiRequest::comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystAdapterFactory";
    connect(this, &OAIConfigmgrApiRequest::comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory, handler, &OAIConfigmgrApiHandler::comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> cq_analytics_adapterfactory_contextstores;   
    if(socket->queryString().keys().contains("cq_analytics_adapterfactory_contextstores")){
        fromStringValue(socket->queryString().values("cq_analytics_adapterfactory_contextstores"), cq_analytics_adapterfactory_contextstores);
    }
    


    emit comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory( post,  apply,  _delete,  action,  location,  propertylist,  cq_analytics_adapterfactory_contextstores);
}


void OAIConfigmgrApiRequest::comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystHttpClientImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl, handler, &OAIConfigmgrApiHandler::comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> cq_analytics_sitecatalyst_service_datacenter_url;   
    if(socket->queryString().keys().contains("cq_analytics_sitecatalyst_service_datacenter_url")){
        fromStringValue(socket->queryString().values("cq_analytics_sitecatalyst_service_datacenter_url"), cq_analytics_sitecatalyst_service_datacenter_url);
    }
    
    QList<QString> devhostnamepatterns;   
    if(socket->queryString().keys().contains("devhostnamepatterns")){
        fromStringValue(socket->queryString().values("devhostnamepatterns"), devhostnamepatterns);
    }
    
    qint32 connection_timeout;   
    if(socket->queryString().keys().contains("connection_timeout")){
        fromStringValue(socket->queryString().value("connection_timeout"), connection_timeout);
    }
    
    qint32 socket_timeout;   
    if(socket->queryString().keys().contains("socket_timeout")){
        fromStringValue(socket->queryString().value("socket_timeout"), socket_timeout);
    }
    


    emit comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl( post,  apply,  _delete,  action,  location,  propertylist,  cq_analytics_sitecatalyst_service_datacenter_url,  devhostnamepatterns,  connection_timeout,  socket_timeout);
}


void OAIConfigmgrApiRequest::comDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.analytics.testandtarget.impl.AccountOptionsUpdater";
    connect(this, &OAIConfigmgrApiRequest::comDayCqAnalyticsTestandtargetImplAccountOptionsUpdater, handler, &OAIConfigmgrApiHandler::comDayCqAnalyticsTestandtargetImplAccountOptionsUpdater);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool cq_analytics_testandtarget_accountoptionsupdater_enabled;   
    if(socket->queryString().keys().contains("cq_analytics_testandtarget_accountoptionsupdater_enabled")){
        fromStringValue(socket->queryString().value("cq_analytics_testandtarget_accountoptionsupdater_enabled"), cq_analytics_testandtarget_accountoptionsupdater_enabled);
    }
    


    emit comDayCqAnalyticsTestandtargetImplAccountOptionsUpdater( post,  apply,  _delete,  action,  location,  propertylist,  cq_analytics_testandtarget_accountoptionsupdater_enabled);
}


void OAIConfigmgrApiRequest::comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.analytics.testandtarget.impl.DeleteAuthorActivityListener";
    connect(this, &OAIConfigmgrApiRequest::comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener, handler, &OAIConfigmgrApiHandler::comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool cq_analytics_testandtarget_deleteauthoractivitylistener_enabled;   
    if(socket->queryString().keys().contains("cq_analytics_testandtarget_deleteauthoractivitylistener_enabled")){
        fromStringValue(socket->queryString().value("cq_analytics_testandtarget_deleteauthoractivitylistener_enabled"), cq_analytics_testandtarget_deleteauthoractivitylistener_enabled);
    }
    


    emit comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener( post,  apply,  _delete,  action,  location,  propertylist,  cq_analytics_testandtarget_deleteauthoractivitylistener_enabled);
}


void OAIConfigmgrApiRequest::comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.analytics.testandtarget.impl.PushAuthorCampaignPageListener";
    connect(this, &OAIConfigmgrApiRequest::comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener, handler, &OAIConfigmgrApiHandler::comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool cq_analytics_testandtarget_pushauthorcampaignpagelistener_enabled;   
    if(socket->queryString().keys().contains("cq_analytics_testandtarget_pushauthorcampaignpagelistener_enabled")){
        fromStringValue(socket->queryString().value("cq_analytics_testandtarget_pushauthorcampaignpagelistener_enabled"), cq_analytics_testandtarget_pushauthorcampaignpagelistener_enabled);
    }
    


    emit comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener( post,  apply,  _delete,  action,  location,  propertylist,  cq_analytics_testandtarget_pushauthorcampaignpagelistener_enabled);
}


void OAIConfigmgrApiRequest::comDayCqAnalyticsTestandtargetImplSegmentImporterRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.analytics.testandtarget.impl.SegmentImporter";
    connect(this, &OAIConfigmgrApiRequest::comDayCqAnalyticsTestandtargetImplSegmentImporter, handler, &OAIConfigmgrApiHandler::comDayCqAnalyticsTestandtargetImplSegmentImporter);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool cq_analytics_testandtarget_segmentimporter_enabled;   
    if(socket->queryString().keys().contains("cq_analytics_testandtarget_segmentimporter_enabled")){
        fromStringValue(socket->queryString().value("cq_analytics_testandtarget_segmentimporter_enabled"), cq_analytics_testandtarget_segmentimporter_enabled);
    }
    


    emit comDayCqAnalyticsTestandtargetImplSegmentImporter( post,  apply,  _delete,  action,  location,  propertylist,  cq_analytics_testandtarget_segmentimporter_enabled);
}


void OAIConfigmgrApiRequest::comDayCqAnalyticsTestandtargetImplServiceWebServiceImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.analytics.testandtarget.impl.service.WebServiceImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqAnalyticsTestandtargetImplServiceWebServiceImpl, handler, &OAIConfigmgrApiHandler::comDayCqAnalyticsTestandtargetImplServiceWebServiceImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString endpoint_uri;   
    if(socket->queryString().keys().contains("endpoint_uri")){
        fromStringValue(socket->queryString().value("endpoint_uri"), endpoint_uri);
    }
    
    qint32 connection_timeout;   
    if(socket->queryString().keys().contains("connection_timeout")){
        fromStringValue(socket->queryString().value("connection_timeout"), connection_timeout);
    }
    
    qint32 socket_timeout;   
    if(socket->queryString().keys().contains("socket_timeout")){
        fromStringValue(socket->queryString().value("socket_timeout"), socket_timeout);
    }
    


    emit comDayCqAnalyticsTestandtargetImplServiceWebServiceImpl( post,  apply,  _delete,  action,  location,  propertylist,  endpoint_uri,  connection_timeout,  socket_timeout);
}


void OAIConfigmgrApiRequest::comDayCqAnalyticsTestandtargetImplServletsAdminServerServletRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.analytics.testandtarget.impl.servlets.AdminServerServlet";
    connect(this, &OAIConfigmgrApiRequest::comDayCqAnalyticsTestandtargetImplServletsAdminServerServlet, handler, &OAIConfigmgrApiHandler::comDayCqAnalyticsTestandtargetImplServletsAdminServerServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString testandtarget_endpoint_url;   
    if(socket->queryString().keys().contains("testandtarget_endpoint_url")){
        fromStringValue(socket->queryString().value("testandtarget_endpoint_url"), testandtarget_endpoint_url);
    }
    


    emit comDayCqAnalyticsTestandtargetImplServletsAdminServerServlet( post,  apply,  _delete,  action,  location,  propertylist,  testandtarget_endpoint_url);
}


void OAIConfigmgrApiRequest::comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.analytics.testandtarget.impl.TestandtargetHttpClientImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl, handler, &OAIConfigmgrApiHandler::comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString cq_analytics_testandtarget_api_url;   
    if(socket->queryString().keys().contains("cq_analytics_testandtarget_api_url")){
        fromStringValue(socket->queryString().value("cq_analytics_testandtarget_api_url"), cq_analytics_testandtarget_api_url);
    }
    
    qint32 cq_analytics_testandtarget_timeout;   
    if(socket->queryString().keys().contains("cq_analytics_testandtarget_timeout")){
        fromStringValue(socket->queryString().value("cq_analytics_testandtarget_timeout"), cq_analytics_testandtarget_timeout);
    }
    
    qint32 cq_analytics_testandtarget_sockettimeout;   
    if(socket->queryString().keys().contains("cq_analytics_testandtarget_sockettimeout")){
        fromStringValue(socket->queryString().value("cq_analytics_testandtarget_sockettimeout"), cq_analytics_testandtarget_sockettimeout);
    }
    
    QString cq_analytics_testandtarget_recommendations_url_replace;   
    if(socket->queryString().keys().contains("cq_analytics_testandtarget_recommendations_url_replace")){
        fromStringValue(socket->queryString().value("cq_analytics_testandtarget_recommendations_url_replace"), cq_analytics_testandtarget_recommendations_url_replace);
    }
    
    QString cq_analytics_testandtarget_recommendations_url_replacewith;   
    if(socket->queryString().keys().contains("cq_analytics_testandtarget_recommendations_url_replacewith")){
        fromStringValue(socket->queryString().value("cq_analytics_testandtarget_recommendations_url_replacewith"), cq_analytics_testandtarget_recommendations_url_replacewith);
    }
    


    emit comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl( post,  apply,  _delete,  action,  location,  propertylist,  cq_analytics_testandtarget_api_url,  cq_analytics_testandtarget_timeout,  cq_analytics_testandtarget_sockettimeout,  cq_analytics_testandtarget_recommendations_url_replace,  cq_analytics_testandtarget_recommendations_url_replacewith);
}


void OAIConfigmgrApiRequest::comDayCqAuthImplCugCugSupportImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.auth.impl.cug.CugSupportImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqAuthImplCugCugSupportImpl, handler, &OAIConfigmgrApiHandler::comDayCqAuthImplCugCugSupportImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> cug_exempted_principals;   
    if(socket->queryString().keys().contains("cug_exempted_principals")){
        fromStringValue(socket->queryString().values("cug_exempted_principals"), cug_exempted_principals);
    }
    
    bool cug_enabled;   
    if(socket->queryString().keys().contains("cug_enabled")){
        fromStringValue(socket->queryString().value("cug_enabled"), cug_enabled);
    }
    
    QString cug_principals_regex;   
    if(socket->queryString().keys().contains("cug_principals_regex")){
        fromStringValue(socket->queryString().value("cug_principals_regex"), cug_principals_regex);
    }
    
    QString cug_principals_replacement;   
    if(socket->queryString().keys().contains("cug_principals_replacement")){
        fromStringValue(socket->queryString().value("cug_principals_replacement"), cug_principals_replacement);
    }
    


    emit comDayCqAuthImplCugCugSupportImpl( post,  apply,  _delete,  action,  location,  propertylist,  cug_exempted_principals,  cug_enabled,  cug_principals_regex,  cug_principals_replacement);
}


void OAIConfigmgrApiRequest::comDayCqAuthImplLoginSelectorHandlerRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.auth.impl.LoginSelectorHandler";
    connect(this, &OAIConfigmgrApiRequest::comDayCqAuthImplLoginSelectorHandler, handler, &OAIConfigmgrApiHandler::comDayCqAuthImplLoginSelectorHandler);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString path;   
    if(socket->queryString().keys().contains("path")){
        fromStringValue(socket->queryString().value("path"), path);
    }
    
    qint32 service_ranking;   
    if(socket->queryString().keys().contains("service_ranking")){
        fromStringValue(socket->queryString().value("service_ranking"), service_ranking);
    }
    
    QList<QString> auth_loginselector_mappings;   
    if(socket->queryString().keys().contains("auth_loginselector_mappings")){
        fromStringValue(socket->queryString().values("auth_loginselector_mappings"), auth_loginselector_mappings);
    }
    
    QList<QString> auth_loginselector_changepw_mappings;   
    if(socket->queryString().keys().contains("auth_loginselector_changepw_mappings")){
        fromStringValue(socket->queryString().values("auth_loginselector_changepw_mappings"), auth_loginselector_changepw_mappings);
    }
    
    QString auth_loginselector_defaultloginpage;   
    if(socket->queryString().keys().contains("auth_loginselector_defaultloginpage")){
        fromStringValue(socket->queryString().value("auth_loginselector_defaultloginpage"), auth_loginselector_defaultloginpage);
    }
    
    QString auth_loginselector_defaultchangepwpage;   
    if(socket->queryString().keys().contains("auth_loginselector_defaultchangepwpage")){
        fromStringValue(socket->queryString().value("auth_loginselector_defaultchangepwpage"), auth_loginselector_defaultchangepwpage);
    }
    
    QList<QString> auth_loginselector_handle;   
    if(socket->queryString().keys().contains("auth_loginselector_handle")){
        fromStringValue(socket->queryString().values("auth_loginselector_handle"), auth_loginselector_handle);
    }
    
    bool auth_loginselector_handle_all_extensions;   
    if(socket->queryString().keys().contains("auth_loginselector_handle_all_extensions")){
        fromStringValue(socket->queryString().value("auth_loginselector_handle_all_extensions"), auth_loginselector_handle_all_extensions);
    }
    


    emit comDayCqAuthImplLoginSelectorHandler( post,  apply,  _delete,  action,  location,  propertylist,  path,  service_ranking,  auth_loginselector_mappings,  auth_loginselector_changepw_mappings,  auth_loginselector_defaultloginpage,  auth_loginselector_defaultchangepwpage,  auth_loginselector_handle,  auth_loginselector_handle_all_extensions);
}


void OAIConfigmgrApiRequest::comDayCqCommonsImplExternalizerImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.commons.impl.ExternalizerImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqCommonsImplExternalizerImpl, handler, &OAIConfigmgrApiHandler::comDayCqCommonsImplExternalizerImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> externalizer_domains;   
    if(socket->queryString().keys().contains("externalizer_domains")){
        fromStringValue(socket->queryString().values("externalizer_domains"), externalizer_domains);
    }
    
    QString externalizer_host;   
    if(socket->queryString().keys().contains("externalizer_host")){
        fromStringValue(socket->queryString().value("externalizer_host"), externalizer_host);
    }
    
    QString externalizer_contextpath;   
    if(socket->queryString().keys().contains("externalizer_contextpath")){
        fromStringValue(socket->queryString().value("externalizer_contextpath"), externalizer_contextpath);
    }
    
    bool externalizer_encodedpath;   
    if(socket->queryString().keys().contains("externalizer_encodedpath")){
        fromStringValue(socket->queryString().value("externalizer_encodedpath"), externalizer_encodedpath);
    }
    


    emit comDayCqCommonsImplExternalizerImpl( post,  apply,  _delete,  action,  location,  propertylist,  externalizer_domains,  externalizer_host,  externalizer_contextpath,  externalizer_encodedpath);
}


void OAIConfigmgrApiRequest::comDayCqCommonsServletsRootMappingServletRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.commons.servlets.RootMappingServlet";
    connect(this, &OAIConfigmgrApiRequest::comDayCqCommonsServletsRootMappingServlet, handler, &OAIConfigmgrApiHandler::comDayCqCommonsServletsRootMappingServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString rootmapping_target;   
    if(socket->queryString().keys().contains("rootmapping_target")){
        fromStringValue(socket->queryString().value("rootmapping_target"), rootmapping_target);
    }
    


    emit comDayCqCommonsServletsRootMappingServlet( post,  apply,  _delete,  action,  location,  propertylist,  rootmapping_target);
}


void OAIConfigmgrApiRequest::comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.compat.codeupgrade.impl.CodeUpgradeExecutionConditionChecker";
    connect(this, &OAIConfigmgrApiRequest::comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke, handler, &OAIConfigmgrApiHandler::comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> codeupgradetasks;   
    if(socket->queryString().keys().contains("codeupgradetasks")){
        fromStringValue(socket->queryString().values("codeupgradetasks"), codeupgradetasks);
    }
    
    QList<QString> codeupgradetaskfilters;   
    if(socket->queryString().keys().contains("codeupgradetaskfilters")){
        fromStringValue(socket->queryString().values("codeupgradetaskfilters"), codeupgradetaskfilters);
    }
    


    emit comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke( post,  apply,  _delete,  action,  location,  propertylist,  codeupgradetasks,  codeupgradetaskfilters);
}


void OAIConfigmgrApiRequest::comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.compat.codeupgrade.impl.UpgradeTaskIgnoreList";
    connect(this, &OAIConfigmgrApiRequest::comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList, handler, &OAIConfigmgrApiHandler::comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> upgrade_task_ignore_list;   
    if(socket->queryString().keys().contains("upgrade_task_ignore_list")){
        fromStringValue(socket->queryString().values("upgrade_task_ignore_list"), upgrade_task_ignore_list);
    }
    


    emit comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList( post,  apply,  _delete,  action,  location,  propertylist,  upgrade_task_ignore_list);
}


void OAIConfigmgrApiRequest::comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.compat.codeupgrade.impl.VersionRangeTaskIgnorelist";
    connect(this, &OAIConfigmgrApiRequest::comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist, handler, &OAIConfigmgrApiHandler::comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString effective_bundle_list_path;   
    if(socket->queryString().keys().contains("effective_bundle_list_path")){
        fromStringValue(socket->queryString().value("effective_bundle_list_path"), effective_bundle_list_path);
    }
    


    emit comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist( post,  apply,  _delete,  action,  location,  propertylist,  effective_bundle_list_path);
}


void OAIConfigmgrApiRequest::comDayCqContentsyncImplContentSyncManagerImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.contentsync.impl.ContentSyncManagerImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqContentsyncImplContentSyncManagerImpl, handler, &OAIConfigmgrApiHandler::comDayCqContentsyncImplContentSyncManagerImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString contentsync_fallback_authorizable;   
    if(socket->queryString().keys().contains("contentsync_fallback_authorizable")){
        fromStringValue(socket->queryString().value("contentsync_fallback_authorizable"), contentsync_fallback_authorizable);
    }
    
    QString contentsync_fallback_updateuser;   
    if(socket->queryString().keys().contains("contentsync_fallback_updateuser")){
        fromStringValue(socket->queryString().value("contentsync_fallback_updateuser"), contentsync_fallback_updateuser);
    }
    


    emit comDayCqContentsyncImplContentSyncManagerImpl( post,  apply,  _delete,  action,  location,  propertylist,  contentsync_fallback_authorizable,  contentsync_fallback_updateuser);
}


void OAIConfigmgrApiRequest::comDayCqDamCommonsHandlerStandardImageHandlerRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.commons.handler.StandardImageHandler";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCommonsHandlerStandardImageHandler, handler, &OAIConfigmgrApiHandler::comDayCqDamCommonsHandlerStandardImageHandler);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 large_file_threshold;   
    if(socket->queryString().keys().contains("large_file_threshold")){
        fromStringValue(socket->queryString().value("large_file_threshold"), large_file_threshold);
    }
    
    qint32 large_comment_threshold;   
    if(socket->queryString().keys().contains("large_comment_threshold")){
        fromStringValue(socket->queryString().value("large_comment_threshold"), large_comment_threshold);
    }
    
    bool cq_dam_enable_ext_meta_extraction;   
    if(socket->queryString().keys().contains("cq_dam_enable_ext_meta_extraction")){
        fromStringValue(socket->queryString().value("cq_dam_enable_ext_meta_extraction"), cq_dam_enable_ext_meta_extraction);
    }
    


    emit comDayCqDamCommonsHandlerStandardImageHandler( post,  apply,  _delete,  action,  location,  propertylist,  large_file_threshold,  large_comment_threshold,  cq_dam_enable_ext_meta_extraction);
}


void OAIConfigmgrApiRequest::comDayCqDamCommonsMetadataXmpFilterBlackWhiteRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.commons.metadata.XmpFilterBlackWhite";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCommonsMetadataXmpFilterBlackWhite, handler, &OAIConfigmgrApiHandler::comDayCqDamCommonsMetadataXmpFilterBlackWhite);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool xmp_filter_apply_whitelist;   
    if(socket->queryString().keys().contains("xmp_filter_apply_whitelist")){
        fromStringValue(socket->queryString().value("xmp_filter_apply_whitelist"), xmp_filter_apply_whitelist);
    }
    
    QList<QString> xmp_filter_whitelist;   
    if(socket->queryString().keys().contains("xmp_filter_whitelist")){
        fromStringValue(socket->queryString().values("xmp_filter_whitelist"), xmp_filter_whitelist);
    }
    
    bool xmp_filter_apply_blacklist;   
    if(socket->queryString().keys().contains("xmp_filter_apply_blacklist")){
        fromStringValue(socket->queryString().value("xmp_filter_apply_blacklist"), xmp_filter_apply_blacklist);
    }
    
    QList<QString> xmp_filter_blacklist;   
    if(socket->queryString().keys().contains("xmp_filter_blacklist")){
        fromStringValue(socket->queryString().values("xmp_filter_blacklist"), xmp_filter_blacklist);
    }
    


    emit comDayCqDamCommonsMetadataXmpFilterBlackWhite( post,  apply,  _delete,  action,  location,  propertylist,  xmp_filter_apply_whitelist,  xmp_filter_whitelist,  xmp_filter_apply_blacklist,  xmp_filter_blacklist);
}


void OAIConfigmgrApiRequest::comDayCqDamCommonsUtilImplAssetCacheImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.commons.util.impl.AssetCacheImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCommonsUtilImplAssetCacheImpl, handler, &OAIConfigmgrApiHandler::comDayCqDamCommonsUtilImplAssetCacheImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 large_file_min;   
    if(socket->queryString().keys().contains("large_file_min")){
        fromStringValue(socket->queryString().value("large_file_min"), large_file_min);
    }
    
    bool cache_apply;   
    if(socket->queryString().keys().contains("cache_apply")){
        fromStringValue(socket->queryString().value("cache_apply"), cache_apply);
    }
    
    QList<QString> mime_types;   
    if(socket->queryString().keys().contains("mime_types")){
        fromStringValue(socket->queryString().values("mime_types"), mime_types);
    }
    


    emit comDayCqDamCommonsUtilImplAssetCacheImpl( post,  apply,  _delete,  action,  location,  propertylist,  large_file_min,  cache_apply,  mime_types);
}


void OAIConfigmgrApiRequest::comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.core.impl.annotation.pdf.AnnotationPdfConfig";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig, handler, &OAIConfigmgrApiHandler::comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 cq_dam_config_annotation_pdf_document_width;   
    if(socket->queryString().keys().contains("cq_dam_config_annotation_pdf_document_width")){
        fromStringValue(socket->queryString().value("cq_dam_config_annotation_pdf_document_width"), cq_dam_config_annotation_pdf_document_width);
    }
    
    qint32 cq_dam_config_annotation_pdf_document_height;   
    if(socket->queryString().keys().contains("cq_dam_config_annotation_pdf_document_height")){
        fromStringValue(socket->queryString().value("cq_dam_config_annotation_pdf_document_height"), cq_dam_config_annotation_pdf_document_height);
    }
    
    qint32 cq_dam_config_annotation_pdf_document_padding_horizontal;   
    if(socket->queryString().keys().contains("cq_dam_config_annotation_pdf_document_padding_horizontal")){
        fromStringValue(socket->queryString().value("cq_dam_config_annotation_pdf_document_padding_horizontal"), cq_dam_config_annotation_pdf_document_padding_horizontal);
    }
    
    qint32 cq_dam_config_annotation_pdf_document_padding_vertical;   
    if(socket->queryString().keys().contains("cq_dam_config_annotation_pdf_document_padding_vertical")){
        fromStringValue(socket->queryString().value("cq_dam_config_annotation_pdf_document_padding_vertical"), cq_dam_config_annotation_pdf_document_padding_vertical);
    }
    
    qint32 cq_dam_config_annotation_pdf_font_size;   
    if(socket->queryString().keys().contains("cq_dam_config_annotation_pdf_font_size")){
        fromStringValue(socket->queryString().value("cq_dam_config_annotation_pdf_font_size"), cq_dam_config_annotation_pdf_font_size);
    }
    
    QString cq_dam_config_annotation_pdf_font_color;   
    if(socket->queryString().keys().contains("cq_dam_config_annotation_pdf_font_color")){
        fromStringValue(socket->queryString().value("cq_dam_config_annotation_pdf_font_color"), cq_dam_config_annotation_pdf_font_color);
    }
    
    QString cq_dam_config_annotation_pdf_font_family;   
    if(socket->queryString().keys().contains("cq_dam_config_annotation_pdf_font_family")){
        fromStringValue(socket->queryString().value("cq_dam_config_annotation_pdf_font_family"), cq_dam_config_annotation_pdf_font_family);
    }
    
    QString cq_dam_config_annotation_pdf_font_light;   
    if(socket->queryString().keys().contains("cq_dam_config_annotation_pdf_font_light")){
        fromStringValue(socket->queryString().value("cq_dam_config_annotation_pdf_font_light"), cq_dam_config_annotation_pdf_font_light);
    }
    
    qint32 cq_dam_config_annotation_pdf_margin_text_image;   
    if(socket->queryString().keys().contains("cq_dam_config_annotation_pdf_margin_text_image")){
        fromStringValue(socket->queryString().value("cq_dam_config_annotation_pdf_margin_text_image"), cq_dam_config_annotation_pdf_margin_text_image);
    }
    
    qint32 cq_dam_config_annotation_pdf_min_image_height;   
    if(socket->queryString().keys().contains("cq_dam_config_annotation_pdf_min_image_height")){
        fromStringValue(socket->queryString().value("cq_dam_config_annotation_pdf_min_image_height"), cq_dam_config_annotation_pdf_min_image_height);
    }
    
    qint32 cq_dam_config_annotation_pdf_review_status_width;   
    if(socket->queryString().keys().contains("cq_dam_config_annotation_pdf_review_status_width")){
        fromStringValue(socket->queryString().value("cq_dam_config_annotation_pdf_review_status_width"), cq_dam_config_annotation_pdf_review_status_width);
    }
    
    QString cq_dam_config_annotation_pdf_review_status_color_approved;   
    if(socket->queryString().keys().contains("cq_dam_config_annotation_pdf_review_status_color_approved")){
        fromStringValue(socket->queryString().value("cq_dam_config_annotation_pdf_review_status_color_approved"), cq_dam_config_annotation_pdf_review_status_color_approved);
    }
    
    QString cq_dam_config_annotation_pdf_review_status_color_rejected;   
    if(socket->queryString().keys().contains("cq_dam_config_annotation_pdf_review_status_color_rejected")){
        fromStringValue(socket->queryString().value("cq_dam_config_annotation_pdf_review_status_color_rejected"), cq_dam_config_annotation_pdf_review_status_color_rejected);
    }
    
    QString cq_dam_config_annotation_pdf_review_status_color_changes_requested;   
    if(socket->queryString().keys().contains("cq_dam_config_annotation_pdf_review_status_color_changes_requested")){
        fromStringValue(socket->queryString().value("cq_dam_config_annotation_pdf_review_status_color_changes_requested"), cq_dam_config_annotation_pdf_review_status_color_changes_requested);
    }
    
    qint32 cq_dam_config_annotation_pdf_annotation_marker_width;   
    if(socket->queryString().keys().contains("cq_dam_config_annotation_pdf_annotation_marker_width")){
        fromStringValue(socket->queryString().value("cq_dam_config_annotation_pdf_annotation_marker_width"), cq_dam_config_annotation_pdf_annotation_marker_width);
    }
    
    qint32 cq_dam_config_annotation_pdf_asset_minheight;   
    if(socket->queryString().keys().contains("cq_dam_config_annotation_pdf_asset_minheight")){
        fromStringValue(socket->queryString().value("cq_dam_config_annotation_pdf_asset_minheight"), cq_dam_config_annotation_pdf_asset_minheight);
    }
    


    emit comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig( post,  apply,  _delete,  action,  location,  propertylist,  cq_dam_config_annotation_pdf_document_width,  cq_dam_config_annotation_pdf_document_height,  cq_dam_config_annotation_pdf_document_padding_horizontal,  cq_dam_config_annotation_pdf_document_padding_vertical,  cq_dam_config_annotation_pdf_font_size,  cq_dam_config_annotation_pdf_font_color,  cq_dam_config_annotation_pdf_font_family,  cq_dam_config_annotation_pdf_font_light,  cq_dam_config_annotation_pdf_margin_text_image,  cq_dam_config_annotation_pdf_min_image_height,  cq_dam_config_annotation_pdf_review_status_width,  cq_dam_config_annotation_pdf_review_status_color_approved,  cq_dam_config_annotation_pdf_review_status_color_rejected,  cq_dam_config_annotation_pdf_review_status_color_changes_requested,  cq_dam_config_annotation_pdf_annotation_marker_width,  cq_dam_config_annotation_pdf_asset_minheight);
}


void OAIConfigmgrApiRequest::comDayCqDamCoreImplAssetMoveListenerRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.core.impl.AssetMoveListener";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCoreImplAssetMoveListener, handler, &OAIConfigmgrApiHandler::comDayCqDamCoreImplAssetMoveListener);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool enabled;   
    if(socket->queryString().keys().contains("enabled")){
        fromStringValue(socket->queryString().value("enabled"), enabled);
    }
    


    emit comDayCqDamCoreImplAssetMoveListener( post,  apply,  _delete,  action,  location,  propertylist,  enabled);
}


void OAIConfigmgrApiRequest::comDayCqDamCoreImplAssethomeAssetHomePageConfigurationRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.core.impl.assethome.AssetHomePageConfiguration";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCoreImplAssethomeAssetHomePageConfiguration, handler, &OAIConfigmgrApiHandler::comDayCqDamCoreImplAssethomeAssetHomePageConfiguration);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool is_enabled;   
    if(socket->queryString().keys().contains("is_enabled")){
        fromStringValue(socket->queryString().value("is_enabled"), is_enabled);
    }
    


    emit comDayCqDamCoreImplAssethomeAssetHomePageConfiguration( post,  apply,  _delete,  action,  location,  propertylist,  is_enabled);
}


void OAIConfigmgrApiRequest::comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.core.impl.assetlinkshare.AdhocAssetShareProxyServlet";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet, handler, &OAIConfigmgrApiHandler::comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 cq_dam_adhoc_asset_share_prezip_maxcontentsize;   
    if(socket->queryString().keys().contains("cq_dam_adhoc_asset_share_prezip_maxcontentsize")){
        fromStringValue(socket->queryString().value("cq_dam_adhoc_asset_share_prezip_maxcontentsize"), cq_dam_adhoc_asset_share_prezip_maxcontentsize);
    }
    


    emit comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet( post,  apply,  _delete,  action,  location,  propertylist,  cq_dam_adhoc_asset_share_prezip_maxcontentsize);
}


void OAIConfigmgrApiRequest::comDayCqDamCoreImplCacheCQBufferedImageCacheRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.core.impl.cache.CQBufferedImageCache";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCoreImplCacheCQBufferedImageCache, handler, &OAIConfigmgrApiHandler::comDayCqDamCoreImplCacheCQBufferedImageCache);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 cq_dam_image_cache_max_memory;   
    if(socket->queryString().keys().contains("cq_dam_image_cache_max_memory")){
        fromStringValue(socket->queryString().value("cq_dam_image_cache_max_memory"), cq_dam_image_cache_max_memory);
    }
    
    qint32 cq_dam_image_cache_max_age;   
    if(socket->queryString().keys().contains("cq_dam_image_cache_max_age")){
        fromStringValue(socket->queryString().value("cq_dam_image_cache_max_age"), cq_dam_image_cache_max_age);
    }
    
    QString cq_dam_image_cache_max_dimension;   
    if(socket->queryString().keys().contains("cq_dam_image_cache_max_dimension")){
        fromStringValue(socket->queryString().value("cq_dam_image_cache_max_dimension"), cq_dam_image_cache_max_dimension);
    }
    


    emit comDayCqDamCoreImplCacheCQBufferedImageCache( post,  apply,  _delete,  action,  location,  propertylist,  cq_dam_image_cache_max_memory,  cq_dam_image_cache_max_age,  cq_dam_image_cache_max_dimension);
}


void OAIConfigmgrApiRequest::comDayCqDamCoreImplDamChangeEventListenerRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.core.impl.DamChangeEventListener";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCoreImplDamChangeEventListener, handler, &OAIConfigmgrApiHandler::comDayCqDamCoreImplDamChangeEventListener);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> changeeventlistener_observed_paths;   
    if(socket->queryString().keys().contains("changeeventlistener_observed_paths")){
        fromStringValue(socket->queryString().values("changeeventlistener_observed_paths"), changeeventlistener_observed_paths);
    }
    


    emit comDayCqDamCoreImplDamChangeEventListener( post,  apply,  _delete,  action,  location,  propertylist,  changeeventlistener_observed_paths);
}


void OAIConfigmgrApiRequest::comDayCqDamCoreImplDamEventPurgeServiceRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.core.impl.DamEventPurgeService";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCoreImplDamEventPurgeService, handler, &OAIConfigmgrApiHandler::comDayCqDamCoreImplDamEventPurgeService);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString scheduler_expression;   
    if(socket->queryString().keys().contains("scheduler_expression")){
        fromStringValue(socket->queryString().value("scheduler_expression"), scheduler_expression);
    }
    
    qint32 max_saved_activities;   
    if(socket->queryString().keys().contains("max_saved_activities")){
        fromStringValue(socket->queryString().value("max_saved_activities"), max_saved_activities);
    }
    
    qint32 save_interval;   
    if(socket->queryString().keys().contains("save_interval")){
        fromStringValue(socket->queryString().value("save_interval"), save_interval);
    }
    
    bool enable_activity_purge;   
    if(socket->queryString().keys().contains("enable_activity_purge")){
        fromStringValue(socket->queryString().value("enable_activity_purge"), enable_activity_purge);
    }
    
    QString event_types;   
    if(socket->queryString().keys().contains("event_types")){
        fromStringValue(socket->queryString().value("event_types"), event_types);
    }
    


    emit comDayCqDamCoreImplDamEventPurgeService( post,  apply,  _delete,  action,  location,  propertylist,  scheduler_expression,  max_saved_activities,  save_interval,  enable_activity_purge,  event_types);
}


void OAIConfigmgrApiRequest::comDayCqDamCoreImplDamEventRecorderImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.core.impl.DamEventRecorderImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCoreImplDamEventRecorderImpl, handler, &OAIConfigmgrApiHandler::comDayCqDamCoreImplDamEventRecorderImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString event_filter;   
    if(socket->queryString().keys().contains("event_filter")){
        fromStringValue(socket->queryString().value("event_filter"), event_filter);
    }
    
    qint32 event_queue_length;   
    if(socket->queryString().keys().contains("event_queue_length")){
        fromStringValue(socket->queryString().value("event_queue_length"), event_queue_length);
    }
    
    bool eventrecorder_enabled;   
    if(socket->queryString().keys().contains("eventrecorder_enabled")){
        fromStringValue(socket->queryString().value("eventrecorder_enabled"), eventrecorder_enabled);
    }
    
    QList<QString> eventrecorder_blacklist;   
    if(socket->queryString().keys().contains("eventrecorder_blacklist")){
        fromStringValue(socket->queryString().values("eventrecorder_blacklist"), eventrecorder_blacklist);
    }
    
    QString eventrecorder_eventtypes;   
    if(socket->queryString().keys().contains("eventrecorder_eventtypes")){
        fromStringValue(socket->queryString().value("eventrecorder_eventtypes"), eventrecorder_eventtypes);
    }
    


    emit comDayCqDamCoreImplDamEventRecorderImpl( post,  apply,  _delete,  action,  location,  propertylist,  event_filter,  event_queue_length,  eventrecorder_enabled,  eventrecorder_blacklist,  eventrecorder_eventtypes);
}


void OAIConfigmgrApiRequest::comDayCqDamCoreImplEventDamEventAuditListenerRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.core.impl.event.DamEventAuditListener";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCoreImplEventDamEventAuditListener, handler, &OAIConfigmgrApiHandler::comDayCqDamCoreImplEventDamEventAuditListener);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString event_filter;   
    if(socket->queryString().keys().contains("event_filter")){
        fromStringValue(socket->queryString().value("event_filter"), event_filter);
    }
    
    bool enabled;   
    if(socket->queryString().keys().contains("enabled")){
        fromStringValue(socket->queryString().value("enabled"), enabled);
    }
    


    emit comDayCqDamCoreImplEventDamEventAuditListener( post,  apply,  _delete,  action,  location,  propertylist,  event_filter,  enabled);
}


void OAIConfigmgrApiRequest::comDayCqDamCoreImplExpiryNotificationJobImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.core.impl.ExpiryNotificationJobImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCoreImplExpiryNotificationJobImpl, handler, &OAIConfigmgrApiHandler::comDayCqDamCoreImplExpiryNotificationJobImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool cq_dam_expiry_notification_scheduler_istimebased;   
    if(socket->queryString().keys().contains("cq_dam_expiry_notification_scheduler_istimebased")){
        fromStringValue(socket->queryString().value("cq_dam_expiry_notification_scheduler_istimebased"), cq_dam_expiry_notification_scheduler_istimebased);
    }
    
    QString cq_dam_expiry_notification_scheduler_timebased_rule;   
    if(socket->queryString().keys().contains("cq_dam_expiry_notification_scheduler_timebased_rule")){
        fromStringValue(socket->queryString().value("cq_dam_expiry_notification_scheduler_timebased_rule"), cq_dam_expiry_notification_scheduler_timebased_rule);
    }
    
    qint32 cq_dam_expiry_notification_scheduler_period_rule;   
    if(socket->queryString().keys().contains("cq_dam_expiry_notification_scheduler_period_rule")){
        fromStringValue(socket->queryString().value("cq_dam_expiry_notification_scheduler_period_rule"), cq_dam_expiry_notification_scheduler_period_rule);
    }
    
    bool send_email;   
    if(socket->queryString().keys().contains("send_email")){
        fromStringValue(socket->queryString().value("send_email"), send_email);
    }
    
    qint32 asset_expired_limit;   
    if(socket->queryString().keys().contains("asset_expired_limit")){
        fromStringValue(socket->queryString().value("asset_expired_limit"), asset_expired_limit);
    }
    
    qint32 prior_notification_seconds;   
    if(socket->queryString().keys().contains("prior_notification_seconds")){
        fromStringValue(socket->queryString().value("prior_notification_seconds"), prior_notification_seconds);
    }
    
    QString cq_dam_expiry_notification_url_protocol;   
    if(socket->queryString().keys().contains("cq_dam_expiry_notification_url_protocol")){
        fromStringValue(socket->queryString().value("cq_dam_expiry_notification_url_protocol"), cq_dam_expiry_notification_url_protocol);
    }
    


    emit comDayCqDamCoreImplExpiryNotificationJobImpl( post,  apply,  _delete,  action,  location,  propertylist,  cq_dam_expiry_notification_scheduler_istimebased,  cq_dam_expiry_notification_scheduler_timebased_rule,  cq_dam_expiry_notification_scheduler_period_rule,  send_email,  asset_expired_limit,  prior_notification_seconds,  cq_dam_expiry_notification_url_protocol);
}


void OAIConfigmgrApiRequest::comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.core.impl.foldermetadataschema.FolderMetadataSchemaFeatureFlag";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat, handler, &OAIConfigmgrApiHandler::comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool is_enabled;   
    if(socket->queryString().keys().contains("is_enabled")){
        fromStringValue(socket->queryString().value("is_enabled"), is_enabled);
    }
    


    emit comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat( post,  apply,  _delete,  action,  location,  propertylist,  is_enabled);
}


void OAIConfigmgrApiRequest::comDayCqDamCoreImplGfxCommonsGfxRendererRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.core.impl.gfx.CommonsGfxRenderer";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCoreImplGfxCommonsGfxRenderer, handler, &OAIConfigmgrApiHandler::comDayCqDamCoreImplGfxCommonsGfxRenderer);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool skip_bufferedcache;   
    if(socket->queryString().keys().contains("skip_bufferedcache")){
        fromStringValue(socket->queryString().value("skip_bufferedcache"), skip_bufferedcache);
    }
    


    emit comDayCqDamCoreImplGfxCommonsGfxRenderer( post,  apply,  _delete,  action,  location,  propertylist,  skip_bufferedcache);
}


void OAIConfigmgrApiRequest::comDayCqDamCoreImplHandlerEPSFormatHandlerRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.core.impl.handler.EPSFormatHandler";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCoreImplHandlerEPSFormatHandler, handler, &OAIConfigmgrApiHandler::comDayCqDamCoreImplHandlerEPSFormatHandler);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString mimetype;   
    if(socket->queryString().keys().contains("mimetype")){
        fromStringValue(socket->queryString().value("mimetype"), mimetype);
    }
    


    emit comDayCqDamCoreImplHandlerEPSFormatHandler( post,  apply,  _delete,  action,  location,  propertylist,  mimetype);
}


void OAIConfigmgrApiRequest::comDayCqDamCoreImplHandlerIndesignFormatHandlerRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.core.impl.handler.IndesignFormatHandler";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCoreImplHandlerIndesignFormatHandler, handler, &OAIConfigmgrApiHandler::comDayCqDamCoreImplHandlerIndesignFormatHandler);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> mimetype;   
    if(socket->queryString().keys().contains("mimetype")){
        fromStringValue(socket->queryString().values("mimetype"), mimetype);
    }
    


    emit comDayCqDamCoreImplHandlerIndesignFormatHandler( post,  apply,  _delete,  action,  location,  propertylist,  mimetype);
}


void OAIConfigmgrApiRequest::comDayCqDamCoreImplHandlerJpegHandlerRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.core.impl.handler.JpegHandler";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCoreImplHandlerJpegHandler, handler, &OAIConfigmgrApiHandler::comDayCqDamCoreImplHandlerJpegHandler);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool cq_dam_enable_ext_meta_extraction;   
    if(socket->queryString().keys().contains("cq_dam_enable_ext_meta_extraction")){
        fromStringValue(socket->queryString().value("cq_dam_enable_ext_meta_extraction"), cq_dam_enable_ext_meta_extraction);
    }
    
    qint32 large_file_threshold;   
    if(socket->queryString().keys().contains("large_file_threshold")){
        fromStringValue(socket->queryString().value("large_file_threshold"), large_file_threshold);
    }
    
    qint32 large_comment_threshold;   
    if(socket->queryString().keys().contains("large_comment_threshold")){
        fromStringValue(socket->queryString().value("large_comment_threshold"), large_comment_threshold);
    }
    


    emit comDayCqDamCoreImplHandlerJpegHandler( post,  apply,  _delete,  action,  location,  propertylist,  cq_dam_enable_ext_meta_extraction,  large_file_threshold,  large_comment_threshold);
}


void OAIConfigmgrApiRequest::comDayCqDamCoreImplHandlerXmpNCommXMPHandlerRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.core.impl.handler.xmp.NCommXMPHandler";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCoreImplHandlerXmpNCommXMPHandler, handler, &OAIConfigmgrApiHandler::comDayCqDamCoreImplHandlerXmpNCommXMPHandler);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> xmphandler_cq_formats;   
    if(socket->queryString().keys().contains("xmphandler_cq_formats")){
        fromStringValue(socket->queryString().values("xmphandler_cq_formats"), xmphandler_cq_formats);
    }
    


    emit comDayCqDamCoreImplHandlerXmpNCommXMPHandler( post,  apply,  _delete,  action,  location,  propertylist,  xmphandler_cq_formats);
}


void OAIConfigmgrApiRequest::comDayCqDamCoreImplJmxAssetIndexUpdateMonitorRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetIndexUpdateMonitor";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCoreImplJmxAssetIndexUpdateMonitor, handler, &OAIConfigmgrApiHandler::comDayCqDamCoreImplJmxAssetIndexUpdateMonitor);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString jmx_objectname;   
    if(socket->queryString().keys().contains("jmx_objectname")){
        fromStringValue(socket->queryString().value("jmx_objectname"), jmx_objectname);
    }
    
    bool property_measure_enabled;   
    if(socket->queryString().keys().contains("property_measure_enabled")){
        fromStringValue(socket->queryString().value("property_measure_enabled"), property_measure_enabled);
    }
    
    QString property_name;   
    if(socket->queryString().keys().contains("property_name")){
        fromStringValue(socket->queryString().value("property_name"), property_name);
    }
    
    qint32 property_max_wait_ms;   
    if(socket->queryString().keys().contains("property_max_wait_ms")){
        fromStringValue(socket->queryString().value("property_max_wait_ms"), property_max_wait_ms);
    }
    
    OAINumber property_max_rate;   
    if(socket->queryString().keys().contains("property_max_rate")){
        fromStringValue(socket->queryString().value("property_max_rate"), property_max_rate);
    }
    
    bool fulltext_measure_enabled;   
    if(socket->queryString().keys().contains("fulltext_measure_enabled")){
        fromStringValue(socket->queryString().value("fulltext_measure_enabled"), fulltext_measure_enabled);
    }
    
    QString fulltext_name;   
    if(socket->queryString().keys().contains("fulltext_name")){
        fromStringValue(socket->queryString().value("fulltext_name"), fulltext_name);
    }
    
    qint32 fulltext_max_wait_ms;   
    if(socket->queryString().keys().contains("fulltext_max_wait_ms")){
        fromStringValue(socket->queryString().value("fulltext_max_wait_ms"), fulltext_max_wait_ms);
    }
    
    OAINumber fulltext_max_rate;   
    if(socket->queryString().keys().contains("fulltext_max_rate")){
        fromStringValue(socket->queryString().value("fulltext_max_rate"), fulltext_max_rate);
    }
    


    emit comDayCqDamCoreImplJmxAssetIndexUpdateMonitor( post,  apply,  _delete,  action,  location,  propertylist,  jmx_objectname,  property_measure_enabled,  property_name,  property_max_wait_ms,  property_max_rate,  fulltext_measure_enabled,  fulltext_name,  fulltext_max_wait_ms,  fulltext_max_rate);
}


void OAIConfigmgrApiRequest::comDayCqDamCoreImplJmxAssetMigrationMBeanImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetMigrationMBeanImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCoreImplJmxAssetMigrationMBeanImpl, handler, &OAIConfigmgrApiHandler::comDayCqDamCoreImplJmxAssetMigrationMBeanImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString jmx_objectname;   
    if(socket->queryString().keys().contains("jmx_objectname")){
        fromStringValue(socket->queryString().value("jmx_objectname"), jmx_objectname);
    }
    


    emit comDayCqDamCoreImplJmxAssetMigrationMBeanImpl( post,  apply,  _delete,  action,  location,  propertylist,  jmx_objectname);
}


void OAIConfigmgrApiRequest::comDayCqDamCoreImplJmxAssetUpdateMonitorImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetUpdateMonitorImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCoreImplJmxAssetUpdateMonitorImpl, handler, &OAIConfigmgrApiHandler::comDayCqDamCoreImplJmxAssetUpdateMonitorImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString jmx_objectname;   
    if(socket->queryString().keys().contains("jmx_objectname")){
        fromStringValue(socket->queryString().value("jmx_objectname"), jmx_objectname);
    }
    
    bool active;   
    if(socket->queryString().keys().contains("active")){
        fromStringValue(socket->queryString().value("active"), active);
    }
    


    emit comDayCqDamCoreImplJmxAssetUpdateMonitorImpl( post,  apply,  _delete,  action,  location,  propertylist,  jmx_objectname,  active);
}


void OAIConfigmgrApiRequest::comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataexport.AsyncMetadataExportConfigProviderService";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig, handler, &OAIConfigmgrApiHandler::comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString operation;   
    if(socket->queryString().keys().contains("operation")){
        fromStringValue(socket->queryString().value("operation"), operation);
    }
    
    bool email_enabled;   
    if(socket->queryString().keys().contains("email_enabled")){
        fromStringValue(socket->queryString().value("email_enabled"), email_enabled);
    }
    


    emit comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig( post,  apply,  _delete,  action,  location,  propertylist,  operation,  email_enabled);
}


void OAIConfigmgrApiRequest::comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataimport.AsyncMetadataImportConfigProviderService";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig, handler, &OAIConfigmgrApiHandler::comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString operation;   
    if(socket->queryString().keys().contains("operation")){
        fromStringValue(socket->queryString().value("operation"), operation);
    }
    
    QString operation_icon;   
    if(socket->queryString().keys().contains("operation_icon")){
        fromStringValue(socket->queryString().value("operation_icon"), operation_icon);
    }
    
    QString topic_name;   
    if(socket->queryString().keys().contains("topic_name")){
        fromStringValue(socket->queryString().value("topic_name"), topic_name);
    }
    
    bool email_enabled;   
    if(socket->queryString().keys().contains("email_enabled")){
        fromStringValue(socket->queryString().value("email_enabled"), email_enabled);
    }
    


    emit comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig( post,  apply,  _delete,  action,  location,  propertylist,  operation,  operation_icon,  topic_name,  email_enabled);
}


void OAIConfigmgrApiRequest::comDayCqDamCoreImplLightboxLightboxServletRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.core.impl.lightbox.LightboxServlet";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCoreImplLightboxLightboxServlet, handler, &OAIConfigmgrApiHandler::comDayCqDamCoreImplLightboxLightboxServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString sling_servlet_paths;   
    if(socket->queryString().keys().contains("sling_servlet_paths")){
        fromStringValue(socket->queryString().value("sling_servlet_paths"), sling_servlet_paths);
    }
    
    QList<QString> sling_servlet_methods;   
    if(socket->queryString().keys().contains("sling_servlet_methods")){
        fromStringValue(socket->queryString().values("sling_servlet_methods"), sling_servlet_methods);
    }
    
    bool cq_dam_enable_anonymous;   
    if(socket->queryString().keys().contains("cq_dam_enable_anonymous")){
        fromStringValue(socket->queryString().value("cq_dam_enable_anonymous"), cq_dam_enable_anonymous);
    }
    


    emit comDayCqDamCoreImplLightboxLightboxServlet( post,  apply,  _delete,  action,  location,  propertylist,  sling_servlet_paths,  sling_servlet_methods,  cq_dam_enable_anonymous);
}


void OAIConfigmgrApiRequest::comDayCqDamCoreImplMetadataEditorSelectComponentHandlerRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.core.impl.metadata.editor.SelectComponentHandler";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCoreImplMetadataEditorSelectComponentHandler, handler, &OAIConfigmgrApiHandler::comDayCqDamCoreImplMetadataEditorSelectComponentHandler);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> granitedata;   
    if(socket->queryString().keys().contains("granitedata")){
        fromStringValue(socket->queryString().values("granitedata"), granitedata);
    }
    


    emit comDayCqDamCoreImplMetadataEditorSelectComponentHandler( post,  apply,  _delete,  action,  location,  propertylist,  granitedata);
}


void OAIConfigmgrApiRequest::comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.core.impl.mimeType.AssetUploadRestrictionHelper";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper, handler, &OAIConfigmgrApiHandler::comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool cq_dam_allow_all_mime;   
    if(socket->queryString().keys().contains("cq_dam_allow_all_mime")){
        fromStringValue(socket->queryString().value("cq_dam_allow_all_mime"), cq_dam_allow_all_mime);
    }
    
    QList<QString> cq_dam_allowed_asset_mimes;   
    if(socket->queryString().keys().contains("cq_dam_allowed_asset_mimes")){
        fromStringValue(socket->queryString().values("cq_dam_allowed_asset_mimes"), cq_dam_allowed_asset_mimes);
    }
    


    emit comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper( post,  apply,  _delete,  action,  location,  propertylist,  cq_dam_allow_all_mime,  cq_dam_allowed_asset_mimes);
}


void OAIConfigmgrApiRequest::comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.core.impl.mimeType.DamMimeTypeServiceImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl, handler, &OAIConfigmgrApiHandler::comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool cq_dam_detect_asset_mime_from_content;   
    if(socket->queryString().keys().contains("cq_dam_detect_asset_mime_from_content")){
        fromStringValue(socket->queryString().value("cq_dam_detect_asset_mime_from_content"), cq_dam_detect_asset_mime_from_content);
    }
    


    emit comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl( post,  apply,  _delete,  action,  location,  propertylist,  cq_dam_detect_asset_mime_from_content);
}


void OAIConfigmgrApiRequest::comDayCqDamCoreImplMissingMetadataNotificationJobRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.core.impl.MissingMetadataNotificationJob";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCoreImplMissingMetadataNotificationJob, handler, &OAIConfigmgrApiHandler::comDayCqDamCoreImplMissingMetadataNotificationJob);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool cq_dam_missingmetadata_notification_scheduler_istimebased;   
    if(socket->queryString().keys().contains("cq_dam_missingmetadata_notification_scheduler_istimebased")){
        fromStringValue(socket->queryString().value("cq_dam_missingmetadata_notification_scheduler_istimebased"), cq_dam_missingmetadata_notification_scheduler_istimebased);
    }
    
    QString cq_dam_missingmetadata_notification_scheduler_timebased_rule;   
    if(socket->queryString().keys().contains("cq_dam_missingmetadata_notification_scheduler_timebased_rule")){
        fromStringValue(socket->queryString().value("cq_dam_missingmetadata_notification_scheduler_timebased_rule"), cq_dam_missingmetadata_notification_scheduler_timebased_rule);
    }
    
    qint32 cq_dam_missingmetadata_notification_scheduler_period_rule;   
    if(socket->queryString().keys().contains("cq_dam_missingmetadata_notification_scheduler_period_rule")){
        fromStringValue(socket->queryString().value("cq_dam_missingmetadata_notification_scheduler_period_rule"), cq_dam_missingmetadata_notification_scheduler_period_rule);
    }
    
    QString cq_dam_missingmetadata_notification_recipient;   
    if(socket->queryString().keys().contains("cq_dam_missingmetadata_notification_recipient")){
        fromStringValue(socket->queryString().value("cq_dam_missingmetadata_notification_recipient"), cq_dam_missingmetadata_notification_recipient);
    }
    


    emit comDayCqDamCoreImplMissingMetadataNotificationJob( post,  apply,  _delete,  action,  location,  propertylist,  cq_dam_missingmetadata_notification_scheduler_istimebased,  cq_dam_missingmetadata_notification_scheduler_timebased_rule,  cq_dam_missingmetadata_notification_scheduler_period_rule,  cq_dam_missingmetadata_notification_recipient);
}


void OAIConfigmgrApiRequest::comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.core.impl.process.SendTransientWorkflowCompletedEmailProcess";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr, handler, &OAIConfigmgrApiHandler::comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString process_label;   
    if(socket->queryString().keys().contains("process_label")){
        fromStringValue(socket->queryString().value("process_label"), process_label);
    }
    
    bool notify_on_complete;   
    if(socket->queryString().keys().contains("notify_on_complete")){
        fromStringValue(socket->queryString().value("notify_on_complete"), notify_on_complete);
    }
    


    emit comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr( post,  apply,  _delete,  action,  location,  propertylist,  process_label,  notify_on_complete);
}


void OAIConfigmgrApiRequest::comDayCqDamCoreImplProcessTextExtractionProcessRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.core.impl.process.TextExtractionProcess";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCoreImplProcessTextExtractionProcess, handler, &OAIConfigmgrApiHandler::comDayCqDamCoreImplProcessTextExtractionProcess);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> mime_types;   
    if(socket->queryString().keys().contains("mime_types")){
        fromStringValue(socket->queryString().values("mime_types"), mime_types);
    }
    
    qint32 max_extract;   
    if(socket->queryString().keys().contains("max_extract")){
        fromStringValue(socket->queryString().value("max_extract"), max_extract);
    }
    


    emit comDayCqDamCoreImplProcessTextExtractionProcess( post,  apply,  _delete,  action,  location,  propertylist,  mime_types,  max_extract);
}


void OAIConfigmgrApiRequest::comDayCqDamCoreImplRenditionMakerImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.core.impl.RenditionMakerImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCoreImplRenditionMakerImpl, handler, &OAIConfigmgrApiHandler::comDayCqDamCoreImplRenditionMakerImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool xmp_propagate;   
    if(socket->queryString().keys().contains("xmp_propagate")){
        fromStringValue(socket->queryString().value("xmp_propagate"), xmp_propagate);
    }
    
    QList<QString> xmp_excludes;   
    if(socket->queryString().keys().contains("xmp_excludes")){
        fromStringValue(socket->queryString().values("xmp_excludes"), xmp_excludes);
    }
    


    emit comDayCqDamCoreImplRenditionMakerImpl( post,  apply,  _delete,  action,  location,  propertylist,  xmp_propagate,  xmp_excludes);
}


void OAIConfigmgrApiRequest::comDayCqDamCoreImplReportsReportExportServiceRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportExportService";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCoreImplReportsReportExportService, handler, &OAIConfigmgrApiHandler::comDayCqDamCoreImplReportsReportExportService);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 query_batch_size;   
    if(socket->queryString().keys().contains("query_batch_size")){
        fromStringValue(socket->queryString().value("query_batch_size"), query_batch_size);
    }
    


    emit comDayCqDamCoreImplReportsReportExportService( post,  apply,  _delete,  action,  location,  propertylist,  query_batch_size);
}


void OAIConfigmgrApiRequest::comDayCqDamCoreImplReportsReportPurgeServiceRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportPurgeService";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCoreImplReportsReportPurgeService, handler, &OAIConfigmgrApiHandler::comDayCqDamCoreImplReportsReportPurgeService);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString scheduler_expression;   
    if(socket->queryString().keys().contains("scheduler_expression")){
        fromStringValue(socket->queryString().value("scheduler_expression"), scheduler_expression);
    }
    
    qint32 max_saved_reports;   
    if(socket->queryString().keys().contains("max_saved_reports")){
        fromStringValue(socket->queryString().value("max_saved_reports"), max_saved_reports);
    }
    
    qint32 time_duration;   
    if(socket->queryString().keys().contains("time_duration")){
        fromStringValue(socket->queryString().value("time_duration"), time_duration);
    }
    
    bool enable_report_purge;   
    if(socket->queryString().keys().contains("enable_report_purge")){
        fromStringValue(socket->queryString().value("enable_report_purge"), enable_report_purge);
    }
    


    emit comDayCqDamCoreImplReportsReportPurgeService( post,  apply,  _delete,  action,  location,  propertylist,  scheduler_expression,  max_saved_reports,  time_duration,  enable_report_purge);
}


void OAIConfigmgrApiRequest::comDayCqDamCoreImplServletAssetDownloadServletRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetDownloadServlet";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCoreImplServletAssetDownloadServlet, handler, &OAIConfigmgrApiHandler::comDayCqDamCoreImplServletAssetDownloadServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool enabled;   
    if(socket->queryString().keys().contains("enabled")){
        fromStringValue(socket->queryString().value("enabled"), enabled);
    }
    


    emit comDayCqDamCoreImplServletAssetDownloadServlet( post,  apply,  _delete,  action,  location,  propertylist,  enabled);
}


void OAIConfigmgrApiRequest::comDayCqDamCoreImplServletAssetStatusServletRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetStatusServlet";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCoreImplServletAssetStatusServlet, handler, &OAIConfigmgrApiHandler::comDayCqDamCoreImplServletAssetStatusServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 cq_dam_batch_status_maxassets;   
    if(socket->queryString().keys().contains("cq_dam_batch_status_maxassets")){
        fromStringValue(socket->queryString().value("cq_dam_batch_status_maxassets"), cq_dam_batch_status_maxassets);
    }
    


    emit comDayCqDamCoreImplServletAssetStatusServlet( post,  apply,  _delete,  action,  location,  propertylist,  cq_dam_batch_status_maxassets);
}


void OAIConfigmgrApiRequest::comDayCqDamCoreImplServletAssetXMPSearchServletRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetXMPSearchServlet";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCoreImplServletAssetXMPSearchServlet, handler, &OAIConfigmgrApiHandler::comDayCqDamCoreImplServletAssetXMPSearchServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 cq_dam_batch_indesign_maxassets;   
    if(socket->queryString().keys().contains("cq_dam_batch_indesign_maxassets")){
        fromStringValue(socket->queryString().value("cq_dam_batch_indesign_maxassets"), cq_dam_batch_indesign_maxassets);
    }
    


    emit comDayCqDamCoreImplServletAssetXMPSearchServlet( post,  apply,  _delete,  action,  location,  propertylist,  cq_dam_batch_indesign_maxassets);
}


void OAIConfigmgrApiRequest::comDayCqDamCoreImplServletBatchMetadataServletRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.core.impl.servlet.BatchMetadataServlet";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCoreImplServletBatchMetadataServlet, handler, &OAIConfigmgrApiHandler::comDayCqDamCoreImplServletBatchMetadataServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> cq_dam_batch_metadata_asset_default;   
    if(socket->queryString().keys().contains("cq_dam_batch_metadata_asset_default")){
        fromStringValue(socket->queryString().values("cq_dam_batch_metadata_asset_default"), cq_dam_batch_metadata_asset_default);
    }
    
    QList<QString> cq_dam_batch_metadata_collection_default;   
    if(socket->queryString().keys().contains("cq_dam_batch_metadata_collection_default")){
        fromStringValue(socket->queryString().values("cq_dam_batch_metadata_collection_default"), cq_dam_batch_metadata_collection_default);
    }
    
    qint32 cq_dam_batch_metadata_maxresources;   
    if(socket->queryString().keys().contains("cq_dam_batch_metadata_maxresources")){
        fromStringValue(socket->queryString().value("cq_dam_batch_metadata_maxresources"), cq_dam_batch_metadata_maxresources);
    }
    


    emit comDayCqDamCoreImplServletBatchMetadataServlet( post,  apply,  _delete,  action,  location,  propertylist,  cq_dam_batch_metadata_asset_default,  cq_dam_batch_metadata_collection_default,  cq_dam_batch_metadata_maxresources);
}


void OAIConfigmgrApiRequest::comDayCqDamCoreImplServletBinaryProviderServletRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.core.impl.servlet.BinaryProviderServlet";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCoreImplServletBinaryProviderServlet, handler, &OAIConfigmgrApiHandler::comDayCqDamCoreImplServletBinaryProviderServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> sling_servlet_resource_types;   
    if(socket->queryString().keys().contains("sling_servlet_resource_types")){
        fromStringValue(socket->queryString().values("sling_servlet_resource_types"), sling_servlet_resource_types);
    }
    
    QList<QString> sling_servlet_methods;   
    if(socket->queryString().keys().contains("sling_servlet_methods")){
        fromStringValue(socket->queryString().values("sling_servlet_methods"), sling_servlet_methods);
    }
    
    bool cq_dam_drm_enable;   
    if(socket->queryString().keys().contains("cq_dam_drm_enable")){
        fromStringValue(socket->queryString().value("cq_dam_drm_enable"), cq_dam_drm_enable);
    }
    


    emit comDayCqDamCoreImplServletBinaryProviderServlet( post,  apply,  _delete,  action,  location,  propertylist,  sling_servlet_resource_types,  sling_servlet_methods,  cq_dam_drm_enable);
}


void OAIConfigmgrApiRequest::comDayCqDamCoreImplServletCollectionServletRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionServlet";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCoreImplServletCollectionServlet, handler, &OAIConfigmgrApiHandler::comDayCqDamCoreImplServletCollectionServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> cq_dam_batch_collection_properties;   
    if(socket->queryString().keys().contains("cq_dam_batch_collection_properties")){
        fromStringValue(socket->queryString().values("cq_dam_batch_collection_properties"), cq_dam_batch_collection_properties);
    }
    
    qint32 cq_dam_batch_collection_maxcollections;   
    if(socket->queryString().keys().contains("cq_dam_batch_collection_maxcollections")){
        fromStringValue(socket->queryString().value("cq_dam_batch_collection_maxcollections"), cq_dam_batch_collection_maxcollections);
    }
    


    emit comDayCqDamCoreImplServletCollectionServlet( post,  apply,  _delete,  action,  location,  propertylist,  cq_dam_batch_collection_properties,  cq_dam_batch_collection_maxcollections);
}


void OAIConfigmgrApiRequest::comDayCqDamCoreImplServletCollectionsServletRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionsServlet";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCoreImplServletCollectionsServlet, handler, &OAIConfigmgrApiHandler::comDayCqDamCoreImplServletCollectionsServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> cq_dam_batch_collections_properties;   
    if(socket->queryString().keys().contains("cq_dam_batch_collections_properties")){
        fromStringValue(socket->queryString().values("cq_dam_batch_collections_properties"), cq_dam_batch_collections_properties);
    }
    
    qint32 cq_dam_batch_collections_limit;   
    if(socket->queryString().keys().contains("cq_dam_batch_collections_limit")){
        fromStringValue(socket->queryString().value("cq_dam_batch_collections_limit"), cq_dam_batch_collections_limit);
    }
    


    emit comDayCqDamCoreImplServletCollectionsServlet( post,  apply,  _delete,  action,  location,  propertylist,  cq_dam_batch_collections_properties,  cq_dam_batch_collections_limit);
}


void OAIConfigmgrApiRequest::comDayCqDamCoreImplServletCompanionServletRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.core.impl.servlet.CompanionServlet";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCoreImplServletCompanionServlet, handler, &OAIConfigmgrApiHandler::comDayCqDamCoreImplServletCompanionServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString more_info;   
    if(socket->queryString().keys().contains("more_info")){
        fromStringValue(socket->queryString().value("more_info"), more_info);
    }
    
    QString mntoverlaydamguicontentassetsmoreinfo_htmlpath;   
    if(socket->queryString().keys().contains("mntoverlaydamguicontentassetsmoreinfo_htmlpath")){
        fromStringValue(socket->queryString().value("mntoverlaydamguicontentassetsmoreinfo_htmlpath"), mntoverlaydamguicontentassetsmoreinfo_htmlpath);
    }
    


    emit comDayCqDamCoreImplServletCompanionServlet( post,  apply,  _delete,  action,  location,  propertylist,  more_info,  mntoverlaydamguicontentassetsmoreinfo_htmlpath);
}


void OAIConfigmgrApiRequest::comDayCqDamCoreImplServletCreateAssetServletRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.core.impl.servlet.CreateAssetServlet";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCoreImplServletCreateAssetServlet, handler, &OAIConfigmgrApiHandler::comDayCqDamCoreImplServletCreateAssetServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool detect_duplicate;   
    if(socket->queryString().keys().contains("detect_duplicate")){
        fromStringValue(socket->queryString().value("detect_duplicate"), detect_duplicate);
    }
    


    emit comDayCqDamCoreImplServletCreateAssetServlet( post,  apply,  _delete,  action,  location,  propertylist,  detect_duplicate);
}


void OAIConfigmgrApiRequest::comDayCqDamCoreImplServletDamContentDispositionFilterRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.core.impl.servlet.DamContentDispositionFilter";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCoreImplServletDamContentDispositionFilter, handler, &OAIConfigmgrApiHandler::comDayCqDamCoreImplServletDamContentDispositionFilter);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> cq_mime_type_blacklist;   
    if(socket->queryString().keys().contains("cq_mime_type_blacklist")){
        fromStringValue(socket->queryString().values("cq_mime_type_blacklist"), cq_mime_type_blacklist);
    }
    
    bool cq_dam_empty_mime;   
    if(socket->queryString().keys().contains("cq_dam_empty_mime")){
        fromStringValue(socket->queryString().value("cq_dam_empty_mime"), cq_dam_empty_mime);
    }
    


    emit comDayCqDamCoreImplServletDamContentDispositionFilter( post,  apply,  _delete,  action,  location,  propertylist,  cq_mime_type_blacklist,  cq_dam_empty_mime);
}


void OAIConfigmgrApiRequest::comDayCqDamCoreImplServletGuidLookupFilterRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.core.impl.servlet.GuidLookupFilter";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCoreImplServletGuidLookupFilter, handler, &OAIConfigmgrApiHandler::comDayCqDamCoreImplServletGuidLookupFilter);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool cq_dam_core_guidlookupfilter_enabled;   
    if(socket->queryString().keys().contains("cq_dam_core_guidlookupfilter_enabled")){
        fromStringValue(socket->queryString().value("cq_dam_core_guidlookupfilter_enabled"), cq_dam_core_guidlookupfilter_enabled);
    }
    


    emit comDayCqDamCoreImplServletGuidLookupFilter( post,  apply,  _delete,  action,  location,  propertylist,  cq_dam_core_guidlookupfilter_enabled);
}


void OAIConfigmgrApiRequest::comDayCqDamCoreImplServletHealthCheckServletRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.core.impl.servlet.HealthCheckServlet";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCoreImplServletHealthCheckServlet, handler, &OAIConfigmgrApiHandler::comDayCqDamCoreImplServletHealthCheckServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString cq_dam_sync_workflow_id;   
    if(socket->queryString().keys().contains("cq_dam_sync_workflow_id")){
        fromStringValue(socket->queryString().value("cq_dam_sync_workflow_id"), cq_dam_sync_workflow_id);
    }
    
    QList<QString> cq_dam_sync_folder_types;   
    if(socket->queryString().keys().contains("cq_dam_sync_folder_types")){
        fromStringValue(socket->queryString().values("cq_dam_sync_folder_types"), cq_dam_sync_folder_types);
    }
    


    emit comDayCqDamCoreImplServletHealthCheckServlet( post,  apply,  _delete,  action,  location,  propertylist,  cq_dam_sync_workflow_id,  cq_dam_sync_folder_types);
}


void OAIConfigmgrApiRequest::comDayCqDamCoreImplServletMetadataGetServletRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.core.impl.servlet.MetadataGetServlet";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCoreImplServletMetadataGetServlet, handler, &OAIConfigmgrApiHandler::comDayCqDamCoreImplServletMetadataGetServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString sling_servlet_resource_types;   
    if(socket->queryString().keys().contains("sling_servlet_resource_types")){
        fromStringValue(socket->queryString().value("sling_servlet_resource_types"), sling_servlet_resource_types);
    }
    
    QString sling_servlet_methods;   
    if(socket->queryString().keys().contains("sling_servlet_methods")){
        fromStringValue(socket->queryString().value("sling_servlet_methods"), sling_servlet_methods);
    }
    
    QString sling_servlet_extensions;   
    if(socket->queryString().keys().contains("sling_servlet_extensions")){
        fromStringValue(socket->queryString().value("sling_servlet_extensions"), sling_servlet_extensions);
    }
    
    QString sling_servlet_selectors;   
    if(socket->queryString().keys().contains("sling_servlet_selectors")){
        fromStringValue(socket->queryString().value("sling_servlet_selectors"), sling_servlet_selectors);
    }
    


    emit comDayCqDamCoreImplServletMetadataGetServlet( post,  apply,  _delete,  action,  location,  propertylist,  sling_servlet_resource_types,  sling_servlet_methods,  sling_servlet_extensions,  sling_servlet_selectors);
}


void OAIConfigmgrApiRequest::comDayCqDamCoreImplServletMultipleLicenseAcceptServletRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.core.impl.servlet.MultipleLicenseAcceptServlet";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCoreImplServletMultipleLicenseAcceptServlet, handler, &OAIConfigmgrApiHandler::comDayCqDamCoreImplServletMultipleLicenseAcceptServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool cq_dam_drm_enable;   
    if(socket->queryString().keys().contains("cq_dam_drm_enable")){
        fromStringValue(socket->queryString().value("cq_dam_drm_enable"), cq_dam_drm_enable);
    }
    


    emit comDayCqDamCoreImplServletMultipleLicenseAcceptServlet( post,  apply,  _delete,  action,  location,  propertylist,  cq_dam_drm_enable);
}


void OAIConfigmgrApiRequest::comDayCqDamCoreImplServletResourceCollectionServletRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.core.impl.servlet.ResourceCollectionServlet";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCoreImplServletResourceCollectionServlet, handler, &OAIConfigmgrApiHandler::comDayCqDamCoreImplServletResourceCollectionServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> sling_servlet_resource_types;   
    if(socket->queryString().keys().contains("sling_servlet_resource_types")){
        fromStringValue(socket->queryString().values("sling_servlet_resource_types"), sling_servlet_resource_types);
    }
    
    QString sling_servlet_methods;   
    if(socket->queryString().keys().contains("sling_servlet_methods")){
        fromStringValue(socket->queryString().value("sling_servlet_methods"), sling_servlet_methods);
    }
    
    QString sling_servlet_selectors;   
    if(socket->queryString().keys().contains("sling_servlet_selectors")){
        fromStringValue(socket->queryString().value("sling_servlet_selectors"), sling_servlet_selectors);
    }
    
    QString download_config;   
    if(socket->queryString().keys().contains("download_config")){
        fromStringValue(socket->queryString().value("download_config"), download_config);
    }
    
    QString view_selector;   
    if(socket->queryString().keys().contains("view_selector")){
        fromStringValue(socket->queryString().value("view_selector"), view_selector);
    }
    
    bool send_email;   
    if(socket->queryString().keys().contains("send_email")){
        fromStringValue(socket->queryString().value("send_email"), send_email);
    }
    


    emit comDayCqDamCoreImplServletResourceCollectionServlet( post,  apply,  _delete,  action,  location,  propertylist,  sling_servlet_resource_types,  sling_servlet_methods,  sling_servlet_selectors,  download_config,  view_selector,  send_email);
}


void OAIConfigmgrApiRequest::comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.core.impl.ui.preview.FolderPreviewUpdaterImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl, handler, &OAIConfigmgrApiHandler::comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool create_preview_enabled;   
    if(socket->queryString().keys().contains("create_preview_enabled")){
        fromStringValue(socket->queryString().value("create_preview_enabled"), create_preview_enabled);
    }
    
    bool update_preview_enabled;   
    if(socket->queryString().keys().contains("update_preview_enabled")){
        fromStringValue(socket->queryString().value("update_preview_enabled"), update_preview_enabled);
    }
    
    qint32 queue_size;   
    if(socket->queryString().keys().contains("queue_size")){
        fromStringValue(socket->queryString().value("queue_size"), queue_size);
    }
    
    QString folder_preview_rendition_regex;   
    if(socket->queryString().keys().contains("folder_preview_rendition_regex")){
        fromStringValue(socket->queryString().value("folder_preview_rendition_regex"), folder_preview_rendition_regex);
    }
    


    emit comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl( post,  apply,  _delete,  action,  location,  propertylist,  create_preview_enabled,  update_preview_enabled,  queue_size,  folder_preview_rendition_regex);
}


void OAIConfigmgrApiRequest::comDayCqDamCoreImplUnzipUnzipConfigRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.core.impl.unzip.UnzipConfig";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCoreImplUnzipUnzipConfig, handler, &OAIConfigmgrApiHandler::comDayCqDamCoreImplUnzipUnzipConfig);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 cq_dam_config_unzip_maxuncompressedsize;   
    if(socket->queryString().keys().contains("cq_dam_config_unzip_maxuncompressedsize")){
        fromStringValue(socket->queryString().value("cq_dam_config_unzip_maxuncompressedsize"), cq_dam_config_unzip_maxuncompressedsize);
    }
    
    QString cq_dam_config_unzip_encoding;   
    if(socket->queryString().keys().contains("cq_dam_config_unzip_encoding")){
        fromStringValue(socket->queryString().value("cq_dam_config_unzip_encoding"), cq_dam_config_unzip_encoding);
    }
    


    emit comDayCqDamCoreImplUnzipUnzipConfig( post,  apply,  _delete,  action,  location,  propertylist,  cq_dam_config_unzip_maxuncompressedsize,  cq_dam_config_unzip_encoding);
}


void OAIConfigmgrApiRequest::comDayCqDamCoreProcessExifToolExtractMetadataProcessRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.core.process.ExifToolExtractMetadataProcess";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCoreProcessExifToolExtractMetadataProcess, handler, &OAIConfigmgrApiHandler::comDayCqDamCoreProcessExifToolExtractMetadataProcess);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString process_label;   
    if(socket->queryString().keys().contains("process_label")){
        fromStringValue(socket->queryString().value("process_label"), process_label);
    }
    
    bool cq_dam_enable_sha1;   
    if(socket->queryString().keys().contains("cq_dam_enable_sha1")){
        fromStringValue(socket->queryString().value("cq_dam_enable_sha1"), cq_dam_enable_sha1);
    }
    


    emit comDayCqDamCoreProcessExifToolExtractMetadataProcess( post,  apply,  _delete,  action,  location,  propertylist,  process_label,  cq_dam_enable_sha1);
}


void OAIConfigmgrApiRequest::comDayCqDamCoreProcessExtractMetadataProcessRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.core.process.ExtractMetadataProcess";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCoreProcessExtractMetadataProcess, handler, &OAIConfigmgrApiHandler::comDayCqDamCoreProcessExtractMetadataProcess);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString process_label;   
    if(socket->queryString().keys().contains("process_label")){
        fromStringValue(socket->queryString().value("process_label"), process_label);
    }
    
    bool cq_dam_enable_sha1;   
    if(socket->queryString().keys().contains("cq_dam_enable_sha1")){
        fromStringValue(socket->queryString().value("cq_dam_enable_sha1"), cq_dam_enable_sha1);
    }
    


    emit comDayCqDamCoreProcessExtractMetadataProcess( post,  apply,  _delete,  action,  location,  propertylist,  process_label,  cq_dam_enable_sha1);
}


void OAIConfigmgrApiRequest::comDayCqDamCoreProcessMetadataProcessorProcessRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.core.process.MetadataProcessorProcess";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamCoreProcessMetadataProcessorProcess, handler, &OAIConfigmgrApiHandler::comDayCqDamCoreProcessMetadataProcessorProcess);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString process_label;   
    if(socket->queryString().keys().contains("process_label")){
        fromStringValue(socket->queryString().value("process_label"), process_label);
    }
    
    bool cq_dam_enable_sha1;   
    if(socket->queryString().keys().contains("cq_dam_enable_sha1")){
        fromStringValue(socket->queryString().value("cq_dam_enable_sha1"), cq_dam_enable_sha1);
    }
    
    QList<QString> cq_dam_metadata_xssprotected_properties;   
    if(socket->queryString().keys().contains("cq_dam_metadata_xssprotected_properties")){
        fromStringValue(socket->queryString().values("cq_dam_metadata_xssprotected_properties"), cq_dam_metadata_xssprotected_properties);
    }
    


    emit comDayCqDamCoreProcessMetadataProcessorProcess( post,  apply,  _delete,  action,  location,  propertylist,  process_label,  cq_dam_enable_sha1,  cq_dam_metadata_xssprotected_properties);
}


void OAIConfigmgrApiRequest::comDayCqDamHandlerFfmpegLocatorImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.handler.ffmpeg.LocatorImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamHandlerFfmpegLocatorImpl, handler, &OAIConfigmgrApiHandler::comDayCqDamHandlerFfmpegLocatorImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> executable_searchpath;   
    if(socket->queryString().keys().contains("executable_searchpath")){
        fromStringValue(socket->queryString().values("executable_searchpath"), executable_searchpath);
    }
    


    emit comDayCqDamHandlerFfmpegLocatorImpl( post,  apply,  _delete,  action,  location,  propertylist,  executable_searchpath);
}


void OAIConfigmgrApiRequest::comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.handler.gibson.fontmanager.impl.FontManagerServiceImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl, handler, &OAIConfigmgrApiHandler::comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString event_filter;   
    if(socket->queryString().keys().contains("event_filter")){
        fromStringValue(socket->queryString().value("event_filter"), event_filter);
    }
    
    QList<QString> fontmgr_system_font_dir;   
    if(socket->queryString().keys().contains("fontmgr_system_font_dir")){
        fromStringValue(socket->queryString().values("fontmgr_system_font_dir"), fontmgr_system_font_dir);
    }
    
    QString fontmgr_adobe_font_dir;   
    if(socket->queryString().keys().contains("fontmgr_adobe_font_dir")){
        fromStringValue(socket->queryString().value("fontmgr_adobe_font_dir"), fontmgr_adobe_font_dir);
    }
    
    QString fontmgr_customer_font_dir;   
    if(socket->queryString().keys().contains("fontmgr_customer_font_dir")){
        fromStringValue(socket->queryString().value("fontmgr_customer_font_dir"), fontmgr_customer_font_dir);
    }
    


    emit comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl( post,  apply,  _delete,  action,  location,  propertylist,  event_filter,  fontmgr_system_font_dir,  fontmgr_adobe_font_dir,  fontmgr_customer_font_dir);
}


void OAIConfigmgrApiRequest::comDayCqDamHandlerStandardPdfPdfHandlerRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.handler.standard.pdf.PdfHandler";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamHandlerStandardPdfPdfHandler, handler, &OAIConfigmgrApiHandler::comDayCqDamHandlerStandardPdfPdfHandler);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool raster_annotation;   
    if(socket->queryString().keys().contains("raster_annotation")){
        fromStringValue(socket->queryString().value("raster_annotation"), raster_annotation);
    }
    


    emit comDayCqDamHandlerStandardPdfPdfHandler( post,  apply,  _delete,  action,  location,  propertylist,  raster_annotation);
}


void OAIConfigmgrApiRequest::comDayCqDamHandlerStandardPsPostScriptHandlerRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.handler.standard.ps.PostScriptHandler";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamHandlerStandardPsPostScriptHandler, handler, &OAIConfigmgrApiHandler::comDayCqDamHandlerStandardPsPostScriptHandler);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool raster_annotation;   
    if(socket->queryString().keys().contains("raster_annotation")){
        fromStringValue(socket->queryString().value("raster_annotation"), raster_annotation);
    }
    


    emit comDayCqDamHandlerStandardPsPostScriptHandler( post,  apply,  _delete,  action,  location,  propertylist,  raster_annotation);
}


void OAIConfigmgrApiRequest::comDayCqDamHandlerStandardPsdPsdHandlerRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.handler.standard.psd.PsdHandler";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamHandlerStandardPsdPsdHandler, handler, &OAIConfigmgrApiHandler::comDayCqDamHandlerStandardPsdPsdHandler);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 large_file_threshold;   
    if(socket->queryString().keys().contains("large_file_threshold")){
        fromStringValue(socket->queryString().value("large_file_threshold"), large_file_threshold);
    }
    


    emit comDayCqDamHandlerStandardPsdPsdHandler( post,  apply,  _delete,  action,  location,  propertylist,  large_file_threshold);
}


void OAIConfigmgrApiRequest::comDayCqDamIdsImplIDSJobProcessorRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.ids.impl.IDSJobProcessor";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamIdsImplIDSJobProcessor, handler, &OAIConfigmgrApiHandler::comDayCqDamIdsImplIDSJobProcessor);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool enable_multisession;   
    if(socket->queryString().keys().contains("enable_multisession")){
        fromStringValue(socket->queryString().value("enable_multisession"), enable_multisession);
    }
    
    bool ids_cc_enable;   
    if(socket->queryString().keys().contains("ids_cc_enable")){
        fromStringValue(socket->queryString().value("ids_cc_enable"), ids_cc_enable);
    }
    
    bool enable_retry;   
    if(socket->queryString().keys().contains("enable_retry")){
        fromStringValue(socket->queryString().value("enable_retry"), enable_retry);
    }
    
    bool enable_retry_scripterror;   
    if(socket->queryString().keys().contains("enable_retry_scripterror")){
        fromStringValue(socket->queryString().value("enable_retry_scripterror"), enable_retry_scripterror);
    }
    
    QString externalizer_domain_cqhost;   
    if(socket->queryString().keys().contains("externalizer_domain_cqhost")){
        fromStringValue(socket->queryString().value("externalizer_domain_cqhost"), externalizer_domain_cqhost);
    }
    
    QString externalizer_domain_http;   
    if(socket->queryString().keys().contains("externalizer_domain_http")){
        fromStringValue(socket->queryString().value("externalizer_domain_http"), externalizer_domain_http);
    }
    


    emit comDayCqDamIdsImplIDSJobProcessor( post,  apply,  _delete,  action,  location,  propertylist,  enable_multisession,  ids_cc_enable,  enable_retry,  enable_retry_scripterror,  externalizer_domain_cqhost,  externalizer_domain_http);
}


void OAIConfigmgrApiRequest::comDayCqDamIdsImplIDSPoolManagerImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.ids.impl.IDSPoolManagerImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamIdsImplIDSPoolManagerImpl, handler, &OAIConfigmgrApiHandler::comDayCqDamIdsImplIDSPoolManagerImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 max_errors_to_blacklist;   
    if(socket->queryString().keys().contains("max_errors_to_blacklist")){
        fromStringValue(socket->queryString().value("max_errors_to_blacklist"), max_errors_to_blacklist);
    }
    
    qint32 retry_interval_to_whitelist;   
    if(socket->queryString().keys().contains("retry_interval_to_whitelist")){
        fromStringValue(socket->queryString().value("retry_interval_to_whitelist"), retry_interval_to_whitelist);
    }
    
    qint32 connect_timeout;   
    if(socket->queryString().keys().contains("connect_timeout")){
        fromStringValue(socket->queryString().value("connect_timeout"), connect_timeout);
    }
    
    qint32 socket_timeout;   
    if(socket->queryString().keys().contains("socket_timeout")){
        fromStringValue(socket->queryString().value("socket_timeout"), socket_timeout);
    }
    
    QString process_label;   
    if(socket->queryString().keys().contains("process_label")){
        fromStringValue(socket->queryString().value("process_label"), process_label);
    }
    
    qint32 connection_use_max;   
    if(socket->queryString().keys().contains("connection_use_max")){
        fromStringValue(socket->queryString().value("connection_use_max"), connection_use_max);
    }
    


    emit comDayCqDamIdsImplIDSPoolManagerImpl( post,  apply,  _delete,  action,  location,  propertylist,  max_errors_to_blacklist,  retry_interval_to_whitelist,  connect_timeout,  socket_timeout,  process_label,  connection_use_max);
}


void OAIConfigmgrApiRequest::comDayCqDamInddImplHandlerIndesignXMPHandlerRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.indd.impl.handler.IndesignXMPHandler";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamInddImplHandlerIndesignXMPHandler, handler, &OAIConfigmgrApiHandler::comDayCqDamInddImplHandlerIndesignXMPHandler);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString process_label;   
    if(socket->queryString().keys().contains("process_label")){
        fromStringValue(socket->queryString().value("process_label"), process_label);
    }
    
    bool extract_pages;   
    if(socket->queryString().keys().contains("extract_pages")){
        fromStringValue(socket->queryString().value("extract_pages"), extract_pages);
    }
    


    emit comDayCqDamInddImplHandlerIndesignXMPHandler( post,  apply,  _delete,  action,  location,  propertylist,  process_label,  extract_pages);
}


void OAIConfigmgrApiRequest::comDayCqDamInddImplServletSnippetCreationServletRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.indd.impl.servlet.SnippetCreationServlet";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamInddImplServletSnippetCreationServlet, handler, &OAIConfigmgrApiHandler::comDayCqDamInddImplServletSnippetCreationServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 snippetcreation_maxcollections;   
    if(socket->queryString().keys().contains("snippetcreation_maxcollections")){
        fromStringValue(socket->queryString().value("snippetcreation_maxcollections"), snippetcreation_maxcollections);
    }
    


    emit comDayCqDamInddImplServletSnippetCreationServlet( post,  apply,  _delete,  action,  location,  propertylist,  snippetcreation_maxcollections);
}


void OAIConfigmgrApiRequest::comDayCqDamInddProcessINDDMediaExtractProcessRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.indd.process.INDDMediaExtractProcess";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamInddProcessINDDMediaExtractProcess, handler, &OAIConfigmgrApiHandler::comDayCqDamInddProcessINDDMediaExtractProcess);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString process_label;   
    if(socket->queryString().keys().contains("process_label")){
        fromStringValue(socket->queryString().value("process_label"), process_label);
    }
    
    QString cq_dam_indd_pages_regex;   
    if(socket->queryString().keys().contains("cq_dam_indd_pages_regex")){
        fromStringValue(socket->queryString().value("cq_dam_indd_pages_regex"), cq_dam_indd_pages_regex);
    }
    
    bool ids_job_decoupled;   
    if(socket->queryString().keys().contains("ids_job_decoupled")){
        fromStringValue(socket->queryString().value("ids_job_decoupled"), ids_job_decoupled);
    }
    
    QString ids_job_workflow_model;   
    if(socket->queryString().keys().contains("ids_job_workflow_model")){
        fromStringValue(socket->queryString().value("ids_job_workflow_model"), ids_job_workflow_model);
    }
    


    emit comDayCqDamInddProcessINDDMediaExtractProcess( post,  apply,  _delete,  action,  location,  propertylist,  process_label,  cq_dam_indd_pages_regex,  ids_job_decoupled,  ids_job_workflow_model);
}


void OAIConfigmgrApiRequest::comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceDataHandlerImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl, handler, &OAIConfigmgrApiHandler::comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 batch_commit_size;   
    if(socket->queryString().keys().contains("batch_commit_size")){
        fromStringValue(socket->queryString().value("batch_commit_size"), batch_commit_size);
    }
    


    emit comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl( post,  apply,  _delete,  action,  location,  propertylist,  batch_commit_size);
}


void OAIConfigmgrApiRequest::comDayCqDamPerformanceInternalAssetPerformanceReportSyncJobRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceReportSyncJob";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamPerformanceInternalAssetPerformanceReportSyncJob, handler, &OAIConfigmgrApiHandler::comDayCqDamPerformanceInternalAssetPerformanceReportSyncJob);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString scheduler_expression;   
    if(socket->queryString().keys().contains("scheduler_expression")){
        fromStringValue(socket->queryString().value("scheduler_expression"), scheduler_expression);
    }
    


    emit comDayCqDamPerformanceInternalAssetPerformanceReportSyncJob( post,  apply,  _delete,  action,  location,  propertylist,  scheduler_expression);
}


void OAIConfigmgrApiRequest::comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.pim.impl.sourcing.upload.process.ProductAssetsUploadProcess";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro, handler, &OAIConfigmgrApiHandler::comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool delete_zip_file;   
    if(socket->queryString().keys().contains("delete_zip_file")){
        fromStringValue(socket->queryString().value("delete_zip_file"), delete_zip_file);
    }
    


    emit comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro( post,  apply,  _delete,  action,  location,  propertylist,  delete_zip_file);
}


void OAIConfigmgrApiRequest::comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.S7damDynamicMediaConfigEventListener";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven, handler, &OAIConfigmgrApiHandler::comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool cq_dam_s7dam_dynamicmediaconfigeventlistener_enabled;   
    if(socket->queryString().keys().contains("cq_dam_s7dam_dynamicmediaconfigeventlistener_enabled")){
        fromStringValue(socket->queryString().value("cq_dam_s7dam_dynamicmediaconfigeventlistener_enabled"), cq_dam_s7dam_dynamicmediaconfigeventlistener_enabled);
    }
    


    emit comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven( post,  apply,  _delete,  action,  location,  propertylist,  cq_dam_s7dam_dynamicmediaconfigeventlistener_enabled);
}


void OAIConfigmgrApiRequest::comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.SiteCatalystReportRunner";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner, handler, &OAIConfigmgrApiHandler::comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString scheduler_expression;   
    if(socket->queryString().keys().contains("scheduler_expression")){
        fromStringValue(socket->queryString().value("scheduler_expression"), scheduler_expression);
    }
    
    bool scheduler_concurrent;   
    if(socket->queryString().keys().contains("scheduler_concurrent")){
        fromStringValue(socket->queryString().value("scheduler_concurrent"), scheduler_concurrent);
    }
    


    emit comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner( post,  apply,  _delete,  action,  location,  propertylist,  scheduler_expression,  scheduler_concurrent);
}


void OAIConfigmgrApiRequest::comDayCqDamS7damCommonPostServletsSetCreateHandlerRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetCreateHandler";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamS7damCommonPostServletsSetCreateHandler, handler, &OAIConfigmgrApiHandler::comDayCqDamS7damCommonPostServletsSetCreateHandler);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString sling_post_operation;   
    if(socket->queryString().keys().contains("sling_post_operation")){
        fromStringValue(socket->queryString().value("sling_post_operation"), sling_post_operation);
    }
    
    QString sling_servlet_methods;   
    if(socket->queryString().keys().contains("sling_servlet_methods")){
        fromStringValue(socket->queryString().value("sling_servlet_methods"), sling_servlet_methods);
    }
    


    emit comDayCqDamS7damCommonPostServletsSetCreateHandler( post,  apply,  _delete,  action,  location,  propertylist,  sling_post_operation,  sling_servlet_methods);
}


void OAIConfigmgrApiRequest::comDayCqDamS7damCommonPostServletsSetModifyHandlerRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetModifyHandler";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamS7damCommonPostServletsSetModifyHandler, handler, &OAIConfigmgrApiHandler::comDayCqDamS7damCommonPostServletsSetModifyHandler);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString sling_post_operation;   
    if(socket->queryString().keys().contains("sling_post_operation")){
        fromStringValue(socket->queryString().value("sling_post_operation"), sling_post_operation);
    }
    
    QString sling_servlet_methods;   
    if(socket->queryString().keys().contains("sling_servlet_methods")){
        fromStringValue(socket->queryString().value("sling_servlet_methods"), sling_servlet_methods);
    }
    


    emit comDayCqDamS7damCommonPostServletsSetModifyHandler( post,  apply,  _delete,  action,  location,  propertylist,  sling_post_operation,  sling_servlet_methods);
}


void OAIConfigmgrApiRequest::comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.s7dam.common.process.VideoThumbnailDownloadProcess";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess, handler, &OAIConfigmgrApiHandler::comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString process_label;   
    if(socket->queryString().keys().contains("process_label")){
        fromStringValue(socket->queryString().value("process_label"), process_label);
    }
    


    emit comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess( post,  apply,  _delete,  action,  location,  propertylist,  process_label);
}


void OAIConfigmgrApiRequest::comDayCqDamS7damCommonS7damDamChangeEventListenerRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.s7dam.common.S7damDamChangeEventListener";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamS7damCommonS7damDamChangeEventListener, handler, &OAIConfigmgrApiHandler::comDayCqDamS7damCommonS7damDamChangeEventListener);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool cq_dam_s7dam_damchangeeventlistener_enabled;   
    if(socket->queryString().keys().contains("cq_dam_s7dam_damchangeeventlistener_enabled")){
        fromStringValue(socket->queryString().value("cq_dam_s7dam_damchangeeventlistener_enabled"), cq_dam_s7dam_damchangeeventlistener_enabled);
    }
    


    emit comDayCqDamS7damCommonS7damDamChangeEventListener( post,  apply,  _delete,  action,  location,  propertylist,  cq_dam_s7dam_damchangeeventlistener_enabled);
}


void OAIConfigmgrApiRequest::comDayCqDamS7damCommonServletsS7damProductInfoServletRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.s7dam.common.servlets.S7damProductInfoServlet";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamS7damCommonServletsS7damProductInfoServlet, handler, &OAIConfigmgrApiHandler::comDayCqDamS7damCommonServletsS7damProductInfoServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString sling_servlet_paths;   
    if(socket->queryString().keys().contains("sling_servlet_paths")){
        fromStringValue(socket->queryString().value("sling_servlet_paths"), sling_servlet_paths);
    }
    
    QString sling_servlet_methods;   
    if(socket->queryString().keys().contains("sling_servlet_methods")){
        fromStringValue(socket->queryString().value("sling_servlet_methods"), sling_servlet_methods);
    }
    


    emit comDayCqDamS7damCommonServletsS7damProductInfoServlet( post,  apply,  _delete,  action,  location,  propertylist,  sling_servlet_paths,  sling_servlet_methods);
}


void OAIConfigmgrApiRequest::comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.s7dam.common.video.impl.VideoProxyClientServiceImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl, handler, &OAIConfigmgrApiHandler::comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 cq_dam_s7dam_videoproxyclientservice_multipartupload_minsize_name;   
    if(socket->queryString().keys().contains("cq_dam_s7dam_videoproxyclientservice_multipartupload_minsize_name")){
        fromStringValue(socket->queryString().value("cq_dam_s7dam_videoproxyclientservice_multipartupload_minsize_name"), cq_dam_s7dam_videoproxyclientservice_multipartupload_minsize_name);
    }
    
    qint32 cq_dam_s7dam_videoproxyclientservice_multipartupload_partsize_name;   
    if(socket->queryString().keys().contains("cq_dam_s7dam_videoproxyclientservice_multipartupload_partsize_name")){
        fromStringValue(socket->queryString().value("cq_dam_s7dam_videoproxyclientservice_multipartupload_partsize_name"), cq_dam_s7dam_videoproxyclientservice_multipartupload_partsize_name);
    }
    
    qint32 cq_dam_s7dam_videoproxyclientservice_multipartupload_numthread_name;   
    if(socket->queryString().keys().contains("cq_dam_s7dam_videoproxyclientservice_multipartupload_numthread_name")){
        fromStringValue(socket->queryString().value("cq_dam_s7dam_videoproxyclientservice_multipartupload_numthread_name"), cq_dam_s7dam_videoproxyclientservice_multipartupload_numthread_name);
    }
    
    qint32 cq_dam_s7dam_videoproxyclientservice_http_readtimeout_name;   
    if(socket->queryString().keys().contains("cq_dam_s7dam_videoproxyclientservice_http_readtimeout_name")){
        fromStringValue(socket->queryString().value("cq_dam_s7dam_videoproxyclientservice_http_readtimeout_name"), cq_dam_s7dam_videoproxyclientservice_http_readtimeout_name);
    }
    
    qint32 cq_dam_s7dam_videoproxyclientservice_http_connectiontimeout_name;   
    if(socket->queryString().keys().contains("cq_dam_s7dam_videoproxyclientservice_http_connectiontimeout_name")){
        fromStringValue(socket->queryString().value("cq_dam_s7dam_videoproxyclientservice_http_connectiontimeout_name"), cq_dam_s7dam_videoproxyclientservice_http_connectiontimeout_name);
    }
    
    qint32 cq_dam_s7dam_videoproxyclientservice_http_maxretrycount_name;   
    if(socket->queryString().keys().contains("cq_dam_s7dam_videoproxyclientservice_http_maxretrycount_name")){
        fromStringValue(socket->queryString().value("cq_dam_s7dam_videoproxyclientservice_http_maxretrycount_name"), cq_dam_s7dam_videoproxyclientservice_http_maxretrycount_name);
    }
    
    qint32 cq_dam_s7dam_videoproxyclientservice_uploadprogress_interval_name;   
    if(socket->queryString().keys().contains("cq_dam_s7dam_videoproxyclientservice_uploadprogress_interval_name")){
        fromStringValue(socket->queryString().value("cq_dam_s7dam_videoproxyclientservice_uploadprogress_interval_name"), cq_dam_s7dam_videoproxyclientservice_uploadprogress_interval_name);
    }
    


    emit comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl( post,  apply,  _delete,  action,  location,  propertylist,  cq_dam_s7dam_videoproxyclientservice_multipartupload_minsize_name,  cq_dam_s7dam_videoproxyclientservice_multipartupload_partsize_name,  cq_dam_s7dam_videoproxyclientservice_multipartupload_numthread_name,  cq_dam_s7dam_videoproxyclientservice_http_readtimeout_name,  cq_dam_s7dam_videoproxyclientservice_http_connectiontimeout_name,  cq_dam_s7dam_videoproxyclientservice_http_maxretrycount_name,  cq_dam_s7dam_videoproxyclientservice_uploadprogress_interval_name);
}


void OAIConfigmgrApiRequest::comDayCqDamScene7ImplScene7APIClientImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7APIClientImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamScene7ImplScene7APIClientImpl, handler, &OAIConfigmgrApiHandler::comDayCqDamScene7ImplScene7APIClientImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 cq_dam_scene7_apiclient_recordsperpage_nofilter_name;   
    if(socket->queryString().keys().contains("cq_dam_scene7_apiclient_recordsperpage_nofilter_name")){
        fromStringValue(socket->queryString().value("cq_dam_scene7_apiclient_recordsperpage_nofilter_name"), cq_dam_scene7_apiclient_recordsperpage_nofilter_name);
    }
    
    qint32 cq_dam_scene7_apiclient_recordsperpage_withfilter_name;   
    if(socket->queryString().keys().contains("cq_dam_scene7_apiclient_recordsperpage_withfilter_name")){
        fromStringValue(socket->queryString().value("cq_dam_scene7_apiclient_recordsperpage_withfilter_name"), cq_dam_scene7_apiclient_recordsperpage_withfilter_name);
    }
    


    emit comDayCqDamScene7ImplScene7APIClientImpl( post,  apply,  _delete,  action,  location,  propertylist,  cq_dam_scene7_apiclient_recordsperpage_nofilter_name,  cq_dam_scene7_apiclient_recordsperpage_withfilter_name);
}


void OAIConfigmgrApiRequest::comDayCqDamScene7ImplScene7AssetMimeTypeServiceImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7AssetMimeTypeServiceImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl, handler, &OAIConfigmgrApiHandler::comDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> cq_dam_scene7_assetmimetypeservice_mapping;   
    if(socket->queryString().keys().contains("cq_dam_scene7_assetmimetypeservice_mapping")){
        fromStringValue(socket->queryString().values("cq_dam_scene7_assetmimetypeservice_mapping"), cq_dam_scene7_assetmimetypeservice_mapping);
    }
    


    emit comDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl( post,  apply,  _delete,  action,  location,  propertylist,  cq_dam_scene7_assetmimetypeservice_mapping);
}


void OAIConfigmgrApiRequest::comDayCqDamScene7ImplScene7ConfigurationEventListenerRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7ConfigurationEventListener";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamScene7ImplScene7ConfigurationEventListener, handler, &OAIConfigmgrApiHandler::comDayCqDamScene7ImplScene7ConfigurationEventListener);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool cq_dam_scene7_configurationeventlistener_enabled;   
    if(socket->queryString().keys().contains("cq_dam_scene7_configurationeventlistener_enabled")){
        fromStringValue(socket->queryString().value("cq_dam_scene7_configurationeventlistener_enabled"), cq_dam_scene7_configurationeventlistener_enabled);
    }
    


    emit comDayCqDamScene7ImplScene7ConfigurationEventListener( post,  apply,  _delete,  action,  location,  propertylist,  cq_dam_scene7_configurationeventlistener_enabled);
}


void OAIConfigmgrApiRequest::comDayCqDamScene7ImplScene7DamChangeEventListenerRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7DamChangeEventListener";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamScene7ImplScene7DamChangeEventListener, handler, &OAIConfigmgrApiHandler::comDayCqDamScene7ImplScene7DamChangeEventListener);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool cq_dam_scene7_damchangeeventlistener_enabled;   
    if(socket->queryString().keys().contains("cq_dam_scene7_damchangeeventlistener_enabled")){
        fromStringValue(socket->queryString().value("cq_dam_scene7_damchangeeventlistener_enabled"), cq_dam_scene7_damchangeeventlistener_enabled);
    }
    
    QList<QString> cq_dam_scene7_damchangeeventlistener_observed_paths;   
    if(socket->queryString().keys().contains("cq_dam_scene7_damchangeeventlistener_observed_paths")){
        fromStringValue(socket->queryString().values("cq_dam_scene7_damchangeeventlistener_observed_paths"), cq_dam_scene7_damchangeeventlistener_observed_paths);
    }
    


    emit comDayCqDamScene7ImplScene7DamChangeEventListener( post,  apply,  _delete,  action,  location,  propertylist,  cq_dam_scene7_damchangeeventlistener_enabled,  cq_dam_scene7_damchangeeventlistener_observed_paths);
}


void OAIConfigmgrApiRequest::comDayCqDamScene7ImplScene7FlashTemplatesServiceImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7FlashTemplatesServiceImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamScene7ImplScene7FlashTemplatesServiceImpl, handler, &OAIConfigmgrApiHandler::comDayCqDamScene7ImplScene7FlashTemplatesServiceImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString scene7_flash_templates_rti;   
    if(socket->queryString().keys().contains("scene7_flash_templates_rti")){
        fromStringValue(socket->queryString().value("scene7_flash_templates_rti"), scene7_flash_templates_rti);
    }
    
    QString scene7_flash_templates_rsi;   
    if(socket->queryString().keys().contains("scene7_flash_templates_rsi")){
        fromStringValue(socket->queryString().value("scene7_flash_templates_rsi"), scene7_flash_templates_rsi);
    }
    
    QString scene7_flash_templates_rb;   
    if(socket->queryString().keys().contains("scene7_flash_templates_rb")){
        fromStringValue(socket->queryString().value("scene7_flash_templates_rb"), scene7_flash_templates_rb);
    }
    
    QString scene7_flash_templates_rurl;   
    if(socket->queryString().keys().contains("scene7_flash_templates_rurl")){
        fromStringValue(socket->queryString().value("scene7_flash_templates_rurl"), scene7_flash_templates_rurl);
    }
    
    QString scene7_flash_template_url_format_parameter;   
    if(socket->queryString().keys().contains("scene7_flash_template_url_format_parameter")){
        fromStringValue(socket->queryString().value("scene7_flash_template_url_format_parameter"), scene7_flash_template_url_format_parameter);
    }
    


    emit comDayCqDamScene7ImplScene7FlashTemplatesServiceImpl( post,  apply,  _delete,  action,  location,  propertylist,  scene7_flash_templates_rti,  scene7_flash_templates_rsi,  scene7_flash_templates_rb,  scene7_flash_templates_rurl,  scene7_flash_template_url_format_parameter);
}


void OAIConfigmgrApiRequest::comDayCqDamScene7ImplScene7UploadServiceImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7UploadServiceImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamScene7ImplScene7UploadServiceImpl, handler, &OAIConfigmgrApiHandler::comDayCqDamScene7ImplScene7UploadServiceImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 cq_dam_scene7_uploadservice_activejobtimeout_label;   
    if(socket->queryString().keys().contains("cq_dam_scene7_uploadservice_activejobtimeout_label")){
        fromStringValue(socket->queryString().value("cq_dam_scene7_uploadservice_activejobtimeout_label"), cq_dam_scene7_uploadservice_activejobtimeout_label);
    }
    
    qint32 cq_dam_scene7_uploadservice_connectionmaxperroute_label;   
    if(socket->queryString().keys().contains("cq_dam_scene7_uploadservice_connectionmaxperroute_label")){
        fromStringValue(socket->queryString().value("cq_dam_scene7_uploadservice_connectionmaxperroute_label"), cq_dam_scene7_uploadservice_connectionmaxperroute_label);
    }
    


    emit comDayCqDamScene7ImplScene7UploadServiceImpl( post,  apply,  _delete,  action,  location,  propertylist,  cq_dam_scene7_uploadservice_activejobtimeout_label,  cq_dam_scene7_uploadservice_connectionmaxperroute_label);
}


void OAIConfigmgrApiRequest::comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.stock.integration.impl.cache.StockCacheConfigurationServiceImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer, handler, &OAIConfigmgrApiHandler::comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString get_cache_expiration_unit;   
    if(socket->queryString().keys().contains("get_cache_expiration_unit")){
        fromStringValue(socket->queryString().value("get_cache_expiration_unit"), get_cache_expiration_unit);
    }
    
    qint32 get_cache_expiration_value;   
    if(socket->queryString().keys().contains("get_cache_expiration_value")){
        fromStringValue(socket->queryString().value("get_cache_expiration_value"), get_cache_expiration_value);
    }
    


    emit comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer( post,  apply,  _delete,  action,  location,  propertylist,  get_cache_expiration_unit,  get_cache_expiration_value);
}


void OAIConfigmgrApiRequest::comDayCqDamStockIntegrationImplConfigurationStockConfigurationRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.stock.integration.impl.configuration.StockConfigurationImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamStockIntegrationImplConfigurationStockConfiguration, handler, &OAIConfigmgrApiHandler::comDayCqDamStockIntegrationImplConfigurationStockConfiguration);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString name;   
    if(socket->queryString().keys().contains("name")){
        fromStringValue(socket->queryString().value("name"), name);
    }
    
    QString locale;   
    if(socket->queryString().keys().contains("locale")){
        fromStringValue(socket->queryString().value("locale"), locale);
    }
    
    QString ims_config;   
    if(socket->queryString().keys().contains("ims_config")){
        fromStringValue(socket->queryString().value("ims_config"), ims_config);
    }
    


    emit comDayCqDamStockIntegrationImplConfigurationStockConfiguration( post,  apply,  _delete,  action,  location,  propertylist,  name,  locale,  ims_config);
}


void OAIConfigmgrApiRequest::comDayCqDamVideoImplServletVideoTestServletRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.dam.video.impl.servlet.VideoTestServlet";
    connect(this, &OAIConfigmgrApiRequest::comDayCqDamVideoImplServletVideoTestServlet, handler, &OAIConfigmgrApiHandler::comDayCqDamVideoImplServletVideoTestServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool enabled;   
    if(socket->queryString().keys().contains("enabled")){
        fromStringValue(socket->queryString().value("enabled"), enabled);
    }
    


    emit comDayCqDamVideoImplServletVideoTestServlet( post,  apply,  _delete,  action,  location,  propertylist,  enabled);
}


void OAIConfigmgrApiRequest::comDayCqExtwidgetServletsImageSpriteServletRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.extwidget.servlets.ImageSpriteServlet";
    connect(this, &OAIConfigmgrApiRequest::comDayCqExtwidgetServletsImageSpriteServlet, handler, &OAIConfigmgrApiHandler::comDayCqExtwidgetServletsImageSpriteServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 max_width;   
    if(socket->queryString().keys().contains("max_width")){
        fromStringValue(socket->queryString().value("max_width"), max_width);
    }
    
    qint32 max_height;   
    if(socket->queryString().keys().contains("max_height")){
        fromStringValue(socket->queryString().value("max_height"), max_height);
    }
    


    emit comDayCqExtwidgetServletsImageSpriteServlet( post,  apply,  _delete,  action,  location,  propertylist,  max_width,  max_height);
}


void OAIConfigmgrApiRequest::comDayCqImageInternalFontFontHelperRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.image.internal.font.FontHelper";
    connect(this, &OAIConfigmgrApiRequest::comDayCqImageInternalFontFontHelper, handler, &OAIConfigmgrApiHandler::comDayCqImageInternalFontFontHelper);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> fontpath;   
    if(socket->queryString().keys().contains("fontpath")){
        fromStringValue(socket->queryString().values("fontpath"), fontpath);
    }
    
    qint32 oversampling_factor;   
    if(socket->queryString().keys().contains("oversampling_factor")){
        fromStringValue(socket->queryString().value("oversampling_factor"), oversampling_factor);
    }
    


    emit comDayCqImageInternalFontFontHelper( post,  apply,  _delete,  action,  location,  propertylist,  fontpath,  oversampling_factor);
}


void OAIConfigmgrApiRequest::comDayCqJcrclustersupportClusterStartLevelControllerRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.jcrclustersupport.ClusterStartLevelController";
    connect(this, &OAIConfigmgrApiRequest::comDayCqJcrclustersupportClusterStartLevelController, handler, &OAIConfigmgrApiHandler::comDayCqJcrclustersupportClusterStartLevelController);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool cluster_level_enable;   
    if(socket->queryString().keys().contains("cluster_level_enable")){
        fromStringValue(socket->queryString().value("cluster_level_enable"), cluster_level_enable);
    }
    
    qint32 cluster_master_level;   
    if(socket->queryString().keys().contains("cluster_master_level")){
        fromStringValue(socket->queryString().value("cluster_master_level"), cluster_master_level);
    }
    
    qint32 cluster_slave_level;   
    if(socket->queryString().keys().contains("cluster_slave_level")){
        fromStringValue(socket->queryString().value("cluster_slave_level"), cluster_slave_level);
    }
    


    emit comDayCqJcrclustersupportClusterStartLevelController( post,  apply,  _delete,  action,  location,  propertylist,  cluster_level_enable,  cluster_master_level,  cluster_slave_level);
}


void OAIConfigmgrApiRequest::comDayCqMailerDefaultMailServiceRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.mailer.DefaultMailService";
    connect(this, &OAIConfigmgrApiRequest::comDayCqMailerDefaultMailService, handler, &OAIConfigmgrApiHandler::comDayCqMailerDefaultMailService);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString smtp_host;   
    if(socket->queryString().keys().contains("smtp_host")){
        fromStringValue(socket->queryString().value("smtp_host"), smtp_host);
    }
    
    qint32 smtp_port;   
    if(socket->queryString().keys().contains("smtp_port")){
        fromStringValue(socket->queryString().value("smtp_port"), smtp_port);
    }
    
    QString smtp_user;   
    if(socket->queryString().keys().contains("smtp_user")){
        fromStringValue(socket->queryString().value("smtp_user"), smtp_user);
    }
    
    QString smtp_password;   
    if(socket->queryString().keys().contains("smtp_password")){
        fromStringValue(socket->queryString().value("smtp_password"), smtp_password);
    }
    
    QString from_address;   
    if(socket->queryString().keys().contains("from_address")){
        fromStringValue(socket->queryString().value("from_address"), from_address);
    }
    
    bool smtp_ssl;   
    if(socket->queryString().keys().contains("smtp_ssl")){
        fromStringValue(socket->queryString().value("smtp_ssl"), smtp_ssl);
    }
    
    bool smtp_starttls;   
    if(socket->queryString().keys().contains("smtp_starttls")){
        fromStringValue(socket->queryString().value("smtp_starttls"), smtp_starttls);
    }
    
    bool debug_email;   
    if(socket->queryString().keys().contains("debug_email")){
        fromStringValue(socket->queryString().value("debug_email"), debug_email);
    }
    


    emit comDayCqMailerDefaultMailService( post,  apply,  _delete,  action,  location,  propertylist,  smtp_host,  smtp_port,  smtp_user,  smtp_password,  from_address,  smtp_ssl,  smtp_starttls,  debug_email);
}


void OAIConfigmgrApiRequest::comDayCqMailerImplCqMailingServiceRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.mailer.impl.CqMailingService";
    connect(this, &OAIConfigmgrApiRequest::comDayCqMailerImplCqMailingService, handler, &OAIConfigmgrApiHandler::comDayCqMailerImplCqMailingService);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString max_recipient_count;   
    if(socket->queryString().keys().contains("max_recipient_count")){
        fromStringValue(socket->queryString().value("max_recipient_count"), max_recipient_count);
    }
    


    emit comDayCqMailerImplCqMailingService( post,  apply,  _delete,  action,  location,  propertylist,  max_recipient_count);
}


void OAIConfigmgrApiRequest::comDayCqMailerImplEmailCqEmailTemplateFactoryRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.mailer.impl.email.CqEmailTemplateFactory";
    connect(this, &OAIConfigmgrApiRequest::comDayCqMailerImplEmailCqEmailTemplateFactory, handler, &OAIConfigmgrApiHandler::comDayCqMailerImplEmailCqEmailTemplateFactory);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString mailer_email_charset;   
    if(socket->queryString().keys().contains("mailer_email_charset")){
        fromStringValue(socket->queryString().value("mailer_email_charset"), mailer_email_charset);
    }
    


    emit comDayCqMailerImplEmailCqEmailTemplateFactory( post,  apply,  _delete,  action,  location,  propertylist,  mailer_email_charset);
}


void OAIConfigmgrApiRequest::comDayCqMailerImplEmailCqRetrieverTemplateFactoryRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.mailer.impl.email.CqRetrieverTemplateFactory";
    connect(this, &OAIConfigmgrApiRequest::comDayCqMailerImplEmailCqRetrieverTemplateFactory, handler, &OAIConfigmgrApiHandler::comDayCqMailerImplEmailCqRetrieverTemplateFactory);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool mailer_email_embed;   
    if(socket->queryString().keys().contains("mailer_email_embed")){
        fromStringValue(socket->queryString().value("mailer_email_embed"), mailer_email_embed);
    }
    
    QString mailer_email_charset;   
    if(socket->queryString().keys().contains("mailer_email_charset")){
        fromStringValue(socket->queryString().value("mailer_email_charset"), mailer_email_charset);
    }
    
    QString mailer_email_retriever_user_id;   
    if(socket->queryString().keys().contains("mailer_email_retriever_user_id")){
        fromStringValue(socket->queryString().value("mailer_email_retriever_user_id"), mailer_email_retriever_user_id);
    }
    
    QString mailer_email_retriever_user_pwd;   
    if(socket->queryString().keys().contains("mailer_email_retriever_user_pwd")){
        fromStringValue(socket->queryString().value("mailer_email_retriever_user_pwd"), mailer_email_retriever_user_pwd);
    }
    


    emit comDayCqMailerImplEmailCqRetrieverTemplateFactory( post,  apply,  _delete,  action,  location,  propertylist,  mailer_email_embed,  mailer_email_charset,  mailer_email_retriever_user_id,  mailer_email_retriever_user_pwd);
}


void OAIConfigmgrApiRequest::comDayCqMcmCampaignImplIntegrationConfigImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.mcm.campaign.impl.IntegrationConfigImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqMcmCampaignImplIntegrationConfigImpl, handler, &OAIConfigmgrApiHandler::comDayCqMcmCampaignImplIntegrationConfigImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> aem_mcm_campaign_form_constraints;   
    if(socket->queryString().keys().contains("aem_mcm_campaign_form_constraints")){
        fromStringValue(socket->queryString().values("aem_mcm_campaign_form_constraints"), aem_mcm_campaign_form_constraints);
    }
    
    QString aem_mcm_campaign_public_url;   
    if(socket->queryString().keys().contains("aem_mcm_campaign_public_url")){
        fromStringValue(socket->queryString().value("aem_mcm_campaign_public_url"), aem_mcm_campaign_public_url);
    }
    
    bool aem_mcm_campaign_relaxed_ssl;   
    if(socket->queryString().keys().contains("aem_mcm_campaign_relaxed_ssl")){
        fromStringValue(socket->queryString().value("aem_mcm_campaign_relaxed_ssl"), aem_mcm_campaign_relaxed_ssl);
    }
    


    emit comDayCqMcmCampaignImplIntegrationConfigImpl( post,  apply,  _delete,  action,  location,  propertylist,  aem_mcm_campaign_form_constraints,  aem_mcm_campaign_public_url,  aem_mcm_campaign_relaxed_ssl);
}


void OAIConfigmgrApiRequest::comDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.mcm.campaign.importer.PersonalizedTextHandlerFactory";
    connect(this, &OAIConfigmgrApiRequest::comDayCqMcmCampaignImporterPersonalizedTextHandlerFactory, handler, &OAIConfigmgrApiHandler::comDayCqMcmCampaignImporterPersonalizedTextHandlerFactory);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 service_ranking;   
    if(socket->queryString().keys().contains("service_ranking")){
        fromStringValue(socket->queryString().value("service_ranking"), service_ranking);
    }
    
    QString tagpattern;   
    if(socket->queryString().keys().contains("tagpattern")){
        fromStringValue(socket->queryString().value("tagpattern"), tagpattern);
    }
    


    emit comDayCqMcmCampaignImporterPersonalizedTextHandlerFactory( post,  apply,  _delete,  action,  location,  propertylist,  service_ranking,  tagpattern);
}


void OAIConfigmgrApiRequest::comDayCqMcmCoreNewsletterNewsletterEmailServiceImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.mcm.core.newsletter.NewsletterEmailServiceImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqMcmCoreNewsletterNewsletterEmailServiceImpl, handler, &OAIConfigmgrApiHandler::comDayCqMcmCoreNewsletterNewsletterEmailServiceImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString from_address;   
    if(socket->queryString().keys().contains("from_address")){
        fromStringValue(socket->queryString().value("from_address"), from_address);
    }
    
    QString sender_host;   
    if(socket->queryString().keys().contains("sender_host")){
        fromStringValue(socket->queryString().value("sender_host"), sender_host);
    }
    
    QString max_bounce_count;   
    if(socket->queryString().keys().contains("max_bounce_count")){
        fromStringValue(socket->queryString().value("max_bounce_count"), max_bounce_count);
    }
    


    emit comDayCqMcmCoreNewsletterNewsletterEmailServiceImpl( post,  apply,  _delete,  action,  location,  propertylist,  from_address,  sender_host,  max_bounce_count);
}


void OAIConfigmgrApiRequest::comDayCqMcmImplMCMConfigurationRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.mcm.impl.MCMConfiguration";
    connect(this, &OAIConfigmgrApiRequest::comDayCqMcmImplMCMConfiguration, handler, &OAIConfigmgrApiHandler::comDayCqMcmImplMCMConfiguration);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> experience_indirection;   
    if(socket->queryString().keys().contains("experience_indirection")){
        fromStringValue(socket->queryString().values("experience_indirection"), experience_indirection);
    }
    
    QList<QString> touchpoint_indirection;   
    if(socket->queryString().keys().contains("touchpoint_indirection")){
        fromStringValue(socket->queryString().values("touchpoint_indirection"), touchpoint_indirection);
    }
    


    emit comDayCqMcmImplMCMConfiguration( post,  apply,  _delete,  action,  location,  propertylist,  experience_indirection,  touchpoint_indirection);
}


void OAIConfigmgrApiRequest::comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.ClickThroughComponentTagHandlerFactory";
    connect(this, &OAIConfigmgrApiRequest::comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen, handler, &OAIConfigmgrApiHandler::comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 service_ranking;   
    if(socket->queryString().keys().contains("service_ranking")){
        fromStringValue(socket->queryString().value("service_ranking"), service_ranking);
    }
    
    QString tagpattern;   
    if(socket->queryString().keys().contains("tagpattern")){
        fromStringValue(socket->queryString().value("tagpattern"), tagpattern);
    }
    
    QString component_resource_type;   
    if(socket->queryString().keys().contains("component_resource_type")){
        fromStringValue(socket->queryString().value("component_resource_type"), component_resource_type);
    }
    


    emit comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen( post,  apply,  _delete,  action,  location,  propertylist,  service_ranking,  tagpattern,  component_resource_type);
}


void OAIConfigmgrApiRequest::comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.GraphicalClickThroughComponentTagHandlerFactory";
    connect(this, &OAIConfigmgrApiRequest::comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug, handler, &OAIConfigmgrApiHandler::comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 service_ranking;   
    if(socket->queryString().keys().contains("service_ranking")){
        fromStringValue(socket->queryString().value("service_ranking"), service_ranking);
    }
    
    QString tagpattern;   
    if(socket->queryString().keys().contains("tagpattern")){
        fromStringValue(socket->queryString().value("tagpattern"), tagpattern);
    }
    
    QString component_resource_type;   
    if(socket->queryString().keys().contains("component_resource_type")){
        fromStringValue(socket->queryString().value("component_resource_type"), component_resource_type);
    }
    


    emit comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug( post,  apply,  _delete,  action,  location,  propertylist,  service_ranking,  tagpattern,  component_resource_type);
}


void OAIConfigmgrApiRequest::comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.LeadFormCTAComponentTagHandlerFactory";
    connect(this, &OAIConfigmgrApiRequest::comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent, handler, &OAIConfigmgrApiHandler::comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 service_ranking;   
    if(socket->queryString().keys().contains("service_ranking")){
        fromStringValue(socket->queryString().value("service_ranking"), service_ranking);
    }
    
    QString tagpattern;   
    if(socket->queryString().keys().contains("tagpattern")){
        fromStringValue(socket->queryString().value("tagpattern"), tagpattern);
    }
    


    emit comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent( post,  apply,  _delete,  action,  location,  propertylist,  service_ranking,  tagpattern);
}


void OAIConfigmgrApiRequest::comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.MBoxExperienceTagHandlerFactory";
    connect(this, &OAIConfigmgrApiRequest::comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa, handler, &OAIConfigmgrApiHandler::comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 service_ranking;   
    if(socket->queryString().keys().contains("service_ranking")){
        fromStringValue(socket->queryString().value("service_ranking"), service_ranking);
    }
    
    QString tagpattern;   
    if(socket->queryString().keys().contains("tagpattern")){
        fromStringValue(socket->queryString().value("tagpattern"), tagpattern);
    }
    


    emit comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa( post,  apply,  _delete,  action,  location,  propertylist,  service_ranking,  tagpattern);
}


void OAIConfigmgrApiRequest::comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.TargetComponentTagHandlerFactory";
    connect(this, &OAIConfigmgrApiRequest::comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH, handler, &OAIConfigmgrApiHandler::comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 service_ranking;   
    if(socket->queryString().keys().contains("service_ranking")){
        fromStringValue(socket->queryString().value("service_ranking"), service_ranking);
    }
    
    QString tagpattern;   
    if(socket->queryString().keys().contains("tagpattern")){
        fromStringValue(socket->queryString().value("tagpattern"), tagpattern);
    }
    
    QString component_resource_type;   
    if(socket->queryString().keys().contains("component_resource_type")){
        fromStringValue(socket->queryString().value("component_resource_type"), component_resource_type);
    }
    


    emit comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH( post,  apply,  _delete,  action,  location,  propertylist,  service_ranking,  tagpattern,  component_resource_type);
}


void OAIConfigmgrApiRequest::comDayCqNotificationImplNotificationServiceImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.notification.impl.NotificationServiceImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqNotificationImplNotificationServiceImpl, handler, &OAIConfigmgrApiHandler::comDayCqNotificationImplNotificationServiceImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString event_filter;   
    if(socket->queryString().keys().contains("event_filter")){
        fromStringValue(socket->queryString().value("event_filter"), event_filter);
    }
    


    emit comDayCqNotificationImplNotificationServiceImpl( post,  apply,  _delete,  action,  location,  propertylist,  event_filter);
}


void OAIConfigmgrApiRequest::comDayCqPersonalizationImplServletsTargetingConfigurationServletRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.personalization.impl.servlets.TargetingConfigurationServlet";
    connect(this, &OAIConfigmgrApiRequest::comDayCqPersonalizationImplServletsTargetingConfigurationServlet, handler, &OAIConfigmgrApiHandler::comDayCqPersonalizationImplServletsTargetingConfigurationServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool forcelocation;   
    if(socket->queryString().keys().contains("forcelocation")){
        fromStringValue(socket->queryString().value("forcelocation"), forcelocation);
    }
    


    emit comDayCqPersonalizationImplServletsTargetingConfigurationServlet( post,  apply,  _delete,  action,  location,  propertylist,  forcelocation);
}


void OAIConfigmgrApiRequest::comDayCqPollingImporterImplManagedPollConfigImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollConfigImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqPollingImporterImplManagedPollConfigImpl, handler, &OAIConfigmgrApiHandler::comDayCqPollingImporterImplManagedPollConfigImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString id;   
    if(socket->queryString().keys().contains("id")){
        fromStringValue(socket->queryString().value("id"), id);
    }
    
    bool enabled;   
    if(socket->queryString().keys().contains("enabled")){
        fromStringValue(socket->queryString().value("enabled"), enabled);
    }
    
    bool reference;   
    if(socket->queryString().keys().contains("reference")){
        fromStringValue(socket->queryString().value("reference"), reference);
    }
    
    qint32 interval;   
    if(socket->queryString().keys().contains("interval")){
        fromStringValue(socket->queryString().value("interval"), interval);
    }
    
    QString expression;   
    if(socket->queryString().keys().contains("expression")){
        fromStringValue(socket->queryString().value("expression"), expression);
    }
    
    QString source;   
    if(socket->queryString().keys().contains("source")){
        fromStringValue(socket->queryString().value("source"), source);
    }
    
    QString target;   
    if(socket->queryString().keys().contains("target")){
        fromStringValue(socket->queryString().value("target"), target);
    }
    
    QString login;   
    if(socket->queryString().keys().contains("login")){
        fromStringValue(socket->queryString().value("login"), login);
    }
    
    QString password;   
    if(socket->queryString().keys().contains("password")){
        fromStringValue(socket->queryString().value("password"), password);
    }
    


    emit comDayCqPollingImporterImplManagedPollConfigImpl( post,  apply,  _delete,  action,  location,  propertylist,  id,  enabled,  reference,  interval,  expression,  source,  target,  login,  password);
}


void OAIConfigmgrApiRequest::comDayCqPollingImporterImplManagedPollingImporterImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollingImporterImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqPollingImporterImplManagedPollingImporterImpl, handler, &OAIConfigmgrApiHandler::comDayCqPollingImporterImplManagedPollingImporterImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString importer_user;   
    if(socket->queryString().keys().contains("importer_user")){
        fromStringValue(socket->queryString().value("importer_user"), importer_user);
    }
    


    emit comDayCqPollingImporterImplManagedPollingImporterImpl( post,  apply,  _delete,  action,  location,  propertylist,  importer_user);
}


void OAIConfigmgrApiRequest::comDayCqPollingImporterImplPollingImporterImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.polling.importer.impl.PollingImporterImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqPollingImporterImplPollingImporterImpl, handler, &OAIConfigmgrApiHandler::comDayCqPollingImporterImplPollingImporterImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 importer_min_interval;   
    if(socket->queryString().keys().contains("importer_min_interval")){
        fromStringValue(socket->queryString().value("importer_min_interval"), importer_min_interval);
    }
    
    QString importer_user;   
    if(socket->queryString().keys().contains("importer_user")){
        fromStringValue(socket->queryString().value("importer_user"), importer_user);
    }
    
    QList<QString> exclude_paths;   
    if(socket->queryString().keys().contains("exclude_paths")){
        fromStringValue(socket->queryString().values("exclude_paths"), exclude_paths);
    }
    
    QList<QString> include_paths;   
    if(socket->queryString().keys().contains("include_paths")){
        fromStringValue(socket->queryString().values("include_paths"), include_paths);
    }
    


    emit comDayCqPollingImporterImplPollingImporterImpl( post,  apply,  _delete,  action,  location,  propertylist,  importer_min_interval,  importer_user,  exclude_paths,  include_paths);
}


void OAIConfigmgrApiRequest::comDayCqReplicationAuditReplicationEventListenerRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.replication.audit.ReplicationEventListener";
    connect(this, &OAIConfigmgrApiRequest::comDayCqReplicationAuditReplicationEventListener, handler, &OAIConfigmgrApiHandler::comDayCqReplicationAuditReplicationEventListener);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 service_ranking;   
    if(socket->queryString().keys().contains("service_ranking")){
        fromStringValue(socket->queryString().value("service_ranking"), service_ranking);
    }
    


    emit comDayCqReplicationAuditReplicationEventListener( post,  apply,  _delete,  action,  location,  propertylist,  service_ranking);
}


void OAIConfigmgrApiRequest::comDayCqReplicationContentStaticContentBuilderRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.replication.content.StaticContentBuilder";
    connect(this, &OAIConfigmgrApiRequest::comDayCqReplicationContentStaticContentBuilder, handler, &OAIConfigmgrApiHandler::comDayCqReplicationContentStaticContentBuilder);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString host;   
    if(socket->queryString().keys().contains("host")){
        fromStringValue(socket->queryString().value("host"), host);
    }
    
    qint32 port;   
    if(socket->queryString().keys().contains("port")){
        fromStringValue(socket->queryString().value("port"), port);
    }
    


    emit comDayCqReplicationContentStaticContentBuilder( post,  apply,  _delete,  action,  location,  propertylist,  host,  port);
}


void OAIConfigmgrApiRequest::comDayCqReplicationImplAgentManagerImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.replication.impl.AgentManagerImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqReplicationImplAgentManagerImpl, handler, &OAIConfigmgrApiHandler::comDayCqReplicationImplAgentManagerImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString job_topics;   
    if(socket->queryString().keys().contains("job_topics")){
        fromStringValue(socket->queryString().value("job_topics"), job_topics);
    }
    
    QString service_user_target;   
    if(socket->queryString().keys().contains("service_user_target")){
        fromStringValue(socket->queryString().value("service_user_target"), service_user_target);
    }
    
    QString agent_provider_target;   
    if(socket->queryString().keys().contains("agent_provider_target")){
        fromStringValue(socket->queryString().value("agent_provider_target"), agent_provider_target);
    }
    


    emit comDayCqReplicationImplAgentManagerImpl( post,  apply,  _delete,  action,  location,  propertylist,  job_topics,  service_user_target,  agent_provider_target);
}


void OAIConfigmgrApiRequest::comDayCqReplicationImplContentDurboBinaryLessContentBuilderRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.replication.impl.content.durbo.BinaryLessContentBuilder";
    connect(this, &OAIConfigmgrApiRequest::comDayCqReplicationImplContentDurboBinaryLessContentBuilder, handler, &OAIConfigmgrApiHandler::comDayCqReplicationImplContentDurboBinaryLessContentBuilder);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 binary_threshold;   
    if(socket->queryString().keys().contains("binary_threshold")){
        fromStringValue(socket->queryString().value("binary_threshold"), binary_threshold);
    }
    


    emit comDayCqReplicationImplContentDurboBinaryLessContentBuilder( post,  apply,  _delete,  action,  location,  propertylist,  binary_threshold);
}


void OAIConfigmgrApiRequest::comDayCqReplicationImplContentDurboDurboImportConfigurationProvRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.replication.impl.content.durbo.DurboImportConfigurationProviderService";
    connect(this, &OAIConfigmgrApiRequest::comDayCqReplicationImplContentDurboDurboImportConfigurationProv, handler, &OAIConfigmgrApiHandler::comDayCqReplicationImplContentDurboDurboImportConfigurationProv);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool preserve_hierarchy_nodes;   
    if(socket->queryString().keys().contains("preserve_hierarchy_nodes")){
        fromStringValue(socket->queryString().value("preserve_hierarchy_nodes"), preserve_hierarchy_nodes);
    }
    
    bool ignore_versioning;   
    if(socket->queryString().keys().contains("ignore_versioning")){
        fromStringValue(socket->queryString().value("ignore_versioning"), ignore_versioning);
    }
    
    bool import_acl;   
    if(socket->queryString().keys().contains("import_acl")){
        fromStringValue(socket->queryString().value("import_acl"), import_acl);
    }
    
    qint32 save_threshold;   
    if(socket->queryString().keys().contains("save_threshold")){
        fromStringValue(socket->queryString().value("save_threshold"), save_threshold);
    }
    
    bool preserve_user_paths;   
    if(socket->queryString().keys().contains("preserve_user_paths")){
        fromStringValue(socket->queryString().value("preserve_user_paths"), preserve_user_paths);
    }
    
    bool preserve_uuid;   
    if(socket->queryString().keys().contains("preserve_uuid")){
        fromStringValue(socket->queryString().value("preserve_uuid"), preserve_uuid);
    }
    
    QList<QString> preserve_uuid_nodetypes;   
    if(socket->queryString().keys().contains("preserve_uuid_nodetypes")){
        fromStringValue(socket->queryString().values("preserve_uuid_nodetypes"), preserve_uuid_nodetypes);
    }
    
    QList<QString> preserve_uuid_subtrees;   
    if(socket->queryString().keys().contains("preserve_uuid_subtrees")){
        fromStringValue(socket->queryString().values("preserve_uuid_subtrees"), preserve_uuid_subtrees);
    }
    
    bool auto_commit;   
    if(socket->queryString().keys().contains("auto_commit")){
        fromStringValue(socket->queryString().value("auto_commit"), auto_commit);
    }
    


    emit comDayCqReplicationImplContentDurboDurboImportConfigurationProv( post,  apply,  _delete,  action,  location,  propertylist,  preserve_hierarchy_nodes,  ignore_versioning,  import_acl,  save_threshold,  preserve_user_paths,  preserve_uuid,  preserve_uuid_nodetypes,  preserve_uuid_subtrees,  auto_commit);
}


void OAIConfigmgrApiRequest::comDayCqReplicationImplReplicationContentFactoryProviderImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.replication.impl.ReplicationContentFactoryProviderImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqReplicationImplReplicationContentFactoryProviderImpl, handler, &OAIConfigmgrApiHandler::comDayCqReplicationImplReplicationContentFactoryProviderImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool replication_content_use_file_storage;   
    if(socket->queryString().keys().contains("replication_content_use_file_storage")){
        fromStringValue(socket->queryString().value("replication_content_use_file_storage"), replication_content_use_file_storage);
    }
    
    qint32 replication_content_max_commit_attempts;   
    if(socket->queryString().keys().contains("replication_content_max_commit_attempts")){
        fromStringValue(socket->queryString().value("replication_content_max_commit_attempts"), replication_content_max_commit_attempts);
    }
    


    emit comDayCqReplicationImplReplicationContentFactoryProviderImpl( post,  apply,  _delete,  action,  location,  propertylist,  replication_content_use_file_storage,  replication_content_max_commit_attempts);
}


void OAIConfigmgrApiRequest::comDayCqReplicationImplReplicationReceiverImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.replication.impl.ReplicationReceiverImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqReplicationImplReplicationReceiverImpl, handler, &OAIConfigmgrApiHandler::comDayCqReplicationImplReplicationReceiverImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 receiver_tmpfile_threshold;   
    if(socket->queryString().keys().contains("receiver_tmpfile_threshold")){
        fromStringValue(socket->queryString().value("receiver_tmpfile_threshold"), receiver_tmpfile_threshold);
    }
    
    bool receiver_packages_use_install;   
    if(socket->queryString().keys().contains("receiver_packages_use_install")){
        fromStringValue(socket->queryString().value("receiver_packages_use_install"), receiver_packages_use_install);
    }
    


    emit comDayCqReplicationImplReplicationReceiverImpl( post,  apply,  _delete,  action,  location,  propertylist,  receiver_tmpfile_threshold,  receiver_packages_use_install);
}


void OAIConfigmgrApiRequest::comDayCqReplicationImplReplicatorImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.replication.impl.ReplicatorImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqReplicationImplReplicatorImpl, handler, &OAIConfigmgrApiHandler::comDayCqReplicationImplReplicatorImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool distribute_events;   
    if(socket->queryString().keys().contains("distribute_events")){
        fromStringValue(socket->queryString().value("distribute_events"), distribute_events);
    }
    


    emit comDayCqReplicationImplReplicatorImpl( post,  apply,  _delete,  action,  location,  propertylist,  distribute_events);
}


void OAIConfigmgrApiRequest::comDayCqReplicationImplReverseReplicatorRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.replication.impl.ReverseReplicator";
    connect(this, &OAIConfigmgrApiRequest::comDayCqReplicationImplReverseReplicator, handler, &OAIConfigmgrApiHandler::comDayCqReplicationImplReverseReplicator);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 scheduler_period;   
    if(socket->queryString().keys().contains("scheduler_period")){
        fromStringValue(socket->queryString().value("scheduler_period"), scheduler_period);
    }
    


    emit comDayCqReplicationImplReverseReplicator( post,  apply,  _delete,  action,  location,  propertylist,  scheduler_period);
}


void OAIConfigmgrApiRequest::comDayCqReplicationImplTransportBinaryLessTransportHandlerRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.replication.impl.transport.BinaryLessTransportHandler";
    connect(this, &OAIConfigmgrApiRequest::comDayCqReplicationImplTransportBinaryLessTransportHandler, handler, &OAIConfigmgrApiHandler::comDayCqReplicationImplTransportBinaryLessTransportHandler);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> disabled_cipher_suites;   
    if(socket->queryString().keys().contains("disabled_cipher_suites")){
        fromStringValue(socket->queryString().values("disabled_cipher_suites"), disabled_cipher_suites);
    }
    
    QList<QString> enabled_cipher_suites;   
    if(socket->queryString().keys().contains("enabled_cipher_suites")){
        fromStringValue(socket->queryString().values("enabled_cipher_suites"), enabled_cipher_suites);
    }
    


    emit comDayCqReplicationImplTransportBinaryLessTransportHandler( post,  apply,  _delete,  action,  location,  propertylist,  disabled_cipher_suites,  enabled_cipher_suites);
}


void OAIConfigmgrApiRequest::comDayCqReplicationImplTransportHttpRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.replication.impl.transport.Http";
    connect(this, &OAIConfigmgrApiRequest::comDayCqReplicationImplTransportHttp, handler, &OAIConfigmgrApiHandler::comDayCqReplicationImplTransportHttp);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> disabled_cipher_suites;   
    if(socket->queryString().keys().contains("disabled_cipher_suites")){
        fromStringValue(socket->queryString().values("disabled_cipher_suites"), disabled_cipher_suites);
    }
    
    QList<QString> enabled_cipher_suites;   
    if(socket->queryString().keys().contains("enabled_cipher_suites")){
        fromStringValue(socket->queryString().values("enabled_cipher_suites"), enabled_cipher_suites);
    }
    


    emit comDayCqReplicationImplTransportHttp( post,  apply,  _delete,  action,  location,  propertylist,  disabled_cipher_suites,  enabled_cipher_suites);
}


void OAIConfigmgrApiRequest::comDayCqReportingImplCacheCacheImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.reporting.impl.cache.CacheImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqReportingImplCacheCacheImpl, handler, &OAIConfigmgrApiHandler::comDayCqReportingImplCacheCacheImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool repcache_enable;   
    if(socket->queryString().keys().contains("repcache_enable")){
        fromStringValue(socket->queryString().value("repcache_enable"), repcache_enable);
    }
    
    qint32 repcache_ttl;   
    if(socket->queryString().keys().contains("repcache_ttl")){
        fromStringValue(socket->queryString().value("repcache_ttl"), repcache_ttl);
    }
    
    qint32 repcache_max;   
    if(socket->queryString().keys().contains("repcache_max")){
        fromStringValue(socket->queryString().value("repcache_max"), repcache_max);
    }
    


    emit comDayCqReportingImplCacheCacheImpl( post,  apply,  _delete,  action,  location,  propertylist,  repcache_enable,  repcache_ttl,  repcache_max);
}


void OAIConfigmgrApiRequest::comDayCqReportingImplConfigServiceImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.reporting.impl.ConfigServiceImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqReportingImplConfigServiceImpl, handler, &OAIConfigmgrApiHandler::comDayCqReportingImplConfigServiceImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString repconf_timezone;   
    if(socket->queryString().keys().contains("repconf_timezone")){
        fromStringValue(socket->queryString().value("repconf_timezone"), repconf_timezone);
    }
    
    QString repconf_locale;   
    if(socket->queryString().keys().contains("repconf_locale")){
        fromStringValue(socket->queryString().value("repconf_locale"), repconf_locale);
    }
    
    QString repconf_snapshots;   
    if(socket->queryString().keys().contains("repconf_snapshots")){
        fromStringValue(socket->queryString().value("repconf_snapshots"), repconf_snapshots);
    }
    
    QString repconf_repdir;   
    if(socket->queryString().keys().contains("repconf_repdir")){
        fromStringValue(socket->queryString().value("repconf_repdir"), repconf_repdir);
    }
    
    qint32 repconf_hourofday;   
    if(socket->queryString().keys().contains("repconf_hourofday")){
        fromStringValue(socket->queryString().value("repconf_hourofday"), repconf_hourofday);
    }
    
    qint32 repconf_minofhour;   
    if(socket->queryString().keys().contains("repconf_minofhour")){
        fromStringValue(socket->queryString().value("repconf_minofhour"), repconf_minofhour);
    }
    
    qint32 repconf_maxrows;   
    if(socket->queryString().keys().contains("repconf_maxrows")){
        fromStringValue(socket->queryString().value("repconf_maxrows"), repconf_maxrows);
    }
    
    bool repconf_fakedata;   
    if(socket->queryString().keys().contains("repconf_fakedata")){
        fromStringValue(socket->queryString().value("repconf_fakedata"), repconf_fakedata);
    }
    
    QString repconf_snapshotuser;   
    if(socket->queryString().keys().contains("repconf_snapshotuser")){
        fromStringValue(socket->queryString().value("repconf_snapshotuser"), repconf_snapshotuser);
    }
    
    bool repconf_enforcesnapshotuser;   
    if(socket->queryString().keys().contains("repconf_enforcesnapshotuser")){
        fromStringValue(socket->queryString().value("repconf_enforcesnapshotuser"), repconf_enforcesnapshotuser);
    }
    


    emit comDayCqReportingImplConfigServiceImpl( post,  apply,  _delete,  action,  location,  propertylist,  repconf_timezone,  repconf_locale,  repconf_snapshots,  repconf_repdir,  repconf_hourofday,  repconf_minofhour,  repconf_maxrows,  repconf_fakedata,  repconf_snapshotuser,  repconf_enforcesnapshotuser);
}


void OAIConfigmgrApiRequest::comDayCqReportingImplRLogAnalyzerRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.reporting.impl.RLogAnalyzer";
    connect(this, &OAIConfigmgrApiRequest::comDayCqReportingImplRLogAnalyzer, handler, &OAIConfigmgrApiHandler::comDayCqReportingImplRLogAnalyzer);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString request_log_output;   
    if(socket->queryString().keys().contains("request_log_output")){
        fromStringValue(socket->queryString().value("request_log_output"), request_log_output);
    }
    


    emit comDayCqReportingImplRLogAnalyzer( post,  apply,  _delete,  action,  location,  propertylist,  request_log_output);
}


void OAIConfigmgrApiRequest::comDayCqRewriterLinkcheckerImplLinkCheckerImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqRewriterLinkcheckerImplLinkCheckerImpl, handler, &OAIConfigmgrApiHandler::comDayCqRewriterLinkcheckerImplLinkCheckerImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 scheduler_period;   
    if(socket->queryString().keys().contains("scheduler_period")){
        fromStringValue(socket->queryString().value("scheduler_period"), scheduler_period);
    }
    
    bool scheduler_concurrent;   
    if(socket->queryString().keys().contains("scheduler_concurrent")){
        fromStringValue(socket->queryString().value("scheduler_concurrent"), scheduler_concurrent);
    }
    
    qint32 service_bad_link_tolerance_interval;   
    if(socket->queryString().keys().contains("service_bad_link_tolerance_interval")){
        fromStringValue(socket->queryString().value("service_bad_link_tolerance_interval"), service_bad_link_tolerance_interval);
    }
    
    QList<QString> service_check_override_patterns;   
    if(socket->queryString().keys().contains("service_check_override_patterns")){
        fromStringValue(socket->queryString().values("service_check_override_patterns"), service_check_override_patterns);
    }
    
    bool service_cache_broken_internal_links;   
    if(socket->queryString().keys().contains("service_cache_broken_internal_links")){
        fromStringValue(socket->queryString().value("service_cache_broken_internal_links"), service_cache_broken_internal_links);
    }
    
    QList<QString> service_special_link_prefix;   
    if(socket->queryString().keys().contains("service_special_link_prefix")){
        fromStringValue(socket->queryString().values("service_special_link_prefix"), service_special_link_prefix);
    }
    
    QList<QString> service_special_link_patterns;   
    if(socket->queryString().keys().contains("service_special_link_patterns")){
        fromStringValue(socket->queryString().values("service_special_link_patterns"), service_special_link_patterns);
    }
    


    emit comDayCqRewriterLinkcheckerImplLinkCheckerImpl( post,  apply,  _delete,  action,  location,  propertylist,  scheduler_period,  scheduler_concurrent,  service_bad_link_tolerance_interval,  service_check_override_patterns,  service_cache_broken_internal_links,  service_special_link_prefix,  service_special_link_patterns);
}


void OAIConfigmgrApiRequest::comDayCqRewriterLinkcheckerImplLinkCheckerTaskRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTask";
    connect(this, &OAIConfigmgrApiRequest::comDayCqRewriterLinkcheckerImplLinkCheckerTask, handler, &OAIConfigmgrApiHandler::comDayCqRewriterLinkcheckerImplLinkCheckerTask);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 scheduler_period;   
    if(socket->queryString().keys().contains("scheduler_period")){
        fromStringValue(socket->queryString().value("scheduler_period"), scheduler_period);
    }
    
    bool scheduler_concurrent;   
    if(socket->queryString().keys().contains("scheduler_concurrent")){
        fromStringValue(socket->queryString().value("scheduler_concurrent"), scheduler_concurrent);
    }
    
    qint32 good_link_test_interval;   
    if(socket->queryString().keys().contains("good_link_test_interval")){
        fromStringValue(socket->queryString().value("good_link_test_interval"), good_link_test_interval);
    }
    
    qint32 bad_link_test_interval;   
    if(socket->queryString().keys().contains("bad_link_test_interval")){
        fromStringValue(socket->queryString().value("bad_link_test_interval"), bad_link_test_interval);
    }
    
    qint32 link_unused_interval;   
    if(socket->queryString().keys().contains("link_unused_interval")){
        fromStringValue(socket->queryString().value("link_unused_interval"), link_unused_interval);
    }
    
    qint32 connection_timeout;   
    if(socket->queryString().keys().contains("connection_timeout")){
        fromStringValue(socket->queryString().value("connection_timeout"), connection_timeout);
    }
    


    emit comDayCqRewriterLinkcheckerImplLinkCheckerTask( post,  apply,  _delete,  action,  location,  propertylist,  scheduler_period,  scheduler_concurrent,  good_link_test_interval,  bad_link_test_interval,  link_unused_interval,  connection_timeout);
}


void OAIConfigmgrApiRequest::comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTransformerFactory";
    connect(this, &OAIConfigmgrApiRequest::comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory, handler, &OAIConfigmgrApiHandler::comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool linkcheckertransformer_disable_rewriting;   
    if(socket->queryString().keys().contains("linkcheckertransformer_disable_rewriting")){
        fromStringValue(socket->queryString().value("linkcheckertransformer_disable_rewriting"), linkcheckertransformer_disable_rewriting);
    }
    
    bool linkcheckertransformer_disable_checking;   
    if(socket->queryString().keys().contains("linkcheckertransformer_disable_checking")){
        fromStringValue(socket->queryString().value("linkcheckertransformer_disable_checking"), linkcheckertransformer_disable_checking);
    }
    
    qint32 linkcheckertransformer_map_cache_size;   
    if(socket->queryString().keys().contains("linkcheckertransformer_map_cache_size")){
        fromStringValue(socket->queryString().value("linkcheckertransformer_map_cache_size"), linkcheckertransformer_map_cache_size);
    }
    
    bool linkcheckertransformer_strict_extension_check;   
    if(socket->queryString().keys().contains("linkcheckertransformer_strict_extension_check")){
        fromStringValue(socket->queryString().value("linkcheckertransformer_strict_extension_check"), linkcheckertransformer_strict_extension_check);
    }
    
    bool linkcheckertransformer_strip_htmlt_extension;   
    if(socket->queryString().keys().contains("linkcheckertransformer_strip_htmlt_extension")){
        fromStringValue(socket->queryString().value("linkcheckertransformer_strip_htmlt_extension"), linkcheckertransformer_strip_htmlt_extension);
    }
    
    QList<QString> linkcheckertransformer_rewrite_elements;   
    if(socket->queryString().keys().contains("linkcheckertransformer_rewrite_elements")){
        fromStringValue(socket->queryString().values("linkcheckertransformer_rewrite_elements"), linkcheckertransformer_rewrite_elements);
    }
    
    QList<QString> linkcheckertransformer_strip_extension_path_blacklist;   
    if(socket->queryString().keys().contains("linkcheckertransformer_strip_extension_path_blacklist")){
        fromStringValue(socket->queryString().values("linkcheckertransformer_strip_extension_path_blacklist"), linkcheckertransformer_strip_extension_path_blacklist);
    }
    


    emit comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory( post,  apply,  _delete,  action,  location,  propertylist,  linkcheckertransformer_disable_rewriting,  linkcheckertransformer_disable_checking,  linkcheckertransformer_map_cache_size,  linkcheckertransformer_strict_extension_check,  linkcheckertransformer_strip_htmlt_extension,  linkcheckertransformer_rewrite_elements,  linkcheckertransformer_strip_extension_path_blacklist);
}


void OAIConfigmgrApiRequest::comDayCqRewriterLinkcheckerImplLinkInfoStorageImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkInfoStorageImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqRewriterLinkcheckerImplLinkInfoStorageImpl, handler, &OAIConfigmgrApiHandler::comDayCqRewriterLinkcheckerImplLinkInfoStorageImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 service_max_links_per_host;   
    if(socket->queryString().keys().contains("service_max_links_per_host")){
        fromStringValue(socket->queryString().value("service_max_links_per_host"), service_max_links_per_host);
    }
    
    bool service_save_external_link_references;   
    if(socket->queryString().keys().contains("service_save_external_link_references")){
        fromStringValue(socket->queryString().value("service_save_external_link_references"), service_save_external_link_references);
    }
    


    emit comDayCqRewriterLinkcheckerImplLinkInfoStorageImpl( post,  apply,  _delete,  action,  location,  propertylist,  service_max_links_per_host,  service_save_external_link_references);
}


void OAIConfigmgrApiRequest::comDayCqRewriterProcessorImplHtmlParserFactoryRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.rewriter.processor.impl.HtmlParserFactory";
    connect(this, &OAIConfigmgrApiRequest::comDayCqRewriterProcessorImplHtmlParserFactory, handler, &OAIConfigmgrApiHandler::comDayCqRewriterProcessorImplHtmlParserFactory);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> htmlparser_process_tags;   
    if(socket->queryString().keys().contains("htmlparser_process_tags")){
        fromStringValue(socket->queryString().values("htmlparser_process_tags"), htmlparser_process_tags);
    }
    
    bool htmlparser_preserve_camel_case;   
    if(socket->queryString().keys().contains("htmlparser_preserve_camel_case")){
        fromStringValue(socket->queryString().value("htmlparser_preserve_camel_case"), htmlparser_preserve_camel_case);
    }
    


    emit comDayCqRewriterProcessorImplHtmlParserFactory( post,  apply,  _delete,  action,  location,  propertylist,  htmlparser_process_tags,  htmlparser_preserve_camel_case);
}


void OAIConfigmgrApiRequest::comDayCqSearchImplBuilderQueryBuilderImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.search.impl.builder.QueryBuilderImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqSearchImplBuilderQueryBuilderImpl, handler, &OAIConfigmgrApiHandler::comDayCqSearchImplBuilderQueryBuilderImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> excerpt_properties;   
    if(socket->queryString().keys().contains("excerpt_properties")){
        fromStringValue(socket->queryString().values("excerpt_properties"), excerpt_properties);
    }
    
    qint32 cache_max_entries;   
    if(socket->queryString().keys().contains("cache_max_entries")){
        fromStringValue(socket->queryString().value("cache_max_entries"), cache_max_entries);
    }
    
    qint32 cache_entry_lifetime;   
    if(socket->queryString().keys().contains("cache_entry_lifetime")){
        fromStringValue(socket->queryString().value("cache_entry_lifetime"), cache_entry_lifetime);
    }
    
    bool xpath_union;   
    if(socket->queryString().keys().contains("xpath_union")){
        fromStringValue(socket->queryString().value("xpath_union"), xpath_union);
    }
    


    emit comDayCqSearchImplBuilderQueryBuilderImpl( post,  apply,  _delete,  action,  location,  propertylist,  excerpt_properties,  cache_max_entries,  cache_entry_lifetime,  xpath_union);
}


void OAIConfigmgrApiRequest::comDayCqSearchSuggestImplSuggestionIndexManagerImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.search.suggest.impl.SuggestionIndexManagerImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqSearchSuggestImplSuggestionIndexManagerImpl, handler, &OAIConfigmgrApiHandler::comDayCqSearchSuggestImplSuggestionIndexManagerImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString path_builder_target;   
    if(socket->queryString().keys().contains("path_builder_target")){
        fromStringValue(socket->queryString().value("path_builder_target"), path_builder_target);
    }
    
    QString suggest_basepath;   
    if(socket->queryString().keys().contains("suggest_basepath")){
        fromStringValue(socket->queryString().value("suggest_basepath"), suggest_basepath);
    }
    


    emit comDayCqSearchSuggestImplSuggestionIndexManagerImpl( post,  apply,  _delete,  action,  location,  propertylist,  path_builder_target,  suggest_basepath);
}


void OAIConfigmgrApiRequest::comDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.searchpromote.impl.PublishSearchPromoteConfigHandler";
    connect(this, &OAIConfigmgrApiRequest::comDayCqSearchpromoteImplPublishSearchPromoteConfigHandler, handler, &OAIConfigmgrApiHandler::comDayCqSearchpromoteImplPublishSearchPromoteConfigHandler);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool cq_searchpromote_confighandler_enabled;   
    if(socket->queryString().keys().contains("cq_searchpromote_confighandler_enabled")){
        fromStringValue(socket->queryString().value("cq_searchpromote_confighandler_enabled"), cq_searchpromote_confighandler_enabled);
    }
    


    emit comDayCqSearchpromoteImplPublishSearchPromoteConfigHandler( post,  apply,  _delete,  action,  location,  propertylist,  cq_searchpromote_confighandler_enabled);
}


void OAIConfigmgrApiRequest::comDayCqSearchpromoteImplSearchPromoteServiceImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.searchpromote.impl.SearchPromoteServiceImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqSearchpromoteImplSearchPromoteServiceImpl, handler, &OAIConfigmgrApiHandler::comDayCqSearchpromoteImplSearchPromoteServiceImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString cq_searchpromote_configuration_server_uri;   
    if(socket->queryString().keys().contains("cq_searchpromote_configuration_server_uri")){
        fromStringValue(socket->queryString().value("cq_searchpromote_configuration_server_uri"), cq_searchpromote_configuration_server_uri);
    }
    
    QString cq_searchpromote_configuration_environment;   
    if(socket->queryString().keys().contains("cq_searchpromote_configuration_environment")){
        fromStringValue(socket->queryString().value("cq_searchpromote_configuration_environment"), cq_searchpromote_configuration_environment);
    }
    
    qint32 connection_timeout;   
    if(socket->queryString().keys().contains("connection_timeout")){
        fromStringValue(socket->queryString().value("connection_timeout"), connection_timeout);
    }
    
    qint32 socket_timeout;   
    if(socket->queryString().keys().contains("socket_timeout")){
        fromStringValue(socket->queryString().value("socket_timeout"), socket_timeout);
    }
    


    emit comDayCqSearchpromoteImplSearchPromoteServiceImpl( post,  apply,  _delete,  action,  location,  propertylist,  cq_searchpromote_configuration_server_uri,  cq_searchpromote_configuration_environment,  connection_timeout,  socket_timeout);
}


void OAIConfigmgrApiRequest::comDayCqSecurityACLSetupRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.security.ACLSetup";
    connect(this, &OAIConfigmgrApiRequest::comDayCqSecurityACLSetup, handler, &OAIConfigmgrApiHandler::comDayCqSecurityACLSetup);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> cq_aclsetup_rules;   
    if(socket->queryString().keys().contains("cq_aclsetup_rules")){
        fromStringValue(socket->queryString().values("cq_aclsetup_rules"), cq_aclsetup_rules);
    }
    


    emit comDayCqSecurityACLSetup( post,  apply,  _delete,  action,  location,  propertylist,  cq_aclsetup_rules);
}


void OAIConfigmgrApiRequest::comDayCqStatisticsImplStatisticsServiceImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.statistics.impl.StatisticsServiceImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqStatisticsImplStatisticsServiceImpl, handler, &OAIConfigmgrApiHandler::comDayCqStatisticsImplStatisticsServiceImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 scheduler_period;   
    if(socket->queryString().keys().contains("scheduler_period")){
        fromStringValue(socket->queryString().value("scheduler_period"), scheduler_period);
    }
    
    bool scheduler_concurrent;   
    if(socket->queryString().keys().contains("scheduler_concurrent")){
        fromStringValue(socket->queryString().value("scheduler_concurrent"), scheduler_concurrent);
    }
    
    QString path;   
    if(socket->queryString().keys().contains("path")){
        fromStringValue(socket->queryString().value("path"), path);
    }
    
    QString workspace;   
    if(socket->queryString().keys().contains("workspace")){
        fromStringValue(socket->queryString().value("workspace"), workspace);
    }
    
    QString keywords_path;   
    if(socket->queryString().keys().contains("keywords_path")){
        fromStringValue(socket->queryString().value("keywords_path"), keywords_path);
    }
    
    bool async_entries;   
    if(socket->queryString().keys().contains("async_entries")){
        fromStringValue(socket->queryString().value("async_entries"), async_entries);
    }
    


    emit comDayCqStatisticsImplStatisticsServiceImpl( post,  apply,  _delete,  action,  location,  propertylist,  scheduler_period,  scheduler_concurrent,  path,  workspace,  keywords_path,  async_entries);
}


void OAIConfigmgrApiRequest::comDayCqTaggingImplJcrTagManagerFactoryImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.tagging.impl.JcrTagManagerFactoryImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqTaggingImplJcrTagManagerFactoryImpl, handler, &OAIConfigmgrApiHandler::comDayCqTaggingImplJcrTagManagerFactoryImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool validation_enabled;   
    if(socket->queryString().keys().contains("validation_enabled")){
        fromStringValue(socket->queryString().value("validation_enabled"), validation_enabled);
    }
    


    emit comDayCqTaggingImplJcrTagManagerFactoryImpl( post,  apply,  _delete,  action,  location,  propertylist,  validation_enabled);
}


void OAIConfigmgrApiRequest::comDayCqTaggingImplSearchTagPredicateEvaluatorRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.tagging.impl.search.TagPredicateEvaluator";
    connect(this, &OAIConfigmgrApiRequest::comDayCqTaggingImplSearchTagPredicateEvaluator, handler, &OAIConfigmgrApiHandler::comDayCqTaggingImplSearchTagPredicateEvaluator);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool ignore_path;   
    if(socket->queryString().keys().contains("ignore_path")){
        fromStringValue(socket->queryString().value("ignore_path"), ignore_path);
    }
    


    emit comDayCqTaggingImplSearchTagPredicateEvaluator( post,  apply,  _delete,  action,  location,  propertylist,  ignore_path);
}


void OAIConfigmgrApiRequest::comDayCqTaggingImplTagGarbageCollectorRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.tagging.impl.TagGarbageCollector";
    connect(this, &OAIConfigmgrApiRequest::comDayCqTaggingImplTagGarbageCollector, handler, &OAIConfigmgrApiHandler::comDayCqTaggingImplTagGarbageCollector);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString scheduler_expression;   
    if(socket->queryString().keys().contains("scheduler_expression")){
        fromStringValue(socket->queryString().value("scheduler_expression"), scheduler_expression);
    }
    


    emit comDayCqTaggingImplTagGarbageCollector( post,  apply,  _delete,  action,  location,  propertylist,  scheduler_expression);
}


void OAIConfigmgrApiRequest::comDayCqWcmContentsyncImplHandlerPagesUpdateHandlerRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.contentsync.impl.handler.PagesUpdateHandler";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmContentsyncImplHandlerPagesUpdateHandler, handler, &OAIConfigmgrApiHandler::comDayCqWcmContentsyncImplHandlerPagesUpdateHandler);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> cq_pagesupdatehandler_imageresourcetypes;   
    if(socket->queryString().keys().contains("cq_pagesupdatehandler_imageresourcetypes")){
        fromStringValue(socket->queryString().values("cq_pagesupdatehandler_imageresourcetypes"), cq_pagesupdatehandler_imageresourcetypes);
    }
    


    emit comDayCqWcmContentsyncImplHandlerPagesUpdateHandler( post,  apply,  _delete,  action,  location,  propertylist,  cq_pagesupdatehandler_imageresourcetypes);
}


void OAIConfigmgrApiRequest::comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.contentsync.impl.rewriter.PathRewriterTransformerFactory";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor, handler, &OAIConfigmgrApiHandler::comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> cq_contentsync_pathrewritertransformer_mapping_links;   
    if(socket->queryString().keys().contains("cq_contentsync_pathrewritertransformer_mapping_links")){
        fromStringValue(socket->queryString().values("cq_contentsync_pathrewritertransformer_mapping_links"), cq_contentsync_pathrewritertransformer_mapping_links);
    }
    
    QList<QString> cq_contentsync_pathrewritertransformer_mapping_clientlibs;   
    if(socket->queryString().keys().contains("cq_contentsync_pathrewritertransformer_mapping_clientlibs")){
        fromStringValue(socket->queryString().values("cq_contentsync_pathrewritertransformer_mapping_clientlibs"), cq_contentsync_pathrewritertransformer_mapping_clientlibs);
    }
    
    QList<QString> cq_contentsync_pathrewritertransformer_mapping_images;   
    if(socket->queryString().keys().contains("cq_contentsync_pathrewritertransformer_mapping_images")){
        fromStringValue(socket->queryString().values("cq_contentsync_pathrewritertransformer_mapping_images"), cq_contentsync_pathrewritertransformer_mapping_images);
    }
    
    QString cq_contentsync_pathrewritertransformer_attribute_pattern;   
    if(socket->queryString().keys().contains("cq_contentsync_pathrewritertransformer_attribute_pattern")){
        fromStringValue(socket->queryString().value("cq_contentsync_pathrewritertransformer_attribute_pattern"), cq_contentsync_pathrewritertransformer_attribute_pattern);
    }
    
    QString cq_contentsync_pathrewritertransformer_clientlibrary_pattern;   
    if(socket->queryString().keys().contains("cq_contentsync_pathrewritertransformer_clientlibrary_pattern")){
        fromStringValue(socket->queryString().value("cq_contentsync_pathrewritertransformer_clientlibrary_pattern"), cq_contentsync_pathrewritertransformer_clientlibrary_pattern);
    }
    
    QString cq_contentsync_pathrewritertransformer_clientlibrary_replace;   
    if(socket->queryString().keys().contains("cq_contentsync_pathrewritertransformer_clientlibrary_replace")){
        fromStringValue(socket->queryString().value("cq_contentsync_pathrewritertransformer_clientlibrary_replace"), cq_contentsync_pathrewritertransformer_clientlibrary_replace);
    }
    


    emit comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor( post,  apply,  _delete,  action,  location,  propertylist,  cq_contentsync_pathrewritertransformer_mapping_links,  cq_contentsync_pathrewritertransformer_mapping_clientlibs,  cq_contentsync_pathrewritertransformer_mapping_images,  cq_contentsync_pathrewritertransformer_attribute_pattern,  cq_contentsync_pathrewritertransformer_clientlibrary_pattern,  cq_contentsync_pathrewritertransformer_clientlibrary_replace);
}


void OAIConfigmgrApiRequest::comDayCqWcmCoreImplAuthoringUIModeServiceImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.core.impl.AuthoringUIModeServiceImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmCoreImplAuthoringUIModeServiceImpl, handler, &OAIConfigmgrApiHandler::comDayCqWcmCoreImplAuthoringUIModeServiceImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString authoring_ui_mode_service_default;   
    if(socket->queryString().keys().contains("authoring_ui_mode_service_default")){
        fromStringValue(socket->queryString().value("authoring_ui_mode_service_default"), authoring_ui_mode_service_default);
    }
    


    emit comDayCqWcmCoreImplAuthoringUIModeServiceImpl( post,  apply,  _delete,  action,  location,  propertylist,  authoring_ui_mode_service_default);
}


void OAIConfigmgrApiRequest::comDayCqWcmCoreImplCommandsWCMCommandServletRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.core.impl.commands.WCMCommandServlet";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmCoreImplCommandsWCMCommandServlet, handler, &OAIConfigmgrApiHandler::comDayCqWcmCoreImplCommandsWCMCommandServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> wcmcommandservlet_delete_whitelist;   
    if(socket->queryString().keys().contains("wcmcommandservlet_delete_whitelist")){
        fromStringValue(socket->queryString().values("wcmcommandservlet_delete_whitelist"), wcmcommandservlet_delete_whitelist);
    }
    


    emit comDayCqWcmCoreImplCommandsWCMCommandServlet( post,  apply,  _delete,  action,  location,  propertylist,  wcmcommandservlet_delete_whitelist);
}


void OAIConfigmgrApiRequest::comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.core.impl.devicedetection.DeviceIdentificationModeImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl, handler, &OAIConfigmgrApiHandler::comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString dim_default_mode;   
    if(socket->queryString().keys().contains("dim_default_mode")){
        fromStringValue(socket->queryString().value("dim_default_mode"), dim_default_mode);
    }
    
    bool dim_appcache_enabled;   
    if(socket->queryString().keys().contains("dim_appcache_enabled")){
        fromStringValue(socket->queryString().value("dim_appcache_enabled"), dim_appcache_enabled);
    }
    


    emit comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl( post,  apply,  _delete,  action,  location,  propertylist,  dim_default_mode,  dim_appcache_enabled);
}


void OAIConfigmgrApiRequest::comDayCqWcmCoreImplEventPageEventAuditListenerRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.core.impl.event.PageEventAuditListener";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmCoreImplEventPageEventAuditListener, handler, &OAIConfigmgrApiHandler::comDayCqWcmCoreImplEventPageEventAuditListener);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString configured;   
    if(socket->queryString().keys().contains("configured")){
        fromStringValue(socket->queryString().value("configured"), configured);
    }
    


    emit comDayCqWcmCoreImplEventPageEventAuditListener( post,  apply,  _delete,  action,  location,  propertylist,  configured);
}


void OAIConfigmgrApiRequest::comDayCqWcmCoreImplEventPagePostProcessorRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.core.impl.event.PagePostProcessor";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmCoreImplEventPagePostProcessor, handler, &OAIConfigmgrApiHandler::comDayCqWcmCoreImplEventPagePostProcessor);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> paths;   
    if(socket->queryString().keys().contains("paths")){
        fromStringValue(socket->queryString().values("paths"), paths);
    }
    


    emit comDayCqWcmCoreImplEventPagePostProcessor( post,  apply,  _delete,  action,  location,  propertylist,  paths);
}


void OAIConfigmgrApiRequest::comDayCqWcmCoreImplEventRepositoryChangeEventListenerRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.core.impl.event.RepositoryChangeEventListener";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmCoreImplEventRepositoryChangeEventListener, handler, &OAIConfigmgrApiHandler::comDayCqWcmCoreImplEventRepositoryChangeEventListener);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> paths;   
    if(socket->queryString().keys().contains("paths")){
        fromStringValue(socket->queryString().values("paths"), paths);
    }
    
    QList<QString> excluded_paths;   
    if(socket->queryString().keys().contains("excluded_paths")){
        fromStringValue(socket->queryString().values("excluded_paths"), excluded_paths);
    }
    


    emit comDayCqWcmCoreImplEventRepositoryChangeEventListener( post,  apply,  _delete,  action,  location,  propertylist,  paths,  excluded_paths);
}


void OAIConfigmgrApiRequest::comDayCqWcmCoreImplEventTemplatePostProcessorRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.core.impl.event.TemplatePostProcessor";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmCoreImplEventTemplatePostProcessor, handler, &OAIConfigmgrApiHandler::comDayCqWcmCoreImplEventTemplatePostProcessor);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString paths;   
    if(socket->queryString().keys().contains("paths")){
        fromStringValue(socket->queryString().value("paths"), paths);
    }
    


    emit comDayCqWcmCoreImplEventTemplatePostProcessor( post,  apply,  _delete,  action,  location,  propertylist,  paths);
}


void OAIConfigmgrApiRequest::comDayCqWcmCoreImplLanguageManagerImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.core.impl.LanguageManagerImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmCoreImplLanguageManagerImpl, handler, &OAIConfigmgrApiHandler::comDayCqWcmCoreImplLanguageManagerImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString langmgr_list_path;   
    if(socket->queryString().keys().contains("langmgr_list_path")){
        fromStringValue(socket->queryString().value("langmgr_list_path"), langmgr_list_path);
    }
    
    QList<QString> langmgr_country_default;   
    if(socket->queryString().keys().contains("langmgr_country_default")){
        fromStringValue(socket->queryString().values("langmgr_country_default"), langmgr_country_default);
    }
    


    emit comDayCqWcmCoreImplLanguageManagerImpl( post,  apply,  _delete,  action,  location,  propertylist,  langmgr_list_path,  langmgr_country_default);
}


void OAIConfigmgrApiRequest::comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.core.impl.LinkCheckerConfigurationFactoryImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl, handler, &OAIConfigmgrApiHandler::comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString link_expired_prefix;   
    if(socket->queryString().keys().contains("link_expired_prefix")){
        fromStringValue(socket->queryString().value("link_expired_prefix"), link_expired_prefix);
    }
    
    bool link_expired_remove;   
    if(socket->queryString().keys().contains("link_expired_remove")){
        fromStringValue(socket->queryString().value("link_expired_remove"), link_expired_remove);
    }
    
    QString link_expired_suffix;   
    if(socket->queryString().keys().contains("link_expired_suffix")){
        fromStringValue(socket->queryString().value("link_expired_suffix"), link_expired_suffix);
    }
    
    QString link_invalid_prefix;   
    if(socket->queryString().keys().contains("link_invalid_prefix")){
        fromStringValue(socket->queryString().value("link_invalid_prefix"), link_invalid_prefix);
    }
    
    bool link_invalid_remove;   
    if(socket->queryString().keys().contains("link_invalid_remove")){
        fromStringValue(socket->queryString().value("link_invalid_remove"), link_invalid_remove);
    }
    
    QString link_invalid_suffix;   
    if(socket->queryString().keys().contains("link_invalid_suffix")){
        fromStringValue(socket->queryString().value("link_invalid_suffix"), link_invalid_suffix);
    }
    
    QString link_predated_prefix;   
    if(socket->queryString().keys().contains("link_predated_prefix")){
        fromStringValue(socket->queryString().value("link_predated_prefix"), link_predated_prefix);
    }
    
    bool link_predated_remove;   
    if(socket->queryString().keys().contains("link_predated_remove")){
        fromStringValue(socket->queryString().value("link_predated_remove"), link_predated_remove);
    }
    
    QString link_predated_suffix;   
    if(socket->queryString().keys().contains("link_predated_suffix")){
        fromStringValue(socket->queryString().value("link_predated_suffix"), link_predated_suffix);
    }
    
    QList<QString> link_wcmmodes;   
    if(socket->queryString().keys().contains("link_wcmmodes")){
        fromStringValue(socket->queryString().values("link_wcmmodes"), link_wcmmodes);
    }
    


    emit comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl( post,  apply,  _delete,  action,  location,  propertylist,  link_expired_prefix,  link_expired_remove,  link_expired_suffix,  link_invalid_prefix,  link_invalid_remove,  link_invalid_suffix,  link_predated_prefix,  link_predated_remove,  link_predated_suffix,  link_wcmmodes);
}


void OAIConfigmgrApiRequest::comDayCqWcmCoreImplPagePageInfoAggregatorImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.core.impl.page.PageInfoAggregatorImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmCoreImplPagePageInfoAggregatorImpl, handler, &OAIConfigmgrApiHandler::comDayCqWcmCoreImplPagePageInfoAggregatorImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString page_info_provider_property_regex_default;   
    if(socket->queryString().keys().contains("page_info_provider_property_regex_default")){
        fromStringValue(socket->queryString().value("page_info_provider_property_regex_default"), page_info_provider_property_regex_default);
    }
    
    QString page_info_provider_property_name;   
    if(socket->queryString().keys().contains("page_info_provider_property_name")){
        fromStringValue(socket->queryString().value("page_info_provider_property_name"), page_info_provider_property_name);
    }
    


    emit comDayCqWcmCoreImplPagePageInfoAggregatorImpl( post,  apply,  _delete,  action,  location,  propertylist,  page_info_provider_property_regex_default,  page_info_provider_property_name);
}


void OAIConfigmgrApiRequest::comDayCqWcmCoreImplPagePageManagerFactoryImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.core.impl.page.PageManagerFactoryImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmCoreImplPagePageManagerFactoryImpl, handler, &OAIConfigmgrApiHandler::comDayCqWcmCoreImplPagePageManagerFactoryImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString illegal_char_mapping;   
    if(socket->queryString().keys().contains("illegal_char_mapping")){
        fromStringValue(socket->queryString().value("illegal_char_mapping"), illegal_char_mapping);
    }
    
    bool page_sub_tree_activation_check;   
    if(socket->queryString().keys().contains("page_sub_tree_activation_check")){
        fromStringValue(socket->queryString().value("page_sub_tree_activation_check"), page_sub_tree_activation_check);
    }
    


    emit comDayCqWcmCoreImplPagePageManagerFactoryImpl( post,  apply,  _delete,  action,  location,  propertylist,  illegal_char_mapping,  page_sub_tree_activation_check);
}


void OAIConfigmgrApiRequest::comDayCqWcmCoreImplReferencesContentContentReferenceConfigRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.core.impl.references.content.ContentReferenceConfig";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmCoreImplReferencesContentContentReferenceConfig, handler, &OAIConfigmgrApiHandler::comDayCqWcmCoreImplReferencesContentContentReferenceConfig);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> content_reference_config_resource_types;   
    if(socket->queryString().keys().contains("content_reference_config_resource_types")){
        fromStringValue(socket->queryString().values("content_reference_config_resource_types"), content_reference_config_resource_types);
    }
    


    emit comDayCqWcmCoreImplReferencesContentContentReferenceConfig( post,  apply,  _delete,  action,  location,  propertylist,  content_reference_config_resource_types);
}


void OAIConfigmgrApiRequest::comDayCqWcmCoreImplServletsContentfinderAssetViewHandlerRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.AssetViewHandler";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmCoreImplServletsContentfinderAssetViewHandler, handler, &OAIConfigmgrApiHandler::comDayCqWcmCoreImplServletsContentfinderAssetViewHandler);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool dam_showexpired;   
    if(socket->queryString().keys().contains("dam_showexpired")){
        fromStringValue(socket->queryString().value("dam_showexpired"), dam_showexpired);
    }
    
    bool dam_showhidden;   
    if(socket->queryString().keys().contains("dam_showhidden")){
        fromStringValue(socket->queryString().value("dam_showhidden"), dam_showhidden);
    }
    
    bool tag_title_search;   
    if(socket->queryString().keys().contains("tag_title_search")){
        fromStringValue(socket->queryString().value("tag_title_search"), tag_title_search);
    }
    
    QString guess_total;   
    if(socket->queryString().keys().contains("guess_total")){
        fromStringValue(socket->queryString().value("guess_total"), guess_total);
    }
    
    QString dam_expiry_property;   
    if(socket->queryString().keys().contains("dam_expiry_property")){
        fromStringValue(socket->queryString().value("dam_expiry_property"), dam_expiry_property);
    }
    


    emit comDayCqWcmCoreImplServletsContentfinderAssetViewHandler( post,  apply,  _delete,  action,  location,  propertylist,  dam_showexpired,  dam_showhidden,  tag_title_search,  guess_total,  dam_expiry_property);
}


void OAIConfigmgrApiRequest::comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.connector.ConnectorViewHandler";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie, handler, &OAIConfigmgrApiHandler::comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> item_resource_types;   
    if(socket->queryString().keys().contains("item_resource_types")){
        fromStringValue(socket->queryString().values("item_resource_types"), item_resource_types);
    }
    


    emit comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie( post,  apply,  _delete,  action,  location,  propertylist,  item_resource_types);
}


void OAIConfigmgrApiRequest::comDayCqWcmCoreImplServletsContentfinderPageViewHandlerRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.PageViewHandler";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmCoreImplServletsContentfinderPageViewHandler, handler, &OAIConfigmgrApiHandler::comDayCqWcmCoreImplServletsContentfinderPageViewHandler);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString guess_total;   
    if(socket->queryString().keys().contains("guess_total")){
        fromStringValue(socket->queryString().value("guess_total"), guess_total);
    }
    
    bool tag_title_search;   
    if(socket->queryString().keys().contains("tag_title_search")){
        fromStringValue(socket->queryString().value("tag_title_search"), tag_title_search);
    }
    


    emit comDayCqWcmCoreImplServletsContentfinderPageViewHandler( post,  apply,  _delete,  action,  location,  propertylist,  guess_total,  tag_title_search);
}


void OAIConfigmgrApiRequest::comDayCqWcmCoreImplServletsFindReplaceServletRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.core.impl.servlets.FindReplaceServlet";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmCoreImplServletsFindReplaceServlet, handler, &OAIConfigmgrApiHandler::comDayCqWcmCoreImplServletsFindReplaceServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> scope;   
    if(socket->queryString().keys().contains("scope")){
        fromStringValue(socket->queryString().values("scope"), scope);
    }
    


    emit comDayCqWcmCoreImplServletsFindReplaceServlet( post,  apply,  _delete,  action,  location,  propertylist,  scope);
}


void OAIConfigmgrApiRequest::comDayCqWcmCoreImplServletsReferenceSearchServletRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ReferenceSearchServlet";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmCoreImplServletsReferenceSearchServlet, handler, &OAIConfigmgrApiHandler::comDayCqWcmCoreImplServletsReferenceSearchServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 referencesearchservlet_max_references_per_page;   
    if(socket->queryString().keys().contains("referencesearchservlet_max_references_per_page")){
        fromStringValue(socket->queryString().value("referencesearchservlet_max_references_per_page"), referencesearchservlet_max_references_per_page);
    }
    
    qint32 referencesearchservlet_max_pages;   
    if(socket->queryString().keys().contains("referencesearchservlet_max_pages")){
        fromStringValue(socket->queryString().value("referencesearchservlet_max_pages"), referencesearchservlet_max_pages);
    }
    


    emit comDayCqWcmCoreImplServletsReferenceSearchServlet( post,  apply,  _delete,  action,  location,  propertylist,  referencesearchservlet_max_references_per_page,  referencesearchservlet_max_pages);
}


void OAIConfigmgrApiRequest::comDayCqWcmCoreImplServletsThumbnailServletRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ThumbnailServlet";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmCoreImplServletsThumbnailServlet, handler, &OAIConfigmgrApiHandler::comDayCqWcmCoreImplServletsThumbnailServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString workspace;   
    if(socket->queryString().keys().contains("workspace")){
        fromStringValue(socket->queryString().value("workspace"), workspace);
    }
    
    QList<QString> dimensions;   
    if(socket->queryString().keys().contains("dimensions")){
        fromStringValue(socket->queryString().values("dimensions"), dimensions);
    }
    


    emit comDayCqWcmCoreImplServletsThumbnailServlet( post,  apply,  _delete,  action,  location,  propertylist,  workspace,  dimensions);
}


void OAIConfigmgrApiRequest::comDayCqWcmCoreImplUtilsDefaultPageNameValidatorRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.core.impl.utils.DefaultPageNameValidator";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmCoreImplUtilsDefaultPageNameValidator, handler, &OAIConfigmgrApiHandler::comDayCqWcmCoreImplUtilsDefaultPageNameValidator);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString non_valid_chars;   
    if(socket->queryString().keys().contains("non_valid_chars")){
        fromStringValue(socket->queryString().value("non_valid_chars"), non_valid_chars);
    }
    


    emit comDayCqWcmCoreImplUtilsDefaultPageNameValidator( post,  apply,  _delete,  action,  location,  propertylist,  non_valid_chars);
}


void OAIConfigmgrApiRequest::comDayCqWcmCoreImplVariantsPageVariantsProviderImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.core.impl.variants.PageVariantsProviderImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmCoreImplVariantsPageVariantsProviderImpl, handler, &OAIConfigmgrApiHandler::comDayCqWcmCoreImplVariantsPageVariantsProviderImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString default_externalizer_domain;   
    if(socket->queryString().keys().contains("default_externalizer_domain")){
        fromStringValue(socket->queryString().value("default_externalizer_domain"), default_externalizer_domain);
    }
    


    emit comDayCqWcmCoreImplVariantsPageVariantsProviderImpl( post,  apply,  _delete,  action,  location,  propertylist,  default_externalizer_domain);
}


void OAIConfigmgrApiRequest::comDayCqWcmCoreImplVersionManagerImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.core.impl.VersionManagerImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmCoreImplVersionManagerImpl, handler, &OAIConfigmgrApiHandler::comDayCqWcmCoreImplVersionManagerImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool versionmanager_create_version_on_activation;   
    if(socket->queryString().keys().contains("versionmanager_create_version_on_activation")){
        fromStringValue(socket->queryString().value("versionmanager_create_version_on_activation"), versionmanager_create_version_on_activation);
    }
    
    bool versionmanager_purging_enabled;   
    if(socket->queryString().keys().contains("versionmanager_purging_enabled")){
        fromStringValue(socket->queryString().value("versionmanager_purging_enabled"), versionmanager_purging_enabled);
    }
    
    QList<QString> versionmanager_purge_paths;   
    if(socket->queryString().keys().contains("versionmanager_purge_paths")){
        fromStringValue(socket->queryString().values("versionmanager_purge_paths"), versionmanager_purge_paths);
    }
    
    QList<QString> versionmanager_iv_paths;   
    if(socket->queryString().keys().contains("versionmanager_iv_paths")){
        fromStringValue(socket->queryString().values("versionmanager_iv_paths"), versionmanager_iv_paths);
    }
    
    qint32 versionmanager_max_age_days;   
    if(socket->queryString().keys().contains("versionmanager_max_age_days")){
        fromStringValue(socket->queryString().value("versionmanager_max_age_days"), versionmanager_max_age_days);
    }
    
    qint32 versionmanager_max_number_versions;   
    if(socket->queryString().keys().contains("versionmanager_max_number_versions")){
        fromStringValue(socket->queryString().value("versionmanager_max_number_versions"), versionmanager_max_number_versions);
    }
    
    qint32 versionmanager_min_number_versions;   
    if(socket->queryString().keys().contains("versionmanager_min_number_versions")){
        fromStringValue(socket->queryString().value("versionmanager_min_number_versions"), versionmanager_min_number_versions);
    }
    


    emit comDayCqWcmCoreImplVersionManagerImpl( post,  apply,  _delete,  action,  location,  propertylist,  versionmanager_create_version_on_activation,  versionmanager_purging_enabled,  versionmanager_purge_paths,  versionmanager_iv_paths,  versionmanager_max_age_days,  versionmanager_max_number_versions,  versionmanager_min_number_versions);
}


void OAIConfigmgrApiRequest::comDayCqWcmCoreImplVersionPurgeTaskRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.core.impl.VersionPurgeTask";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmCoreImplVersionPurgeTask, handler, &OAIConfigmgrApiHandler::comDayCqWcmCoreImplVersionPurgeTask);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> versionpurge_paths;   
    if(socket->queryString().keys().contains("versionpurge_paths")){
        fromStringValue(socket->queryString().values("versionpurge_paths"), versionpurge_paths);
    }
    
    bool versionpurge_recursive;   
    if(socket->queryString().keys().contains("versionpurge_recursive")){
        fromStringValue(socket->queryString().value("versionpurge_recursive"), versionpurge_recursive);
    }
    
    qint32 versionpurge_max_versions;   
    if(socket->queryString().keys().contains("versionpurge_max_versions")){
        fromStringValue(socket->queryString().value("versionpurge_max_versions"), versionpurge_max_versions);
    }
    
    qint32 versionpurge_min_versions;   
    if(socket->queryString().keys().contains("versionpurge_min_versions")){
        fromStringValue(socket->queryString().value("versionpurge_min_versions"), versionpurge_min_versions);
    }
    
    qint32 versionpurge_max_age_days;   
    if(socket->queryString().keys().contains("versionpurge_max_age_days")){
        fromStringValue(socket->queryString().value("versionpurge_max_age_days"), versionpurge_max_age_days);
    }
    


    emit comDayCqWcmCoreImplVersionPurgeTask( post,  apply,  _delete,  action,  location,  propertylist,  versionpurge_paths,  versionpurge_recursive,  versionpurge_max_versions,  versionpurge_min_versions,  versionpurge_max_age_days);
}


void OAIConfigmgrApiRequest::comDayCqWcmCoreImplWCMDebugFilterRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.core.impl.WCMDebugFilter";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmCoreImplWCMDebugFilter, handler, &OAIConfigmgrApiHandler::comDayCqWcmCoreImplWCMDebugFilter);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool wcmdbgfilter_enabled;   
    if(socket->queryString().keys().contains("wcmdbgfilter_enabled")){
        fromStringValue(socket->queryString().value("wcmdbgfilter_enabled"), wcmdbgfilter_enabled);
    }
    
    bool wcmdbgfilter_jsp_debug;   
    if(socket->queryString().keys().contains("wcmdbgfilter_jsp_debug")){
        fromStringValue(socket->queryString().value("wcmdbgfilter_jsp_debug"), wcmdbgfilter_jsp_debug);
    }
    


    emit comDayCqWcmCoreImplWCMDebugFilter( post,  apply,  _delete,  action,  location,  propertylist,  wcmdbgfilter_enabled,  wcmdbgfilter_jsp_debug);
}


void OAIConfigmgrApiRequest::comDayCqWcmCoreImplWCMDeveloperModeFilterRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.core.impl.WCMDeveloperModeFilter";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmCoreImplWCMDeveloperModeFilter, handler, &OAIConfigmgrApiHandler::comDayCqWcmCoreImplWCMDeveloperModeFilter);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool wcmdevmodefilter_enabled;   
    if(socket->queryString().keys().contains("wcmdevmodefilter_enabled")){
        fromStringValue(socket->queryString().value("wcmdevmodefilter_enabled"), wcmdevmodefilter_enabled);
    }
    


    emit comDayCqWcmCoreImplWCMDeveloperModeFilter( post,  apply,  _delete,  action,  location,  propertylist,  wcmdevmodefilter_enabled);
}


void OAIConfigmgrApiRequest::comDayCqWcmCoreImplWarpTimeWarpFilterRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.core.impl.warp.TimeWarpFilter";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmCoreImplWarpTimeWarpFilter, handler, &OAIConfigmgrApiHandler::comDayCqWcmCoreImplWarpTimeWarpFilter);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString filter_order;   
    if(socket->queryString().keys().contains("filter_order")){
        fromStringValue(socket->queryString().value("filter_order"), filter_order);
    }
    
    QString filter_scope;   
    if(socket->queryString().keys().contains("filter_scope")){
        fromStringValue(socket->queryString().value("filter_scope"), filter_scope);
    }
    


    emit comDayCqWcmCoreImplWarpTimeWarpFilter( post,  apply,  _delete,  action,  location,  propertylist,  filter_order,  filter_scope);
}


void OAIConfigmgrApiRequest::comDayCqWcmCoreMvtMVTStatisticsImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.core.mvt.MVTStatisticsImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmCoreMvtMVTStatisticsImpl, handler, &OAIConfigmgrApiHandler::comDayCqWcmCoreMvtMVTStatisticsImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString mvtstatistics_trackingurl;   
    if(socket->queryString().keys().contains("mvtstatistics_trackingurl")){
        fromStringValue(socket->queryString().value("mvtstatistics_trackingurl"), mvtstatistics_trackingurl);
    }
    


    emit comDayCqWcmCoreMvtMVTStatisticsImpl( post,  apply,  _delete,  action,  location,  propertylist,  mvtstatistics_trackingurl);
}


void OAIConfigmgrApiRequest::comDayCqWcmCoreStatsPageViewStatisticsImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.core.stats.PageViewStatisticsImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmCoreStatsPageViewStatisticsImpl, handler, &OAIConfigmgrApiHandler::comDayCqWcmCoreStatsPageViewStatisticsImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString pageviewstatistics_trackingurl;   
    if(socket->queryString().keys().contains("pageviewstatistics_trackingurl")){
        fromStringValue(socket->queryString().value("pageviewstatistics_trackingurl"), pageviewstatistics_trackingurl);
    }
    
    QString pageviewstatistics_trackingscript_enabled;   
    if(socket->queryString().keys().contains("pageviewstatistics_trackingscript_enabled")){
        fromStringValue(socket->queryString().value("pageviewstatistics_trackingscript_enabled"), pageviewstatistics_trackingscript_enabled);
    }
    


    emit comDayCqWcmCoreStatsPageViewStatisticsImpl( post,  apply,  _delete,  action,  location,  propertylist,  pageviewstatistics_trackingurl,  pageviewstatistics_trackingscript_enabled);
}


void OAIConfigmgrApiRequest::comDayCqWcmCoreWCMRequestFilterRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.core.WCMRequestFilter";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmCoreWCMRequestFilter, handler, &OAIConfigmgrApiHandler::comDayCqWcmCoreWCMRequestFilter);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString wcmfilter_mode;   
    if(socket->queryString().keys().contains("wcmfilter_mode")){
        fromStringValue(socket->queryString().value("wcmfilter_mode"), wcmfilter_mode);
    }
    


    emit comDayCqWcmCoreWCMRequestFilter( post,  apply,  _delete,  action,  location,  propertylist,  wcmfilter_mode);
}


void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterDesignPackageImporterRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.designimporter.DesignPackageImporter";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmDesignimporterDesignPackageImporter, handler, &OAIConfigmgrApiHandler::comDayCqWcmDesignimporterDesignPackageImporter);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> extract_filter;   
    if(socket->queryString().keys().contains("extract_filter")){
        fromStringValue(socket->queryString().values("extract_filter"), extract_filter);
    }
    


    emit comDayCqWcmDesignimporterDesignPackageImporter( post,  apply,  _delete,  action,  location,  propertylist,  extract_filter);
}


void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterImplCanvasBuilderImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasBuilderImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmDesignimporterImplCanvasBuilderImpl, handler, &OAIConfigmgrApiHandler::comDayCqWcmDesignimporterImplCanvasBuilderImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString filepattern;   
    if(socket->queryString().keys().contains("filepattern")){
        fromStringValue(socket->queryString().value("filepattern"), filepattern);
    }
    
    bool build_page_nodes;   
    if(socket->queryString().keys().contains("build_page_nodes")){
        fromStringValue(socket->queryString().value("build_page_nodes"), build_page_nodes);
    }
    
    bool build_client_libs;   
    if(socket->queryString().keys().contains("build_client_libs")){
        fromStringValue(socket->queryString().value("build_client_libs"), build_client_libs);
    }
    
    bool build_canvas_component;   
    if(socket->queryString().keys().contains("build_canvas_component")){
        fromStringValue(socket->queryString().value("build_canvas_component"), build_canvas_component);
    }
    


    emit comDayCqWcmDesignimporterImplCanvasBuilderImpl( post,  apply,  _delete,  action,  location,  propertylist,  filepattern,  build_page_nodes,  build_client_libs,  build_canvas_component);
}


void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterImplCanvasPageDeleteHandlerRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasPageDeleteHandler";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmDesignimporterImplCanvasPageDeleteHandler, handler, &OAIConfigmgrApiHandler::comDayCqWcmDesignimporterImplCanvasPageDeleteHandler);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 min_thread_pool_size;   
    if(socket->queryString().keys().contains("min_thread_pool_size")){
        fromStringValue(socket->queryString().value("min_thread_pool_size"), min_thread_pool_size);
    }
    
    qint32 max_thread_pool_size;   
    if(socket->queryString().keys().contains("max_thread_pool_size")){
        fromStringValue(socket->queryString().value("max_thread_pool_size"), max_thread_pool_size);
    }
    


    emit comDayCqWcmDesignimporterImplCanvasPageDeleteHandler( post,  apply,  _delete,  action,  location,  propertylist,  min_thread_pool_size,  max_thread_pool_size);
}


void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterImplEntryPreprocessorImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.designimporter.impl.EntryPreprocessorImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmDesignimporterImplEntryPreprocessorImpl, handler, &OAIConfigmgrApiHandler::comDayCqWcmDesignimporterImplEntryPreprocessorImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString search_pattern;   
    if(socket->queryString().keys().contains("search_pattern")){
        fromStringValue(socket->queryString().value("search_pattern"), search_pattern);
    }
    
    QString replace_pattern;   
    if(socket->queryString().keys().contains("replace_pattern")){
        fromStringValue(socket->queryString().value("replace_pattern"), replace_pattern);
    }
    


    emit comDayCqWcmDesignimporterImplEntryPreprocessorImpl( post,  apply,  _delete,  action,  location,  propertylist,  search_pattern,  replace_pattern);
}


void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterImplMobileCanvasBuilderImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.designimporter.impl.MobileCanvasBuilderImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmDesignimporterImplMobileCanvasBuilderImpl, handler, &OAIConfigmgrApiHandler::comDayCqWcmDesignimporterImplMobileCanvasBuilderImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString filepattern;   
    if(socket->queryString().keys().contains("filepattern")){
        fromStringValue(socket->queryString().value("filepattern"), filepattern);
    }
    
    QList<QString> device_groups;   
    if(socket->queryString().keys().contains("device_groups")){
        fromStringValue(socket->queryString().values("device_groups"), device_groups);
    }
    
    bool build_page_nodes;   
    if(socket->queryString().keys().contains("build_page_nodes")){
        fromStringValue(socket->queryString().value("build_page_nodes"), build_page_nodes);
    }
    
    bool build_client_libs;   
    if(socket->queryString().keys().contains("build_client_libs")){
        fromStringValue(socket->queryString().value("build_client_libs"), build_client_libs);
    }
    
    bool build_canvas_component;   
    if(socket->queryString().keys().contains("build_canvas_component")){
        fromStringValue(socket->queryString().value("build_canvas_component"), build_canvas_component);
    }
    


    emit comDayCqWcmDesignimporterImplMobileCanvasBuilderImpl( post,  apply,  _delete,  action,  location,  propertylist,  filepattern,  device_groups,  build_page_nodes,  build_client_libs,  build_canvas_component);
}


void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.CanvasComponentTagHandlerFactory";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone, handler, &OAIConfigmgrApiHandler::comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 service_ranking;   
    if(socket->queryString().keys().contains("service_ranking")){
        fromStringValue(socket->queryString().value("service_ranking"), service_ranking);
    }
    
    QString tagpattern;   
    if(socket->queryString().keys().contains("tagpattern")){
        fromStringValue(socket->queryString().value("tagpattern"), tagpattern);
    }
    


    emit comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone( post,  apply,  _delete,  action,  location,  propertylist,  service_ranking,  tagpattern);
}


void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultComponentTagHandlerFactory";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon, handler, &OAIConfigmgrApiHandler::comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 service_ranking;   
    if(socket->queryString().keys().contains("service_ranking")){
        fromStringValue(socket->queryString().value("service_ranking"), service_ranking);
    }
    
    QString tagpattern;   
    if(socket->queryString().keys().contains("tagpattern")){
        fromStringValue(socket->queryString().value("tagpattern"), tagpattern);
    }
    


    emit comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon( post,  apply,  _delete,  action,  location,  propertylist,  service_ranking,  tagpattern);
}


void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultTagHandlerFactory";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan, handler, &OAIConfigmgrApiHandler::comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 service_ranking;   
    if(socket->queryString().keys().contains("service_ranking")){
        fromStringValue(socket->queryString().value("service_ranking"), service_ranking);
    }
    
    QString tagpattern;   
    if(socket->queryString().keys().contains("tagpattern")){
        fromStringValue(socket->queryString().value("tagpattern"), tagpattern);
    }
    


    emit comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan( post,  apply,  _delete,  action,  location,  propertylist,  service_ranking,  tagpattern);
}


void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.HeadTagHandlerFactory";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle, handler, &OAIConfigmgrApiHandler::comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 service_ranking;   
    if(socket->queryString().keys().contains("service_ranking")){
        fromStringValue(socket->queryString().value("service_ranking"), service_ranking);
    }
    
    QString tagpattern;   
    if(socket->queryString().keys().contains("tagpattern")){
        fromStringValue(socket->queryString().value("tagpattern"), tagpattern);
    }
    


    emit comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle( post,  apply,  _delete,  action,  location,  propertylist,  service_ranking,  tagpattern);
}


void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.IFrameTagHandlerFactory";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand, handler, &OAIConfigmgrApiHandler::comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 service_ranking;   
    if(socket->queryString().keys().contains("service_ranking")){
        fromStringValue(socket->queryString().value("service_ranking"), service_ranking);
    }
    
    QString tagpattern;   
    if(socket->queryString().keys().contains("tagpattern")){
        fromStringValue(socket->queryString().value("tagpattern"), tagpattern);
    }
    


    emit comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand( post,  apply,  _delete,  action,  location,  propertylist,  service_ranking,  tagpattern);
}


void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImageComponentTagHandlerFactory";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen, handler, &OAIConfigmgrApiHandler::comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 service_ranking;   
    if(socket->queryString().keys().contains("service_ranking")){
        fromStringValue(socket->queryString().value("service_ranking"), service_ranking);
    }
    
    QString tagpattern;   
    if(socket->queryString().keys().contains("tagpattern")){
        fromStringValue(socket->queryString().value("tagpattern"), tagpattern);
    }
    
    QString component_resource_type;   
    if(socket->queryString().keys().contains("component_resource_type")){
        fromStringValue(socket->queryString().value("component_resource_type"), component_resource_type);
    }
    


    emit comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen( post,  apply,  _delete,  action,  location,  propertylist,  service_ranking,  tagpattern,  component_resource_type);
}


void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImgTagHandlerFactory";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler, handler, &OAIConfigmgrApiHandler::comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 service_ranking;   
    if(socket->queryString().keys().contains("service_ranking")){
        fromStringValue(socket->queryString().value("service_ranking"), service_ranking);
    }
    
    QString tagpattern;   
    if(socket->queryString().keys().contains("tagpattern")){
        fromStringValue(socket->queryString().value("tagpattern"), tagpattern);
    }
    


    emit comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler( post,  apply,  _delete,  action,  location,  propertylist,  service_ranking,  tagpattern);
}


void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.InlineScriptTagHandlerFactory";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT, handler, &OAIConfigmgrApiHandler::comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 service_ranking;   
    if(socket->queryString().keys().contains("service_ranking")){
        fromStringValue(socket->queryString().value("service_ranking"), service_ranking);
    }
    
    QString tagpattern;   
    if(socket->queryString().keys().contains("tagpattern")){
        fromStringValue(socket->queryString().value("tagpattern"), tagpattern);
    }
    


    emit comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT( post,  apply,  _delete,  action,  location,  propertylist,  service_ranking,  tagpattern);
}


void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.LinkTagHandlerFactory";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle, handler, &OAIConfigmgrApiHandler::comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 service_ranking;   
    if(socket->queryString().keys().contains("service_ranking")){
        fromStringValue(socket->queryString().value("service_ranking"), service_ranking);
    }
    
    QString tagpattern;   
    if(socket->queryString().keys().contains("tagpattern")){
        fromStringValue(socket->queryString().value("tagpattern"), tagpattern);
    }
    


    emit comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle( post,  apply,  _delete,  action,  location,  propertylist,  service_ranking,  tagpattern);
}


void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.MetaTagHandlerFactory";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle, handler, &OAIConfigmgrApiHandler::comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 service_ranking;   
    if(socket->queryString().keys().contains("service_ranking")){
        fromStringValue(socket->queryString().value("service_ranking"), service_ranking);
    }
    
    QString tagpattern;   
    if(socket->queryString().keys().contains("tagpattern")){
        fromStringValue(socket->queryString().value("tagpattern"), tagpattern);
    }
    


    emit comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle( post,  apply,  _delete,  action,  location,  propertylist,  service_ranking,  tagpattern);
}


void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.NonScriptTagHandlerFactory";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH, handler, &OAIConfigmgrApiHandler::comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 service_ranking;   
    if(socket->queryString().keys().contains("service_ranking")){
        fromStringValue(socket->queryString().value("service_ranking"), service_ranking);
    }
    
    QString tagpattern;   
    if(socket->queryString().keys().contains("tagpattern")){
        fromStringValue(socket->queryString().value("tagpattern"), tagpattern);
    }
    


    emit comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH( post,  apply,  _delete,  action,  location,  propertylist,  service_ranking,  tagpattern);
}


void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ParsysComponentTagHandlerFactory";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone, handler, &OAIConfigmgrApiHandler::comDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 service_ranking;   
    if(socket->queryString().keys().contains("service_ranking")){
        fromStringValue(socket->queryString().value("service_ranking"), service_ranking);
    }
    
    QString tagpattern;   
    if(socket->queryString().keys().contains("tagpattern")){
        fromStringValue(socket->queryString().value("tagpattern"), tagpattern);
    }
    
    QString component_resource_type;   
    if(socket->queryString().keys().contains("component_resource_type")){
        fromStringValue(socket->queryString().value("component_resource_type"), component_resource_type);
    }
    


    emit comDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone( post,  apply,  _delete,  action,  location,  propertylist,  service_ranking,  tagpattern,  component_resource_type);
}


void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ScriptTagHandlerFactory";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand, handler, &OAIConfigmgrApiHandler::comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 service_ranking;   
    if(socket->queryString().keys().contains("service_ranking")){
        fromStringValue(socket->queryString().value("service_ranking"), service_ranking);
    }
    
    QString tagpattern;   
    if(socket->queryString().keys().contains("tagpattern")){
        fromStringValue(socket->queryString().value("tagpattern"), tagpattern);
    }
    


    emit comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand( post,  apply,  _delete,  action,  location,  propertylist,  service_ranking,  tagpattern);
}


void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.StyleTagHandlerFactory";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl, handler, &OAIConfigmgrApiHandler::comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 service_ranking;   
    if(socket->queryString().keys().contains("service_ranking")){
        fromStringValue(socket->queryString().value("service_ranking"), service_ranking);
    }
    
    QString tagpattern;   
    if(socket->queryString().keys().contains("tagpattern")){
        fromStringValue(socket->queryString().value("tagpattern"), tagpattern);
    }
    


    emit comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl( post,  apply,  _delete,  action,  location,  propertylist,  service_ranking,  tagpattern);
}


void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TextComponentTagHandlerFactory";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent, handler, &OAIConfigmgrApiHandler::comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 service_ranking;   
    if(socket->queryString().keys().contains("service_ranking")){
        fromStringValue(socket->queryString().value("service_ranking"), service_ranking);
    }
    
    QString tagpattern;   
    if(socket->queryString().keys().contains("tagpattern")){
        fromStringValue(socket->queryString().value("tagpattern"), tagpattern);
    }
    
    QString component_resource_type;   
    if(socket->queryString().keys().contains("component_resource_type")){
        fromStringValue(socket->queryString().value("component_resource_type"), component_resource_type);
    }
    


    emit comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent( post,  apply,  _delete,  action,  location,  propertylist,  service_ranking,  tagpattern,  component_resource_type);
}


void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleComponentTagHandlerFactory";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen, handler, &OAIConfigmgrApiHandler::comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 service_ranking;   
    if(socket->queryString().keys().contains("service_ranking")){
        fromStringValue(socket->queryString().value("service_ranking"), service_ranking);
    }
    
    QString tagpattern;   
    if(socket->queryString().keys().contains("tagpattern")){
        fromStringValue(socket->queryString().value("tagpattern"), tagpattern);
    }
    
    QString component_resource_type;   
    if(socket->queryString().keys().contains("component_resource_type")){
        fromStringValue(socket->queryString().value("component_resource_type"), component_resource_type);
    }
    


    emit comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen( post,  apply,  _delete,  action,  location,  propertylist,  service_ranking,  tagpattern,  component_resource_type);
}


void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleTagHandlerFactory";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl, handler, &OAIConfigmgrApiHandler::comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 service_ranking;   
    if(socket->queryString().keys().contains("service_ranking")){
        fromStringValue(socket->queryString().value("service_ranking"), service_ranking);
    }
    
    QString tagpattern;   
    if(socket->queryString().keys().contains("tagpattern")){
        fromStringValue(socket->queryString().value("tagpattern"), tagpattern);
    }
    


    emit comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl( post,  apply,  _delete,  action,  location,  propertylist,  service_ranking,  tagpattern);
}


void OAIConfigmgrApiRequest::comDayCqWcmFoundationFormsImplFormChooserServletRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormChooserServlet";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmFoundationFormsImplFormChooserServlet, handler, &OAIConfigmgrApiHandler::comDayCqWcmFoundationFormsImplFormChooserServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString service_name;   
    if(socket->queryString().keys().contains("service_name")){
        fromStringValue(socket->queryString().value("service_name"), service_name);
    }
    
    QString sling_servlet_resource_types;   
    if(socket->queryString().keys().contains("sling_servlet_resource_types")){
        fromStringValue(socket->queryString().value("sling_servlet_resource_types"), sling_servlet_resource_types);
    }
    
    QString sling_servlet_selectors;   
    if(socket->queryString().keys().contains("sling_servlet_selectors")){
        fromStringValue(socket->queryString().value("sling_servlet_selectors"), sling_servlet_selectors);
    }
    
    QList<QString> sling_servlet_methods;   
    if(socket->queryString().keys().contains("sling_servlet_methods")){
        fromStringValue(socket->queryString().values("sling_servlet_methods"), sling_servlet_methods);
    }
    
    bool forms_formchooserservlet_advansesearch_require;   
    if(socket->queryString().keys().contains("forms_formchooserservlet_advansesearch_require")){
        fromStringValue(socket->queryString().value("forms_formchooserservlet_advansesearch_require"), forms_formchooserservlet_advansesearch_require);
    }
    


    emit comDayCqWcmFoundationFormsImplFormChooserServlet( post,  apply,  _delete,  action,  location,  propertylist,  service_name,  sling_servlet_resource_types,  sling_servlet_selectors,  sling_servlet_methods,  forms_formchooserservlet_advansesearch_require);
}


void OAIConfigmgrApiRequest::comDayCqWcmFoundationFormsImplFormParagraphPostProcessorRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormParagraphPostProcessor";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmFoundationFormsImplFormParagraphPostProcessor, handler, &OAIConfigmgrApiHandler::comDayCqWcmFoundationFormsImplFormParagraphPostProcessor);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool forms_formparagraphpostprocessor_enabled;   
    if(socket->queryString().keys().contains("forms_formparagraphpostprocessor_enabled")){
        fromStringValue(socket->queryString().value("forms_formparagraphpostprocessor_enabled"), forms_formparagraphpostprocessor_enabled);
    }
    
    QList<QString> forms_formparagraphpostprocessor_formresourcetypes;   
    if(socket->queryString().keys().contains("forms_formparagraphpostprocessor_formresourcetypes")){
        fromStringValue(socket->queryString().values("forms_formparagraphpostprocessor_formresourcetypes"), forms_formparagraphpostprocessor_formresourcetypes);
    }
    


    emit comDayCqWcmFoundationFormsImplFormParagraphPostProcessor( post,  apply,  _delete,  action,  location,  propertylist,  forms_formparagraphpostprocessor_enabled,  forms_formparagraphpostprocessor_formresourcetypes);
}


void OAIConfigmgrApiRequest::comDayCqWcmFoundationFormsImplFormsHandlingServletRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormsHandlingServlet";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmFoundationFormsImplFormsHandlingServlet, handler, &OAIConfigmgrApiHandler::comDayCqWcmFoundationFormsImplFormsHandlingServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString name_whitelist;   
    if(socket->queryString().keys().contains("name_whitelist")){
        fromStringValue(socket->queryString().value("name_whitelist"), name_whitelist);
    }
    
    bool allow_expressions;   
    if(socket->queryString().keys().contains("allow_expressions")){
        fromStringValue(socket->queryString().value("allow_expressions"), allow_expressions);
    }
    


    emit comDayCqWcmFoundationFormsImplFormsHandlingServlet( post,  apply,  _delete,  action,  location,  propertylist,  name_whitelist,  allow_expressions);
}


void OAIConfigmgrApiRequest::comDayCqWcmFoundationFormsImplMailServletRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.MailServlet";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmFoundationFormsImplMailServlet, handler, &OAIConfigmgrApiHandler::comDayCqWcmFoundationFormsImplMailServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString sling_servlet_resource_types;   
    if(socket->queryString().keys().contains("sling_servlet_resource_types")){
        fromStringValue(socket->queryString().value("sling_servlet_resource_types"), sling_servlet_resource_types);
    }
    
    QString sling_servlet_selectors;   
    if(socket->queryString().keys().contains("sling_servlet_selectors")){
        fromStringValue(socket->queryString().value("sling_servlet_selectors"), sling_servlet_selectors);
    }
    
    QList<QString> resource_whitelist;   
    if(socket->queryString().keys().contains("resource_whitelist")){
        fromStringValue(socket->queryString().values("resource_whitelist"), resource_whitelist);
    }
    
    QString resource_blacklist;   
    if(socket->queryString().keys().contains("resource_blacklist")){
        fromStringValue(socket->queryString().value("resource_blacklist"), resource_blacklist);
    }
    


    emit comDayCqWcmFoundationFormsImplMailServlet( post,  apply,  _delete,  action,  location,  propertylist,  sling_servlet_resource_types,  sling_servlet_selectors,  resource_whitelist,  resource_blacklist);
}


void OAIConfigmgrApiRequest::comDayCqWcmFoundationImplAdaptiveImageComponentServletRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.foundation.impl.AdaptiveImageComponentServlet";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmFoundationImplAdaptiveImageComponentServlet, handler, &OAIConfigmgrApiHandler::comDayCqWcmFoundationImplAdaptiveImageComponentServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> adapt_supported_widths;   
    if(socket->queryString().keys().contains("adapt_supported_widths")){
        fromStringValue(socket->queryString().values("adapt_supported_widths"), adapt_supported_widths);
    }
    


    emit comDayCqWcmFoundationImplAdaptiveImageComponentServlet( post,  apply,  _delete,  action,  location,  propertylist,  adapt_supported_widths);
}


void OAIConfigmgrApiRequest::comDayCqWcmFoundationImplHTTPAuthHandlerRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.foundation.impl.HTTPAuthHandler";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmFoundationImplHTTPAuthHandler, handler, &OAIConfigmgrApiHandler::comDayCqWcmFoundationImplHTTPAuthHandler);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString path;   
    if(socket->queryString().keys().contains("path")){
        fromStringValue(socket->queryString().value("path"), path);
    }
    
    bool auth_http_nologin;   
    if(socket->queryString().keys().contains("auth_http_nologin")){
        fromStringValue(socket->queryString().value("auth_http_nologin"), auth_http_nologin);
    }
    
    QString auth_http_realm;   
    if(socket->queryString().keys().contains("auth_http_realm")){
        fromStringValue(socket->queryString().value("auth_http_realm"), auth_http_realm);
    }
    
    QString auth_default_loginpage;   
    if(socket->queryString().keys().contains("auth_default_loginpage")){
        fromStringValue(socket->queryString().value("auth_default_loginpage"), auth_default_loginpage);
    }
    
    QList<QString> auth_cred_form;   
    if(socket->queryString().keys().contains("auth_cred_form")){
        fromStringValue(socket->queryString().values("auth_cred_form"), auth_cred_form);
    }
    
    QList<QString> auth_cred_utf8;   
    if(socket->queryString().keys().contains("auth_cred_utf8")){
        fromStringValue(socket->queryString().values("auth_cred_utf8"), auth_cred_utf8);
    }
    


    emit comDayCqWcmFoundationImplHTTPAuthHandler( post,  apply,  _delete,  action,  location,  propertylist,  path,  auth_http_nologin,  auth_http_realm,  auth_default_loginpage,  auth_cred_form,  auth_cred_utf8);
}


void OAIConfigmgrApiRequest::comDayCqWcmFoundationImplPageImpressionsTrackerRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.foundation.impl.PageImpressionsTracker";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmFoundationImplPageImpressionsTracker, handler, &OAIConfigmgrApiHandler::comDayCqWcmFoundationImplPageImpressionsTracker);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString sling_auth_requirements;   
    if(socket->queryString().keys().contains("sling_auth_requirements")){
        fromStringValue(socket->queryString().value("sling_auth_requirements"), sling_auth_requirements);
    }
    


    emit comDayCqWcmFoundationImplPageImpressionsTracker( post,  apply,  _delete,  action,  location,  propertylist,  sling_auth_requirements);
}


void OAIConfigmgrApiRequest::comDayCqWcmFoundationImplPageRedirectServletRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.foundation.impl.PageRedirectServlet";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmFoundationImplPageRedirectServlet, handler, &OAIConfigmgrApiHandler::comDayCqWcmFoundationImplPageRedirectServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> excluded_resource_types;   
    if(socket->queryString().keys().contains("excluded_resource_types")){
        fromStringValue(socket->queryString().values("excluded_resource_types"), excluded_resource_types);
    }
    


    emit comDayCqWcmFoundationImplPageRedirectServlet( post,  apply,  _delete,  action,  location,  propertylist,  excluded_resource_types);
}


void OAIConfigmgrApiRequest::comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.foundation.security.impl.DefaultAttachmentTypeBlacklistService";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist, handler, &OAIConfigmgrApiHandler::comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> default_attachment_type_blacklist;   
    if(socket->queryString().keys().contains("default_attachment_type_blacklist")){
        fromStringValue(socket->queryString().values("default_attachment_type_blacklist"), default_attachment_type_blacklist);
    }
    
    QList<QString> baseline_attachment_type_blacklist;   
    if(socket->queryString().keys().contains("baseline_attachment_type_blacklist")){
        fromStringValue(socket->queryString().values("baseline_attachment_type_blacklist"), baseline_attachment_type_blacklist);
    }
    


    emit comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist( post,  apply,  _delete,  action,  location,  propertylist,  default_attachment_type_blacklist,  baseline_attachment_type_blacklist);
}


void OAIConfigmgrApiRequest::comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.foundation.security.impl.SaferSlingPostValidatorImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl, handler, &OAIConfigmgrApiHandler::comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> parameter_whitelist;   
    if(socket->queryString().keys().contains("parameter_whitelist")){
        fromStringValue(socket->queryString().values("parameter_whitelist"), parameter_whitelist);
    }
    
    QList<QString> parameter_whitelist_prefixes;   
    if(socket->queryString().keys().contains("parameter_whitelist_prefixes")){
        fromStringValue(socket->queryString().values("parameter_whitelist_prefixes"), parameter_whitelist_prefixes);
    }
    
    QList<QString> binary_parameter_whitelist;   
    if(socket->queryString().keys().contains("binary_parameter_whitelist")){
        fromStringValue(socket->queryString().values("binary_parameter_whitelist"), binary_parameter_whitelist);
    }
    
    QList<QString> modifier_whitelist;   
    if(socket->queryString().keys().contains("modifier_whitelist")){
        fromStringValue(socket->queryString().values("modifier_whitelist"), modifier_whitelist);
    }
    
    QList<QString> operation_whitelist;   
    if(socket->queryString().keys().contains("operation_whitelist")){
        fromStringValue(socket->queryString().values("operation_whitelist"), operation_whitelist);
    }
    
    QList<QString> operation_whitelist_prefixes;   
    if(socket->queryString().keys().contains("operation_whitelist_prefixes")){
        fromStringValue(socket->queryString().values("operation_whitelist_prefixes"), operation_whitelist_prefixes);
    }
    
    QList<QString> typehint_whitelist;   
    if(socket->queryString().keys().contains("typehint_whitelist")){
        fromStringValue(socket->queryString().values("typehint_whitelist"), typehint_whitelist);
    }
    
    QList<QString> resourcetype_whitelist;   
    if(socket->queryString().keys().contains("resourcetype_whitelist")){
        fromStringValue(socket->queryString().values("resourcetype_whitelist"), resourcetype_whitelist);
    }
    


    emit comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl( post,  apply,  _delete,  action,  location,  propertylist,  parameter_whitelist,  parameter_whitelist_prefixes,  binary_parameter_whitelist,  modifier_whitelist,  operation_whitelist,  operation_whitelist_prefixes,  typehint_whitelist,  resourcetype_whitelist);
}


void OAIConfigmgrApiRequest::comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.mobile.core.impl.device.DeviceInfoTransformerFactory";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory, handler, &OAIConfigmgrApiHandler::comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool device_info_transformer_enabled;   
    if(socket->queryString().keys().contains("device_info_transformer_enabled")){
        fromStringValue(socket->queryString().value("device_info_transformer_enabled"), device_info_transformer_enabled);
    }
    
    QString device_info_transformer_css_style;   
    if(socket->queryString().keys().contains("device_info_transformer_css_style")){
        fromStringValue(socket->queryString().value("device_info_transformer_css_style"), device_info_transformer_css_style);
    }
    


    emit comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory( post,  apply,  _delete,  action,  location,  propertylist,  device_info_transformer_enabled,  device_info_transformer_css_style);
}


void OAIConfigmgrApiRequest::comDayCqWcmMobileCoreImplRedirectRedirectFilterRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.mobile.core.impl.redirect.RedirectFilter";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmMobileCoreImplRedirectRedirectFilter, handler, &OAIConfigmgrApiHandler::comDayCqWcmMobileCoreImplRedirectRedirectFilter);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool redirect_enabled;   
    if(socket->queryString().keys().contains("redirect_enabled")){
        fromStringValue(socket->queryString().value("redirect_enabled"), redirect_enabled);
    }
    
    bool redirect_stats_enabled;   
    if(socket->queryString().keys().contains("redirect_stats_enabled")){
        fromStringValue(socket->queryString().value("redirect_stats_enabled"), redirect_stats_enabled);
    }
    
    QList<QString> redirect_extensions;   
    if(socket->queryString().keys().contains("redirect_extensions")){
        fromStringValue(socket->queryString().values("redirect_extensions"), redirect_extensions);
    }
    
    QList<QString> redirect_paths;   
    if(socket->queryString().keys().contains("redirect_paths")){
        fromStringValue(socket->queryString().values("redirect_paths"), redirect_paths);
    }
    


    emit comDayCqWcmMobileCoreImplRedirectRedirectFilter( post,  apply,  _delete,  action,  location,  propertylist,  redirect_enabled,  redirect_stats_enabled,  redirect_extensions,  redirect_paths);
}


void OAIConfigmgrApiRequest::comDayCqWcmMsmImplActionsContentCopyActionFactoryRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentCopyActionFactory";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmMsmImplActionsContentCopyActionFactory, handler, &OAIConfigmgrApiHandler::comDayCqWcmMsmImplActionsContentCopyActionFactory);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> cq_wcm_msm_action_excludednodetypes;   
    if(socket->queryString().keys().contains("cq_wcm_msm_action_excludednodetypes")){
        fromStringValue(socket->queryString().values("cq_wcm_msm_action_excludednodetypes"), cq_wcm_msm_action_excludednodetypes);
    }
    
    QList<QString> cq_wcm_msm_action_excludedparagraphitems;   
    if(socket->queryString().keys().contains("cq_wcm_msm_action_excludedparagraphitems")){
        fromStringValue(socket->queryString().values("cq_wcm_msm_action_excludedparagraphitems"), cq_wcm_msm_action_excludedparagraphitems);
    }
    
    QList<QString> cq_wcm_msm_action_excludedprops;   
    if(socket->queryString().keys().contains("cq_wcm_msm_action_excludedprops")){
        fromStringValue(socket->queryString().values("cq_wcm_msm_action_excludedprops"), cq_wcm_msm_action_excludedprops);
    }
    
    QString contentcopyaction_order_style;   
    if(socket->queryString().keys().contains("contentcopyaction_order_style")){
        fromStringValue(socket->queryString().value("contentcopyaction_order_style"), contentcopyaction_order_style);
    }
    


    emit comDayCqWcmMsmImplActionsContentCopyActionFactory( post,  apply,  _delete,  action,  location,  propertylist,  cq_wcm_msm_action_excludednodetypes,  cq_wcm_msm_action_excludedparagraphitems,  cq_wcm_msm_action_excludedprops,  contentcopyaction_order_style);
}


void OAIConfigmgrApiRequest::comDayCqWcmMsmImplActionsContentDeleteActionFactoryRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentDeleteActionFactory";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmMsmImplActionsContentDeleteActionFactory, handler, &OAIConfigmgrApiHandler::comDayCqWcmMsmImplActionsContentDeleteActionFactory);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> cq_wcm_msm_action_excludednodetypes;   
    if(socket->queryString().keys().contains("cq_wcm_msm_action_excludednodetypes")){
        fromStringValue(socket->queryString().values("cq_wcm_msm_action_excludednodetypes"), cq_wcm_msm_action_excludednodetypes);
    }
    
    QList<QString> cq_wcm_msm_action_excludedparagraphitems;   
    if(socket->queryString().keys().contains("cq_wcm_msm_action_excludedparagraphitems")){
        fromStringValue(socket->queryString().values("cq_wcm_msm_action_excludedparagraphitems"), cq_wcm_msm_action_excludedparagraphitems);
    }
    
    QList<QString> cq_wcm_msm_action_excludedprops;   
    if(socket->queryString().keys().contains("cq_wcm_msm_action_excludedprops")){
        fromStringValue(socket->queryString().values("cq_wcm_msm_action_excludedprops"), cq_wcm_msm_action_excludedprops);
    }
    


    emit comDayCqWcmMsmImplActionsContentDeleteActionFactory( post,  apply,  _delete,  action,  location,  propertylist,  cq_wcm_msm_action_excludednodetypes,  cq_wcm_msm_action_excludedparagraphitems,  cq_wcm_msm_action_excludedprops);
}


void OAIConfigmgrApiRequest::comDayCqWcmMsmImplActionsContentUpdateActionFactoryRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentUpdateActionFactory";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmMsmImplActionsContentUpdateActionFactory, handler, &OAIConfigmgrApiHandler::comDayCqWcmMsmImplActionsContentUpdateActionFactory);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> cq_wcm_msm_action_excludednodetypes;   
    if(socket->queryString().keys().contains("cq_wcm_msm_action_excludednodetypes")){
        fromStringValue(socket->queryString().values("cq_wcm_msm_action_excludednodetypes"), cq_wcm_msm_action_excludednodetypes);
    }
    
    QList<QString> cq_wcm_msm_action_excludedparagraphitems;   
    if(socket->queryString().keys().contains("cq_wcm_msm_action_excludedparagraphitems")){
        fromStringValue(socket->queryString().values("cq_wcm_msm_action_excludedparagraphitems"), cq_wcm_msm_action_excludedparagraphitems);
    }
    
    QList<QString> cq_wcm_msm_action_excludedprops;   
    if(socket->queryString().keys().contains("cq_wcm_msm_action_excludedprops")){
        fromStringValue(socket->queryString().values("cq_wcm_msm_action_excludedprops"), cq_wcm_msm_action_excludedprops);
    }
    
    QList<QString> cq_wcm_msm_action_ignored_mixin;   
    if(socket->queryString().keys().contains("cq_wcm_msm_action_ignored_mixin")){
        fromStringValue(socket->queryString().values("cq_wcm_msm_action_ignored_mixin"), cq_wcm_msm_action_ignored_mixin);
    }
    


    emit comDayCqWcmMsmImplActionsContentUpdateActionFactory( post,  apply,  _delete,  action,  location,  propertylist,  cq_wcm_msm_action_excludednodetypes,  cq_wcm_msm_action_excludedparagraphitems,  cq_wcm_msm_action_excludedprops,  cq_wcm_msm_action_ignored_mixin);
}


void OAIConfigmgrApiRequest::comDayCqWcmMsmImplActionsOrderChildrenActionFactoryRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.msm.impl.actions.OrderChildrenActionFactory";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmMsmImplActionsOrderChildrenActionFactory, handler, &OAIConfigmgrApiHandler::comDayCqWcmMsmImplActionsOrderChildrenActionFactory);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> cq_wcm_msm_action_excludednodetypes;   
    if(socket->queryString().keys().contains("cq_wcm_msm_action_excludednodetypes")){
        fromStringValue(socket->queryString().values("cq_wcm_msm_action_excludednodetypes"), cq_wcm_msm_action_excludednodetypes);
    }
    
    QList<QString> cq_wcm_msm_action_excludedparagraphitems;   
    if(socket->queryString().keys().contains("cq_wcm_msm_action_excludedparagraphitems")){
        fromStringValue(socket->queryString().values("cq_wcm_msm_action_excludedparagraphitems"), cq_wcm_msm_action_excludedparagraphitems);
    }
    
    QList<QString> cq_wcm_msm_action_excludedprops;   
    if(socket->queryString().keys().contains("cq_wcm_msm_action_excludedprops")){
        fromStringValue(socket->queryString().values("cq_wcm_msm_action_excludedprops"), cq_wcm_msm_action_excludedprops);
    }
    


    emit comDayCqWcmMsmImplActionsOrderChildrenActionFactory( post,  apply,  _delete,  action,  location,  propertylist,  cq_wcm_msm_action_excludednodetypes,  cq_wcm_msm_action_excludedparagraphitems,  cq_wcm_msm_action_excludedprops);
}


void OAIConfigmgrApiRequest::comDayCqWcmMsmImplActionsPageMoveActionFactoryRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.msm.impl.actions.PageMoveActionFactory";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmMsmImplActionsPageMoveActionFactory, handler, &OAIConfigmgrApiHandler::comDayCqWcmMsmImplActionsPageMoveActionFactory);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> cq_wcm_msm_action_excludednodetypes;   
    if(socket->queryString().keys().contains("cq_wcm_msm_action_excludednodetypes")){
        fromStringValue(socket->queryString().values("cq_wcm_msm_action_excludednodetypes"), cq_wcm_msm_action_excludednodetypes);
    }
    
    QList<QString> cq_wcm_msm_action_excludedparagraphitems;   
    if(socket->queryString().keys().contains("cq_wcm_msm_action_excludedparagraphitems")){
        fromStringValue(socket->queryString().values("cq_wcm_msm_action_excludedparagraphitems"), cq_wcm_msm_action_excludedparagraphitems);
    }
    
    QList<QString> cq_wcm_msm_action_excludedprops;   
    if(socket->queryString().keys().contains("cq_wcm_msm_action_excludedprops")){
        fromStringValue(socket->queryString().values("cq_wcm_msm_action_excludedprops"), cq_wcm_msm_action_excludedprops);
    }
    
    bool cq_wcm_msm_impl_actions_pagemove_prop_reference_update;   
    if(socket->queryString().keys().contains("cq_wcm_msm_impl_actions_pagemove_prop_reference_update")){
        fromStringValue(socket->queryString().value("cq_wcm_msm_impl_actions_pagemove_prop_reference_update"), cq_wcm_msm_impl_actions_pagemove_prop_reference_update);
    }
    


    emit comDayCqWcmMsmImplActionsPageMoveActionFactory( post,  apply,  _delete,  action,  location,  propertylist,  cq_wcm_msm_action_excludednodetypes,  cq_wcm_msm_action_excludedparagraphitems,  cq_wcm_msm_action_excludedprops,  cq_wcm_msm_impl_actions_pagemove_prop_reference_update);
}


void OAIConfigmgrApiRequest::comDayCqWcmMsmImplActionsReferencesUpdateActionFactoryRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ReferencesUpdateActionFactory";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmMsmImplActionsReferencesUpdateActionFactory, handler, &OAIConfigmgrApiHandler::comDayCqWcmMsmImplActionsReferencesUpdateActionFactory);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> cq_wcm_msm_action_excludednodetypes;   
    if(socket->queryString().keys().contains("cq_wcm_msm_action_excludednodetypes")){
        fromStringValue(socket->queryString().values("cq_wcm_msm_action_excludednodetypes"), cq_wcm_msm_action_excludednodetypes);
    }
    
    QList<QString> cq_wcm_msm_action_excludedparagraphitems;   
    if(socket->queryString().keys().contains("cq_wcm_msm_action_excludedparagraphitems")){
        fromStringValue(socket->queryString().values("cq_wcm_msm_action_excludedparagraphitems"), cq_wcm_msm_action_excludedparagraphitems);
    }
    
    QList<QString> cq_wcm_msm_action_excludedprops;   
    if(socket->queryString().keys().contains("cq_wcm_msm_action_excludedprops")){
        fromStringValue(socket->queryString().values("cq_wcm_msm_action_excludedprops"), cq_wcm_msm_action_excludedprops);
    }
    
    bool cq_wcm_msm_impl_action_referencesupdate_prop_update_nested;   
    if(socket->queryString().keys().contains("cq_wcm_msm_impl_action_referencesupdate_prop_update_nested")){
        fromStringValue(socket->queryString().value("cq_wcm_msm_impl_action_referencesupdate_prop_update_nested"), cq_wcm_msm_impl_action_referencesupdate_prop_update_nested);
    }
    


    emit comDayCqWcmMsmImplActionsReferencesUpdateActionFactory( post,  apply,  _delete,  action,  location,  propertylist,  cq_wcm_msm_action_excludednodetypes,  cq_wcm_msm_action_excludedparagraphitems,  cq_wcm_msm_action_excludedprops,  cq_wcm_msm_impl_action_referencesupdate_prop_update_nested);
}


void OAIConfigmgrApiRequest::comDayCqWcmMsmImplActionsVersionCopyActionFactoryRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.msm.impl.actions.VersionCopyActionFactory";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmMsmImplActionsVersionCopyActionFactory, handler, &OAIConfigmgrApiHandler::comDayCqWcmMsmImplActionsVersionCopyActionFactory);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> cq_wcm_msm_action_excludednodetypes;   
    if(socket->queryString().keys().contains("cq_wcm_msm_action_excludednodetypes")){
        fromStringValue(socket->queryString().values("cq_wcm_msm_action_excludednodetypes"), cq_wcm_msm_action_excludednodetypes);
    }
    
    QList<QString> cq_wcm_msm_action_excludedparagraphitems;   
    if(socket->queryString().keys().contains("cq_wcm_msm_action_excludedparagraphitems")){
        fromStringValue(socket->queryString().values("cq_wcm_msm_action_excludedparagraphitems"), cq_wcm_msm_action_excludedparagraphitems);
    }
    
    QList<QString> cq_wcm_msm_action_excludedprops;   
    if(socket->queryString().keys().contains("cq_wcm_msm_action_excludedprops")){
        fromStringValue(socket->queryString().values("cq_wcm_msm_action_excludedprops"), cq_wcm_msm_action_excludedprops);
    }
    


    emit comDayCqWcmMsmImplActionsVersionCopyActionFactory( post,  apply,  _delete,  action,  location,  propertylist,  cq_wcm_msm_action_excludednodetypes,  cq_wcm_msm_action_excludedparagraphitems,  cq_wcm_msm_action_excludedprops);
}


void OAIConfigmgrApiRequest::comDayCqWcmMsmImplLiveRelationshipManagerImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.msm.impl.LiveRelationshipManagerImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmMsmImplLiveRelationshipManagerImpl, handler, &OAIConfigmgrApiHandler::comDayCqWcmMsmImplLiveRelationshipManagerImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString liverelationshipmgr_relationsconfig_default;   
    if(socket->queryString().keys().contains("liverelationshipmgr_relationsconfig_default")){
        fromStringValue(socket->queryString().value("liverelationshipmgr_relationsconfig_default"), liverelationshipmgr_relationsconfig_default);
    }
    


    emit comDayCqWcmMsmImplLiveRelationshipManagerImpl( post,  apply,  _delete,  action,  location,  propertylist,  liverelationshipmgr_relationsconfig_default);
}


void OAIConfigmgrApiRequest::comDayCqWcmMsmImplRolloutManagerImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.msm.impl.RolloutManagerImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmMsmImplRolloutManagerImpl, handler, &OAIConfigmgrApiHandler::comDayCqWcmMsmImplRolloutManagerImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString event_filter;   
    if(socket->queryString().keys().contains("event_filter")){
        fromStringValue(socket->queryString().value("event_filter"), event_filter);
    }
    
    QList<QString> rolloutmgr_excludedprops_default;   
    if(socket->queryString().keys().contains("rolloutmgr_excludedprops_default")){
        fromStringValue(socket->queryString().values("rolloutmgr_excludedprops_default"), rolloutmgr_excludedprops_default);
    }
    
    QList<QString> rolloutmgr_excludedparagraphprops_default;   
    if(socket->queryString().keys().contains("rolloutmgr_excludedparagraphprops_default")){
        fromStringValue(socket->queryString().values("rolloutmgr_excludedparagraphprops_default"), rolloutmgr_excludedparagraphprops_default);
    }
    
    QList<QString> rolloutmgr_excludednodetypes_default;   
    if(socket->queryString().keys().contains("rolloutmgr_excludednodetypes_default")){
        fromStringValue(socket->queryString().values("rolloutmgr_excludednodetypes_default"), rolloutmgr_excludednodetypes_default);
    }
    
    qint32 rolloutmgr_threadpool_maxsize;   
    if(socket->queryString().keys().contains("rolloutmgr_threadpool_maxsize")){
        fromStringValue(socket->queryString().value("rolloutmgr_threadpool_maxsize"), rolloutmgr_threadpool_maxsize);
    }
    
    qint32 rolloutmgr_threadpool_maxshutdowntime;   
    if(socket->queryString().keys().contains("rolloutmgr_threadpool_maxshutdowntime")){
        fromStringValue(socket->queryString().value("rolloutmgr_threadpool_maxshutdowntime"), rolloutmgr_threadpool_maxshutdowntime);
    }
    
    QString rolloutmgr_threadpool_priority;   
    if(socket->queryString().keys().contains("rolloutmgr_threadpool_priority")){
        fromStringValue(socket->queryString().value("rolloutmgr_threadpool_priority"), rolloutmgr_threadpool_priority);
    }
    
    qint32 rolloutmgr_commit_size;   
    if(socket->queryString().keys().contains("rolloutmgr_commit_size")){
        fromStringValue(socket->queryString().value("rolloutmgr_commit_size"), rolloutmgr_commit_size);
    }
    
    bool rolloutmgr_conflicthandling_enabled;   
    if(socket->queryString().keys().contains("rolloutmgr_conflicthandling_enabled")){
        fromStringValue(socket->queryString().value("rolloutmgr_conflicthandling_enabled"), rolloutmgr_conflicthandling_enabled);
    }
    


    emit comDayCqWcmMsmImplRolloutManagerImpl( post,  apply,  _delete,  action,  location,  propertylist,  event_filter,  rolloutmgr_excludedprops_default,  rolloutmgr_excludedparagraphprops_default,  rolloutmgr_excludednodetypes_default,  rolloutmgr_threadpool_maxsize,  rolloutmgr_threadpool_maxshutdowntime,  rolloutmgr_threadpool_priority,  rolloutmgr_commit_size,  rolloutmgr_conflicthandling_enabled);
}


void OAIConfigmgrApiRequest::comDayCqWcmMsmImplServletsAuditLogServletRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.msm.impl.servlets.AuditLogServlet";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmMsmImplServletsAuditLogServlet, handler, &OAIConfigmgrApiHandler::comDayCqWcmMsmImplServletsAuditLogServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 auditlogservlet_default_events_count;   
    if(socket->queryString().keys().contains("auditlogservlet_default_events_count")){
        fromStringValue(socket->queryString().value("auditlogservlet_default_events_count"), auditlogservlet_default_events_count);
    }
    
    QString auditlogservlet_default_path;   
    if(socket->queryString().keys().contains("auditlogservlet_default_path")){
        fromStringValue(socket->queryString().value("auditlogservlet_default_path"), auditlogservlet_default_path);
    }
    


    emit comDayCqWcmMsmImplServletsAuditLogServlet( post,  apply,  _delete,  action,  location,  propertylist,  auditlogservlet_default_events_count,  auditlogservlet_default_path);
}


void OAIConfigmgrApiRequest::comDayCqWcmNotificationEmailImplEmailChannelRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.notification.email.impl.EmailChannel";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmNotificationEmailImplEmailChannel, handler, &OAIConfigmgrApiHandler::comDayCqWcmNotificationEmailImplEmailChannel);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString email_from;   
    if(socket->queryString().keys().contains("email_from")){
        fromStringValue(socket->queryString().value("email_from"), email_from);
    }
    


    emit comDayCqWcmNotificationEmailImplEmailChannel( post,  apply,  _delete,  action,  location,  propertylist,  email_from);
}


void OAIConfigmgrApiRequest::comDayCqWcmNotificationImplNotificationManagerImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.notification.impl.NotificationManagerImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmNotificationImplNotificationManagerImpl, handler, &OAIConfigmgrApiHandler::comDayCqWcmNotificationImplNotificationManagerImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> event_topics;   
    if(socket->queryString().keys().contains("event_topics")){
        fromStringValue(socket->queryString().values("event_topics"), event_topics);
    }
    


    emit comDayCqWcmNotificationImplNotificationManagerImpl( post,  apply,  _delete,  action,  location,  propertylist,  event_topics);
}


void OAIConfigmgrApiRequest::comDayCqWcmScriptingImplBVPManagerRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.scripting.impl.BVPManager";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmScriptingImplBVPManager, handler, &OAIConfigmgrApiHandler::comDayCqWcmScriptingImplBVPManager);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> com_day_cq_wcm_scripting_bvp_script_engines;   
    if(socket->queryString().keys().contains("com_day_cq_wcm_scripting_bvp_script_engines")){
        fromStringValue(socket->queryString().values("com_day_cq_wcm_scripting_bvp_script_engines"), com_day_cq_wcm_scripting_bvp_script_engines);
    }
    


    emit comDayCqWcmScriptingImplBVPManager( post,  apply,  _delete,  action,  location,  propertylist,  com_day_cq_wcm_scripting_bvp_script_engines);
}


void OAIConfigmgrApiRequest::comDayCqWcmUndoUndoConfigRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.undo.UndoConfig";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmUndoUndoConfig, handler, &OAIConfigmgrApiHandler::comDayCqWcmUndoUndoConfig);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool cq_wcm_undo_enabled;   
    if(socket->queryString().keys().contains("cq_wcm_undo_enabled")){
        fromStringValue(socket->queryString().value("cq_wcm_undo_enabled"), cq_wcm_undo_enabled);
    }
    
    QString cq_wcm_undo_path;   
    if(socket->queryString().keys().contains("cq_wcm_undo_path")){
        fromStringValue(socket->queryString().value("cq_wcm_undo_path"), cq_wcm_undo_path);
    }
    
    qint32 cq_wcm_undo_validity;   
    if(socket->queryString().keys().contains("cq_wcm_undo_validity")){
        fromStringValue(socket->queryString().value("cq_wcm_undo_validity"), cq_wcm_undo_validity);
    }
    
    qint32 cq_wcm_undo_steps;   
    if(socket->queryString().keys().contains("cq_wcm_undo_steps")){
        fromStringValue(socket->queryString().value("cq_wcm_undo_steps"), cq_wcm_undo_steps);
    }
    
    QString cq_wcm_undo_persistence;   
    if(socket->queryString().keys().contains("cq_wcm_undo_persistence")){
        fromStringValue(socket->queryString().value("cq_wcm_undo_persistence"), cq_wcm_undo_persistence);
    }
    
    bool cq_wcm_undo_persistence_mode;   
    if(socket->queryString().keys().contains("cq_wcm_undo_persistence_mode")){
        fromStringValue(socket->queryString().value("cq_wcm_undo_persistence_mode"), cq_wcm_undo_persistence_mode);
    }
    
    QString cq_wcm_undo_markermode;   
    if(socket->queryString().keys().contains("cq_wcm_undo_markermode")){
        fromStringValue(socket->queryString().value("cq_wcm_undo_markermode"), cq_wcm_undo_markermode);
    }
    
    QList<QString> cq_wcm_undo_whitelist;   
    if(socket->queryString().keys().contains("cq_wcm_undo_whitelist")){
        fromStringValue(socket->queryString().values("cq_wcm_undo_whitelist"), cq_wcm_undo_whitelist);
    }
    
    QList<QString> cq_wcm_undo_blacklist;   
    if(socket->queryString().keys().contains("cq_wcm_undo_blacklist")){
        fromStringValue(socket->queryString().values("cq_wcm_undo_blacklist"), cq_wcm_undo_blacklist);
    }
    


    emit comDayCqWcmUndoUndoConfig( post,  apply,  _delete,  action,  location,  propertylist,  cq_wcm_undo_enabled,  cq_wcm_undo_path,  cq_wcm_undo_validity,  cq_wcm_undo_steps,  cq_wcm_undo_persistence,  cq_wcm_undo_persistence_mode,  cq_wcm_undo_markermode,  cq_wcm_undo_whitelist,  cq_wcm_undo_blacklist);
}


void OAIConfigmgrApiRequest::comDayCqWcmWebservicesupportImplReplicationEventListenerRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.webservicesupport.impl.ReplicationEventListener";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmWebservicesupportImplReplicationEventListener, handler, &OAIConfigmgrApiHandler::comDayCqWcmWebservicesupportImplReplicationEventListener);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> flush_agents;   
    if(socket->queryString().keys().contains("flush_agents")){
        fromStringValue(socket->queryString().values("flush_agents"), flush_agents);
    }
    


    emit comDayCqWcmWebservicesupportImplReplicationEventListener( post,  apply,  _delete,  action,  location,  propertylist,  flush_agents);
}


void OAIConfigmgrApiRequest::comDayCqWcmWorkflowImplWcmWorkflowServiceImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.workflow.impl.WcmWorkflowServiceImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmWorkflowImplWcmWorkflowServiceImpl, handler, &OAIConfigmgrApiHandler::comDayCqWcmWorkflowImplWcmWorkflowServiceImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString event_filter;   
    if(socket->queryString().keys().contains("event_filter")){
        fromStringValue(socket->queryString().value("event_filter"), event_filter);
    }
    
    qint32 min_thread_pool_size;   
    if(socket->queryString().keys().contains("min_thread_pool_size")){
        fromStringValue(socket->queryString().value("min_thread_pool_size"), min_thread_pool_size);
    }
    
    qint32 max_thread_pool_size;   
    if(socket->queryString().keys().contains("max_thread_pool_size")){
        fromStringValue(socket->queryString().value("max_thread_pool_size"), max_thread_pool_size);
    }
    
    bool cq_wcm_workflow_terminate_on_activate;   
    if(socket->queryString().keys().contains("cq_wcm_workflow_terminate_on_activate")){
        fromStringValue(socket->queryString().value("cq_wcm_workflow_terminate_on_activate"), cq_wcm_workflow_terminate_on_activate);
    }
    
    QList<QString> cq_wcm_worklfow_terminate_exclusion_list;   
    if(socket->queryString().keys().contains("cq_wcm_worklfow_terminate_exclusion_list")){
        fromStringValue(socket->queryString().values("cq_wcm_worklfow_terminate_exclusion_list"), cq_wcm_worklfow_terminate_exclusion_list);
    }
    


    emit comDayCqWcmWorkflowImplWcmWorkflowServiceImpl( post,  apply,  _delete,  action,  location,  propertylist,  event_filter,  min_thread_pool_size,  max_thread_pool_size,  cq_wcm_workflow_terminate_on_activate,  cq_wcm_worklfow_terminate_exclusion_list);
}


void OAIConfigmgrApiRequest::comDayCqWcmWorkflowImplWorkflowPackageInfoProviderRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.wcm.workflow.impl.WorkflowPackageInfoProvider";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWcmWorkflowImplWorkflowPackageInfoProvider, handler, &OAIConfigmgrApiHandler::comDayCqWcmWorkflowImplWorkflowPackageInfoProvider);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> workflowpackageinfoprovider_filter;   
    if(socket->queryString().keys().contains("workflowpackageinfoprovider_filter")){
        fromStringValue(socket->queryString().values("workflowpackageinfoprovider_filter"), workflowpackageinfoprovider_filter);
    }
    
    QString workflowpackageinfoprovider_filter_rootpath;   
    if(socket->queryString().keys().contains("workflowpackageinfoprovider_filter_rootpath")){
        fromStringValue(socket->queryString().value("workflowpackageinfoprovider_filter_rootpath"), workflowpackageinfoprovider_filter_rootpath);
    }
    


    emit comDayCqWcmWorkflowImplWorkflowPackageInfoProvider( post,  apply,  _delete,  action,  location,  propertylist,  workflowpackageinfoprovider_filter,  workflowpackageinfoprovider_filter_rootpath);
}


void OAIConfigmgrApiRequest::comDayCqWidgetImplHtmlLibraryManagerImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.widget.impl.HtmlLibraryManagerImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWidgetImplHtmlLibraryManagerImpl, handler, &OAIConfigmgrApiHandler::comDayCqWidgetImplHtmlLibraryManagerImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString htmllibmanager_clientmanager;   
    if(socket->queryString().keys().contains("htmllibmanager_clientmanager")){
        fromStringValue(socket->queryString().value("htmllibmanager_clientmanager"), htmllibmanager_clientmanager);
    }
    
    bool htmllibmanager_debug;   
    if(socket->queryString().keys().contains("htmllibmanager_debug")){
        fromStringValue(socket->queryString().value("htmllibmanager_debug"), htmllibmanager_debug);
    }
    
    bool htmllibmanager_debug_console;   
    if(socket->queryString().keys().contains("htmllibmanager_debug_console")){
        fromStringValue(socket->queryString().value("htmllibmanager_debug_console"), htmllibmanager_debug_console);
    }
    
    QString htmllibmanager_debug_init_js;   
    if(socket->queryString().keys().contains("htmllibmanager_debug_init_js")){
        fromStringValue(socket->queryString().value("htmllibmanager_debug_init_js"), htmllibmanager_debug_init_js);
    }
    
    QString htmllibmanager_defaultthemename;   
    if(socket->queryString().keys().contains("htmllibmanager_defaultthemename")){
        fromStringValue(socket->queryString().value("htmllibmanager_defaultthemename"), htmllibmanager_defaultthemename);
    }
    
    QString htmllibmanager_defaultuserthemename;   
    if(socket->queryString().keys().contains("htmllibmanager_defaultuserthemename")){
        fromStringValue(socket->queryString().value("htmllibmanager_defaultuserthemename"), htmllibmanager_defaultuserthemename);
    }
    
    QString htmllibmanager_firebuglite_path;   
    if(socket->queryString().keys().contains("htmllibmanager_firebuglite_path")){
        fromStringValue(socket->queryString().value("htmllibmanager_firebuglite_path"), htmllibmanager_firebuglite_path);
    }
    
    bool htmllibmanager_force_cq_url_info;   
    if(socket->queryString().keys().contains("htmllibmanager_force_cq_url_info")){
        fromStringValue(socket->queryString().value("htmllibmanager_force_cq_url_info"), htmllibmanager_force_cq_url_info);
    }
    
    bool htmllibmanager_gzip;   
    if(socket->queryString().keys().contains("htmllibmanager_gzip")){
        fromStringValue(socket->queryString().value("htmllibmanager_gzip"), htmllibmanager_gzip);
    }
    
    qint32 htmllibmanager_maxage;   
    if(socket->queryString().keys().contains("htmllibmanager_maxage")){
        fromStringValue(socket->queryString().value("htmllibmanager_maxage"), htmllibmanager_maxage);
    }
    
    qint32 htmllibmanager_max_data_uri_size;   
    if(socket->queryString().keys().contains("htmllibmanager_max_data_uri_size")){
        fromStringValue(socket->queryString().value("htmllibmanager_max_data_uri_size"), htmllibmanager_max_data_uri_size);
    }
    
    bool htmllibmanager_minify;   
    if(socket->queryString().keys().contains("htmllibmanager_minify")){
        fromStringValue(socket->queryString().value("htmllibmanager_minify"), htmllibmanager_minify);
    }
    
    QList<QString> htmllibmanager_path_list;   
    if(socket->queryString().keys().contains("htmllibmanager_path_list")){
        fromStringValue(socket->queryString().values("htmllibmanager_path_list"), htmllibmanager_path_list);
    }
    
    bool htmllibmanager_timing;   
    if(socket->queryString().keys().contains("htmllibmanager_timing")){
        fromStringValue(socket->queryString().value("htmllibmanager_timing"), htmllibmanager_timing);
    }
    


    emit comDayCqWidgetImplHtmlLibraryManagerImpl( post,  apply,  _delete,  action,  location,  propertylist,  htmllibmanager_clientmanager,  htmllibmanager_debug,  htmllibmanager_debug_console,  htmllibmanager_debug_init_js,  htmllibmanager_defaultthemename,  htmllibmanager_defaultuserthemename,  htmllibmanager_firebuglite_path,  htmllibmanager_force_cq_url_info,  htmllibmanager_gzip,  htmllibmanager_maxage,  htmllibmanager_max_data_uri_size,  htmllibmanager_minify,  htmllibmanager_path_list,  htmllibmanager_timing);
}


void OAIConfigmgrApiRequest::comDayCqWidgetImplWidgetExtensionProviderImplRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.widget.impl.WidgetExtensionProviderImpl";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWidgetImplWidgetExtensionProviderImpl, handler, &OAIConfigmgrApiHandler::comDayCqWidgetImplWidgetExtensionProviderImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> extendable_widgets;   
    if(socket->queryString().keys().contains("extendable_widgets")){
        fromStringValue(socket->queryString().values("extendable_widgets"), extendable_widgets);
    }
    
    bool widgetextensionprovider_debug;   
    if(socket->queryString().keys().contains("widgetextensionprovider_debug")){
        fromStringValue(socket->queryString().value("widgetextensionprovider_debug"), widgetextensionprovider_debug);
    }
    


    emit comDayCqWidgetImplWidgetExtensionProviderImpl( post,  apply,  _delete,  action,  location,  propertylist,  extendable_widgets,  widgetextensionprovider_debug);
}


void OAIConfigmgrApiRequest::comDayCqWorkflowImplEmailEMailNotificationServiceRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.workflow.impl.email.EMailNotificationService";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWorkflowImplEmailEMailNotificationService, handler, &OAIConfigmgrApiHandler::comDayCqWorkflowImplEmailEMailNotificationService);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString from_address;   
    if(socket->queryString().keys().contains("from_address")){
        fromStringValue(socket->queryString().value("from_address"), from_address);
    }
    
    QString host_prefix;   
    if(socket->queryString().keys().contains("host_prefix")){
        fromStringValue(socket->queryString().value("host_prefix"), host_prefix);
    }
    
    bool notify_onabort;   
    if(socket->queryString().keys().contains("notify_onabort")){
        fromStringValue(socket->queryString().value("notify_onabort"), notify_onabort);
    }
    
    bool notify_oncomplete;   
    if(socket->queryString().keys().contains("notify_oncomplete")){
        fromStringValue(socket->queryString().value("notify_oncomplete"), notify_oncomplete);
    }
    
    bool notify_oncontainercomplete;   
    if(socket->queryString().keys().contains("notify_oncontainercomplete")){
        fromStringValue(socket->queryString().value("notify_oncontainercomplete"), notify_oncontainercomplete);
    }
    
    bool notify_useronly;   
    if(socket->queryString().keys().contains("notify_useronly")){
        fromStringValue(socket->queryString().value("notify_useronly"), notify_useronly);
    }
    


    emit comDayCqWorkflowImplEmailEMailNotificationService( post,  apply,  _delete,  action,  location,  propertylist,  from_address,  host_prefix,  notify_onabort,  notify_oncomplete,  notify_oncontainercomplete,  notify_useronly);
}


void OAIConfigmgrApiRequest::comDayCqWorkflowImplEmailTaskEMailNotificationServiceRequest(){
    qDebug() << "//system/console/configMgr/com.day.cq.workflow.impl.email.TaskEMailNotificationService";
    connect(this, &OAIConfigmgrApiRequest::comDayCqWorkflowImplEmailTaskEMailNotificationService, handler, &OAIConfigmgrApiHandler::comDayCqWorkflowImplEmailTaskEMailNotificationService);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool notify_onupdate;   
    if(socket->queryString().keys().contains("notify_onupdate")){
        fromStringValue(socket->queryString().value("notify_onupdate"), notify_onupdate);
    }
    
    bool notify_oncomplete;   
    if(socket->queryString().keys().contains("notify_oncomplete")){
        fromStringValue(socket->queryString().value("notify_oncomplete"), notify_oncomplete);
    }
    


    emit comDayCqWorkflowImplEmailTaskEMailNotificationService( post,  apply,  _delete,  action,  location,  propertylist,  notify_onupdate,  notify_oncomplete);
}


void OAIConfigmgrApiRequest::comDayCrxSecurityTokenImplImplTokenAuthenticationHandlerRequest(){
    qDebug() << "//system/console/configMgr/com.day.crx.security.token.impl.impl.TokenAuthenticationHandler";
    connect(this, &OAIConfigmgrApiRequest::comDayCrxSecurityTokenImplImplTokenAuthenticationHandler, handler, &OAIConfigmgrApiHandler::comDayCrxSecurityTokenImplImplTokenAuthenticationHandler);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString path;   
    if(socket->queryString().keys().contains("path")){
        fromStringValue(socket->queryString().value("path"), path);
    }
    
    QString token_required_attr;   
    if(socket->queryString().keys().contains("token_required_attr")){
        fromStringValue(socket->queryString().value("token_required_attr"), token_required_attr);
    }
    
    QString token_alternate_url;   
    if(socket->queryString().keys().contains("token_alternate_url")){
        fromStringValue(socket->queryString().value("token_alternate_url"), token_alternate_url);
    }
    
    bool token_encapsulated;   
    if(socket->queryString().keys().contains("token_encapsulated")){
        fromStringValue(socket->queryString().value("token_encapsulated"), token_encapsulated);
    }
    
    QList<QString> skip_token_refresh;   
    if(socket->queryString().keys().contains("skip_token_refresh")){
        fromStringValue(socket->queryString().values("skip_token_refresh"), skip_token_refresh);
    }
    


    emit comDayCrxSecurityTokenImplImplTokenAuthenticationHandler( post,  apply,  _delete,  action,  location,  propertylist,  path,  token_required_attr,  token_alternate_url,  token_encapsulated,  skip_token_refresh);
}


void OAIConfigmgrApiRequest::comDayCrxSecurityTokenImplTokenCleanupTaskRequest(){
    qDebug() << "//system/console/configMgr/com.day.crx.security.token.impl.TokenCleanupTask";
    connect(this, &OAIConfigmgrApiRequest::comDayCrxSecurityTokenImplTokenCleanupTask, handler, &OAIConfigmgrApiHandler::comDayCrxSecurityTokenImplTokenCleanupTask);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool enable_token_cleanup_task;   
    if(socket->queryString().keys().contains("enable_token_cleanup_task")){
        fromStringValue(socket->queryString().value("enable_token_cleanup_task"), enable_token_cleanup_task);
    }
    
    QString scheduler_expression;   
    if(socket->queryString().keys().contains("scheduler_expression")){
        fromStringValue(socket->queryString().value("scheduler_expression"), scheduler_expression);
    }
    
    qint32 batch_size;   
    if(socket->queryString().keys().contains("batch_size")){
        fromStringValue(socket->queryString().value("batch_size"), batch_size);
    }
    


    emit comDayCrxSecurityTokenImplTokenCleanupTask( post,  apply,  _delete,  action,  location,  propertylist,  enable_token_cleanup_task,  scheduler_expression,  batch_size);
}


void OAIConfigmgrApiRequest::guideLocalizationServiceRequest(){
    qDebug() << "//system/console/configMgr/Guide Localization Service";
    connect(this, &OAIConfigmgrApiRequest::guideLocalizationService, handler, &OAIConfigmgrApiHandler::guideLocalizationService);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> supported_locales;   
    if(socket->queryString().keys().contains("supported_locales")){
        fromStringValue(socket->queryString().values("supported_locales"), supported_locales);
    }
    
    QList<QString> localizable_properties;   
    if(socket->queryString().keys().contains("localizable_properties")){
        fromStringValue(socket->queryString().values("localizable_properties"), localizable_properties);
    }
    


    emit guideLocalizationService( post,  apply,  _delete,  action,  location,  propertylist,  supported_locales,  localizable_properties);
}


void OAIConfigmgrApiRequest::messagingUserComponentFactoryRequest(){
    qDebug() << "//system/console/configMgr/MessagingUserComponentFactory";
    connect(this, &OAIConfigmgrApiRequest::messagingUserComponentFactory, handler, &OAIConfigmgrApiHandler::messagingUserComponentFactory);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 priority;   
    if(socket->queryString().keys().contains("priority")){
        fromStringValue(socket->queryString().value("priority"), priority);
    }
    


    emit messagingUserComponentFactory( post,  apply,  _delete,  action,  location,  propertylist,  priority);
}


void OAIConfigmgrApiRequest::orgApacheAriesJmxFrameworkStateConfigRequest(){
    qDebug() << "//system/console/configMgr/org.apache.aries.jmx.framework.StateConfig";
    connect(this, &OAIConfigmgrApiRequest::orgApacheAriesJmxFrameworkStateConfig, handler, &OAIConfigmgrApiHandler::orgApacheAriesJmxFrameworkStateConfig);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool attribute_change_notification_enabled;   
    if(socket->queryString().keys().contains("attribute_change_notification_enabled")){
        fromStringValue(socket->queryString().value("attribute_change_notification_enabled"), attribute_change_notification_enabled);
    }
    


    emit orgApacheAriesJmxFrameworkStateConfig( post,  apply,  _delete,  action,  location,  propertylist,  attribute_change_notification_enabled);
}


void OAIConfigmgrApiRequest::orgApacheFelixEventadminImplEventAdminRequest(){
    qDebug() << "//system/console/configMgr/org.apache.felix.eventadmin.impl.EventAdmin";
    connect(this, &OAIConfigmgrApiRequest::orgApacheFelixEventadminImplEventAdmin, handler, &OAIConfigmgrApiHandler::orgApacheFelixEventadminImplEventAdmin);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 org_apache_felix_eventadmin_thread_pool_size;   
    if(socket->queryString().keys().contains("org_apache_felix_eventadmin_thread_pool_size")){
        fromStringValue(socket->queryString().value("org_apache_felix_eventadmin_thread_pool_size"), org_apache_felix_eventadmin_thread_pool_size);
    }
    
    OAINumber org_apache_felix_eventadmin_async_to_sync_thread_ratio;   
    if(socket->queryString().keys().contains("org_apache_felix_eventadmin_async_to_sync_thread_ratio")){
        fromStringValue(socket->queryString().value("org_apache_felix_eventadmin_async_to_sync_thread_ratio"), org_apache_felix_eventadmin_async_to_sync_thread_ratio);
    }
    
    qint32 org_apache_felix_eventadmin_timeout;   
    if(socket->queryString().keys().contains("org_apache_felix_eventadmin_timeout")){
        fromStringValue(socket->queryString().value("org_apache_felix_eventadmin_timeout"), org_apache_felix_eventadmin_timeout);
    }
    
    bool org_apache_felix_eventadmin_require_topic;   
    if(socket->queryString().keys().contains("org_apache_felix_eventadmin_require_topic")){
        fromStringValue(socket->queryString().value("org_apache_felix_eventadmin_require_topic"), org_apache_felix_eventadmin_require_topic);
    }
    
    QList<QString> org_apache_felix_eventadmin_ignore_timeout;   
    if(socket->queryString().keys().contains("org_apache_felix_eventadmin_ignore_timeout")){
        fromStringValue(socket->queryString().values("org_apache_felix_eventadmin_ignore_timeout"), org_apache_felix_eventadmin_ignore_timeout);
    }
    
    QList<QString> org_apache_felix_eventadmin_ignore_topic;   
    if(socket->queryString().keys().contains("org_apache_felix_eventadmin_ignore_topic")){
        fromStringValue(socket->queryString().values("org_apache_felix_eventadmin_ignore_topic"), org_apache_felix_eventadmin_ignore_topic);
    }
    


    emit orgApacheFelixEventadminImplEventAdmin( post,  apply,  _delete,  action,  location,  propertylist,  org_apache_felix_eventadmin_thread_pool_size,  org_apache_felix_eventadmin_async_to_sync_thread_ratio,  org_apache_felix_eventadmin_timeout,  org_apache_felix_eventadmin_require_topic,  org_apache_felix_eventadmin_ignore_timeout,  org_apache_felix_eventadmin_ignore_topic);
}


void OAIConfigmgrApiRequest::orgApacheFelixHttpRequest(){
    qDebug() << "//system/console/configMgr/org.apache.felix.http";
    connect(this, &OAIConfigmgrApiRequest::orgApacheFelixHttp, handler, &OAIConfigmgrApiHandler::orgApacheFelixHttp);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString org_apache_felix_http_host;   
    if(socket->queryString().keys().contains("org_apache_felix_http_host")){
        fromStringValue(socket->queryString().value("org_apache_felix_http_host"), org_apache_felix_http_host);
    }
    
    bool org_apache_felix_http_enable;   
    if(socket->queryString().keys().contains("org_apache_felix_http_enable")){
        fromStringValue(socket->queryString().value("org_apache_felix_http_enable"), org_apache_felix_http_enable);
    }
    
    qint32 org_osgi_service_http_port;   
    if(socket->queryString().keys().contains("org_osgi_service_http_port")){
        fromStringValue(socket->queryString().value("org_osgi_service_http_port"), org_osgi_service_http_port);
    }
    
    qint32 org_apache_felix_http_timeout;   
    if(socket->queryString().keys().contains("org_apache_felix_http_timeout")){
        fromStringValue(socket->queryString().value("org_apache_felix_http_timeout"), org_apache_felix_http_timeout);
    }
    
    bool org_apache_felix_https_enable;   
    if(socket->queryString().keys().contains("org_apache_felix_https_enable")){
        fromStringValue(socket->queryString().value("org_apache_felix_https_enable"), org_apache_felix_https_enable);
    }
    
    qint32 org_osgi_service_http_port_secure;   
    if(socket->queryString().keys().contains("org_osgi_service_http_port_secure")){
        fromStringValue(socket->queryString().value("org_osgi_service_http_port_secure"), org_osgi_service_http_port_secure);
    }
    
    QString org_apache_felix_https_keystore;   
    if(socket->queryString().keys().contains("org_apache_felix_https_keystore")){
        fromStringValue(socket->queryString().value("org_apache_felix_https_keystore"), org_apache_felix_https_keystore);
    }
    
    QString org_apache_felix_https_keystore_password;   
    if(socket->queryString().keys().contains("org_apache_felix_https_keystore_password")){
        fromStringValue(socket->queryString().value("org_apache_felix_https_keystore_password"), org_apache_felix_https_keystore_password);
    }
    
    QString org_apache_felix_https_keystore_key_password;   
    if(socket->queryString().keys().contains("org_apache_felix_https_keystore_key_password")){
        fromStringValue(socket->queryString().value("org_apache_felix_https_keystore_key_password"), org_apache_felix_https_keystore_key_password);
    }
    
    QString org_apache_felix_https_truststore;   
    if(socket->queryString().keys().contains("org_apache_felix_https_truststore")){
        fromStringValue(socket->queryString().value("org_apache_felix_https_truststore"), org_apache_felix_https_truststore);
    }
    
    QString org_apache_felix_https_truststore_password;   
    if(socket->queryString().keys().contains("org_apache_felix_https_truststore_password")){
        fromStringValue(socket->queryString().value("org_apache_felix_https_truststore_password"), org_apache_felix_https_truststore_password);
    }
    
    QString org_apache_felix_https_clientcertificate;   
    if(socket->queryString().keys().contains("org_apache_felix_https_clientcertificate")){
        fromStringValue(socket->queryString().value("org_apache_felix_https_clientcertificate"), org_apache_felix_https_clientcertificate);
    }
    
    QString org_apache_felix_http_context_path;   
    if(socket->queryString().keys().contains("org_apache_felix_http_context_path")){
        fromStringValue(socket->queryString().value("org_apache_felix_http_context_path"), org_apache_felix_http_context_path);
    }
    
    bool org_apache_felix_http_mbeans;   
    if(socket->queryString().keys().contains("org_apache_felix_http_mbeans")){
        fromStringValue(socket->queryString().value("org_apache_felix_http_mbeans"), org_apache_felix_http_mbeans);
    }
    
    qint32 org_apache_felix_http_session_timeout;   
    if(socket->queryString().keys().contains("org_apache_felix_http_session_timeout")){
        fromStringValue(socket->queryString().value("org_apache_felix_http_session_timeout"), org_apache_felix_http_session_timeout);
    }
    
    qint32 org_apache_felix_http_jetty_threadpool_max;   
    if(socket->queryString().keys().contains("org_apache_felix_http_jetty_threadpool_max")){
        fromStringValue(socket->queryString().value("org_apache_felix_http_jetty_threadpool_max"), org_apache_felix_http_jetty_threadpool_max);
    }
    
    qint32 org_apache_felix_http_jetty_acceptors;   
    if(socket->queryString().keys().contains("org_apache_felix_http_jetty_acceptors")){
        fromStringValue(socket->queryString().value("org_apache_felix_http_jetty_acceptors"), org_apache_felix_http_jetty_acceptors);
    }
    
    qint32 org_apache_felix_http_jetty_selectors;   
    if(socket->queryString().keys().contains("org_apache_felix_http_jetty_selectors")){
        fromStringValue(socket->queryString().value("org_apache_felix_http_jetty_selectors"), org_apache_felix_http_jetty_selectors);
    }
    
    qint32 org_apache_felix_http_jetty_header_buffer_size;   
    if(socket->queryString().keys().contains("org_apache_felix_http_jetty_header_buffer_size")){
        fromStringValue(socket->queryString().value("org_apache_felix_http_jetty_header_buffer_size"), org_apache_felix_http_jetty_header_buffer_size);
    }
    
    qint32 org_apache_felix_http_jetty_request_buffer_size;   
    if(socket->queryString().keys().contains("org_apache_felix_http_jetty_request_buffer_size")){
        fromStringValue(socket->queryString().value("org_apache_felix_http_jetty_request_buffer_size"), org_apache_felix_http_jetty_request_buffer_size);
    }
    
    qint32 org_apache_felix_http_jetty_response_buffer_size;   
    if(socket->queryString().keys().contains("org_apache_felix_http_jetty_response_buffer_size")){
        fromStringValue(socket->queryString().value("org_apache_felix_http_jetty_response_buffer_size"), org_apache_felix_http_jetty_response_buffer_size);
    }
    
    qint32 org_apache_felix_http_jetty_max_form_size;   
    if(socket->queryString().keys().contains("org_apache_felix_http_jetty_max_form_size")){
        fromStringValue(socket->queryString().value("org_apache_felix_http_jetty_max_form_size"), org_apache_felix_http_jetty_max_form_size);
    }
    
    QList<QString> org_apache_felix_http_path_exclusions;   
    if(socket->queryString().keys().contains("org_apache_felix_http_path_exclusions")){
        fromStringValue(socket->queryString().values("org_apache_felix_http_path_exclusions"), org_apache_felix_http_path_exclusions);
    }
    
    QList<QString> org_apache_felix_https_jetty_ciphersuites_excluded;   
    if(socket->queryString().keys().contains("org_apache_felix_https_jetty_ciphersuites_excluded")){
        fromStringValue(socket->queryString().values("org_apache_felix_https_jetty_ciphersuites_excluded"), org_apache_felix_https_jetty_ciphersuites_excluded);
    }
    
    QList<QString> org_apache_felix_https_jetty_ciphersuites_included;   
    if(socket->queryString().keys().contains("org_apache_felix_https_jetty_ciphersuites_included")){
        fromStringValue(socket->queryString().values("org_apache_felix_https_jetty_ciphersuites_included"), org_apache_felix_https_jetty_ciphersuites_included);
    }
    
    bool org_apache_felix_http_jetty_send_server_header;   
    if(socket->queryString().keys().contains("org_apache_felix_http_jetty_send_server_header")){
        fromStringValue(socket->queryString().value("org_apache_felix_http_jetty_send_server_header"), org_apache_felix_http_jetty_send_server_header);
    }
    
    QList<QString> org_apache_felix_https_jetty_protocols_included;   
    if(socket->queryString().keys().contains("org_apache_felix_https_jetty_protocols_included")){
        fromStringValue(socket->queryString().values("org_apache_felix_https_jetty_protocols_included"), org_apache_felix_https_jetty_protocols_included);
    }
    
    QList<QString> org_apache_felix_https_jetty_protocols_excluded;   
    if(socket->queryString().keys().contains("org_apache_felix_https_jetty_protocols_excluded")){
        fromStringValue(socket->queryString().values("org_apache_felix_https_jetty_protocols_excluded"), org_apache_felix_https_jetty_protocols_excluded);
    }
    
    bool org_apache_felix_proxy_load_balancer_connection_enable;   
    if(socket->queryString().keys().contains("org_apache_felix_proxy_load_balancer_connection_enable")){
        fromStringValue(socket->queryString().value("org_apache_felix_proxy_load_balancer_connection_enable"), org_apache_felix_proxy_load_balancer_connection_enable);
    }
    
    bool org_apache_felix_https_jetty_renegotiate_allowed;   
    if(socket->queryString().keys().contains("org_apache_felix_https_jetty_renegotiate_allowed")){
        fromStringValue(socket->queryString().value("org_apache_felix_https_jetty_renegotiate_allowed"), org_apache_felix_https_jetty_renegotiate_allowed);
    }
    
    bool org_apache_felix_https_jetty_session_cookie_http_only;   
    if(socket->queryString().keys().contains("org_apache_felix_https_jetty_session_cookie_http_only")){
        fromStringValue(socket->queryString().value("org_apache_felix_https_jetty_session_cookie_http_only"), org_apache_felix_https_jetty_session_cookie_http_only);
    }
    
    bool org_apache_felix_https_jetty_session_cookie_secure;   
    if(socket->queryString().keys().contains("org_apache_felix_https_jetty_session_cookie_secure")){
        fromStringValue(socket->queryString().value("org_apache_felix_https_jetty_session_cookie_secure"), org_apache_felix_https_jetty_session_cookie_secure);
    }
    
    QString org_eclipse_jetty_servlet_session_id_path_parameter_name;   
    if(socket->queryString().keys().contains("org_eclipse_jetty_servlet_session_id_path_parameter_name")){
        fromStringValue(socket->queryString().value("org_eclipse_jetty_servlet_session_id_path_parameter_name"), org_eclipse_jetty_servlet_session_id_path_parameter_name);
    }
    
    bool org_eclipse_jetty_servlet_checking_remote_session_id_encoding;   
    if(socket->queryString().keys().contains("org_eclipse_jetty_servlet_checking_remote_session_id_encoding")){
        fromStringValue(socket->queryString().value("org_eclipse_jetty_servlet_checking_remote_session_id_encoding"), org_eclipse_jetty_servlet_checking_remote_session_id_encoding);
    }
    
    QString org_eclipse_jetty_servlet_session_cookie;   
    if(socket->queryString().keys().contains("org_eclipse_jetty_servlet_session_cookie")){
        fromStringValue(socket->queryString().value("org_eclipse_jetty_servlet_session_cookie"), org_eclipse_jetty_servlet_session_cookie);
    }
    
    QString org_eclipse_jetty_servlet_session_domain;   
    if(socket->queryString().keys().contains("org_eclipse_jetty_servlet_session_domain")){
        fromStringValue(socket->queryString().value("org_eclipse_jetty_servlet_session_domain"), org_eclipse_jetty_servlet_session_domain);
    }
    
    QString org_eclipse_jetty_servlet_session_path;   
    if(socket->queryString().keys().contains("org_eclipse_jetty_servlet_session_path")){
        fromStringValue(socket->queryString().value("org_eclipse_jetty_servlet_session_path"), org_eclipse_jetty_servlet_session_path);
    }
    
    qint32 org_eclipse_jetty_servlet_max_age;   
    if(socket->queryString().keys().contains("org_eclipse_jetty_servlet_max_age")){
        fromStringValue(socket->queryString().value("org_eclipse_jetty_servlet_max_age"), org_eclipse_jetty_servlet_max_age);
    }
    
    QString org_apache_felix_http_name;   
    if(socket->queryString().keys().contains("org_apache_felix_http_name")){
        fromStringValue(socket->queryString().value("org_apache_felix_http_name"), org_apache_felix_http_name);
    }
    
    bool org_apache_felix_jetty_gziphandler_enable;   
    if(socket->queryString().keys().contains("org_apache_felix_jetty_gziphandler_enable")){
        fromStringValue(socket->queryString().value("org_apache_felix_jetty_gziphandler_enable"), org_apache_felix_jetty_gziphandler_enable);
    }
    
    qint32 org_apache_felix_jetty_gzip_min_gzip_size;   
    if(socket->queryString().keys().contains("org_apache_felix_jetty_gzip_min_gzip_size")){
        fromStringValue(socket->queryString().value("org_apache_felix_jetty_gzip_min_gzip_size"), org_apache_felix_jetty_gzip_min_gzip_size);
    }
    
    qint32 org_apache_felix_jetty_gzip_compression_level;   
    if(socket->queryString().keys().contains("org_apache_felix_jetty_gzip_compression_level")){
        fromStringValue(socket->queryString().value("org_apache_felix_jetty_gzip_compression_level"), org_apache_felix_jetty_gzip_compression_level);
    }
    
    qint32 org_apache_felix_jetty_gzip_inflate_buffer_size;   
    if(socket->queryString().keys().contains("org_apache_felix_jetty_gzip_inflate_buffer_size")){
        fromStringValue(socket->queryString().value("org_apache_felix_jetty_gzip_inflate_buffer_size"), org_apache_felix_jetty_gzip_inflate_buffer_size);
    }
    
    bool org_apache_felix_jetty_gzip_sync_flush;   
    if(socket->queryString().keys().contains("org_apache_felix_jetty_gzip_sync_flush")){
        fromStringValue(socket->queryString().value("org_apache_felix_jetty_gzip_sync_flush"), org_apache_felix_jetty_gzip_sync_flush);
    }
    
    QList<QString> org_apache_felix_jetty_gzip_excluded_user_agents;   
    if(socket->queryString().keys().contains("org_apache_felix_jetty_gzip_excluded_user_agents")){
        fromStringValue(socket->queryString().values("org_apache_felix_jetty_gzip_excluded_user_agents"), org_apache_felix_jetty_gzip_excluded_user_agents);
    }
    
    QList<QString> org_apache_felix_jetty_gzip_included_methods;   
    if(socket->queryString().keys().contains("org_apache_felix_jetty_gzip_included_methods")){
        fromStringValue(socket->queryString().values("org_apache_felix_jetty_gzip_included_methods"), org_apache_felix_jetty_gzip_included_methods);
    }
    
    QList<QString> org_apache_felix_jetty_gzip_excluded_methods;   
    if(socket->queryString().keys().contains("org_apache_felix_jetty_gzip_excluded_methods")){
        fromStringValue(socket->queryString().values("org_apache_felix_jetty_gzip_excluded_methods"), org_apache_felix_jetty_gzip_excluded_methods);
    }
    
    QList<QString> org_apache_felix_jetty_gzip_included_paths;   
    if(socket->queryString().keys().contains("org_apache_felix_jetty_gzip_included_paths")){
        fromStringValue(socket->queryString().values("org_apache_felix_jetty_gzip_included_paths"), org_apache_felix_jetty_gzip_included_paths);
    }
    
    QList<QString> org_apache_felix_jetty_gzip_excluded_paths;   
    if(socket->queryString().keys().contains("org_apache_felix_jetty_gzip_excluded_paths")){
        fromStringValue(socket->queryString().values("org_apache_felix_jetty_gzip_excluded_paths"), org_apache_felix_jetty_gzip_excluded_paths);
    }
    
    QList<QString> org_apache_felix_jetty_gzip_included_mime_types;   
    if(socket->queryString().keys().contains("org_apache_felix_jetty_gzip_included_mime_types")){
        fromStringValue(socket->queryString().values("org_apache_felix_jetty_gzip_included_mime_types"), org_apache_felix_jetty_gzip_included_mime_types);
    }
    
    QList<QString> org_apache_felix_jetty_gzip_excluded_mime_types;   
    if(socket->queryString().keys().contains("org_apache_felix_jetty_gzip_excluded_mime_types")){
        fromStringValue(socket->queryString().values("org_apache_felix_jetty_gzip_excluded_mime_types"), org_apache_felix_jetty_gzip_excluded_mime_types);
    }
    
    bool org_apache_felix_http_session_invalidate;   
    if(socket->queryString().keys().contains("org_apache_felix_http_session_invalidate")){
        fromStringValue(socket->queryString().value("org_apache_felix_http_session_invalidate"), org_apache_felix_http_session_invalidate);
    }
    
    bool org_apache_felix_http_session_uniqueid;   
    if(socket->queryString().keys().contains("org_apache_felix_http_session_uniqueid")){
        fromStringValue(socket->queryString().value("org_apache_felix_http_session_uniqueid"), org_apache_felix_http_session_uniqueid);
    }
    


    emit orgApacheFelixHttp( post,  apply,  _delete,  action,  location,  propertylist,  org_apache_felix_http_host,  org_apache_felix_http_enable,  org_osgi_service_http_port,  org_apache_felix_http_timeout,  org_apache_felix_https_enable,  org_osgi_service_http_port_secure,  org_apache_felix_https_keystore,  org_apache_felix_https_keystore_password,  org_apache_felix_https_keystore_key_password,  org_apache_felix_https_truststore,  org_apache_felix_https_truststore_password,  org_apache_felix_https_clientcertificate,  org_apache_felix_http_context_path,  org_apache_felix_http_mbeans,  org_apache_felix_http_session_timeout,  org_apache_felix_http_jetty_threadpool_max,  org_apache_felix_http_jetty_acceptors,  org_apache_felix_http_jetty_selectors,  org_apache_felix_http_jetty_header_buffer_size,  org_apache_felix_http_jetty_request_buffer_size,  org_apache_felix_http_jetty_response_buffer_size,  org_apache_felix_http_jetty_max_form_size,  org_apache_felix_http_path_exclusions,  org_apache_felix_https_jetty_ciphersuites_excluded,  org_apache_felix_https_jetty_ciphersuites_included,  org_apache_felix_http_jetty_send_server_header,  org_apache_felix_https_jetty_protocols_included,  org_apache_felix_https_jetty_protocols_excluded,  org_apache_felix_proxy_load_balancer_connection_enable,  org_apache_felix_https_jetty_renegotiate_allowed,  org_apache_felix_https_jetty_session_cookie_http_only,  org_apache_felix_https_jetty_session_cookie_secure,  org_eclipse_jetty_servlet_session_id_path_parameter_name,  org_eclipse_jetty_servlet_checking_remote_session_id_encoding,  org_eclipse_jetty_servlet_session_cookie,  org_eclipse_jetty_servlet_session_domain,  org_eclipse_jetty_servlet_session_path,  org_eclipse_jetty_servlet_max_age,  org_apache_felix_http_name,  org_apache_felix_jetty_gziphandler_enable,  org_apache_felix_jetty_gzip_min_gzip_size,  org_apache_felix_jetty_gzip_compression_level,  org_apache_felix_jetty_gzip_inflate_buffer_size,  org_apache_felix_jetty_gzip_sync_flush,  org_apache_felix_jetty_gzip_excluded_user_agents,  org_apache_felix_jetty_gzip_included_methods,  org_apache_felix_jetty_gzip_excluded_methods,  org_apache_felix_jetty_gzip_included_paths,  org_apache_felix_jetty_gzip_excluded_paths,  org_apache_felix_jetty_gzip_included_mime_types,  org_apache_felix_jetty_gzip_excluded_mime_types,  org_apache_felix_http_session_invalidate,  org_apache_felix_http_session_uniqueid);
}


void OAIConfigmgrApiRequest::orgApacheFelixHttpSslfilterSslFilterRequest(){
    qDebug() << "//system/console/configMgr/org.apache.felix.http.sslfilter.SslFilter";
    connect(this, &OAIConfigmgrApiRequest::orgApacheFelixHttpSslfilterSslFilter, handler, &OAIConfigmgrApiHandler::orgApacheFelixHttpSslfilterSslFilter);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString ssl_forward_header;   
    if(socket->queryString().keys().contains("ssl_forward_header")){
        fromStringValue(socket->queryString().value("ssl_forward_header"), ssl_forward_header);
    }
    
    QString ssl_forward_value;   
    if(socket->queryString().keys().contains("ssl_forward_value")){
        fromStringValue(socket->queryString().value("ssl_forward_value"), ssl_forward_value);
    }
    
    QString ssl_forward_cert_header;   
    if(socket->queryString().keys().contains("ssl_forward_cert_header")){
        fromStringValue(socket->queryString().value("ssl_forward_cert_header"), ssl_forward_cert_header);
    }
    
    bool rewrite_absolute_urls;   
    if(socket->queryString().keys().contains("rewrite_absolute_urls")){
        fromStringValue(socket->queryString().value("rewrite_absolute_urls"), rewrite_absolute_urls);
    }
    


    emit orgApacheFelixHttpSslfilterSslFilter( post,  apply,  _delete,  action,  location,  propertylist,  ssl_forward_header,  ssl_forward_value,  ssl_forward_cert_header,  rewrite_absolute_urls);
}


void OAIConfigmgrApiRequest::orgApacheFelixJaasConfigurationFactoryRequest(){
    qDebug() << "//system/console/configMgr/org.apache.felix.jaas.Configuration.factory";
    connect(this, &OAIConfigmgrApiRequest::orgApacheFelixJaasConfigurationFactory, handler, &OAIConfigmgrApiHandler::orgApacheFelixJaasConfigurationFactory);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString jaas_control_flag;   
    if(socket->queryString().keys().contains("jaas_control_flag")){
        fromStringValue(socket->queryString().value("jaas_control_flag"), jaas_control_flag);
    }
    
    qint32 jaas_ranking;   
    if(socket->queryString().keys().contains("jaas_ranking")){
        fromStringValue(socket->queryString().value("jaas_ranking"), jaas_ranking);
    }
    
    QString jaas_realm_name;   
    if(socket->queryString().keys().contains("jaas_realm_name")){
        fromStringValue(socket->queryString().value("jaas_realm_name"), jaas_realm_name);
    }
    
    QString jaas_classname;   
    if(socket->queryString().keys().contains("jaas_classname")){
        fromStringValue(socket->queryString().value("jaas_classname"), jaas_classname);
    }
    
    QList<QString> jaas_options;   
    if(socket->queryString().keys().contains("jaas_options")){
        fromStringValue(socket->queryString().values("jaas_options"), jaas_options);
    }
    


    emit orgApacheFelixJaasConfigurationFactory( post,  apply,  _delete,  action,  location,  propertylist,  jaas_control_flag,  jaas_ranking,  jaas_realm_name,  jaas_classname,  jaas_options);
}


void OAIConfigmgrApiRequest::orgApacheFelixJaasConfigurationSpiRequest(){
    qDebug() << "//system/console/configMgr/org.apache.felix.jaas.ConfigurationSpi";
    connect(this, &OAIConfigmgrApiRequest::orgApacheFelixJaasConfigurationSpi, handler, &OAIConfigmgrApiHandler::orgApacheFelixJaasConfigurationSpi);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString jaas_default_realm_name;   
    if(socket->queryString().keys().contains("jaas_default_realm_name")){
        fromStringValue(socket->queryString().value("jaas_default_realm_name"), jaas_default_realm_name);
    }
    
    QString jaas_config_provider_name;   
    if(socket->queryString().keys().contains("jaas_config_provider_name")){
        fromStringValue(socket->queryString().value("jaas_config_provider_name"), jaas_config_provider_name);
    }
    
    QString jaas_global_config_policy;   
    if(socket->queryString().keys().contains("jaas_global_config_policy")){
        fromStringValue(socket->queryString().value("jaas_global_config_policy"), jaas_global_config_policy);
    }
    


    emit orgApacheFelixJaasConfigurationSpi( post,  apply,  _delete,  action,  location,  propertylist,  jaas_default_realm_name,  jaas_config_provider_name,  jaas_global_config_policy);
}


void OAIConfigmgrApiRequest::orgApacheFelixScrScrServiceRequest(){
    qDebug() << "//system/console/configMgr/org.apache.felix.scr.ScrService";
    connect(this, &OAIConfigmgrApiRequest::orgApacheFelixScrScrService, handler, &OAIConfigmgrApiHandler::orgApacheFelixScrScrService);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 ds_loglevel;   
    if(socket->queryString().keys().contains("ds_loglevel")){
        fromStringValue(socket->queryString().value("ds_loglevel"), ds_loglevel);
    }
    
    bool ds_factory_enabled;   
    if(socket->queryString().keys().contains("ds_factory_enabled")){
        fromStringValue(socket->queryString().value("ds_factory_enabled"), ds_factory_enabled);
    }
    
    bool ds_delayed_keep_instances;   
    if(socket->queryString().keys().contains("ds_delayed_keep_instances")){
        fromStringValue(socket->queryString().value("ds_delayed_keep_instances"), ds_delayed_keep_instances);
    }
    
    qint32 ds_lock_timeout_milliseconds;   
    if(socket->queryString().keys().contains("ds_lock_timeout_milliseconds")){
        fromStringValue(socket->queryString().value("ds_lock_timeout_milliseconds"), ds_lock_timeout_milliseconds);
    }
    
    qint32 ds_stop_timeout_milliseconds;   
    if(socket->queryString().keys().contains("ds_stop_timeout_milliseconds")){
        fromStringValue(socket->queryString().value("ds_stop_timeout_milliseconds"), ds_stop_timeout_milliseconds);
    }
    
    bool ds_global_extender;   
    if(socket->queryString().keys().contains("ds_global_extender")){
        fromStringValue(socket->queryString().value("ds_global_extender"), ds_global_extender);
    }
    


    emit orgApacheFelixScrScrService( post,  apply,  _delete,  action,  location,  propertylist,  ds_loglevel,  ds_factory_enabled,  ds_delayed_keep_instances,  ds_lock_timeout_milliseconds,  ds_stop_timeout_milliseconds,  ds_global_extender);
}


void OAIConfigmgrApiRequest::orgApacheFelixSystemreadyImplComponentsCheckRequest(){
    qDebug() << "//system/console/configMgr/org.apache.felix.systemready.impl.ComponentsCheck";
    connect(this, &OAIConfigmgrApiRequest::orgApacheFelixSystemreadyImplComponentsCheck, handler, &OAIConfigmgrApiHandler::orgApacheFelixSystemreadyImplComponentsCheck);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> components_list;   
    if(socket->queryString().keys().contains("components_list")){
        fromStringValue(socket->queryString().values("components_list"), components_list);
    }
    
    QString type;   
    if(socket->queryString().keys().contains("type")){
        fromStringValue(socket->queryString().value("type"), type);
    }
    


    emit orgApacheFelixSystemreadyImplComponentsCheck( post,  apply,  _delete,  action,  location,  propertylist,  components_list,  type);
}


void OAIConfigmgrApiRequest::orgApacheFelixSystemreadyImplFrameworkStartCheckRequest(){
    qDebug() << "//system/console/configMgr/org.apache.felix.systemready.impl.FrameworkStartCheck";
    connect(this, &OAIConfigmgrApiRequest::orgApacheFelixSystemreadyImplFrameworkStartCheck, handler, &OAIConfigmgrApiHandler::orgApacheFelixSystemreadyImplFrameworkStartCheck);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 timeout;   
    if(socket->queryString().keys().contains("timeout")){
        fromStringValue(socket->queryString().value("timeout"), timeout);
    }
    
    qint32 target_start_level;   
    if(socket->queryString().keys().contains("target_start_level")){
        fromStringValue(socket->queryString().value("target_start_level"), target_start_level);
    }
    
    QString target_start_level_prop_name;   
    if(socket->queryString().keys().contains("target_start_level_prop_name")){
        fromStringValue(socket->queryString().value("target_start_level_prop_name"), target_start_level_prop_name);
    }
    
    QString type;   
    if(socket->queryString().keys().contains("type")){
        fromStringValue(socket->queryString().value("type"), type);
    }
    


    emit orgApacheFelixSystemreadyImplFrameworkStartCheck( post,  apply,  _delete,  action,  location,  propertylist,  timeout,  target_start_level,  target_start_level_prop_name,  type);
}


void OAIConfigmgrApiRequest::orgApacheFelixSystemreadyImplServicesCheckRequest(){
    qDebug() << "//system/console/configMgr/org.apache.felix.systemready.impl.ServicesCheck";
    connect(this, &OAIConfigmgrApiRequest::orgApacheFelixSystemreadyImplServicesCheck, handler, &OAIConfigmgrApiHandler::orgApacheFelixSystemreadyImplServicesCheck);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> services_list;   
    if(socket->queryString().keys().contains("services_list")){
        fromStringValue(socket->queryString().values("services_list"), services_list);
    }
    
    QString type;   
    if(socket->queryString().keys().contains("type")){
        fromStringValue(socket->queryString().value("type"), type);
    }
    


    emit orgApacheFelixSystemreadyImplServicesCheck( post,  apply,  _delete,  action,  location,  propertylist,  services_list,  type);
}


void OAIConfigmgrApiRequest::orgApacheFelixSystemreadyImplServletSystemAliveServletRequest(){
    qDebug() << "//system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemAliveServlet";
    connect(this, &OAIConfigmgrApiRequest::orgApacheFelixSystemreadyImplServletSystemAliveServlet, handler, &OAIConfigmgrApiHandler::orgApacheFelixSystemreadyImplServletSystemAliveServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString osgi_http_whiteboard_servlet_pattern;   
    if(socket->queryString().keys().contains("osgi_http_whiteboard_servlet_pattern")){
        fromStringValue(socket->queryString().value("osgi_http_whiteboard_servlet_pattern"), osgi_http_whiteboard_servlet_pattern);
    }
    
    QString osgi_http_whiteboard_context_select;   
    if(socket->queryString().keys().contains("osgi_http_whiteboard_context_select")){
        fromStringValue(socket->queryString().value("osgi_http_whiteboard_context_select"), osgi_http_whiteboard_context_select);
    }
    


    emit orgApacheFelixSystemreadyImplServletSystemAliveServlet( post,  apply,  _delete,  action,  location,  propertylist,  osgi_http_whiteboard_servlet_pattern,  osgi_http_whiteboard_context_select);
}


void OAIConfigmgrApiRequest::orgApacheFelixSystemreadyImplServletSystemReadyServletRequest(){
    qDebug() << "//system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemReadyServlet";
    connect(this, &OAIConfigmgrApiRequest::orgApacheFelixSystemreadyImplServletSystemReadyServlet, handler, &OAIConfigmgrApiHandler::orgApacheFelixSystemreadyImplServletSystemReadyServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString osgi_http_whiteboard_servlet_pattern;   
    if(socket->queryString().keys().contains("osgi_http_whiteboard_servlet_pattern")){
        fromStringValue(socket->queryString().value("osgi_http_whiteboard_servlet_pattern"), osgi_http_whiteboard_servlet_pattern);
    }
    
    QString osgi_http_whiteboard_context_select;   
    if(socket->queryString().keys().contains("osgi_http_whiteboard_context_select")){
        fromStringValue(socket->queryString().value("osgi_http_whiteboard_context_select"), osgi_http_whiteboard_context_select);
    }
    


    emit orgApacheFelixSystemreadyImplServletSystemReadyServlet( post,  apply,  _delete,  action,  location,  propertylist,  osgi_http_whiteboard_servlet_pattern,  osgi_http_whiteboard_context_select);
}


void OAIConfigmgrApiRequest::orgApacheFelixSystemreadySystemReadyMonitorRequest(){
    qDebug() << "//system/console/configMgr/org.apache.felix.systemready.SystemReadyMonitor";
    connect(this, &OAIConfigmgrApiRequest::orgApacheFelixSystemreadySystemReadyMonitor, handler, &OAIConfigmgrApiHandler::orgApacheFelixSystemreadySystemReadyMonitor);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 poll_interval;   
    if(socket->queryString().keys().contains("poll_interval")){
        fromStringValue(socket->queryString().value("poll_interval"), poll_interval);
    }
    


    emit orgApacheFelixSystemreadySystemReadyMonitor( post,  apply,  _delete,  action,  location,  propertylist,  poll_interval);
}


void OAIConfigmgrApiRequest::orgApacheFelixWebconsoleInternalServletOsgiManagerRequest(){
    qDebug() << "//system/console/configMgr/org.apache.felix.webconsole.internal.servlet.OsgiManager";
    connect(this, &OAIConfigmgrApiRequest::orgApacheFelixWebconsoleInternalServletOsgiManager, handler, &OAIConfigmgrApiHandler::orgApacheFelixWebconsoleInternalServletOsgiManager);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString manager_root;   
    if(socket->queryString().keys().contains("manager_root")){
        fromStringValue(socket->queryString().value("manager_root"), manager_root);
    }
    
    QString http_service_filter;   
    if(socket->queryString().keys().contains("http_service_filter")){
        fromStringValue(socket->queryString().value("http_service_filter"), http_service_filter);
    }
    
    QString default_render;   
    if(socket->queryString().keys().contains("default_render")){
        fromStringValue(socket->queryString().value("default_render"), default_render);
    }
    
    QString realm;   
    if(socket->queryString().keys().contains("realm")){
        fromStringValue(socket->queryString().value("realm"), realm);
    }
    
    QString username;   
    if(socket->queryString().keys().contains("username")){
        fromStringValue(socket->queryString().value("username"), username);
    }
    
    QString password;   
    if(socket->queryString().keys().contains("password")){
        fromStringValue(socket->queryString().value("password"), password);
    }
    
    QString category;   
    if(socket->queryString().keys().contains("category")){
        fromStringValue(socket->queryString().value("category"), category);
    }
    
    QString locale;   
    if(socket->queryString().keys().contains("locale")){
        fromStringValue(socket->queryString().value("locale"), locale);
    }
    
    qint32 loglevel;   
    if(socket->queryString().keys().contains("loglevel")){
        fromStringValue(socket->queryString().value("loglevel"), loglevel);
    }
    
    QString plugins;   
    if(socket->queryString().keys().contains("plugins")){
        fromStringValue(socket->queryString().value("plugins"), plugins);
    }
    


    emit orgApacheFelixWebconsoleInternalServletOsgiManager( post,  apply,  _delete,  action,  location,  propertylist,  manager_root,  http_service_filter,  default_render,  realm,  username,  password,  category,  locale,  loglevel,  plugins);
}


void OAIConfigmgrApiRequest::orgApacheFelixWebconsolePluginsEventInternalPluginServletRequest(){
    qDebug() << "//system/console/configMgr/org.apache.felix.webconsole.plugins.event.internal.PluginServlet";
    connect(this, &OAIConfigmgrApiRequest::orgApacheFelixWebconsolePluginsEventInternalPluginServlet, handler, &OAIConfigmgrApiHandler::orgApacheFelixWebconsolePluginsEventInternalPluginServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 max_size;   
    if(socket->queryString().keys().contains("max_size")){
        fromStringValue(socket->queryString().value("max_size"), max_size);
    }
    


    emit orgApacheFelixWebconsolePluginsEventInternalPluginServlet( post,  apply,  _delete,  action,  location,  propertylist,  max_size);
}


void OAIConfigmgrApiRequest::orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoRequest(){
    qDebug() << "//system/console/configMgr/org.apache.felix.webconsole.plugins.memoryusage.internal.MemoryUsageConfigurator";
    connect(this, &OAIConfigmgrApiRequest::orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo, handler, &OAIConfigmgrApiHandler::orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 felix_memoryusage_dump_threshold;   
    if(socket->queryString().keys().contains("felix_memoryusage_dump_threshold")){
        fromStringValue(socket->queryString().value("felix_memoryusage_dump_threshold"), felix_memoryusage_dump_threshold);
    }
    
    qint32 felix_memoryusage_dump_interval;   
    if(socket->queryString().keys().contains("felix_memoryusage_dump_interval")){
        fromStringValue(socket->queryString().value("felix_memoryusage_dump_interval"), felix_memoryusage_dump_interval);
    }
    
    QString felix_memoryusage_dump_location;   
    if(socket->queryString().keys().contains("felix_memoryusage_dump_location")){
        fromStringValue(socket->queryString().value("felix_memoryusage_dump_location"), felix_memoryusage_dump_location);
    }
    


    emit orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo( post,  apply,  _delete,  action,  location,  propertylist,  felix_memoryusage_dump_threshold,  felix_memoryusage_dump_interval,  felix_memoryusage_dump_location);
}


void OAIConfigmgrApiRequest::orgApacheHttpProxyconfiguratorRequest(){
    qDebug() << "//system/console/configMgr/org.apache.http.proxyconfigurator";
    connect(this, &OAIConfigmgrApiRequest::orgApacheHttpProxyconfigurator, handler, &OAIConfigmgrApiHandler::orgApacheHttpProxyconfigurator);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool proxy_enabled;   
    if(socket->queryString().keys().contains("proxy_enabled")){
        fromStringValue(socket->queryString().value("proxy_enabled"), proxy_enabled);
    }
    
    QString proxy_host;   
    if(socket->queryString().keys().contains("proxy_host")){
        fromStringValue(socket->queryString().value("proxy_host"), proxy_host);
    }
    
    qint32 proxy_port;   
    if(socket->queryString().keys().contains("proxy_port")){
        fromStringValue(socket->queryString().value("proxy_port"), proxy_port);
    }
    
    QString proxy_user;   
    if(socket->queryString().keys().contains("proxy_user")){
        fromStringValue(socket->queryString().value("proxy_user"), proxy_user);
    }
    
    QString proxy_password;   
    if(socket->queryString().keys().contains("proxy_password")){
        fromStringValue(socket->queryString().value("proxy_password"), proxy_password);
    }
    
    QList<QString> proxy_exceptions;   
    if(socket->queryString().keys().contains("proxy_exceptions")){
        fromStringValue(socket->queryString().values("proxy_exceptions"), proxy_exceptions);
    }
    


    emit orgApacheHttpProxyconfigurator( post,  apply,  _delete,  action,  location,  propertylist,  proxy_enabled,  proxy_host,  proxy_port,  proxy_user,  proxy_password,  proxy_exceptions);
}


void OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderRequest(){
    qDebug() << "//system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreTextProviderService";
    connect(this, &OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider, handler, &OAIConfigmgrApiHandler::orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString dir;   
    if(socket->queryString().keys().contains("dir")){
        fromStringValue(socket->queryString().value("dir"), dir);
    }
    


    emit orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider( post,  apply,  _delete,  action,  location,  propertylist,  dir);
}


void OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreRequest(){
    qDebug() << "//system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.FileDataStore";
    connect(this, &OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore, handler, &OAIConfigmgrApiHandler::orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString path;   
    if(socket->queryString().keys().contains("path")){
        fromStringValue(socket->queryString().value("path"), path);
    }
    


    emit orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore( post,  apply,  _delete,  action,  location,  propertylist,  path);
}


void OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceRequest(){
    qDebug() << "//system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreService";
    connect(this, &OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService, handler, &OAIConfigmgrApiHandler::orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString mongouri;   
    if(socket->queryString().keys().contains("mongouri")){
        fromStringValue(socket->queryString().value("mongouri"), mongouri);
    }
    
    QString db;   
    if(socket->queryString().keys().contains("db")){
        fromStringValue(socket->queryString().value("db"), db);
    }
    
    bool socket_keep_alive;   
    if(socket->queryString().keys().contains("socket_keep_alive")){
        fromStringValue(socket->queryString().value("socket_keep_alive"), socket_keep_alive);
    }
    
    qint32 cache;   
    if(socket->queryString().keys().contains("cache")){
        fromStringValue(socket->queryString().value("cache"), cache);
    }
    
    qint32 node_cache_percentage;   
    if(socket->queryString().keys().contains("node_cache_percentage")){
        fromStringValue(socket->queryString().value("node_cache_percentage"), node_cache_percentage);
    }
    
    qint32 prev_doc_cache_percentage;   
    if(socket->queryString().keys().contains("prev_doc_cache_percentage")){
        fromStringValue(socket->queryString().value("prev_doc_cache_percentage"), prev_doc_cache_percentage);
    }
    
    qint32 children_cache_percentage;   
    if(socket->queryString().keys().contains("children_cache_percentage")){
        fromStringValue(socket->queryString().value("children_cache_percentage"), children_cache_percentage);
    }
    
    qint32 diff_cache_percentage;   
    if(socket->queryString().keys().contains("diff_cache_percentage")){
        fromStringValue(socket->queryString().value("diff_cache_percentage"), diff_cache_percentage);
    }
    
    qint32 cache_segment_count;   
    if(socket->queryString().keys().contains("cache_segment_count")){
        fromStringValue(socket->queryString().value("cache_segment_count"), cache_segment_count);
    }
    
    qint32 cache_stack_move_distance;   
    if(socket->queryString().keys().contains("cache_stack_move_distance")){
        fromStringValue(socket->queryString().value("cache_stack_move_distance"), cache_stack_move_distance);
    }
    
    qint32 blob_cache_size;   
    if(socket->queryString().keys().contains("blob_cache_size")){
        fromStringValue(socket->queryString().value("blob_cache_size"), blob_cache_size);
    }
    
    QString persistent_cache;   
    if(socket->queryString().keys().contains("persistent_cache")){
        fromStringValue(socket->queryString().value("persistent_cache"), persistent_cache);
    }
    
    QString journal_cache;   
    if(socket->queryString().keys().contains("journal_cache")){
        fromStringValue(socket->queryString().value("journal_cache"), journal_cache);
    }
    
    bool custom_blob_store;   
    if(socket->queryString().keys().contains("custom_blob_store")){
        fromStringValue(socket->queryString().value("custom_blob_store"), custom_blob_store);
    }
    
    qint32 journal_gc_interval;   
    if(socket->queryString().keys().contains("journal_gc_interval")){
        fromStringValue(socket->queryString().value("journal_gc_interval"), journal_gc_interval);
    }
    
    qint32 journal_gc_max_age;   
    if(socket->queryString().keys().contains("journal_gc_max_age")){
        fromStringValue(socket->queryString().value("journal_gc_max_age"), journal_gc_max_age);
    }
    
    bool prefetch_external_changes;   
    if(socket->queryString().keys().contains("prefetch_external_changes")){
        fromStringValue(socket->queryString().value("prefetch_external_changes"), prefetch_external_changes);
    }
    
    QString role;   
    if(socket->queryString().keys().contains("role")){
        fromStringValue(socket->queryString().value("role"), role);
    }
    
    qint32 version_gc_max_age_in_secs;   
    if(socket->queryString().keys().contains("version_gc_max_age_in_secs")){
        fromStringValue(socket->queryString().value("version_gc_max_age_in_secs"), version_gc_max_age_in_secs);
    }
    
    QString version_gc_expression;   
    if(socket->queryString().keys().contains("version_gc_expression")){
        fromStringValue(socket->queryString().value("version_gc_expression"), version_gc_expression);
    }
    
    qint32 version_gc_time_limit_in_secs;   
    if(socket->queryString().keys().contains("version_gc_time_limit_in_secs")){
        fromStringValue(socket->queryString().value("version_gc_time_limit_in_secs"), version_gc_time_limit_in_secs);
    }
    
    qint32 blob_gc_max_age_in_secs;   
    if(socket->queryString().keys().contains("blob_gc_max_age_in_secs")){
        fromStringValue(socket->queryString().value("blob_gc_max_age_in_secs"), blob_gc_max_age_in_secs);
    }
    
    qint32 blob_track_snapshot_interval_in_secs;   
    if(socket->queryString().keys().contains("blob_track_snapshot_interval_in_secs")){
        fromStringValue(socket->queryString().value("blob_track_snapshot_interval_in_secs"), blob_track_snapshot_interval_in_secs);
    }
    
    QString repository_home;   
    if(socket->queryString().keys().contains("repository_home")){
        fromStringValue(socket->queryString().value("repository_home"), repository_home);
    }
    
    qint32 max_replication_lag_in_secs;   
    if(socket->queryString().keys().contains("max_replication_lag_in_secs")){
        fromStringValue(socket->queryString().value("max_replication_lag_in_secs"), max_replication_lag_in_secs);
    }
    
    QString document_store_type;   
    if(socket->queryString().keys().contains("document_store_type")){
        fromStringValue(socket->queryString().value("document_store_type"), document_store_type);
    }
    
    bool bundling_disabled;   
    if(socket->queryString().keys().contains("bundling_disabled")){
        fromStringValue(socket->queryString().value("bundling_disabled"), bundling_disabled);
    }
    
    qint32 update_limit;   
    if(socket->queryString().keys().contains("update_limit")){
        fromStringValue(socket->queryString().value("update_limit"), update_limit);
    }
    
    QList<QString> persistent_cache_includes;   
    if(socket->queryString().keys().contains("persistent_cache_includes")){
        fromStringValue(socket->queryString().values("persistent_cache_includes"), persistent_cache_includes);
    }
    
    QString lease_check_mode;   
    if(socket->queryString().keys().contains("lease_check_mode")){
        fromStringValue(socket->queryString().value("lease_check_mode"), lease_check_mode);
    }
    


    emit orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService( post,  apply,  _delete,  action,  location,  propertylist,  mongouri,  db,  socket_keep_alive,  cache,  node_cache_percentage,  prev_doc_cache_percentage,  children_cache_percentage,  diff_cache_percentage,  cache_segment_count,  cache_stack_move_distance,  blob_cache_size,  persistent_cache,  journal_cache,  custom_blob_store,  journal_gc_interval,  journal_gc_max_age,  prefetch_external_changes,  role,  version_gc_max_age_in_secs,  version_gc_expression,  version_gc_time_limit_in_secs,  blob_gc_max_age_in_secs,  blob_track_snapshot_interval_in_secs,  repository_home,  max_replication_lag_in_secs,  document_store_type,  bundling_disabled,  update_limit,  persistent_cache_includes,  lease_check_mode);
}


void OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreRequest(){
    qDebug() << "//system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreServicePreset";
    connect(this, &OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre, handler, &OAIConfigmgrApiHandler::orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> persistent_cache_includes;   
    if(socket->queryString().keys().contains("persistent_cache_includes")){
        fromStringValue(socket->queryString().values("persistent_cache_includes"), persistent_cache_includes);
    }
    


    emit orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre( post,  apply,  _delete,  action,  location,  propertylist,  persistent_cache_includes);
}


void OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacRequest(){
    qDebug() << "//system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.secondary.SecondaryStoreCacheService";
    connect(this, &OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac, handler, &OAIConfigmgrApiHandler::orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> included_paths;   
    if(socket->queryString().keys().contains("included_paths")){
        fromStringValue(socket->queryString().values("included_paths"), included_paths);
    }
    
    bool enable_async_observer;   
    if(socket->queryString().keys().contains("enable_async_observer")){
        fromStringValue(socket->queryString().value("enable_async_observer"), enable_async_observer);
    }
    
    qint32 observer_queue_size;   
    if(socket->queryString().keys().contains("observer_queue_size")){
        fromStringValue(socket->queryString().value("observer_queue_size"), observer_queue_size);
    }
    


    emit orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac( post,  apply,  _delete,  action,  location,  propertylist,  included_paths,  enable_async_observer,  observer_queue_size);
}


void OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceRequest(){
    qDebug() << "//system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.AsyncIndexerService";
    connect(this, &OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsIndexAsyncIndexerService, handler, &OAIConfigmgrApiHandler::orgApacheJackrabbitOakPluginsIndexAsyncIndexerService);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> async_configs;   
    if(socket->queryString().keys().contains("async_configs")){
        fromStringValue(socket->queryString().values("async_configs"), async_configs);
    }
    
    qint32 lease_time_out_minutes;   
    if(socket->queryString().keys().contains("lease_time_out_minutes")){
        fromStringValue(socket->queryString().value("lease_time_out_minutes"), lease_time_out_minutes);
    }
    
    qint32 failing_index_timeout_seconds;   
    if(socket->queryString().keys().contains("failing_index_timeout_seconds")){
        fromStringValue(socket->queryString().value("failing_index_timeout_seconds"), failing_index_timeout_seconds);
    }
    
    qint32 error_warn_interval_seconds;   
    if(socket->queryString().keys().contains("error_warn_interval_seconds")){
        fromStringValue(socket->queryString().value("error_warn_interval_seconds"), error_warn_interval_seconds);
    }
    


    emit orgApacheJackrabbitOakPluginsIndexAsyncIndexerService( post,  apply,  _delete,  action,  location,  propertylist,  async_configs,  lease_time_out_minutes,  failing_index_timeout_seconds,  error_warn_interval_seconds);
}


void OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServRequest(){
    qDebug() << "//system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexProviderService";
    connect(this, &OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ, handler, &OAIConfigmgrApiHandler::orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool disabled;   
    if(socket->queryString().keys().contains("disabled")){
        fromStringValue(socket->queryString().value("disabled"), disabled);
    }
    
    bool debug;   
    if(socket->queryString().keys().contains("debug")){
        fromStringValue(socket->queryString().value("debug"), debug);
    }
    
    QString local_index_dir;   
    if(socket->queryString().keys().contains("local_index_dir")){
        fromStringValue(socket->queryString().value("local_index_dir"), local_index_dir);
    }
    
    bool enable_open_index_async;   
    if(socket->queryString().keys().contains("enable_open_index_async")){
        fromStringValue(socket->queryString().value("enable_open_index_async"), enable_open_index_async);
    }
    
    qint32 thread_pool_size;   
    if(socket->queryString().keys().contains("thread_pool_size")){
        fromStringValue(socket->queryString().value("thread_pool_size"), thread_pool_size);
    }
    
    bool prefetch_index_files;   
    if(socket->queryString().keys().contains("prefetch_index_files")){
        fromStringValue(socket->queryString().value("prefetch_index_files"), prefetch_index_files);
    }
    
    qint32 extracted_text_cache_size_in_mb;   
    if(socket->queryString().keys().contains("extracted_text_cache_size_in_mb")){
        fromStringValue(socket->queryString().value("extracted_text_cache_size_in_mb"), extracted_text_cache_size_in_mb);
    }
    
    qint32 extracted_text_cache_expiry_in_secs;   
    if(socket->queryString().keys().contains("extracted_text_cache_expiry_in_secs")){
        fromStringValue(socket->queryString().value("extracted_text_cache_expiry_in_secs"), extracted_text_cache_expiry_in_secs);
    }
    
    bool always_use_pre_extracted_cache;   
    if(socket->queryString().keys().contains("always_use_pre_extracted_cache")){
        fromStringValue(socket->queryString().value("always_use_pre_extracted_cache"), always_use_pre_extracted_cache);
    }
    
    qint32 boolean_clause_limit;   
    if(socket->queryString().keys().contains("boolean_clause_limit")){
        fromStringValue(socket->queryString().value("boolean_clause_limit"), boolean_clause_limit);
    }
    
    bool enable_hybrid_indexing;   
    if(socket->queryString().keys().contains("enable_hybrid_indexing")){
        fromStringValue(socket->queryString().value("enable_hybrid_indexing"), enable_hybrid_indexing);
    }
    
    qint32 hybrid_queue_size;   
    if(socket->queryString().keys().contains("hybrid_queue_size")){
        fromStringValue(socket->queryString().value("hybrid_queue_size"), hybrid_queue_size);
    }
    
    bool disable_stored_index_definition;   
    if(socket->queryString().keys().contains("disable_stored_index_definition")){
        fromStringValue(socket->queryString().value("disable_stored_index_definition"), disable_stored_index_definition);
    }
    
    bool deleted_blobs_collection_enabled;   
    if(socket->queryString().keys().contains("deleted_blobs_collection_enabled")){
        fromStringValue(socket->queryString().value("deleted_blobs_collection_enabled"), deleted_blobs_collection_enabled);
    }
    
    qint32 prop_index_cleaner_interval_in_secs;   
    if(socket->queryString().keys().contains("prop_index_cleaner_interval_in_secs")){
        fromStringValue(socket->queryString().value("prop_index_cleaner_interval_in_secs"), prop_index_cleaner_interval_in_secs);
    }
    
    bool enable_single_blob_index_files;   
    if(socket->queryString().keys().contains("enable_single_blob_index_files")){
        fromStringValue(socket->queryString().value("enable_single_blob_index_files"), enable_single_blob_index_files);
    }
    


    emit orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ( post,  apply,  _delete,  action,  location,  propertylist,  disabled,  debug,  local_index_dir,  enable_open_index_async,  thread_pool_size,  prefetch_index_files,  extracted_text_cache_size_in_mb,  extracted_text_cache_expiry_in_secs,  always_use_pre_extracted_cache,  boolean_clause_limit,  enable_hybrid_indexing,  hybrid_queue_size,  disable_stored_index_definition,  deleted_blobs_collection_enabled,  prop_index_cleaner_interval_in_secs,  enable_single_blob_index_files);
}


void OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoRequest(){
    qDebug() << "//system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.EmbeddedSolrServerConfigurationProvider";
    connect(this, &OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo, handler, &OAIConfigmgrApiHandler::orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString solr_home_path;   
    if(socket->queryString().keys().contains("solr_home_path")){
        fromStringValue(socket->queryString().value("solr_home_path"), solr_home_path);
    }
    
    QString solr_core_name;   
    if(socket->queryString().keys().contains("solr_core_name")){
        fromStringValue(socket->queryString().value("solr_core_name"), solr_core_name);
    }
    


    emit orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo( post,  apply,  _delete,  action,  location,  propertylist,  solr_home_path,  solr_core_name);
}


void OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersRequest(){
    qDebug() << "//system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.NodeStateSolrServersObserverService";
    connect(this, &OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers, handler, &OAIConfigmgrApiHandler::orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool enabled;   
    if(socket->queryString().keys().contains("enabled")){
        fromStringValue(socket->queryString().value("enabled"), enabled);
    }
    


    emit orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers( post,  apply,  _delete,  action,  location,  propertylist,  enabled);
}


void OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationRequest(){
    qDebug() << "//system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.OakSolrConfigurationProviderService";
    connect(this, &OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration, handler, &OAIConfigmgrApiHandler::orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString path_desc_field;   
    if(socket->queryString().keys().contains("path_desc_field")){
        fromStringValue(socket->queryString().value("path_desc_field"), path_desc_field);
    }
    
    QString path_child_field;   
    if(socket->queryString().keys().contains("path_child_field")){
        fromStringValue(socket->queryString().value("path_child_field"), path_child_field);
    }
    
    QString path_parent_field;   
    if(socket->queryString().keys().contains("path_parent_field")){
        fromStringValue(socket->queryString().value("path_parent_field"), path_parent_field);
    }
    
    QString path_exact_field;   
    if(socket->queryString().keys().contains("path_exact_field")){
        fromStringValue(socket->queryString().value("path_exact_field"), path_exact_field);
    }
    
    QString catch_all_field;   
    if(socket->queryString().keys().contains("catch_all_field")){
        fromStringValue(socket->queryString().value("catch_all_field"), catch_all_field);
    }
    
    QString collapsed_path_field;   
    if(socket->queryString().keys().contains("collapsed_path_field")){
        fromStringValue(socket->queryString().value("collapsed_path_field"), collapsed_path_field);
    }
    
    QString path_depth_field;   
    if(socket->queryString().keys().contains("path_depth_field")){
        fromStringValue(socket->queryString().value("path_depth_field"), path_depth_field);
    }
    
    QString commit_policy;   
    if(socket->queryString().keys().contains("commit_policy")){
        fromStringValue(socket->queryString().value("commit_policy"), commit_policy);
    }
    
    qint32 rows;   
    if(socket->queryString().keys().contains("rows")){
        fromStringValue(socket->queryString().value("rows"), rows);
    }
    
    bool path_restrictions;   
    if(socket->queryString().keys().contains("path_restrictions")){
        fromStringValue(socket->queryString().value("path_restrictions"), path_restrictions);
    }
    
    bool property_restrictions;   
    if(socket->queryString().keys().contains("property_restrictions")){
        fromStringValue(socket->queryString().value("property_restrictions"), property_restrictions);
    }
    
    bool primarytypes_restrictions;   
    if(socket->queryString().keys().contains("primarytypes_restrictions")){
        fromStringValue(socket->queryString().value("primarytypes_restrictions"), primarytypes_restrictions);
    }
    
    QList<QString> ignored_properties;   
    if(socket->queryString().keys().contains("ignored_properties")){
        fromStringValue(socket->queryString().values("ignored_properties"), ignored_properties);
    }
    
    QList<QString> used_properties;   
    if(socket->queryString().keys().contains("used_properties")){
        fromStringValue(socket->queryString().values("used_properties"), used_properties);
    }
    
    QList<QString> type_mappings;   
    if(socket->queryString().keys().contains("type_mappings")){
        fromStringValue(socket->queryString().values("type_mappings"), type_mappings);
    }
    
    QList<QString> property_mappings;   
    if(socket->queryString().keys().contains("property_mappings")){
        fromStringValue(socket->queryString().values("property_mappings"), property_mappings);
    }
    
    bool collapse_jcrcontent_nodes;   
    if(socket->queryString().keys().contains("collapse_jcrcontent_nodes")){
        fromStringValue(socket->queryString().value("collapse_jcrcontent_nodes"), collapse_jcrcontent_nodes);
    }
    


    emit orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration( post,  apply,  _delete,  action,  location,  propertylist,  path_desc_field,  path_child_field,  path_parent_field,  path_exact_field,  catch_all_field,  collapsed_path_field,  path_depth_field,  commit_policy,  rows,  path_restrictions,  property_restrictions,  primarytypes_restrictions,  ignored_properties,  used_properties,  type_mappings,  property_mappings,  collapse_jcrcontent_nodes);
}


void OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfRequest(){
    qDebug() << "//system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.RemoteSolrServerConfigurationProvider";
    connect(this, &OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf, handler, &OAIConfigmgrApiHandler::orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString solr_http_url;   
    if(socket->queryString().keys().contains("solr_http_url")){
        fromStringValue(socket->queryString().value("solr_http_url"), solr_http_url);
    }
    
    QString solr_zk_host;   
    if(socket->queryString().keys().contains("solr_zk_host")){
        fromStringValue(socket->queryString().value("solr_zk_host"), solr_zk_host);
    }
    
    QString solr_collection;   
    if(socket->queryString().keys().contains("solr_collection")){
        fromStringValue(socket->queryString().value("solr_collection"), solr_collection);
    }
    
    qint32 solr_socket_timeout;   
    if(socket->queryString().keys().contains("solr_socket_timeout")){
        fromStringValue(socket->queryString().value("solr_socket_timeout"), solr_socket_timeout);
    }
    
    qint32 solr_connection_timeout;   
    if(socket->queryString().keys().contains("solr_connection_timeout")){
        fromStringValue(socket->queryString().value("solr_connection_timeout"), solr_connection_timeout);
    }
    
    qint32 solr_shards_no;   
    if(socket->queryString().keys().contains("solr_shards_no")){
        fromStringValue(socket->queryString().value("solr_shards_no"), solr_shards_no);
    }
    
    qint32 solr_replication_factor;   
    if(socket->queryString().keys().contains("solr_replication_factor")){
        fromStringValue(socket->queryString().value("solr_replication_factor"), solr_replication_factor);
    }
    
    QString solr_conf_dir;   
    if(socket->queryString().keys().contains("solr_conf_dir")){
        fromStringValue(socket->queryString().value("solr_conf_dir"), solr_conf_dir);
    }
    


    emit orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf( post,  apply,  _delete,  action,  location,  propertylist,  solr_http_url,  solr_zk_host,  solr_collection,  solr_socket_timeout,  solr_connection_timeout,  solr_shards_no,  solr_replication_factor,  solr_conf_dir);
}


void OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidRequest(){
    qDebug() << "//system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrQueryIndexProviderService";
    connect(this, &OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid, handler, &OAIConfigmgrApiHandler::orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool query_aggregation;   
    if(socket->queryString().keys().contains("query_aggregation")){
        fromStringValue(socket->queryString().value("query_aggregation"), query_aggregation);
    }
    


    emit orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid( post,  apply,  _delete,  action,  location,  propertylist,  query_aggregation);
}


void OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeRequest(){
    qDebug() << "//system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrServerProviderService";
    connect(this, &OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe, handler, &OAIConfigmgrApiHandler::orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString server_type;   
    if(socket->queryString().keys().contains("server_type")){
        fromStringValue(socket->queryString().value("server_type"), server_type);
    }
    


    emit orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe( post,  apply,  _delete,  action,  location,  propertylist,  server_type);
}


void OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryRequest(){
    qDebug() << "//system/console/configMgr/org.apache.jackrabbit.oak.plugins.metric.StatisticsProviderFactory";
    connect(this, &OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory, handler, &OAIConfigmgrApiHandler::orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString provider_type;   
    if(socket->queryString().keys().contains("provider_type")){
        fromStringValue(socket->queryString().value("provider_type"), provider_type);
    }
    


    emit orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory( post,  apply,  _delete,  action,  location,  propertylist,  provider_type);
}


void OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsObservationChangeCollectorProviderRequest(){
    qDebug() << "//system/console/configMgr/org.apache.jackrabbit.oak.plugins.observation.ChangeCollectorProvider";
    connect(this, &OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsObservationChangeCollectorProvider, handler, &OAIConfigmgrApiHandler::orgApacheJackrabbitOakPluginsObservationChangeCollectorProvider);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 max_items;   
    if(socket->queryString().keys().contains("max_items")){
        fromStringValue(socket->queryString().value("max_items"), max_items);
    }
    
    qint32 max_path_depth;   
    if(socket->queryString().keys().contains("max_path_depth")){
        fromStringValue(socket->queryString().value("max_path_depth"), max_path_depth);
    }
    
    bool enabled;   
    if(socket->queryString().keys().contains("enabled")){
        fromStringValue(socket->queryString().value("enabled"), enabled);
    }
    


    emit orgApacheJackrabbitOakPluginsObservationChangeCollectorProvider( post,  apply,  _delete,  action,  location,  propertylist,  max_items,  max_path_depth,  enabled);
}


void OAIConfigmgrApiRequest::orgApacheJackrabbitOakQueryQueryEngineSettingsServiceRequest(){
    qDebug() << "//system/console/configMgr/org.apache.jackrabbit.oak.query.QueryEngineSettingsService";
    connect(this, &OAIConfigmgrApiRequest::orgApacheJackrabbitOakQueryQueryEngineSettingsService, handler, &OAIConfigmgrApiHandler::orgApacheJackrabbitOakQueryQueryEngineSettingsService);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 query_limit_in_memory;   
    if(socket->queryString().keys().contains("query_limit_in_memory")){
        fromStringValue(socket->queryString().value("query_limit_in_memory"), query_limit_in_memory);
    }
    
    qint32 query_limit_reads;   
    if(socket->queryString().keys().contains("query_limit_reads")){
        fromStringValue(socket->queryString().value("query_limit_reads"), query_limit_reads);
    }
    
    bool query_fail_traversal;   
    if(socket->queryString().keys().contains("query_fail_traversal")){
        fromStringValue(socket->queryString().value("query_fail_traversal"), query_fail_traversal);
    }
    
    bool fast_query_size;   
    if(socket->queryString().keys().contains("fast_query_size")){
        fromStringValue(socket->queryString().value("fast_query_size"), fast_query_size);
    }
    


    emit orgApacheJackrabbitOakQueryQueryEngineSettingsService( post,  apply,  _delete,  action,  location,  propertylist,  query_limit_in_memory,  query_limit_reads,  query_fail_traversal,  fast_query_size);
}


void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigRequest(){
    qDebug() << "//system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.AuthenticationConfigurationImpl";
    connect(this, &OAIConfigmgrApiRequest::orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig, handler, &OAIConfigmgrApiHandler::orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString org_apache_jackrabbit_oak_authentication_app_name;   
    if(socket->queryString().keys().contains("org_apache_jackrabbit_oak_authentication_app_name")){
        fromStringValue(socket->queryString().value("org_apache_jackrabbit_oak_authentication_app_name"), org_apache_jackrabbit_oak_authentication_app_name);
    }
    
    QString org_apache_jackrabbit_oak_authentication_config_spi_name;   
    if(socket->queryString().keys().contains("org_apache_jackrabbit_oak_authentication_config_spi_name")){
        fromStringValue(socket->queryString().value("org_apache_jackrabbit_oak_authentication_config_spi_name"), org_apache_jackrabbit_oak_authentication_config_spi_name);
    }
    


    emit orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig( post,  apply,  _delete,  action,  location,  propertylist,  org_apache_jackrabbit_oak_authentication_app_name,  org_apache_jackrabbit_oak_authentication_config_spi_name);
}


void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiRequest(){
    qDebug() << "//system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.ldap.impl.LdapIdentityProvider";
    connect(this, &OAIConfigmgrApiRequest::orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti, handler, &OAIConfigmgrApiHandler::orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString provider_name;   
    if(socket->queryString().keys().contains("provider_name")){
        fromStringValue(socket->queryString().value("provider_name"), provider_name);
    }
    
    QString host_name;   
    if(socket->queryString().keys().contains("host_name")){
        fromStringValue(socket->queryString().value("host_name"), host_name);
    }
    
    qint32 host_port;   
    if(socket->queryString().keys().contains("host_port")){
        fromStringValue(socket->queryString().value("host_port"), host_port);
    }
    
    bool host_ssl;   
    if(socket->queryString().keys().contains("host_ssl")){
        fromStringValue(socket->queryString().value("host_ssl"), host_ssl);
    }
    
    bool host_tls;   
    if(socket->queryString().keys().contains("host_tls")){
        fromStringValue(socket->queryString().value("host_tls"), host_tls);
    }
    
    bool host_no_cert_check;   
    if(socket->queryString().keys().contains("host_no_cert_check")){
        fromStringValue(socket->queryString().value("host_no_cert_check"), host_no_cert_check);
    }
    
    QString bind_dn;   
    if(socket->queryString().keys().contains("bind_dn")){
        fromStringValue(socket->queryString().value("bind_dn"), bind_dn);
    }
    
    QString bind_password;   
    if(socket->queryString().keys().contains("bind_password")){
        fromStringValue(socket->queryString().value("bind_password"), bind_password);
    }
    
    QString search_timeout;   
    if(socket->queryString().keys().contains("search_timeout")){
        fromStringValue(socket->queryString().value("search_timeout"), search_timeout);
    }
    
    qint32 admin_pool_max_active;   
    if(socket->queryString().keys().contains("admin_pool_max_active")){
        fromStringValue(socket->queryString().value("admin_pool_max_active"), admin_pool_max_active);
    }
    
    bool admin_pool_lookup_on_validate;   
    if(socket->queryString().keys().contains("admin_pool_lookup_on_validate")){
        fromStringValue(socket->queryString().value("admin_pool_lookup_on_validate"), admin_pool_lookup_on_validate);
    }
    
    qint32 user_pool_max_active;   
    if(socket->queryString().keys().contains("user_pool_max_active")){
        fromStringValue(socket->queryString().value("user_pool_max_active"), user_pool_max_active);
    }
    
    bool user_pool_lookup_on_validate;   
    if(socket->queryString().keys().contains("user_pool_lookup_on_validate")){
        fromStringValue(socket->queryString().value("user_pool_lookup_on_validate"), user_pool_lookup_on_validate);
    }
    
    QString user_base_dn;   
    if(socket->queryString().keys().contains("user_base_dn")){
        fromStringValue(socket->queryString().value("user_base_dn"), user_base_dn);
    }
    
    QList<QString> user_objectclass;   
    if(socket->queryString().keys().contains("user_objectclass")){
        fromStringValue(socket->queryString().values("user_objectclass"), user_objectclass);
    }
    
    QString user_id_attribute;   
    if(socket->queryString().keys().contains("user_id_attribute")){
        fromStringValue(socket->queryString().value("user_id_attribute"), user_id_attribute);
    }
    
    QString user_extra_filter;   
    if(socket->queryString().keys().contains("user_extra_filter")){
        fromStringValue(socket->queryString().value("user_extra_filter"), user_extra_filter);
    }
    
    bool user_make_dn_path;   
    if(socket->queryString().keys().contains("user_make_dn_path")){
        fromStringValue(socket->queryString().value("user_make_dn_path"), user_make_dn_path);
    }
    
    QString group_base_dn;   
    if(socket->queryString().keys().contains("group_base_dn")){
        fromStringValue(socket->queryString().value("group_base_dn"), group_base_dn);
    }
    
    QList<QString> group_objectclass;   
    if(socket->queryString().keys().contains("group_objectclass")){
        fromStringValue(socket->queryString().values("group_objectclass"), group_objectclass);
    }
    
    QString group_name_attribute;   
    if(socket->queryString().keys().contains("group_name_attribute")){
        fromStringValue(socket->queryString().value("group_name_attribute"), group_name_attribute);
    }
    
    QString group_extra_filter;   
    if(socket->queryString().keys().contains("group_extra_filter")){
        fromStringValue(socket->queryString().value("group_extra_filter"), group_extra_filter);
    }
    
    bool group_make_dn_path;   
    if(socket->queryString().keys().contains("group_make_dn_path")){
        fromStringValue(socket->queryString().value("group_make_dn_path"), group_make_dn_path);
    }
    
    QString group_member_attribute;   
    if(socket->queryString().keys().contains("group_member_attribute")){
        fromStringValue(socket->queryString().value("group_member_attribute"), group_member_attribute);
    }
    
    bool use_uid_for_ext_id;   
    if(socket->queryString().keys().contains("use_uid_for_ext_id")){
        fromStringValue(socket->queryString().value("use_uid_for_ext_id"), use_uid_for_ext_id);
    }
    
    QList<QString> customattributes;   
    if(socket->queryString().keys().contains("customattributes")){
        fromStringValue(socket->queryString().values("customattributes"), customattributes);
    }
    


    emit orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti( post,  apply,  _delete,  action,  location,  propertylist,  provider_name,  host_name,  host_port,  host_ssl,  host_tls,  host_no_cert_check,  bind_dn,  bind_password,  search_timeout,  admin_pool_max_active,  admin_pool_lookup_on_validate,  user_pool_max_active,  user_pool_lookup_on_validate,  user_base_dn,  user_objectclass,  user_id_attribute,  user_extra_filter,  user_make_dn_path,  group_base_dn,  group_objectclass,  group_name_attribute,  group_extra_filter,  group_make_dn_path,  group_member_attribute,  use_uid_for_ext_id,  customattributes);
}


void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraRequest(){
    qDebug() << "//system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.token.TokenConfigurationImpl";
    connect(this, &OAIConfigmgrApiRequest::orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura, handler, &OAIConfigmgrApiHandler::orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString token_expiration;   
    if(socket->queryString().keys().contains("token_expiration")){
        fromStringValue(socket->queryString().value("token_expiration"), token_expiration);
    }
    
    QString token_length;   
    if(socket->queryString().keys().contains("token_length")){
        fromStringValue(socket->queryString().value("token_length"), token_length);
    }
    
    bool token_refresh;   
    if(socket->queryString().keys().contains("token_refresh")){
        fromStringValue(socket->queryString().value("token_refresh"), token_refresh);
    }
    
    qint32 token_cleanup_threshold;   
    if(socket->queryString().keys().contains("token_cleanup_threshold")){
        fromStringValue(socket->queryString().value("token_cleanup_threshold"), token_cleanup_threshold);
    }
    
    QString password_hash_algorithm;   
    if(socket->queryString().keys().contains("password_hash_algorithm")){
        fromStringValue(socket->queryString().value("password_hash_algorithm"), password_hash_algorithm);
    }
    
    qint32 password_hash_iterations;   
    if(socket->queryString().keys().contains("password_hash_iterations")){
        fromStringValue(socket->queryString().value("password_hash_iterations"), password_hash_iterations);
    }
    
    qint32 password_salt_size;   
    if(socket->queryString().keys().contains("password_salt_size")){
        fromStringValue(socket->queryString().value("password_salt_size"), password_salt_size);
    }
    


    emit orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura( post,  apply,  _delete,  action,  location,  propertylist,  token_expiration,  token_length,  token_refresh,  token_cleanup_threshold,  password_hash_algorithm,  password_hash_iterations,  password_salt_size);
}


void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurRequest(){
    qDebug() << "//system/console/configMgr/org.apache.jackrabbit.oak.security.authorization.AuthorizationConfigurationImpl";
    connect(this, &OAIConfigmgrApiRequest::orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur, handler, &OAIConfigmgrApiHandler::orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString permissions_jr2;   
    if(socket->queryString().keys().contains("permissions_jr2")){
        fromStringValue(socket->queryString().value("permissions_jr2"), permissions_jr2);
    }
    
    QString import_behavior;   
    if(socket->queryString().keys().contains("import_behavior")){
        fromStringValue(socket->queryString().value("import_behavior"), import_behavior);
    }
    
    QList<QString> read_paths;   
    if(socket->queryString().keys().contains("read_paths")){
        fromStringValue(socket->queryString().values("read_paths"), read_paths);
    }
    
    QList<QString> administrative_principals;   
    if(socket->queryString().keys().contains("administrative_principals")){
        fromStringValue(socket->queryString().values("administrative_principals"), administrative_principals);
    }
    
    qint32 configuration_ranking;   
    if(socket->queryString().keys().contains("configuration_ranking")){
        fromStringValue(socket->queryString().value("configuration_ranking"), configuration_ranking);
    }
    


    emit orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur( post,  apply,  _delete,  action,  location,  propertylist,  permissions_jr2,  import_behavior,  read_paths,  administrative_principals,  configuration_ranking);
}


void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiRequest(){
    qDebug() << "//system/console/configMgr/org.apache.jackrabbit.oak.security.internal.SecurityProviderRegistration";
    connect(this, &OAIConfigmgrApiRequest::orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati, handler, &OAIConfigmgrApiHandler::orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> required_service_pids;   
    if(socket->queryString().keys().contains("required_service_pids")){
        fromStringValue(socket->queryString().values("required_service_pids"), required_service_pids);
    }
    
    QString authorization_composition_type;   
    if(socket->queryString().keys().contains("authorization_composition_type")){
        fromStringValue(socket->queryString().value("authorization_composition_type"), authorization_composition_type);
    }
    


    emit orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati( post,  apply,  _delete,  action,  location,  propertylist,  required_service_pids,  authorization_composition_type);
}


void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameRequest(){
    qDebug() << "//system/console/configMgr/org.apache.jackrabbit.oak.security.user.RandomAuthorizableNodeName";
    connect(this, &OAIConfigmgrApiRequest::orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName, handler, &OAIConfigmgrApiHandler::orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 length;   
    if(socket->queryString().keys().contains("length")){
        fromStringValue(socket->queryString().value("length"), length);
    }
    


    emit orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName( post,  apply,  _delete,  action,  location,  propertylist,  length);
}


void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSecurityUserUserConfigurationImplRequest(){
    qDebug() << "//system/console/configMgr/org.apache.jackrabbit.oak.security.user.UserConfigurationImpl";
    connect(this, &OAIConfigmgrApiRequest::orgApacheJackrabbitOakSecurityUserUserConfigurationImpl, handler, &OAIConfigmgrApiHandler::orgApacheJackrabbitOakSecurityUserUserConfigurationImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString users_path;   
    if(socket->queryString().keys().contains("users_path")){
        fromStringValue(socket->queryString().value("users_path"), users_path);
    }
    
    QString groups_path;   
    if(socket->queryString().keys().contains("groups_path")){
        fromStringValue(socket->queryString().value("groups_path"), groups_path);
    }
    
    QString system_relative_path;   
    if(socket->queryString().keys().contains("system_relative_path")){
        fromStringValue(socket->queryString().value("system_relative_path"), system_relative_path);
    }
    
    qint32 default_depth;   
    if(socket->queryString().keys().contains("default_depth")){
        fromStringValue(socket->queryString().value("default_depth"), default_depth);
    }
    
    QString import_behavior;   
    if(socket->queryString().keys().contains("import_behavior")){
        fromStringValue(socket->queryString().value("import_behavior"), import_behavior);
    }
    
    QString password_hash_algorithm;   
    if(socket->queryString().keys().contains("password_hash_algorithm")){
        fromStringValue(socket->queryString().value("password_hash_algorithm"), password_hash_algorithm);
    }
    
    qint32 password_hash_iterations;   
    if(socket->queryString().keys().contains("password_hash_iterations")){
        fromStringValue(socket->queryString().value("password_hash_iterations"), password_hash_iterations);
    }
    
    qint32 password_salt_size;   
    if(socket->queryString().keys().contains("password_salt_size")){
        fromStringValue(socket->queryString().value("password_salt_size"), password_salt_size);
    }
    
    bool omit_admin_pw;   
    if(socket->queryString().keys().contains("omit_admin_pw")){
        fromStringValue(socket->queryString().value("omit_admin_pw"), omit_admin_pw);
    }
    
    bool support_auto_save;   
    if(socket->queryString().keys().contains("support_auto_save")){
        fromStringValue(socket->queryString().value("support_auto_save"), support_auto_save);
    }
    
    qint32 password_max_age;   
    if(socket->queryString().keys().contains("password_max_age")){
        fromStringValue(socket->queryString().value("password_max_age"), password_max_age);
    }
    
    bool initial_password_change;   
    if(socket->queryString().keys().contains("initial_password_change")){
        fromStringValue(socket->queryString().value("initial_password_change"), initial_password_change);
    }
    
    qint32 password_history_size;   
    if(socket->queryString().keys().contains("password_history_size")){
        fromStringValue(socket->queryString().value("password_history_size"), password_history_size);
    }
    
    bool password_expiry_for_admin;   
    if(socket->queryString().keys().contains("password_expiry_for_admin")){
        fromStringValue(socket->queryString().value("password_expiry_for_admin"), password_expiry_for_admin);
    }
    
    qint32 cache_expiration;   
    if(socket->queryString().keys().contains("cache_expiration")){
        fromStringValue(socket->queryString().value("cache_expiration"), cache_expiration);
    }
    
    bool enable_rfc7613_usercase_mapped_profile;   
    if(socket->queryString().keys().contains("enable_rfc7613_usercase_mapped_profile")){
        fromStringValue(socket->queryString().value("enable_rfc7613_usercase_mapped_profile"), enable_rfc7613_usercase_mapped_profile);
    }
    


    emit orgApacheJackrabbitOakSecurityUserUserConfigurationImpl( post,  apply,  _delete,  action,  location,  propertylist,  users_path,  groups_path,  system_relative_path,  default_depth,  import_behavior,  password_hash_algorithm,  password_hash_iterations,  password_salt_size,  omit_admin_pw,  support_auto_save,  password_max_age,  initial_password_change,  password_history_size,  password_expiry_for_admin,  cache_expiration,  enable_rfc7613_usercase_mapped_profile);
}


void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceRequest(){
    qDebug() << "//system/console/configMgr/org.apache.jackrabbit.oak.segment.azure.AzureSegmentStoreService";
    connect(this, &OAIConfigmgrApiRequest::orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService, handler, &OAIConfigmgrApiHandler::orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString account_name;   
    if(socket->queryString().keys().contains("account_name")){
        fromStringValue(socket->queryString().value("account_name"), account_name);
    }
    
    QString container_name;   
    if(socket->queryString().keys().contains("container_name")){
        fromStringValue(socket->queryString().value("container_name"), container_name);
    }
    
    QString access_key;   
    if(socket->queryString().keys().contains("access_key")){
        fromStringValue(socket->queryString().value("access_key"), access_key);
    }
    
    QString root_path;   
    if(socket->queryString().keys().contains("root_path")){
        fromStringValue(socket->queryString().value("root_path"), root_path);
    }
    
    QString connection_url;   
    if(socket->queryString().keys().contains("connection_url")){
        fromStringValue(socket->queryString().value("connection_url"), connection_url);
    }
    


    emit orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService( post,  apply,  _delete,  action,  location,  propertylist,  account_name,  container_name,  access_key,  root_path,  connection_url);
}


void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryRequest(){
    qDebug() << "//system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreFactory";
    connect(this, &OAIConfigmgrApiRequest::orgApacheJackrabbitOakSegmentSegmentNodeStoreFactory, handler, &OAIConfigmgrApiHandler::orgApacheJackrabbitOakSegmentSegmentNodeStoreFactory);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString repository_home;   
    if(socket->queryString().keys().contains("repository_home")){
        fromStringValue(socket->queryString().value("repository_home"), repository_home);
    }
    
    QString tarmk_mode;   
    if(socket->queryString().keys().contains("tarmk_mode")){
        fromStringValue(socket->queryString().value("tarmk_mode"), tarmk_mode);
    }
    
    qint32 tarmk_size;   
    if(socket->queryString().keys().contains("tarmk_size")){
        fromStringValue(socket->queryString().value("tarmk_size"), tarmk_size);
    }
    
    qint32 segment_cache_size;   
    if(socket->queryString().keys().contains("segment_cache_size")){
        fromStringValue(socket->queryString().value("segment_cache_size"), segment_cache_size);
    }
    
    qint32 string_cache_size;   
    if(socket->queryString().keys().contains("string_cache_size")){
        fromStringValue(socket->queryString().value("string_cache_size"), string_cache_size);
    }
    
    qint32 template_cache_size;   
    if(socket->queryString().keys().contains("template_cache_size")){
        fromStringValue(socket->queryString().value("template_cache_size"), template_cache_size);
    }
    
    qint32 string_deduplication_cache_size;   
    if(socket->queryString().keys().contains("string_deduplication_cache_size")){
        fromStringValue(socket->queryString().value("string_deduplication_cache_size"), string_deduplication_cache_size);
    }
    
    qint32 template_deduplication_cache_size;   
    if(socket->queryString().keys().contains("template_deduplication_cache_size")){
        fromStringValue(socket->queryString().value("template_deduplication_cache_size"), template_deduplication_cache_size);
    }
    
    qint32 node_deduplication_cache_size;   
    if(socket->queryString().keys().contains("node_deduplication_cache_size")){
        fromStringValue(socket->queryString().value("node_deduplication_cache_size"), node_deduplication_cache_size);
    }
    
    bool pause_compaction;   
    if(socket->queryString().keys().contains("pause_compaction")){
        fromStringValue(socket->queryString().value("pause_compaction"), pause_compaction);
    }
    
    qint32 compaction_retry_count;   
    if(socket->queryString().keys().contains("compaction_retry_count")){
        fromStringValue(socket->queryString().value("compaction_retry_count"), compaction_retry_count);
    }
    
    qint32 compaction_force_timeout;   
    if(socket->queryString().keys().contains("compaction_force_timeout")){
        fromStringValue(socket->queryString().value("compaction_force_timeout"), compaction_force_timeout);
    }
    
    qint32 compaction_size_delta_estimation;   
    if(socket->queryString().keys().contains("compaction_size_delta_estimation")){
        fromStringValue(socket->queryString().value("compaction_size_delta_estimation"), compaction_size_delta_estimation);
    }
    
    bool compaction_disable_estimation;   
    if(socket->queryString().keys().contains("compaction_disable_estimation")){
        fromStringValue(socket->queryString().value("compaction_disable_estimation"), compaction_disable_estimation);
    }
    
    qint32 compaction_retained_generations;   
    if(socket->queryString().keys().contains("compaction_retained_generations")){
        fromStringValue(socket->queryString().value("compaction_retained_generations"), compaction_retained_generations);
    }
    
    qint32 compaction_memory_threshold;   
    if(socket->queryString().keys().contains("compaction_memory_threshold")){
        fromStringValue(socket->queryString().value("compaction_memory_threshold"), compaction_memory_threshold);
    }
    
    qint32 compaction_progress_log;   
    if(socket->queryString().keys().contains("compaction_progress_log")){
        fromStringValue(socket->queryString().value("compaction_progress_log"), compaction_progress_log);
    }
    
    bool standby;   
    if(socket->queryString().keys().contains("standby")){
        fromStringValue(socket->queryString().value("standby"), standby);
    }
    
    bool custom_blob_store;   
    if(socket->queryString().keys().contains("custom_blob_store")){
        fromStringValue(socket->queryString().value("custom_blob_store"), custom_blob_store);
    }
    
    bool custom_segment_store;   
    if(socket->queryString().keys().contains("custom_segment_store")){
        fromStringValue(socket->queryString().value("custom_segment_store"), custom_segment_store);
    }
    
    bool split_persistence;   
    if(socket->queryString().keys().contains("split_persistence")){
        fromStringValue(socket->queryString().value("split_persistence"), split_persistence);
    }
    
    QString repository_backup_dir;   
    if(socket->queryString().keys().contains("repository_backup_dir")){
        fromStringValue(socket->queryString().value("repository_backup_dir"), repository_backup_dir);
    }
    
    qint32 blob_gc_max_age_in_secs;   
    if(socket->queryString().keys().contains("blob_gc_max_age_in_secs")){
        fromStringValue(socket->queryString().value("blob_gc_max_age_in_secs"), blob_gc_max_age_in_secs);
    }
    
    qint32 blob_track_snapshot_interval_in_secs;   
    if(socket->queryString().keys().contains("blob_track_snapshot_interval_in_secs")){
        fromStringValue(socket->queryString().value("blob_track_snapshot_interval_in_secs"), blob_track_snapshot_interval_in_secs);
    }
    
    QString role;   
    if(socket->queryString().keys().contains("role")){
        fromStringValue(socket->queryString().value("role"), role);
    }
    
    bool register_descriptors;   
    if(socket->queryString().keys().contains("register_descriptors")){
        fromStringValue(socket->queryString().value("register_descriptors"), register_descriptors);
    }
    
    bool dispatch_changes;   
    if(socket->queryString().keys().contains("dispatch_changes")){
        fromStringValue(socket->queryString().value("dispatch_changes"), dispatch_changes);
    }
    


    emit orgApacheJackrabbitOakSegmentSegmentNodeStoreFactory( post,  apply,  _delete,  action,  location,  propertylist,  repository_home,  tarmk_mode,  tarmk_size,  segment_cache_size,  string_cache_size,  template_cache_size,  string_deduplication_cache_size,  template_deduplication_cache_size,  node_deduplication_cache_size,  pause_compaction,  compaction_retry_count,  compaction_force_timeout,  compaction_size_delta_estimation,  compaction_disable_estimation,  compaction_retained_generations,  compaction_memory_threshold,  compaction_progress_log,  standby,  custom_blob_store,  custom_segment_store,  split_persistence,  repository_backup_dir,  blob_gc_max_age_in_secs,  blob_track_snapshot_interval_in_secs,  role,  register_descriptors,  dispatch_changes);
}


void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceRequest(){
    qDebug() << "//system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreMonitorService";
    connect(this, &OAIConfigmgrApiRequest::orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService, handler, &OAIConfigmgrApiHandler::orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> commits_tracker_writer_groups;   
    if(socket->queryString().keys().contains("commits_tracker_writer_groups")){
        fromStringValue(socket->queryString().values("commits_tracker_writer_groups"), commits_tracker_writer_groups);
    }
    


    emit orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService( post,  apply,  _delete,  action,  location,  propertylist,  commits_tracker_writer_groups);
}


void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSegmentSegmentNodeStoreServiceRequest(){
    qDebug() << "//system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreService";
    connect(this, &OAIConfigmgrApiRequest::orgApacheJackrabbitOakSegmentSegmentNodeStoreService, handler, &OAIConfigmgrApiHandler::orgApacheJackrabbitOakSegmentSegmentNodeStoreService);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString repository_home;   
    if(socket->queryString().keys().contains("repository_home")){
        fromStringValue(socket->queryString().value("repository_home"), repository_home);
    }
    
    QString tarmk_mode;   
    if(socket->queryString().keys().contains("tarmk_mode")){
        fromStringValue(socket->queryString().value("tarmk_mode"), tarmk_mode);
    }
    
    qint32 tarmk_size;   
    if(socket->queryString().keys().contains("tarmk_size")){
        fromStringValue(socket->queryString().value("tarmk_size"), tarmk_size);
    }
    
    qint32 segment_cache_size;   
    if(socket->queryString().keys().contains("segment_cache_size")){
        fromStringValue(socket->queryString().value("segment_cache_size"), segment_cache_size);
    }
    
    qint32 string_cache_size;   
    if(socket->queryString().keys().contains("string_cache_size")){
        fromStringValue(socket->queryString().value("string_cache_size"), string_cache_size);
    }
    
    qint32 template_cache_size;   
    if(socket->queryString().keys().contains("template_cache_size")){
        fromStringValue(socket->queryString().value("template_cache_size"), template_cache_size);
    }
    
    qint32 string_deduplication_cache_size;   
    if(socket->queryString().keys().contains("string_deduplication_cache_size")){
        fromStringValue(socket->queryString().value("string_deduplication_cache_size"), string_deduplication_cache_size);
    }
    
    qint32 template_deduplication_cache_size;   
    if(socket->queryString().keys().contains("template_deduplication_cache_size")){
        fromStringValue(socket->queryString().value("template_deduplication_cache_size"), template_deduplication_cache_size);
    }
    
    qint32 node_deduplication_cache_size;   
    if(socket->queryString().keys().contains("node_deduplication_cache_size")){
        fromStringValue(socket->queryString().value("node_deduplication_cache_size"), node_deduplication_cache_size);
    }
    
    bool pause_compaction;   
    if(socket->queryString().keys().contains("pause_compaction")){
        fromStringValue(socket->queryString().value("pause_compaction"), pause_compaction);
    }
    
    qint32 compaction_retry_count;   
    if(socket->queryString().keys().contains("compaction_retry_count")){
        fromStringValue(socket->queryString().value("compaction_retry_count"), compaction_retry_count);
    }
    
    qint32 compaction_force_timeout;   
    if(socket->queryString().keys().contains("compaction_force_timeout")){
        fromStringValue(socket->queryString().value("compaction_force_timeout"), compaction_force_timeout);
    }
    
    qint32 compaction_size_delta_estimation;   
    if(socket->queryString().keys().contains("compaction_size_delta_estimation")){
        fromStringValue(socket->queryString().value("compaction_size_delta_estimation"), compaction_size_delta_estimation);
    }
    
    bool compaction_disable_estimation;   
    if(socket->queryString().keys().contains("compaction_disable_estimation")){
        fromStringValue(socket->queryString().value("compaction_disable_estimation"), compaction_disable_estimation);
    }
    
    qint32 compaction_retained_generations;   
    if(socket->queryString().keys().contains("compaction_retained_generations")){
        fromStringValue(socket->queryString().value("compaction_retained_generations"), compaction_retained_generations);
    }
    
    qint32 compaction_memory_threshold;   
    if(socket->queryString().keys().contains("compaction_memory_threshold")){
        fromStringValue(socket->queryString().value("compaction_memory_threshold"), compaction_memory_threshold);
    }
    
    qint32 compaction_progress_log;   
    if(socket->queryString().keys().contains("compaction_progress_log")){
        fromStringValue(socket->queryString().value("compaction_progress_log"), compaction_progress_log);
    }
    
    bool standby;   
    if(socket->queryString().keys().contains("standby")){
        fromStringValue(socket->queryString().value("standby"), standby);
    }
    
    bool custom_blob_store;   
    if(socket->queryString().keys().contains("custom_blob_store")){
        fromStringValue(socket->queryString().value("custom_blob_store"), custom_blob_store);
    }
    
    bool custom_segment_store;   
    if(socket->queryString().keys().contains("custom_segment_store")){
        fromStringValue(socket->queryString().value("custom_segment_store"), custom_segment_store);
    }
    
    bool split_persistence;   
    if(socket->queryString().keys().contains("split_persistence")){
        fromStringValue(socket->queryString().value("split_persistence"), split_persistence);
    }
    
    QString repository_backup_dir;   
    if(socket->queryString().keys().contains("repository_backup_dir")){
        fromStringValue(socket->queryString().value("repository_backup_dir"), repository_backup_dir);
    }
    
    qint32 blob_gc_max_age_in_secs;   
    if(socket->queryString().keys().contains("blob_gc_max_age_in_secs")){
        fromStringValue(socket->queryString().value("blob_gc_max_age_in_secs"), blob_gc_max_age_in_secs);
    }
    
    qint32 blob_track_snapshot_interval_in_secs;   
    if(socket->queryString().keys().contains("blob_track_snapshot_interval_in_secs")){
        fromStringValue(socket->queryString().value("blob_track_snapshot_interval_in_secs"), blob_track_snapshot_interval_in_secs);
    }
    


    emit orgApacheJackrabbitOakSegmentSegmentNodeStoreService( post,  apply,  _delete,  action,  location,  propertylist,  repository_home,  tarmk_mode,  tarmk_size,  segment_cache_size,  string_cache_size,  template_cache_size,  string_deduplication_cache_size,  template_deduplication_cache_size,  node_deduplication_cache_size,  pause_compaction,  compaction_retry_count,  compaction_force_timeout,  compaction_size_delta_estimation,  compaction_disable_estimation,  compaction_retained_generations,  compaction_memory_threshold,  compaction_progress_log,  standby,  custom_blob_store,  custom_segment_store,  split_persistence,  repository_backup_dir,  blob_gc_max_age_in_secs,  blob_track_snapshot_interval_in_secs);
}


void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceRequest(){
    qDebug() << "//system/console/configMgr/org.apache.jackrabbit.oak.segment.standby.store.StandbyStoreService";
    connect(this, &OAIConfigmgrApiRequest::orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService, handler, &OAIConfigmgrApiHandler::orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool org_apache_sling_installer_configuration_persist;   
    if(socket->queryString().keys().contains("org_apache_sling_installer_configuration_persist")){
        fromStringValue(socket->queryString().value("org_apache_sling_installer_configuration_persist"), org_apache_sling_installer_configuration_persist);
    }
    
    QString mode;   
    if(socket->queryString().keys().contains("mode")){
        fromStringValue(socket->queryString().value("mode"), mode);
    }
    
    qint32 port;   
    if(socket->queryString().keys().contains("port")){
        fromStringValue(socket->queryString().value("port"), port);
    }
    
    QString primary_host;   
    if(socket->queryString().keys().contains("primary_host")){
        fromStringValue(socket->queryString().value("primary_host"), primary_host);
    }
    
    qint32 interval;   
    if(socket->queryString().keys().contains("interval")){
        fromStringValue(socket->queryString().value("interval"), interval);
    }
    
    QList<QString> primary_allowed_client_ip_ranges;   
    if(socket->queryString().keys().contains("primary_allowed_client_ip_ranges")){
        fromStringValue(socket->queryString().values("primary_allowed_client_ip_ranges"), primary_allowed_client_ip_ranges);
    }
    
    bool secure;   
    if(socket->queryString().keys().contains("secure")){
        fromStringValue(socket->queryString().value("secure"), secure);
    }
    
    qint32 standby_readtimeout;   
    if(socket->queryString().keys().contains("standby_readtimeout")){
        fromStringValue(socket->queryString().value("standby_readtimeout"), standby_readtimeout);
    }
    
    bool standby_autoclean;   
    if(socket->queryString().keys().contains("standby_autoclean")){
        fromStringValue(socket->queryString().value("standby_autoclean"), standby_autoclean);
    }
    


    emit orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService( post,  apply,  _delete,  action,  location,  propertylist,  org_apache_sling_installer_configuration_persist,  mode,  port,  primary_host,  interval,  primary_allowed_client_ip_ranges,  secure,  standby_readtimeout,  standby_autoclean);
}


void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeRequest(){
    qDebug() << "//system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.DefaultSyncHandler";
    connect(this, &OAIConfigmgrApiRequest::orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe, handler, &OAIConfigmgrApiHandler::orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString handler_name;   
    if(socket->queryString().keys().contains("handler_name")){
        fromStringValue(socket->queryString().value("handler_name"), handler_name);
    }
    
    QString user_expiration_time;   
    if(socket->queryString().keys().contains("user_expiration_time")){
        fromStringValue(socket->queryString().value("user_expiration_time"), user_expiration_time);
    }
    
    QList<QString> user_auto_membership;   
    if(socket->queryString().keys().contains("user_auto_membership")){
        fromStringValue(socket->queryString().values("user_auto_membership"), user_auto_membership);
    }
    
    QList<QString> user_property_mapping;   
    if(socket->queryString().keys().contains("user_property_mapping")){
        fromStringValue(socket->queryString().values("user_property_mapping"), user_property_mapping);
    }
    
    QString user_path_prefix;   
    if(socket->queryString().keys().contains("user_path_prefix")){
        fromStringValue(socket->queryString().value("user_path_prefix"), user_path_prefix);
    }
    
    QString user_membership_exp_time;   
    if(socket->queryString().keys().contains("user_membership_exp_time")){
        fromStringValue(socket->queryString().value("user_membership_exp_time"), user_membership_exp_time);
    }
    
    qint32 user_membership_nesting_depth;   
    if(socket->queryString().keys().contains("user_membership_nesting_depth")){
        fromStringValue(socket->queryString().value("user_membership_nesting_depth"), user_membership_nesting_depth);
    }
    
    bool user_dynamic_membership;   
    if(socket->queryString().keys().contains("user_dynamic_membership")){
        fromStringValue(socket->queryString().value("user_dynamic_membership"), user_dynamic_membership);
    }
    
    bool user_disable_missing;   
    if(socket->queryString().keys().contains("user_disable_missing")){
        fromStringValue(socket->queryString().value("user_disable_missing"), user_disable_missing);
    }
    
    QString group_expiration_time;   
    if(socket->queryString().keys().contains("group_expiration_time")){
        fromStringValue(socket->queryString().value("group_expiration_time"), group_expiration_time);
    }
    
    QList<QString> group_auto_membership;   
    if(socket->queryString().keys().contains("group_auto_membership")){
        fromStringValue(socket->queryString().values("group_auto_membership"), group_auto_membership);
    }
    
    QList<QString> group_property_mapping;   
    if(socket->queryString().keys().contains("group_property_mapping")){
        fromStringValue(socket->queryString().values("group_property_mapping"), group_property_mapping);
    }
    
    QString group_path_prefix;   
    if(socket->queryString().keys().contains("group_path_prefix")){
        fromStringValue(socket->queryString().value("group_path_prefix"), group_path_prefix);
    }
    
    bool enable_rfc7613_usercase_mapped_profile;   
    if(socket->queryString().keys().contains("enable_rfc7613_usercase_mapped_profile")){
        fromStringValue(socket->queryString().value("enable_rfc7613_usercase_mapped_profile"), enable_rfc7613_usercase_mapped_profile);
    }
    


    emit orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe( post,  apply,  _delete,  action,  location,  propertylist,  handler_name,  user_expiration_time,  user_auto_membership,  user_property_mapping,  user_path_prefix,  user_membership_exp_time,  user_membership_nesting_depth,  user_dynamic_membership,  user_disable_missing,  group_expiration_time,  group_auto_membership,  group_property_mapping,  group_path_prefix,  enable_rfc7613_usercase_mapped_profile);
}


void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExRequest(){
    qDebug() << "//system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.ExternalLoginModuleFactory";
    connect(this, &OAIConfigmgrApiRequest::orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx, handler, &OAIConfigmgrApiHandler::orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 jaas_ranking;   
    if(socket->queryString().keys().contains("jaas_ranking")){
        fromStringValue(socket->queryString().value("jaas_ranking"), jaas_ranking);
    }
    
    QString jaas_control_flag;   
    if(socket->queryString().keys().contains("jaas_control_flag")){
        fromStringValue(socket->queryString().value("jaas_control_flag"), jaas_control_flag);
    }
    
    QString jaas_realm_name;   
    if(socket->queryString().keys().contains("jaas_realm_name")){
        fromStringValue(socket->queryString().value("jaas_realm_name"), jaas_realm_name);
    }
    
    QString idp_name;   
    if(socket->queryString().keys().contains("idp_name")){
        fromStringValue(socket->queryString().value("idp_name"), idp_name);
    }
    
    QString sync_handler_name;   
    if(socket->queryString().keys().contains("sync_handler_name")){
        fromStringValue(socket->queryString().value("sync_handler_name"), sync_handler_name);
    }
    


    emit orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx( post,  apply,  _delete,  action,  location,  propertylist,  jaas_ranking,  jaas_control_flag,  jaas_realm_name,  idp_name,  sync_handler_name);
}


void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrRequest(){
    qDebug() << "//system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.principal.ExternalPrincipalConfiguration";
    connect(this, &OAIConfigmgrApiRequest::orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr, handler, &OAIConfigmgrApiHandler::orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool protect_external_id;   
    if(socket->queryString().keys().contains("protect_external_id")){
        fromStringValue(socket->queryString().value("protect_external_id"), protect_external_id);
    }
    


    emit orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr( post,  apply,  _delete,  action,  location,  propertylist,  protect_external_id);
}


void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiRequest(){
    qDebug() << "//system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugConfiguration";
    connect(this, &OAIConfigmgrApiRequest::orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi, handler, &OAIConfigmgrApiHandler::orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> cug_supported_paths;   
    if(socket->queryString().keys().contains("cug_supported_paths")){
        fromStringValue(socket->queryString().values("cug_supported_paths"), cug_supported_paths);
    }
    
    bool cug_enabled;   
    if(socket->queryString().keys().contains("cug_enabled")){
        fromStringValue(socket->queryString().value("cug_enabled"), cug_enabled);
    }
    
    qint32 configuration_ranking;   
    if(socket->queryString().keys().contains("configuration_ranking")){
        fromStringValue(socket->queryString().value("configuration_ranking"), configuration_ranking);
    }
    


    emit orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi( post,  apply,  _delete,  action,  location,  propertylist,  cug_supported_paths,  cug_enabled,  configuration_ranking);
}


void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluRequest(){
    qDebug() << "//system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugExcludeImpl";
    connect(this, &OAIConfigmgrApiRequest::orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu, handler, &OAIConfigmgrApiHandler::orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> principal_names;   
    if(socket->queryString().keys().contains("principal_names")){
        fromStringValue(socket->queryString().values("principal_names"), principal_names);
    }
    


    emit orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu( post,  apply,  _delete,  action,  location,  propertylist,  principal_names);
}


void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableRequest(){
    qDebug() << "//system/console/configMgr/org.apache.jackrabbit.oak.spi.security.user.action.DefaultAuthorizableActionProvider";
    connect(this, &OAIConfigmgrApiRequest::orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable, handler, &OAIConfigmgrApiHandler::orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString enabled_actions;   
    if(socket->queryString().keys().contains("enabled_actions")){
        fromStringValue(socket->queryString().value("enabled_actions"), enabled_actions);
    }
    
    QList<QString> user_privilege_names;   
    if(socket->queryString().keys().contains("user_privilege_names")){
        fromStringValue(socket->queryString().values("user_privilege_names"), user_privilege_names);
    }
    
    QList<QString> group_privilege_names;   
    if(socket->queryString().keys().contains("group_privilege_names")){
        fromStringValue(socket->queryString().values("group_privilege_names"), group_privilege_names);
    }
    
    QString constraint;   
    if(socket->queryString().keys().contains("constraint")){
        fromStringValue(socket->queryString().value("constraint"), constraint);
    }
    


    emit orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable( post,  apply,  _delete,  action,  location,  propertylist,  enabled_actions,  user_privilege_names,  group_privilege_names,  constraint);
}


void OAIConfigmgrApiRequest::orgApacheJackrabbitVaultPackagingImplPackagingImplRequest(){
    qDebug() << "//system/console/configMgr/org.apache.jackrabbit.vault.packaging.impl.PackagingImpl";
    connect(this, &OAIConfigmgrApiRequest::orgApacheJackrabbitVaultPackagingImplPackagingImpl, handler, &OAIConfigmgrApiHandler::orgApacheJackrabbitVaultPackagingImplPackagingImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> package_roots;   
    if(socket->queryString().keys().contains("package_roots")){
        fromStringValue(socket->queryString().values("package_roots"), package_roots);
    }
    


    emit orgApacheJackrabbitVaultPackagingImplPackagingImpl( post,  apply,  _delete,  action,  location,  propertylist,  package_roots);
}


void OAIConfigmgrApiRequest::orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryRequest(){
    qDebug() << "//system/console/configMgr/org.apache.jackrabbit.vault.packaging.registry.impl.FSPackageRegistry";
    connect(this, &OAIConfigmgrApiRequest::orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry, handler, &OAIConfigmgrApiHandler::orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString home_path;   
    if(socket->queryString().keys().contains("home_path")){
        fromStringValue(socket->queryString().value("home_path"), home_path);
    }
    


    emit orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry( post,  apply,  _delete,  action,  location,  propertylist,  home_path);
}


void OAIConfigmgrApiRequest::orgApacheSlingAuthCoreImplLogoutServletRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.auth.core.impl.LogoutServlet";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingAuthCoreImplLogoutServlet, handler, &OAIConfigmgrApiHandler::orgApacheSlingAuthCoreImplLogoutServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> sling_servlet_methods;   
    if(socket->queryString().keys().contains("sling_servlet_methods")){
        fromStringValue(socket->queryString().values("sling_servlet_methods"), sling_servlet_methods);
    }
    
    QString sling_servlet_paths;   
    if(socket->queryString().keys().contains("sling_servlet_paths")){
        fromStringValue(socket->queryString().value("sling_servlet_paths"), sling_servlet_paths);
    }
    


    emit orgApacheSlingAuthCoreImplLogoutServlet( post,  apply,  _delete,  action,  location,  propertylist,  sling_servlet_methods,  sling_servlet_paths);
}


void OAIConfigmgrApiRequest::orgApacheSlingCaconfigImplConfigurationBindingsValueProviderRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationBindingsValueProvider";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingCaconfigImplConfigurationBindingsValueProvider, handler, &OAIConfigmgrApiHandler::orgApacheSlingCaconfigImplConfigurationBindingsValueProvider);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool enabled;   
    if(socket->queryString().keys().contains("enabled")){
        fromStringValue(socket->queryString().value("enabled"), enabled);
    }
    


    emit orgApacheSlingCaconfigImplConfigurationBindingsValueProvider( post,  apply,  _delete,  action,  location,  propertylist,  enabled);
}


void OAIConfigmgrApiRequest::orgApacheSlingCaconfigImplConfigurationResolverImplRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationResolverImpl";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingCaconfigImplConfigurationResolverImpl, handler, &OAIConfigmgrApiHandler::orgApacheSlingCaconfigImplConfigurationResolverImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> config_bucket_names;   
    if(socket->queryString().keys().contains("config_bucket_names")){
        fromStringValue(socket->queryString().values("config_bucket_names"), config_bucket_names);
    }
    


    emit orgApacheSlingCaconfigImplConfigurationResolverImpl( post,  apply,  _delete,  action,  location,  propertylist,  config_bucket_names);
}


void OAIConfigmgrApiRequest::orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationInheritanceStrategy";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra, handler, &OAIConfigmgrApiHandler::orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool enabled;   
    if(socket->queryString().keys().contains("enabled")){
        fromStringValue(socket->queryString().value("enabled"), enabled);
    }
    
    QList<QString> config_property_inheritance_property_names;   
    if(socket->queryString().keys().contains("config_property_inheritance_property_names")){
        fromStringValue(socket->queryString().values("config_property_inheritance_property_names"), config_property_inheritance_property_names);
    }
    


    emit orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra( post,  apply,  _delete,  action,  location,  propertylist,  enabled,  config_property_inheritance_property_names);
}


void OAIConfigmgrApiRequest::orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationPersistenceStrategy";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra, handler, &OAIConfigmgrApiHandler::orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool enabled;   
    if(socket->queryString().keys().contains("enabled")){
        fromStringValue(socket->queryString().value("enabled"), enabled);
    }
    


    emit orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra( post,  apply,  _delete,  action,  location,  propertylist,  enabled);
}


void OAIConfigmgrApiRequest::orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.caconfig.impl.override.OsgiConfigurationOverrideProvider";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi, handler, &OAIConfigmgrApiHandler::orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString description;   
    if(socket->queryString().keys().contains("description")){
        fromStringValue(socket->queryString().value("description"), description);
    }
    
    QList<QString> overrides;   
    if(socket->queryString().keys().contains("overrides")){
        fromStringValue(socket->queryString().values("overrides"), overrides);
    }
    
    bool enabled;   
    if(socket->queryString().keys().contains("enabled")){
        fromStringValue(socket->queryString().value("enabled"), enabled);
    }
    
    qint32 service_ranking;   
    if(socket->queryString().keys().contains("service_ranking")){
        fromStringValue(socket->queryString().value("service_ranking"), service_ranking);
    }
    


    emit orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi( post,  apply,  _delete,  action,  location,  propertylist,  description,  overrides,  enabled,  service_ranking);
}


void OAIConfigmgrApiRequest::orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.caconfig.impl.override.SystemPropertyConfigurationOverrideProvider";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve, handler, &OAIConfigmgrApiHandler::orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool enabled;   
    if(socket->queryString().keys().contains("enabled")){
        fromStringValue(socket->queryString().value("enabled"), enabled);
    }
    
    qint32 service_ranking;   
    if(socket->queryString().keys().contains("service_ranking")){
        fromStringValue(socket->queryString().value("service_ranking"), service_ranking);
    }
    


    emit orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve( post,  apply,  _delete,  action,  location,  propertylist,  enabled,  service_ranking);
}


void OAIConfigmgrApiRequest::orgApacheSlingCaconfigManagementImplConfigurationManagementSettiRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.caconfig.management.impl.ConfigurationManagementSettingsImpl";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingCaconfigManagementImplConfigurationManagementSetti, handler, &OAIConfigmgrApiHandler::orgApacheSlingCaconfigManagementImplConfigurationManagementSetti);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> ignore_property_name_regex;   
    if(socket->queryString().keys().contains("ignore_property_name_regex")){
        fromStringValue(socket->queryString().values("ignore_property_name_regex"), ignore_property_name_regex);
    }
    
    QList<QString> config_collection_properties_resource_names;   
    if(socket->queryString().keys().contains("config_collection_properties_resource_names")){
        fromStringValue(socket->queryString().values("config_collection_properties_resource_names"), config_collection_properties_resource_names);
    }
    


    emit orgApacheSlingCaconfigManagementImplConfigurationManagementSetti( post,  apply,  _delete,  action,  location,  propertylist,  ignore_property_name_regex,  config_collection_properties_resource_names);
}


void OAIConfigmgrApiRequest::orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultConfigurationResourceResolvingStrategy";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour, handler, &OAIConfigmgrApiHandler::orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool enabled;   
    if(socket->queryString().keys().contains("enabled")){
        fromStringValue(socket->queryString().value("enabled"), enabled);
    }
    
    QString config_path;   
    if(socket->queryString().keys().contains("config_path")){
        fromStringValue(socket->queryString().value("config_path"), config_path);
    }
    
    QList<QString> fallback_paths;   
    if(socket->queryString().keys().contains("fallback_paths")){
        fromStringValue(socket->queryString().values("fallback_paths"), fallback_paths);
    }
    
    QList<QString> config_collection_inheritance_property_names;   
    if(socket->queryString().keys().contains("config_collection_inheritance_property_names")){
        fromStringValue(socket->queryString().values("config_collection_inheritance_property_names"), config_collection_inheritance_property_names);
    }
    


    emit orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour( post,  apply,  _delete,  action,  location,  propertylist,  enabled,  config_path,  fallback_paths,  config_collection_inheritance_property_names);
}


void OAIConfigmgrApiRequest::orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultContextPathStrategy";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy, handler, &OAIConfigmgrApiHandler::orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool enabled;   
    if(socket->queryString().keys().contains("enabled")){
        fromStringValue(socket->queryString().value("enabled"), enabled);
    }
    
    QList<QString> config_ref_resource_names;   
    if(socket->queryString().keys().contains("config_ref_resource_names")){
        fromStringValue(socket->queryString().values("config_ref_resource_names"), config_ref_resource_names);
    }
    
    QList<QString> config_ref_property_names;   
    if(socket->queryString().keys().contains("config_ref_property_names")){
        fromStringValue(socket->queryString().values("config_ref_property_names"), config_ref_property_names);
    }
    
    qint32 service_ranking;   
    if(socket->queryString().keys().contains("service_ranking")){
        fromStringValue(socket->queryString().value("service_ranking"), service_ranking);
    }
    


    emit orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy( post,  apply,  _delete,  action,  location,  propertylist,  enabled,  config_ref_resource_names,  config_ref_property_names,  service_ranking);
}


void OAIConfigmgrApiRequest::orgApacheSlingCommonsHtmlInternalTagsoupHtmlParserRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.commons.html.internal.TagsoupHtmlParser";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingCommonsHtmlInternalTagsoupHtmlParser, handler, &OAIConfigmgrApiHandler::orgApacheSlingCommonsHtmlInternalTagsoupHtmlParser);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> parser_features;   
    if(socket->queryString().keys().contains("parser_features")){
        fromStringValue(socket->queryString().values("parser_features"), parser_features);
    }
    


    emit orgApacheSlingCommonsHtmlInternalTagsoupHtmlParser( post,  apply,  _delete,  action,  location,  propertylist,  parser_features);
}


void OAIConfigmgrApiRequest::orgApacheSlingCommonsLogLogManagerRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.commons.log.LogManager";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingCommonsLogLogManager, handler, &OAIConfigmgrApiHandler::orgApacheSlingCommonsLogLogManager);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString org_apache_sling_commons_log_level;   
    if(socket->queryString().keys().contains("org_apache_sling_commons_log_level")){
        fromStringValue(socket->queryString().value("org_apache_sling_commons_log_level"), org_apache_sling_commons_log_level);
    }
    
    QString org_apache_sling_commons_log_file;   
    if(socket->queryString().keys().contains("org_apache_sling_commons_log_file")){
        fromStringValue(socket->queryString().value("org_apache_sling_commons_log_file"), org_apache_sling_commons_log_file);
    }
    
    qint32 org_apache_sling_commons_log_file_number;   
    if(socket->queryString().keys().contains("org_apache_sling_commons_log_file_number")){
        fromStringValue(socket->queryString().value("org_apache_sling_commons_log_file_number"), org_apache_sling_commons_log_file_number);
    }
    
    QString org_apache_sling_commons_log_file_size;   
    if(socket->queryString().keys().contains("org_apache_sling_commons_log_file_size")){
        fromStringValue(socket->queryString().value("org_apache_sling_commons_log_file_size"), org_apache_sling_commons_log_file_size);
    }
    
    QString org_apache_sling_commons_log_pattern;   
    if(socket->queryString().keys().contains("org_apache_sling_commons_log_pattern")){
        fromStringValue(socket->queryString().value("org_apache_sling_commons_log_pattern"), org_apache_sling_commons_log_pattern);
    }
    
    QString org_apache_sling_commons_log_configuration_file;   
    if(socket->queryString().keys().contains("org_apache_sling_commons_log_configuration_file")){
        fromStringValue(socket->queryString().value("org_apache_sling_commons_log_configuration_file"), org_apache_sling_commons_log_configuration_file);
    }
    
    bool org_apache_sling_commons_log_packaging_data_enabled;   
    if(socket->queryString().keys().contains("org_apache_sling_commons_log_packaging_data_enabled")){
        fromStringValue(socket->queryString().value("org_apache_sling_commons_log_packaging_data_enabled"), org_apache_sling_commons_log_packaging_data_enabled);
    }
    
    qint32 org_apache_sling_commons_log_max_caller_data_depth;   
    if(socket->queryString().keys().contains("org_apache_sling_commons_log_max_caller_data_depth")){
        fromStringValue(socket->queryString().value("org_apache_sling_commons_log_max_caller_data_depth"), org_apache_sling_commons_log_max_caller_data_depth);
    }
    
    qint32 org_apache_sling_commons_log_max_old_file_count_in_dump;   
    if(socket->queryString().keys().contains("org_apache_sling_commons_log_max_old_file_count_in_dump")){
        fromStringValue(socket->queryString().value("org_apache_sling_commons_log_max_old_file_count_in_dump"), org_apache_sling_commons_log_max_old_file_count_in_dump);
    }
    
    qint32 org_apache_sling_commons_log_num_of_lines;   
    if(socket->queryString().keys().contains("org_apache_sling_commons_log_num_of_lines")){
        fromStringValue(socket->queryString().value("org_apache_sling_commons_log_num_of_lines"), org_apache_sling_commons_log_num_of_lines);
    }
    


    emit orgApacheSlingCommonsLogLogManager( post,  apply,  _delete,  action,  location,  propertylist,  org_apache_sling_commons_log_level,  org_apache_sling_commons_log_file,  org_apache_sling_commons_log_file_number,  org_apache_sling_commons_log_file_size,  org_apache_sling_commons_log_pattern,  org_apache_sling_commons_log_configuration_file,  org_apache_sling_commons_log_packaging_data_enabled,  org_apache_sling_commons_log_max_caller_data_depth,  org_apache_sling_commons_log_max_old_file_count_in_dump,  org_apache_sling_commons_log_num_of_lines);
}


void OAIConfigmgrApiRequest::orgApacheSlingCommonsLogLogManagerFactoryConfigRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.config";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingCommonsLogLogManagerFactoryConfig, handler, &OAIConfigmgrApiHandler::orgApacheSlingCommonsLogLogManagerFactoryConfig);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString org_apache_sling_commons_log_level;   
    if(socket->queryString().keys().contains("org_apache_sling_commons_log_level")){
        fromStringValue(socket->queryString().value("org_apache_sling_commons_log_level"), org_apache_sling_commons_log_level);
    }
    
    QString org_apache_sling_commons_log_file;   
    if(socket->queryString().keys().contains("org_apache_sling_commons_log_file")){
        fromStringValue(socket->queryString().value("org_apache_sling_commons_log_file"), org_apache_sling_commons_log_file);
    }
    
    QString org_apache_sling_commons_log_pattern;   
    if(socket->queryString().keys().contains("org_apache_sling_commons_log_pattern")){
        fromStringValue(socket->queryString().value("org_apache_sling_commons_log_pattern"), org_apache_sling_commons_log_pattern);
    }
    
    QList<QString> org_apache_sling_commons_log_names;   
    if(socket->queryString().keys().contains("org_apache_sling_commons_log_names")){
        fromStringValue(socket->queryString().values("org_apache_sling_commons_log_names"), org_apache_sling_commons_log_names);
    }
    
    bool org_apache_sling_commons_log_additiv;   
    if(socket->queryString().keys().contains("org_apache_sling_commons_log_additiv")){
        fromStringValue(socket->queryString().value("org_apache_sling_commons_log_additiv"), org_apache_sling_commons_log_additiv);
    }
    


    emit orgApacheSlingCommonsLogLogManagerFactoryConfig( post,  apply,  _delete,  action,  location,  propertylist,  org_apache_sling_commons_log_level,  org_apache_sling_commons_log_file,  org_apache_sling_commons_log_pattern,  org_apache_sling_commons_log_names,  org_apache_sling_commons_log_additiv);
}


void OAIConfigmgrApiRequest::orgApacheSlingCommonsLogLogManagerFactoryWriterRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.writer";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingCommonsLogLogManagerFactoryWriter, handler, &OAIConfigmgrApiHandler::orgApacheSlingCommonsLogLogManagerFactoryWriter);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString org_apache_sling_commons_log_file;   
    if(socket->queryString().keys().contains("org_apache_sling_commons_log_file")){
        fromStringValue(socket->queryString().value("org_apache_sling_commons_log_file"), org_apache_sling_commons_log_file);
    }
    
    qint32 org_apache_sling_commons_log_file_number;   
    if(socket->queryString().keys().contains("org_apache_sling_commons_log_file_number")){
        fromStringValue(socket->queryString().value("org_apache_sling_commons_log_file_number"), org_apache_sling_commons_log_file_number);
    }
    
    QString org_apache_sling_commons_log_file_size;   
    if(socket->queryString().keys().contains("org_apache_sling_commons_log_file_size")){
        fromStringValue(socket->queryString().value("org_apache_sling_commons_log_file_size"), org_apache_sling_commons_log_file_size);
    }
    
    bool org_apache_sling_commons_log_file_buffered;   
    if(socket->queryString().keys().contains("org_apache_sling_commons_log_file_buffered")){
        fromStringValue(socket->queryString().value("org_apache_sling_commons_log_file_buffered"), org_apache_sling_commons_log_file_buffered);
    }
    


    emit orgApacheSlingCommonsLogLogManagerFactoryWriter( post,  apply,  _delete,  action,  location,  propertylist,  org_apache_sling_commons_log_file,  org_apache_sling_commons_log_file_number,  org_apache_sling_commons_log_file_size,  org_apache_sling_commons_log_file_buffered);
}


void OAIConfigmgrApiRequest::orgApacheSlingCommonsMetricsInternalLogReporterRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.commons.metrics.internal.LogReporter";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingCommonsMetricsInternalLogReporter, handler, &OAIConfigmgrApiHandler::orgApacheSlingCommonsMetricsInternalLogReporter);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 period;   
    if(socket->queryString().keys().contains("period")){
        fromStringValue(socket->queryString().value("period"), period);
    }
    
    QString time_unit;   
    if(socket->queryString().keys().contains("time_unit")){
        fromStringValue(socket->queryString().value("time_unit"), time_unit);
    }
    
    QString level;   
    if(socket->queryString().keys().contains("level")){
        fromStringValue(socket->queryString().value("level"), level);
    }
    
    QString logger_name;   
    if(socket->queryString().keys().contains("logger_name")){
        fromStringValue(socket->queryString().value("logger_name"), logger_name);
    }
    
    QString prefix;   
    if(socket->queryString().keys().contains("prefix")){
        fromStringValue(socket->queryString().value("prefix"), prefix);
    }
    
    QString pattern;   
    if(socket->queryString().keys().contains("pattern")){
        fromStringValue(socket->queryString().value("pattern"), pattern);
    }
    
    QString registry_name;   
    if(socket->queryString().keys().contains("registry_name")){
        fromStringValue(socket->queryString().value("registry_name"), registry_name);
    }
    


    emit orgApacheSlingCommonsMetricsInternalLogReporter( post,  apply,  _delete,  action,  location,  propertylist,  period,  time_unit,  level,  logger_name,  prefix,  pattern,  registry_name);
}


void OAIConfigmgrApiRequest::orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.commons.metrics.rrd4j.impl.CodahaleMetricsReporter";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter, handler, &OAIConfigmgrApiHandler::orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> datasources;   
    if(socket->queryString().keys().contains("datasources")){
        fromStringValue(socket->queryString().values("datasources"), datasources);
    }
    
    qint32 step;   
    if(socket->queryString().keys().contains("step")){
        fromStringValue(socket->queryString().value("step"), step);
    }
    
    QList<QString> archives;   
    if(socket->queryString().keys().contains("archives")){
        fromStringValue(socket->queryString().values("archives"), archives);
    }
    
    QString path;   
    if(socket->queryString().keys().contains("path")){
        fromStringValue(socket->queryString().value("path"), path);
    }
    


    emit orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter( post,  apply,  _delete,  action,  location,  propertylist,  datasources,  step,  archives,  path);
}


void OAIConfigmgrApiRequest::orgApacheSlingCommonsMimeInternalMimeTypeServiceImplRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.commons.mime.internal.MimeTypeServiceImpl";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingCommonsMimeInternalMimeTypeServiceImpl, handler, &OAIConfigmgrApiHandler::orgApacheSlingCommonsMimeInternalMimeTypeServiceImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> mime_types;   
    if(socket->queryString().keys().contains("mime_types")){
        fromStringValue(socket->queryString().values("mime_types"), mime_types);
    }
    


    emit orgApacheSlingCommonsMimeInternalMimeTypeServiceImpl( post,  apply,  _delete,  action,  location,  propertylist,  mime_types);
}


void OAIConfigmgrApiRequest::orgApacheSlingCommonsSchedulerImplQuartzSchedulerRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.commons.scheduler.impl.QuartzScheduler";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingCommonsSchedulerImplQuartzScheduler, handler, &OAIConfigmgrApiHandler::orgApacheSlingCommonsSchedulerImplQuartzScheduler);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString pool_name;   
    if(socket->queryString().keys().contains("pool_name")){
        fromStringValue(socket->queryString().value("pool_name"), pool_name);
    }
    
    QList<QString> allowed_pool_names;   
    if(socket->queryString().keys().contains("allowed_pool_names")){
        fromStringValue(socket->queryString().values("allowed_pool_names"), allowed_pool_names);
    }
    
    bool scheduler_useleaderforsingle;   
    if(socket->queryString().keys().contains("scheduler_useleaderforsingle")){
        fromStringValue(socket->queryString().value("scheduler_useleaderforsingle"), scheduler_useleaderforsingle);
    }
    
    QList<QString> metrics_filters;   
    if(socket->queryString().keys().contains("metrics_filters")){
        fromStringValue(socket->queryString().values("metrics_filters"), metrics_filters);
    }
    
    qint32 slow_threshold_millis;   
    if(socket->queryString().keys().contains("slow_threshold_millis")){
        fromStringValue(socket->queryString().value("slow_threshold_millis"), slow_threshold_millis);
    }
    


    emit orgApacheSlingCommonsSchedulerImplQuartzScheduler( post,  apply,  _delete,  action,  location,  propertylist,  pool_name,  allowed_pool_names,  scheduler_useleaderforsingle,  metrics_filters,  slow_threshold_millis);
}


void OAIConfigmgrApiRequest::orgApacheSlingCommonsSchedulerImplSchedulerHealthCheckRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.commons.scheduler.impl.SchedulerHealthCheck";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingCommonsSchedulerImplSchedulerHealthCheck, handler, &OAIConfigmgrApiHandler::orgApacheSlingCommonsSchedulerImplSchedulerHealthCheck);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 max_quartz_job_duration_acceptable;   
    if(socket->queryString().keys().contains("max_quartz_job_duration_acceptable")){
        fromStringValue(socket->queryString().value("max_quartz_job_duration_acceptable"), max_quartz_job_duration_acceptable);
    }
    


    emit orgApacheSlingCommonsSchedulerImplSchedulerHealthCheck( post,  apply,  _delete,  action,  location,  propertylist,  max_quartz_job_duration_acceptable);
}


void OAIConfigmgrApiRequest::orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.commons.threads.impl.DefaultThreadPool.factory";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory, handler, &OAIConfigmgrApiHandler::orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString name;   
    if(socket->queryString().keys().contains("name")){
        fromStringValue(socket->queryString().value("name"), name);
    }
    
    qint32 min_pool_size;   
    if(socket->queryString().keys().contains("min_pool_size")){
        fromStringValue(socket->queryString().value("min_pool_size"), min_pool_size);
    }
    
    qint32 max_pool_size;   
    if(socket->queryString().keys().contains("max_pool_size")){
        fromStringValue(socket->queryString().value("max_pool_size"), max_pool_size);
    }
    
    qint32 queue_size;   
    if(socket->queryString().keys().contains("queue_size")){
        fromStringValue(socket->queryString().value("queue_size"), queue_size);
    }
    
    qint32 max_thread_age;   
    if(socket->queryString().keys().contains("max_thread_age")){
        fromStringValue(socket->queryString().value("max_thread_age"), max_thread_age);
    }
    
    qint32 keep_alive_time;   
    if(socket->queryString().keys().contains("keep_alive_time")){
        fromStringValue(socket->queryString().value("keep_alive_time"), keep_alive_time);
    }
    
    QString block_policy;   
    if(socket->queryString().keys().contains("block_policy")){
        fromStringValue(socket->queryString().value("block_policy"), block_policy);
    }
    
    bool shutdown_graceful;   
    if(socket->queryString().keys().contains("shutdown_graceful")){
        fromStringValue(socket->queryString().value("shutdown_graceful"), shutdown_graceful);
    }
    
    bool daemon;   
    if(socket->queryString().keys().contains("daemon")){
        fromStringValue(socket->queryString().value("daemon"), daemon);
    }
    
    qint32 shutdown_wait_time;   
    if(socket->queryString().keys().contains("shutdown_wait_time")){
        fromStringValue(socket->queryString().value("shutdown_wait_time"), shutdown_wait_time);
    }
    
    QString priority;   
    if(socket->queryString().keys().contains("priority")){
        fromStringValue(socket->queryString().value("priority"), priority);
    }
    


    emit orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory( post,  apply,  _delete,  action,  location,  propertylist,  name,  min_pool_size,  max_pool_size,  queue_size,  max_thread_age,  keep_alive_time,  block_policy,  shutdown_graceful,  daemon,  shutdown_wait_time,  priority);
}


void OAIConfigmgrApiRequest::orgApacheSlingDatasourceDataSourceFactoryRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.datasource.DataSourceFactory";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingDatasourceDataSourceFactory, handler, &OAIConfigmgrApiHandler::orgApacheSlingDatasourceDataSourceFactory);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString datasource_name;   
    if(socket->queryString().keys().contains("datasource_name")){
        fromStringValue(socket->queryString().value("datasource_name"), datasource_name);
    }
    
    QString datasource_svc_prop_name;   
    if(socket->queryString().keys().contains("datasource_svc_prop_name")){
        fromStringValue(socket->queryString().value("datasource_svc_prop_name"), datasource_svc_prop_name);
    }
    
    QString driver_class_name;   
    if(socket->queryString().keys().contains("driver_class_name")){
        fromStringValue(socket->queryString().value("driver_class_name"), driver_class_name);
    }
    
    QString url;   
    if(socket->queryString().keys().contains("url")){
        fromStringValue(socket->queryString().value("url"), url);
    }
    
    QString username;   
    if(socket->queryString().keys().contains("username")){
        fromStringValue(socket->queryString().value("username"), username);
    }
    
    QString password;   
    if(socket->queryString().keys().contains("password")){
        fromStringValue(socket->queryString().value("password"), password);
    }
    
    QString default_auto_commit;   
    if(socket->queryString().keys().contains("default_auto_commit")){
        fromStringValue(socket->queryString().value("default_auto_commit"), default_auto_commit);
    }
    
    QString default_read_only;   
    if(socket->queryString().keys().contains("default_read_only")){
        fromStringValue(socket->queryString().value("default_read_only"), default_read_only);
    }
    
    QString default_transaction_isolation;   
    if(socket->queryString().keys().contains("default_transaction_isolation")){
        fromStringValue(socket->queryString().value("default_transaction_isolation"), default_transaction_isolation);
    }
    
    QString default_catalog;   
    if(socket->queryString().keys().contains("default_catalog")){
        fromStringValue(socket->queryString().value("default_catalog"), default_catalog);
    }
    
    qint32 max_active;   
    if(socket->queryString().keys().contains("max_active")){
        fromStringValue(socket->queryString().value("max_active"), max_active);
    }
    
    qint32 max_idle;   
    if(socket->queryString().keys().contains("max_idle")){
        fromStringValue(socket->queryString().value("max_idle"), max_idle);
    }
    
    qint32 min_idle;   
    if(socket->queryString().keys().contains("min_idle")){
        fromStringValue(socket->queryString().value("min_idle"), min_idle);
    }
    
    qint32 initial_size;   
    if(socket->queryString().keys().contains("initial_size")){
        fromStringValue(socket->queryString().value("initial_size"), initial_size);
    }
    
    qint32 max_wait;   
    if(socket->queryString().keys().contains("max_wait")){
        fromStringValue(socket->queryString().value("max_wait"), max_wait);
    }
    
    qint32 max_age;   
    if(socket->queryString().keys().contains("max_age")){
        fromStringValue(socket->queryString().value("max_age"), max_age);
    }
    
    bool test_on_borrow;   
    if(socket->queryString().keys().contains("test_on_borrow")){
        fromStringValue(socket->queryString().value("test_on_borrow"), test_on_borrow);
    }
    
    bool test_on_return;   
    if(socket->queryString().keys().contains("test_on_return")){
        fromStringValue(socket->queryString().value("test_on_return"), test_on_return);
    }
    
    bool test_while_idle;   
    if(socket->queryString().keys().contains("test_while_idle")){
        fromStringValue(socket->queryString().value("test_while_idle"), test_while_idle);
    }
    
    QString validation_query;   
    if(socket->queryString().keys().contains("validation_query")){
        fromStringValue(socket->queryString().value("validation_query"), validation_query);
    }
    
    qint32 validation_query_timeout;   
    if(socket->queryString().keys().contains("validation_query_timeout")){
        fromStringValue(socket->queryString().value("validation_query_timeout"), validation_query_timeout);
    }
    
    qint32 time_between_eviction_runs_millis;   
    if(socket->queryString().keys().contains("time_between_eviction_runs_millis")){
        fromStringValue(socket->queryString().value("time_between_eviction_runs_millis"), time_between_eviction_runs_millis);
    }
    
    qint32 min_evictable_idle_time_millis;   
    if(socket->queryString().keys().contains("min_evictable_idle_time_millis")){
        fromStringValue(socket->queryString().value("min_evictable_idle_time_millis"), min_evictable_idle_time_millis);
    }
    
    QString connection_properties;   
    if(socket->queryString().keys().contains("connection_properties")){
        fromStringValue(socket->queryString().value("connection_properties"), connection_properties);
    }
    
    QString init_sql;   
    if(socket->queryString().keys().contains("init_sql")){
        fromStringValue(socket->queryString().value("init_sql"), init_sql);
    }
    
    QString jdbc_interceptors;   
    if(socket->queryString().keys().contains("jdbc_interceptors")){
        fromStringValue(socket->queryString().value("jdbc_interceptors"), jdbc_interceptors);
    }
    
    qint32 validation_interval;   
    if(socket->queryString().keys().contains("validation_interval")){
        fromStringValue(socket->queryString().value("validation_interval"), validation_interval);
    }
    
    bool log_validation_errors;   
    if(socket->queryString().keys().contains("log_validation_errors")){
        fromStringValue(socket->queryString().value("log_validation_errors"), log_validation_errors);
    }
    
    QList<QString> datasource_svc_properties;   
    if(socket->queryString().keys().contains("datasource_svc_properties")){
        fromStringValue(socket->queryString().values("datasource_svc_properties"), datasource_svc_properties);
    }
    


    emit orgApacheSlingDatasourceDataSourceFactory( post,  apply,  _delete,  action,  location,  propertylist,  datasource_name,  datasource_svc_prop_name,  driver_class_name,  url,  username,  password,  default_auto_commit,  default_read_only,  default_transaction_isolation,  default_catalog,  max_active,  max_idle,  min_idle,  initial_size,  max_wait,  max_age,  test_on_borrow,  test_on_return,  test_while_idle,  validation_query,  validation_query_timeout,  time_between_eviction_runs_millis,  min_evictable_idle_time_millis,  connection_properties,  init_sql,  jdbc_interceptors,  validation_interval,  log_validation_errors,  datasource_svc_properties);
}


void OAIConfigmgrApiRequest::orgApacheSlingDatasourceJNDIDataSourceFactoryRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.datasource.JNDIDataSourceFactory";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingDatasourceJNDIDataSourceFactory, handler, &OAIConfigmgrApiHandler::orgApacheSlingDatasourceJNDIDataSourceFactory);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString datasource_name;   
    if(socket->queryString().keys().contains("datasource_name")){
        fromStringValue(socket->queryString().value("datasource_name"), datasource_name);
    }
    
    QString datasource_svc_prop_name;   
    if(socket->queryString().keys().contains("datasource_svc_prop_name")){
        fromStringValue(socket->queryString().value("datasource_svc_prop_name"), datasource_svc_prop_name);
    }
    
    QString datasource_jndi_name;   
    if(socket->queryString().keys().contains("datasource_jndi_name")){
        fromStringValue(socket->queryString().value("datasource_jndi_name"), datasource_jndi_name);
    }
    
    QList<QString> jndi_properties;   
    if(socket->queryString().keys().contains("jndi_properties")){
        fromStringValue(socket->queryString().values("jndi_properties"), jndi_properties);
    }
    


    emit orgApacheSlingDatasourceJNDIDataSourceFactory( post,  apply,  _delete,  action,  location,  propertylist,  datasource_name,  datasource_svc_prop_name,  datasource_jndi_name,  jndi_properties);
}


void OAIConfigmgrApiRequest::orgApacheSlingDiscoveryOakConfigRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.discovery.oak.Config";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingDiscoveryOakConfig, handler, &OAIConfigmgrApiHandler::orgApacheSlingDiscoveryOakConfig);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 connector_ping_timeout;   
    if(socket->queryString().keys().contains("connector_ping_timeout")){
        fromStringValue(socket->queryString().value("connector_ping_timeout"), connector_ping_timeout);
    }
    
    qint32 connector_ping_interval;   
    if(socket->queryString().keys().contains("connector_ping_interval")){
        fromStringValue(socket->queryString().value("connector_ping_interval"), connector_ping_interval);
    }
    
    qint32 discovery_lite_check_interval;   
    if(socket->queryString().keys().contains("discovery_lite_check_interval")){
        fromStringValue(socket->queryString().value("discovery_lite_check_interval"), discovery_lite_check_interval);
    }
    
    qint32 cluster_sync_service_timeout;   
    if(socket->queryString().keys().contains("cluster_sync_service_timeout")){
        fromStringValue(socket->queryString().value("cluster_sync_service_timeout"), cluster_sync_service_timeout);
    }
    
    qint32 cluster_sync_service_interval;   
    if(socket->queryString().keys().contains("cluster_sync_service_interval")){
        fromStringValue(socket->queryString().value("cluster_sync_service_interval"), cluster_sync_service_interval);
    }
    
    bool enable_sync_token;   
    if(socket->queryString().keys().contains("enable_sync_token")){
        fromStringValue(socket->queryString().value("enable_sync_token"), enable_sync_token);
    }
    
    qint32 min_event_delay;   
    if(socket->queryString().keys().contains("min_event_delay")){
        fromStringValue(socket->queryString().value("min_event_delay"), min_event_delay);
    }
    
    qint32 socket_connect_timeout;   
    if(socket->queryString().keys().contains("socket_connect_timeout")){
        fromStringValue(socket->queryString().value("socket_connect_timeout"), socket_connect_timeout);
    }
    
    qint32 so_timeout;   
    if(socket->queryString().keys().contains("so_timeout")){
        fromStringValue(socket->queryString().value("so_timeout"), so_timeout);
    }
    
    QList<QString> topology_connector_urls;   
    if(socket->queryString().keys().contains("topology_connector_urls")){
        fromStringValue(socket->queryString().values("topology_connector_urls"), topology_connector_urls);
    }
    
    QList<QString> topology_connector_whitelist;   
    if(socket->queryString().keys().contains("topology_connector_whitelist")){
        fromStringValue(socket->queryString().values("topology_connector_whitelist"), topology_connector_whitelist);
    }
    
    bool auto_stop_local_loop_enabled;   
    if(socket->queryString().keys().contains("auto_stop_local_loop_enabled")){
        fromStringValue(socket->queryString().value("auto_stop_local_loop_enabled"), auto_stop_local_loop_enabled);
    }
    
    bool gzip_connector_requests_enabled;   
    if(socket->queryString().keys().contains("gzip_connector_requests_enabled")){
        fromStringValue(socket->queryString().value("gzip_connector_requests_enabled"), gzip_connector_requests_enabled);
    }
    
    bool hmac_enabled;   
    if(socket->queryString().keys().contains("hmac_enabled")){
        fromStringValue(socket->queryString().value("hmac_enabled"), hmac_enabled);
    }
    
    bool enable_encryption;   
    if(socket->queryString().keys().contains("enable_encryption")){
        fromStringValue(socket->queryString().value("enable_encryption"), enable_encryption);
    }
    
    QString shared_key;   
    if(socket->queryString().keys().contains("shared_key")){
        fromStringValue(socket->queryString().value("shared_key"), shared_key);
    }
    
    qint32 hmac_shared_key_ttl;   
    if(socket->queryString().keys().contains("hmac_shared_key_ttl")){
        fromStringValue(socket->queryString().value("hmac_shared_key_ttl"), hmac_shared_key_ttl);
    }
    
    QString backoff_standby_factor;   
    if(socket->queryString().keys().contains("backoff_standby_factor")){
        fromStringValue(socket->queryString().value("backoff_standby_factor"), backoff_standby_factor);
    }
    
    QString backoff_stable_factor;   
    if(socket->queryString().keys().contains("backoff_stable_factor")){
        fromStringValue(socket->queryString().value("backoff_stable_factor"), backoff_stable_factor);
    }
    


    emit orgApacheSlingDiscoveryOakConfig( post,  apply,  _delete,  action,  location,  propertylist,  connector_ping_timeout,  connector_ping_interval,  discovery_lite_check_interval,  cluster_sync_service_timeout,  cluster_sync_service_interval,  enable_sync_token,  min_event_delay,  socket_connect_timeout,  so_timeout,  topology_connector_urls,  topology_connector_whitelist,  auto_stop_local_loop_enabled,  gzip_connector_requests_enabled,  hmac_enabled,  enable_encryption,  shared_key,  hmac_shared_key_ttl,  backoff_standby_factor,  backoff_stable_factor);
}


void OAIConfigmgrApiRequest::orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.discovery.oak.SynchronizedClocksHealthCheck";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck, handler, &OAIConfigmgrApiHandler::orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString hc_name;   
    if(socket->queryString().keys().contains("hc_name")){
        fromStringValue(socket->queryString().value("hc_name"), hc_name);
    }
    
    QList<QString> hc_tags;   
    if(socket->queryString().keys().contains("hc_tags")){
        fromStringValue(socket->queryString().values("hc_tags"), hc_tags);
    }
    
    QString hc_mbean_name;   
    if(socket->queryString().keys().contains("hc_mbean_name")){
        fromStringValue(socket->queryString().value("hc_mbean_name"), hc_mbean_name);
    }
    


    emit orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck( post,  apply,  _delete,  action,  location,  propertylist,  hc_name,  hc_tags,  hc_mbean_name);
}


void OAIConfigmgrApiRequest::orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.distribution.agent.impl.ForwardDistributionAgentFactory";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingDistributionAgentImplForwardDistributionAgentFacto, handler, &OAIConfigmgrApiHandler::orgApacheSlingDistributionAgentImplForwardDistributionAgentFacto);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString name;   
    if(socket->queryString().keys().contains("name")){
        fromStringValue(socket->queryString().value("name"), name);
    }
    
    QString title;   
    if(socket->queryString().keys().contains("title")){
        fromStringValue(socket->queryString().value("title"), title);
    }
    
    QString details;   
    if(socket->queryString().keys().contains("details")){
        fromStringValue(socket->queryString().value("details"), details);
    }
    
    bool enabled;   
    if(socket->queryString().keys().contains("enabled")){
        fromStringValue(socket->queryString().value("enabled"), enabled);
    }
    
    QString service_name;   
    if(socket->queryString().keys().contains("service_name")){
        fromStringValue(socket->queryString().value("service_name"), service_name);
    }
    
    QString log_level;   
    if(socket->queryString().keys().contains("log_level")){
        fromStringValue(socket->queryString().value("log_level"), log_level);
    }
    
    QList<QString> allowed_roots;   
    if(socket->queryString().keys().contains("allowed_roots")){
        fromStringValue(socket->queryString().values("allowed_roots"), allowed_roots);
    }
    
    bool queue_processing_enabled;   
    if(socket->queryString().keys().contains("queue_processing_enabled")){
        fromStringValue(socket->queryString().value("queue_processing_enabled"), queue_processing_enabled);
    }
    
    QList<QString> package_importer_endpoints;   
    if(socket->queryString().keys().contains("package_importer_endpoints")){
        fromStringValue(socket->queryString().values("package_importer_endpoints"), package_importer_endpoints);
    }
    
    QList<QString> passive_queues;   
    if(socket->queryString().keys().contains("passive_queues")){
        fromStringValue(socket->queryString().values("passive_queues"), passive_queues);
    }
    
    QList<QString> priority_queues;   
    if(socket->queryString().keys().contains("priority_queues")){
        fromStringValue(socket->queryString().values("priority_queues"), priority_queues);
    }
    
    QString retry_strategy;   
    if(socket->queryString().keys().contains("retry_strategy")){
        fromStringValue(socket->queryString().value("retry_strategy"), retry_strategy);
    }
    
    qint32 retry_attempts;   
    if(socket->queryString().keys().contains("retry_attempts")){
        fromStringValue(socket->queryString().value("retry_attempts"), retry_attempts);
    }
    
    QString request_authorization_strategy_target;   
    if(socket->queryString().keys().contains("request_authorization_strategy_target")){
        fromStringValue(socket->queryString().value("request_authorization_strategy_target"), request_authorization_strategy_target);
    }
    
    QString transport_secret_provider_target;   
    if(socket->queryString().keys().contains("transport_secret_provider_target")){
        fromStringValue(socket->queryString().value("transport_secret_provider_target"), transport_secret_provider_target);
    }
    
    QString package_builder_target;   
    if(socket->queryString().keys().contains("package_builder_target")){
        fromStringValue(socket->queryString().value("package_builder_target"), package_builder_target);
    }
    
    QString triggers_target;   
    if(socket->queryString().keys().contains("triggers_target")){
        fromStringValue(socket->queryString().value("triggers_target"), triggers_target);
    }
    
    QString queue_provider;   
    if(socket->queryString().keys().contains("queue_provider")){
        fromStringValue(socket->queryString().value("queue_provider"), queue_provider);
    }
    
    bool async_delivery;   
    if(socket->queryString().keys().contains("async_delivery")){
        fromStringValue(socket->queryString().value("async_delivery"), async_delivery);
    }
    
    qint32 http_conn_timeout;   
    if(socket->queryString().keys().contains("http_conn_timeout")){
        fromStringValue(socket->queryString().value("http_conn_timeout"), http_conn_timeout);
    }
    


    emit orgApacheSlingDistributionAgentImplForwardDistributionAgentFacto( post,  apply,  _delete,  action,  location,  propertylist,  name,  title,  details,  enabled,  service_name,  log_level,  allowed_roots,  queue_processing_enabled,  package_importer_endpoints,  passive_queues,  priority_queues,  retry_strategy,  retry_attempts,  request_authorization_strategy_target,  transport_secret_provider_target,  package_builder_target,  triggers_target,  queue_provider,  async_delivery,  http_conn_timeout);
}


void OAIConfigmgrApiRequest::orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestARequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.distribution.agent.impl.PrivilegeDistributionRequestAuthorizationStrategyFactory";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA, handler, &OAIConfigmgrApiHandler::orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString name;   
    if(socket->queryString().keys().contains("name")){
        fromStringValue(socket->queryString().value("name"), name);
    }
    
    QString jcr_privilege;   
    if(socket->queryString().keys().contains("jcr_privilege")){
        fromStringValue(socket->queryString().value("jcr_privilege"), jcr_privilege);
    }
    


    emit orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA( post,  apply,  _delete,  action,  location,  propertylist,  name,  jcr_privilege);
}


void OAIConfigmgrApiRequest::orgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.distribution.agent.impl.QueueDistributionAgentFactory";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingDistributionAgentImplQueueDistributionAgentFactory, handler, &OAIConfigmgrApiHandler::orgApacheSlingDistributionAgentImplQueueDistributionAgentFactory);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString name;   
    if(socket->queryString().keys().contains("name")){
        fromStringValue(socket->queryString().value("name"), name);
    }
    
    QString title;   
    if(socket->queryString().keys().contains("title")){
        fromStringValue(socket->queryString().value("title"), title);
    }
    
    QString details;   
    if(socket->queryString().keys().contains("details")){
        fromStringValue(socket->queryString().value("details"), details);
    }
    
    bool enabled;   
    if(socket->queryString().keys().contains("enabled")){
        fromStringValue(socket->queryString().value("enabled"), enabled);
    }
    
    QString service_name;   
    if(socket->queryString().keys().contains("service_name")){
        fromStringValue(socket->queryString().value("service_name"), service_name);
    }
    
    QString log_level;   
    if(socket->queryString().keys().contains("log_level")){
        fromStringValue(socket->queryString().value("log_level"), log_level);
    }
    
    QList<QString> allowed_roots;   
    if(socket->queryString().keys().contains("allowed_roots")){
        fromStringValue(socket->queryString().values("allowed_roots"), allowed_roots);
    }
    
    QString request_authorization_strategy_target;   
    if(socket->queryString().keys().contains("request_authorization_strategy_target")){
        fromStringValue(socket->queryString().value("request_authorization_strategy_target"), request_authorization_strategy_target);
    }
    
    QString queue_provider_factory_target;   
    if(socket->queryString().keys().contains("queue_provider_factory_target")){
        fromStringValue(socket->queryString().value("queue_provider_factory_target"), queue_provider_factory_target);
    }
    
    QString package_builder_target;   
    if(socket->queryString().keys().contains("package_builder_target")){
        fromStringValue(socket->queryString().value("package_builder_target"), package_builder_target);
    }
    
    QString triggers_target;   
    if(socket->queryString().keys().contains("triggers_target")){
        fromStringValue(socket->queryString().value("triggers_target"), triggers_target);
    }
    
    QList<QString> priority_queues;   
    if(socket->queryString().keys().contains("priority_queues")){
        fromStringValue(socket->queryString().values("priority_queues"), priority_queues);
    }
    


    emit orgApacheSlingDistributionAgentImplQueueDistributionAgentFactory( post,  apply,  _delete,  action,  location,  propertylist,  name,  title,  details,  enabled,  service_name,  log_level,  allowed_roots,  request_authorization_strategy_target,  queue_provider_factory_target,  package_builder_target,  triggers_target,  priority_queues);
}


void OAIConfigmgrApiRequest::orgApacheSlingDistributionAgentImplReverseDistributionAgentFactoRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.distribution.agent.impl.ReverseDistributionAgentFactory";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingDistributionAgentImplReverseDistributionAgentFacto, handler, &OAIConfigmgrApiHandler::orgApacheSlingDistributionAgentImplReverseDistributionAgentFacto);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString name;   
    if(socket->queryString().keys().contains("name")){
        fromStringValue(socket->queryString().value("name"), name);
    }
    
    QString title;   
    if(socket->queryString().keys().contains("title")){
        fromStringValue(socket->queryString().value("title"), title);
    }
    
    QString details;   
    if(socket->queryString().keys().contains("details")){
        fromStringValue(socket->queryString().value("details"), details);
    }
    
    bool enabled;   
    if(socket->queryString().keys().contains("enabled")){
        fromStringValue(socket->queryString().value("enabled"), enabled);
    }
    
    QString service_name;   
    if(socket->queryString().keys().contains("service_name")){
        fromStringValue(socket->queryString().value("service_name"), service_name);
    }
    
    QString log_level;   
    if(socket->queryString().keys().contains("log_level")){
        fromStringValue(socket->queryString().value("log_level"), log_level);
    }
    
    bool queue_processing_enabled;   
    if(socket->queryString().keys().contains("queue_processing_enabled")){
        fromStringValue(socket->queryString().value("queue_processing_enabled"), queue_processing_enabled);
    }
    
    QList<QString> package_exporter_endpoints;   
    if(socket->queryString().keys().contains("package_exporter_endpoints")){
        fromStringValue(socket->queryString().values("package_exporter_endpoints"), package_exporter_endpoints);
    }
    
    qint32 pull_items;   
    if(socket->queryString().keys().contains("pull_items")){
        fromStringValue(socket->queryString().value("pull_items"), pull_items);
    }
    
    qint32 http_conn_timeout;   
    if(socket->queryString().keys().contains("http_conn_timeout")){
        fromStringValue(socket->queryString().value("http_conn_timeout"), http_conn_timeout);
    }
    
    QString request_authorization_strategy_target;   
    if(socket->queryString().keys().contains("request_authorization_strategy_target")){
        fromStringValue(socket->queryString().value("request_authorization_strategy_target"), request_authorization_strategy_target);
    }
    
    QString transport_secret_provider_target;   
    if(socket->queryString().keys().contains("transport_secret_provider_target")){
        fromStringValue(socket->queryString().value("transport_secret_provider_target"), transport_secret_provider_target);
    }
    
    QString package_builder_target;   
    if(socket->queryString().keys().contains("package_builder_target")){
        fromStringValue(socket->queryString().value("package_builder_target"), package_builder_target);
    }
    
    QString triggers_target;   
    if(socket->queryString().keys().contains("triggers_target")){
        fromStringValue(socket->queryString().value("triggers_target"), triggers_target);
    }
    


    emit orgApacheSlingDistributionAgentImplReverseDistributionAgentFacto( post,  apply,  _delete,  action,  location,  propertylist,  name,  title,  details,  enabled,  service_name,  log_level,  queue_processing_enabled,  package_exporter_endpoints,  pull_items,  http_conn_timeout,  request_authorization_strategy_target,  transport_secret_provider_target,  package_builder_target,  triggers_target);
}


void OAIConfigmgrApiRequest::orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.distribution.agent.impl.SimpleDistributionAgentFactory";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor, handler, &OAIConfigmgrApiHandler::orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString name;   
    if(socket->queryString().keys().contains("name")){
        fromStringValue(socket->queryString().value("name"), name);
    }
    
    QString title;   
    if(socket->queryString().keys().contains("title")){
        fromStringValue(socket->queryString().value("title"), title);
    }
    
    QString details;   
    if(socket->queryString().keys().contains("details")){
        fromStringValue(socket->queryString().value("details"), details);
    }
    
    bool enabled;   
    if(socket->queryString().keys().contains("enabled")){
        fromStringValue(socket->queryString().value("enabled"), enabled);
    }
    
    QString service_name;   
    if(socket->queryString().keys().contains("service_name")){
        fromStringValue(socket->queryString().value("service_name"), service_name);
    }
    
    QString log_level;   
    if(socket->queryString().keys().contains("log_level")){
        fromStringValue(socket->queryString().value("log_level"), log_level);
    }
    
    bool queue_processing_enabled;   
    if(socket->queryString().keys().contains("queue_processing_enabled")){
        fromStringValue(socket->queryString().value("queue_processing_enabled"), queue_processing_enabled);
    }
    
    QString package_exporter_target;   
    if(socket->queryString().keys().contains("package_exporter_target")){
        fromStringValue(socket->queryString().value("package_exporter_target"), package_exporter_target);
    }
    
    QString package_importer_target;   
    if(socket->queryString().keys().contains("package_importer_target")){
        fromStringValue(socket->queryString().value("package_importer_target"), package_importer_target);
    }
    
    QString request_authorization_strategy_target;   
    if(socket->queryString().keys().contains("request_authorization_strategy_target")){
        fromStringValue(socket->queryString().value("request_authorization_strategy_target"), request_authorization_strategy_target);
    }
    
    QString triggers_target;   
    if(socket->queryString().keys().contains("triggers_target")){
        fromStringValue(socket->queryString().value("triggers_target"), triggers_target);
    }
    


    emit orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor( post,  apply,  _delete,  action,  location,  propertylist,  name,  title,  details,  enabled,  service_name,  log_level,  queue_processing_enabled,  package_exporter_target,  package_importer_target,  request_authorization_strategy_target,  triggers_target);
}


void OAIConfigmgrApiRequest::orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.distribution.agent.impl.SyncDistributionAgentFactory";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingDistributionAgentImplSyncDistributionAgentFactory, handler, &OAIConfigmgrApiHandler::orgApacheSlingDistributionAgentImplSyncDistributionAgentFactory);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString name;   
    if(socket->queryString().keys().contains("name")){
        fromStringValue(socket->queryString().value("name"), name);
    }
    
    QString title;   
    if(socket->queryString().keys().contains("title")){
        fromStringValue(socket->queryString().value("title"), title);
    }
    
    QString details;   
    if(socket->queryString().keys().contains("details")){
        fromStringValue(socket->queryString().value("details"), details);
    }
    
    bool enabled;   
    if(socket->queryString().keys().contains("enabled")){
        fromStringValue(socket->queryString().value("enabled"), enabled);
    }
    
    QString service_name;   
    if(socket->queryString().keys().contains("service_name")){
        fromStringValue(socket->queryString().value("service_name"), service_name);
    }
    
    QString log_level;   
    if(socket->queryString().keys().contains("log_level")){
        fromStringValue(socket->queryString().value("log_level"), log_level);
    }
    
    bool queue_processing_enabled;   
    if(socket->queryString().keys().contains("queue_processing_enabled")){
        fromStringValue(socket->queryString().value("queue_processing_enabled"), queue_processing_enabled);
    }
    
    QList<QString> passive_queues;   
    if(socket->queryString().keys().contains("passive_queues")){
        fromStringValue(socket->queryString().values("passive_queues"), passive_queues);
    }
    
    QList<QString> package_exporter_endpoints;   
    if(socket->queryString().keys().contains("package_exporter_endpoints")){
        fromStringValue(socket->queryString().values("package_exporter_endpoints"), package_exporter_endpoints);
    }
    
    QList<QString> package_importer_endpoints;   
    if(socket->queryString().keys().contains("package_importer_endpoints")){
        fromStringValue(socket->queryString().values("package_importer_endpoints"), package_importer_endpoints);
    }
    
    QString retry_strategy;   
    if(socket->queryString().keys().contains("retry_strategy")){
        fromStringValue(socket->queryString().value("retry_strategy"), retry_strategy);
    }
    
    qint32 retry_attempts;   
    if(socket->queryString().keys().contains("retry_attempts")){
        fromStringValue(socket->queryString().value("retry_attempts"), retry_attempts);
    }
    
    qint32 pull_items;   
    if(socket->queryString().keys().contains("pull_items")){
        fromStringValue(socket->queryString().value("pull_items"), pull_items);
    }
    
    qint32 http_conn_timeout;   
    if(socket->queryString().keys().contains("http_conn_timeout")){
        fromStringValue(socket->queryString().value("http_conn_timeout"), http_conn_timeout);
    }
    
    QString request_authorization_strategy_target;   
    if(socket->queryString().keys().contains("request_authorization_strategy_target")){
        fromStringValue(socket->queryString().value("request_authorization_strategy_target"), request_authorization_strategy_target);
    }
    
    QString transport_secret_provider_target;   
    if(socket->queryString().keys().contains("transport_secret_provider_target")){
        fromStringValue(socket->queryString().value("transport_secret_provider_target"), transport_secret_provider_target);
    }
    
    QString package_builder_target;   
    if(socket->queryString().keys().contains("package_builder_target")){
        fromStringValue(socket->queryString().value("package_builder_target"), package_builder_target);
    }
    
    QString triggers_target;   
    if(socket->queryString().keys().contains("triggers_target")){
        fromStringValue(socket->queryString().value("triggers_target"), triggers_target);
    }
    


    emit orgApacheSlingDistributionAgentImplSyncDistributionAgentFactory( post,  apply,  _delete,  action,  location,  propertylist,  name,  title,  details,  enabled,  service_name,  log_level,  queue_processing_enabled,  passive_queues,  package_exporter_endpoints,  package_importer_endpoints,  retry_strategy,  retry_attempts,  pull_items,  http_conn_timeout,  request_authorization_strategy_target,  transport_secret_provider_target,  package_builder_target,  triggers_target);
}


void OAIConfigmgrApiRequest::orgApacheSlingDistributionMonitorDistributionQueueHealthCheckRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.distribution.monitor.DistributionQueueHealthCheck";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingDistributionMonitorDistributionQueueHealthCheck, handler, &OAIConfigmgrApiHandler::orgApacheSlingDistributionMonitorDistributionQueueHealthCheck);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString hc_name;   
    if(socket->queryString().keys().contains("hc_name")){
        fromStringValue(socket->queryString().value("hc_name"), hc_name);
    }
    
    QList<QString> hc_tags;   
    if(socket->queryString().keys().contains("hc_tags")){
        fromStringValue(socket->queryString().values("hc_tags"), hc_tags);
    }
    
    QString hc_mbean_name;   
    if(socket->queryString().keys().contains("hc_mbean_name")){
        fromStringValue(socket->queryString().value("hc_mbean_name"), hc_mbean_name);
    }
    
    qint32 number_of_retries_allowed;   
    if(socket->queryString().keys().contains("number_of_retries_allowed")){
        fromStringValue(socket->queryString().value("number_of_retries_allowed"), number_of_retries_allowed);
    }
    


    emit orgApacheSlingDistributionMonitorDistributionQueueHealthCheck( post,  apply,  _delete,  action,  location,  propertylist,  hc_name,  hc_tags,  hc_mbean_name,  number_of_retries_allowed);
}


void OAIConfigmgrApiRequest::orgApacheSlingDistributionPackagingImplExporterAgentDistributioRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.AgentDistributionPackageExporterFactory";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingDistributionPackagingImplExporterAgentDistributio, handler, &OAIConfigmgrApiHandler::orgApacheSlingDistributionPackagingImplExporterAgentDistributio);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString name;   
    if(socket->queryString().keys().contains("name")){
        fromStringValue(socket->queryString().value("name"), name);
    }
    
    QString queue;   
    if(socket->queryString().keys().contains("queue")){
        fromStringValue(socket->queryString().value("queue"), queue);
    }
    
    bool drop_invalid_items;   
    if(socket->queryString().keys().contains("drop_invalid_items")){
        fromStringValue(socket->queryString().value("drop_invalid_items"), drop_invalid_items);
    }
    
    QString agent_target;   
    if(socket->queryString().keys().contains("agent_target")){
        fromStringValue(socket->queryString().value("agent_target"), agent_target);
    }
    


    emit orgApacheSlingDistributionPackagingImplExporterAgentDistributio( post,  apply,  _delete,  action,  location,  propertylist,  name,  queue,  drop_invalid_items,  agent_target);
}


void OAIConfigmgrApiRequest::orgApacheSlingDistributionPackagingImplExporterLocalDistributioRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.LocalDistributionPackageExporterFactory";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingDistributionPackagingImplExporterLocalDistributio, handler, &OAIConfigmgrApiHandler::orgApacheSlingDistributionPackagingImplExporterLocalDistributio);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString name;   
    if(socket->queryString().keys().contains("name")){
        fromStringValue(socket->queryString().value("name"), name);
    }
    
    QString package_builder_target;   
    if(socket->queryString().keys().contains("package_builder_target")){
        fromStringValue(socket->queryString().value("package_builder_target"), package_builder_target);
    }
    


    emit orgApacheSlingDistributionPackagingImplExporterLocalDistributio( post,  apply,  _delete,  action,  location,  propertylist,  name,  package_builder_target);
}


void OAIConfigmgrApiRequest::orgApacheSlingDistributionPackagingImplExporterRemoteDistributiRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.RemoteDistributionPackageExporterFactory";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingDistributionPackagingImplExporterRemoteDistributi, handler, &OAIConfigmgrApiHandler::orgApacheSlingDistributionPackagingImplExporterRemoteDistributi);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString name;   
    if(socket->queryString().keys().contains("name")){
        fromStringValue(socket->queryString().value("name"), name);
    }
    
    QList<QString> endpoints;   
    if(socket->queryString().keys().contains("endpoints")){
        fromStringValue(socket->queryString().values("endpoints"), endpoints);
    }
    
    qint32 pull_items;   
    if(socket->queryString().keys().contains("pull_items")){
        fromStringValue(socket->queryString().value("pull_items"), pull_items);
    }
    
    QString package_builder_target;   
    if(socket->queryString().keys().contains("package_builder_target")){
        fromStringValue(socket->queryString().value("package_builder_target"), package_builder_target);
    }
    
    QString transport_secret_provider_target;   
    if(socket->queryString().keys().contains("transport_secret_provider_target")){
        fromStringValue(socket->queryString().value("transport_secret_provider_target"), transport_secret_provider_target);
    }
    


    emit orgApacheSlingDistributionPackagingImplExporterRemoteDistributi( post,  apply,  _delete,  action,  location,  propertylist,  name,  endpoints,  pull_items,  package_builder_target,  transport_secret_provider_target);
}


void OAIConfigmgrApiRequest::orgApacheSlingDistributionPackagingImplImporterLocalDistributioRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.LocalDistributionPackageImporterFactory";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingDistributionPackagingImplImporterLocalDistributio, handler, &OAIConfigmgrApiHandler::orgApacheSlingDistributionPackagingImplImporterLocalDistributio);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString name;   
    if(socket->queryString().keys().contains("name")){
        fromStringValue(socket->queryString().value("name"), name);
    }
    
    QString package_builder_target;   
    if(socket->queryString().keys().contains("package_builder_target")){
        fromStringValue(socket->queryString().value("package_builder_target"), package_builder_target);
    }
    


    emit orgApacheSlingDistributionPackagingImplImporterLocalDistributio( post,  apply,  _delete,  action,  location,  propertylist,  name,  package_builder_target);
}


void OAIConfigmgrApiRequest::orgApacheSlingDistributionPackagingImplImporterRemoteDistributiRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RemoteDistributionPackageImporterFactory";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingDistributionPackagingImplImporterRemoteDistributi, handler, &OAIConfigmgrApiHandler::orgApacheSlingDistributionPackagingImplImporterRemoteDistributi);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString name;   
    if(socket->queryString().keys().contains("name")){
        fromStringValue(socket->queryString().value("name"), name);
    }
    
    QList<QString> endpoints;   
    if(socket->queryString().keys().contains("endpoints")){
        fromStringValue(socket->queryString().values("endpoints"), endpoints);
    }
    
    QString transport_secret_provider_target;   
    if(socket->queryString().keys().contains("transport_secret_provider_target")){
        fromStringValue(socket->queryString().value("transport_secret_provider_target"), transport_secret_provider_target);
    }
    


    emit orgApacheSlingDistributionPackagingImplImporterRemoteDistributi( post,  apply,  _delete,  action,  location,  propertylist,  name,  endpoints,  transport_secret_provider_target);
}


void OAIConfigmgrApiRequest::orgApacheSlingDistributionPackagingImplImporterRepositoryDistriRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RepositoryDistributionPackageImporterFactory";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingDistributionPackagingImplImporterRepositoryDistri, handler, &OAIConfigmgrApiHandler::orgApacheSlingDistributionPackagingImplImporterRepositoryDistri);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString name;   
    if(socket->queryString().keys().contains("name")){
        fromStringValue(socket->queryString().value("name"), name);
    }
    
    QString service_name;   
    if(socket->queryString().keys().contains("service_name")){
        fromStringValue(socket->queryString().value("service_name"), service_name);
    }
    
    QString path;   
    if(socket->queryString().keys().contains("path")){
        fromStringValue(socket->queryString().value("path"), path);
    }
    
    QString privilege_name;   
    if(socket->queryString().keys().contains("privilege_name")){
        fromStringValue(socket->queryString().value("privilege_name"), privilege_name);
    }
    


    emit orgApacheSlingDistributionPackagingImplImporterRepositoryDistri( post,  apply,  _delete,  action,  location,  propertylist,  name,  service_name,  path,  privilege_name);
}


void OAIConfigmgrApiRequest::orgApacheSlingDistributionResourcesImplDistributionConfigurationRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionConfigurationResourceProviderFactory";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingDistributionResourcesImplDistributionConfiguration, handler, &OAIConfigmgrApiHandler::orgApacheSlingDistributionResourcesImplDistributionConfiguration);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString provider_roots;   
    if(socket->queryString().keys().contains("provider_roots")){
        fromStringValue(socket->queryString().value("provider_roots"), provider_roots);
    }
    
    QString kind;   
    if(socket->queryString().keys().contains("kind")){
        fromStringValue(socket->queryString().value("kind"), kind);
    }
    


    emit orgApacheSlingDistributionResourcesImplDistributionConfiguration( post,  apply,  _delete,  action,  location,  propertylist,  provider_roots,  kind);
}


void OAIConfigmgrApiRequest::orgApacheSlingDistributionResourcesImplDistributionServiceResourRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionServiceResourceProviderFactory";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingDistributionResourcesImplDistributionServiceResour, handler, &OAIConfigmgrApiHandler::orgApacheSlingDistributionResourcesImplDistributionServiceResour);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString provider_roots;   
    if(socket->queryString().keys().contains("provider_roots")){
        fromStringValue(socket->queryString().value("provider_roots"), provider_roots);
    }
    
    QString kind;   
    if(socket->queryString().keys().contains("kind")){
        fromStringValue(socket->queryString().value("kind"), kind);
    }
    


    emit orgApacheSlingDistributionResourcesImplDistributionServiceResour( post,  apply,  _delete,  action,  location,  propertylist,  provider_roots,  kind);
}


void OAIConfigmgrApiRequest::orgApacheSlingDistributionSerializationImplDistributionPackageBuRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.distribution.serialization.impl.DistributionPackageBuilderFactory";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingDistributionSerializationImplDistributionPackageBu, handler, &OAIConfigmgrApiHandler::orgApacheSlingDistributionSerializationImplDistributionPackageBu);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString name;   
    if(socket->queryString().keys().contains("name")){
        fromStringValue(socket->queryString().value("name"), name);
    }
    
    QString type;   
    if(socket->queryString().keys().contains("type")){
        fromStringValue(socket->queryString().value("type"), type);
    }
    
    QString format_target;   
    if(socket->queryString().keys().contains("format_target")){
        fromStringValue(socket->queryString().value("format_target"), format_target);
    }
    
    QString temp_fs_folder;   
    if(socket->queryString().keys().contains("temp_fs_folder")){
        fromStringValue(socket->queryString().value("temp_fs_folder"), temp_fs_folder);
    }
    
    qint32 file_threshold;   
    if(socket->queryString().keys().contains("file_threshold")){
        fromStringValue(socket->queryString().value("file_threshold"), file_threshold);
    }
    
    QString memory_unit;   
    if(socket->queryString().keys().contains("memory_unit")){
        fromStringValue(socket->queryString().value("memory_unit"), memory_unit);
    }
    
    bool use_off_heap_memory;   
    if(socket->queryString().keys().contains("use_off_heap_memory")){
        fromStringValue(socket->queryString().value("use_off_heap_memory"), use_off_heap_memory);
    }
    
    QString digest_algorithm;   
    if(socket->queryString().keys().contains("digest_algorithm")){
        fromStringValue(socket->queryString().value("digest_algorithm"), digest_algorithm);
    }
    
    qint32 monitoring_queue_size;   
    if(socket->queryString().keys().contains("monitoring_queue_size")){
        fromStringValue(socket->queryString().value("monitoring_queue_size"), monitoring_queue_size);
    }
    
    qint32 cleanup_delay;   
    if(socket->queryString().keys().contains("cleanup_delay")){
        fromStringValue(socket->queryString().value("cleanup_delay"), cleanup_delay);
    }
    
    QList<QString> package_filters;   
    if(socket->queryString().keys().contains("package_filters")){
        fromStringValue(socket->queryString().values("package_filters"), package_filters);
    }
    
    QList<QString> property_filters;   
    if(socket->queryString().keys().contains("property_filters")){
        fromStringValue(socket->queryString().values("property_filters"), property_filters);
    }
    


    emit orgApacheSlingDistributionSerializationImplDistributionPackageBu( post,  apply,  _delete,  action,  location,  propertylist,  name,  type,  format_target,  temp_fs_folder,  file_threshold,  memory_unit,  use_off_heap_memory,  digest_algorithm,  monitoring_queue_size,  cleanup_delay,  package_filters,  property_filters);
}


void OAIConfigmgrApiRequest::orgApacheSlingDistributionSerializationImplVltVaultDistributionRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.distribution.serialization.impl.vlt.VaultDistributionPackageBuilderFactory";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingDistributionSerializationImplVltVaultDistribution, handler, &OAIConfigmgrApiHandler::orgApacheSlingDistributionSerializationImplVltVaultDistribution);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString name;   
    if(socket->queryString().keys().contains("name")){
        fromStringValue(socket->queryString().value("name"), name);
    }
    
    QString type;   
    if(socket->queryString().keys().contains("type")){
        fromStringValue(socket->queryString().value("type"), type);
    }
    
    QString import_mode;   
    if(socket->queryString().keys().contains("import_mode")){
        fromStringValue(socket->queryString().value("import_mode"), import_mode);
    }
    
    QString acl_handling;   
    if(socket->queryString().keys().contains("acl_handling")){
        fromStringValue(socket->queryString().value("acl_handling"), acl_handling);
    }
    
    QString package_roots;   
    if(socket->queryString().keys().contains("package_roots")){
        fromStringValue(socket->queryString().value("package_roots"), package_roots);
    }
    
    QList<QString> package_filters;   
    if(socket->queryString().keys().contains("package_filters")){
        fromStringValue(socket->queryString().values("package_filters"), package_filters);
    }
    
    QList<QString> property_filters;   
    if(socket->queryString().keys().contains("property_filters")){
        fromStringValue(socket->queryString().values("property_filters"), property_filters);
    }
    
    QString temp_fs_folder;   
    if(socket->queryString().keys().contains("temp_fs_folder")){
        fromStringValue(socket->queryString().value("temp_fs_folder"), temp_fs_folder);
    }
    
    bool use_binary_references;   
    if(socket->queryString().keys().contains("use_binary_references")){
        fromStringValue(socket->queryString().value("use_binary_references"), use_binary_references);
    }
    
    qint32 auto_save_threshold;   
    if(socket->queryString().keys().contains("auto_save_threshold")){
        fromStringValue(socket->queryString().value("auto_save_threshold"), auto_save_threshold);
    }
    
    qint32 cleanup_delay;   
    if(socket->queryString().keys().contains("cleanup_delay")){
        fromStringValue(socket->queryString().value("cleanup_delay"), cleanup_delay);
    }
    
    qint32 file_threshold;   
    if(socket->queryString().keys().contains("file_threshold")){
        fromStringValue(socket->queryString().value("file_threshold"), file_threshold);
    }
    
    QString mega_bytes;   
    if(socket->queryString().keys().contains("mega_bytes")){
        fromStringValue(socket->queryString().value("mega_bytes"), mega_bytes);
    }
    
    bool use_off_heap_memory;   
    if(socket->queryString().keys().contains("use_off_heap_memory")){
        fromStringValue(socket->queryString().value("use_off_heap_memory"), use_off_heap_memory);
    }
    
    QString digest_algorithm;   
    if(socket->queryString().keys().contains("digest_algorithm")){
        fromStringValue(socket->queryString().value("digest_algorithm"), digest_algorithm);
    }
    
    qint32 monitoring_queue_size;   
    if(socket->queryString().keys().contains("monitoring_queue_size")){
        fromStringValue(socket->queryString().value("monitoring_queue_size"), monitoring_queue_size);
    }
    
    QList<QString> paths_mapping;   
    if(socket->queryString().keys().contains("paths_mapping")){
        fromStringValue(socket->queryString().values("paths_mapping"), paths_mapping);
    }
    
    bool strict_import;   
    if(socket->queryString().keys().contains("strict_import")){
        fromStringValue(socket->queryString().value("strict_import"), strict_import);
    }
    


    emit orgApacheSlingDistributionSerializationImplVltVaultDistribution( post,  apply,  _delete,  action,  location,  propertylist,  name,  type,  import_mode,  acl_handling,  package_roots,  package_filters,  property_filters,  temp_fs_folder,  use_binary_references,  auto_save_threshold,  cleanup_delay,  file_threshold,  mega_bytes,  use_off_heap_memory,  digest_algorithm,  monitoring_queue_size,  paths_mapping,  strict_import);
}


void OAIConfigmgrApiRequest::orgApacheSlingDistributionTransportImplUserCredentialsDistributiRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.distribution.transport.impl.UserCredentialsDistributionTransportSecretProvider";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingDistributionTransportImplUserCredentialsDistributi, handler, &OAIConfigmgrApiHandler::orgApacheSlingDistributionTransportImplUserCredentialsDistributi);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString name;   
    if(socket->queryString().keys().contains("name")){
        fromStringValue(socket->queryString().value("name"), name);
    }
    
    QString username;   
    if(socket->queryString().keys().contains("username")){
        fromStringValue(socket->queryString().value("username"), username);
    }
    
    QString password;   
    if(socket->queryString().keys().contains("password")){
        fromStringValue(socket->queryString().value("password"), password);
    }
    


    emit orgApacheSlingDistributionTransportImplUserCredentialsDistributi( post,  apply,  _delete,  action,  location,  propertylist,  name,  username,  password);
}


void OAIConfigmgrApiRequest::orgApacheSlingDistributionTriggerImplDistributionEventDistributeRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.distribution.trigger.impl.DistributionEventDistributeDistributionTriggerFactory";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingDistributionTriggerImplDistributionEventDistribute, handler, &OAIConfigmgrApiHandler::orgApacheSlingDistributionTriggerImplDistributionEventDistribute);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString name;   
    if(socket->queryString().keys().contains("name")){
        fromStringValue(socket->queryString().value("name"), name);
    }
    
    QString path;   
    if(socket->queryString().keys().contains("path")){
        fromStringValue(socket->queryString().value("path"), path);
    }
    


    emit orgApacheSlingDistributionTriggerImplDistributionEventDistribute( post,  apply,  _delete,  action,  location,  propertylist,  name,  path);
}


void OAIConfigmgrApiRequest::orgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.distribution.trigger.impl.JcrEventDistributionTriggerFactory";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger, handler, &OAIConfigmgrApiHandler::orgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString name;   
    if(socket->queryString().keys().contains("name")){
        fromStringValue(socket->queryString().value("name"), name);
    }
    
    QString path;   
    if(socket->queryString().keys().contains("path")){
        fromStringValue(socket->queryString().value("path"), path);
    }
    
    QList<QString> ignored_paths_patterns;   
    if(socket->queryString().keys().contains("ignored_paths_patterns")){
        fromStringValue(socket->queryString().values("ignored_paths_patterns"), ignored_paths_patterns);
    }
    
    QString service_name;   
    if(socket->queryString().keys().contains("service_name")){
        fromStringValue(socket->queryString().value("service_name"), service_name);
    }
    
    bool deep;   
    if(socket->queryString().keys().contains("deep")){
        fromStringValue(socket->queryString().value("deep"), deep);
    }
    


    emit orgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger( post,  apply,  _delete,  action,  location,  propertylist,  name,  path,  ignored_paths_patterns,  service_name,  deep);
}


void OAIConfigmgrApiRequest::orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.distribution.trigger.impl.PersistedJcrEventDistributionTriggerFactory";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi, handler, &OAIConfigmgrApiHandler::orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString name;   
    if(socket->queryString().keys().contains("name")){
        fromStringValue(socket->queryString().value("name"), name);
    }
    
    QString path;   
    if(socket->queryString().keys().contains("path")){
        fromStringValue(socket->queryString().value("path"), path);
    }
    
    QString service_name;   
    if(socket->queryString().keys().contains("service_name")){
        fromStringValue(socket->queryString().value("service_name"), service_name);
    }
    
    QString nuggets_path;   
    if(socket->queryString().keys().contains("nuggets_path")){
        fromStringValue(socket->queryString().value("nuggets_path"), nuggets_path);
    }
    


    emit orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi( post,  apply,  _delete,  action,  location,  propertylist,  name,  path,  service_name,  nuggets_path);
}


void OAIConfigmgrApiRequest::orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.distribution.trigger.impl.RemoteEventDistributionTriggerFactory";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig, handler, &OAIConfigmgrApiHandler::orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString name;   
    if(socket->queryString().keys().contains("name")){
        fromStringValue(socket->queryString().value("name"), name);
    }
    
    QString endpoint;   
    if(socket->queryString().keys().contains("endpoint")){
        fromStringValue(socket->queryString().value("endpoint"), endpoint);
    }
    
    QString transport_secret_provider_target;   
    if(socket->queryString().keys().contains("transport_secret_provider_target")){
        fromStringValue(socket->queryString().value("transport_secret_provider_target"), transport_secret_provider_target);
    }
    


    emit orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig( post,  apply,  _delete,  action,  location,  propertylist,  name,  endpoint,  transport_secret_provider_target);
}


void OAIConfigmgrApiRequest::orgApacheSlingDistributionTriggerImplResourceEventDistributionTrRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.distribution.trigger.impl.ResourceEventDistributionTriggerFactory";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingDistributionTriggerImplResourceEventDistributionTr, handler, &OAIConfigmgrApiHandler::orgApacheSlingDistributionTriggerImplResourceEventDistributionTr);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString name;   
    if(socket->queryString().keys().contains("name")){
        fromStringValue(socket->queryString().value("name"), name);
    }
    
    QString path;   
    if(socket->queryString().keys().contains("path")){
        fromStringValue(socket->queryString().value("path"), path);
    }
    


    emit orgApacheSlingDistributionTriggerImplResourceEventDistributionTr( post,  apply,  _delete,  action,  location,  propertylist,  name,  path);
}


void OAIConfigmgrApiRequest::orgApacheSlingDistributionTriggerImplScheduledDistributionTriggeRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.distribution.trigger.impl.ScheduledDistributionTriggerFactory";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingDistributionTriggerImplScheduledDistributionTrigge, handler, &OAIConfigmgrApiHandler::orgApacheSlingDistributionTriggerImplScheduledDistributionTrigge);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString name;   
    if(socket->queryString().keys().contains("name")){
        fromStringValue(socket->queryString().value("name"), name);
    }
    
    QString path;   
    if(socket->queryString().keys().contains("path")){
        fromStringValue(socket->queryString().value("path"), path);
    }
    
    QString seconds;   
    if(socket->queryString().keys().contains("seconds")){
        fromStringValue(socket->queryString().value("seconds"), seconds);
    }
    
    QString service_name;   
    if(socket->queryString().keys().contains("service_name")){
        fromStringValue(socket->queryString().value("service_name"), service_name);
    }
    


    emit orgApacheSlingDistributionTriggerImplScheduledDistributionTrigge( post,  apply,  _delete,  action,  location,  propertylist,  name,  path,  seconds,  service_name);
}


void OAIConfigmgrApiRequest::orgApacheSlingEngineImplAuthSlingAuthenticatorRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.engine.impl.auth.SlingAuthenticator";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingEngineImplAuthSlingAuthenticator, handler, &OAIConfigmgrApiHandler::orgApacheSlingEngineImplAuthSlingAuthenticator);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString osgi_http_whiteboard_context_select;   
    if(socket->queryString().keys().contains("osgi_http_whiteboard_context_select")){
        fromStringValue(socket->queryString().value("osgi_http_whiteboard_context_select"), osgi_http_whiteboard_context_select);
    }
    
    QString osgi_http_whiteboard_listener;   
    if(socket->queryString().keys().contains("osgi_http_whiteboard_listener")){
        fromStringValue(socket->queryString().value("osgi_http_whiteboard_listener"), osgi_http_whiteboard_listener);
    }
    
    QString auth_sudo_cookie;   
    if(socket->queryString().keys().contains("auth_sudo_cookie")){
        fromStringValue(socket->queryString().value("auth_sudo_cookie"), auth_sudo_cookie);
    }
    
    QString auth_sudo_parameter;   
    if(socket->queryString().keys().contains("auth_sudo_parameter")){
        fromStringValue(socket->queryString().value("auth_sudo_parameter"), auth_sudo_parameter);
    }
    
    bool auth_annonymous;   
    if(socket->queryString().keys().contains("auth_annonymous")){
        fromStringValue(socket->queryString().value("auth_annonymous"), auth_annonymous);
    }
    
    QList<QString> sling_auth_requirements;   
    if(socket->queryString().keys().contains("sling_auth_requirements")){
        fromStringValue(socket->queryString().values("sling_auth_requirements"), sling_auth_requirements);
    }
    
    QString sling_auth_anonymous_user;   
    if(socket->queryString().keys().contains("sling_auth_anonymous_user")){
        fromStringValue(socket->queryString().value("sling_auth_anonymous_user"), sling_auth_anonymous_user);
    }
    
    QString sling_auth_anonymous_password;   
    if(socket->queryString().keys().contains("sling_auth_anonymous_password")){
        fromStringValue(socket->queryString().value("sling_auth_anonymous_password"), sling_auth_anonymous_password);
    }
    
    QString auth_http;   
    if(socket->queryString().keys().contains("auth_http")){
        fromStringValue(socket->queryString().value("auth_http"), auth_http);
    }
    
    QString auth_http_realm;   
    if(socket->queryString().keys().contains("auth_http_realm")){
        fromStringValue(socket->queryString().value("auth_http_realm"), auth_http_realm);
    }
    
    QList<QString> auth_uri_suffix;   
    if(socket->queryString().keys().contains("auth_uri_suffix")){
        fromStringValue(socket->queryString().values("auth_uri_suffix"), auth_uri_suffix);
    }
    


    emit orgApacheSlingEngineImplAuthSlingAuthenticator( post,  apply,  _delete,  action,  location,  propertylist,  osgi_http_whiteboard_context_select,  osgi_http_whiteboard_listener,  auth_sudo_cookie,  auth_sudo_parameter,  auth_annonymous,  sling_auth_requirements,  sling_auth_anonymous_user,  sling_auth_anonymous_password,  auth_http,  auth_http_realm,  auth_uri_suffix);
}


void OAIConfigmgrApiRequest::orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.engine.impl.debug.RequestProgressTrackerLogFilter";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter, handler, &OAIConfigmgrApiHandler::orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> extensions;   
    if(socket->queryString().keys().contains("extensions")){
        fromStringValue(socket->queryString().values("extensions"), extensions);
    }
    
    qint32 min_duration_ms;   
    if(socket->queryString().keys().contains("min_duration_ms")){
        fromStringValue(socket->queryString().value("min_duration_ms"), min_duration_ms);
    }
    
    qint32 max_duration_ms;   
    if(socket->queryString().keys().contains("max_duration_ms")){
        fromStringValue(socket->queryString().value("max_duration_ms"), max_duration_ms);
    }
    
    bool compact_log_format;   
    if(socket->queryString().keys().contains("compact_log_format")){
        fromStringValue(socket->queryString().value("compact_log_format"), compact_log_format);
    }
    


    emit orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter( post,  apply,  _delete,  action,  location,  propertylist,  extensions,  min_duration_ms,  max_duration_ms,  compact_log_format);
}


void OAIConfigmgrApiRequest::orgApacheSlingEngineImplLogRequestLoggerRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.engine.impl.log.RequestLogger";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingEngineImplLogRequestLogger, handler, &OAIConfigmgrApiHandler::orgApacheSlingEngineImplLogRequestLogger);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString request_log_output;   
    if(socket->queryString().keys().contains("request_log_output")){
        fromStringValue(socket->queryString().value("request_log_output"), request_log_output);
    }
    
    qint32 request_log_outputtype;   
    if(socket->queryString().keys().contains("request_log_outputtype")){
        fromStringValue(socket->queryString().value("request_log_outputtype"), request_log_outputtype);
    }
    
    bool request_log_enabled;   
    if(socket->queryString().keys().contains("request_log_enabled")){
        fromStringValue(socket->queryString().value("request_log_enabled"), request_log_enabled);
    }
    
    QString access_log_output;   
    if(socket->queryString().keys().contains("access_log_output")){
        fromStringValue(socket->queryString().value("access_log_output"), access_log_output);
    }
    
    qint32 access_log_outputtype;   
    if(socket->queryString().keys().contains("access_log_outputtype")){
        fromStringValue(socket->queryString().value("access_log_outputtype"), access_log_outputtype);
    }
    
    bool access_log_enabled;   
    if(socket->queryString().keys().contains("access_log_enabled")){
        fromStringValue(socket->queryString().value("access_log_enabled"), access_log_enabled);
    }
    


    emit orgApacheSlingEngineImplLogRequestLogger( post,  apply,  _delete,  action,  location,  propertylist,  request_log_output,  request_log_outputtype,  request_log_enabled,  access_log_output,  access_log_outputtype,  access_log_enabled);
}


void OAIConfigmgrApiRequest::orgApacheSlingEngineImplLogRequestLoggerServiceRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.engine.impl.log.RequestLoggerService";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingEngineImplLogRequestLoggerService, handler, &OAIConfigmgrApiHandler::orgApacheSlingEngineImplLogRequestLoggerService);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString request_log_service_format;   
    if(socket->queryString().keys().contains("request_log_service_format")){
        fromStringValue(socket->queryString().value("request_log_service_format"), request_log_service_format);
    }
    
    QString request_log_service_output;   
    if(socket->queryString().keys().contains("request_log_service_output")){
        fromStringValue(socket->queryString().value("request_log_service_output"), request_log_service_output);
    }
    
    qint32 request_log_service_outputtype;   
    if(socket->queryString().keys().contains("request_log_service_outputtype")){
        fromStringValue(socket->queryString().value("request_log_service_outputtype"), request_log_service_outputtype);
    }
    
    bool request_log_service_onentry;   
    if(socket->queryString().keys().contains("request_log_service_onentry")){
        fromStringValue(socket->queryString().value("request_log_service_onentry"), request_log_service_onentry);
    }
    


    emit orgApacheSlingEngineImplLogRequestLoggerService( post,  apply,  _delete,  action,  location,  propertylist,  request_log_service_format,  request_log_service_output,  request_log_service_outputtype,  request_log_service_onentry);
}


void OAIConfigmgrApiRequest::orgApacheSlingEngineImplSlingMainServletRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.engine.impl.SlingMainServlet";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingEngineImplSlingMainServlet, handler, &OAIConfigmgrApiHandler::orgApacheSlingEngineImplSlingMainServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 sling_max_calls;   
    if(socket->queryString().keys().contains("sling_max_calls")){
        fromStringValue(socket->queryString().value("sling_max_calls"), sling_max_calls);
    }
    
    qint32 sling_max_inclusions;   
    if(socket->queryString().keys().contains("sling_max_inclusions")){
        fromStringValue(socket->queryString().value("sling_max_inclusions"), sling_max_inclusions);
    }
    
    bool sling_trace_allow;   
    if(socket->queryString().keys().contains("sling_trace_allow")){
        fromStringValue(socket->queryString().value("sling_trace_allow"), sling_trace_allow);
    }
    
    qint32 sling_max_record_requests;   
    if(socket->queryString().keys().contains("sling_max_record_requests")){
        fromStringValue(socket->queryString().value("sling_max_record_requests"), sling_max_record_requests);
    }
    
    QList<QString> sling_store_pattern_requests;   
    if(socket->queryString().keys().contains("sling_store_pattern_requests")){
        fromStringValue(socket->queryString().values("sling_store_pattern_requests"), sling_store_pattern_requests);
    }
    
    QString sling_serverinfo;   
    if(socket->queryString().keys().contains("sling_serverinfo")){
        fromStringValue(socket->queryString().value("sling_serverinfo"), sling_serverinfo);
    }
    
    QList<QString> sling_additional_response_headers;   
    if(socket->queryString().keys().contains("sling_additional_response_headers")){
        fromStringValue(socket->queryString().values("sling_additional_response_headers"), sling_additional_response_headers);
    }
    


    emit orgApacheSlingEngineImplSlingMainServlet( post,  apply,  _delete,  action,  location,  propertylist,  sling_max_calls,  sling_max_inclusions,  sling_trace_allow,  sling_max_record_requests,  sling_store_pattern_requests,  sling_serverinfo,  sling_additional_response_headers);
}


void OAIConfigmgrApiRequest::orgApacheSlingEngineParametersRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.engine.parameters";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingEngineParameters, handler, &OAIConfigmgrApiHandler::orgApacheSlingEngineParameters);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString sling_default_parameter_encoding;   
    if(socket->queryString().keys().contains("sling_default_parameter_encoding")){
        fromStringValue(socket->queryString().value("sling_default_parameter_encoding"), sling_default_parameter_encoding);
    }
    
    qint32 sling_default_max_parameters;   
    if(socket->queryString().keys().contains("sling_default_max_parameters")){
        fromStringValue(socket->queryString().value("sling_default_max_parameters"), sling_default_max_parameters);
    }
    
    QString file_location;   
    if(socket->queryString().keys().contains("file_location")){
        fromStringValue(socket->queryString().value("file_location"), file_location);
    }
    
    qint32 file_threshold;   
    if(socket->queryString().keys().contains("file_threshold")){
        fromStringValue(socket->queryString().value("file_threshold"), file_threshold);
    }
    
    qint32 file_max;   
    if(socket->queryString().keys().contains("file_max")){
        fromStringValue(socket->queryString().value("file_max"), file_max);
    }
    
    qint32 request_max;   
    if(socket->queryString().keys().contains("request_max")){
        fromStringValue(socket->queryString().value("request_max"), request_max);
    }
    
    bool sling_default_parameter_check_for_additional_container_parameters;   
    if(socket->queryString().keys().contains("sling_default_parameter_check_for_additional_container_parameters")){
        fromStringValue(socket->queryString().value("sling_default_parameter_check_for_additional_container_parameters"), sling_default_parameter_check_for_additional_container_parameters);
    }
    


    emit orgApacheSlingEngineParameters( post,  apply,  _delete,  action,  location,  propertylist,  sling_default_parameter_encoding,  sling_default_max_parameters,  file_location,  file_threshold,  file_max,  request_max,  sling_default_parameter_check_for_additional_container_parameters);
}


void OAIConfigmgrApiRequest::orgApacheSlingEventImplEventingThreadPoolRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.event.impl.EventingThreadPool";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingEventImplEventingThreadPool, handler, &OAIConfigmgrApiHandler::orgApacheSlingEventImplEventingThreadPool);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 min_pool_size;   
    if(socket->queryString().keys().contains("min_pool_size")){
        fromStringValue(socket->queryString().value("min_pool_size"), min_pool_size);
    }
    


    emit orgApacheSlingEventImplEventingThreadPool( post,  apply,  _delete,  action,  location,  propertylist,  min_pool_size);
}


void OAIConfigmgrApiRequest::orgApacheSlingEventImplJobsDefaultJobManagerRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.event.impl.jobs.DefaultJobManager";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingEventImplJobsDefaultJobManager, handler, &OAIConfigmgrApiHandler::orgApacheSlingEventImplJobsDefaultJobManager);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString queue_priority;   
    if(socket->queryString().keys().contains("queue_priority")){
        fromStringValue(socket->queryString().value("queue_priority"), queue_priority);
    }
    
    qint32 queue_retries;   
    if(socket->queryString().keys().contains("queue_retries")){
        fromStringValue(socket->queryString().value("queue_retries"), queue_retries);
    }
    
    qint32 queue_retrydelay;   
    if(socket->queryString().keys().contains("queue_retrydelay")){
        fromStringValue(socket->queryString().value("queue_retrydelay"), queue_retrydelay);
    }
    
    qint32 queue_maxparallel;   
    if(socket->queryString().keys().contains("queue_maxparallel")){
        fromStringValue(socket->queryString().value("queue_maxparallel"), queue_maxparallel);
    }
    


    emit orgApacheSlingEventImplJobsDefaultJobManager( post,  apply,  _delete,  action,  location,  propertylist,  queue_priority,  queue_retries,  queue_retrydelay,  queue_maxparallel);
}


void OAIConfigmgrApiRequest::orgApacheSlingEventImplJobsJcrPersistenceHandlerRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.event.impl.jobs.jcr.PersistenceHandler";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingEventImplJobsJcrPersistenceHandler, handler, &OAIConfigmgrApiHandler::orgApacheSlingEventImplJobsJcrPersistenceHandler);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool job_consumermanager_disable_distribution;   
    if(socket->queryString().keys().contains("job_consumermanager_disable_distribution")){
        fromStringValue(socket->queryString().value("job_consumermanager_disable_distribution"), job_consumermanager_disable_distribution);
    }
    
    qint32 startup_delay;   
    if(socket->queryString().keys().contains("startup_delay")){
        fromStringValue(socket->queryString().value("startup_delay"), startup_delay);
    }
    
    qint32 cleanup_period;   
    if(socket->queryString().keys().contains("cleanup_period")){
        fromStringValue(socket->queryString().value("cleanup_period"), cleanup_period);
    }
    


    emit orgApacheSlingEventImplJobsJcrPersistenceHandler( post,  apply,  _delete,  action,  location,  propertylist,  job_consumermanager_disable_distribution,  startup_delay,  cleanup_period);
}


void OAIConfigmgrApiRequest::orgApacheSlingEventImplJobsJobConsumerManagerRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.event.impl.jobs.JobConsumerManager";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingEventImplJobsJobConsumerManager, handler, &OAIConfigmgrApiHandler::orgApacheSlingEventImplJobsJobConsumerManager);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool org_apache_sling_installer_configuration_persist;   
    if(socket->queryString().keys().contains("org_apache_sling_installer_configuration_persist")){
        fromStringValue(socket->queryString().value("org_apache_sling_installer_configuration_persist"), org_apache_sling_installer_configuration_persist);
    }
    
    QList<QString> job_consumermanager_whitelist;   
    if(socket->queryString().keys().contains("job_consumermanager_whitelist")){
        fromStringValue(socket->queryString().values("job_consumermanager_whitelist"), job_consumermanager_whitelist);
    }
    
    QList<QString> job_consumermanager_blacklist;   
    if(socket->queryString().keys().contains("job_consumermanager_blacklist")){
        fromStringValue(socket->queryString().values("job_consumermanager_blacklist"), job_consumermanager_blacklist);
    }
    


    emit orgApacheSlingEventImplJobsJobConsumerManager( post,  apply,  _delete,  action,  location,  propertylist,  org_apache_sling_installer_configuration_persist,  job_consumermanager_whitelist,  job_consumermanager_blacklist);
}


void OAIConfigmgrApiRequest::orgApacheSlingEventJobsQueueConfigurationRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.event.jobs.QueueConfiguration";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingEventJobsQueueConfiguration, handler, &OAIConfigmgrApiHandler::orgApacheSlingEventJobsQueueConfiguration);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString queue_name;   
    if(socket->queryString().keys().contains("queue_name")){
        fromStringValue(socket->queryString().value("queue_name"), queue_name);
    }
    
    QList<QString> queue_topics;   
    if(socket->queryString().keys().contains("queue_topics")){
        fromStringValue(socket->queryString().values("queue_topics"), queue_topics);
    }
    
    QString queue_type;   
    if(socket->queryString().keys().contains("queue_type")){
        fromStringValue(socket->queryString().value("queue_type"), queue_type);
    }
    
    QString queue_priority;   
    if(socket->queryString().keys().contains("queue_priority")){
        fromStringValue(socket->queryString().value("queue_priority"), queue_priority);
    }
    
    qint32 queue_retries;   
    if(socket->queryString().keys().contains("queue_retries")){
        fromStringValue(socket->queryString().value("queue_retries"), queue_retries);
    }
    
    qint32 queue_retrydelay;   
    if(socket->queryString().keys().contains("queue_retrydelay")){
        fromStringValue(socket->queryString().value("queue_retrydelay"), queue_retrydelay);
    }
    
    OAINumber queue_maxparallel;   
    if(socket->queryString().keys().contains("queue_maxparallel")){
        fromStringValue(socket->queryString().value("queue_maxparallel"), queue_maxparallel);
    }
    
    bool queue_keep_jobs;   
    if(socket->queryString().keys().contains("queue_keep_jobs")){
        fromStringValue(socket->queryString().value("queue_keep_jobs"), queue_keep_jobs);
    }
    
    bool queue_prefer_run_on_creation_instance;   
    if(socket->queryString().keys().contains("queue_prefer_run_on_creation_instance")){
        fromStringValue(socket->queryString().value("queue_prefer_run_on_creation_instance"), queue_prefer_run_on_creation_instance);
    }
    
    qint32 queue_thread_pool_size;   
    if(socket->queryString().keys().contains("queue_thread_pool_size")){
        fromStringValue(socket->queryString().value("queue_thread_pool_size"), queue_thread_pool_size);
    }
    
    qint32 service_ranking;   
    if(socket->queryString().keys().contains("service_ranking")){
        fromStringValue(socket->queryString().value("service_ranking"), service_ranking);
    }
    


    emit orgApacheSlingEventJobsQueueConfiguration( post,  apply,  _delete,  action,  location,  propertylist,  queue_name,  queue_topics,  queue_type,  queue_priority,  queue_retries,  queue_retrydelay,  queue_maxparallel,  queue_keep_jobs,  queue_prefer_run_on_creation_instance,  queue_thread_pool_size,  service_ranking);
}


void OAIConfigmgrApiRequest::orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.extensions.webconsolesecurityprovider.internal.SlingWebConsoleSecurityProvider";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW, handler, &OAIConfigmgrApiHandler::orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> users;   
    if(socket->queryString().keys().contains("users")){
        fromStringValue(socket->queryString().values("users"), users);
    }
    
    QList<QString> groups;   
    if(socket->queryString().keys().contains("groups")){
        fromStringValue(socket->queryString().values("groups"), groups);
    }
    


    emit orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW( post,  apply,  _delete,  action,  location,  propertylist,  users,  groups);
}


void OAIConfigmgrApiRequest::orgApacheSlingFeatureflagsFeatureRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.featureflags.Feature";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingFeatureflagsFeature, handler, &OAIConfigmgrApiHandler::orgApacheSlingFeatureflagsFeature);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString name;   
    if(socket->queryString().keys().contains("name")){
        fromStringValue(socket->queryString().value("name"), name);
    }
    
    QString description;   
    if(socket->queryString().keys().contains("description")){
        fromStringValue(socket->queryString().value("description"), description);
    }
    
    bool enabled;   
    if(socket->queryString().keys().contains("enabled")){
        fromStringValue(socket->queryString().value("enabled"), enabled);
    }
    


    emit orgApacheSlingFeatureflagsFeature( post,  apply,  _delete,  action,  location,  propertylist,  name,  description,  enabled);
}


void OAIConfigmgrApiRequest::orgApacheSlingFeatureflagsImplConfiguredFeatureRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.featureflags.impl.ConfiguredFeature";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingFeatureflagsImplConfiguredFeature, handler, &OAIConfigmgrApiHandler::orgApacheSlingFeatureflagsImplConfiguredFeature);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString name;   
    if(socket->queryString().keys().contains("name")){
        fromStringValue(socket->queryString().value("name"), name);
    }
    
    QString description;   
    if(socket->queryString().keys().contains("description")){
        fromStringValue(socket->queryString().value("description"), description);
    }
    
    bool enabled;   
    if(socket->queryString().keys().contains("enabled")){
        fromStringValue(socket->queryString().value("enabled"), enabled);
    }
    


    emit orgApacheSlingFeatureflagsImplConfiguredFeature( post,  apply,  _delete,  action,  location,  propertylist,  name,  description,  enabled);
}


void OAIConfigmgrApiRequest::orgApacheSlingHapiImplHApiUtilImplRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.hapi.impl.HApiUtilImpl";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingHapiImplHApiUtilImpl, handler, &OAIConfigmgrApiHandler::orgApacheSlingHapiImplHApiUtilImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString org_apache_sling_hapi_tools_resourcetype;   
    if(socket->queryString().keys().contains("org_apache_sling_hapi_tools_resourcetype")){
        fromStringValue(socket->queryString().value("org_apache_sling_hapi_tools_resourcetype"), org_apache_sling_hapi_tools_resourcetype);
    }
    
    QString org_apache_sling_hapi_tools_collectionresourcetype;   
    if(socket->queryString().keys().contains("org_apache_sling_hapi_tools_collectionresourcetype")){
        fromStringValue(socket->queryString().value("org_apache_sling_hapi_tools_collectionresourcetype"), org_apache_sling_hapi_tools_collectionresourcetype);
    }
    
    QList<QString> org_apache_sling_hapi_tools_searchpaths;   
    if(socket->queryString().keys().contains("org_apache_sling_hapi_tools_searchpaths")){
        fromStringValue(socket->queryString().values("org_apache_sling_hapi_tools_searchpaths"), org_apache_sling_hapi_tools_searchpaths);
    }
    
    QString org_apache_sling_hapi_tools_externalurl;   
    if(socket->queryString().keys().contains("org_apache_sling_hapi_tools_externalurl")){
        fromStringValue(socket->queryString().value("org_apache_sling_hapi_tools_externalurl"), org_apache_sling_hapi_tools_externalurl);
    }
    
    bool org_apache_sling_hapi_tools_enabled;   
    if(socket->queryString().keys().contains("org_apache_sling_hapi_tools_enabled")){
        fromStringValue(socket->queryString().value("org_apache_sling_hapi_tools_enabled"), org_apache_sling_hapi_tools_enabled);
    }
    


    emit orgApacheSlingHapiImplHApiUtilImpl( post,  apply,  _delete,  action,  location,  propertylist,  org_apache_sling_hapi_tools_resourcetype,  org_apache_sling_hapi_tools_collectionresourcetype,  org_apache_sling_hapi_tools_searchpaths,  org_apache_sling_hapi_tools_externalurl,  org_apache_sling_hapi_tools_enabled);
}


void OAIConfigmgrApiRequest::orgApacheSlingHcCoreImplCompositeHealthCheckRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.hc.core.impl.CompositeHealthCheck";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingHcCoreImplCompositeHealthCheck, handler, &OAIConfigmgrApiHandler::orgApacheSlingHcCoreImplCompositeHealthCheck);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString hc_name;   
    if(socket->queryString().keys().contains("hc_name")){
        fromStringValue(socket->queryString().value("hc_name"), hc_name);
    }
    
    QList<QString> hc_tags;   
    if(socket->queryString().keys().contains("hc_tags")){
        fromStringValue(socket->queryString().values("hc_tags"), hc_tags);
    }
    
    QString hc_mbean_name;   
    if(socket->queryString().keys().contains("hc_mbean_name")){
        fromStringValue(socket->queryString().value("hc_mbean_name"), hc_mbean_name);
    }
    
    QList<QString> filter_tags;   
    if(socket->queryString().keys().contains("filter_tags")){
        fromStringValue(socket->queryString().values("filter_tags"), filter_tags);
    }
    
    bool filter_combine_tags_with_or;   
    if(socket->queryString().keys().contains("filter_combine_tags_with_or")){
        fromStringValue(socket->queryString().value("filter_combine_tags_with_or"), filter_combine_tags_with_or);
    }
    


    emit orgApacheSlingHcCoreImplCompositeHealthCheck( post,  apply,  _delete,  action,  location,  propertylist,  hc_name,  hc_tags,  hc_mbean_name,  filter_tags,  filter_combine_tags_with_or);
}


void OAIConfigmgrApiRequest::orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.hc.core.impl.executor.HealthCheckExecutorImpl";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl, handler, &OAIConfigmgrApiHandler::orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 timeout_in_ms;   
    if(socket->queryString().keys().contains("timeout_in_ms")){
        fromStringValue(socket->queryString().value("timeout_in_ms"), timeout_in_ms);
    }
    
    qint32 long_running_future_threshold_for_critical_ms;   
    if(socket->queryString().keys().contains("long_running_future_threshold_for_critical_ms")){
        fromStringValue(socket->queryString().value("long_running_future_threshold_for_critical_ms"), long_running_future_threshold_for_critical_ms);
    }
    
    qint32 result_cache_ttl_in_ms;   
    if(socket->queryString().keys().contains("result_cache_ttl_in_ms")){
        fromStringValue(socket->queryString().value("result_cache_ttl_in_ms"), result_cache_ttl_in_ms);
    }
    


    emit orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl( post,  apply,  _delete,  action,  location,  propertylist,  timeout_in_ms,  long_running_future_threshold_for_critical_ms,  result_cache_ttl_in_ms);
}


void OAIConfigmgrApiRequest::orgApacheSlingHcCoreImplJmxAttributeHealthCheckRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.hc.core.impl.JmxAttributeHealthCheck";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingHcCoreImplJmxAttributeHealthCheck, handler, &OAIConfigmgrApiHandler::orgApacheSlingHcCoreImplJmxAttributeHealthCheck);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString hc_name;   
    if(socket->queryString().keys().contains("hc_name")){
        fromStringValue(socket->queryString().value("hc_name"), hc_name);
    }
    
    QList<QString> hc_tags;   
    if(socket->queryString().keys().contains("hc_tags")){
        fromStringValue(socket->queryString().values("hc_tags"), hc_tags);
    }
    
    QString hc_mbean_name;   
    if(socket->queryString().keys().contains("hc_mbean_name")){
        fromStringValue(socket->queryString().value("hc_mbean_name"), hc_mbean_name);
    }
    
    QString mbean_name;   
    if(socket->queryString().keys().contains("mbean_name")){
        fromStringValue(socket->queryString().value("mbean_name"), mbean_name);
    }
    
    QString attribute_name;   
    if(socket->queryString().keys().contains("attribute_name")){
        fromStringValue(socket->queryString().value("attribute_name"), attribute_name);
    }
    
    QString attribute_value_constraint;   
    if(socket->queryString().keys().contains("attribute_value_constraint")){
        fromStringValue(socket->queryString().value("attribute_value_constraint"), attribute_value_constraint);
    }
    


    emit orgApacheSlingHcCoreImplJmxAttributeHealthCheck( post,  apply,  _delete,  action,  location,  propertylist,  hc_name,  hc_tags,  hc_mbean_name,  mbean_name,  attribute_name,  attribute_value_constraint);
}


void OAIConfigmgrApiRequest::orgApacheSlingHcCoreImplScriptableHealthCheckRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.hc.core.impl.ScriptableHealthCheck";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingHcCoreImplScriptableHealthCheck, handler, &OAIConfigmgrApiHandler::orgApacheSlingHcCoreImplScriptableHealthCheck);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString hc_name;   
    if(socket->queryString().keys().contains("hc_name")){
        fromStringValue(socket->queryString().value("hc_name"), hc_name);
    }
    
    QList<QString> hc_tags;   
    if(socket->queryString().keys().contains("hc_tags")){
        fromStringValue(socket->queryString().values("hc_tags"), hc_tags);
    }
    
    QString hc_mbean_name;   
    if(socket->queryString().keys().contains("hc_mbean_name")){
        fromStringValue(socket->queryString().value("hc_mbean_name"), hc_mbean_name);
    }
    
    QString expression;   
    if(socket->queryString().keys().contains("expression")){
        fromStringValue(socket->queryString().value("expression"), expression);
    }
    
    QString language_extension;   
    if(socket->queryString().keys().contains("language_extension")){
        fromStringValue(socket->queryString().value("language_extension"), language_extension);
    }
    


    emit orgApacheSlingHcCoreImplScriptableHealthCheck( post,  apply,  _delete,  action,  location,  propertylist,  hc_name,  hc_tags,  hc_mbean_name,  expression,  language_extension);
}


void OAIConfigmgrApiRequest::orgApacheSlingHcCoreImplServletHealthCheckExecutorServletRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.hc.core.impl.servlet.HealthCheckExecutorServlet";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingHcCoreImplServletHealthCheckExecutorServlet, handler, &OAIConfigmgrApiHandler::orgApacheSlingHcCoreImplServletHealthCheckExecutorServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString servlet_path;   
    if(socket->queryString().keys().contains("servlet_path")){
        fromStringValue(socket->queryString().value("servlet_path"), servlet_path);
    }
    
    bool disabled;   
    if(socket->queryString().keys().contains("disabled")){
        fromStringValue(socket->queryString().value("disabled"), disabled);
    }
    
    QString cors_access_control_allow_origin;   
    if(socket->queryString().keys().contains("cors_access_control_allow_origin")){
        fromStringValue(socket->queryString().value("cors_access_control_allow_origin"), cors_access_control_allow_origin);
    }
    


    emit orgApacheSlingHcCoreImplServletHealthCheckExecutorServlet( post,  apply,  _delete,  action,  location,  propertylist,  servlet_path,  disabled,  cors_access_control_allow_origin);
}


void OAIConfigmgrApiRequest::orgApacheSlingHcCoreImplServletResultTxtVerboseSerializerRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.hc.core.impl.servlet.ResultTxtVerboseSerializer";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingHcCoreImplServletResultTxtVerboseSerializer, handler, &OAIConfigmgrApiHandler::orgApacheSlingHcCoreImplServletResultTxtVerboseSerializer);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 total_width;   
    if(socket->queryString().keys().contains("total_width")){
        fromStringValue(socket->queryString().value("total_width"), total_width);
    }
    
    qint32 col_width_name;   
    if(socket->queryString().keys().contains("col_width_name")){
        fromStringValue(socket->queryString().value("col_width_name"), col_width_name);
    }
    
    qint32 col_width_result;   
    if(socket->queryString().keys().contains("col_width_result")){
        fromStringValue(socket->queryString().value("col_width_result"), col_width_result);
    }
    
    qint32 col_width_timing;   
    if(socket->queryString().keys().contains("col_width_timing")){
        fromStringValue(socket->queryString().value("col_width_timing"), col_width_timing);
    }
    


    emit orgApacheSlingHcCoreImplServletResultTxtVerboseSerializer( post,  apply,  _delete,  action,  location,  propertylist,  total_width,  col_width_name,  col_width_result,  col_width_timing);
}


void OAIConfigmgrApiRequest::orgApacheSlingI18nImplI18NFilterRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.i18n.impl.I18NFilter";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingI18nImplI18NFilter, handler, &OAIConfigmgrApiHandler::orgApacheSlingI18nImplI18NFilter);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 service_ranking;   
    if(socket->queryString().keys().contains("service_ranking")){
        fromStringValue(socket->queryString().value("service_ranking"), service_ranking);
    }
    
    QList<QString> sling_filter_scope;   
    if(socket->queryString().keys().contains("sling_filter_scope")){
        fromStringValue(socket->queryString().values("sling_filter_scope"), sling_filter_scope);
    }
    


    emit orgApacheSlingI18nImplI18NFilter( post,  apply,  _delete,  action,  location,  propertylist,  service_ranking,  sling_filter_scope);
}


void OAIConfigmgrApiRequest::orgApacheSlingI18nImplJcrResourceBundleProviderRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.i18n.impl.JcrResourceBundleProvider";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingI18nImplJcrResourceBundleProvider, handler, &OAIConfigmgrApiHandler::orgApacheSlingI18nImplJcrResourceBundleProvider);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString locale_default;   
    if(socket->queryString().keys().contains("locale_default")){
        fromStringValue(socket->queryString().value("locale_default"), locale_default);
    }
    
    bool preload_bundles;   
    if(socket->queryString().keys().contains("preload_bundles")){
        fromStringValue(socket->queryString().value("preload_bundles"), preload_bundles);
    }
    
    qint32 invalidation_delay;   
    if(socket->queryString().keys().contains("invalidation_delay")){
        fromStringValue(socket->queryString().value("invalidation_delay"), invalidation_delay);
    }
    


    emit orgApacheSlingI18nImplJcrResourceBundleProvider( post,  apply,  _delete,  action,  location,  propertylist,  locale_default,  preload_bundles,  invalidation_delay);
}


void OAIConfigmgrApiRequest::orgApacheSlingInstallerProviderJcrImplJcrInstallerRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.installer.provider.jcr.impl.JcrInstaller";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingInstallerProviderJcrImplJcrInstaller, handler, &OAIConfigmgrApiHandler::orgApacheSlingInstallerProviderJcrImplJcrInstaller);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> handler_schemes;   
    if(socket->queryString().keys().contains("handler_schemes")){
        fromStringValue(socket->queryString().values("handler_schemes"), handler_schemes);
    }
    
    QString sling_jcrinstall_folder_name_regexp;   
    if(socket->queryString().keys().contains("sling_jcrinstall_folder_name_regexp")){
        fromStringValue(socket->queryString().value("sling_jcrinstall_folder_name_regexp"), sling_jcrinstall_folder_name_regexp);
    }
    
    qint32 sling_jcrinstall_folder_max_depth;   
    if(socket->queryString().keys().contains("sling_jcrinstall_folder_max_depth")){
        fromStringValue(socket->queryString().value("sling_jcrinstall_folder_max_depth"), sling_jcrinstall_folder_max_depth);
    }
    
    QList<QString> sling_jcrinstall_search_path;   
    if(socket->queryString().keys().contains("sling_jcrinstall_search_path")){
        fromStringValue(socket->queryString().values("sling_jcrinstall_search_path"), sling_jcrinstall_search_path);
    }
    
    QString sling_jcrinstall_new_config_path;   
    if(socket->queryString().keys().contains("sling_jcrinstall_new_config_path")){
        fromStringValue(socket->queryString().value("sling_jcrinstall_new_config_path"), sling_jcrinstall_new_config_path);
    }
    
    QString sling_jcrinstall_signal_path;   
    if(socket->queryString().keys().contains("sling_jcrinstall_signal_path")){
        fromStringValue(socket->queryString().value("sling_jcrinstall_signal_path"), sling_jcrinstall_signal_path);
    }
    
    bool sling_jcrinstall_enable_writeback;   
    if(socket->queryString().keys().contains("sling_jcrinstall_enable_writeback")){
        fromStringValue(socket->queryString().value("sling_jcrinstall_enable_writeback"), sling_jcrinstall_enable_writeback);
    }
    


    emit orgApacheSlingInstallerProviderJcrImplJcrInstaller( post,  apply,  _delete,  action,  location,  propertylist,  handler_schemes,  sling_jcrinstall_folder_name_regexp,  sling_jcrinstall_folder_max_depth,  sling_jcrinstall_search_path,  sling_jcrinstall_new_config_path,  sling_jcrinstall_signal_path,  sling_jcrinstall_enable_writeback);
}


void OAIConfigmgrApiRequest::orgApacheSlingJcrBaseInternalLoginAdminWhitelistRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingJcrBaseInternalLoginAdminWhitelist, handler, &OAIConfigmgrApiHandler::orgApacheSlingJcrBaseInternalLoginAdminWhitelist);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool whitelist_bypass;   
    if(socket->queryString().keys().contains("whitelist_bypass")){
        fromStringValue(socket->queryString().value("whitelist_bypass"), whitelist_bypass);
    }
    
    QString whitelist_bundles_regexp;   
    if(socket->queryString().keys().contains("whitelist_bundles_regexp")){
        fromStringValue(socket->queryString().value("whitelist_bundles_regexp"), whitelist_bundles_regexp);
    }
    


    emit orgApacheSlingJcrBaseInternalLoginAdminWhitelist( post,  apply,  _delete,  action,  location,  propertylist,  whitelist_bypass,  whitelist_bundles_regexp);
}


void OAIConfigmgrApiRequest::orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist.fragment";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment, handler, &OAIConfigmgrApiHandler::orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString whitelist_name;   
    if(socket->queryString().keys().contains("whitelist_name")){
        fromStringValue(socket->queryString().value("whitelist_name"), whitelist_name);
    }
    
    QList<QString> whitelist_bundles;   
    if(socket->queryString().keys().contains("whitelist_bundles")){
        fromStringValue(socket->queryString().values("whitelist_bundles"), whitelist_bundles);
    }
    


    emit orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment( post,  apply,  _delete,  action,  location,  propertylist,  whitelist_name,  whitelist_bundles);
}


void OAIConfigmgrApiRequest::orgApacheSlingJcrDavexImplServletsSlingDavExServletRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingJcrDavexImplServletsSlingDavExServlet, handler, &OAIConfigmgrApiHandler::orgApacheSlingJcrDavexImplServletsSlingDavExServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString alias;   
    if(socket->queryString().keys().contains("alias")){
        fromStringValue(socket->queryString().value("alias"), alias);
    }
    
    bool dav_create_absolute_uri;   
    if(socket->queryString().keys().contains("dav_create_absolute_uri")){
        fromStringValue(socket->queryString().value("dav_create_absolute_uri"), dav_create_absolute_uri);
    }
    
    QString dav_protectedhandlers;   
    if(socket->queryString().keys().contains("dav_protectedhandlers")){
        fromStringValue(socket->queryString().value("dav_protectedhandlers"), dav_protectedhandlers);
    }
    


    emit orgApacheSlingJcrDavexImplServletsSlingDavExServlet( post,  apply,  _delete,  action,  location,  propertylist,  alias,  dav_create_absolute_uri,  dav_protectedhandlers);
}


void OAIConfigmgrApiRequest::orgApacheSlingJcrJackrabbitServerJndiRegistrationSupportRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.JndiRegistrationSupport";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingJcrJackrabbitServerJndiRegistrationSupport, handler, &OAIConfigmgrApiHandler::orgApacheSlingJcrJackrabbitServerJndiRegistrationSupport);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString java_naming_factory_initial;   
    if(socket->queryString().keys().contains("java_naming_factory_initial")){
        fromStringValue(socket->queryString().value("java_naming_factory_initial"), java_naming_factory_initial);
    }
    
    QString java_naming_provider_url;   
    if(socket->queryString().keys().contains("java_naming_provider_url")){
        fromStringValue(socket->queryString().value("java_naming_provider_url"), java_naming_provider_url);
    }
    


    emit orgApacheSlingJcrJackrabbitServerJndiRegistrationSupport( post,  apply,  _delete,  action,  location,  propertylist,  java_naming_factory_initial,  java_naming_provider_url);
}


void OAIConfigmgrApiRequest::orgApacheSlingJcrJackrabbitServerRmiRegistrationSupportRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.RmiRegistrationSupport";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingJcrJackrabbitServerRmiRegistrationSupport, handler, &OAIConfigmgrApiHandler::orgApacheSlingJcrJackrabbitServerRmiRegistrationSupport);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 port;   
    if(socket->queryString().keys().contains("port")){
        fromStringValue(socket->queryString().value("port"), port);
    }
    


    emit orgApacheSlingJcrJackrabbitServerRmiRegistrationSupport( post,  apply,  _delete,  action,  location,  propertylist,  port);
}


void OAIConfigmgrApiRequest::orgApacheSlingJcrRepoinitImplRepositoryInitializerRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.jcr.repoinit.impl.RepositoryInitializer";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingJcrRepoinitImplRepositoryInitializer, handler, &OAIConfigmgrApiHandler::orgApacheSlingJcrRepoinitImplRepositoryInitializer);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> references;   
    if(socket->queryString().keys().contains("references")){
        fromStringValue(socket->queryString().values("references"), references);
    }
    


    emit orgApacheSlingJcrRepoinitImplRepositoryInitializer( post,  apply,  _delete,  action,  location,  propertylist,  references);
}


void OAIConfigmgrApiRequest::orgApacheSlingJcrRepoinitRepositoryInitializerRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.jcr.repoinit.RepositoryInitializer";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingJcrRepoinitRepositoryInitializer, handler, &OAIConfigmgrApiHandler::orgApacheSlingJcrRepoinitRepositoryInitializer);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> references;   
    if(socket->queryString().keys().contains("references")){
        fromStringValue(socket->queryString().values("references"), references);
    }
    
    QList<QString> scripts;   
    if(socket->queryString().keys().contains("scripts")){
        fromStringValue(socket->queryString().values("scripts"), scripts);
    }
    


    emit orgApacheSlingJcrRepoinitRepositoryInitializer( post,  apply,  _delete,  action,  location,  propertylist,  references,  scripts);
}


void OAIConfigmgrApiRequest::orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrResourceResolverFactoryImpl";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl, handler, &OAIConfigmgrApiHandler::orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> resource_resolver_searchpath;   
    if(socket->queryString().keys().contains("resource_resolver_searchpath")){
        fromStringValue(socket->queryString().values("resource_resolver_searchpath"), resource_resolver_searchpath);
    }
    
    bool resource_resolver_manglenamespaces;   
    if(socket->queryString().keys().contains("resource_resolver_manglenamespaces")){
        fromStringValue(socket->queryString().value("resource_resolver_manglenamespaces"), resource_resolver_manglenamespaces);
    }
    
    bool resource_resolver_allow_direct;   
    if(socket->queryString().keys().contains("resource_resolver_allow_direct")){
        fromStringValue(socket->queryString().value("resource_resolver_allow_direct"), resource_resolver_allow_direct);
    }
    
    QList<QString> resource_resolver_required_providers;   
    if(socket->queryString().keys().contains("resource_resolver_required_providers")){
        fromStringValue(socket->queryString().values("resource_resolver_required_providers"), resource_resolver_required_providers);
    }
    
    QList<QString> resource_resolver_required_providernames;   
    if(socket->queryString().keys().contains("resource_resolver_required_providernames")){
        fromStringValue(socket->queryString().values("resource_resolver_required_providernames"), resource_resolver_required_providernames);
    }
    
    QList<QString> resource_resolver_virtual;   
    if(socket->queryString().keys().contains("resource_resolver_virtual")){
        fromStringValue(socket->queryString().values("resource_resolver_virtual"), resource_resolver_virtual);
    }
    
    QList<QString> resource_resolver_mapping;   
    if(socket->queryString().keys().contains("resource_resolver_mapping")){
        fromStringValue(socket->queryString().values("resource_resolver_mapping"), resource_resolver_mapping);
    }
    
    QString resource_resolver_map_location;   
    if(socket->queryString().keys().contains("resource_resolver_map_location")){
        fromStringValue(socket->queryString().value("resource_resolver_map_location"), resource_resolver_map_location);
    }
    
    QList<QString> resource_resolver_map_observation;   
    if(socket->queryString().keys().contains("resource_resolver_map_observation")){
        fromStringValue(socket->queryString().values("resource_resolver_map_observation"), resource_resolver_map_observation);
    }
    
    qint32 resource_resolver_default_vanity_redirect_status;   
    if(socket->queryString().keys().contains("resource_resolver_default_vanity_redirect_status")){
        fromStringValue(socket->queryString().value("resource_resolver_default_vanity_redirect_status"), resource_resolver_default_vanity_redirect_status);
    }
    
    bool resource_resolver_enable_vanitypath;   
    if(socket->queryString().keys().contains("resource_resolver_enable_vanitypath")){
        fromStringValue(socket->queryString().value("resource_resolver_enable_vanitypath"), resource_resolver_enable_vanitypath);
    }
    
    qint32 resource_resolver_vanitypath_max_entries;   
    if(socket->queryString().keys().contains("resource_resolver_vanitypath_max_entries")){
        fromStringValue(socket->queryString().value("resource_resolver_vanitypath_max_entries"), resource_resolver_vanitypath_max_entries);
    }
    
    bool resource_resolver_vanitypath_max_entries_startup;   
    if(socket->queryString().keys().contains("resource_resolver_vanitypath_max_entries_startup")){
        fromStringValue(socket->queryString().value("resource_resolver_vanitypath_max_entries_startup"), resource_resolver_vanitypath_max_entries_startup);
    }
    
    qint32 resource_resolver_vanitypath_bloomfilter_max_bytes;   
    if(socket->queryString().keys().contains("resource_resolver_vanitypath_bloomfilter_max_bytes")){
        fromStringValue(socket->queryString().value("resource_resolver_vanitypath_bloomfilter_max_bytes"), resource_resolver_vanitypath_bloomfilter_max_bytes);
    }
    
    bool resource_resolver_optimize_alias_resolution;   
    if(socket->queryString().keys().contains("resource_resolver_optimize_alias_resolution")){
        fromStringValue(socket->queryString().value("resource_resolver_optimize_alias_resolution"), resource_resolver_optimize_alias_resolution);
    }
    
    QList<QString> resource_resolver_vanitypath_whitelist;   
    if(socket->queryString().keys().contains("resource_resolver_vanitypath_whitelist")){
        fromStringValue(socket->queryString().values("resource_resolver_vanitypath_whitelist"), resource_resolver_vanitypath_whitelist);
    }
    
    QList<QString> resource_resolver_vanitypath_blacklist;   
    if(socket->queryString().keys().contains("resource_resolver_vanitypath_blacklist")){
        fromStringValue(socket->queryString().values("resource_resolver_vanitypath_blacklist"), resource_resolver_vanitypath_blacklist);
    }
    
    bool resource_resolver_vanity_precedence;   
    if(socket->queryString().keys().contains("resource_resolver_vanity_precedence")){
        fromStringValue(socket->queryString().value("resource_resolver_vanity_precedence"), resource_resolver_vanity_precedence);
    }
    
    bool resource_resolver_providerhandling_paranoid;   
    if(socket->queryString().keys().contains("resource_resolver_providerhandling_paranoid")){
        fromStringValue(socket->queryString().value("resource_resolver_providerhandling_paranoid"), resource_resolver_providerhandling_paranoid);
    }
    
    bool resource_resolver_log_closing;   
    if(socket->queryString().keys().contains("resource_resolver_log_closing")){
        fromStringValue(socket->queryString().value("resource_resolver_log_closing"), resource_resolver_log_closing);
    }
    
    bool resource_resolver_log_unclosed;   
    if(socket->queryString().keys().contains("resource_resolver_log_unclosed")){
        fromStringValue(socket->queryString().value("resource_resolver_log_unclosed"), resource_resolver_log_unclosed);
    }
    


    emit orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl( post,  apply,  _delete,  action,  location,  propertylist,  resource_resolver_searchpath,  resource_resolver_manglenamespaces,  resource_resolver_allow_direct,  resource_resolver_required_providers,  resource_resolver_required_providernames,  resource_resolver_virtual,  resource_resolver_mapping,  resource_resolver_map_location,  resource_resolver_map_observation,  resource_resolver_default_vanity_redirect_status,  resource_resolver_enable_vanitypath,  resource_resolver_vanitypath_max_entries,  resource_resolver_vanitypath_max_entries_startup,  resource_resolver_vanitypath_bloomfilter_max_bytes,  resource_resolver_optimize_alias_resolution,  resource_resolver_vanitypath_whitelist,  resource_resolver_vanitypath_blacklist,  resource_resolver_vanity_precedence,  resource_resolver_providerhandling_paranoid,  resource_resolver_log_closing,  resource_resolver_log_unclosed);
}


void OAIConfigmgrApiRequest::orgApacheSlingJcrResourceInternalJcrSystemUserValidatorRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrSystemUserValidator";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingJcrResourceInternalJcrSystemUserValidator, handler, &OAIConfigmgrApiHandler::orgApacheSlingJcrResourceInternalJcrSystemUserValidator);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool allow_only_system_user;   
    if(socket->queryString().keys().contains("allow_only_system_user")){
        fromStringValue(socket->queryString().value("allow_only_system_user"), allow_only_system_user);
    }
    


    emit orgApacheSlingJcrResourceInternalJcrSystemUserValidator( post,  apply,  _delete,  action,  location,  propertylist,  allow_only_system_user);
}


void OAIConfigmgrApiRequest::orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.jcr.resourcesecurity.impl.ResourceAccessGateFactory";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory, handler, &OAIConfigmgrApiHandler::orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString path;   
    if(socket->queryString().keys().contains("path")){
        fromStringValue(socket->queryString().value("path"), path);
    }
    
    QString checkpath_prefix;   
    if(socket->queryString().keys().contains("checkpath_prefix")){
        fromStringValue(socket->queryString().value("checkpath_prefix"), checkpath_prefix);
    }
    
    QString jcr_path;   
    if(socket->queryString().keys().contains("jcr_path")){
        fromStringValue(socket->queryString().value("jcr_path"), jcr_path);
    }
    


    emit orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory( post,  apply,  _delete,  action,  location,  propertylist,  path,  checkpath_prefix,  jcr_path);
}


void OAIConfigmgrApiRequest::orgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DefaultHandlerService";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingJcrWebdavImplHandlerDefaultHandlerService, handler, &OAIConfigmgrApiHandler::orgApacheSlingJcrWebdavImplHandlerDefaultHandlerService);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 service_ranking;   
    if(socket->queryString().keys().contains("service_ranking")){
        fromStringValue(socket->queryString().value("service_ranking"), service_ranking);
    }
    
    QString type_collections;   
    if(socket->queryString().keys().contains("type_collections")){
        fromStringValue(socket->queryString().value("type_collections"), type_collections);
    }
    
    QString type_noncollections;   
    if(socket->queryString().keys().contains("type_noncollections")){
        fromStringValue(socket->queryString().value("type_noncollections"), type_noncollections);
    }
    
    QString type_content;   
    if(socket->queryString().keys().contains("type_content")){
        fromStringValue(socket->queryString().value("type_content"), type_content);
    }
    


    emit orgApacheSlingJcrWebdavImplHandlerDefaultHandlerService( post,  apply,  _delete,  action,  location,  propertylist,  service_ranking,  type_collections,  type_noncollections,  type_content);
}


void OAIConfigmgrApiRequest::orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DirListingExportHandlerService";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic, handler, &OAIConfigmgrApiHandler::orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 service_ranking;   
    if(socket->queryString().keys().contains("service_ranking")){
        fromStringValue(socket->queryString().value("service_ranking"), service_ranking);
    }
    


    emit orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic( post,  apply,  _delete,  action,  location,  propertylist,  service_ranking);
}


void OAIConfigmgrApiRequest::orgApacheSlingJcrWebdavImplServletsSimpleWebDavServletRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.jcr.webdav.impl.servlets.SimpleWebDavServlet";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet, handler, &OAIConfigmgrApiHandler::orgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString dav_root;   
    if(socket->queryString().keys().contains("dav_root")){
        fromStringValue(socket->queryString().value("dav_root"), dav_root);
    }
    
    bool dav_create_absolute_uri;   
    if(socket->queryString().keys().contains("dav_create_absolute_uri")){
        fromStringValue(socket->queryString().value("dav_create_absolute_uri"), dav_create_absolute_uri);
    }
    
    QString dav_realm;   
    if(socket->queryString().keys().contains("dav_realm")){
        fromStringValue(socket->queryString().value("dav_realm"), dav_realm);
    }
    
    QList<QString> collection_types;   
    if(socket->queryString().keys().contains("collection_types")){
        fromStringValue(socket->queryString().values("collection_types"), collection_types);
    }
    
    QList<QString> filter_prefixes;   
    if(socket->queryString().keys().contains("filter_prefixes")){
        fromStringValue(socket->queryString().values("filter_prefixes"), filter_prefixes);
    }
    
    QString filter_types;   
    if(socket->queryString().keys().contains("filter_types")){
        fromStringValue(socket->queryString().value("filter_types"), filter_types);
    }
    
    QString filter_uris;   
    if(socket->queryString().keys().contains("filter_uris")){
        fromStringValue(socket->queryString().value("filter_uris"), filter_uris);
    }
    
    QString type_collections;   
    if(socket->queryString().keys().contains("type_collections")){
        fromStringValue(socket->queryString().value("type_collections"), type_collections);
    }
    
    QString type_noncollections;   
    if(socket->queryString().keys().contains("type_noncollections")){
        fromStringValue(socket->queryString().value("type_noncollections"), type_noncollections);
    }
    
    QString type_content;   
    if(socket->queryString().keys().contains("type_content")){
        fromStringValue(socket->queryString().value("type_content"), type_content);
    }
    


    emit orgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet( post,  apply,  _delete,  action,  location,  propertylist,  dav_root,  dav_create_absolute_uri,  dav_realm,  collection_types,  filter_prefixes,  filter_types,  filter_uris,  type_collections,  type_noncollections,  type_content);
}


void OAIConfigmgrApiRequest::orgApacheSlingJmxProviderImplJMXResourceProviderRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.jmx.provider.impl.JMXResourceProvider";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingJmxProviderImplJMXResourceProvider, handler, &OAIConfigmgrApiHandler::orgApacheSlingJmxProviderImplJMXResourceProvider);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString provider_roots;   
    if(socket->queryString().keys().contains("provider_roots")){
        fromStringValue(socket->queryString().value("provider_roots"), provider_roots);
    }
    


    emit orgApacheSlingJmxProviderImplJMXResourceProvider( post,  apply,  _delete,  action,  location,  propertylist,  provider_roots);
}


void OAIConfigmgrApiRequest::orgApacheSlingModelsImplModelAdapterFactoryRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.models.impl.ModelAdapterFactory";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingModelsImplModelAdapterFactory, handler, &OAIConfigmgrApiHandler::orgApacheSlingModelsImplModelAdapterFactory);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString osgi_http_whiteboard_listener;   
    if(socket->queryString().keys().contains("osgi_http_whiteboard_listener")){
        fromStringValue(socket->queryString().value("osgi_http_whiteboard_listener"), osgi_http_whiteboard_listener);
    }
    
    QString osgi_http_whiteboard_context_select;   
    if(socket->queryString().keys().contains("osgi_http_whiteboard_context_select")){
        fromStringValue(socket->queryString().value("osgi_http_whiteboard_context_select"), osgi_http_whiteboard_context_select);
    }
    
    qint32 max_recursion_depth;   
    if(socket->queryString().keys().contains("max_recursion_depth")){
        fromStringValue(socket->queryString().value("max_recursion_depth"), max_recursion_depth);
    }
    
    qint32 cleanup_job_period;   
    if(socket->queryString().keys().contains("cleanup_job_period")){
        fromStringValue(socket->queryString().value("cleanup_job_period"), cleanup_job_period);
    }
    


    emit orgApacheSlingModelsImplModelAdapterFactory( post,  apply,  _delete,  action,  location,  propertylist,  osgi_http_whiteboard_listener,  osgi_http_whiteboard_context_select,  max_recursion_depth,  cleanup_job_period);
}


void OAIConfigmgrApiRequest::orgApacheSlingModelsJacksonexporterImplResourceModuleProviderRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.models.jacksonexporter.impl.ResourceModuleProvider";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingModelsJacksonexporterImplResourceModuleProvider, handler, &OAIConfigmgrApiHandler::orgApacheSlingModelsJacksonexporterImplResourceModuleProvider);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 max_recursion_levels;   
    if(socket->queryString().keys().contains("max_recursion_levels")){
        fromStringValue(socket->queryString().value("max_recursion_levels"), max_recursion_levels);
    }
    


    emit orgApacheSlingModelsJacksonexporterImplResourceModuleProvider( post,  apply,  _delete,  action,  location,  propertylist,  max_recursion_levels);
}


void OAIConfigmgrApiRequest::orgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.resource.inventory.impl.ResourceInventoryPrinterFactory";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto, handler, &OAIConfigmgrApiHandler::orgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString felix_inventory_printer_name;   
    if(socket->queryString().keys().contains("felix_inventory_printer_name")){
        fromStringValue(socket->queryString().value("felix_inventory_printer_name"), felix_inventory_printer_name);
    }
    
    QString felix_inventory_printer_title;   
    if(socket->queryString().keys().contains("felix_inventory_printer_title")){
        fromStringValue(socket->queryString().value("felix_inventory_printer_title"), felix_inventory_printer_title);
    }
    
    QString path;   
    if(socket->queryString().keys().contains("path")){
        fromStringValue(socket->queryString().value("path"), path);
    }
    


    emit orgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto( post,  apply,  _delete,  action,  location,  propertylist,  felix_inventory_printer_name,  felix_inventory_printer_title,  path);
}


void OAIConfigmgrApiRequest::orgApacheSlingResourcemergerImplMergedResourceProviderFactoryRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.resourcemerger.impl.MergedResourceProviderFactory";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingResourcemergerImplMergedResourceProviderFactory, handler, &OAIConfigmgrApiHandler::orgApacheSlingResourcemergerImplMergedResourceProviderFactory);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString merge_root;   
    if(socket->queryString().keys().contains("merge_root")){
        fromStringValue(socket->queryString().value("merge_root"), merge_root);
    }
    
    bool merge_read_only;   
    if(socket->queryString().keys().contains("merge_read_only")){
        fromStringValue(socket->queryString().value("merge_read_only"), merge_read_only);
    }
    


    emit orgApacheSlingResourcemergerImplMergedResourceProviderFactory( post,  apply,  _delete,  action,  location,  propertylist,  merge_root,  merge_read_only);
}


void OAIConfigmgrApiRequest::orgApacheSlingResourcemergerPickerOverridingRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.resourcemerger.picker.overriding";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingResourcemergerPickerOverriding, handler, &OAIConfigmgrApiHandler::orgApacheSlingResourcemergerPickerOverriding);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString merge_root;   
    if(socket->queryString().keys().contains("merge_root")){
        fromStringValue(socket->queryString().value("merge_root"), merge_root);
    }
    
    bool merge_read_only;   
    if(socket->queryString().keys().contains("merge_read_only")){
        fromStringValue(socket->queryString().value("merge_read_only"), merge_read_only);
    }
    


    emit orgApacheSlingResourcemergerPickerOverriding( post,  apply,  _delete,  action,  location,  propertylist,  merge_root,  merge_read_only);
}


void OAIConfigmgrApiRequest::orgApacheSlingScriptingCoreImplScriptCacheImplRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptCacheImpl";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingScriptingCoreImplScriptCacheImpl, handler, &OAIConfigmgrApiHandler::orgApacheSlingScriptingCoreImplScriptCacheImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 org_apache_sling_scripting_cache_size;   
    if(socket->queryString().keys().contains("org_apache_sling_scripting_cache_size")){
        fromStringValue(socket->queryString().value("org_apache_sling_scripting_cache_size"), org_apache_sling_scripting_cache_size);
    }
    
    QList<QString> org_apache_sling_scripting_cache_additional_extensions;   
    if(socket->queryString().keys().contains("org_apache_sling_scripting_cache_additional_extensions")){
        fromStringValue(socket->queryString().values("org_apache_sling_scripting_cache_additional_extensions"), org_apache_sling_scripting_cache_additional_extensions);
    }
    


    emit orgApacheSlingScriptingCoreImplScriptCacheImpl( post,  apply,  _delete,  action,  location,  propertylist,  org_apache_sling_scripting_cache_size,  org_apache_sling_scripting_cache_additional_extensions);
}


void OAIConfigmgrApiRequest::orgApacheSlingScriptingCoreImplScriptingResourceResolverProviderRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptingResourceResolverProviderImpl";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingScriptingCoreImplScriptingResourceResolverProvider, handler, &OAIConfigmgrApiHandler::orgApacheSlingScriptingCoreImplScriptingResourceResolverProvider);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool log_stacktrace_onclose;   
    if(socket->queryString().keys().contains("log_stacktrace_onclose")){
        fromStringValue(socket->queryString().value("log_stacktrace_onclose"), log_stacktrace_onclose);
    }
    


    emit orgApacheSlingScriptingCoreImplScriptingResourceResolverProvider( post,  apply,  _delete,  action,  location,  propertylist,  log_stacktrace_onclose);
}


void OAIConfigmgrApiRequest::orgApacheSlingScriptingJavaImplJavaScriptEngineFactoryRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.scripting.java.impl.JavaScriptEngineFactory";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingScriptingJavaImplJavaScriptEngineFactory, handler, &OAIConfigmgrApiHandler::orgApacheSlingScriptingJavaImplJavaScriptEngineFactory);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool java_classdebuginfo;   
    if(socket->queryString().keys().contains("java_classdebuginfo")){
        fromStringValue(socket->queryString().value("java_classdebuginfo"), java_classdebuginfo);
    }
    
    QString java_java_encoding;   
    if(socket->queryString().keys().contains("java_java_encoding")){
        fromStringValue(socket->queryString().value("java_java_encoding"), java_java_encoding);
    }
    
    QString java_compiler_source_vm;   
    if(socket->queryString().keys().contains("java_compiler_source_vm")){
        fromStringValue(socket->queryString().value("java_compiler_source_vm"), java_compiler_source_vm);
    }
    
    QString java_compiler_target_vm;   
    if(socket->queryString().keys().contains("java_compiler_target_vm")){
        fromStringValue(socket->queryString().value("java_compiler_target_vm"), java_compiler_target_vm);
    }
    


    emit orgApacheSlingScriptingJavaImplJavaScriptEngineFactory( post,  apply,  _delete,  action,  location,  propertylist,  java_classdebuginfo,  java_java_encoding,  java_compiler_source_vm,  java_compiler_target_vm);
}


void OAIConfigmgrApiRequest::orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.scripting.javascript.internal.RhinoJavaScriptEngineFactory";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa, handler, &OAIConfigmgrApiHandler::orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 org_apache_sling_scripting_javascript_rhino_opt_level;   
    if(socket->queryString().keys().contains("org_apache_sling_scripting_javascript_rhino_opt_level")){
        fromStringValue(socket->queryString().value("org_apache_sling_scripting_javascript_rhino_opt_level"), org_apache_sling_scripting_javascript_rhino_opt_level);
    }
    


    emit orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa( post,  apply,  _delete,  action,  location,  propertylist,  org_apache_sling_scripting_javascript_rhino_opt_level);
}


void OAIConfigmgrApiRequest::orgApacheSlingScriptingJspJspScriptEngineFactoryRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.scripting.jsp.JspScriptEngineFactory";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingScriptingJspJspScriptEngineFactory, handler, &OAIConfigmgrApiHandler::orgApacheSlingScriptingJspJspScriptEngineFactory);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString jasper_compiler_target_vm;   
    if(socket->queryString().keys().contains("jasper_compiler_target_vm")){
        fromStringValue(socket->queryString().value("jasper_compiler_target_vm"), jasper_compiler_target_vm);
    }
    
    QString jasper_compiler_source_vm;   
    if(socket->queryString().keys().contains("jasper_compiler_source_vm")){
        fromStringValue(socket->queryString().value("jasper_compiler_source_vm"), jasper_compiler_source_vm);
    }
    
    bool jasper_classdebuginfo;   
    if(socket->queryString().keys().contains("jasper_classdebuginfo")){
        fromStringValue(socket->queryString().value("jasper_classdebuginfo"), jasper_classdebuginfo);
    }
    
    bool jasper_enable_pooling;   
    if(socket->queryString().keys().contains("jasper_enable_pooling")){
        fromStringValue(socket->queryString().value("jasper_enable_pooling"), jasper_enable_pooling);
    }
    
    QString jasper_ie_class_id;   
    if(socket->queryString().keys().contains("jasper_ie_class_id")){
        fromStringValue(socket->queryString().value("jasper_ie_class_id"), jasper_ie_class_id);
    }
    
    bool jasper_gen_string_as_char_array;   
    if(socket->queryString().keys().contains("jasper_gen_string_as_char_array")){
        fromStringValue(socket->queryString().value("jasper_gen_string_as_char_array"), jasper_gen_string_as_char_array);
    }
    
    bool jasper_keepgenerated;   
    if(socket->queryString().keys().contains("jasper_keepgenerated")){
        fromStringValue(socket->queryString().value("jasper_keepgenerated"), jasper_keepgenerated);
    }
    
    bool jasper_mappedfile;   
    if(socket->queryString().keys().contains("jasper_mappedfile")){
        fromStringValue(socket->queryString().value("jasper_mappedfile"), jasper_mappedfile);
    }
    
    bool jasper_trim_spaces;   
    if(socket->queryString().keys().contains("jasper_trim_spaces")){
        fromStringValue(socket->queryString().value("jasper_trim_spaces"), jasper_trim_spaces);
    }
    
    bool jasper_display_source_fragments;   
    if(socket->queryString().keys().contains("jasper_display_source_fragments")){
        fromStringValue(socket->queryString().value("jasper_display_source_fragments"), jasper_display_source_fragments);
    }
    
    bool default_is_session;   
    if(socket->queryString().keys().contains("default_is_session")){
        fromStringValue(socket->queryString().value("default_is_session"), default_is_session);
    }
    


    emit orgApacheSlingScriptingJspJspScriptEngineFactory( post,  apply,  _delete,  action,  location,  propertylist,  jasper_compiler_target_vm,  jasper_compiler_source_vm,  jasper_classdebuginfo,  jasper_enable_pooling,  jasper_ie_class_id,  jasper_gen_string_as_char_array,  jasper_keepgenerated,  jasper_mappedfile,  jasper_trim_spaces,  jasper_display_source_fragments,  default_is_session);
}


void OAIConfigmgrApiRequest::orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.scripting.sightly.js.impl.jsapi.SlyBindingsValuesProvider";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv, handler, &OAIConfigmgrApiHandler::orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> org_apache_sling_scripting_sightly_js_bindings;   
    if(socket->queryString().keys().contains("org_apache_sling_scripting_sightly_js_bindings")){
        fromStringValue(socket->queryString().values("org_apache_sling_scripting_sightly_js_bindings"), org_apache_sling_scripting_sightly_js_bindings);
    }
    


    emit orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv( post,  apply,  _delete,  action,  location,  propertylist,  org_apache_sling_scripting_sightly_js_bindings);
}


void OAIConfigmgrApiRequest::orgApacheSlingSecurityImplContentDispositionFilterRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.security.impl.ContentDispositionFilter";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingSecurityImplContentDispositionFilter, handler, &OAIConfigmgrApiHandler::orgApacheSlingSecurityImplContentDispositionFilter);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> sling_content_disposition_paths;   
    if(socket->queryString().keys().contains("sling_content_disposition_paths")){
        fromStringValue(socket->queryString().values("sling_content_disposition_paths"), sling_content_disposition_paths);
    }
    
    QList<QString> sling_content_disposition_excluded_paths;   
    if(socket->queryString().keys().contains("sling_content_disposition_excluded_paths")){
        fromStringValue(socket->queryString().values("sling_content_disposition_excluded_paths"), sling_content_disposition_excluded_paths);
    }
    
    bool sling_content_disposition_all_paths;   
    if(socket->queryString().keys().contains("sling_content_disposition_all_paths")){
        fromStringValue(socket->queryString().value("sling_content_disposition_all_paths"), sling_content_disposition_all_paths);
    }
    


    emit orgApacheSlingSecurityImplContentDispositionFilter( post,  apply,  _delete,  action,  location,  propertylist,  sling_content_disposition_paths,  sling_content_disposition_excluded_paths,  sling_content_disposition_all_paths);
}


void OAIConfigmgrApiRequest::orgApacheSlingSecurityImplReferrerFilterRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.security.impl.ReferrerFilter";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingSecurityImplReferrerFilter, handler, &OAIConfigmgrApiHandler::orgApacheSlingSecurityImplReferrerFilter);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool allow_empty;   
    if(socket->queryString().keys().contains("allow_empty")){
        fromStringValue(socket->queryString().value("allow_empty"), allow_empty);
    }
    
    QList<QString> allow_hosts;   
    if(socket->queryString().keys().contains("allow_hosts")){
        fromStringValue(socket->queryString().values("allow_hosts"), allow_hosts);
    }
    
    QList<QString> allow_hosts_regexp;   
    if(socket->queryString().keys().contains("allow_hosts_regexp")){
        fromStringValue(socket->queryString().values("allow_hosts_regexp"), allow_hosts_regexp);
    }
    
    QList<QString> filter_methods;   
    if(socket->queryString().keys().contains("filter_methods")){
        fromStringValue(socket->queryString().values("filter_methods"), filter_methods);
    }
    
    QList<QString> exclude_agents_regexp;   
    if(socket->queryString().keys().contains("exclude_agents_regexp")){
        fromStringValue(socket->queryString().values("exclude_agents_regexp"), exclude_agents_regexp);
    }
    


    emit orgApacheSlingSecurityImplReferrerFilter( post,  apply,  _delete,  action,  location,  propertylist,  allow_empty,  allow_hosts,  allow_hosts_regexp,  filter_methods,  exclude_agents_regexp);
}


void OAIConfigmgrApiRequest::orgApacheSlingServiceusermappingImplServiceUserMapperImplRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingServiceusermappingImplServiceUserMapperImpl, handler, &OAIConfigmgrApiHandler::orgApacheSlingServiceusermappingImplServiceUserMapperImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> user_mapping;   
    if(socket->queryString().keys().contains("user_mapping")){
        fromStringValue(socket->queryString().values("user_mapping"), user_mapping);
    }
    
    QString user_default;   
    if(socket->queryString().keys().contains("user_default")){
        fromStringValue(socket->queryString().value("user_default"), user_default);
    }
    
    bool user_enable_default_mapping;   
    if(socket->queryString().keys().contains("user_enable_default_mapping")){
        fromStringValue(socket->queryString().value("user_enable_default_mapping"), user_enable_default_mapping);
    }
    
    bool require_validation;   
    if(socket->queryString().keys().contains("require_validation")){
        fromStringValue(socket->queryString().value("require_validation"), require_validation);
    }
    


    emit orgApacheSlingServiceusermappingImplServiceUserMapperImpl( post,  apply,  _delete,  action,  location,  propertylist,  user_mapping,  user_default,  user_enable_default_mapping,  require_validation);
}


void OAIConfigmgrApiRequest::orgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl.amended";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingServiceusermappingImplServiceUserMapperImplAmended, handler, &OAIConfigmgrApiHandler::orgApacheSlingServiceusermappingImplServiceUserMapperImplAmended);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    qint32 service_ranking;   
    if(socket->queryString().keys().contains("service_ranking")){
        fromStringValue(socket->queryString().value("service_ranking"), service_ranking);
    }
    
    QList<QString> user_mapping;   
    if(socket->queryString().keys().contains("user_mapping")){
        fromStringValue(socket->queryString().values("user_mapping"), user_mapping);
    }
    


    emit orgApacheSlingServiceusermappingImplServiceUserMapperImplAmended( post,  apply,  _delete,  action,  location,  propertylist,  service_ranking,  user_mapping);
}


void OAIConfigmgrApiRequest::orgApacheSlingServletsGetDefaultGetServletRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.servlets.get.DefaultGetServlet";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingServletsGetDefaultGetServlet, handler, &OAIConfigmgrApiHandler::orgApacheSlingServletsGetDefaultGetServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> aliases;   
    if(socket->queryString().keys().contains("aliases")){
        fromStringValue(socket->queryString().values("aliases"), aliases);
    }
    
    bool index;   
    if(socket->queryString().keys().contains("index")){
        fromStringValue(socket->queryString().value("index"), index);
    }
    
    QList<QString> index_files;   
    if(socket->queryString().keys().contains("index_files")){
        fromStringValue(socket->queryString().values("index_files"), index_files);
    }
    
    bool enable_html;   
    if(socket->queryString().keys().contains("enable_html")){
        fromStringValue(socket->queryString().value("enable_html"), enable_html);
    }
    
    bool enable_json;   
    if(socket->queryString().keys().contains("enable_json")){
        fromStringValue(socket->queryString().value("enable_json"), enable_json);
    }
    
    bool enable_txt;   
    if(socket->queryString().keys().contains("enable_txt")){
        fromStringValue(socket->queryString().value("enable_txt"), enable_txt);
    }
    
    bool enable_xml;   
    if(socket->queryString().keys().contains("enable_xml")){
        fromStringValue(socket->queryString().value("enable_xml"), enable_xml);
    }
    
    qint32 json_maximumresults;   
    if(socket->queryString().keys().contains("json_maximumresults")){
        fromStringValue(socket->queryString().value("json_maximumresults"), json_maximumresults);
    }
    
    bool ecma_suport;   
    if(socket->queryString().keys().contains("ecma_suport")){
        fromStringValue(socket->queryString().value("ecma_suport"), ecma_suport);
    }
    


    emit orgApacheSlingServletsGetDefaultGetServlet( post,  apply,  _delete,  action,  location,  propertylist,  aliases,  index,  index_files,  enable_html,  enable_json,  enable_txt,  enable_xml,  json_maximumresults,  ecma_suport);
}


void OAIConfigmgrApiRequest::orgApacheSlingServletsGetImplVersionVersionInfoServletRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.servlets.get.impl.version.VersionInfoServlet";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingServletsGetImplVersionVersionInfoServlet, handler, &OAIConfigmgrApiHandler::orgApacheSlingServletsGetImplVersionVersionInfoServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> sling_servlet_selectors;   
    if(socket->queryString().keys().contains("sling_servlet_selectors")){
        fromStringValue(socket->queryString().values("sling_servlet_selectors"), sling_servlet_selectors);
    }
    
    bool ecma_suport;   
    if(socket->queryString().keys().contains("ecma_suport")){
        fromStringValue(socket->queryString().value("ecma_suport"), ecma_suport);
    }
    


    emit orgApacheSlingServletsGetImplVersionVersionInfoServlet( post,  apply,  _delete,  action,  location,  propertylist,  sling_servlet_selectors,  ecma_suport);
}


void OAIConfigmgrApiRequest::orgApacheSlingServletsPostImplHelperChunkCleanUpTaskRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.servlets.post.impl.helper.ChunkCleanUpTask";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingServletsPostImplHelperChunkCleanUpTask, handler, &OAIConfigmgrApiHandler::orgApacheSlingServletsPostImplHelperChunkCleanUpTask);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString scheduler_expression;   
    if(socket->queryString().keys().contains("scheduler_expression")){
        fromStringValue(socket->queryString().value("scheduler_expression"), scheduler_expression);
    }
    
    bool scheduler_concurrent;   
    if(socket->queryString().keys().contains("scheduler_concurrent")){
        fromStringValue(socket->queryString().value("scheduler_concurrent"), scheduler_concurrent);
    }
    
    qint32 chunk_cleanup_age;   
    if(socket->queryString().keys().contains("chunk_cleanup_age")){
        fromStringValue(socket->queryString().value("chunk_cleanup_age"), chunk_cleanup_age);
    }
    


    emit orgApacheSlingServletsPostImplHelperChunkCleanUpTask( post,  apply,  _delete,  action,  location,  propertylist,  scheduler_expression,  scheduler_concurrent,  chunk_cleanup_age);
}


void OAIConfigmgrApiRequest::orgApacheSlingServletsPostImplSlingPostServletRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.servlets.post.impl.SlingPostServlet";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingServletsPostImplSlingPostServlet, handler, &OAIConfigmgrApiHandler::orgApacheSlingServletsPostImplSlingPostServlet);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> servlet_post_date_formats;   
    if(socket->queryString().keys().contains("servlet_post_date_formats")){
        fromStringValue(socket->queryString().values("servlet_post_date_formats"), servlet_post_date_formats);
    }
    
    QList<QString> servlet_post_node_name_hints;   
    if(socket->queryString().keys().contains("servlet_post_node_name_hints")){
        fromStringValue(socket->queryString().values("servlet_post_node_name_hints"), servlet_post_node_name_hints);
    }
    
    qint32 servlet_post_node_name_max_length;   
    if(socket->queryString().keys().contains("servlet_post_node_name_max_length")){
        fromStringValue(socket->queryString().value("servlet_post_node_name_max_length"), servlet_post_node_name_max_length);
    }
    
    bool servlet_post_checkin_new_versionable_nodes;   
    if(socket->queryString().keys().contains("servlet_post_checkin_new_versionable_nodes")){
        fromStringValue(socket->queryString().value("servlet_post_checkin_new_versionable_nodes"), servlet_post_checkin_new_versionable_nodes);
    }
    
    bool servlet_post_auto_checkout;   
    if(socket->queryString().keys().contains("servlet_post_auto_checkout")){
        fromStringValue(socket->queryString().value("servlet_post_auto_checkout"), servlet_post_auto_checkout);
    }
    
    bool servlet_post_auto_checkin;   
    if(socket->queryString().keys().contains("servlet_post_auto_checkin")){
        fromStringValue(socket->queryString().value("servlet_post_auto_checkin"), servlet_post_auto_checkin);
    }
    
    QString servlet_post_ignore_pattern;   
    if(socket->queryString().keys().contains("servlet_post_ignore_pattern")){
        fromStringValue(socket->queryString().value("servlet_post_ignore_pattern"), servlet_post_ignore_pattern);
    }
    


    emit orgApacheSlingServletsPostImplSlingPostServlet( post,  apply,  _delete,  action,  location,  propertylist,  servlet_post_date_formats,  servlet_post_node_name_hints,  servlet_post_node_name_max_length,  servlet_post_checkin_new_versionable_nodes,  servlet_post_auto_checkout,  servlet_post_auto_checkin,  servlet_post_ignore_pattern);
}


void OAIConfigmgrApiRequest::orgApacheSlingServletsResolverSlingServletResolverRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.servlets.resolver.SlingServletResolver";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingServletsResolverSlingServletResolver, handler, &OAIConfigmgrApiHandler::orgApacheSlingServletsResolverSlingServletResolver);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString servletresolver_servlet_root;   
    if(socket->queryString().keys().contains("servletresolver_servlet_root")){
        fromStringValue(socket->queryString().value("servletresolver_servlet_root"), servletresolver_servlet_root);
    }
    
    qint32 servletresolver_cache_size;   
    if(socket->queryString().keys().contains("servletresolver_cache_size")){
        fromStringValue(socket->queryString().value("servletresolver_cache_size"), servletresolver_cache_size);
    }
    
    QList<QString> servletresolver_paths;   
    if(socket->queryString().keys().contains("servletresolver_paths")){
        fromStringValue(socket->queryString().values("servletresolver_paths"), servletresolver_paths);
    }
    
    QList<QString> servletresolver_default_extensions;   
    if(socket->queryString().keys().contains("servletresolver_default_extensions")){
        fromStringValue(socket->queryString().values("servletresolver_default_extensions"), servletresolver_default_extensions);
    }
    


    emit orgApacheSlingServletsResolverSlingServletResolver( post,  apply,  _delete,  action,  location,  propertylist,  servletresolver_servlet_root,  servletresolver_cache_size,  servletresolver_paths,  servletresolver_default_extensions);
}


void OAIConfigmgrApiRequest::orgApacheSlingSettingsImplSlingSettingsServiceImplRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.settings.impl.SlingSettingsServiceImpl";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingSettingsImplSlingSettingsServiceImpl, handler, &OAIConfigmgrApiHandler::orgApacheSlingSettingsImplSlingSettingsServiceImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString sling_name;   
    if(socket->queryString().keys().contains("sling_name")){
        fromStringValue(socket->queryString().value("sling_name"), sling_name);
    }
    
    QString sling_description;   
    if(socket->queryString().keys().contains("sling_description")){
        fromStringValue(socket->queryString().value("sling_description"), sling_description);
    }
    


    emit orgApacheSlingSettingsImplSlingSettingsServiceImpl( post,  apply,  _delete,  action,  location,  propertylist,  sling_name,  sling_description);
}


void OAIConfigmgrApiRequest::orgApacheSlingStartupfilterImplStartupFilterImplRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.startupfilter.impl.StartupFilterImpl";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingStartupfilterImplStartupFilterImpl, handler, &OAIConfigmgrApiHandler::orgApacheSlingStartupfilterImplStartupFilterImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    bool active_by_default;   
    if(socket->queryString().keys().contains("active_by_default")){
        fromStringValue(socket->queryString().value("active_by_default"), active_by_default);
    }
    
    QString default_message;   
    if(socket->queryString().keys().contains("default_message")){
        fromStringValue(socket->queryString().value("default_message"), default_message);
    }
    


    emit orgApacheSlingStartupfilterImplStartupFilterImpl( post,  apply,  _delete,  action,  location,  propertylist,  active_by_default,  default_message);
}


void OAIConfigmgrApiRequest::orgApacheSlingTenantInternalTenantProviderImplRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.tenant.internal.TenantProviderImpl";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingTenantInternalTenantProviderImpl, handler, &OAIConfigmgrApiHandler::orgApacheSlingTenantInternalTenantProviderImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString tenant_root;   
    if(socket->queryString().keys().contains("tenant_root")){
        fromStringValue(socket->queryString().value("tenant_root"), tenant_root);
    }
    
    QList<QString> tenant_path_matcher;   
    if(socket->queryString().keys().contains("tenant_path_matcher")){
        fromStringValue(socket->queryString().values("tenant_path_matcher"), tenant_path_matcher);
    }
    


    emit orgApacheSlingTenantInternalTenantProviderImpl( post,  apply,  _delete,  action,  location,  propertylist,  tenant_root,  tenant_path_matcher);
}


void OAIConfigmgrApiRequest::orgApacheSlingTracerInternalLogTracerRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.tracer.internal.LogTracer";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingTracerInternalLogTracer, handler, &OAIConfigmgrApiHandler::orgApacheSlingTracerInternalLogTracer);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QList<QString> tracer_sets;   
    if(socket->queryString().keys().contains("tracer_sets")){
        fromStringValue(socket->queryString().values("tracer_sets"), tracer_sets);
    }
    
    bool enabled;   
    if(socket->queryString().keys().contains("enabled")){
        fromStringValue(socket->queryString().value("enabled"), enabled);
    }
    
    bool servlet_enabled;   
    if(socket->queryString().keys().contains("servlet_enabled")){
        fromStringValue(socket->queryString().value("servlet_enabled"), servlet_enabled);
    }
    
    qint32 recording_cache_size_in_mb;   
    if(socket->queryString().keys().contains("recording_cache_size_in_mb")){
        fromStringValue(socket->queryString().value("recording_cache_size_in_mb"), recording_cache_size_in_mb);
    }
    
    qint32 recording_cache_duration_in_secs;   
    if(socket->queryString().keys().contains("recording_cache_duration_in_secs")){
        fromStringValue(socket->queryString().value("recording_cache_duration_in_secs"), recording_cache_duration_in_secs);
    }
    
    bool recording_compression_enabled;   
    if(socket->queryString().keys().contains("recording_compression_enabled")){
        fromStringValue(socket->queryString().value("recording_compression_enabled"), recording_compression_enabled);
    }
    
    bool gzip_response;   
    if(socket->queryString().keys().contains("gzip_response")){
        fromStringValue(socket->queryString().value("gzip_response"), gzip_response);
    }
    


    emit orgApacheSlingTracerInternalLogTracer( post,  apply,  _delete,  action,  location,  propertylist,  tracer_sets,  enabled,  servlet_enabled,  recording_cache_size_in_mb,  recording_cache_duration_in_secs,  recording_compression_enabled,  gzip_response);
}


void OAIConfigmgrApiRequest::orgApacheSlingXssImplXSSFilterImplRequest(){
    qDebug() << "//system/console/configMgr/org.apache.sling.xss.impl.XSSFilterImpl";
    connect(this, &OAIConfigmgrApiRequest::orgApacheSlingXssImplXSSFilterImpl, handler, &OAIConfigmgrApiHandler::orgApacheSlingXssImplXSSFilterImpl);
    
    
    bool post;   
    if(socket->queryString().keys().contains("post")){
        fromStringValue(socket->queryString().value("post"), post);
    }
    
    bool apply;   
    if(socket->queryString().keys().contains("apply")){
        fromStringValue(socket->queryString().value("apply"), apply);
    }
    
    bool _delete;   
    if(socket->queryString().keys().contains("_delete")){
        fromStringValue(socket->queryString().value("_delete"), _delete);
    }
    
    QString action;   
    if(socket->queryString().keys().contains("action")){
        fromStringValue(socket->queryString().value("action"), action);
    }
    
    QString location;   
    if(socket->queryString().keys().contains("location")){
        fromStringValue(socket->queryString().value("location"), location);
    }
    
    QList<QString> propertylist;   
    if(socket->queryString().keys().contains("propertylist")){
        fromStringValue(socket->queryString().values("propertylist"), propertylist);
    }
    
    QString policy_path;   
    if(socket->queryString().keys().contains("policy_path")){
        fromStringValue(socket->queryString().value("policy_path"), policy_path);
    }
    


    emit orgApacheSlingXssImplXSSFilterImpl( post,  apply,  _delete,  action,  location,  propertylist,  policy_path);
}

  

void OAIConfigmgrApiRequest::adaptiveFormAndInteractiveCommunicationWebChannelConfigurationResponse(const OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurResponse(const OAIAdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::analyticsComponentQueryCacheServiceResponse(const OAIAnalyticsComponentQueryCacheServiceInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::apacheSlingHealthCheckResultHTMLSerializerResponse(const OAIApacheSlingHealthCheckResultHTMLSerializerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationResponse(const OAIComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeAemTransactionCoreImplTransactionRecorderResponse(const OAIComAdobeAemTransactionCoreImplTransactionRecorderInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCResponse(const OAIComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCResponse(const OAIComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplResponse(const OAIComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplResponse(const OAIComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqAccountApiAccountManagementServiceResponse(const OAIComAdobeCqAccountApiAccountManagementServiceInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqAccountImplAccountManagementServletResponse(const OAIComAdobeCqAccountImplAccountManagementServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqAddressImplLocationLocationListServletResponse(const OAIComAdobeCqAddressImplLocationLocationListServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqAuditPurgeDamResponse(const OAIComAdobeCqAuditPurgeDamInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqAuditPurgePagesResponse(const OAIComAdobeCqAuditPurgePagesInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqAuditPurgeReplicationResponse(const OAIComAdobeCqAuditPurgeReplicationInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqCdnRewriterImplAWSCloudFrontRewriterResponse(const OAIComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqCdnRewriterImplCDNConfigServiceImplResponse(const OAIComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqCdnRewriterImplCDNRewriterResponse(const OAIComAdobeCqCdnRewriterImplCDNRewriterInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleResponse(const OAIComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqCommerceImplAssetDynamicImageHandlerResponse(const OAIComAdobeCqCommerceImplAssetDynamicImageHandlerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqCommerceImplAssetProductAssetHandlerProviderImplResponse(const OAIComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqCommerceImplAssetStaticImageHandlerResponse(const OAIComAdobeCqCommerceImplAssetStaticImageHandlerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqCommerceImplAssetVideoHandlerResponse(const OAIComAdobeCqCommerceImplAssetVideoHandlerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqCommerceImplPromotionPromotionManagerImplResponse(const OAIComAdobeCqCommerceImplPromotionPromotionManagerImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplResponse(const OAIComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqCommercePimImplPageEventListenerResponse(const OAIComAdobeCqCommercePimImplPageEventListenerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqCommercePimImplProductfeedProductFeedServiceImplResponse(const OAIComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqContentinsightImplReportingServicesSettingsProviderResponse(const OAIComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqContentinsightImplServletsBrightEdgeProxyServletResponse(const OAIComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqContentinsightImplServletsReportingServicesProxyServleResponse(const OAIComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqDamCfmImplComponentComponentConfigImplResponse(const OAIComAdobeCqDamCfmImplComponentComponentConfigImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqDamCfmImplConfFeatureConfigImplResponse(const OAIComAdobeCqDamCfmImplConfFeatureConfigImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqDamCfmImplContentRewriterAssetProcessorResponse(const OAIComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqDamCfmImplContentRewriterParRangeFilterResponse(const OAIComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqDamCfmImplContentRewriterPayloadFilterResponse(const OAIComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqDamDmProcessImagePTiffManagerImplResponse(const OAIComAdobeCqDamDmProcessImagePTiffManagerImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerResponse(const OAIComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqDamMacSyncHelperImplMACSyncClientImplResponse(const OAIComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqDamMacSyncImplDAMSyncServiceImplResponse(const OAIComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqDamProcessorNuiImplNuiAssetProcessorResponse(const OAIComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqDamS7imagingImplIsImageServerComponentResponse(const OAIComAdobeCqDamS7imagingImplIsImageServerComponentInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqDamS7imagingImplPsPlatformServerServletResponse(const OAIComAdobeCqDamS7imagingImplPsPlatformServerServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqDamWebdavImplIoAssetIOHandlerResponse(const OAIComAdobeCqDamWebdavImplIoAssetIOHandlerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobResponse(const OAIComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqDamWebdavImplIoSpecialFilesHandlerResponse(const OAIComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqDeserfwImplDeserializationFirewallImplResponse(const OAIComAdobeCqDeserfwImplDeserializationFirewallImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqDtmImplServiceDTMWebServiceImplResponse(const OAIComAdobeCqDtmImplServiceDTMWebServiceImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqDtmImplServletsDTMDeployHookServletResponse(const OAIComAdobeCqDtmImplServletsDTMDeployHookServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqDtmReactorImplServiceWebServiceImplResponse(const OAIComAdobeCqDtmReactorImplServiceWebServiceImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqExperiencelogImplExperienceLogConfigServletResponse(const OAIComAdobeCqExperiencelogImplExperienceLogConfigServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqHcContentPackagesHealthCheckResponse(const OAIComAdobeCqHcContentPackagesHealthCheckInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqHistoryImplHistoryRequestFilterResponse(const OAIComAdobeCqHistoryImplHistoryRequestFilterInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqHistoryImplHistoryServiceImplResponse(const OAIComAdobeCqHistoryImplHistoryServiceImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqInboxImplTypeproviderItemTypeProviderResponse(const OAIComAdobeCqInboxImplTypeproviderItemTypeProviderInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqProjectsImplServletProjectImageServletResponse(const OAIComAdobeCqProjectsImplServletProjectImageServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqProjectsPurgeSchedulerResponse(const OAIComAdobeCqProjectsPurgeSchedulerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqScheduledExporterImplScheduledExporterImplResponse(const OAIComAdobeCqScheduledExporterImplScheduledExporterImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplResponse(const OAIComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqScreensDeviceImplDeviceServiceResponse(const OAIComAdobeCqScreensDeviceImplDeviceServiceInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplResponse(const OAIComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqScreensImplHandlerChannelsUpdateHandlerResponse(const OAIComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobResponse(const OAIComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqScreensImplRemoteImplDistributedHttpClientImplResponse(const OAIComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqScreensImplScreensChannelPostProcessorResponse(const OAIComAdobeCqScreensImplScreensChannelPostProcessorInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplResponse(const OAIComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqScreensMqActivemqImplArtemisJMSProviderResponse(const OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplResponse(const OAIComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqScreensOfflinecontentImplOfflineContentServiceImplResponse(const OAIComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqScreensSegmentationImplSegmentationFeatureFlagResponse(const OAIComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChResponse(const OAIComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckResponse(const OAIComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckResponse(const OAIComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSecurityHcPackagesImplExampleContentHealthCheckResponse(const OAIComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSecurityHcWebserverImplClickjackingHealthCheckResponse(const OAIComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialAccountverificationImplAccountManagementConfigImResponse(const OAIComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialActivitystreamsClientImplSocialActivityComponenResponse(const OAIComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoResponse(const OAIComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerResponse(const OAIComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialActivitystreamsListenerImplModerationEventExtenResponse(const OAIComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySResponse(const OAIComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialActivitystreamsListenerImplResourceActivityStreResponse(const OAIComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIResponse(const OAIComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialCalendarClientOperationextensionsEventAttachmenResponse(const OAIComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialCalendarServletsTimeZoneServletResponse(const OAIComAdobeCqSocialCalendarServletsTimeZoneServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventResponse(const OAIComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeResponse(const OAIComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiResponse(const OAIComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCResponse(const OAIComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosResponse(const OAIComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsCorsCORSAuthenticationFilterResponse(const OAIComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderResponse(const OAIComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplResponse(const OAIComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerResponse(const OAIComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderResponse(const OAIComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpResponse(const OAIComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpResponse(const OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterResponse(const OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderResponse(const OAIComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderResponse(const OAIComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderResponse(const OAIComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderResponse(const OAIComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderResponse(const OAIComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderResponse(const OAIComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadResponse(const OAIComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplResponse(const OAIComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitResponse(const OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialConnectOauthImplFacebookProviderImplResponse(const OAIComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleResponse(const OAIComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperResponse(const OAIComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialConnectOauthImplTwitterProviderImplResponse(const OAIComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenResponse(const OAIComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialDatastoreAsImplASResourceProviderFactoryResponse(const OAIComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryResponse(const OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorResponse(const OAIComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFResponse(const OAIComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoResponse(const OAIComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLResponse(const OAIComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialEnablementResourceEndpointsImplEnablementResouResponse(const OAIComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialEnablementServicesImplAuthorMarkerImplResponse(const OAIComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeResponse(const OAIComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaResponse(const OAIComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialForumClientEndpointsImplForumOperationsServiceResponse(const OAIComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialForumDispatcherImplFlushOperationsResponse(const OAIComAdobeCqSocialForumDispatcherImplFlushOperationsInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenResponse(const OAIComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialGroupImplGroupServiceImplResponse(const OAIComAdobeCqSocialGroupImplGroupServiceImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialHandlebarsGuavaTemplateCacheImplResponse(const OAIComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSResponse(const OAIComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerResponse(const OAIComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileResponse(const OAIComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOResponse(const OAIComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFResponse(const OAIComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialMessagingClientEndpointsImplMessagingOperationResponse(const OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenResponse(const OAIComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialModerationDashboardApiModerationDashboardSocialResponse(const OAIComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenResponse(const OAIComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialModerationDashboardInternalImplFilterGroupSociResponse(const OAIComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialNotificationsImplMentionsRouterResponse(const OAIComAdobeCqSocialNotificationsImplMentionsRouterInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialNotificationsImplNotificationManagerImplResponse(const OAIComAdobeCqSocialNotificationsImplNotificationManagerImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialNotificationsImplNotificationsRouterResponse(const OAIComAdobeCqSocialNotificationsImplNotificationsRouterInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicResponse(const OAIComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIResponse(const OAIComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMResponse(const OAIComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSResponse(const OAIComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiResponse(const OAIComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialScfCoreOperationsImplSocialOperationsServletResponse(const OAIComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialScfEndpointsImplDefaultSocialGetServletResponse(const OAIComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialScoringImplScoringEventListenerResponse(const OAIComAdobeCqSocialScoringImplScoringEventListenerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplResponse(const OAIComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialSiteEndpointsImplSiteOperationServiceResponse(const OAIComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImResponse(const OAIComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialSiteImplSiteConfiguratorImplResponse(const OAIComAdobeCqSocialSiteImplSiteConfiguratorImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialSrpImplSocialSolrConnectorResponse(const OAIComAdobeCqSocialSrpImplSocialSolrConnectorInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialSyncImplDiffChangesObserverResponse(const OAIComAdobeCqSocialSyncImplDiffChangesObserverInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialSyncImplGroupSyncListenerImplResponse(const OAIComAdobeCqSocialSyncImplGroupSyncListenerImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialSyncImplPublisherSyncServiceImplResponse(const OAIComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialSyncImplUserSyncListenerImplResponse(const OAIComAdobeCqSocialSyncImplUserSyncListenerImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialTranslationImplTranslationServiceConfigManagerResponse(const OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialTranslationImplUGCLanguageDetectorResponse(const OAIComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplResponse(const OAIComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplResponse(const OAIComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialUgcbaseImplPublisherConfigurationImplResponse(const OAIComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialUgcbaseImplSocialUtilsImplResponse(const OAIComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialUgcbaseModerationImplAutoModerationImplResponse(const OAIComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialUgcbaseModerationImplSentimentProcessResponse(const OAIComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliResponse(const OAIComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplResponse(const OAIComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletResponse(const OAIComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialUserImplTransportHttpToPublisherResponse(const OAIComAdobeCqSocialUserImplTransportHttpToPublisherInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactResponse(const OAIComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqUpgradesCleanupImplUpgradeContentCleanupResponse(const OAIComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupResponse(const OAIComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceResponse(const OAIComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskResponse(const OAIComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceResponse(const OAIComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceResponse(const OAIComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqWcmLaunchesImplLaunchesEventHandlerResponse(const OAIComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorResponse(const OAIComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqWcmStyleInternalComponentStyleInfoCacheImplResponse(const OAIComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplResponse(const OAIComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceResponse(const OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeFdFpConfigFormsPortalSchedulerServiceResponse(const OAIComAdobeFdFpConfigFormsPortalSchedulerServiceInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeFormsCommonServiceImplDefaultDataProviderResponse(const OAIComAdobeFormsCommonServiceImplDefaultDataProviderInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpResponse(const OAIComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeFormsCommonServletTempCleanUpTaskResponse(const OAIComAdobeFormsCommonServletTempCleanUpTaskInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteAcpPlatformPlatformServletResponse(const OAIComAdobeGraniteAcpPlatformPlatformServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteActivitystreamsImplActivityManagerImplResponse(const OAIComAdobeGraniteActivitystreamsImplActivityManagerImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteAnalyzerBaseSystemStatusServletResponse(const OAIComAdobeGraniteAnalyzerBaseSystemStatusServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletResponse(const OAIComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteApicontrollerFilterResolverHookFactoryResponse(const OAIComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteAuthCertImplClientCertAuthHandlerResponse(const OAIComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteAuthImsResponse(const OAIComAdobeGraniteAuthImsInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionResponse(const OAIComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplResponse(const OAIComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorResponse(const OAIComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteAuthImsImplIMSProviderImplResponse(const OAIComAdobeGraniteAuthImsImplIMSProviderImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteAuthImsImplImsConfigProviderImplResponse(const OAIComAdobeGraniteAuthImsImplImsConfigProviderImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteAuthOauthAccesstokenProviderResponse(const OAIComAdobeGraniteAuthOauthAccesstokenProviderInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteAuthOauthImplBearerAuthenticationHandlerResponse(const OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteAuthOauthImplDefaultTokenValidatorImplResponse(const OAIComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteAuthOauthImplFacebookProviderImplResponse(const OAIComAdobeGraniteAuthOauthImplFacebookProviderImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteAuthOauthImplGithubProviderImplResponse(const OAIComAdobeGraniteAuthOauthImplGithubProviderImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteAuthOauthImplGraniteProviderResponse(const OAIComAdobeGraniteAuthOauthImplGraniteProviderInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteAuthOauthImplHelperProviderConfigManagerResponse(const OAIComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalResponse(const OAIComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerResponse(const OAIComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteAuthOauthImplTwitterProviderImplResponse(const OAIComAdobeGraniteAuthOauthImplTwitterProviderImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteAuthOauthProviderResponse(const OAIComAdobeGraniteAuthOauthProviderInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteAuthRequirementImplDefaultRequirementHandlerResponse(const OAIComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteAuthSamlSamlAuthenticationHandlerResponse(const OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteAuthSsoImplSsoAuthenticationHandlerResponse(const OAIComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteBundlesHcImplCodeCacheHealthCheckResponse(const OAIComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckResponse(const OAIComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteBundlesHcImplDavExBundleHealthCheckResponse(const OAIComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckResponse(const OAIComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteBundlesHcImplJobsHealthCheckResponse(const OAIComAdobeGraniteBundlesHcImplJobsHealthCheckInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteBundlesHcImplSlingGetServletHealthCheckResponse(const OAIComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckResponse(const OAIComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckResponse(const OAIComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckResponse(const OAIComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteBundlesHcImplWebDavBundleHealthCheckResponse(const OAIComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteCommentsInternalCommentReplicationContentFilterFacResponse(const OAIComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteCompatrouterImplCompatSwitchingServiceImplResponse(const OAIComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteCompatrouterImplRoutingConfigResponse(const OAIComAdobeGraniteCompatrouterImplRoutingConfigInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteCompatrouterImplSwitchMappingConfigResponse(const OAIComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingResponse(const OAIComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteContexthubImplContextHubImplResponse(const OAIComAdobeGraniteContexthubImplContextHubImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteCorsImplCORSPolicyImplResponse(const OAIComAdobeGraniteCorsImplCORSPolicyImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteCsrfImplCSRFFilterResponse(const OAIComAdobeGraniteCsrfImplCSRFFilterInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteCsrfImplCSRFServletResponse(const OAIComAdobeGraniteCsrfImplCSRFServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeResponse(const OAIComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteDistributionCoreImplDiffDiffChangesObserverResponse(const OAIComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteDistributionCoreImplDiffDiffEventListenerResponse(const OAIComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteDistributionCoreImplDistributionToReplicationEvenResponse(const OAIComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatResponse(const OAIComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteDistributionCoreImplReplicationDistributionTransResponse(const OAIComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuResponse(const OAIComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteFragsImplCheckHttpHeaderFlagResponse(const OAIComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteFragsImplRandomFeatureResponse(const OAIComAdobeGraniteFragsImplRandomFeatureInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteHttpcacheFileFileCacheStoreResponse(const OAIComAdobeGraniteHttpcacheFileFileCacheStoreInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteHttpcacheImplOuterCacheFilterResponse(const OAIComAdobeGraniteHttpcacheImplOuterCacheFilterInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteI18nImplBundlePseudoTranslationsResponse(const OAIComAdobeGraniteI18nImplBundlePseudoTranslationsInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteI18nImplPreferencesLocaleResolverServiceResponse(const OAIComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteInfocollectorInfoCollectorResponse(const OAIComAdobeGraniteInfocollectorInfoCollectorInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteJettySslInternalGraniteSslConnectorFactoryResponse(const OAIComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteLicenseImplLicenseCheckFilterResponse(const OAIComAdobeGraniteLicenseImplLicenseCheckFilterInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteLoggingImplLogAnalyserImplResponse(const OAIComAdobeGraniteLoggingImplLogAnalyserImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteLoggingImplLogErrorHealthCheckResponse(const OAIComAdobeGraniteLoggingImplLogErrorHealthCheckInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskResponse(const OAIComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskResponse(const OAIComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskResponse(const OAIComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteMonitoringImplScriptConfigImplResponse(const OAIComAdobeGraniteMonitoringImplScriptConfigImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanResponse(const OAIComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteOauthServerImplAccessTokenCleanupTaskResponse(const OAIComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteOauthServerImplOAuth2ClientRevocationServletResponse(const OAIComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletResponse(const OAIComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteOauthServerImplOAuth2TokenEndpointServletResponse(const OAIComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteOauthServerImplOAuth2TokenRevocationServletResponse(const OAIComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteOffloadingImplOffloadingConfiguratorResponse(const OAIComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteOffloadingImplOffloadingJobClonerResponse(const OAIComAdobeGraniteOffloadingImplOffloadingJobClonerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteOffloadingImplOffloadingJobOffloaderResponse(const OAIComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerResponse(const OAIComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoResponse(const OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplResponse(const OAIComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteOptoutImplOptOutServiceImplResponse(const OAIComAdobeGraniteOptoutImplOptOutServiceImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteQueriesImplHcAsyncIndexHealthCheckResponse(const OAIComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteQueriesImplHcLargeIndexHealthCheckResponse(const OAIComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteQueriesImplHcQueriesStatusHealthCheckResponse(const OAIComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteQueriesImplHcQueryHealthCheckMetricsResponse(const OAIComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteQueriesImplHcQueryLimitsHealthCheckResponse(const OAIComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteReplicationHcImplReplicationQueueHealthCheckResponse(const OAIComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCResponse(const OAIComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckResponse(const OAIComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCResponse(const OAIComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckResponse(const OAIComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheResponse(const OAIComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckResponse(const OAIComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckResponse(const OAIComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckResponse(const OAIComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteRepositoryImplCommitStatsConfigResponse(const OAIComAdobeGraniteRepositoryImplCommitStatsConfigInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteRepositoryServiceUserConfigurationResponse(const OAIComAdobeGraniteRepositoryServiceUserConfigurationInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImResponse(const OAIComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteResourcestatusImplCompositeStatusTypeResponse(const OAIComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteResourcestatusImplStatusResourceProviderImplResponse(const OAIComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteRestAssetsImplAssetContentDispositionFilterResponse(const OAIComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplResponse(const OAIComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteRestImplServletDefaultGETServletResponse(const OAIComAdobeGraniteRestImplServletDefaultGETServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSResponse(const OAIComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteSecurityUserUserPropertiesServiceResponse(const OAIComAdobeGraniteSecurityUserUserPropertiesServiceInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteSocialgraphImplSocialGraphFactoryImplResponse(const OAIComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplResponse(const OAIComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryResponse(const OAIComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceResponse(const OAIComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskResponse(const OAIComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorResponse(const OAIComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteThreaddumpThreadDumpCollectorResponse(const OAIComAdobeGraniteThreaddumpThreadDumpCollectorInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslResponse(const OAIComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteTranslationCoreImplTranslationManagerImplResponse(const OAIComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplResponse(const OAIComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureResponse(const OAIComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceResponse(const OAIComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerResponse(const OAIComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerResponse(const OAIComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteWorkflowCoreJobJobHandlerResponse(const OAIComAdobeGraniteWorkflowCoreJobJobHandlerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumResponse(const OAIComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteWorkflowCorePayloadMapCacheResponse(const OAIComAdobeGraniteWorkflowCorePayloadMapCacheInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerResponse(const OAIComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteWorkflowCoreWorkflowConfigResponse(const OAIComAdobeGraniteWorkflowCoreWorkflowConfigInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteWorkflowCoreWorkflowSessionFactoryResponse(const OAIComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteWorkflowPurgeSchedulerResponse(const OAIComAdobeGraniteWorkflowPurgeSchedulerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeOctopusNcommBootstrapResponse(const OAIComAdobeOctopusNcommBootstrapInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSResponse(const OAIComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeXmpWorkerFilesNcommXMPFilesNCommResponse(const OAIComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCommonsDatasourceJdbcpoolJdbcPoolServiceResponse(const OAIComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCommonsHttpclientResponse(const OAIComDayCommonsHttpclientInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqAnalyticsImplStorePropertiesChangeListenerResponse(const OAIComDayCqAnalyticsImplStorePropertiesChangeListenerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqAnalyticsSitecatalystImplExporterClassificationsExporteResponse(const OAIComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqAnalyticsSitecatalystImplImporterReportImporterResponse(const OAIComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryResponse(const OAIComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplResponse(const OAIComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterResponse(const OAIComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerResponse(const OAIComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerResponse(const OAIComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqAnalyticsTestandtargetImplSegmentImporterResponse(const OAIComDayCqAnalyticsTestandtargetImplSegmentImporterInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqAnalyticsTestandtargetImplServiceWebServiceImplResponse(const OAIComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqAnalyticsTestandtargetImplServletsAdminServerServletResponse(const OAIComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplResponse(const OAIComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqAuthImplCugCugSupportImplResponse(const OAIComDayCqAuthImplCugCugSupportImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqAuthImplLoginSelectorHandlerResponse(const OAIComDayCqAuthImplLoginSelectorHandlerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqCommonsImplExternalizerImplResponse(const OAIComDayCqCommonsImplExternalizerImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqCommonsServletsRootMappingServletResponse(const OAIComDayCqCommonsServletsRootMappingServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeResponse(const OAIComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListResponse(const OAIComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistResponse(const OAIComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqContentsyncImplContentSyncManagerImplResponse(const OAIComDayCqContentsyncImplContentSyncManagerImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCommonsHandlerStandardImageHandlerResponse(const OAIComDayCqDamCommonsHandlerStandardImageHandlerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCommonsMetadataXmpFilterBlackWhiteResponse(const OAIComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCommonsUtilImplAssetCacheImplResponse(const OAIComDayCqDamCommonsUtilImplAssetCacheImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigResponse(const OAIComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplAssetMoveListenerResponse(const OAIComDayCqDamCoreImplAssetMoveListenerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplAssethomeAssetHomePageConfigurationResponse(const OAIComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletResponse(const OAIComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplCacheCQBufferedImageCacheResponse(const OAIComDayCqDamCoreImplCacheCQBufferedImageCacheInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplDamChangeEventListenerResponse(const OAIComDayCqDamCoreImplDamChangeEventListenerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplDamEventPurgeServiceResponse(const OAIComDayCqDamCoreImplDamEventPurgeServiceInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplDamEventRecorderImplResponse(const OAIComDayCqDamCoreImplDamEventRecorderImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplEventDamEventAuditListenerResponse(const OAIComDayCqDamCoreImplEventDamEventAuditListenerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplExpiryNotificationJobImplResponse(const OAIComDayCqDamCoreImplExpiryNotificationJobImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatResponse(const OAIComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplGfxCommonsGfxRendererResponse(const OAIComDayCqDamCoreImplGfxCommonsGfxRendererInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplHandlerEPSFormatHandlerResponse(const OAIComDayCqDamCoreImplHandlerEPSFormatHandlerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplHandlerIndesignFormatHandlerResponse(const OAIComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplHandlerJpegHandlerResponse(const OAIComDayCqDamCoreImplHandlerJpegHandlerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplHandlerXmpNCommXMPHandlerResponse(const OAIComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplJmxAssetIndexUpdateMonitorResponse(const OAIComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplJmxAssetMigrationMBeanImplResponse(const OAIComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplJmxAssetUpdateMonitorImplResponse(const OAIComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigResponse(const OAIComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigResponse(const OAIComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplLightboxLightboxServletResponse(const OAIComDayCqDamCoreImplLightboxLightboxServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplMetadataEditorSelectComponentHandlerResponse(const OAIComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperResponse(const OAIComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplResponse(const OAIComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplMissingMetadataNotificationJobResponse(const OAIComDayCqDamCoreImplMissingMetadataNotificationJobInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrResponse(const OAIComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplProcessTextExtractionProcessResponse(const OAIComDayCqDamCoreImplProcessTextExtractionProcessInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplRenditionMakerImplResponse(const OAIComDayCqDamCoreImplRenditionMakerImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplReportsReportExportServiceResponse(const OAIComDayCqDamCoreImplReportsReportExportServiceInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplReportsReportPurgeServiceResponse(const OAIComDayCqDamCoreImplReportsReportPurgeServiceInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplServletAssetDownloadServletResponse(const OAIComDayCqDamCoreImplServletAssetDownloadServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplServletAssetStatusServletResponse(const OAIComDayCqDamCoreImplServletAssetStatusServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplServletAssetXMPSearchServletResponse(const OAIComDayCqDamCoreImplServletAssetXMPSearchServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplServletBatchMetadataServletResponse(const OAIComDayCqDamCoreImplServletBatchMetadataServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplServletBinaryProviderServletResponse(const OAIComDayCqDamCoreImplServletBinaryProviderServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplServletCollectionServletResponse(const OAIComDayCqDamCoreImplServletCollectionServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplServletCollectionsServletResponse(const OAIComDayCqDamCoreImplServletCollectionsServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplServletCompanionServletResponse(const OAIComDayCqDamCoreImplServletCompanionServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplServletCreateAssetServletResponse(const OAIComDayCqDamCoreImplServletCreateAssetServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplServletDamContentDispositionFilterResponse(const OAIComDayCqDamCoreImplServletDamContentDispositionFilterInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplServletGuidLookupFilterResponse(const OAIComDayCqDamCoreImplServletGuidLookupFilterInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplServletHealthCheckServletResponse(const OAIComDayCqDamCoreImplServletHealthCheckServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplServletMetadataGetServletResponse(const OAIComDayCqDamCoreImplServletMetadataGetServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplServletMultipleLicenseAcceptServletResponse(const OAIComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplServletResourceCollectionServletResponse(const OAIComDayCqDamCoreImplServletResourceCollectionServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplResponse(const OAIComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplUnzipUnzipConfigResponse(const OAIComDayCqDamCoreImplUnzipUnzipConfigInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreProcessExifToolExtractMetadataProcessResponse(const OAIComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreProcessExtractMetadataProcessResponse(const OAIComDayCqDamCoreProcessExtractMetadataProcessInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreProcessMetadataProcessorProcessResponse(const OAIComDayCqDamCoreProcessMetadataProcessorProcessInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamHandlerFfmpegLocatorImplResponse(const OAIComDayCqDamHandlerFfmpegLocatorImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplResponse(const OAIComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamHandlerStandardPdfPdfHandlerResponse(const OAIComDayCqDamHandlerStandardPdfPdfHandlerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamHandlerStandardPsPostScriptHandlerResponse(const OAIComDayCqDamHandlerStandardPsPostScriptHandlerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamHandlerStandardPsdPsdHandlerResponse(const OAIComDayCqDamHandlerStandardPsdPsdHandlerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamIdsImplIDSJobProcessorResponse(const OAIComDayCqDamIdsImplIDSJobProcessorInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamIdsImplIDSPoolManagerImplResponse(const OAIComDayCqDamIdsImplIDSPoolManagerImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamInddImplHandlerIndesignXMPHandlerResponse(const OAIComDayCqDamInddImplHandlerIndesignXMPHandlerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamInddImplServletSnippetCreationServletResponse(const OAIComDayCqDamInddImplServletSnippetCreationServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamInddProcessINDDMediaExtractProcessResponse(const OAIComDayCqDamInddProcessINDDMediaExtractProcessInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplResponse(const OAIComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamPerformanceInternalAssetPerformanceReportSyncJobResponse(const OAIComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProResponse(const OAIComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenResponse(const OAIComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerResponse(const OAIComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamS7damCommonPostServletsSetCreateHandlerResponse(const OAIComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamS7damCommonPostServletsSetModifyHandlerResponse(const OAIComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessResponse(const OAIComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamS7damCommonS7damDamChangeEventListenerResponse(const OAIComDayCqDamS7damCommonS7damDamChangeEventListenerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamS7damCommonServletsS7damProductInfoServletResponse(const OAIComDayCqDamS7damCommonServletsS7damProductInfoServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplResponse(const OAIComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamScene7ImplScene7APIClientImplResponse(const OAIComDayCqDamScene7ImplScene7APIClientImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamScene7ImplScene7AssetMimeTypeServiceImplResponse(const OAIComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamScene7ImplScene7ConfigurationEventListenerResponse(const OAIComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamScene7ImplScene7DamChangeEventListenerResponse(const OAIComDayCqDamScene7ImplScene7DamChangeEventListenerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamScene7ImplScene7FlashTemplatesServiceImplResponse(const OAIComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamScene7ImplScene7UploadServiceImplResponse(const OAIComDayCqDamScene7ImplScene7UploadServiceImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerResponse(const OAIComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamStockIntegrationImplConfigurationStockConfigurationResponse(const OAIComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamVideoImplServletVideoTestServletResponse(const OAIComDayCqDamVideoImplServletVideoTestServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqExtwidgetServletsImageSpriteServletResponse(const OAIComDayCqExtwidgetServletsImageSpriteServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqImageInternalFontFontHelperResponse(const OAIComDayCqImageInternalFontFontHelperInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqJcrclustersupportClusterStartLevelControllerResponse(const OAIComDayCqJcrclustersupportClusterStartLevelControllerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqMailerDefaultMailServiceResponse(const OAIComDayCqMailerDefaultMailServiceInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqMailerImplCqMailingServiceResponse(const OAIComDayCqMailerImplCqMailingServiceInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqMailerImplEmailCqEmailTemplateFactoryResponse(const OAIComDayCqMailerImplEmailCqEmailTemplateFactoryInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqMailerImplEmailCqRetrieverTemplateFactoryResponse(const OAIComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqMcmCampaignImplIntegrationConfigImplResponse(const OAIComDayCqMcmCampaignImplIntegrationConfigImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryResponse(const OAIComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqMcmCoreNewsletterNewsletterEmailServiceImplResponse(const OAIComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqMcmImplMCMConfigurationResponse(const OAIComDayCqMcmImplMCMConfigurationInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenResponse(const OAIComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougResponse(const OAIComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentResponse(const OAIComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaResponse(const OAIComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHResponse(const OAIComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqNotificationImplNotificationServiceImplResponse(const OAIComDayCqNotificationImplNotificationServiceImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqPersonalizationImplServletsTargetingConfigurationServletResponse(const OAIComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqPollingImporterImplManagedPollConfigImplResponse(const OAIComDayCqPollingImporterImplManagedPollConfigImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqPollingImporterImplManagedPollingImporterImplResponse(const OAIComDayCqPollingImporterImplManagedPollingImporterImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqPollingImporterImplPollingImporterImplResponse(const OAIComDayCqPollingImporterImplPollingImporterImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqReplicationAuditReplicationEventListenerResponse(const OAIComDayCqReplicationAuditReplicationEventListenerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqReplicationContentStaticContentBuilderResponse(const OAIComDayCqReplicationContentStaticContentBuilderInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqReplicationImplAgentManagerImplResponse(const OAIComDayCqReplicationImplAgentManagerImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqReplicationImplContentDurboBinaryLessContentBuilderResponse(const OAIComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqReplicationImplContentDurboDurboImportConfigurationProvResponse(const OAIComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqReplicationImplReplicationContentFactoryProviderImplResponse(const OAIComDayCqReplicationImplReplicationContentFactoryProviderImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqReplicationImplReplicationReceiverImplResponse(const OAIComDayCqReplicationImplReplicationReceiverImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqReplicationImplReplicatorImplResponse(const OAIComDayCqReplicationImplReplicatorImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqReplicationImplReverseReplicatorResponse(const OAIComDayCqReplicationImplReverseReplicatorInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqReplicationImplTransportBinaryLessTransportHandlerResponse(const OAIComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqReplicationImplTransportHttpResponse(const OAIComDayCqReplicationImplTransportHttpInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqReportingImplCacheCacheImplResponse(const OAIComDayCqReportingImplCacheCacheImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqReportingImplConfigServiceImplResponse(const OAIComDayCqReportingImplConfigServiceImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqReportingImplRLogAnalyzerResponse(const OAIComDayCqReportingImplRLogAnalyzerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqRewriterLinkcheckerImplLinkCheckerImplResponse(const OAIComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqRewriterLinkcheckerImplLinkCheckerTaskResponse(const OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryResponse(const OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqRewriterLinkcheckerImplLinkInfoStorageImplResponse(const OAIComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqRewriterProcessorImplHtmlParserFactoryResponse(const OAIComDayCqRewriterProcessorImplHtmlParserFactoryInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqSearchImplBuilderQueryBuilderImplResponse(const OAIComDayCqSearchImplBuilderQueryBuilderImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqSearchSuggestImplSuggestionIndexManagerImplResponse(const OAIComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerResponse(const OAIComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqSearchpromoteImplSearchPromoteServiceImplResponse(const OAIComDayCqSearchpromoteImplSearchPromoteServiceImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqSecurityACLSetupResponse(const OAIComDayCqSecurityACLSetupInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqStatisticsImplStatisticsServiceImplResponse(const OAIComDayCqStatisticsImplStatisticsServiceImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqTaggingImplJcrTagManagerFactoryImplResponse(const OAIComDayCqTaggingImplJcrTagManagerFactoryImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqTaggingImplSearchTagPredicateEvaluatorResponse(const OAIComDayCqTaggingImplSearchTagPredicateEvaluatorInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqTaggingImplTagGarbageCollectorResponse(const OAIComDayCqTaggingImplTagGarbageCollectorInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmContentsyncImplHandlerPagesUpdateHandlerResponse(const OAIComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorResponse(const OAIComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreImplAuthoringUIModeServiceImplResponse(const OAIComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreImplCommandsWCMCommandServletResponse(const OAIComDayCqWcmCoreImplCommandsWCMCommandServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplResponse(const OAIComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreImplEventPageEventAuditListenerResponse(const OAIComDayCqWcmCoreImplEventPageEventAuditListenerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreImplEventPagePostProcessorResponse(const OAIComDayCqWcmCoreImplEventPagePostProcessorInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreImplEventRepositoryChangeEventListenerResponse(const OAIComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreImplEventTemplatePostProcessorResponse(const OAIComDayCqWcmCoreImplEventTemplatePostProcessorInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreImplLanguageManagerImplResponse(const OAIComDayCqWcmCoreImplLanguageManagerImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplResponse(const OAIComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreImplPagePageInfoAggregatorImplResponse(const OAIComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreImplPagePageManagerFactoryImplResponse(const OAIComDayCqWcmCoreImplPagePageManagerFactoryImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreImplReferencesContentContentReferenceConfigResponse(const OAIComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreImplServletsContentfinderAssetViewHandlerResponse(const OAIComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieResponse(const OAIComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreImplServletsContentfinderPageViewHandlerResponse(const OAIComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreImplServletsFindReplaceServletResponse(const OAIComDayCqWcmCoreImplServletsFindReplaceServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreImplServletsReferenceSearchServletResponse(const OAIComDayCqWcmCoreImplServletsReferenceSearchServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreImplServletsThumbnailServletResponse(const OAIComDayCqWcmCoreImplServletsThumbnailServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreImplUtilsDefaultPageNameValidatorResponse(const OAIComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreImplVariantsPageVariantsProviderImplResponse(const OAIComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreImplVersionManagerImplResponse(const OAIComDayCqWcmCoreImplVersionManagerImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreImplVersionPurgeTaskResponse(const OAIComDayCqWcmCoreImplVersionPurgeTaskInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreImplWCMDebugFilterResponse(const OAIComDayCqWcmCoreImplWCMDebugFilterInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreImplWCMDeveloperModeFilterResponse(const OAIComDayCqWcmCoreImplWCMDeveloperModeFilterInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreImplWarpTimeWarpFilterResponse(const OAIComDayCqWcmCoreImplWarpTimeWarpFilterInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreMvtMVTStatisticsImplResponse(const OAIComDayCqWcmCoreMvtMVTStatisticsImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreStatsPageViewStatisticsImplResponse(const OAIComDayCqWcmCoreStatsPageViewStatisticsImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreWCMRequestFilterResponse(const OAIComDayCqWcmCoreWCMRequestFilterInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterDesignPackageImporterResponse(const OAIComDayCqWcmDesignimporterDesignPackageImporterInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterImplCanvasBuilderImplResponse(const OAIComDayCqWcmDesignimporterImplCanvasBuilderImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterImplCanvasPageDeleteHandlerResponse(const OAIComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterImplEntryPreprocessorImplResponse(const OAIComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterImplMobileCanvasBuilderImplResponse(const OAIComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeResponse(const OAIComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponResponse(const OAIComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanResponse(const OAIComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleResponse(const OAIComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandResponse(const OAIComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenResponse(const OAIComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerResponse(const OAIComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTResponse(const OAIComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleResponse(const OAIComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleResponse(const OAIComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHResponse(const OAIComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeResponse(const OAIComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandResponse(const OAIComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlResponse(const OAIComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentResponse(const OAIComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenResponse(const OAIComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlResponse(const OAIComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmFoundationFormsImplFormChooserServletResponse(const OAIComDayCqWcmFoundationFormsImplFormChooserServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmFoundationFormsImplFormParagraphPostProcessorResponse(const OAIComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmFoundationFormsImplFormsHandlingServletResponse(const OAIComDayCqWcmFoundationFormsImplFormsHandlingServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmFoundationFormsImplMailServletResponse(const OAIComDayCqWcmFoundationFormsImplMailServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmFoundationImplAdaptiveImageComponentServletResponse(const OAIComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmFoundationImplHTTPAuthHandlerResponse(const OAIComDayCqWcmFoundationImplHTTPAuthHandlerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmFoundationImplPageImpressionsTrackerResponse(const OAIComDayCqWcmFoundationImplPageImpressionsTrackerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmFoundationImplPageRedirectServletResponse(const OAIComDayCqWcmFoundationImplPageRedirectServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistResponse(const OAIComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplResponse(const OAIComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryResponse(const OAIComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmMobileCoreImplRedirectRedirectFilterResponse(const OAIComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmMsmImplActionsContentCopyActionFactoryResponse(const OAIComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmMsmImplActionsContentDeleteActionFactoryResponse(const OAIComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmMsmImplActionsContentUpdateActionFactoryResponse(const OAIComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmMsmImplActionsOrderChildrenActionFactoryResponse(const OAIComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmMsmImplActionsPageMoveActionFactoryResponse(const OAIComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmMsmImplActionsReferencesUpdateActionFactoryResponse(const OAIComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmMsmImplActionsVersionCopyActionFactoryResponse(const OAIComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmMsmImplLiveRelationshipManagerImplResponse(const OAIComDayCqWcmMsmImplLiveRelationshipManagerImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmMsmImplRolloutManagerImplResponse(const OAIComDayCqWcmMsmImplRolloutManagerImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmMsmImplServletsAuditLogServletResponse(const OAIComDayCqWcmMsmImplServletsAuditLogServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmNotificationEmailImplEmailChannelResponse(const OAIComDayCqWcmNotificationEmailImplEmailChannelInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmNotificationImplNotificationManagerImplResponse(const OAIComDayCqWcmNotificationImplNotificationManagerImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmScriptingImplBVPManagerResponse(const OAIComDayCqWcmScriptingImplBVPManagerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmUndoUndoConfigResponse(const OAIComDayCqWcmUndoUndoConfigInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmWebservicesupportImplReplicationEventListenerResponse(const OAIComDayCqWcmWebservicesupportImplReplicationEventListenerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmWorkflowImplWcmWorkflowServiceImplResponse(const OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmWorkflowImplWorkflowPackageInfoProviderResponse(const OAIComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWidgetImplHtmlLibraryManagerImplResponse(const OAIComDayCqWidgetImplHtmlLibraryManagerImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWidgetImplWidgetExtensionProviderImplResponse(const OAIComDayCqWidgetImplWidgetExtensionProviderImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWorkflowImplEmailEMailNotificationServiceResponse(const OAIComDayCqWorkflowImplEmailEMailNotificationServiceInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWorkflowImplEmailTaskEMailNotificationServiceResponse(const OAIComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCrxSecurityTokenImplImplTokenAuthenticationHandlerResponse(const OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCrxSecurityTokenImplTokenCleanupTaskResponse(const OAIComDayCrxSecurityTokenImplTokenCleanupTaskInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::guideLocalizationServiceResponse(const OAIGuideLocalizationServiceInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::messagingUserComponentFactoryResponse(const OAIMessagingUserComponentFactoryInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheAriesJmxFrameworkStateConfigResponse(const OAIOrgApacheAriesJmxFrameworkStateConfigInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheFelixEventadminImplEventAdminResponse(const OAIOrgApacheFelixEventadminImplEventAdminInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheFelixHttpResponse(const OAIOrgApacheFelixHttpInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheFelixHttpSslfilterSslFilterResponse(const OAIOrgApacheFelixHttpSslfilterSslFilterInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheFelixJaasConfigurationFactoryResponse(const OAIOrgApacheFelixJaasConfigurationFactoryInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheFelixJaasConfigurationSpiResponse(const OAIOrgApacheFelixJaasConfigurationSpiInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheFelixScrScrServiceResponse(const OAIOrgApacheFelixScrScrServiceInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheFelixSystemreadyImplComponentsCheckResponse(const OAIOrgApacheFelixSystemreadyImplComponentsCheckInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheFelixSystemreadyImplFrameworkStartCheckResponse(const OAIOrgApacheFelixSystemreadyImplFrameworkStartCheckInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheFelixSystemreadyImplServicesCheckResponse(const OAIOrgApacheFelixSystemreadyImplServicesCheckInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheFelixSystemreadyImplServletSystemAliveServletResponse(const OAIOrgApacheFelixSystemreadyImplServletSystemAliveServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheFelixSystemreadyImplServletSystemReadyServletResponse(const OAIOrgApacheFelixSystemreadyImplServletSystemReadyServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheFelixSystemreadySystemReadyMonitorResponse(const OAIOrgApacheFelixSystemreadySystemReadyMonitorInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheFelixWebconsoleInternalServletOsgiManagerResponse(const OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheFelixWebconsolePluginsEventInternalPluginServletResponse(const OAIOrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoResponse(const OAIOrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheHttpProxyconfiguratorResponse(const OAIOrgApacheHttpProxyconfiguratorInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderResponse(const OAIOrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreResponse(const OAIOrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceResponse(const OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreResponse(const OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacResponse(const OAIOrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceResponse(const OAIOrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServResponse(const OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoResponse(const OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersResponse(const OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationResponse(const OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfResponse(const OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidResponse(const OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeResponse(const OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryResponse(const OAIOrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsObservationChangeCollectorProviderResponse(const OAIOrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakQueryQueryEngineSettingsServiceResponse(const OAIOrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigResponse(const OAIOrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiResponse(const OAIOrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraResponse(const OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurResponse(const OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiResponse(const OAIOrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameResponse(const OAIOrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSecurityUserUserConfigurationImplResponse(const OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceResponse(const OAIOrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryResponse(const OAIOrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceResponse(const OAIOrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSegmentSegmentNodeStoreServiceResponse(const OAIOrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceResponse(const OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeResponse(const OAIOrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExResponse(const OAIOrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrResponse(const OAIOrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiResponse(const OAIOrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluResponse(const OAIOrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableResponse(const OAIOrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitVaultPackagingImplPackagingImplResponse(const OAIOrgApacheJackrabbitVaultPackagingImplPackagingImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryResponse(const OAIOrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingAuthCoreImplLogoutServletResponse(const OAIOrgApacheSlingAuthCoreImplLogoutServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingCaconfigImplConfigurationBindingsValueProviderResponse(const OAIOrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingCaconfigImplConfigurationResolverImplResponse(const OAIOrgApacheSlingCaconfigImplConfigurationResolverImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraResponse(const OAIOrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraResponse(const OAIOrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviResponse(const OAIOrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveResponse(const OAIOrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingCaconfigManagementImplConfigurationManagementSettiResponse(const OAIOrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourResponse(const OAIOrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyResponse(const OAIOrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingCommonsHtmlInternalTagsoupHtmlParserResponse(const OAIOrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingCommonsLogLogManagerResponse(const OAIOrgApacheSlingCommonsLogLogManagerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingCommonsLogLogManagerFactoryConfigResponse(const OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingCommonsLogLogManagerFactoryWriterResponse(const OAIOrgApacheSlingCommonsLogLogManagerFactoryWriterInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingCommonsMetricsInternalLogReporterResponse(const OAIOrgApacheSlingCommonsMetricsInternalLogReporterInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterResponse(const OAIOrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingCommonsMimeInternalMimeTypeServiceImplResponse(const OAIOrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingCommonsSchedulerImplQuartzSchedulerResponse(const OAIOrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingCommonsSchedulerImplSchedulerHealthCheckResponse(const OAIOrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryResponse(const OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDatasourceDataSourceFactoryResponse(const OAIOrgApacheSlingDatasourceDataSourceFactoryInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDatasourceJNDIDataSourceFactoryResponse(const OAIOrgApacheSlingDatasourceJNDIDataSourceFactoryInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDiscoveryOakConfigResponse(const OAIOrgApacheSlingDiscoveryOakConfigInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckResponse(const OAIOrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoResponse(const OAIOrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAResponse(const OAIOrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryResponse(const OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDistributionAgentImplReverseDistributionAgentFactoResponse(const OAIOrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorResponse(const OAIOrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryResponse(const OAIOrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDistributionMonitorDistributionQueueHealthCheckResponse(const OAIOrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDistributionPackagingImplExporterAgentDistributioResponse(const OAIOrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDistributionPackagingImplExporterLocalDistributioResponse(const OAIOrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDistributionPackagingImplExporterRemoteDistributiResponse(const OAIOrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDistributionPackagingImplImporterLocalDistributioResponse(const OAIOrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDistributionPackagingImplImporterRemoteDistributiResponse(const OAIOrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDistributionPackagingImplImporterRepositoryDistriResponse(const OAIOrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDistributionResourcesImplDistributionConfigurationResponse(const OAIOrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDistributionResourcesImplDistributionServiceResourResponse(const OAIOrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDistributionSerializationImplDistributionPackageBuResponse(const OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDistributionSerializationImplVltVaultDistributionResponse(const OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDistributionTransportImplUserCredentialsDistributiResponse(const OAIOrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDistributionTriggerImplDistributionEventDistributeResponse(const OAIOrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerResponse(const OAIOrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiResponse(const OAIOrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigResponse(const OAIOrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDistributionTriggerImplResourceEventDistributionTrResponse(const OAIOrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDistributionTriggerImplScheduledDistributionTriggeResponse(const OAIOrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingEngineImplAuthSlingAuthenticatorResponse(const OAIOrgApacheSlingEngineImplAuthSlingAuthenticatorInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterResponse(const OAIOrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingEngineImplLogRequestLoggerResponse(const OAIOrgApacheSlingEngineImplLogRequestLoggerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingEngineImplLogRequestLoggerServiceResponse(const OAIOrgApacheSlingEngineImplLogRequestLoggerServiceInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingEngineImplSlingMainServletResponse(const OAIOrgApacheSlingEngineImplSlingMainServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingEngineParametersResponse(const OAIOrgApacheSlingEngineParametersInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingEventImplEventingThreadPoolResponse(const OAIOrgApacheSlingEventImplEventingThreadPoolInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingEventImplJobsDefaultJobManagerResponse(const OAIOrgApacheSlingEventImplJobsDefaultJobManagerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingEventImplJobsJcrPersistenceHandlerResponse(const OAIOrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingEventImplJobsJobConsumerManagerResponse(const OAIOrgApacheSlingEventImplJobsJobConsumerManagerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingEventJobsQueueConfigurationResponse(const OAIOrgApacheSlingEventJobsQueueConfigurationInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWResponse(const OAIOrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingFeatureflagsFeatureResponse(const OAIOrgApacheSlingFeatureflagsFeatureInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingFeatureflagsImplConfiguredFeatureResponse(const OAIOrgApacheSlingFeatureflagsImplConfiguredFeatureInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingHapiImplHApiUtilImplResponse(const OAIOrgApacheSlingHapiImplHApiUtilImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingHcCoreImplCompositeHealthCheckResponse(const OAIOrgApacheSlingHcCoreImplCompositeHealthCheckInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplResponse(const OAIOrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingHcCoreImplJmxAttributeHealthCheckResponse(const OAIOrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingHcCoreImplScriptableHealthCheckResponse(const OAIOrgApacheSlingHcCoreImplScriptableHealthCheckInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingHcCoreImplServletHealthCheckExecutorServletResponse(const OAIOrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingHcCoreImplServletResultTxtVerboseSerializerResponse(const OAIOrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingI18nImplI18NFilterResponse(const OAIOrgApacheSlingI18nImplI18NFilterInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingI18nImplJcrResourceBundleProviderResponse(const OAIOrgApacheSlingI18nImplJcrResourceBundleProviderInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingInstallerProviderJcrImplJcrInstallerResponse(const OAIOrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingJcrBaseInternalLoginAdminWhitelistResponse(const OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentResponse(const OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingJcrDavexImplServletsSlingDavExServletResponse(const OAIOrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingJcrJackrabbitServerJndiRegistrationSupportResponse(const OAIOrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingJcrJackrabbitServerRmiRegistrationSupportResponse(const OAIOrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingJcrRepoinitImplRepositoryInitializerResponse(const OAIOrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingJcrRepoinitRepositoryInitializerResponse(const OAIOrgApacheSlingJcrRepoinitRepositoryInitializerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplResponse(const OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingJcrResourceInternalJcrSystemUserValidatorResponse(const OAIOrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryResponse(const OAIOrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceResponse(const OAIOrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicResponse(const OAIOrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingJcrWebdavImplServletsSimpleWebDavServletResponse(const OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingJmxProviderImplJMXResourceProviderResponse(const OAIOrgApacheSlingJmxProviderImplJMXResourceProviderInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingModelsImplModelAdapterFactoryResponse(const OAIOrgApacheSlingModelsImplModelAdapterFactoryInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingModelsJacksonexporterImplResourceModuleProviderResponse(const OAIOrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoResponse(const OAIOrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingResourcemergerImplMergedResourceProviderFactoryResponse(const OAIOrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingResourcemergerPickerOverridingResponse(const OAIOrgApacheSlingResourcemergerPickerOverridingInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingScriptingCoreImplScriptCacheImplResponse(const OAIOrgApacheSlingScriptingCoreImplScriptCacheImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingScriptingCoreImplScriptingResourceResolverProviderResponse(const OAIOrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingScriptingJavaImplJavaScriptEngineFactoryResponse(const OAIOrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaResponse(const OAIOrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingScriptingJspJspScriptEngineFactoryResponse(const OAIOrgApacheSlingScriptingJspJspScriptEngineFactoryInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvResponse(const OAIOrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingSecurityImplContentDispositionFilterResponse(const OAIOrgApacheSlingSecurityImplContentDispositionFilterInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingSecurityImplReferrerFilterResponse(const OAIOrgApacheSlingSecurityImplReferrerFilterInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingServiceusermappingImplServiceUserMapperImplResponse(const OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedResponse(const OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingServletsGetDefaultGetServletResponse(const OAIOrgApacheSlingServletsGetDefaultGetServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingServletsGetImplVersionVersionInfoServletResponse(const OAIOrgApacheSlingServletsGetImplVersionVersionInfoServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingServletsPostImplHelperChunkCleanUpTaskResponse(const OAIOrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingServletsPostImplSlingPostServletResponse(const OAIOrgApacheSlingServletsPostImplSlingPostServletInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingServletsResolverSlingServletResolverResponse(const OAIOrgApacheSlingServletsResolverSlingServletResolverInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingSettingsImplSlingSettingsServiceImplResponse(const OAIOrgApacheSlingSettingsImplSlingSettingsServiceImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingStartupfilterImplStartupFilterImplResponse(const OAIOrgApacheSlingStartupfilterImplStartupFilterImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingTenantInternalTenantProviderImplResponse(const OAIOrgApacheSlingTenantInternalTenantProviderImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingTracerInternalLogTracerResponse(const OAIOrgApacheSlingTracerInternalLogTracerInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingXssImplXSSFilterImplResponse(const OAIOrgApacheSlingXssImplXSSFilterImplInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIConfigmgrApiRequest::adaptiveFormAndInteractiveCommunicationWebChannelConfigurationError(const OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurError(const OAIAdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::analyticsComponentQueryCacheServiceError(const OAIAnalyticsComponentQueryCacheServiceInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::apacheSlingHealthCheckResultHTMLSerializerError(const OAIApacheSlingHealthCheckResultHTMLSerializerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationError(const OAIComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeAemTransactionCoreImplTransactionRecorderError(const OAIComAdobeAemTransactionCoreImplTransactionRecorderInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCError(const OAIComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCError(const OAIComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplError(const OAIComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplError(const OAIComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqAccountApiAccountManagementServiceError(const OAIComAdobeCqAccountApiAccountManagementServiceInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqAccountImplAccountManagementServletError(const OAIComAdobeCqAccountImplAccountManagementServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqAddressImplLocationLocationListServletError(const OAIComAdobeCqAddressImplLocationLocationListServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqAuditPurgeDamError(const OAIComAdobeCqAuditPurgeDamInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqAuditPurgePagesError(const OAIComAdobeCqAuditPurgePagesInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqAuditPurgeReplicationError(const OAIComAdobeCqAuditPurgeReplicationInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqCdnRewriterImplAWSCloudFrontRewriterError(const OAIComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqCdnRewriterImplCDNConfigServiceImplError(const OAIComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqCdnRewriterImplCDNRewriterError(const OAIComAdobeCqCdnRewriterImplCDNRewriterInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleError(const OAIComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqCommerceImplAssetDynamicImageHandlerError(const OAIComAdobeCqCommerceImplAssetDynamicImageHandlerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqCommerceImplAssetProductAssetHandlerProviderImplError(const OAIComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqCommerceImplAssetStaticImageHandlerError(const OAIComAdobeCqCommerceImplAssetStaticImageHandlerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqCommerceImplAssetVideoHandlerError(const OAIComAdobeCqCommerceImplAssetVideoHandlerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqCommerceImplPromotionPromotionManagerImplError(const OAIComAdobeCqCommerceImplPromotionPromotionManagerImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplError(const OAIComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqCommercePimImplPageEventListenerError(const OAIComAdobeCqCommercePimImplPageEventListenerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqCommercePimImplProductfeedProductFeedServiceImplError(const OAIComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqContentinsightImplReportingServicesSettingsProviderError(const OAIComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqContentinsightImplServletsBrightEdgeProxyServletError(const OAIComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqContentinsightImplServletsReportingServicesProxyServleError(const OAIComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqDamCfmImplComponentComponentConfigImplError(const OAIComAdobeCqDamCfmImplComponentComponentConfigImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqDamCfmImplConfFeatureConfigImplError(const OAIComAdobeCqDamCfmImplConfFeatureConfigImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqDamCfmImplContentRewriterAssetProcessorError(const OAIComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqDamCfmImplContentRewriterParRangeFilterError(const OAIComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqDamCfmImplContentRewriterPayloadFilterError(const OAIComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqDamDmProcessImagePTiffManagerImplError(const OAIComAdobeCqDamDmProcessImagePTiffManagerImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerError(const OAIComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqDamMacSyncHelperImplMACSyncClientImplError(const OAIComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqDamMacSyncImplDAMSyncServiceImplError(const OAIComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqDamProcessorNuiImplNuiAssetProcessorError(const OAIComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqDamS7imagingImplIsImageServerComponentError(const OAIComAdobeCqDamS7imagingImplIsImageServerComponentInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqDamS7imagingImplPsPlatformServerServletError(const OAIComAdobeCqDamS7imagingImplPsPlatformServerServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqDamWebdavImplIoAssetIOHandlerError(const OAIComAdobeCqDamWebdavImplIoAssetIOHandlerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobError(const OAIComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqDamWebdavImplIoSpecialFilesHandlerError(const OAIComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqDeserfwImplDeserializationFirewallImplError(const OAIComAdobeCqDeserfwImplDeserializationFirewallImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqDtmImplServiceDTMWebServiceImplError(const OAIComAdobeCqDtmImplServiceDTMWebServiceImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqDtmImplServletsDTMDeployHookServletError(const OAIComAdobeCqDtmImplServletsDTMDeployHookServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqDtmReactorImplServiceWebServiceImplError(const OAIComAdobeCqDtmReactorImplServiceWebServiceImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqExperiencelogImplExperienceLogConfigServletError(const OAIComAdobeCqExperiencelogImplExperienceLogConfigServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqHcContentPackagesHealthCheckError(const OAIComAdobeCqHcContentPackagesHealthCheckInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqHistoryImplHistoryRequestFilterError(const OAIComAdobeCqHistoryImplHistoryRequestFilterInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqHistoryImplHistoryServiceImplError(const OAIComAdobeCqHistoryImplHistoryServiceImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqInboxImplTypeproviderItemTypeProviderError(const OAIComAdobeCqInboxImplTypeproviderItemTypeProviderInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqProjectsImplServletProjectImageServletError(const OAIComAdobeCqProjectsImplServletProjectImageServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqProjectsPurgeSchedulerError(const OAIComAdobeCqProjectsPurgeSchedulerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqScheduledExporterImplScheduledExporterImplError(const OAIComAdobeCqScheduledExporterImplScheduledExporterImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplError(const OAIComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqScreensDeviceImplDeviceServiceError(const OAIComAdobeCqScreensDeviceImplDeviceServiceInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplError(const OAIComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqScreensImplHandlerChannelsUpdateHandlerError(const OAIComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobError(const OAIComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqScreensImplRemoteImplDistributedHttpClientImplError(const OAIComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqScreensImplScreensChannelPostProcessorError(const OAIComAdobeCqScreensImplScreensChannelPostProcessorInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplError(const OAIComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqScreensMqActivemqImplArtemisJMSProviderError(const OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplError(const OAIComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqScreensOfflinecontentImplOfflineContentServiceImplError(const OAIComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqScreensSegmentationImplSegmentationFeatureFlagError(const OAIComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChError(const OAIComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckError(const OAIComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckError(const OAIComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSecurityHcPackagesImplExampleContentHealthCheckError(const OAIComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSecurityHcWebserverImplClickjackingHealthCheckError(const OAIComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialAccountverificationImplAccountManagementConfigImError(const OAIComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialActivitystreamsClientImplSocialActivityComponenError(const OAIComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoError(const OAIComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerError(const OAIComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialActivitystreamsListenerImplModerationEventExtenError(const OAIComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySError(const OAIComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialActivitystreamsListenerImplResourceActivityStreError(const OAIComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIError(const OAIComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialCalendarClientOperationextensionsEventAttachmenError(const OAIComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialCalendarServletsTimeZoneServletError(const OAIComAdobeCqSocialCalendarServletsTimeZoneServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventError(const OAIComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeError(const OAIComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiError(const OAIComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCError(const OAIComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosError(const OAIComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsCorsCORSAuthenticationFilterError(const OAIComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderError(const OAIComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplError(const OAIComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerError(const OAIComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderError(const OAIComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpError(const OAIComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpError(const OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterError(const OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderError(const OAIComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderError(const OAIComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderError(const OAIComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderError(const OAIComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderError(const OAIComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderError(const OAIComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadError(const OAIComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplError(const OAIComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitError(const OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialConnectOauthImplFacebookProviderImplError(const OAIComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleError(const OAIComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperError(const OAIComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialConnectOauthImplTwitterProviderImplError(const OAIComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenError(const OAIComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialDatastoreAsImplASResourceProviderFactoryError(const OAIComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryError(const OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorError(const OAIComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFError(const OAIComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoError(const OAIComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLError(const OAIComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialEnablementResourceEndpointsImplEnablementResouError(const OAIComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialEnablementServicesImplAuthorMarkerImplError(const OAIComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeError(const OAIComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaError(const OAIComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialForumClientEndpointsImplForumOperationsServiceError(const OAIComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialForumDispatcherImplFlushOperationsError(const OAIComAdobeCqSocialForumDispatcherImplFlushOperationsInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenError(const OAIComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialGroupImplGroupServiceImplError(const OAIComAdobeCqSocialGroupImplGroupServiceImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialHandlebarsGuavaTemplateCacheImplError(const OAIComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSError(const OAIComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerError(const OAIComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileError(const OAIComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOError(const OAIComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFError(const OAIComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialMessagingClientEndpointsImplMessagingOperationError(const OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenError(const OAIComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialModerationDashboardApiModerationDashboardSocialError(const OAIComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenError(const OAIComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialModerationDashboardInternalImplFilterGroupSociError(const OAIComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialNotificationsImplMentionsRouterError(const OAIComAdobeCqSocialNotificationsImplMentionsRouterInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialNotificationsImplNotificationManagerImplError(const OAIComAdobeCqSocialNotificationsImplNotificationManagerImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialNotificationsImplNotificationsRouterError(const OAIComAdobeCqSocialNotificationsImplNotificationsRouterInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicError(const OAIComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIError(const OAIComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMError(const OAIComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSError(const OAIComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiError(const OAIComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialScfCoreOperationsImplSocialOperationsServletError(const OAIComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialScfEndpointsImplDefaultSocialGetServletError(const OAIComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialScoringImplScoringEventListenerError(const OAIComAdobeCqSocialScoringImplScoringEventListenerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplError(const OAIComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialSiteEndpointsImplSiteOperationServiceError(const OAIComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImError(const OAIComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialSiteImplSiteConfiguratorImplError(const OAIComAdobeCqSocialSiteImplSiteConfiguratorImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialSrpImplSocialSolrConnectorError(const OAIComAdobeCqSocialSrpImplSocialSolrConnectorInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialSyncImplDiffChangesObserverError(const OAIComAdobeCqSocialSyncImplDiffChangesObserverInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialSyncImplGroupSyncListenerImplError(const OAIComAdobeCqSocialSyncImplGroupSyncListenerImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialSyncImplPublisherSyncServiceImplError(const OAIComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialSyncImplUserSyncListenerImplError(const OAIComAdobeCqSocialSyncImplUserSyncListenerImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialTranslationImplTranslationServiceConfigManagerError(const OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialTranslationImplUGCLanguageDetectorError(const OAIComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplError(const OAIComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplError(const OAIComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialUgcbaseImplPublisherConfigurationImplError(const OAIComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialUgcbaseImplSocialUtilsImplError(const OAIComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialUgcbaseModerationImplAutoModerationImplError(const OAIComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialUgcbaseModerationImplSentimentProcessError(const OAIComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliError(const OAIComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplError(const OAIComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletError(const OAIComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqSocialUserImplTransportHttpToPublisherError(const OAIComAdobeCqSocialUserImplTransportHttpToPublisherInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactError(const OAIComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqUpgradesCleanupImplUpgradeContentCleanupError(const OAIComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupError(const OAIComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceError(const OAIComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskError(const OAIComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceError(const OAIComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceError(const OAIComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqWcmLaunchesImplLaunchesEventHandlerError(const OAIComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorError(const OAIComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqWcmStyleInternalComponentStyleInfoCacheImplError(const OAIComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplError(const OAIComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceError(const OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeFdFpConfigFormsPortalSchedulerServiceError(const OAIComAdobeFdFpConfigFormsPortalSchedulerServiceInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeFormsCommonServiceImplDefaultDataProviderError(const OAIComAdobeFormsCommonServiceImplDefaultDataProviderInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpError(const OAIComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeFormsCommonServletTempCleanUpTaskError(const OAIComAdobeFormsCommonServletTempCleanUpTaskInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteAcpPlatformPlatformServletError(const OAIComAdobeGraniteAcpPlatformPlatformServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteActivitystreamsImplActivityManagerImplError(const OAIComAdobeGraniteActivitystreamsImplActivityManagerImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteAnalyzerBaseSystemStatusServletError(const OAIComAdobeGraniteAnalyzerBaseSystemStatusServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletError(const OAIComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteApicontrollerFilterResolverHookFactoryError(const OAIComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteAuthCertImplClientCertAuthHandlerError(const OAIComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteAuthImsError(const OAIComAdobeGraniteAuthImsInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionError(const OAIComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplError(const OAIComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorError(const OAIComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteAuthImsImplIMSProviderImplError(const OAIComAdobeGraniteAuthImsImplIMSProviderImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteAuthImsImplImsConfigProviderImplError(const OAIComAdobeGraniteAuthImsImplImsConfigProviderImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteAuthOauthAccesstokenProviderError(const OAIComAdobeGraniteAuthOauthAccesstokenProviderInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteAuthOauthImplBearerAuthenticationHandlerError(const OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteAuthOauthImplDefaultTokenValidatorImplError(const OAIComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteAuthOauthImplFacebookProviderImplError(const OAIComAdobeGraniteAuthOauthImplFacebookProviderImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteAuthOauthImplGithubProviderImplError(const OAIComAdobeGraniteAuthOauthImplGithubProviderImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteAuthOauthImplGraniteProviderError(const OAIComAdobeGraniteAuthOauthImplGraniteProviderInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteAuthOauthImplHelperProviderConfigManagerError(const OAIComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalError(const OAIComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerError(const OAIComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteAuthOauthImplTwitterProviderImplError(const OAIComAdobeGraniteAuthOauthImplTwitterProviderImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteAuthOauthProviderError(const OAIComAdobeGraniteAuthOauthProviderInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteAuthRequirementImplDefaultRequirementHandlerError(const OAIComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteAuthSamlSamlAuthenticationHandlerError(const OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteAuthSsoImplSsoAuthenticationHandlerError(const OAIComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteBundlesHcImplCodeCacheHealthCheckError(const OAIComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckError(const OAIComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteBundlesHcImplDavExBundleHealthCheckError(const OAIComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckError(const OAIComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteBundlesHcImplJobsHealthCheckError(const OAIComAdobeGraniteBundlesHcImplJobsHealthCheckInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteBundlesHcImplSlingGetServletHealthCheckError(const OAIComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckError(const OAIComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckError(const OAIComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckError(const OAIComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteBundlesHcImplWebDavBundleHealthCheckError(const OAIComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteCommentsInternalCommentReplicationContentFilterFacError(const OAIComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteCompatrouterImplCompatSwitchingServiceImplError(const OAIComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteCompatrouterImplRoutingConfigError(const OAIComAdobeGraniteCompatrouterImplRoutingConfigInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteCompatrouterImplSwitchMappingConfigError(const OAIComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingError(const OAIComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteContexthubImplContextHubImplError(const OAIComAdobeGraniteContexthubImplContextHubImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteCorsImplCORSPolicyImplError(const OAIComAdobeGraniteCorsImplCORSPolicyImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteCsrfImplCSRFFilterError(const OAIComAdobeGraniteCsrfImplCSRFFilterInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteCsrfImplCSRFServletError(const OAIComAdobeGraniteCsrfImplCSRFServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeError(const OAIComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteDistributionCoreImplDiffDiffChangesObserverError(const OAIComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteDistributionCoreImplDiffDiffEventListenerError(const OAIComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteDistributionCoreImplDistributionToReplicationEvenError(const OAIComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatError(const OAIComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteDistributionCoreImplReplicationDistributionTransError(const OAIComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuError(const OAIComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteFragsImplCheckHttpHeaderFlagError(const OAIComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteFragsImplRandomFeatureError(const OAIComAdobeGraniteFragsImplRandomFeatureInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteHttpcacheFileFileCacheStoreError(const OAIComAdobeGraniteHttpcacheFileFileCacheStoreInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteHttpcacheImplOuterCacheFilterError(const OAIComAdobeGraniteHttpcacheImplOuterCacheFilterInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteI18nImplBundlePseudoTranslationsError(const OAIComAdobeGraniteI18nImplBundlePseudoTranslationsInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteI18nImplPreferencesLocaleResolverServiceError(const OAIComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteInfocollectorInfoCollectorError(const OAIComAdobeGraniteInfocollectorInfoCollectorInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteJettySslInternalGraniteSslConnectorFactoryError(const OAIComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteLicenseImplLicenseCheckFilterError(const OAIComAdobeGraniteLicenseImplLicenseCheckFilterInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteLoggingImplLogAnalyserImplError(const OAIComAdobeGraniteLoggingImplLogAnalyserImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteLoggingImplLogErrorHealthCheckError(const OAIComAdobeGraniteLoggingImplLogErrorHealthCheckInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskError(const OAIComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskError(const OAIComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskError(const OAIComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteMonitoringImplScriptConfigImplError(const OAIComAdobeGraniteMonitoringImplScriptConfigImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanError(const OAIComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteOauthServerImplAccessTokenCleanupTaskError(const OAIComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteOauthServerImplOAuth2ClientRevocationServletError(const OAIComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletError(const OAIComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteOauthServerImplOAuth2TokenEndpointServletError(const OAIComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteOauthServerImplOAuth2TokenRevocationServletError(const OAIComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteOffloadingImplOffloadingConfiguratorError(const OAIComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteOffloadingImplOffloadingJobClonerError(const OAIComAdobeGraniteOffloadingImplOffloadingJobClonerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteOffloadingImplOffloadingJobOffloaderError(const OAIComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerError(const OAIComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoError(const OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplError(const OAIComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteOptoutImplOptOutServiceImplError(const OAIComAdobeGraniteOptoutImplOptOutServiceImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteQueriesImplHcAsyncIndexHealthCheckError(const OAIComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteQueriesImplHcLargeIndexHealthCheckError(const OAIComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteQueriesImplHcQueriesStatusHealthCheckError(const OAIComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteQueriesImplHcQueryHealthCheckMetricsError(const OAIComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteQueriesImplHcQueryLimitsHealthCheckError(const OAIComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteReplicationHcImplReplicationQueueHealthCheckError(const OAIComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCError(const OAIComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckError(const OAIComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCError(const OAIComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckError(const OAIComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheError(const OAIComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckError(const OAIComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckError(const OAIComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckError(const OAIComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteRepositoryImplCommitStatsConfigError(const OAIComAdobeGraniteRepositoryImplCommitStatsConfigInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteRepositoryServiceUserConfigurationError(const OAIComAdobeGraniteRepositoryServiceUserConfigurationInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImError(const OAIComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteResourcestatusImplCompositeStatusTypeError(const OAIComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteResourcestatusImplStatusResourceProviderImplError(const OAIComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteRestAssetsImplAssetContentDispositionFilterError(const OAIComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplError(const OAIComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteRestImplServletDefaultGETServletError(const OAIComAdobeGraniteRestImplServletDefaultGETServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSError(const OAIComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteSecurityUserUserPropertiesServiceError(const OAIComAdobeGraniteSecurityUserUserPropertiesServiceInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteSocialgraphImplSocialGraphFactoryImplError(const OAIComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplError(const OAIComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryError(const OAIComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceError(const OAIComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskError(const OAIComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorError(const OAIComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteThreaddumpThreadDumpCollectorError(const OAIComAdobeGraniteThreaddumpThreadDumpCollectorInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslError(const OAIComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteTranslationCoreImplTranslationManagerImplError(const OAIComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplError(const OAIComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureError(const OAIComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceError(const OAIComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerError(const OAIComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerError(const OAIComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteWorkflowCoreJobJobHandlerError(const OAIComAdobeGraniteWorkflowCoreJobJobHandlerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumError(const OAIComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteWorkflowCorePayloadMapCacheError(const OAIComAdobeGraniteWorkflowCorePayloadMapCacheInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerError(const OAIComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteWorkflowCoreWorkflowConfigError(const OAIComAdobeGraniteWorkflowCoreWorkflowConfigInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteWorkflowCoreWorkflowSessionFactoryError(const OAIComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeGraniteWorkflowPurgeSchedulerError(const OAIComAdobeGraniteWorkflowPurgeSchedulerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeOctopusNcommBootstrapError(const OAIComAdobeOctopusNcommBootstrapInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSError(const OAIComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comAdobeXmpWorkerFilesNcommXMPFilesNCommError(const OAIComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCommonsDatasourceJdbcpoolJdbcPoolServiceError(const OAIComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCommonsHttpclientError(const OAIComDayCommonsHttpclientInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqAnalyticsImplStorePropertiesChangeListenerError(const OAIComDayCqAnalyticsImplStorePropertiesChangeListenerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqAnalyticsSitecatalystImplExporterClassificationsExporteError(const OAIComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqAnalyticsSitecatalystImplImporterReportImporterError(const OAIComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryError(const OAIComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplError(const OAIComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterError(const OAIComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerError(const OAIComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerError(const OAIComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqAnalyticsTestandtargetImplSegmentImporterError(const OAIComDayCqAnalyticsTestandtargetImplSegmentImporterInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqAnalyticsTestandtargetImplServiceWebServiceImplError(const OAIComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqAnalyticsTestandtargetImplServletsAdminServerServletError(const OAIComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplError(const OAIComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqAuthImplCugCugSupportImplError(const OAIComDayCqAuthImplCugCugSupportImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqAuthImplLoginSelectorHandlerError(const OAIComDayCqAuthImplLoginSelectorHandlerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqCommonsImplExternalizerImplError(const OAIComDayCqCommonsImplExternalizerImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqCommonsServletsRootMappingServletError(const OAIComDayCqCommonsServletsRootMappingServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeError(const OAIComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListError(const OAIComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistError(const OAIComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqContentsyncImplContentSyncManagerImplError(const OAIComDayCqContentsyncImplContentSyncManagerImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCommonsHandlerStandardImageHandlerError(const OAIComDayCqDamCommonsHandlerStandardImageHandlerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCommonsMetadataXmpFilterBlackWhiteError(const OAIComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCommonsUtilImplAssetCacheImplError(const OAIComDayCqDamCommonsUtilImplAssetCacheImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigError(const OAIComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplAssetMoveListenerError(const OAIComDayCqDamCoreImplAssetMoveListenerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplAssethomeAssetHomePageConfigurationError(const OAIComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletError(const OAIComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplCacheCQBufferedImageCacheError(const OAIComDayCqDamCoreImplCacheCQBufferedImageCacheInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplDamChangeEventListenerError(const OAIComDayCqDamCoreImplDamChangeEventListenerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplDamEventPurgeServiceError(const OAIComDayCqDamCoreImplDamEventPurgeServiceInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplDamEventRecorderImplError(const OAIComDayCqDamCoreImplDamEventRecorderImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplEventDamEventAuditListenerError(const OAIComDayCqDamCoreImplEventDamEventAuditListenerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplExpiryNotificationJobImplError(const OAIComDayCqDamCoreImplExpiryNotificationJobImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatError(const OAIComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplGfxCommonsGfxRendererError(const OAIComDayCqDamCoreImplGfxCommonsGfxRendererInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplHandlerEPSFormatHandlerError(const OAIComDayCqDamCoreImplHandlerEPSFormatHandlerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplHandlerIndesignFormatHandlerError(const OAIComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplHandlerJpegHandlerError(const OAIComDayCqDamCoreImplHandlerJpegHandlerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplHandlerXmpNCommXMPHandlerError(const OAIComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplJmxAssetIndexUpdateMonitorError(const OAIComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplJmxAssetMigrationMBeanImplError(const OAIComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplJmxAssetUpdateMonitorImplError(const OAIComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigError(const OAIComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigError(const OAIComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplLightboxLightboxServletError(const OAIComDayCqDamCoreImplLightboxLightboxServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplMetadataEditorSelectComponentHandlerError(const OAIComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperError(const OAIComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplError(const OAIComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplMissingMetadataNotificationJobError(const OAIComDayCqDamCoreImplMissingMetadataNotificationJobInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrError(const OAIComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplProcessTextExtractionProcessError(const OAIComDayCqDamCoreImplProcessTextExtractionProcessInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplRenditionMakerImplError(const OAIComDayCqDamCoreImplRenditionMakerImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplReportsReportExportServiceError(const OAIComDayCqDamCoreImplReportsReportExportServiceInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplReportsReportPurgeServiceError(const OAIComDayCqDamCoreImplReportsReportPurgeServiceInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplServletAssetDownloadServletError(const OAIComDayCqDamCoreImplServletAssetDownloadServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplServletAssetStatusServletError(const OAIComDayCqDamCoreImplServletAssetStatusServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplServletAssetXMPSearchServletError(const OAIComDayCqDamCoreImplServletAssetXMPSearchServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplServletBatchMetadataServletError(const OAIComDayCqDamCoreImplServletBatchMetadataServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplServletBinaryProviderServletError(const OAIComDayCqDamCoreImplServletBinaryProviderServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplServletCollectionServletError(const OAIComDayCqDamCoreImplServletCollectionServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplServletCollectionsServletError(const OAIComDayCqDamCoreImplServletCollectionsServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplServletCompanionServletError(const OAIComDayCqDamCoreImplServletCompanionServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplServletCreateAssetServletError(const OAIComDayCqDamCoreImplServletCreateAssetServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplServletDamContentDispositionFilterError(const OAIComDayCqDamCoreImplServletDamContentDispositionFilterInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplServletGuidLookupFilterError(const OAIComDayCqDamCoreImplServletGuidLookupFilterInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplServletHealthCheckServletError(const OAIComDayCqDamCoreImplServletHealthCheckServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplServletMetadataGetServletError(const OAIComDayCqDamCoreImplServletMetadataGetServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplServletMultipleLicenseAcceptServletError(const OAIComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplServletResourceCollectionServletError(const OAIComDayCqDamCoreImplServletResourceCollectionServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplError(const OAIComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreImplUnzipUnzipConfigError(const OAIComDayCqDamCoreImplUnzipUnzipConfigInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreProcessExifToolExtractMetadataProcessError(const OAIComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreProcessExtractMetadataProcessError(const OAIComDayCqDamCoreProcessExtractMetadataProcessInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamCoreProcessMetadataProcessorProcessError(const OAIComDayCqDamCoreProcessMetadataProcessorProcessInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamHandlerFfmpegLocatorImplError(const OAIComDayCqDamHandlerFfmpegLocatorImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplError(const OAIComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamHandlerStandardPdfPdfHandlerError(const OAIComDayCqDamHandlerStandardPdfPdfHandlerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamHandlerStandardPsPostScriptHandlerError(const OAIComDayCqDamHandlerStandardPsPostScriptHandlerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamHandlerStandardPsdPsdHandlerError(const OAIComDayCqDamHandlerStandardPsdPsdHandlerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamIdsImplIDSJobProcessorError(const OAIComDayCqDamIdsImplIDSJobProcessorInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamIdsImplIDSPoolManagerImplError(const OAIComDayCqDamIdsImplIDSPoolManagerImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamInddImplHandlerIndesignXMPHandlerError(const OAIComDayCqDamInddImplHandlerIndesignXMPHandlerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamInddImplServletSnippetCreationServletError(const OAIComDayCqDamInddImplServletSnippetCreationServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamInddProcessINDDMediaExtractProcessError(const OAIComDayCqDamInddProcessINDDMediaExtractProcessInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplError(const OAIComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamPerformanceInternalAssetPerformanceReportSyncJobError(const OAIComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProError(const OAIComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenError(const OAIComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerError(const OAIComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamS7damCommonPostServletsSetCreateHandlerError(const OAIComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamS7damCommonPostServletsSetModifyHandlerError(const OAIComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessError(const OAIComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamS7damCommonS7damDamChangeEventListenerError(const OAIComDayCqDamS7damCommonS7damDamChangeEventListenerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamS7damCommonServletsS7damProductInfoServletError(const OAIComDayCqDamS7damCommonServletsS7damProductInfoServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplError(const OAIComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamScene7ImplScene7APIClientImplError(const OAIComDayCqDamScene7ImplScene7APIClientImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamScene7ImplScene7AssetMimeTypeServiceImplError(const OAIComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamScene7ImplScene7ConfigurationEventListenerError(const OAIComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamScene7ImplScene7DamChangeEventListenerError(const OAIComDayCqDamScene7ImplScene7DamChangeEventListenerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamScene7ImplScene7FlashTemplatesServiceImplError(const OAIComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamScene7ImplScene7UploadServiceImplError(const OAIComDayCqDamScene7ImplScene7UploadServiceImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerError(const OAIComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamStockIntegrationImplConfigurationStockConfigurationError(const OAIComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqDamVideoImplServletVideoTestServletError(const OAIComDayCqDamVideoImplServletVideoTestServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqExtwidgetServletsImageSpriteServletError(const OAIComDayCqExtwidgetServletsImageSpriteServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqImageInternalFontFontHelperError(const OAIComDayCqImageInternalFontFontHelperInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqJcrclustersupportClusterStartLevelControllerError(const OAIComDayCqJcrclustersupportClusterStartLevelControllerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqMailerDefaultMailServiceError(const OAIComDayCqMailerDefaultMailServiceInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqMailerImplCqMailingServiceError(const OAIComDayCqMailerImplCqMailingServiceInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqMailerImplEmailCqEmailTemplateFactoryError(const OAIComDayCqMailerImplEmailCqEmailTemplateFactoryInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqMailerImplEmailCqRetrieverTemplateFactoryError(const OAIComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqMcmCampaignImplIntegrationConfigImplError(const OAIComDayCqMcmCampaignImplIntegrationConfigImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryError(const OAIComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqMcmCoreNewsletterNewsletterEmailServiceImplError(const OAIComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqMcmImplMCMConfigurationError(const OAIComDayCqMcmImplMCMConfigurationInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenError(const OAIComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougError(const OAIComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentError(const OAIComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaError(const OAIComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHError(const OAIComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqNotificationImplNotificationServiceImplError(const OAIComDayCqNotificationImplNotificationServiceImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqPersonalizationImplServletsTargetingConfigurationServletError(const OAIComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqPollingImporterImplManagedPollConfigImplError(const OAIComDayCqPollingImporterImplManagedPollConfigImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqPollingImporterImplManagedPollingImporterImplError(const OAIComDayCqPollingImporterImplManagedPollingImporterImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqPollingImporterImplPollingImporterImplError(const OAIComDayCqPollingImporterImplPollingImporterImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqReplicationAuditReplicationEventListenerError(const OAIComDayCqReplicationAuditReplicationEventListenerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqReplicationContentStaticContentBuilderError(const OAIComDayCqReplicationContentStaticContentBuilderInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqReplicationImplAgentManagerImplError(const OAIComDayCqReplicationImplAgentManagerImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqReplicationImplContentDurboBinaryLessContentBuilderError(const OAIComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqReplicationImplContentDurboDurboImportConfigurationProvError(const OAIComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqReplicationImplReplicationContentFactoryProviderImplError(const OAIComDayCqReplicationImplReplicationContentFactoryProviderImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqReplicationImplReplicationReceiverImplError(const OAIComDayCqReplicationImplReplicationReceiverImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqReplicationImplReplicatorImplError(const OAIComDayCqReplicationImplReplicatorImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqReplicationImplReverseReplicatorError(const OAIComDayCqReplicationImplReverseReplicatorInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqReplicationImplTransportBinaryLessTransportHandlerError(const OAIComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqReplicationImplTransportHttpError(const OAIComDayCqReplicationImplTransportHttpInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqReportingImplCacheCacheImplError(const OAIComDayCqReportingImplCacheCacheImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqReportingImplConfigServiceImplError(const OAIComDayCqReportingImplConfigServiceImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqReportingImplRLogAnalyzerError(const OAIComDayCqReportingImplRLogAnalyzerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqRewriterLinkcheckerImplLinkCheckerImplError(const OAIComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqRewriterLinkcheckerImplLinkCheckerTaskError(const OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryError(const OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqRewriterLinkcheckerImplLinkInfoStorageImplError(const OAIComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqRewriterProcessorImplHtmlParserFactoryError(const OAIComDayCqRewriterProcessorImplHtmlParserFactoryInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqSearchImplBuilderQueryBuilderImplError(const OAIComDayCqSearchImplBuilderQueryBuilderImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqSearchSuggestImplSuggestionIndexManagerImplError(const OAIComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerError(const OAIComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqSearchpromoteImplSearchPromoteServiceImplError(const OAIComDayCqSearchpromoteImplSearchPromoteServiceImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqSecurityACLSetupError(const OAIComDayCqSecurityACLSetupInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqStatisticsImplStatisticsServiceImplError(const OAIComDayCqStatisticsImplStatisticsServiceImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqTaggingImplJcrTagManagerFactoryImplError(const OAIComDayCqTaggingImplJcrTagManagerFactoryImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqTaggingImplSearchTagPredicateEvaluatorError(const OAIComDayCqTaggingImplSearchTagPredicateEvaluatorInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqTaggingImplTagGarbageCollectorError(const OAIComDayCqTaggingImplTagGarbageCollectorInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmContentsyncImplHandlerPagesUpdateHandlerError(const OAIComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorError(const OAIComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreImplAuthoringUIModeServiceImplError(const OAIComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreImplCommandsWCMCommandServletError(const OAIComDayCqWcmCoreImplCommandsWCMCommandServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplError(const OAIComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreImplEventPageEventAuditListenerError(const OAIComDayCqWcmCoreImplEventPageEventAuditListenerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreImplEventPagePostProcessorError(const OAIComDayCqWcmCoreImplEventPagePostProcessorInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreImplEventRepositoryChangeEventListenerError(const OAIComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreImplEventTemplatePostProcessorError(const OAIComDayCqWcmCoreImplEventTemplatePostProcessorInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreImplLanguageManagerImplError(const OAIComDayCqWcmCoreImplLanguageManagerImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplError(const OAIComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreImplPagePageInfoAggregatorImplError(const OAIComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreImplPagePageManagerFactoryImplError(const OAIComDayCqWcmCoreImplPagePageManagerFactoryImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreImplReferencesContentContentReferenceConfigError(const OAIComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreImplServletsContentfinderAssetViewHandlerError(const OAIComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieError(const OAIComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreImplServletsContentfinderPageViewHandlerError(const OAIComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreImplServletsFindReplaceServletError(const OAIComDayCqWcmCoreImplServletsFindReplaceServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreImplServletsReferenceSearchServletError(const OAIComDayCqWcmCoreImplServletsReferenceSearchServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreImplServletsThumbnailServletError(const OAIComDayCqWcmCoreImplServletsThumbnailServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreImplUtilsDefaultPageNameValidatorError(const OAIComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreImplVariantsPageVariantsProviderImplError(const OAIComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreImplVersionManagerImplError(const OAIComDayCqWcmCoreImplVersionManagerImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreImplVersionPurgeTaskError(const OAIComDayCqWcmCoreImplVersionPurgeTaskInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreImplWCMDebugFilterError(const OAIComDayCqWcmCoreImplWCMDebugFilterInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreImplWCMDeveloperModeFilterError(const OAIComDayCqWcmCoreImplWCMDeveloperModeFilterInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreImplWarpTimeWarpFilterError(const OAIComDayCqWcmCoreImplWarpTimeWarpFilterInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreMvtMVTStatisticsImplError(const OAIComDayCqWcmCoreMvtMVTStatisticsImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreStatsPageViewStatisticsImplError(const OAIComDayCqWcmCoreStatsPageViewStatisticsImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmCoreWCMRequestFilterError(const OAIComDayCqWcmCoreWCMRequestFilterInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterDesignPackageImporterError(const OAIComDayCqWcmDesignimporterDesignPackageImporterInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterImplCanvasBuilderImplError(const OAIComDayCqWcmDesignimporterImplCanvasBuilderImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterImplCanvasPageDeleteHandlerError(const OAIComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterImplEntryPreprocessorImplError(const OAIComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterImplMobileCanvasBuilderImplError(const OAIComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeError(const OAIComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponError(const OAIComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanError(const OAIComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleError(const OAIComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandError(const OAIComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenError(const OAIComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerError(const OAIComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTError(const OAIComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleError(const OAIComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleError(const OAIComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHError(const OAIComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeError(const OAIComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandError(const OAIComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlError(const OAIComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentError(const OAIComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenError(const OAIComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlError(const OAIComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmFoundationFormsImplFormChooserServletError(const OAIComDayCqWcmFoundationFormsImplFormChooserServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmFoundationFormsImplFormParagraphPostProcessorError(const OAIComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmFoundationFormsImplFormsHandlingServletError(const OAIComDayCqWcmFoundationFormsImplFormsHandlingServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmFoundationFormsImplMailServletError(const OAIComDayCqWcmFoundationFormsImplMailServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmFoundationImplAdaptiveImageComponentServletError(const OAIComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmFoundationImplHTTPAuthHandlerError(const OAIComDayCqWcmFoundationImplHTTPAuthHandlerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmFoundationImplPageImpressionsTrackerError(const OAIComDayCqWcmFoundationImplPageImpressionsTrackerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmFoundationImplPageRedirectServletError(const OAIComDayCqWcmFoundationImplPageRedirectServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistError(const OAIComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplError(const OAIComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryError(const OAIComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmMobileCoreImplRedirectRedirectFilterError(const OAIComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmMsmImplActionsContentCopyActionFactoryError(const OAIComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmMsmImplActionsContentDeleteActionFactoryError(const OAIComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmMsmImplActionsContentUpdateActionFactoryError(const OAIComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmMsmImplActionsOrderChildrenActionFactoryError(const OAIComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmMsmImplActionsPageMoveActionFactoryError(const OAIComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmMsmImplActionsReferencesUpdateActionFactoryError(const OAIComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmMsmImplActionsVersionCopyActionFactoryError(const OAIComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmMsmImplLiveRelationshipManagerImplError(const OAIComDayCqWcmMsmImplLiveRelationshipManagerImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmMsmImplRolloutManagerImplError(const OAIComDayCqWcmMsmImplRolloutManagerImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmMsmImplServletsAuditLogServletError(const OAIComDayCqWcmMsmImplServletsAuditLogServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmNotificationEmailImplEmailChannelError(const OAIComDayCqWcmNotificationEmailImplEmailChannelInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmNotificationImplNotificationManagerImplError(const OAIComDayCqWcmNotificationImplNotificationManagerImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmScriptingImplBVPManagerError(const OAIComDayCqWcmScriptingImplBVPManagerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmUndoUndoConfigError(const OAIComDayCqWcmUndoUndoConfigInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmWebservicesupportImplReplicationEventListenerError(const OAIComDayCqWcmWebservicesupportImplReplicationEventListenerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmWorkflowImplWcmWorkflowServiceImplError(const OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWcmWorkflowImplWorkflowPackageInfoProviderError(const OAIComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWidgetImplHtmlLibraryManagerImplError(const OAIComDayCqWidgetImplHtmlLibraryManagerImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWidgetImplWidgetExtensionProviderImplError(const OAIComDayCqWidgetImplWidgetExtensionProviderImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWorkflowImplEmailEMailNotificationServiceError(const OAIComDayCqWorkflowImplEmailEMailNotificationServiceInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCqWorkflowImplEmailTaskEMailNotificationServiceError(const OAIComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCrxSecurityTokenImplImplTokenAuthenticationHandlerError(const OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::comDayCrxSecurityTokenImplTokenCleanupTaskError(const OAIComDayCrxSecurityTokenImplTokenCleanupTaskInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::guideLocalizationServiceError(const OAIGuideLocalizationServiceInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::messagingUserComponentFactoryError(const OAIMessagingUserComponentFactoryInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheAriesJmxFrameworkStateConfigError(const OAIOrgApacheAriesJmxFrameworkStateConfigInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheFelixEventadminImplEventAdminError(const OAIOrgApacheFelixEventadminImplEventAdminInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheFelixHttpError(const OAIOrgApacheFelixHttpInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheFelixHttpSslfilterSslFilterError(const OAIOrgApacheFelixHttpSslfilterSslFilterInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheFelixJaasConfigurationFactoryError(const OAIOrgApacheFelixJaasConfigurationFactoryInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheFelixJaasConfigurationSpiError(const OAIOrgApacheFelixJaasConfigurationSpiInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheFelixScrScrServiceError(const OAIOrgApacheFelixScrScrServiceInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheFelixSystemreadyImplComponentsCheckError(const OAIOrgApacheFelixSystemreadyImplComponentsCheckInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheFelixSystemreadyImplFrameworkStartCheckError(const OAIOrgApacheFelixSystemreadyImplFrameworkStartCheckInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheFelixSystemreadyImplServicesCheckError(const OAIOrgApacheFelixSystemreadyImplServicesCheckInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheFelixSystemreadyImplServletSystemAliveServletError(const OAIOrgApacheFelixSystemreadyImplServletSystemAliveServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheFelixSystemreadyImplServletSystemReadyServletError(const OAIOrgApacheFelixSystemreadyImplServletSystemReadyServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheFelixSystemreadySystemReadyMonitorError(const OAIOrgApacheFelixSystemreadySystemReadyMonitorInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheFelixWebconsoleInternalServletOsgiManagerError(const OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheFelixWebconsolePluginsEventInternalPluginServletError(const OAIOrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoError(const OAIOrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheHttpProxyconfiguratorError(const OAIOrgApacheHttpProxyconfiguratorInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderError(const OAIOrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreError(const OAIOrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceError(const OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreError(const OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacError(const OAIOrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceError(const OAIOrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServError(const OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoError(const OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersError(const OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationError(const OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfError(const OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidError(const OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeError(const OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryError(const OAIOrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakPluginsObservationChangeCollectorProviderError(const OAIOrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakQueryQueryEngineSettingsServiceError(const OAIOrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigError(const OAIOrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiError(const OAIOrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraError(const OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurError(const OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiError(const OAIOrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameError(const OAIOrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSecurityUserUserConfigurationImplError(const OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceError(const OAIOrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryError(const OAIOrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceError(const OAIOrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSegmentSegmentNodeStoreServiceError(const OAIOrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceError(const OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeError(const OAIOrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExError(const OAIOrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrError(const OAIOrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiError(const OAIOrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluError(const OAIOrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableError(const OAIOrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitVaultPackagingImplPackagingImplError(const OAIOrgApacheJackrabbitVaultPackagingImplPackagingImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryError(const OAIOrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingAuthCoreImplLogoutServletError(const OAIOrgApacheSlingAuthCoreImplLogoutServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingCaconfigImplConfigurationBindingsValueProviderError(const OAIOrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingCaconfigImplConfigurationResolverImplError(const OAIOrgApacheSlingCaconfigImplConfigurationResolverImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraError(const OAIOrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraError(const OAIOrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviError(const OAIOrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveError(const OAIOrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingCaconfigManagementImplConfigurationManagementSettiError(const OAIOrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourError(const OAIOrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyError(const OAIOrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingCommonsHtmlInternalTagsoupHtmlParserError(const OAIOrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingCommonsLogLogManagerError(const OAIOrgApacheSlingCommonsLogLogManagerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingCommonsLogLogManagerFactoryConfigError(const OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingCommonsLogLogManagerFactoryWriterError(const OAIOrgApacheSlingCommonsLogLogManagerFactoryWriterInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingCommonsMetricsInternalLogReporterError(const OAIOrgApacheSlingCommonsMetricsInternalLogReporterInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterError(const OAIOrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingCommonsMimeInternalMimeTypeServiceImplError(const OAIOrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingCommonsSchedulerImplQuartzSchedulerError(const OAIOrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingCommonsSchedulerImplSchedulerHealthCheckError(const OAIOrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryError(const OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDatasourceDataSourceFactoryError(const OAIOrgApacheSlingDatasourceDataSourceFactoryInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDatasourceJNDIDataSourceFactoryError(const OAIOrgApacheSlingDatasourceJNDIDataSourceFactoryInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDiscoveryOakConfigError(const OAIOrgApacheSlingDiscoveryOakConfigInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckError(const OAIOrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoError(const OAIOrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAError(const OAIOrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryError(const OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDistributionAgentImplReverseDistributionAgentFactoError(const OAIOrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorError(const OAIOrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryError(const OAIOrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDistributionMonitorDistributionQueueHealthCheckError(const OAIOrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDistributionPackagingImplExporterAgentDistributioError(const OAIOrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDistributionPackagingImplExporterLocalDistributioError(const OAIOrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDistributionPackagingImplExporterRemoteDistributiError(const OAIOrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDistributionPackagingImplImporterLocalDistributioError(const OAIOrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDistributionPackagingImplImporterRemoteDistributiError(const OAIOrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDistributionPackagingImplImporterRepositoryDistriError(const OAIOrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDistributionResourcesImplDistributionConfigurationError(const OAIOrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDistributionResourcesImplDistributionServiceResourError(const OAIOrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDistributionSerializationImplDistributionPackageBuError(const OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDistributionSerializationImplVltVaultDistributionError(const OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDistributionTransportImplUserCredentialsDistributiError(const OAIOrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDistributionTriggerImplDistributionEventDistributeError(const OAIOrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerError(const OAIOrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiError(const OAIOrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigError(const OAIOrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDistributionTriggerImplResourceEventDistributionTrError(const OAIOrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingDistributionTriggerImplScheduledDistributionTriggeError(const OAIOrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingEngineImplAuthSlingAuthenticatorError(const OAIOrgApacheSlingEngineImplAuthSlingAuthenticatorInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterError(const OAIOrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingEngineImplLogRequestLoggerError(const OAIOrgApacheSlingEngineImplLogRequestLoggerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingEngineImplLogRequestLoggerServiceError(const OAIOrgApacheSlingEngineImplLogRequestLoggerServiceInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingEngineImplSlingMainServletError(const OAIOrgApacheSlingEngineImplSlingMainServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingEngineParametersError(const OAIOrgApacheSlingEngineParametersInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingEventImplEventingThreadPoolError(const OAIOrgApacheSlingEventImplEventingThreadPoolInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingEventImplJobsDefaultJobManagerError(const OAIOrgApacheSlingEventImplJobsDefaultJobManagerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingEventImplJobsJcrPersistenceHandlerError(const OAIOrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingEventImplJobsJobConsumerManagerError(const OAIOrgApacheSlingEventImplJobsJobConsumerManagerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingEventJobsQueueConfigurationError(const OAIOrgApacheSlingEventJobsQueueConfigurationInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWError(const OAIOrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingFeatureflagsFeatureError(const OAIOrgApacheSlingFeatureflagsFeatureInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingFeatureflagsImplConfiguredFeatureError(const OAIOrgApacheSlingFeatureflagsImplConfiguredFeatureInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingHapiImplHApiUtilImplError(const OAIOrgApacheSlingHapiImplHApiUtilImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingHcCoreImplCompositeHealthCheckError(const OAIOrgApacheSlingHcCoreImplCompositeHealthCheckInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplError(const OAIOrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingHcCoreImplJmxAttributeHealthCheckError(const OAIOrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingHcCoreImplScriptableHealthCheckError(const OAIOrgApacheSlingHcCoreImplScriptableHealthCheckInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingHcCoreImplServletHealthCheckExecutorServletError(const OAIOrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingHcCoreImplServletResultTxtVerboseSerializerError(const OAIOrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingI18nImplI18NFilterError(const OAIOrgApacheSlingI18nImplI18NFilterInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingI18nImplJcrResourceBundleProviderError(const OAIOrgApacheSlingI18nImplJcrResourceBundleProviderInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingInstallerProviderJcrImplJcrInstallerError(const OAIOrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingJcrBaseInternalLoginAdminWhitelistError(const OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentError(const OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingJcrDavexImplServletsSlingDavExServletError(const OAIOrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingJcrJackrabbitServerJndiRegistrationSupportError(const OAIOrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingJcrJackrabbitServerRmiRegistrationSupportError(const OAIOrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingJcrRepoinitImplRepositoryInitializerError(const OAIOrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingJcrRepoinitRepositoryInitializerError(const OAIOrgApacheSlingJcrRepoinitRepositoryInitializerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplError(const OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingJcrResourceInternalJcrSystemUserValidatorError(const OAIOrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryError(const OAIOrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceError(const OAIOrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicError(const OAIOrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingJcrWebdavImplServletsSimpleWebDavServletError(const OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingJmxProviderImplJMXResourceProviderError(const OAIOrgApacheSlingJmxProviderImplJMXResourceProviderInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingModelsImplModelAdapterFactoryError(const OAIOrgApacheSlingModelsImplModelAdapterFactoryInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingModelsJacksonexporterImplResourceModuleProviderError(const OAIOrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoError(const OAIOrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingResourcemergerImplMergedResourceProviderFactoryError(const OAIOrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingResourcemergerPickerOverridingError(const OAIOrgApacheSlingResourcemergerPickerOverridingInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingScriptingCoreImplScriptCacheImplError(const OAIOrgApacheSlingScriptingCoreImplScriptCacheImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingScriptingCoreImplScriptingResourceResolverProviderError(const OAIOrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingScriptingJavaImplJavaScriptEngineFactoryError(const OAIOrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaError(const OAIOrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingScriptingJspJspScriptEngineFactoryError(const OAIOrgApacheSlingScriptingJspJspScriptEngineFactoryInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvError(const OAIOrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingSecurityImplContentDispositionFilterError(const OAIOrgApacheSlingSecurityImplContentDispositionFilterInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingSecurityImplReferrerFilterError(const OAIOrgApacheSlingSecurityImplReferrerFilterInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingServiceusermappingImplServiceUserMapperImplError(const OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedError(const OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingServletsGetDefaultGetServletError(const OAIOrgApacheSlingServletsGetDefaultGetServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingServletsGetImplVersionVersionInfoServletError(const OAIOrgApacheSlingServletsGetImplVersionVersionInfoServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingServletsPostImplHelperChunkCleanUpTaskError(const OAIOrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingServletsPostImplSlingPostServletError(const OAIOrgApacheSlingServletsPostImplSlingPostServletInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingServletsResolverSlingServletResolverError(const OAIOrgApacheSlingServletsResolverSlingServletResolverInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingSettingsImplSlingSettingsServiceImplError(const OAIOrgApacheSlingSettingsImplSlingSettingsServiceImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingStartupfilterImplStartupFilterImplError(const OAIOrgApacheSlingStartupfilterImplStartupFilterImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingTenantInternalTenantProviderImplError(const OAIOrgApacheSlingTenantInternalTenantProviderImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingTracerInternalLogTracerError(const OAIOrgApacheSlingTracerInternalLogTracerInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIConfigmgrApiRequest::orgApacheSlingXssImplXSSFilterImplError(const OAIOrgApacheSlingXssImplXSSFilterImplInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIConfigmgrApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(res);  // TODO
    Q_UNUSED(error_type); // TODO
}
    
void OAIConfigmgrApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(res);  // TODO
    Q_UNUSED(error_type); // TODO
}

}
