/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteAcpPlatformPlatformServletProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteAcpPlatformPlatformServletProperties::OAIComAdobeGraniteAcpPlatformPlatformServletProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeGraniteAcpPlatformPlatformServletProperties::OAIComAdobeGraniteAcpPlatformPlatformServletProperties() {
    this->init();
}

OAIComAdobeGraniteAcpPlatformPlatformServletProperties::~OAIComAdobeGraniteAcpPlatformPlatformServletProperties() {
    
}

void
OAIComAdobeGraniteAcpPlatformPlatformServletProperties::init() {
    m_query_limit_isSet = false;
    m_file_type_extension_map_isSet = false;
}

void
OAIComAdobeGraniteAcpPlatformPlatformServletProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeGraniteAcpPlatformPlatformServletProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(query_limit, json[QString("query.limit")]);
    
    ::OpenAPI::fromJsonValue(file_type_extension_map, json[QString("file.type.extension.map")]);
    
}

QString
OAIComAdobeGraniteAcpPlatformPlatformServletProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteAcpPlatformPlatformServletProperties::asJsonObject() const {
    QJsonObject obj;
	if(query_limit.isSet()){
        obj.insert(QString("query.limit"), ::OpenAPI::toJsonValue(query_limit));
    }
	if(file_type_extension_map.isSet()){
        obj.insert(QString("file.type.extension.map"), ::OpenAPI::toJsonValue(file_type_extension_map));
    }
    return obj;
}

OAIConfigNodePropertyInteger
OAIComAdobeGraniteAcpPlatformPlatformServletProperties::getQueryLimit() const {
    return query_limit;
}
void
OAIComAdobeGraniteAcpPlatformPlatformServletProperties::setQueryLimit(const OAIConfigNodePropertyInteger &query_limit) {
    this->query_limit = query_limit;
    this->m_query_limit_isSet = true;
}

OAIConfigNodePropertyArray
OAIComAdobeGraniteAcpPlatformPlatformServletProperties::getFileTypeExtensionMap() const {
    return file_type_extension_map;
}
void
OAIComAdobeGraniteAcpPlatformPlatformServletProperties::setFileTypeExtensionMap(const OAIConfigNodePropertyArray &file_type_extension_map) {
    this->file_type_extension_map = file_type_extension_map;
    this->m_file_type_extension_map_isSet = true;
}


bool
OAIComAdobeGraniteAcpPlatformPlatformServletProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(query_limit.isSet()){ isObjectUpdated = true; break;}
    
        if(file_type_extension_map.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

