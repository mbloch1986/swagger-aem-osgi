/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::OAIComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::OAIComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties() {
    this->init();
}

OAIComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::~OAIComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties() {
    
}

void
OAIComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::init() {
    m_feature_name_isSet = false;
    m_feature_description_isSet = false;
    m_http_header_name_isSet = false;
    m_http_header_valuepattern_isSet = false;
}

void
OAIComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(feature_name, json[QString("feature.name")]);
    
    ::OpenAPI::fromJsonValue(feature_description, json[QString("feature.description")]);
    
    ::OpenAPI::fromJsonValue(http_header_name, json[QString("http.header.name")]);
    
    ::OpenAPI::fromJsonValue(http_header_valuepattern, json[QString("http.header.valuepattern")]);
    
}

QString
OAIComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::asJsonObject() const {
    QJsonObject obj;
	if(feature_name.isSet()){
        obj.insert(QString("feature.name"), ::OpenAPI::toJsonValue(feature_name));
    }
	if(feature_description.isSet()){
        obj.insert(QString("feature.description"), ::OpenAPI::toJsonValue(feature_description));
    }
	if(http_header_name.isSet()){
        obj.insert(QString("http.header.name"), ::OpenAPI::toJsonValue(http_header_name));
    }
	if(http_header_valuepattern.isSet()){
        obj.insert(QString("http.header.valuepattern"), ::OpenAPI::toJsonValue(http_header_valuepattern));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::getFeatureName() const {
    return feature_name;
}
void
OAIComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::setFeatureName(const OAIConfigNodePropertyString &feature_name) {
    this->feature_name = feature_name;
    this->m_feature_name_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::getFeatureDescription() const {
    return feature_description;
}
void
OAIComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::setFeatureDescription(const OAIConfigNodePropertyString &feature_description) {
    this->feature_description = feature_description;
    this->m_feature_description_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::getHttpHeaderName() const {
    return http_header_name;
}
void
OAIComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::setHttpHeaderName(const OAIConfigNodePropertyString &http_header_name) {
    this->http_header_name = http_header_name;
    this->m_http_header_name_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::getHttpHeaderValuepattern() const {
    return http_header_valuepattern;
}
void
OAIComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::setHttpHeaderValuepattern(const OAIConfigNodePropertyString &http_header_valuepattern) {
    this->http_header_valuepattern = http_header_valuepattern;
    this->m_http_header_valuepattern_isSet = true;
}


bool
OAIComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(feature_name.isSet()){ isObjectUpdated = true; break;}
    
        if(feature_description.isSet()){ isObjectUpdated = true; break;}
    
        if(http_header_name.isSet()){ isObjectUpdated = true; break;}
    
        if(http_header_valuepattern.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

