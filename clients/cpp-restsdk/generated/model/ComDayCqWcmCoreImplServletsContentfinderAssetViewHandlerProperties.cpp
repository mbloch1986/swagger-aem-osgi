/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties::ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties()
{
    m_Dam_showexpiredIsSet = false;
    m_Dam_showhiddenIsSet = false;
    m_TagTitleSearchIsSet = false;
    m_GuessTotalIsSet = false;
    m_Dam_expiryPropertyIsSet = false;
}

ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties::~ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties()
{
}

void ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Dam_showexpiredIsSet)
    {
        val[utility::conversions::to_string_t("dam.showexpired")] = ModelBase::toJson(m_Dam_showexpired);
    }
    if(m_Dam_showhiddenIsSet)
    {
        val[utility::conversions::to_string_t("dam.showhidden")] = ModelBase::toJson(m_Dam_showhidden);
    }
    if(m_TagTitleSearchIsSet)
    {
        val[utility::conversions::to_string_t("tagTitleSearch")] = ModelBase::toJson(m_TagTitleSearch);
    }
    if(m_GuessTotalIsSet)
    {
        val[utility::conversions::to_string_t("guessTotal")] = ModelBase::toJson(m_GuessTotal);
    }
    if(m_Dam_expiryPropertyIsSet)
    {
        val[utility::conversions::to_string_t("dam.expiryProperty")] = ModelBase::toJson(m_Dam_expiryProperty);
    }

    return val;
}

void ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("dam.showexpired")))
    {
        if(!val[utility::conversions::to_string_t("dam.showexpired")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("dam.showexpired")]);
            setDamShowexpired( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dam.showhidden")))
    {
        if(!val[utility::conversions::to_string_t("dam.showhidden")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("dam.showhidden")]);
            setDamShowhidden( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("tagTitleSearch")))
    {
        if(!val[utility::conversions::to_string_t("tagTitleSearch")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("tagTitleSearch")]);
            setTagTitleSearch( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("guessTotal")))
    {
        if(!val[utility::conversions::to_string_t("guessTotal")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("guessTotal")]);
            setGuessTotal( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dam.expiryProperty")))
    {
        if(!val[utility::conversions::to_string_t("dam.expiryProperty")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("dam.expiryProperty")]);
            setDamExpiryProperty( newItem );
        }
    }
}

void ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Dam_showexpiredIsSet)
    {
        if (m_Dam_showexpired.get())
        {
            m_Dam_showexpired->toMultipart(multipart, utility::conversions::to_string_t("dam.showexpired."));
        }
    }
    if(m_Dam_showhiddenIsSet)
    {
        if (m_Dam_showhidden.get())
        {
            m_Dam_showhidden->toMultipart(multipart, utility::conversions::to_string_t("dam.showhidden."));
        }
    }
    if(m_TagTitleSearchIsSet)
    {
        if (m_TagTitleSearch.get())
        {
            m_TagTitleSearch->toMultipart(multipart, utility::conversions::to_string_t("tagTitleSearch."));
        }
    }
    if(m_GuessTotalIsSet)
    {
        if (m_GuessTotal.get())
        {
            m_GuessTotal->toMultipart(multipart, utility::conversions::to_string_t("guessTotal."));
        }
    }
    if(m_Dam_expiryPropertyIsSet)
    {
        if (m_Dam_expiryProperty.get())
        {
            m_Dam_expiryProperty->toMultipart(multipart, utility::conversions::to_string_t("dam.expiryProperty."));
        }
    }
}

void ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("dam.showexpired")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("dam.showexpired")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("dam.showexpired."));
            setDamShowexpired( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dam.showhidden")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("dam.showhidden")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("dam.showhidden."));
            setDamShowhidden( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tagTitleSearch")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("tagTitleSearch")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("tagTitleSearch."));
            setTagTitleSearch( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("guessTotal")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("guessTotal")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("guessTotal."));
            setGuessTotal( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dam.expiryProperty")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("dam.expiryProperty")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("dam.expiryProperty."));
            setDamExpiryProperty( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties::getDamShowexpired() const
{
    return m_Dam_showexpired;
}


void ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties::setDamShowexpired(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Dam_showexpired = value;
    m_Dam_showexpiredIsSet = true;
}
bool ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties::damShowexpiredIsSet() const
{
    return m_Dam_showexpiredIsSet;
}

void ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties::unsetDam_showexpired()
{
    m_Dam_showexpiredIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties::getDamShowhidden() const
{
    return m_Dam_showhidden;
}


void ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties::setDamShowhidden(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Dam_showhidden = value;
    m_Dam_showhiddenIsSet = true;
}
bool ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties::damShowhiddenIsSet() const
{
    return m_Dam_showhiddenIsSet;
}

void ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties::unsetDam_showhidden()
{
    m_Dam_showhiddenIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties::getTagTitleSearch() const
{
    return m_TagTitleSearch;
}


void ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties::setTagTitleSearch(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_TagTitleSearch = value;
    m_TagTitleSearchIsSet = true;
}
bool ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties::tagTitleSearchIsSet() const
{
    return m_TagTitleSearchIsSet;
}

void ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties::unsetTagTitleSearch()
{
    m_TagTitleSearchIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties::getGuessTotal() const
{
    return m_GuessTotal;
}


void ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties::setGuessTotal(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_GuessTotal = value;
    m_GuessTotalIsSet = true;
}
bool ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties::guessTotalIsSet() const
{
    return m_GuessTotalIsSet;
}

void ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties::unsetGuessTotal()
{
    m_GuessTotalIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties::getDamExpiryProperty() const
{
    return m_Dam_expiryProperty;
}


void ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties::setDamExpiryProperty(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Dam_expiryProperty = value;
    m_Dam_expiryPropertyIsSet = true;
}
bool ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties::damExpiryPropertyIsSet() const
{
    return m_Dam_expiryPropertyIsSet;
}

void ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties::unsetDam_expiryProperty()
{
    m_Dam_expiryPropertyIsSet = false;
}

}
}
}
}

