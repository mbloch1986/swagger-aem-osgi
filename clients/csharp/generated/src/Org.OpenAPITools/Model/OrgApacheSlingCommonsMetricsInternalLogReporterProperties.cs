/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OrgApacheSlingCommonsMetricsInternalLogReporterProperties
    /// </summary>
    [DataContract]
    public partial class OrgApacheSlingCommonsMetricsInternalLogReporterProperties :  IEquatable<OrgApacheSlingCommonsMetricsInternalLogReporterProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgApacheSlingCommonsMetricsInternalLogReporterProperties" /> class.
        /// </summary>
        /// <param name="period">period.</param>
        /// <param name="timeUnit">timeUnit.</param>
        /// <param name="level">level.</param>
        /// <param name="loggerName">loggerName.</param>
        /// <param name="prefix">prefix.</param>
        /// <param name="pattern">pattern.</param>
        /// <param name="registryName">registryName.</param>
        public OrgApacheSlingCommonsMetricsInternalLogReporterProperties(ConfigNodePropertyInteger period = default(ConfigNodePropertyInteger), ConfigNodePropertyDropDown timeUnit = default(ConfigNodePropertyDropDown), ConfigNodePropertyDropDown level = default(ConfigNodePropertyDropDown), ConfigNodePropertyString loggerName = default(ConfigNodePropertyString), ConfigNodePropertyString prefix = default(ConfigNodePropertyString), ConfigNodePropertyString pattern = default(ConfigNodePropertyString), ConfigNodePropertyString registryName = default(ConfigNodePropertyString))
        {
            this.Period = period;
            this.TimeUnit = timeUnit;
            this.Level = level;
            this.LoggerName = loggerName;
            this.Prefix = prefix;
            this.Pattern = pattern;
            this.RegistryName = registryName;
        }
        
        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name="period", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger Period { get; set; }

        /// <summary>
        /// Gets or Sets TimeUnit
        /// </summary>
        [DataMember(Name="timeUnit", EmitDefaultValue=false)]
        public ConfigNodePropertyDropDown TimeUnit { get; set; }

        /// <summary>
        /// Gets or Sets Level
        /// </summary>
        [DataMember(Name="level", EmitDefaultValue=false)]
        public ConfigNodePropertyDropDown Level { get; set; }

        /// <summary>
        /// Gets or Sets LoggerName
        /// </summary>
        [DataMember(Name="loggerName", EmitDefaultValue=false)]
        public ConfigNodePropertyString LoggerName { get; set; }

        /// <summary>
        /// Gets or Sets Prefix
        /// </summary>
        [DataMember(Name="prefix", EmitDefaultValue=false)]
        public ConfigNodePropertyString Prefix { get; set; }

        /// <summary>
        /// Gets or Sets Pattern
        /// </summary>
        [DataMember(Name="pattern", EmitDefaultValue=false)]
        public ConfigNodePropertyString Pattern { get; set; }

        /// <summary>
        /// Gets or Sets RegistryName
        /// </summary>
        [DataMember(Name="registryName", EmitDefaultValue=false)]
        public ConfigNodePropertyString RegistryName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheSlingCommonsMetricsInternalLogReporterProperties {\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  TimeUnit: ").Append(TimeUnit).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  LoggerName: ").Append(LoggerName).Append("\n");
            sb.Append("  Prefix: ").Append(Prefix).Append("\n");
            sb.Append("  Pattern: ").Append(Pattern).Append("\n");
            sb.Append("  RegistryName: ").Append(RegistryName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrgApacheSlingCommonsMetricsInternalLogReporterProperties);
        }

        /// <summary>
        /// Returns true if OrgApacheSlingCommonsMetricsInternalLogReporterProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of OrgApacheSlingCommonsMetricsInternalLogReporterProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheSlingCommonsMetricsInternalLogReporterProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Period == input.Period ||
                    (this.Period != null &&
                    this.Period.Equals(input.Period))
                ) && 
                (
                    this.TimeUnit == input.TimeUnit ||
                    (this.TimeUnit != null &&
                    this.TimeUnit.Equals(input.TimeUnit))
                ) && 
                (
                    this.Level == input.Level ||
                    (this.Level != null &&
                    this.Level.Equals(input.Level))
                ) && 
                (
                    this.LoggerName == input.LoggerName ||
                    (this.LoggerName != null &&
                    this.LoggerName.Equals(input.LoggerName))
                ) && 
                (
                    this.Prefix == input.Prefix ||
                    (this.Prefix != null &&
                    this.Prefix.Equals(input.Prefix))
                ) && 
                (
                    this.Pattern == input.Pattern ||
                    (this.Pattern != null &&
                    this.Pattern.Equals(input.Pattern))
                ) && 
                (
                    this.RegistryName == input.RegistryName ||
                    (this.RegistryName != null &&
                    this.RegistryName.Equals(input.RegistryName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Period != null)
                    hashCode = hashCode * 59 + this.Period.GetHashCode();
                if (this.TimeUnit != null)
                    hashCode = hashCode * 59 + this.TimeUnit.GetHashCode();
                if (this.Level != null)
                    hashCode = hashCode * 59 + this.Level.GetHashCode();
                if (this.LoggerName != null)
                    hashCode = hashCode * 59 + this.LoggerName.GetHashCode();
                if (this.Prefix != null)
                    hashCode = hashCode * 59 + this.Prefix.GetHashCode();
                if (this.Pattern != null)
                    hashCode = hashCode * 59 + this.Pattern.GetHashCode();
                if (this.RegistryName != null)
                    hashCode = hashCode * 59 + this.RegistryName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
