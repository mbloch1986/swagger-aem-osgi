/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigProperties {
  #[serde(rename = "name")]
  name: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "endpoint")]
  endpoint: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "transportSecretProvider.target")]
  transport_secret_provider_target: Option<::models::ConfigNodePropertyString>
}

impl OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigProperties {
  pub fn new() -> OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigProperties {
    OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigProperties {
      name: None,
      endpoint: None,
      transport_secret_provider_target: None
    }
  }

  pub fn set_name(&mut self, name: ::models::ConfigNodePropertyString) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: ::models::ConfigNodePropertyString) -> OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigProperties {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_endpoint(&mut self, endpoint: ::models::ConfigNodePropertyString) {
    self.endpoint = Some(endpoint);
  }

  pub fn with_endpoint(mut self, endpoint: ::models::ConfigNodePropertyString) -> OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigProperties {
    self.endpoint = Some(endpoint);
    self
  }

  pub fn endpoint(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.endpoint.as_ref()
  }

  pub fn reset_endpoint(&mut self) {
    self.endpoint = None;
  }

  pub fn set_transport_secret_provider_target(&mut self, transport_secret_provider_target: ::models::ConfigNodePropertyString) {
    self.transport_secret_provider_target = Some(transport_secret_provider_target);
  }

  pub fn with_transport_secret_provider_target(mut self, transport_secret_provider_target: ::models::ConfigNodePropertyString) -> OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigProperties {
    self.transport_secret_provider_target = Some(transport_secret_provider_target);
    self
  }

  pub fn transport_secret_provider_target(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.transport_secret_provider_target.as_ref()
  }

  pub fn reset_transport_secret_provider_target(&mut self) {
    self.transport_secret_provider_target = None;
  }

}



