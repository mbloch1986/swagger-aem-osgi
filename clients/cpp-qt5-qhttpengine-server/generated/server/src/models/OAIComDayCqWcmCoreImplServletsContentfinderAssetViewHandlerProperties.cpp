/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties::OAIComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties(QString json) {
    this->fromJson(json);
}

OAIComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties::OAIComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties() {
    this->init();
}

OAIComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties::~OAIComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties() {
    
}

void
OAIComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties::init() {
    m_dam_showexpired_isSet = false;
    m_dam_showhidden_isSet = false;
    m_tag_title_search_isSet = false;
    m_guess_total_isSet = false;
    m_dam_expiry_property_isSet = false;
}

void
OAIComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(dam_showexpired, json[QString("dam.showexpired")]);
    
    ::OpenAPI::fromJsonValue(dam_showhidden, json[QString("dam.showhidden")]);
    
    ::OpenAPI::fromJsonValue(tag_title_search, json[QString("tagTitleSearch")]);
    
    ::OpenAPI::fromJsonValue(guess_total, json[QString("guessTotal")]);
    
    ::OpenAPI::fromJsonValue(dam_expiry_property, json[QString("dam.expiryProperty")]);
    
}

QString
OAIComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties::asJsonObject() const {
    QJsonObject obj;
	if(dam_showexpired.isSet()){
        obj.insert(QString("dam.showexpired"), ::OpenAPI::toJsonValue(dam_showexpired));
    }
	if(dam_showhidden.isSet()){
        obj.insert(QString("dam.showhidden"), ::OpenAPI::toJsonValue(dam_showhidden));
    }
	if(tag_title_search.isSet()){
        obj.insert(QString("tagTitleSearch"), ::OpenAPI::toJsonValue(tag_title_search));
    }
	if(guess_total.isSet()){
        obj.insert(QString("guessTotal"), ::OpenAPI::toJsonValue(guess_total));
    }
	if(dam_expiry_property.isSet()){
        obj.insert(QString("dam.expiryProperty"), ::OpenAPI::toJsonValue(dam_expiry_property));
    }
    return obj;
}

OAIConfigNodePropertyBoolean
OAIComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties::getDamShowexpired() const {
    return dam_showexpired;
}
void
OAIComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties::setDamShowexpired(const OAIConfigNodePropertyBoolean &dam_showexpired) {
    this->dam_showexpired = dam_showexpired;
    this->m_dam_showexpired_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties::getDamShowhidden() const {
    return dam_showhidden;
}
void
OAIComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties::setDamShowhidden(const OAIConfigNodePropertyBoolean &dam_showhidden) {
    this->dam_showhidden = dam_showhidden;
    this->m_dam_showhidden_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties::getTagTitleSearch() const {
    return tag_title_search;
}
void
OAIComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties::setTagTitleSearch(const OAIConfigNodePropertyBoolean &tag_title_search) {
    this->tag_title_search = tag_title_search;
    this->m_tag_title_search_isSet = true;
}

OAIConfigNodePropertyString
OAIComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties::getGuessTotal() const {
    return guess_total;
}
void
OAIComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties::setGuessTotal(const OAIConfigNodePropertyString &guess_total) {
    this->guess_total = guess_total;
    this->m_guess_total_isSet = true;
}

OAIConfigNodePropertyString
OAIComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties::getDamExpiryProperty() const {
    return dam_expiry_property;
}
void
OAIComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties::setDamExpiryProperty(const OAIConfigNodePropertyString &dam_expiry_property) {
    this->dam_expiry_property = dam_expiry_property;
    this->m_dam_expiry_property_isSet = true;
}


bool
OAIComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(dam_showexpired.isSet()){ isObjectUpdated = true; break;}
    
        if(dam_showhidden.isSet()){ isObjectUpdated = true; break;}
    
        if(tag_title_search.isSet()){ isObjectUpdated = true; break;}
    
        if(guess_total.isSet()){ isObjectUpdated = true; break;}
    
        if(dam_expiry_property.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

