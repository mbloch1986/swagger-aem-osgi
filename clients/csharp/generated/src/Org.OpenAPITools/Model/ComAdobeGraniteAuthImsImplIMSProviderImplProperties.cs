/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComAdobeGraniteAuthImsImplIMSProviderImplProperties
    /// </summary>
    [DataContract]
    public partial class ComAdobeGraniteAuthImsImplIMSProviderImplProperties :  IEquatable<ComAdobeGraniteAuthImsImplIMSProviderImplProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAdobeGraniteAuthImsImplIMSProviderImplProperties" /> class.
        /// </summary>
        /// <param name="oauthProviderId">oauthProviderId.</param>
        /// <param name="oauthProviderImsAuthorizationUrl">oauthProviderImsAuthorizationUrl.</param>
        /// <param name="oauthProviderImsTokenUrl">oauthProviderImsTokenUrl.</param>
        /// <param name="oauthProviderImsProfileUrl">oauthProviderImsProfileUrl.</param>
        /// <param name="oauthProviderImsExtendedDetailsUrls">oauthProviderImsExtendedDetailsUrls.</param>
        /// <param name="oauthProviderImsValidateTokenUrl">oauthProviderImsValidateTokenUrl.</param>
        /// <param name="oauthProviderImsSessionProperty">oauthProviderImsSessionProperty.</param>
        /// <param name="oauthProviderImsServiceTokenClientId">oauthProviderImsServiceTokenClientId.</param>
        /// <param name="oauthProviderImsServiceTokenClientSecret">oauthProviderImsServiceTokenClientSecret.</param>
        /// <param name="oauthProviderImsServiceToken">oauthProviderImsServiceToken.</param>
        /// <param name="imsOrgRef">imsOrgRef.</param>
        /// <param name="imsGroupMapping">imsGroupMapping.</param>
        /// <param name="oauthProviderImsOnlyLicenseGroup">oauthProviderImsOnlyLicenseGroup.</param>
        public ComAdobeGraniteAuthImsImplIMSProviderImplProperties(ConfigNodePropertyString oauthProviderId = default(ConfigNodePropertyString), ConfigNodePropertyString oauthProviderImsAuthorizationUrl = default(ConfigNodePropertyString), ConfigNodePropertyString oauthProviderImsTokenUrl = default(ConfigNodePropertyString), ConfigNodePropertyString oauthProviderImsProfileUrl = default(ConfigNodePropertyString), ConfigNodePropertyArray oauthProviderImsExtendedDetailsUrls = default(ConfigNodePropertyArray), ConfigNodePropertyString oauthProviderImsValidateTokenUrl = default(ConfigNodePropertyString), ConfigNodePropertyString oauthProviderImsSessionProperty = default(ConfigNodePropertyString), ConfigNodePropertyString oauthProviderImsServiceTokenClientId = default(ConfigNodePropertyString), ConfigNodePropertyString oauthProviderImsServiceTokenClientSecret = default(ConfigNodePropertyString), ConfigNodePropertyString oauthProviderImsServiceToken = default(ConfigNodePropertyString), ConfigNodePropertyString imsOrgRef = default(ConfigNodePropertyString), ConfigNodePropertyArray imsGroupMapping = default(ConfigNodePropertyArray), ConfigNodePropertyBoolean oauthProviderImsOnlyLicenseGroup = default(ConfigNodePropertyBoolean))
        {
            this.OauthProviderId = oauthProviderId;
            this.OauthProviderImsAuthorizationUrl = oauthProviderImsAuthorizationUrl;
            this.OauthProviderImsTokenUrl = oauthProviderImsTokenUrl;
            this.OauthProviderImsProfileUrl = oauthProviderImsProfileUrl;
            this.OauthProviderImsExtendedDetailsUrls = oauthProviderImsExtendedDetailsUrls;
            this.OauthProviderImsValidateTokenUrl = oauthProviderImsValidateTokenUrl;
            this.OauthProviderImsSessionProperty = oauthProviderImsSessionProperty;
            this.OauthProviderImsServiceTokenClientId = oauthProviderImsServiceTokenClientId;
            this.OauthProviderImsServiceTokenClientSecret = oauthProviderImsServiceTokenClientSecret;
            this.OauthProviderImsServiceToken = oauthProviderImsServiceToken;
            this.ImsOrgRef = imsOrgRef;
            this.ImsGroupMapping = imsGroupMapping;
            this.OauthProviderImsOnlyLicenseGroup = oauthProviderImsOnlyLicenseGroup;
        }
        
        /// <summary>
        /// Gets or Sets OauthProviderId
        /// </summary>
        [DataMember(Name="oauth.provider.id", EmitDefaultValue=false)]
        public ConfigNodePropertyString OauthProviderId { get; set; }

        /// <summary>
        /// Gets or Sets OauthProviderImsAuthorizationUrl
        /// </summary>
        [DataMember(Name="oauth.provider.ims.authorization.url", EmitDefaultValue=false)]
        public ConfigNodePropertyString OauthProviderImsAuthorizationUrl { get; set; }

        /// <summary>
        /// Gets or Sets OauthProviderImsTokenUrl
        /// </summary>
        [DataMember(Name="oauth.provider.ims.token.url", EmitDefaultValue=false)]
        public ConfigNodePropertyString OauthProviderImsTokenUrl { get; set; }

        /// <summary>
        /// Gets or Sets OauthProviderImsProfileUrl
        /// </summary>
        [DataMember(Name="oauth.provider.ims.profile.url", EmitDefaultValue=false)]
        public ConfigNodePropertyString OauthProviderImsProfileUrl { get; set; }

        /// <summary>
        /// Gets or Sets OauthProviderImsExtendedDetailsUrls
        /// </summary>
        [DataMember(Name="oauth.provider.ims.extended.details.urls", EmitDefaultValue=false)]
        public ConfigNodePropertyArray OauthProviderImsExtendedDetailsUrls { get; set; }

        /// <summary>
        /// Gets or Sets OauthProviderImsValidateTokenUrl
        /// </summary>
        [DataMember(Name="oauth.provider.ims.validate.token.url", EmitDefaultValue=false)]
        public ConfigNodePropertyString OauthProviderImsValidateTokenUrl { get; set; }

        /// <summary>
        /// Gets or Sets OauthProviderImsSessionProperty
        /// </summary>
        [DataMember(Name="oauth.provider.ims.session.property", EmitDefaultValue=false)]
        public ConfigNodePropertyString OauthProviderImsSessionProperty { get; set; }

        /// <summary>
        /// Gets or Sets OauthProviderImsServiceTokenClientId
        /// </summary>
        [DataMember(Name="oauth.provider.ims.service.token.client.id", EmitDefaultValue=false)]
        public ConfigNodePropertyString OauthProviderImsServiceTokenClientId { get; set; }

        /// <summary>
        /// Gets or Sets OauthProviderImsServiceTokenClientSecret
        /// </summary>
        [DataMember(Name="oauth.provider.ims.service.token.client.secret", EmitDefaultValue=false)]
        public ConfigNodePropertyString OauthProviderImsServiceTokenClientSecret { get; set; }

        /// <summary>
        /// Gets or Sets OauthProviderImsServiceToken
        /// </summary>
        [DataMember(Name="oauth.provider.ims.service.token", EmitDefaultValue=false)]
        public ConfigNodePropertyString OauthProviderImsServiceToken { get; set; }

        /// <summary>
        /// Gets or Sets ImsOrgRef
        /// </summary>
        [DataMember(Name="ims.org.ref", EmitDefaultValue=false)]
        public ConfigNodePropertyString ImsOrgRef { get; set; }

        /// <summary>
        /// Gets or Sets ImsGroupMapping
        /// </summary>
        [DataMember(Name="ims.group.mapping", EmitDefaultValue=false)]
        public ConfigNodePropertyArray ImsGroupMapping { get; set; }

        /// <summary>
        /// Gets or Sets OauthProviderImsOnlyLicenseGroup
        /// </summary>
        [DataMember(Name="oauth.provider.ims.only.license.group", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean OauthProviderImsOnlyLicenseGroup { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeGraniteAuthImsImplIMSProviderImplProperties {\n");
            sb.Append("  OauthProviderId: ").Append(OauthProviderId).Append("\n");
            sb.Append("  OauthProviderImsAuthorizationUrl: ").Append(OauthProviderImsAuthorizationUrl).Append("\n");
            sb.Append("  OauthProviderImsTokenUrl: ").Append(OauthProviderImsTokenUrl).Append("\n");
            sb.Append("  OauthProviderImsProfileUrl: ").Append(OauthProviderImsProfileUrl).Append("\n");
            sb.Append("  OauthProviderImsExtendedDetailsUrls: ").Append(OauthProviderImsExtendedDetailsUrls).Append("\n");
            sb.Append("  OauthProviderImsValidateTokenUrl: ").Append(OauthProviderImsValidateTokenUrl).Append("\n");
            sb.Append("  OauthProviderImsSessionProperty: ").Append(OauthProviderImsSessionProperty).Append("\n");
            sb.Append("  OauthProviderImsServiceTokenClientId: ").Append(OauthProviderImsServiceTokenClientId).Append("\n");
            sb.Append("  OauthProviderImsServiceTokenClientSecret: ").Append(OauthProviderImsServiceTokenClientSecret).Append("\n");
            sb.Append("  OauthProviderImsServiceToken: ").Append(OauthProviderImsServiceToken).Append("\n");
            sb.Append("  ImsOrgRef: ").Append(ImsOrgRef).Append("\n");
            sb.Append("  ImsGroupMapping: ").Append(ImsGroupMapping).Append("\n");
            sb.Append("  OauthProviderImsOnlyLicenseGroup: ").Append(OauthProviderImsOnlyLicenseGroup).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComAdobeGraniteAuthImsImplIMSProviderImplProperties);
        }

        /// <summary>
        /// Returns true if ComAdobeGraniteAuthImsImplIMSProviderImplProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComAdobeGraniteAuthImsImplIMSProviderImplProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeGraniteAuthImsImplIMSProviderImplProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OauthProviderId == input.OauthProviderId ||
                    (this.OauthProviderId != null &&
                    this.OauthProviderId.Equals(input.OauthProviderId))
                ) && 
                (
                    this.OauthProviderImsAuthorizationUrl == input.OauthProviderImsAuthorizationUrl ||
                    (this.OauthProviderImsAuthorizationUrl != null &&
                    this.OauthProviderImsAuthorizationUrl.Equals(input.OauthProviderImsAuthorizationUrl))
                ) && 
                (
                    this.OauthProviderImsTokenUrl == input.OauthProviderImsTokenUrl ||
                    (this.OauthProviderImsTokenUrl != null &&
                    this.OauthProviderImsTokenUrl.Equals(input.OauthProviderImsTokenUrl))
                ) && 
                (
                    this.OauthProviderImsProfileUrl == input.OauthProviderImsProfileUrl ||
                    (this.OauthProviderImsProfileUrl != null &&
                    this.OauthProviderImsProfileUrl.Equals(input.OauthProviderImsProfileUrl))
                ) && 
                (
                    this.OauthProviderImsExtendedDetailsUrls == input.OauthProviderImsExtendedDetailsUrls ||
                    (this.OauthProviderImsExtendedDetailsUrls != null &&
                    this.OauthProviderImsExtendedDetailsUrls.Equals(input.OauthProviderImsExtendedDetailsUrls))
                ) && 
                (
                    this.OauthProviderImsValidateTokenUrl == input.OauthProviderImsValidateTokenUrl ||
                    (this.OauthProviderImsValidateTokenUrl != null &&
                    this.OauthProviderImsValidateTokenUrl.Equals(input.OauthProviderImsValidateTokenUrl))
                ) && 
                (
                    this.OauthProviderImsSessionProperty == input.OauthProviderImsSessionProperty ||
                    (this.OauthProviderImsSessionProperty != null &&
                    this.OauthProviderImsSessionProperty.Equals(input.OauthProviderImsSessionProperty))
                ) && 
                (
                    this.OauthProviderImsServiceTokenClientId == input.OauthProviderImsServiceTokenClientId ||
                    (this.OauthProviderImsServiceTokenClientId != null &&
                    this.OauthProviderImsServiceTokenClientId.Equals(input.OauthProviderImsServiceTokenClientId))
                ) && 
                (
                    this.OauthProviderImsServiceTokenClientSecret == input.OauthProviderImsServiceTokenClientSecret ||
                    (this.OauthProviderImsServiceTokenClientSecret != null &&
                    this.OauthProviderImsServiceTokenClientSecret.Equals(input.OauthProviderImsServiceTokenClientSecret))
                ) && 
                (
                    this.OauthProviderImsServiceToken == input.OauthProviderImsServiceToken ||
                    (this.OauthProviderImsServiceToken != null &&
                    this.OauthProviderImsServiceToken.Equals(input.OauthProviderImsServiceToken))
                ) && 
                (
                    this.ImsOrgRef == input.ImsOrgRef ||
                    (this.ImsOrgRef != null &&
                    this.ImsOrgRef.Equals(input.ImsOrgRef))
                ) && 
                (
                    this.ImsGroupMapping == input.ImsGroupMapping ||
                    (this.ImsGroupMapping != null &&
                    this.ImsGroupMapping.Equals(input.ImsGroupMapping))
                ) && 
                (
                    this.OauthProviderImsOnlyLicenseGroup == input.OauthProviderImsOnlyLicenseGroup ||
                    (this.OauthProviderImsOnlyLicenseGroup != null &&
                    this.OauthProviderImsOnlyLicenseGroup.Equals(input.OauthProviderImsOnlyLicenseGroup))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OauthProviderId != null)
                    hashCode = hashCode * 59 + this.OauthProviderId.GetHashCode();
                if (this.OauthProviderImsAuthorizationUrl != null)
                    hashCode = hashCode * 59 + this.OauthProviderImsAuthorizationUrl.GetHashCode();
                if (this.OauthProviderImsTokenUrl != null)
                    hashCode = hashCode * 59 + this.OauthProviderImsTokenUrl.GetHashCode();
                if (this.OauthProviderImsProfileUrl != null)
                    hashCode = hashCode * 59 + this.OauthProviderImsProfileUrl.GetHashCode();
                if (this.OauthProviderImsExtendedDetailsUrls != null)
                    hashCode = hashCode * 59 + this.OauthProviderImsExtendedDetailsUrls.GetHashCode();
                if (this.OauthProviderImsValidateTokenUrl != null)
                    hashCode = hashCode * 59 + this.OauthProviderImsValidateTokenUrl.GetHashCode();
                if (this.OauthProviderImsSessionProperty != null)
                    hashCode = hashCode * 59 + this.OauthProviderImsSessionProperty.GetHashCode();
                if (this.OauthProviderImsServiceTokenClientId != null)
                    hashCode = hashCode * 59 + this.OauthProviderImsServiceTokenClientId.GetHashCode();
                if (this.OauthProviderImsServiceTokenClientSecret != null)
                    hashCode = hashCode * 59 + this.OauthProviderImsServiceTokenClientSecret.GetHashCode();
                if (this.OauthProviderImsServiceToken != null)
                    hashCode = hashCode * 59 + this.OauthProviderImsServiceToken.GetHashCode();
                if (this.ImsOrgRef != null)
                    hashCode = hashCode * 59 + this.ImsOrgRef.GetHashCode();
                if (this.ImsGroupMapping != null)
                    hashCode = hashCode * 59 + this.ImsGroupMapping.GetHashCode();
                if (this.OauthProviderImsOnlyLicenseGroup != null)
                    hashCode = hashCode * 59 + this.OauthProviderImsOnlyLicenseGroup.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
