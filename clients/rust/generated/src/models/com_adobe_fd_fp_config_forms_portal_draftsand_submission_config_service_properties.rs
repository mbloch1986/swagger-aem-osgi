/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties {
  #[serde(rename = "portal.outboxes")]
  portal_outboxes: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "draft.data.service")]
  draft_data_service: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "draft.metadata.service")]
  draft_metadata_service: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "submit.data.service")]
  submit_data_service: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "submit.metadata.service")]
  submit_metadata_service: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "pendingSign.data.service")]
  pending_sign_data_service: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "pendingSign.metadata.service")]
  pending_sign_metadata_service: Option<::models::ConfigNodePropertyString>
}

impl ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties {
  pub fn new() -> ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties {
    ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties {
      portal_outboxes: None,
      draft_data_service: None,
      draft_metadata_service: None,
      submit_data_service: None,
      submit_metadata_service: None,
      pending_sign_data_service: None,
      pending_sign_metadata_service: None
    }
  }

  pub fn set_portal_outboxes(&mut self, portal_outboxes: ::models::ConfigNodePropertyArray) {
    self.portal_outboxes = Some(portal_outboxes);
  }

  pub fn with_portal_outboxes(mut self, portal_outboxes: ::models::ConfigNodePropertyArray) -> ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties {
    self.portal_outboxes = Some(portal_outboxes);
    self
  }

  pub fn portal_outboxes(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.portal_outboxes.as_ref()
  }

  pub fn reset_portal_outboxes(&mut self) {
    self.portal_outboxes = None;
  }

  pub fn set_draft_data_service(&mut self, draft_data_service: ::models::ConfigNodePropertyString) {
    self.draft_data_service = Some(draft_data_service);
  }

  pub fn with_draft_data_service(mut self, draft_data_service: ::models::ConfigNodePropertyString) -> ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties {
    self.draft_data_service = Some(draft_data_service);
    self
  }

  pub fn draft_data_service(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.draft_data_service.as_ref()
  }

  pub fn reset_draft_data_service(&mut self) {
    self.draft_data_service = None;
  }

  pub fn set_draft_metadata_service(&mut self, draft_metadata_service: ::models::ConfigNodePropertyString) {
    self.draft_metadata_service = Some(draft_metadata_service);
  }

  pub fn with_draft_metadata_service(mut self, draft_metadata_service: ::models::ConfigNodePropertyString) -> ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties {
    self.draft_metadata_service = Some(draft_metadata_service);
    self
  }

  pub fn draft_metadata_service(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.draft_metadata_service.as_ref()
  }

  pub fn reset_draft_metadata_service(&mut self) {
    self.draft_metadata_service = None;
  }

  pub fn set_submit_data_service(&mut self, submit_data_service: ::models::ConfigNodePropertyString) {
    self.submit_data_service = Some(submit_data_service);
  }

  pub fn with_submit_data_service(mut self, submit_data_service: ::models::ConfigNodePropertyString) -> ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties {
    self.submit_data_service = Some(submit_data_service);
    self
  }

  pub fn submit_data_service(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.submit_data_service.as_ref()
  }

  pub fn reset_submit_data_service(&mut self) {
    self.submit_data_service = None;
  }

  pub fn set_submit_metadata_service(&mut self, submit_metadata_service: ::models::ConfigNodePropertyString) {
    self.submit_metadata_service = Some(submit_metadata_service);
  }

  pub fn with_submit_metadata_service(mut self, submit_metadata_service: ::models::ConfigNodePropertyString) -> ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties {
    self.submit_metadata_service = Some(submit_metadata_service);
    self
  }

  pub fn submit_metadata_service(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.submit_metadata_service.as_ref()
  }

  pub fn reset_submit_metadata_service(&mut self) {
    self.submit_metadata_service = None;
  }

  pub fn set_pending_sign_data_service(&mut self, pending_sign_data_service: ::models::ConfigNodePropertyString) {
    self.pending_sign_data_service = Some(pending_sign_data_service);
  }

  pub fn with_pending_sign_data_service(mut self, pending_sign_data_service: ::models::ConfigNodePropertyString) -> ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties {
    self.pending_sign_data_service = Some(pending_sign_data_service);
    self
  }

  pub fn pending_sign_data_service(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.pending_sign_data_service.as_ref()
  }

  pub fn reset_pending_sign_data_service(&mut self) {
    self.pending_sign_data_service = None;
  }

  pub fn set_pending_sign_metadata_service(&mut self, pending_sign_metadata_service: ::models::ConfigNodePropertyString) {
    self.pending_sign_metadata_service = Some(pending_sign_metadata_service);
  }

  pub fn with_pending_sign_metadata_service(mut self, pending_sign_metadata_service: ::models::ConfigNodePropertyString) -> ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties {
    self.pending_sign_metadata_service = Some(pending_sign_metadata_service);
    self
  }

  pub fn pending_sign_metadata_service(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.pending_sign_metadata_service.as_ref()
  }

  pub fn reset_pending_sign_metadata_service(&mut self) {
    self.pending_sign_metadata_service = None;
  }

}



