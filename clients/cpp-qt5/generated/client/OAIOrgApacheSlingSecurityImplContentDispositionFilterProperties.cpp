/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingSecurityImplContentDispositionFilterProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingSecurityImplContentDispositionFilterProperties::OAIOrgApacheSlingSecurityImplContentDispositionFilterProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheSlingSecurityImplContentDispositionFilterProperties::OAIOrgApacheSlingSecurityImplContentDispositionFilterProperties() {
    init();
}

OAIOrgApacheSlingSecurityImplContentDispositionFilterProperties::~OAIOrgApacheSlingSecurityImplContentDispositionFilterProperties() {
    this->cleanup();
}

void
OAIOrgApacheSlingSecurityImplContentDispositionFilterProperties::init() {
    sling_content_disposition_paths = new OAIConfigNodePropertyArray();
    m_sling_content_disposition_paths_isSet = false;
    sling_content_disposition_excluded_paths = new OAIConfigNodePropertyArray();
    m_sling_content_disposition_excluded_paths_isSet = false;
    sling_content_disposition_all_paths = new OAIConfigNodePropertyBoolean();
    m_sling_content_disposition_all_paths_isSet = false;
}

void
OAIOrgApacheSlingSecurityImplContentDispositionFilterProperties::cleanup() {
    if(sling_content_disposition_paths != nullptr) { 
        delete sling_content_disposition_paths;
    }
    if(sling_content_disposition_excluded_paths != nullptr) { 
        delete sling_content_disposition_excluded_paths;
    }
    if(sling_content_disposition_all_paths != nullptr) { 
        delete sling_content_disposition_all_paths;
    }
}

OAIOrgApacheSlingSecurityImplContentDispositionFilterProperties*
OAIOrgApacheSlingSecurityImplContentDispositionFilterProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheSlingSecurityImplContentDispositionFilterProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&sling_content_disposition_paths, pJson["sling.content.disposition.paths"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&sling_content_disposition_excluded_paths, pJson["sling.content.disposition.excluded.paths"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&sling_content_disposition_all_paths, pJson["sling.content.disposition.all.paths"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
}

QString
OAIOrgApacheSlingSecurityImplContentDispositionFilterProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingSecurityImplContentDispositionFilterProperties::asJsonObject() {
    QJsonObject obj;
    if((sling_content_disposition_paths != nullptr) && (sling_content_disposition_paths->isSet())){
        toJsonValue(QString("sling.content.disposition.paths"), sling_content_disposition_paths, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((sling_content_disposition_excluded_paths != nullptr) && (sling_content_disposition_excluded_paths->isSet())){
        toJsonValue(QString("sling.content.disposition.excluded.paths"), sling_content_disposition_excluded_paths, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((sling_content_disposition_all_paths != nullptr) && (sling_content_disposition_all_paths->isSet())){
        toJsonValue(QString("sling.content.disposition.all.paths"), sling_content_disposition_all_paths, obj, QString("OAIConfigNodePropertyBoolean"));
    }

    return obj;
}

OAIConfigNodePropertyArray*
OAIOrgApacheSlingSecurityImplContentDispositionFilterProperties::getSlingContentDispositionPaths() {
    return sling_content_disposition_paths;
}
void
OAIOrgApacheSlingSecurityImplContentDispositionFilterProperties::setSlingContentDispositionPaths(OAIConfigNodePropertyArray* sling_content_disposition_paths) {
    this->sling_content_disposition_paths = sling_content_disposition_paths;
    this->m_sling_content_disposition_paths_isSet = true;
}

OAIConfigNodePropertyArray*
OAIOrgApacheSlingSecurityImplContentDispositionFilterProperties::getSlingContentDispositionExcludedPaths() {
    return sling_content_disposition_excluded_paths;
}
void
OAIOrgApacheSlingSecurityImplContentDispositionFilterProperties::setSlingContentDispositionExcludedPaths(OAIConfigNodePropertyArray* sling_content_disposition_excluded_paths) {
    this->sling_content_disposition_excluded_paths = sling_content_disposition_excluded_paths;
    this->m_sling_content_disposition_excluded_paths_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingSecurityImplContentDispositionFilterProperties::getSlingContentDispositionAllPaths() {
    return sling_content_disposition_all_paths;
}
void
OAIOrgApacheSlingSecurityImplContentDispositionFilterProperties::setSlingContentDispositionAllPaths(OAIConfigNodePropertyBoolean* sling_content_disposition_all_paths) {
    this->sling_content_disposition_all_paths = sling_content_disposition_all_paths;
    this->m_sling_content_disposition_all_paths_isSet = true;
}


bool
OAIOrgApacheSlingSecurityImplContentDispositionFilterProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(sling_content_disposition_paths != nullptr && sling_content_disposition_paths->isSet()){ isObjectUpdated = true; break;}
        if(sling_content_disposition_excluded_paths != nullptr && sling_content_disposition_excluded_paths->isSet()){ isObjectUpdated = true; break;}
        if(sling_content_disposition_all_paths != nullptr && sling_content_disposition_all_paths->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

