/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties()
{
    m_Scheduler_periodIsSet = false;
    m_Scheduler_concurrentIsSet = false;
    m_Service_bad_link_tolerance_intervalIsSet = false;
    m_Service_check_override_patternsIsSet = false;
    m_Service_cache_broken_internal_linksIsSet = false;
    m_Service_special_link_prefixIsSet = false;
    m_Service_special_link_patternsIsSet = false;
}

ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::~ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties()
{
}

void ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Scheduler_periodIsSet)
    {
        val[utility::conversions::to_string_t("scheduler.period")] = ModelBase::toJson(m_Scheduler_period);
    }
    if(m_Scheduler_concurrentIsSet)
    {
        val[utility::conversions::to_string_t("scheduler.concurrent")] = ModelBase::toJson(m_Scheduler_concurrent);
    }
    if(m_Service_bad_link_tolerance_intervalIsSet)
    {
        val[utility::conversions::to_string_t("service.bad_link_tolerance_interval")] = ModelBase::toJson(m_Service_bad_link_tolerance_interval);
    }
    if(m_Service_check_override_patternsIsSet)
    {
        val[utility::conversions::to_string_t("service.check_override_patterns")] = ModelBase::toJson(m_Service_check_override_patterns);
    }
    if(m_Service_cache_broken_internal_linksIsSet)
    {
        val[utility::conversions::to_string_t("service.cache_broken_internal_links")] = ModelBase::toJson(m_Service_cache_broken_internal_links);
    }
    if(m_Service_special_link_prefixIsSet)
    {
        val[utility::conversions::to_string_t("service.special_link_prefix")] = ModelBase::toJson(m_Service_special_link_prefix);
    }
    if(m_Service_special_link_patternsIsSet)
    {
        val[utility::conversions::to_string_t("service.special_link_patterns")] = ModelBase::toJson(m_Service_special_link_patterns);
    }

    return val;
}

void ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("scheduler.period")))
    {
        if(!val[utility::conversions::to_string_t("scheduler.period")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("scheduler.period")]);
            setSchedulerPeriod( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("scheduler.concurrent")))
    {
        if(!val[utility::conversions::to_string_t("scheduler.concurrent")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("scheduler.concurrent")]);
            setSchedulerConcurrent( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("service.bad_link_tolerance_interval")))
    {
        if(!val[utility::conversions::to_string_t("service.bad_link_tolerance_interval")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("service.bad_link_tolerance_interval")]);
            setServiceBadLinkToleranceInterval( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("service.check_override_patterns")))
    {
        if(!val[utility::conversions::to_string_t("service.check_override_patterns")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("service.check_override_patterns")]);
            setServiceCheckOverridePatterns( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("service.cache_broken_internal_links")))
    {
        if(!val[utility::conversions::to_string_t("service.cache_broken_internal_links")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("service.cache_broken_internal_links")]);
            setServiceCacheBrokenInternalLinks( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("service.special_link_prefix")))
    {
        if(!val[utility::conversions::to_string_t("service.special_link_prefix")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("service.special_link_prefix")]);
            setServiceSpecialLinkPrefix( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("service.special_link_patterns")))
    {
        if(!val[utility::conversions::to_string_t("service.special_link_patterns")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("service.special_link_patterns")]);
            setServiceSpecialLinkPatterns( newItem );
        }
    }
}

void ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Scheduler_periodIsSet)
    {
        if (m_Scheduler_period.get())
        {
            m_Scheduler_period->toMultipart(multipart, utility::conversions::to_string_t("scheduler.period."));
        }
    }
    if(m_Scheduler_concurrentIsSet)
    {
        if (m_Scheduler_concurrent.get())
        {
            m_Scheduler_concurrent->toMultipart(multipart, utility::conversions::to_string_t("scheduler.concurrent."));
        }
    }
    if(m_Service_bad_link_tolerance_intervalIsSet)
    {
        if (m_Service_bad_link_tolerance_interval.get())
        {
            m_Service_bad_link_tolerance_interval->toMultipart(multipart, utility::conversions::to_string_t("service.bad_link_tolerance_interval."));
        }
    }
    if(m_Service_check_override_patternsIsSet)
    {
        if (m_Service_check_override_patterns.get())
        {
            m_Service_check_override_patterns->toMultipart(multipart, utility::conversions::to_string_t("service.check_override_patterns."));
        }
    }
    if(m_Service_cache_broken_internal_linksIsSet)
    {
        if (m_Service_cache_broken_internal_links.get())
        {
            m_Service_cache_broken_internal_links->toMultipart(multipart, utility::conversions::to_string_t("service.cache_broken_internal_links."));
        }
    }
    if(m_Service_special_link_prefixIsSet)
    {
        if (m_Service_special_link_prefix.get())
        {
            m_Service_special_link_prefix->toMultipart(multipart, utility::conversions::to_string_t("service.special_link_prefix."));
        }
    }
    if(m_Service_special_link_patternsIsSet)
    {
        if (m_Service_special_link_patterns.get())
        {
            m_Service_special_link_patterns->toMultipart(multipart, utility::conversions::to_string_t("service.special_link_patterns."));
        }
    }
}

void ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("scheduler.period")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("scheduler.period")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("scheduler.period."));
            setSchedulerPeriod( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("scheduler.concurrent")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("scheduler.concurrent")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("scheduler.concurrent."));
            setSchedulerConcurrent( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("service.bad_link_tolerance_interval")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("service.bad_link_tolerance_interval")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("service.bad_link_tolerance_interval."));
            setServiceBadLinkToleranceInterval( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("service.check_override_patterns")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("service.check_override_patterns")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("service.check_override_patterns."));
            setServiceCheckOverridePatterns( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("service.cache_broken_internal_links")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("service.cache_broken_internal_links")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("service.cache_broken_internal_links."));
            setServiceCacheBrokenInternalLinks( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("service.special_link_prefix")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("service.special_link_prefix")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("service.special_link_prefix."));
            setServiceSpecialLinkPrefix( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("service.special_link_patterns")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("service.special_link_patterns")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("service.special_link_patterns."));
            setServiceSpecialLinkPatterns( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::getSchedulerPeriod() const
{
    return m_Scheduler_period;
}


void ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::setSchedulerPeriod(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Scheduler_period = value;
    m_Scheduler_periodIsSet = true;
}
bool ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::schedulerPeriodIsSet() const
{
    return m_Scheduler_periodIsSet;
}

void ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::unsetScheduler_period()
{
    m_Scheduler_periodIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::getSchedulerConcurrent() const
{
    return m_Scheduler_concurrent;
}


void ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::setSchedulerConcurrent(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Scheduler_concurrent = value;
    m_Scheduler_concurrentIsSet = true;
}
bool ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::schedulerConcurrentIsSet() const
{
    return m_Scheduler_concurrentIsSet;
}

void ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::unsetScheduler_concurrent()
{
    m_Scheduler_concurrentIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::getServiceBadLinkToleranceInterval() const
{
    return m_Service_bad_link_tolerance_interval;
}


void ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::setServiceBadLinkToleranceInterval(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Service_bad_link_tolerance_interval = value;
    m_Service_bad_link_tolerance_intervalIsSet = true;
}
bool ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::serviceBadLinkToleranceIntervalIsSet() const
{
    return m_Service_bad_link_tolerance_intervalIsSet;
}

void ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::unsetService_bad_link_tolerance_interval()
{
    m_Service_bad_link_tolerance_intervalIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::getServiceCheckOverridePatterns() const
{
    return m_Service_check_override_patterns;
}


void ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::setServiceCheckOverridePatterns(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Service_check_override_patterns = value;
    m_Service_check_override_patternsIsSet = true;
}
bool ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::serviceCheckOverridePatternsIsSet() const
{
    return m_Service_check_override_patternsIsSet;
}

void ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::unsetService_check_override_patterns()
{
    m_Service_check_override_patternsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::getServiceCacheBrokenInternalLinks() const
{
    return m_Service_cache_broken_internal_links;
}


void ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::setServiceCacheBrokenInternalLinks(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Service_cache_broken_internal_links = value;
    m_Service_cache_broken_internal_linksIsSet = true;
}
bool ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::serviceCacheBrokenInternalLinksIsSet() const
{
    return m_Service_cache_broken_internal_linksIsSet;
}

void ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::unsetService_cache_broken_internal_links()
{
    m_Service_cache_broken_internal_linksIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::getServiceSpecialLinkPrefix() const
{
    return m_Service_special_link_prefix;
}


void ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::setServiceSpecialLinkPrefix(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Service_special_link_prefix = value;
    m_Service_special_link_prefixIsSet = true;
}
bool ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::serviceSpecialLinkPrefixIsSet() const
{
    return m_Service_special_link_prefixIsSet;
}

void ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::unsetService_special_link_prefix()
{
    m_Service_special_link_prefixIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::getServiceSpecialLinkPatterns() const
{
    return m_Service_special_link_patterns;
}


void ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::setServiceSpecialLinkPatterns(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Service_special_link_patterns = value;
    m_Service_special_link_patternsIsSet = true;
}
bool ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::serviceSpecialLinkPatternsIsSet() const
{
    return m_Service_special_link_patternsIsSet;
}

void ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::unsetService_special_link_patterns()
{
    m_Service_special_link_patternsIsSet = false;
}

}
}
}
}

