/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OrgApacheFelixEventadminImplEventAdminProperties
    /// </summary>
    [DataContract]
    public partial class OrgApacheFelixEventadminImplEventAdminProperties :  IEquatable<OrgApacheFelixEventadminImplEventAdminProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgApacheFelixEventadminImplEventAdminProperties" /> class.
        /// </summary>
        /// <param name="orgApacheFelixEventadminThreadPoolSize">orgApacheFelixEventadminThreadPoolSize.</param>
        /// <param name="orgApacheFelixEventadminAsyncToSyncThreadRatio">orgApacheFelixEventadminAsyncToSyncThreadRatio.</param>
        /// <param name="orgApacheFelixEventadminTimeout">orgApacheFelixEventadminTimeout.</param>
        /// <param name="orgApacheFelixEventadminRequireTopic">orgApacheFelixEventadminRequireTopic.</param>
        /// <param name="orgApacheFelixEventadminIgnoreTimeout">orgApacheFelixEventadminIgnoreTimeout.</param>
        /// <param name="orgApacheFelixEventadminIgnoreTopic">orgApacheFelixEventadminIgnoreTopic.</param>
        public OrgApacheFelixEventadminImplEventAdminProperties(ConfigNodePropertyInteger orgApacheFelixEventadminThreadPoolSize = default(ConfigNodePropertyInteger), ConfigNodePropertyFloat orgApacheFelixEventadminAsyncToSyncThreadRatio = default(ConfigNodePropertyFloat), ConfigNodePropertyInteger orgApacheFelixEventadminTimeout = default(ConfigNodePropertyInteger), ConfigNodePropertyBoolean orgApacheFelixEventadminRequireTopic = default(ConfigNodePropertyBoolean), ConfigNodePropertyArray orgApacheFelixEventadminIgnoreTimeout = default(ConfigNodePropertyArray), ConfigNodePropertyArray orgApacheFelixEventadminIgnoreTopic = default(ConfigNodePropertyArray))
        {
            this.OrgApacheFelixEventadminThreadPoolSize = orgApacheFelixEventadminThreadPoolSize;
            this.OrgApacheFelixEventadminAsyncToSyncThreadRatio = orgApacheFelixEventadminAsyncToSyncThreadRatio;
            this.OrgApacheFelixEventadminTimeout = orgApacheFelixEventadminTimeout;
            this.OrgApacheFelixEventadminRequireTopic = orgApacheFelixEventadminRequireTopic;
            this.OrgApacheFelixEventadminIgnoreTimeout = orgApacheFelixEventadminIgnoreTimeout;
            this.OrgApacheFelixEventadminIgnoreTopic = orgApacheFelixEventadminIgnoreTopic;
        }
        
        /// <summary>
        /// Gets or Sets OrgApacheFelixEventadminThreadPoolSize
        /// </summary>
        [DataMember(Name="org.apache.felix.eventadmin.ThreadPoolSize", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger OrgApacheFelixEventadminThreadPoolSize { get; set; }

        /// <summary>
        /// Gets or Sets OrgApacheFelixEventadminAsyncToSyncThreadRatio
        /// </summary>
        [DataMember(Name="org.apache.felix.eventadmin.AsyncToSyncThreadRatio", EmitDefaultValue=false)]
        public ConfigNodePropertyFloat OrgApacheFelixEventadminAsyncToSyncThreadRatio { get; set; }

        /// <summary>
        /// Gets or Sets OrgApacheFelixEventadminTimeout
        /// </summary>
        [DataMember(Name="org.apache.felix.eventadmin.Timeout", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger OrgApacheFelixEventadminTimeout { get; set; }

        /// <summary>
        /// Gets or Sets OrgApacheFelixEventadminRequireTopic
        /// </summary>
        [DataMember(Name="org.apache.felix.eventadmin.RequireTopic", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean OrgApacheFelixEventadminRequireTopic { get; set; }

        /// <summary>
        /// Gets or Sets OrgApacheFelixEventadminIgnoreTimeout
        /// </summary>
        [DataMember(Name="org.apache.felix.eventadmin.IgnoreTimeout", EmitDefaultValue=false)]
        public ConfigNodePropertyArray OrgApacheFelixEventadminIgnoreTimeout { get; set; }

        /// <summary>
        /// Gets or Sets OrgApacheFelixEventadminIgnoreTopic
        /// </summary>
        [DataMember(Name="org.apache.felix.eventadmin.IgnoreTopic", EmitDefaultValue=false)]
        public ConfigNodePropertyArray OrgApacheFelixEventadminIgnoreTopic { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheFelixEventadminImplEventAdminProperties {\n");
            sb.Append("  OrgApacheFelixEventadminThreadPoolSize: ").Append(OrgApacheFelixEventadminThreadPoolSize).Append("\n");
            sb.Append("  OrgApacheFelixEventadminAsyncToSyncThreadRatio: ").Append(OrgApacheFelixEventadminAsyncToSyncThreadRatio).Append("\n");
            sb.Append("  OrgApacheFelixEventadminTimeout: ").Append(OrgApacheFelixEventadminTimeout).Append("\n");
            sb.Append("  OrgApacheFelixEventadminRequireTopic: ").Append(OrgApacheFelixEventadminRequireTopic).Append("\n");
            sb.Append("  OrgApacheFelixEventadminIgnoreTimeout: ").Append(OrgApacheFelixEventadminIgnoreTimeout).Append("\n");
            sb.Append("  OrgApacheFelixEventadminIgnoreTopic: ").Append(OrgApacheFelixEventadminIgnoreTopic).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrgApacheFelixEventadminImplEventAdminProperties);
        }

        /// <summary>
        /// Returns true if OrgApacheFelixEventadminImplEventAdminProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of OrgApacheFelixEventadminImplEventAdminProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheFelixEventadminImplEventAdminProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrgApacheFelixEventadminThreadPoolSize == input.OrgApacheFelixEventadminThreadPoolSize ||
                    (this.OrgApacheFelixEventadminThreadPoolSize != null &&
                    this.OrgApacheFelixEventadminThreadPoolSize.Equals(input.OrgApacheFelixEventadminThreadPoolSize))
                ) && 
                (
                    this.OrgApacheFelixEventadminAsyncToSyncThreadRatio == input.OrgApacheFelixEventadminAsyncToSyncThreadRatio ||
                    (this.OrgApacheFelixEventadminAsyncToSyncThreadRatio != null &&
                    this.OrgApacheFelixEventadminAsyncToSyncThreadRatio.Equals(input.OrgApacheFelixEventadminAsyncToSyncThreadRatio))
                ) && 
                (
                    this.OrgApacheFelixEventadminTimeout == input.OrgApacheFelixEventadminTimeout ||
                    (this.OrgApacheFelixEventadminTimeout != null &&
                    this.OrgApacheFelixEventadminTimeout.Equals(input.OrgApacheFelixEventadminTimeout))
                ) && 
                (
                    this.OrgApacheFelixEventadminRequireTopic == input.OrgApacheFelixEventadminRequireTopic ||
                    (this.OrgApacheFelixEventadminRequireTopic != null &&
                    this.OrgApacheFelixEventadminRequireTopic.Equals(input.OrgApacheFelixEventadminRequireTopic))
                ) && 
                (
                    this.OrgApacheFelixEventadminIgnoreTimeout == input.OrgApacheFelixEventadminIgnoreTimeout ||
                    (this.OrgApacheFelixEventadminIgnoreTimeout != null &&
                    this.OrgApacheFelixEventadminIgnoreTimeout.Equals(input.OrgApacheFelixEventadminIgnoreTimeout))
                ) && 
                (
                    this.OrgApacheFelixEventadminIgnoreTopic == input.OrgApacheFelixEventadminIgnoreTopic ||
                    (this.OrgApacheFelixEventadminIgnoreTopic != null &&
                    this.OrgApacheFelixEventadminIgnoreTopic.Equals(input.OrgApacheFelixEventadminIgnoreTopic))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrgApacheFelixEventadminThreadPoolSize != null)
                    hashCode = hashCode * 59 + this.OrgApacheFelixEventadminThreadPoolSize.GetHashCode();
                if (this.OrgApacheFelixEventadminAsyncToSyncThreadRatio != null)
                    hashCode = hashCode * 59 + this.OrgApacheFelixEventadminAsyncToSyncThreadRatio.GetHashCode();
                if (this.OrgApacheFelixEventadminTimeout != null)
                    hashCode = hashCode * 59 + this.OrgApacheFelixEventadminTimeout.GetHashCode();
                if (this.OrgApacheFelixEventadminRequireTopic != null)
                    hashCode = hashCode * 59 + this.OrgApacheFelixEventadminRequireTopic.GetHashCode();
                if (this.OrgApacheFelixEventadminIgnoreTimeout != null)
                    hashCode = hashCode * 59 + this.OrgApacheFelixEventadminIgnoreTimeout.GetHashCode();
                if (this.OrgApacheFelixEventadminIgnoreTopic != null)
                    hashCode = hashCode * 59 + this.OrgApacheFelixEventadminIgnoreTopic.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
