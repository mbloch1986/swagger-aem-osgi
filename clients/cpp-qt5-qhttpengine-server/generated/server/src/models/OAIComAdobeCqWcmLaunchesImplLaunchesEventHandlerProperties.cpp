/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::OAIComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::OAIComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties() {
    this->init();
}

OAIComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::~OAIComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties() {
    
}

void
OAIComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::init() {
    m_event_filter_isSet = false;
    m_launches_eventhandler_threadpool_maxsize_isSet = false;
    m_launches_eventhandler_threadpool_priority_isSet = false;
    m_launches_eventhandler_updatelastmodification_isSet = false;
}

void
OAIComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(event_filter, json[QString("event.filter")]);
    
    ::OpenAPI::fromJsonValue(launches_eventhandler_threadpool_maxsize, json[QString("launches.eventhandler.threadpool.maxsize")]);
    
    ::OpenAPI::fromJsonValue(launches_eventhandler_threadpool_priority, json[QString("launches.eventhandler.threadpool.priority")]);
    
    ::OpenAPI::fromJsonValue(launches_eventhandler_updatelastmodification, json[QString("launches.eventhandler.updatelastmodification")]);
    
}

QString
OAIComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::asJsonObject() const {
    QJsonObject obj;
	if(event_filter.isSet()){
        obj.insert(QString("event.filter"), ::OpenAPI::toJsonValue(event_filter));
    }
	if(launches_eventhandler_threadpool_maxsize.isSet()){
        obj.insert(QString("launches.eventhandler.threadpool.maxsize"), ::OpenAPI::toJsonValue(launches_eventhandler_threadpool_maxsize));
    }
	if(launches_eventhandler_threadpool_priority.isSet()){
        obj.insert(QString("launches.eventhandler.threadpool.priority"), ::OpenAPI::toJsonValue(launches_eventhandler_threadpool_priority));
    }
	if(launches_eventhandler_updatelastmodification.isSet()){
        obj.insert(QString("launches.eventhandler.updatelastmodification"), ::OpenAPI::toJsonValue(launches_eventhandler_updatelastmodification));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::getEventFilter() const {
    return event_filter;
}
void
OAIComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::setEventFilter(const OAIConfigNodePropertyString &event_filter) {
    this->event_filter = event_filter;
    this->m_event_filter_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::getLaunchesEventhandlerThreadpoolMaxsize() const {
    return launches_eventhandler_threadpool_maxsize;
}
void
OAIComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::setLaunchesEventhandlerThreadpoolMaxsize(const OAIConfigNodePropertyInteger &launches_eventhandler_threadpool_maxsize) {
    this->launches_eventhandler_threadpool_maxsize = launches_eventhandler_threadpool_maxsize;
    this->m_launches_eventhandler_threadpool_maxsize_isSet = true;
}

OAIConfigNodePropertyDropDown
OAIComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::getLaunchesEventhandlerThreadpoolPriority() const {
    return launches_eventhandler_threadpool_priority;
}
void
OAIComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::setLaunchesEventhandlerThreadpoolPriority(const OAIConfigNodePropertyDropDown &launches_eventhandler_threadpool_priority) {
    this->launches_eventhandler_threadpool_priority = launches_eventhandler_threadpool_priority;
    this->m_launches_eventhandler_threadpool_priority_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::getLaunchesEventhandlerUpdatelastmodification() const {
    return launches_eventhandler_updatelastmodification;
}
void
OAIComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::setLaunchesEventhandlerUpdatelastmodification(const OAIConfigNodePropertyBoolean &launches_eventhandler_updatelastmodification) {
    this->launches_eventhandler_updatelastmodification = launches_eventhandler_updatelastmodification;
    this->m_launches_eventhandler_updatelastmodification_isSet = true;
}


bool
OAIComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(event_filter.isSet()){ isObjectUpdated = true; break;}
    
        if(launches_eventhandler_threadpool_maxsize.isSet()){ isObjectUpdated = true; break;}
    
        if(launches_eventhandler_threadpool_priority.isSet()){ isObjectUpdated = true; break;}
    
        if(launches_eventhandler_updatelastmodification.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

