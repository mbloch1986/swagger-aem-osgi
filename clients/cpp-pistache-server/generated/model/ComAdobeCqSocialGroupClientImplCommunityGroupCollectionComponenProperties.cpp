/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties()
{
    m_Group_listing_pagination_enableIsSet = false;
    m_Group_listing_lazyloading_enableIsSet = false;
    m_Page_sizeIsSet = false;
    m_PriorityIsSet = false;
    
}

ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::~ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties()
{
}

void ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Group_listing_pagination_enableIsSet)
    {
        val["group.listing.pagination.enable"] = ModelBase::toJson(m_Group_listing_pagination_enable);
    }
    if(m_Group_listing_lazyloading_enableIsSet)
    {
        val["group.listing.lazyloading.enable"] = ModelBase::toJson(m_Group_listing_lazyloading_enable);
    }
    if(m_Page_sizeIsSet)
    {
        val["page.size"] = ModelBase::toJson(m_Page_size);
    }
    if(m_PriorityIsSet)
    {
        val["priority"] = ModelBase::toJson(m_Priority);
    }
    

    return val;
}

void ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::fromJson(nlohmann::json& val)
{
    if(val.find("group.listing.pagination.enable") != val.end())
    {
        if(!val["group.listing.pagination.enable"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["group.listing.pagination.enable"]);
            setGroupListingPaginationEnable( newItem );
        }
        
    }
    if(val.find("group.listing.lazyloading.enable") != val.end())
    {
        if(!val["group.listing.lazyloading.enable"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["group.listing.lazyloading.enable"]);
            setGroupListingLazyloadingEnable( newItem );
        }
        
    }
    if(val.find("page.size") != val.end())
    {
        if(!val["page.size"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["page.size"]);
            setPageSize( newItem );
        }
        
    }
    if(val.find("priority") != val.end())
    {
        if(!val["priority"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["priority"]);
            setPriority( newItem );
        }
        
    }
    
}


ConfigNodePropertyBoolean ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::getGroupListingPaginationEnable() const
{
    return m_Group_listing_pagination_enable;
}
void ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::setGroupListingPaginationEnable(ConfigNodePropertyBoolean const& value)
{
    m_Group_listing_pagination_enable = value;
    m_Group_listing_pagination_enableIsSet = true;
}
bool ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::groupListingPaginationEnableIsSet() const
{
    return m_Group_listing_pagination_enableIsSet;
}
void ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::unsetGroup_listing_pagination_enable()
{
    m_Group_listing_pagination_enableIsSet = false;
}
ConfigNodePropertyBoolean ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::getGroupListingLazyloadingEnable() const
{
    return m_Group_listing_lazyloading_enable;
}
void ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::setGroupListingLazyloadingEnable(ConfigNodePropertyBoolean const& value)
{
    m_Group_listing_lazyloading_enable = value;
    m_Group_listing_lazyloading_enableIsSet = true;
}
bool ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::groupListingLazyloadingEnableIsSet() const
{
    return m_Group_listing_lazyloading_enableIsSet;
}
void ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::unsetGroup_listing_lazyloading_enable()
{
    m_Group_listing_lazyloading_enableIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::getPageSize() const
{
    return m_Page_size;
}
void ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::setPageSize(ConfigNodePropertyInteger const& value)
{
    m_Page_size = value;
    m_Page_sizeIsSet = true;
}
bool ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::pageSizeIsSet() const
{
    return m_Page_sizeIsSet;
}
void ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::unsetPage_size()
{
    m_Page_sizeIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::getPriority() const
{
    return m_Priority;
}
void ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::setPriority(ConfigNodePropertyInteger const& value)
{
    m_Priority = value;
    m_PriorityIsSet = true;
}
bool ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::priorityIsSet() const
{
    return m_PriorityIsSet;
}
void ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties::unsetPriority()
{
    m_PriorityIsSet = false;
}

}
}
}
}

