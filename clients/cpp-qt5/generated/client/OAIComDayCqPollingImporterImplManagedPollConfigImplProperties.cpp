/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqPollingImporterImplManagedPollConfigImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqPollingImporterImplManagedPollConfigImplProperties::OAIComDayCqPollingImporterImplManagedPollConfigImplProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComDayCqPollingImporterImplManagedPollConfigImplProperties::OAIComDayCqPollingImporterImplManagedPollConfigImplProperties() {
    init();
}

OAIComDayCqPollingImporterImplManagedPollConfigImplProperties::~OAIComDayCqPollingImporterImplManagedPollConfigImplProperties() {
    this->cleanup();
}

void
OAIComDayCqPollingImporterImplManagedPollConfigImplProperties::init() {
    id = new OAIConfigNodePropertyString();
    m_id_isSet = false;
    enabled = new OAIConfigNodePropertyBoolean();
    m_enabled_isSet = false;
    reference = new OAIConfigNodePropertyBoolean();
    m_reference_isSet = false;
    interval = new OAIConfigNodePropertyInteger();
    m_interval_isSet = false;
    expression = new OAIConfigNodePropertyString();
    m_expression_isSet = false;
    source = new OAIConfigNodePropertyString();
    m_source_isSet = false;
    target = new OAIConfigNodePropertyString();
    m_target_isSet = false;
    login = new OAIConfigNodePropertyString();
    m_login_isSet = false;
    password = new OAIConfigNodePropertyString();
    m_password_isSet = false;
}

void
OAIComDayCqPollingImporterImplManagedPollConfigImplProperties::cleanup() {
    if(id != nullptr) { 
        delete id;
    }
    if(enabled != nullptr) { 
        delete enabled;
    }
    if(reference != nullptr) { 
        delete reference;
    }
    if(interval != nullptr) { 
        delete interval;
    }
    if(expression != nullptr) { 
        delete expression;
    }
    if(source != nullptr) { 
        delete source;
    }
    if(target != nullptr) { 
        delete target;
    }
    if(login != nullptr) { 
        delete login;
    }
    if(password != nullptr) { 
        delete password;
    }
}

OAIComDayCqPollingImporterImplManagedPollConfigImplProperties*
OAIComDayCqPollingImporterImplManagedPollConfigImplProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComDayCqPollingImporterImplManagedPollConfigImplProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&id, pJson["id"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&enabled, pJson["enabled"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&reference, pJson["reference"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&interval, pJson["interval"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&expression, pJson["expression"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&source, pJson["source"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&target, pJson["target"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&login, pJson["login"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&password, pJson["password"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIComDayCqPollingImporterImplManagedPollConfigImplProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqPollingImporterImplManagedPollConfigImplProperties::asJsonObject() {
    QJsonObject obj;
    if((id != nullptr) && (id->isSet())){
        toJsonValue(QString("id"), id, obj, QString("OAIConfigNodePropertyString"));
    }
    if((enabled != nullptr) && (enabled->isSet())){
        toJsonValue(QString("enabled"), enabled, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((reference != nullptr) && (reference->isSet())){
        toJsonValue(QString("reference"), reference, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((interval != nullptr) && (interval->isSet())){
        toJsonValue(QString("interval"), interval, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((expression != nullptr) && (expression->isSet())){
        toJsonValue(QString("expression"), expression, obj, QString("OAIConfigNodePropertyString"));
    }
    if((source != nullptr) && (source->isSet())){
        toJsonValue(QString("source"), source, obj, QString("OAIConfigNodePropertyString"));
    }
    if((target != nullptr) && (target->isSet())){
        toJsonValue(QString("target"), target, obj, QString("OAIConfigNodePropertyString"));
    }
    if((login != nullptr) && (login->isSet())){
        toJsonValue(QString("login"), login, obj, QString("OAIConfigNodePropertyString"));
    }
    if((password != nullptr) && (password->isSet())){
        toJsonValue(QString("password"), password, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIComDayCqPollingImporterImplManagedPollConfigImplProperties::getId() {
    return id;
}
void
OAIComDayCqPollingImporterImplManagedPollConfigImplProperties::setId(OAIConfigNodePropertyString* id) {
    this->id = id;
    this->m_id_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComDayCqPollingImporterImplManagedPollConfigImplProperties::getEnabled() {
    return enabled;
}
void
OAIComDayCqPollingImporterImplManagedPollConfigImplProperties::setEnabled(OAIConfigNodePropertyBoolean* enabled) {
    this->enabled = enabled;
    this->m_enabled_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComDayCqPollingImporterImplManagedPollConfigImplProperties::getReference() {
    return reference;
}
void
OAIComDayCqPollingImporterImplManagedPollConfigImplProperties::setReference(OAIConfigNodePropertyBoolean* reference) {
    this->reference = reference;
    this->m_reference_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComDayCqPollingImporterImplManagedPollConfigImplProperties::getInterval() {
    return interval;
}
void
OAIComDayCqPollingImporterImplManagedPollConfigImplProperties::setInterval(OAIConfigNodePropertyInteger* interval) {
    this->interval = interval;
    this->m_interval_isSet = true;
}

OAIConfigNodePropertyString*
OAIComDayCqPollingImporterImplManagedPollConfigImplProperties::getExpression() {
    return expression;
}
void
OAIComDayCqPollingImporterImplManagedPollConfigImplProperties::setExpression(OAIConfigNodePropertyString* expression) {
    this->expression = expression;
    this->m_expression_isSet = true;
}

OAIConfigNodePropertyString*
OAIComDayCqPollingImporterImplManagedPollConfigImplProperties::getSource() {
    return source;
}
void
OAIComDayCqPollingImporterImplManagedPollConfigImplProperties::setSource(OAIConfigNodePropertyString* source) {
    this->source = source;
    this->m_source_isSet = true;
}

OAIConfigNodePropertyString*
OAIComDayCqPollingImporterImplManagedPollConfigImplProperties::getTarget() {
    return target;
}
void
OAIComDayCqPollingImporterImplManagedPollConfigImplProperties::setTarget(OAIConfigNodePropertyString* target) {
    this->target = target;
    this->m_target_isSet = true;
}

OAIConfigNodePropertyString*
OAIComDayCqPollingImporterImplManagedPollConfigImplProperties::getLogin() {
    return login;
}
void
OAIComDayCqPollingImporterImplManagedPollConfigImplProperties::setLogin(OAIConfigNodePropertyString* login) {
    this->login = login;
    this->m_login_isSet = true;
}

OAIConfigNodePropertyString*
OAIComDayCqPollingImporterImplManagedPollConfigImplProperties::getPassword() {
    return password;
}
void
OAIComDayCqPollingImporterImplManagedPollConfigImplProperties::setPassword(OAIConfigNodePropertyString* password) {
    this->password = password;
    this->m_password_isSet = true;
}


bool
OAIComDayCqPollingImporterImplManagedPollConfigImplProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(id != nullptr && id->isSet()){ isObjectUpdated = true; break;}
        if(enabled != nullptr && enabled->isSet()){ isObjectUpdated = true; break;}
        if(reference != nullptr && reference->isSet()){ isObjectUpdated = true; break;}
        if(interval != nullptr && interval->isSet()){ isObjectUpdated = true; break;}
        if(expression != nullptr && expression->isSet()){ isObjectUpdated = true; break;}
        if(source != nullptr && source->isSet()){ isObjectUpdated = true; break;}
        if(target != nullptr && target->isSet()){ isObjectUpdated = true; break;}
        if(login != nullptr && login->isSet()){ isObjectUpdated = true; break;}
        if(password != nullptr && password->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

