/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::OAIComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::OAIComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties() {
    this->init();
}

OAIComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::~OAIComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties() {
    
}

void
OAIComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::init() {
    m_translation_factory_isSet = false;
    m_default_connector_label_isSet = false;
    m_default_connector_attribution_isSet = false;
    m_default_connector_workspace_id_isSet = false;
    m_default_connector_subscription_key_isSet = false;
    m_language_map_location_isSet = false;
    m_category_map_location_isSet = false;
    m_retry_attempts_isSet = false;
    m_timeout_count_isSet = false;
}

void
OAIComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(translation_factory, json[QString("translationFactory")]);
    
    ::OpenAPI::fromJsonValue(default_connector_label, json[QString("defaultConnectorLabel")]);
    
    ::OpenAPI::fromJsonValue(default_connector_attribution, json[QString("defaultConnectorAttribution")]);
    
    ::OpenAPI::fromJsonValue(default_connector_workspace_id, json[QString("defaultConnectorWorkspaceId")]);
    
    ::OpenAPI::fromJsonValue(default_connector_subscription_key, json[QString("defaultConnectorSubscriptionKey")]);
    
    ::OpenAPI::fromJsonValue(language_map_location, json[QString("languageMapLocation")]);
    
    ::OpenAPI::fromJsonValue(category_map_location, json[QString("categoryMapLocation")]);
    
    ::OpenAPI::fromJsonValue(retry_attempts, json[QString("retryAttempts")]);
    
    ::OpenAPI::fromJsonValue(timeout_count, json[QString("timeoutCount")]);
    
}

QString
OAIComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::asJsonObject() const {
    QJsonObject obj;
	if(translation_factory.isSet()){
        obj.insert(QString("translationFactory"), ::OpenAPI::toJsonValue(translation_factory));
    }
	if(default_connector_label.isSet()){
        obj.insert(QString("defaultConnectorLabel"), ::OpenAPI::toJsonValue(default_connector_label));
    }
	if(default_connector_attribution.isSet()){
        obj.insert(QString("defaultConnectorAttribution"), ::OpenAPI::toJsonValue(default_connector_attribution));
    }
	if(default_connector_workspace_id.isSet()){
        obj.insert(QString("defaultConnectorWorkspaceId"), ::OpenAPI::toJsonValue(default_connector_workspace_id));
    }
	if(default_connector_subscription_key.isSet()){
        obj.insert(QString("defaultConnectorSubscriptionKey"), ::OpenAPI::toJsonValue(default_connector_subscription_key));
    }
	if(language_map_location.isSet()){
        obj.insert(QString("languageMapLocation"), ::OpenAPI::toJsonValue(language_map_location));
    }
	if(category_map_location.isSet()){
        obj.insert(QString("categoryMapLocation"), ::OpenAPI::toJsonValue(category_map_location));
    }
	if(retry_attempts.isSet()){
        obj.insert(QString("retryAttempts"), ::OpenAPI::toJsonValue(retry_attempts));
    }
	if(timeout_count.isSet()){
        obj.insert(QString("timeoutCount"), ::OpenAPI::toJsonValue(timeout_count));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::getTranslationFactory() const {
    return translation_factory;
}
void
OAIComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::setTranslationFactory(const OAIConfigNodePropertyString &translation_factory) {
    this->translation_factory = translation_factory;
    this->m_translation_factory_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::getDefaultConnectorLabel() const {
    return default_connector_label;
}
void
OAIComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::setDefaultConnectorLabel(const OAIConfigNodePropertyString &default_connector_label) {
    this->default_connector_label = default_connector_label;
    this->m_default_connector_label_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::getDefaultConnectorAttribution() const {
    return default_connector_attribution;
}
void
OAIComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::setDefaultConnectorAttribution(const OAIConfigNodePropertyString &default_connector_attribution) {
    this->default_connector_attribution = default_connector_attribution;
    this->m_default_connector_attribution_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::getDefaultConnectorWorkspaceId() const {
    return default_connector_workspace_id;
}
void
OAIComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::setDefaultConnectorWorkspaceId(const OAIConfigNodePropertyString &default_connector_workspace_id) {
    this->default_connector_workspace_id = default_connector_workspace_id;
    this->m_default_connector_workspace_id_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::getDefaultConnectorSubscriptionKey() const {
    return default_connector_subscription_key;
}
void
OAIComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::setDefaultConnectorSubscriptionKey(const OAIConfigNodePropertyString &default_connector_subscription_key) {
    this->default_connector_subscription_key = default_connector_subscription_key;
    this->m_default_connector_subscription_key_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::getLanguageMapLocation() const {
    return language_map_location;
}
void
OAIComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::setLanguageMapLocation(const OAIConfigNodePropertyString &language_map_location) {
    this->language_map_location = language_map_location;
    this->m_language_map_location_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::getCategoryMapLocation() const {
    return category_map_location;
}
void
OAIComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::setCategoryMapLocation(const OAIConfigNodePropertyString &category_map_location) {
    this->category_map_location = category_map_location;
    this->m_category_map_location_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::getRetryAttempts() const {
    return retry_attempts;
}
void
OAIComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::setRetryAttempts(const OAIConfigNodePropertyInteger &retry_attempts) {
    this->retry_attempts = retry_attempts;
    this->m_retry_attempts_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::getTimeoutCount() const {
    return timeout_count;
}
void
OAIComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::setTimeoutCount(const OAIConfigNodePropertyInteger &timeout_count) {
    this->timeout_count = timeout_count;
    this->m_timeout_count_isSet = true;
}


bool
OAIComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(translation_factory.isSet()){ isObjectUpdated = true; break;}
    
        if(default_connector_label.isSet()){ isObjectUpdated = true; break;}
    
        if(default_connector_attribution.isSet()){ isObjectUpdated = true; break;}
    
        if(default_connector_workspace_id.isSet()){ isObjectUpdated = true; break;}
    
        if(default_connector_subscription_key.isSet()){ isObjectUpdated = true; break;}
    
        if(language_map_location.isSet()){ isObjectUpdated = true; break;}
    
        if(category_map_location.isSet()){ isObjectUpdated = true; break;}
    
        if(retry_attempts.isSet()){ isObjectUpdated = true; break;}
    
        if(timeout_count.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

