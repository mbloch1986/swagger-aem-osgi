//
// OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



public struct OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties: Codable {

    public var mongouri: ConfigNodePropertyString?
    public var db: ConfigNodePropertyString?
    public var socketKeepAlive: ConfigNodePropertyBoolean?
    public var cache: ConfigNodePropertyInteger?
    public var nodeCachePercentage: ConfigNodePropertyInteger?
    public var prevDocCachePercentage: ConfigNodePropertyInteger?
    public var childrenCachePercentage: ConfigNodePropertyInteger?
    public var diffCachePercentage: ConfigNodePropertyInteger?
    public var cacheSegmentCount: ConfigNodePropertyInteger?
    public var cacheStackMoveDistance: ConfigNodePropertyInteger?
    public var blobCacheSize: ConfigNodePropertyInteger?
    public var persistentCache: ConfigNodePropertyString?
    public var journalCache: ConfigNodePropertyString?
    public var customBlobStore: ConfigNodePropertyBoolean?
    public var journalGCInterval: ConfigNodePropertyInteger?
    public var journalGCMaxAge: ConfigNodePropertyInteger?
    public var prefetchExternalChanges: ConfigNodePropertyBoolean?
    public var role: ConfigNodePropertyString?
    public var versionGcMaxAgeInSecs: ConfigNodePropertyInteger?
    public var versionGCExpression: ConfigNodePropertyString?
    public var versionGCTimeLimitInSecs: ConfigNodePropertyInteger?
    public var blobGcMaxAgeInSecs: ConfigNodePropertyInteger?
    public var blobTrackSnapshotIntervalInSecs: ConfigNodePropertyInteger?
    public var repositoryHome: ConfigNodePropertyString?
    public var maxReplicationLagInSecs: ConfigNodePropertyInteger?
    public var documentStoreType: ConfigNodePropertyDropDown?
    public var bundlingDisabled: ConfigNodePropertyBoolean?
    public var updateLimit: ConfigNodePropertyInteger?
    public var persistentCacheIncludes: ConfigNodePropertyArray?
    public var leaseCheckMode: ConfigNodePropertyDropDown?

    public init(mongouri: ConfigNodePropertyString?, db: ConfigNodePropertyString?, socketKeepAlive: ConfigNodePropertyBoolean?, cache: ConfigNodePropertyInteger?, nodeCachePercentage: ConfigNodePropertyInteger?, prevDocCachePercentage: ConfigNodePropertyInteger?, childrenCachePercentage: ConfigNodePropertyInteger?, diffCachePercentage: ConfigNodePropertyInteger?, cacheSegmentCount: ConfigNodePropertyInteger?, cacheStackMoveDistance: ConfigNodePropertyInteger?, blobCacheSize: ConfigNodePropertyInteger?, persistentCache: ConfigNodePropertyString?, journalCache: ConfigNodePropertyString?, customBlobStore: ConfigNodePropertyBoolean?, journalGCInterval: ConfigNodePropertyInteger?, journalGCMaxAge: ConfigNodePropertyInteger?, prefetchExternalChanges: ConfigNodePropertyBoolean?, role: ConfigNodePropertyString?, versionGcMaxAgeInSecs: ConfigNodePropertyInteger?, versionGCExpression: ConfigNodePropertyString?, versionGCTimeLimitInSecs: ConfigNodePropertyInteger?, blobGcMaxAgeInSecs: ConfigNodePropertyInteger?, blobTrackSnapshotIntervalInSecs: ConfigNodePropertyInteger?, repositoryHome: ConfigNodePropertyString?, maxReplicationLagInSecs: ConfigNodePropertyInteger?, documentStoreType: ConfigNodePropertyDropDown?, bundlingDisabled: ConfigNodePropertyBoolean?, updateLimit: ConfigNodePropertyInteger?, persistentCacheIncludes: ConfigNodePropertyArray?, leaseCheckMode: ConfigNodePropertyDropDown?) {
        self.mongouri = mongouri
        self.db = db
        self.socketKeepAlive = socketKeepAlive
        self.cache = cache
        self.nodeCachePercentage = nodeCachePercentage
        self.prevDocCachePercentage = prevDocCachePercentage
        self.childrenCachePercentage = childrenCachePercentage
        self.diffCachePercentage = diffCachePercentage
        self.cacheSegmentCount = cacheSegmentCount
        self.cacheStackMoveDistance = cacheStackMoveDistance
        self.blobCacheSize = blobCacheSize
        self.persistentCache = persistentCache
        self.journalCache = journalCache
        self.customBlobStore = customBlobStore
        self.journalGCInterval = journalGCInterval
        self.journalGCMaxAge = journalGCMaxAge
        self.prefetchExternalChanges = prefetchExternalChanges
        self.role = role
        self.versionGcMaxAgeInSecs = versionGcMaxAgeInSecs
        self.versionGCExpression = versionGCExpression
        self.versionGCTimeLimitInSecs = versionGCTimeLimitInSecs
        self.blobGcMaxAgeInSecs = blobGcMaxAgeInSecs
        self.blobTrackSnapshotIntervalInSecs = blobTrackSnapshotIntervalInSecs
        self.repositoryHome = repositoryHome
        self.maxReplicationLagInSecs = maxReplicationLagInSecs
        self.documentStoreType = documentStoreType
        self.bundlingDisabled = bundlingDisabled
        self.updateLimit = updateLimit
        self.persistentCacheIncludes = persistentCacheIncludes
        self.leaseCheckMode = leaseCheckMode
    }

    public enum CodingKeys: String, CodingKey { 
        case mongouri
        case db
        case socketKeepAlive
        case cache
        case nodeCachePercentage
        case prevDocCachePercentage
        case childrenCachePercentage
        case diffCachePercentage
        case cacheSegmentCount
        case cacheStackMoveDistance
        case blobCacheSize
        case persistentCache
        case journalCache
        case customBlobStore
        case journalGCInterval
        case journalGCMaxAge
        case prefetchExternalChanges
        case role
        case versionGcMaxAgeInSecs
        case versionGCExpression
        case versionGCTimeLimitInSecs
        case blobGcMaxAgeInSecs
        case blobTrackSnapshotIntervalInSecs
        case repositoryHome = "repository.home"
        case maxReplicationLagInSecs
        case documentStoreType
        case bundlingDisabled
        case updateLimit
        case persistentCacheIncludes
        case leaseCheckMode
    }


}

