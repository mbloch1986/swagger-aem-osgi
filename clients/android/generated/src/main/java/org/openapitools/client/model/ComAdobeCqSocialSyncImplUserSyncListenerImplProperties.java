/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import org.openapitools.client.model.ConfigNodePropertyArray;
import org.openapitools.client.model.ConfigNodePropertyBoolean;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class ComAdobeCqSocialSyncImplUserSyncListenerImplProperties {
  
  @SerializedName("nodetypes")
  private ConfigNodePropertyArray nodetypes = null;
  @SerializedName("ignorableprops")
  private ConfigNodePropertyArray ignorableprops = null;
  @SerializedName("ignorablenodes")
  private ConfigNodePropertyArray ignorablenodes = null;
  @SerializedName("enabled")
  private ConfigNodePropertyBoolean enabled = null;
  @SerializedName("distfolders")
  private ConfigNodePropertyArray distfolders = null;

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyArray getNodetypes() {
    return nodetypes;
  }
  public void setNodetypes(ConfigNodePropertyArray nodetypes) {
    this.nodetypes = nodetypes;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyArray getIgnorableprops() {
    return ignorableprops;
  }
  public void setIgnorableprops(ConfigNodePropertyArray ignorableprops) {
    this.ignorableprops = ignorableprops;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyArray getIgnorablenodes() {
    return ignorablenodes;
  }
  public void setIgnorablenodes(ConfigNodePropertyArray ignorablenodes) {
    this.ignorablenodes = ignorablenodes;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyBoolean getEnabled() {
    return enabled;
  }
  public void setEnabled(ConfigNodePropertyBoolean enabled) {
    this.enabled = enabled;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyArray getDistfolders() {
    return distfolders;
  }
  public void setDistfolders(ConfigNodePropertyArray distfolders) {
    this.distfolders = distfolders;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComAdobeCqSocialSyncImplUserSyncListenerImplProperties comAdobeCqSocialSyncImplUserSyncListenerImplProperties = (ComAdobeCqSocialSyncImplUserSyncListenerImplProperties) o;
    return (this.nodetypes == null ? comAdobeCqSocialSyncImplUserSyncListenerImplProperties.nodetypes == null : this.nodetypes.equals(comAdobeCqSocialSyncImplUserSyncListenerImplProperties.nodetypes)) &&
        (this.ignorableprops == null ? comAdobeCqSocialSyncImplUserSyncListenerImplProperties.ignorableprops == null : this.ignorableprops.equals(comAdobeCqSocialSyncImplUserSyncListenerImplProperties.ignorableprops)) &&
        (this.ignorablenodes == null ? comAdobeCqSocialSyncImplUserSyncListenerImplProperties.ignorablenodes == null : this.ignorablenodes.equals(comAdobeCqSocialSyncImplUserSyncListenerImplProperties.ignorablenodes)) &&
        (this.enabled == null ? comAdobeCqSocialSyncImplUserSyncListenerImplProperties.enabled == null : this.enabled.equals(comAdobeCqSocialSyncImplUserSyncListenerImplProperties.enabled)) &&
        (this.distfolders == null ? comAdobeCqSocialSyncImplUserSyncListenerImplProperties.distfolders == null : this.distfolders.equals(comAdobeCqSocialSyncImplUserSyncListenerImplProperties.distfolders));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.nodetypes == null ? 0: this.nodetypes.hashCode());
    result = 31 * result + (this.ignorableprops == null ? 0: this.ignorableprops.hashCode());
    result = 31 * result + (this.ignorablenodes == null ? 0: this.ignorablenodes.hashCode());
    result = 31 * result + (this.enabled == null ? 0: this.enabled.hashCode());
    result = 31 * result + (this.distfolders == null ? 0: this.distfolders.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComAdobeCqSocialSyncImplUserSyncListenerImplProperties {\n");
    
    sb.append("  nodetypes: ").append(nodetypes).append("\n");
    sb.append("  ignorableprops: ").append(ignorableprops).append("\n");
    sb.append("  ignorablenodes: ").append(ignorablenodes).append("\n");
    sb.append("  enabled: ").append(enabled).append("\n");
    sb.append("  distfolders: ").append(distfolders).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
