/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties
    /// </summary>
    [DataContract]
    public partial class ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties :  IEquatable<ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties" /> class.
        /// </summary>
        /// <param name="defaultTransportAgentToWorkerPrefix">defaultTransportAgentToWorkerPrefix.</param>
        /// <param name="defaultTransportAgentToMasterPrefix">defaultTransportAgentToMasterPrefix.</param>
        /// <param name="defaultTransportInputPackage">defaultTransportInputPackage.</param>
        /// <param name="defaultTransportOutputPackage">defaultTransportOutputPackage.</param>
        /// <param name="defaultTransportReplicationSynchronous">defaultTransportReplicationSynchronous.</param>
        /// <param name="defaultTransportContentpackage">defaultTransportContentpackage.</param>
        /// <param name="offloadingTransporterDefaultEnabled">offloadingTransporterDefaultEnabled.</param>
        public ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties(ConfigNodePropertyString defaultTransportAgentToWorkerPrefix = default(ConfigNodePropertyString), ConfigNodePropertyString defaultTransportAgentToMasterPrefix = default(ConfigNodePropertyString), ConfigNodePropertyString defaultTransportInputPackage = default(ConfigNodePropertyString), ConfigNodePropertyString defaultTransportOutputPackage = default(ConfigNodePropertyString), ConfigNodePropertyBoolean defaultTransportReplicationSynchronous = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean defaultTransportContentpackage = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean offloadingTransporterDefaultEnabled = default(ConfigNodePropertyBoolean))
        {
            this.DefaultTransportAgentToWorkerPrefix = defaultTransportAgentToWorkerPrefix;
            this.DefaultTransportAgentToMasterPrefix = defaultTransportAgentToMasterPrefix;
            this.DefaultTransportInputPackage = defaultTransportInputPackage;
            this.DefaultTransportOutputPackage = defaultTransportOutputPackage;
            this.DefaultTransportReplicationSynchronous = defaultTransportReplicationSynchronous;
            this.DefaultTransportContentpackage = defaultTransportContentpackage;
            this.OffloadingTransporterDefaultEnabled = offloadingTransporterDefaultEnabled;
        }
        
        /// <summary>
        /// Gets or Sets DefaultTransportAgentToWorkerPrefix
        /// </summary>
        [DataMember(Name="default.transport.agent-to-worker.prefix", EmitDefaultValue=false)]
        public ConfigNodePropertyString DefaultTransportAgentToWorkerPrefix { get; set; }

        /// <summary>
        /// Gets or Sets DefaultTransportAgentToMasterPrefix
        /// </summary>
        [DataMember(Name="default.transport.agent-to-master.prefix", EmitDefaultValue=false)]
        public ConfigNodePropertyString DefaultTransportAgentToMasterPrefix { get; set; }

        /// <summary>
        /// Gets or Sets DefaultTransportInputPackage
        /// </summary>
        [DataMember(Name="default.transport.input.package", EmitDefaultValue=false)]
        public ConfigNodePropertyString DefaultTransportInputPackage { get; set; }

        /// <summary>
        /// Gets or Sets DefaultTransportOutputPackage
        /// </summary>
        [DataMember(Name="default.transport.output.package", EmitDefaultValue=false)]
        public ConfigNodePropertyString DefaultTransportOutputPackage { get; set; }

        /// <summary>
        /// Gets or Sets DefaultTransportReplicationSynchronous
        /// </summary>
        [DataMember(Name="default.transport.replication.synchronous", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean DefaultTransportReplicationSynchronous { get; set; }

        /// <summary>
        /// Gets or Sets DefaultTransportContentpackage
        /// </summary>
        [DataMember(Name="default.transport.contentpackage", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean DefaultTransportContentpackage { get; set; }

        /// <summary>
        /// Gets or Sets OffloadingTransporterDefaultEnabled
        /// </summary>
        [DataMember(Name="offloading.transporter.default.enabled", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean OffloadingTransporterDefaultEnabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties {\n");
            sb.Append("  DefaultTransportAgentToWorkerPrefix: ").Append(DefaultTransportAgentToWorkerPrefix).Append("\n");
            sb.Append("  DefaultTransportAgentToMasterPrefix: ").Append(DefaultTransportAgentToMasterPrefix).Append("\n");
            sb.Append("  DefaultTransportInputPackage: ").Append(DefaultTransportInputPackage).Append("\n");
            sb.Append("  DefaultTransportOutputPackage: ").Append(DefaultTransportOutputPackage).Append("\n");
            sb.Append("  DefaultTransportReplicationSynchronous: ").Append(DefaultTransportReplicationSynchronous).Append("\n");
            sb.Append("  DefaultTransportContentpackage: ").Append(DefaultTransportContentpackage).Append("\n");
            sb.Append("  OffloadingTransporterDefaultEnabled: ").Append(OffloadingTransporterDefaultEnabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties);
        }

        /// <summary>
        /// Returns true if ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DefaultTransportAgentToWorkerPrefix == input.DefaultTransportAgentToWorkerPrefix ||
                    (this.DefaultTransportAgentToWorkerPrefix != null &&
                    this.DefaultTransportAgentToWorkerPrefix.Equals(input.DefaultTransportAgentToWorkerPrefix))
                ) && 
                (
                    this.DefaultTransportAgentToMasterPrefix == input.DefaultTransportAgentToMasterPrefix ||
                    (this.DefaultTransportAgentToMasterPrefix != null &&
                    this.DefaultTransportAgentToMasterPrefix.Equals(input.DefaultTransportAgentToMasterPrefix))
                ) && 
                (
                    this.DefaultTransportInputPackage == input.DefaultTransportInputPackage ||
                    (this.DefaultTransportInputPackage != null &&
                    this.DefaultTransportInputPackage.Equals(input.DefaultTransportInputPackage))
                ) && 
                (
                    this.DefaultTransportOutputPackage == input.DefaultTransportOutputPackage ||
                    (this.DefaultTransportOutputPackage != null &&
                    this.DefaultTransportOutputPackage.Equals(input.DefaultTransportOutputPackage))
                ) && 
                (
                    this.DefaultTransportReplicationSynchronous == input.DefaultTransportReplicationSynchronous ||
                    (this.DefaultTransportReplicationSynchronous != null &&
                    this.DefaultTransportReplicationSynchronous.Equals(input.DefaultTransportReplicationSynchronous))
                ) && 
                (
                    this.DefaultTransportContentpackage == input.DefaultTransportContentpackage ||
                    (this.DefaultTransportContentpackage != null &&
                    this.DefaultTransportContentpackage.Equals(input.DefaultTransportContentpackage))
                ) && 
                (
                    this.OffloadingTransporterDefaultEnabled == input.OffloadingTransporterDefaultEnabled ||
                    (this.OffloadingTransporterDefaultEnabled != null &&
                    this.OffloadingTransporterDefaultEnabled.Equals(input.OffloadingTransporterDefaultEnabled))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DefaultTransportAgentToWorkerPrefix != null)
                    hashCode = hashCode * 59 + this.DefaultTransportAgentToWorkerPrefix.GetHashCode();
                if (this.DefaultTransportAgentToMasterPrefix != null)
                    hashCode = hashCode * 59 + this.DefaultTransportAgentToMasterPrefix.GetHashCode();
                if (this.DefaultTransportInputPackage != null)
                    hashCode = hashCode * 59 + this.DefaultTransportInputPackage.GetHashCode();
                if (this.DefaultTransportOutputPackage != null)
                    hashCode = hashCode * 59 + this.DefaultTransportOutputPackage.GetHashCode();
                if (this.DefaultTransportReplicationSynchronous != null)
                    hashCode = hashCode * 59 + this.DefaultTransportReplicationSynchronous.GetHashCode();
                if (this.DefaultTransportContentpackage != null)
                    hashCode = hashCode * 59 + this.DefaultTransportContentpackage.GetHashCode();
                if (this.OffloadingTransporterDefaultEnabled != null)
                    hashCode = hashCode * 59 + this.OffloadingTransporterDefaultEnabled.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
