/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeGraniteWorkflowPurgeSchedulerProperties {
  #[serde(rename = "scheduledpurge.name")]
  scheduledpurge_name: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "scheduledpurge.workflowStatus")]
  scheduledpurge_workflow_status: Option<::models::ConfigNodePropertyDropDown>,
  #[serde(rename = "scheduledpurge.modelIds")]
  scheduledpurge_model_ids: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "scheduledpurge.daysold")]
  scheduledpurge_daysold: Option<::models::ConfigNodePropertyInteger>
}

impl ComAdobeGraniteWorkflowPurgeSchedulerProperties {
  pub fn new() -> ComAdobeGraniteWorkflowPurgeSchedulerProperties {
    ComAdobeGraniteWorkflowPurgeSchedulerProperties {
      scheduledpurge_name: None,
      scheduledpurge_workflow_status: None,
      scheduledpurge_model_ids: None,
      scheduledpurge_daysold: None
    }
  }

  pub fn set_scheduledpurge_name(&mut self, scheduledpurge_name: ::models::ConfigNodePropertyString) {
    self.scheduledpurge_name = Some(scheduledpurge_name);
  }

  pub fn with_scheduledpurge_name(mut self, scheduledpurge_name: ::models::ConfigNodePropertyString) -> ComAdobeGraniteWorkflowPurgeSchedulerProperties {
    self.scheduledpurge_name = Some(scheduledpurge_name);
    self
  }

  pub fn scheduledpurge_name(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.scheduledpurge_name.as_ref()
  }

  pub fn reset_scheduledpurge_name(&mut self) {
    self.scheduledpurge_name = None;
  }

  pub fn set_scheduledpurge_workflow_status(&mut self, scheduledpurge_workflow_status: ::models::ConfigNodePropertyDropDown) {
    self.scheduledpurge_workflow_status = Some(scheduledpurge_workflow_status);
  }

  pub fn with_scheduledpurge_workflow_status(mut self, scheduledpurge_workflow_status: ::models::ConfigNodePropertyDropDown) -> ComAdobeGraniteWorkflowPurgeSchedulerProperties {
    self.scheduledpurge_workflow_status = Some(scheduledpurge_workflow_status);
    self
  }

  pub fn scheduledpurge_workflow_status(&self) -> Option<&::models::ConfigNodePropertyDropDown> {
    self.scheduledpurge_workflow_status.as_ref()
  }

  pub fn reset_scheduledpurge_workflow_status(&mut self) {
    self.scheduledpurge_workflow_status = None;
  }

  pub fn set_scheduledpurge_model_ids(&mut self, scheduledpurge_model_ids: ::models::ConfigNodePropertyArray) {
    self.scheduledpurge_model_ids = Some(scheduledpurge_model_ids);
  }

  pub fn with_scheduledpurge_model_ids(mut self, scheduledpurge_model_ids: ::models::ConfigNodePropertyArray) -> ComAdobeGraniteWorkflowPurgeSchedulerProperties {
    self.scheduledpurge_model_ids = Some(scheduledpurge_model_ids);
    self
  }

  pub fn scheduledpurge_model_ids(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.scheduledpurge_model_ids.as_ref()
  }

  pub fn reset_scheduledpurge_model_ids(&mut self) {
    self.scheduledpurge_model_ids = None;
  }

  pub fn set_scheduledpurge_daysold(&mut self, scheduledpurge_daysold: ::models::ConfigNodePropertyInteger) {
    self.scheduledpurge_daysold = Some(scheduledpurge_daysold);
  }

  pub fn with_scheduledpurge_daysold(mut self, scheduledpurge_daysold: ::models::ConfigNodePropertyInteger) -> ComAdobeGraniteWorkflowPurgeSchedulerProperties {
    self.scheduledpurge_daysold = Some(scheduledpurge_daysold);
    self
  }

  pub fn scheduledpurge_daysold(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.scheduledpurge_daysold.as_ref()
  }

  pub fn reset_scheduledpurge_daysold(&mut self) {
    self.scheduledpurge_daysold = None;
  }

}



