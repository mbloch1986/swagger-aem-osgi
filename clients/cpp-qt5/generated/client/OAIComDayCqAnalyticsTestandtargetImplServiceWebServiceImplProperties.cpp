/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqAnalyticsTestandtargetImplServiceWebServiceImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqAnalyticsTestandtargetImplServiceWebServiceImplProperties::OAIComDayCqAnalyticsTestandtargetImplServiceWebServiceImplProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComDayCqAnalyticsTestandtargetImplServiceWebServiceImplProperties::OAIComDayCqAnalyticsTestandtargetImplServiceWebServiceImplProperties() {
    init();
}

OAIComDayCqAnalyticsTestandtargetImplServiceWebServiceImplProperties::~OAIComDayCqAnalyticsTestandtargetImplServiceWebServiceImplProperties() {
    this->cleanup();
}

void
OAIComDayCqAnalyticsTestandtargetImplServiceWebServiceImplProperties::init() {
    endpoint_uri = new OAIConfigNodePropertyString();
    m_endpoint_uri_isSet = false;
    connection_timeout = new OAIConfigNodePropertyInteger();
    m_connection_timeout_isSet = false;
    socket_timeout = new OAIConfigNodePropertyInteger();
    m_socket_timeout_isSet = false;
}

void
OAIComDayCqAnalyticsTestandtargetImplServiceWebServiceImplProperties::cleanup() {
    if(endpoint_uri != nullptr) { 
        delete endpoint_uri;
    }
    if(connection_timeout != nullptr) { 
        delete connection_timeout;
    }
    if(socket_timeout != nullptr) { 
        delete socket_timeout;
    }
}

OAIComDayCqAnalyticsTestandtargetImplServiceWebServiceImplProperties*
OAIComDayCqAnalyticsTestandtargetImplServiceWebServiceImplProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComDayCqAnalyticsTestandtargetImplServiceWebServiceImplProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&endpoint_uri, pJson["endpointUri"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&connection_timeout, pJson["connectionTimeout"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&socket_timeout, pJson["socketTimeout"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
}

QString
OAIComDayCqAnalyticsTestandtargetImplServiceWebServiceImplProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqAnalyticsTestandtargetImplServiceWebServiceImplProperties::asJsonObject() {
    QJsonObject obj;
    if((endpoint_uri != nullptr) && (endpoint_uri->isSet())){
        toJsonValue(QString("endpointUri"), endpoint_uri, obj, QString("OAIConfigNodePropertyString"));
    }
    if((connection_timeout != nullptr) && (connection_timeout->isSet())){
        toJsonValue(QString("connectionTimeout"), connection_timeout, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((socket_timeout != nullptr) && (socket_timeout->isSet())){
        toJsonValue(QString("socketTimeout"), socket_timeout, obj, QString("OAIConfigNodePropertyInteger"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIComDayCqAnalyticsTestandtargetImplServiceWebServiceImplProperties::getEndpointUri() {
    return endpoint_uri;
}
void
OAIComDayCqAnalyticsTestandtargetImplServiceWebServiceImplProperties::setEndpointUri(OAIConfigNodePropertyString* endpoint_uri) {
    this->endpoint_uri = endpoint_uri;
    this->m_endpoint_uri_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComDayCqAnalyticsTestandtargetImplServiceWebServiceImplProperties::getConnectionTimeout() {
    return connection_timeout;
}
void
OAIComDayCqAnalyticsTestandtargetImplServiceWebServiceImplProperties::setConnectionTimeout(OAIConfigNodePropertyInteger* connection_timeout) {
    this->connection_timeout = connection_timeout;
    this->m_connection_timeout_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComDayCqAnalyticsTestandtargetImplServiceWebServiceImplProperties::getSocketTimeout() {
    return socket_timeout;
}
void
OAIComDayCqAnalyticsTestandtargetImplServiceWebServiceImplProperties::setSocketTimeout(OAIConfigNodePropertyInteger* socket_timeout) {
    this->socket_timeout = socket_timeout;
    this->m_socket_timeout_isSet = true;
}


bool
OAIComDayCqAnalyticsTestandtargetImplServiceWebServiceImplProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(endpoint_uri != nullptr && endpoint_uri->isSet()){ isObjectUpdated = true; break;}
        if(connection_timeout != nullptr && connection_timeout->isSet()){ isObjectUpdated = true; break;}
        if(socket_timeout != nullptr && socket_timeout->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

