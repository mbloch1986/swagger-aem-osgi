/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqReplicationImplReplicationContentFactoryProviderImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::OAIComDayCqReplicationImplReplicationContentFactoryProviderImplProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::OAIComDayCqReplicationImplReplicationContentFactoryProviderImplProperties() {
    init();
}

OAIComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::~OAIComDayCqReplicationImplReplicationContentFactoryProviderImplProperties() {
    this->cleanup();
}

void
OAIComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::init() {
    replication_content_use_file_storage = new OAIConfigNodePropertyBoolean();
    m_replication_content_use_file_storage_isSet = false;
    replication_content_max_commit_attempts = new OAIConfigNodePropertyInteger();
    m_replication_content_max_commit_attempts_isSet = false;
}

void
OAIComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::cleanup() {
    if(replication_content_use_file_storage != nullptr) { 
        delete replication_content_use_file_storage;
    }
    if(replication_content_max_commit_attempts != nullptr) { 
        delete replication_content_max_commit_attempts;
    }
}

OAIComDayCqReplicationImplReplicationContentFactoryProviderImplProperties*
OAIComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&replication_content_use_file_storage, pJson["replication.content.useFileStorage"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&replication_content_max_commit_attempts, pJson["replication.content.maxCommitAttempts"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
}

QString
OAIComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::asJsonObject() {
    QJsonObject obj;
    if((replication_content_use_file_storage != nullptr) && (replication_content_use_file_storage->isSet())){
        toJsonValue(QString("replication.content.useFileStorage"), replication_content_use_file_storage, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((replication_content_max_commit_attempts != nullptr) && (replication_content_max_commit_attempts->isSet())){
        toJsonValue(QString("replication.content.maxCommitAttempts"), replication_content_max_commit_attempts, obj, QString("OAIConfigNodePropertyInteger"));
    }

    return obj;
}

OAIConfigNodePropertyBoolean*
OAIComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::getReplicationContentUseFileStorage() {
    return replication_content_use_file_storage;
}
void
OAIComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::setReplicationContentUseFileStorage(OAIConfigNodePropertyBoolean* replication_content_use_file_storage) {
    this->replication_content_use_file_storage = replication_content_use_file_storage;
    this->m_replication_content_use_file_storage_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::getReplicationContentMaxCommitAttempts() {
    return replication_content_max_commit_attempts;
}
void
OAIComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::setReplicationContentMaxCommitAttempts(OAIConfigNodePropertyInteger* replication_content_max_commit_attempts) {
    this->replication_content_max_commit_attempts = replication_content_max_commit_attempts;
    this->m_replication_content_max_commit_attempts_isSet = true;
}


bool
OAIComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(replication_content_use_file_storage != nullptr && replication_content_use_file_storage->isSet()){ isObjectUpdated = true; break;}
        if(replication_content_max_commit_attempts != nullptr && replication_content_max_commit_attempts->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

