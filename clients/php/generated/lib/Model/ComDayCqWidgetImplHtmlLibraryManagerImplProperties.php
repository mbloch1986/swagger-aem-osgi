<?php
/**
 * ComDayCqWidgetImplHtmlLibraryManagerImplProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ComDayCqWidgetImplHtmlLibraryManagerImplProperties Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ComDayCqWidgetImplHtmlLibraryManagerImplProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'comDayCqWidgetImplHtmlLibraryManagerImplProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'htmllibmanager_clientmanager' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'htmllibmanager_debug' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'htmllibmanager_debug_console' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'htmllibmanager_debug_init_js' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'htmllibmanager_defaultthemename' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'htmllibmanager_defaultuserthemename' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'htmllibmanager_firebuglite_path' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'htmllibmanager_force_cq_url_info' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'htmllibmanager_gzip' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'htmllibmanager_maxage' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'htmllibmanager_max_data_uri_size' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'htmllibmanager_minify' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'htmllibmanager_path_list' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'htmllibmanager_timing' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'htmllibmanager_clientmanager' => null,
        'htmllibmanager_debug' => null,
        'htmllibmanager_debug_console' => null,
        'htmllibmanager_debug_init_js' => null,
        'htmllibmanager_defaultthemename' => null,
        'htmllibmanager_defaultuserthemename' => null,
        'htmllibmanager_firebuglite_path' => null,
        'htmllibmanager_force_cq_url_info' => null,
        'htmllibmanager_gzip' => null,
        'htmllibmanager_maxage' => null,
        'htmllibmanager_max_data_uri_size' => null,
        'htmllibmanager_minify' => null,
        'htmllibmanager_path_list' => null,
        'htmllibmanager_timing' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'htmllibmanager_clientmanager' => 'htmllibmanager.clientmanager',
        'htmllibmanager_debug' => 'htmllibmanager.debug',
        'htmllibmanager_debug_console' => 'htmllibmanager.debug.console',
        'htmllibmanager_debug_init_js' => 'htmllibmanager.debug.init.js',
        'htmllibmanager_defaultthemename' => 'htmllibmanager.defaultthemename',
        'htmllibmanager_defaultuserthemename' => 'htmllibmanager.defaultuserthemename',
        'htmllibmanager_firebuglite_path' => 'htmllibmanager.firebuglite.path',
        'htmllibmanager_force_cq_url_info' => 'htmllibmanager.forceCQUrlInfo',
        'htmllibmanager_gzip' => 'htmllibmanager.gzip',
        'htmllibmanager_maxage' => 'htmllibmanager.maxage',
        'htmllibmanager_max_data_uri_size' => 'htmllibmanager.maxDataUriSize',
        'htmllibmanager_minify' => 'htmllibmanager.minify',
        'htmllibmanager_path_list' => 'htmllibmanager.path.list',
        'htmllibmanager_timing' => 'htmllibmanager.timing'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'htmllibmanager_clientmanager' => 'setHtmllibmanagerClientmanager',
        'htmllibmanager_debug' => 'setHtmllibmanagerDebug',
        'htmllibmanager_debug_console' => 'setHtmllibmanagerDebugConsole',
        'htmllibmanager_debug_init_js' => 'setHtmllibmanagerDebugInitJs',
        'htmllibmanager_defaultthemename' => 'setHtmllibmanagerDefaultthemename',
        'htmllibmanager_defaultuserthemename' => 'setHtmllibmanagerDefaultuserthemename',
        'htmllibmanager_firebuglite_path' => 'setHtmllibmanagerFirebuglitePath',
        'htmllibmanager_force_cq_url_info' => 'setHtmllibmanagerForceCqUrlInfo',
        'htmllibmanager_gzip' => 'setHtmllibmanagerGzip',
        'htmllibmanager_maxage' => 'setHtmllibmanagerMaxage',
        'htmllibmanager_max_data_uri_size' => 'setHtmllibmanagerMaxDataUriSize',
        'htmllibmanager_minify' => 'setHtmllibmanagerMinify',
        'htmllibmanager_path_list' => 'setHtmllibmanagerPathList',
        'htmllibmanager_timing' => 'setHtmllibmanagerTiming'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'htmllibmanager_clientmanager' => 'getHtmllibmanagerClientmanager',
        'htmllibmanager_debug' => 'getHtmllibmanagerDebug',
        'htmllibmanager_debug_console' => 'getHtmllibmanagerDebugConsole',
        'htmllibmanager_debug_init_js' => 'getHtmllibmanagerDebugInitJs',
        'htmllibmanager_defaultthemename' => 'getHtmllibmanagerDefaultthemename',
        'htmllibmanager_defaultuserthemename' => 'getHtmllibmanagerDefaultuserthemename',
        'htmllibmanager_firebuglite_path' => 'getHtmllibmanagerFirebuglitePath',
        'htmllibmanager_force_cq_url_info' => 'getHtmllibmanagerForceCqUrlInfo',
        'htmllibmanager_gzip' => 'getHtmllibmanagerGzip',
        'htmllibmanager_maxage' => 'getHtmllibmanagerMaxage',
        'htmllibmanager_max_data_uri_size' => 'getHtmllibmanagerMaxDataUriSize',
        'htmllibmanager_minify' => 'getHtmllibmanagerMinify',
        'htmllibmanager_path_list' => 'getHtmllibmanagerPathList',
        'htmllibmanager_timing' => 'getHtmllibmanagerTiming'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['htmllibmanager_clientmanager'] = isset($data['htmllibmanager_clientmanager']) ? $data['htmllibmanager_clientmanager'] : null;
        $this->container['htmllibmanager_debug'] = isset($data['htmllibmanager_debug']) ? $data['htmllibmanager_debug'] : null;
        $this->container['htmllibmanager_debug_console'] = isset($data['htmllibmanager_debug_console']) ? $data['htmllibmanager_debug_console'] : null;
        $this->container['htmllibmanager_debug_init_js'] = isset($data['htmllibmanager_debug_init_js']) ? $data['htmllibmanager_debug_init_js'] : null;
        $this->container['htmllibmanager_defaultthemename'] = isset($data['htmllibmanager_defaultthemename']) ? $data['htmllibmanager_defaultthemename'] : null;
        $this->container['htmllibmanager_defaultuserthemename'] = isset($data['htmllibmanager_defaultuserthemename']) ? $data['htmllibmanager_defaultuserthemename'] : null;
        $this->container['htmllibmanager_firebuglite_path'] = isset($data['htmllibmanager_firebuglite_path']) ? $data['htmllibmanager_firebuglite_path'] : null;
        $this->container['htmllibmanager_force_cq_url_info'] = isset($data['htmllibmanager_force_cq_url_info']) ? $data['htmllibmanager_force_cq_url_info'] : null;
        $this->container['htmllibmanager_gzip'] = isset($data['htmllibmanager_gzip']) ? $data['htmllibmanager_gzip'] : null;
        $this->container['htmllibmanager_maxage'] = isset($data['htmllibmanager_maxage']) ? $data['htmllibmanager_maxage'] : null;
        $this->container['htmllibmanager_max_data_uri_size'] = isset($data['htmllibmanager_max_data_uri_size']) ? $data['htmllibmanager_max_data_uri_size'] : null;
        $this->container['htmllibmanager_minify'] = isset($data['htmllibmanager_minify']) ? $data['htmllibmanager_minify'] : null;
        $this->container['htmllibmanager_path_list'] = isset($data['htmllibmanager_path_list']) ? $data['htmllibmanager_path_list'] : null;
        $this->container['htmllibmanager_timing'] = isset($data['htmllibmanager_timing']) ? $data['htmllibmanager_timing'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets htmllibmanager_clientmanager
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getHtmllibmanagerClientmanager()
    {
        return $this->container['htmllibmanager_clientmanager'];
    }

    /**
     * Sets htmllibmanager_clientmanager
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $htmllibmanager_clientmanager htmllibmanager_clientmanager
     *
     * @return $this
     */
    public function setHtmllibmanagerClientmanager($htmllibmanager_clientmanager)
    {
        $this->container['htmllibmanager_clientmanager'] = $htmllibmanager_clientmanager;

        return $this;
    }

    /**
     * Gets htmllibmanager_debug
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getHtmllibmanagerDebug()
    {
        return $this->container['htmllibmanager_debug'];
    }

    /**
     * Sets htmllibmanager_debug
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $htmllibmanager_debug htmllibmanager_debug
     *
     * @return $this
     */
    public function setHtmllibmanagerDebug($htmllibmanager_debug)
    {
        $this->container['htmllibmanager_debug'] = $htmllibmanager_debug;

        return $this;
    }

    /**
     * Gets htmllibmanager_debug_console
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getHtmllibmanagerDebugConsole()
    {
        return $this->container['htmllibmanager_debug_console'];
    }

    /**
     * Sets htmllibmanager_debug_console
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $htmllibmanager_debug_console htmllibmanager_debug_console
     *
     * @return $this
     */
    public function setHtmllibmanagerDebugConsole($htmllibmanager_debug_console)
    {
        $this->container['htmllibmanager_debug_console'] = $htmllibmanager_debug_console;

        return $this;
    }

    /**
     * Gets htmllibmanager_debug_init_js
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getHtmllibmanagerDebugInitJs()
    {
        return $this->container['htmllibmanager_debug_init_js'];
    }

    /**
     * Sets htmllibmanager_debug_init_js
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $htmllibmanager_debug_init_js htmllibmanager_debug_init_js
     *
     * @return $this
     */
    public function setHtmllibmanagerDebugInitJs($htmllibmanager_debug_init_js)
    {
        $this->container['htmllibmanager_debug_init_js'] = $htmllibmanager_debug_init_js;

        return $this;
    }

    /**
     * Gets htmllibmanager_defaultthemename
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getHtmllibmanagerDefaultthemename()
    {
        return $this->container['htmllibmanager_defaultthemename'];
    }

    /**
     * Sets htmllibmanager_defaultthemename
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $htmllibmanager_defaultthemename htmllibmanager_defaultthemename
     *
     * @return $this
     */
    public function setHtmllibmanagerDefaultthemename($htmllibmanager_defaultthemename)
    {
        $this->container['htmllibmanager_defaultthemename'] = $htmllibmanager_defaultthemename;

        return $this;
    }

    /**
     * Gets htmllibmanager_defaultuserthemename
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getHtmllibmanagerDefaultuserthemename()
    {
        return $this->container['htmllibmanager_defaultuserthemename'];
    }

    /**
     * Sets htmllibmanager_defaultuserthemename
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $htmllibmanager_defaultuserthemename htmllibmanager_defaultuserthemename
     *
     * @return $this
     */
    public function setHtmllibmanagerDefaultuserthemename($htmllibmanager_defaultuserthemename)
    {
        $this->container['htmllibmanager_defaultuserthemename'] = $htmllibmanager_defaultuserthemename;

        return $this;
    }

    /**
     * Gets htmllibmanager_firebuglite_path
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getHtmllibmanagerFirebuglitePath()
    {
        return $this->container['htmllibmanager_firebuglite_path'];
    }

    /**
     * Sets htmllibmanager_firebuglite_path
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $htmllibmanager_firebuglite_path htmllibmanager_firebuglite_path
     *
     * @return $this
     */
    public function setHtmllibmanagerFirebuglitePath($htmllibmanager_firebuglite_path)
    {
        $this->container['htmllibmanager_firebuglite_path'] = $htmllibmanager_firebuglite_path;

        return $this;
    }

    /**
     * Gets htmllibmanager_force_cq_url_info
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getHtmllibmanagerForceCqUrlInfo()
    {
        return $this->container['htmllibmanager_force_cq_url_info'];
    }

    /**
     * Sets htmllibmanager_force_cq_url_info
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $htmllibmanager_force_cq_url_info htmllibmanager_force_cq_url_info
     *
     * @return $this
     */
    public function setHtmllibmanagerForceCqUrlInfo($htmllibmanager_force_cq_url_info)
    {
        $this->container['htmllibmanager_force_cq_url_info'] = $htmllibmanager_force_cq_url_info;

        return $this;
    }

    /**
     * Gets htmllibmanager_gzip
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getHtmllibmanagerGzip()
    {
        return $this->container['htmllibmanager_gzip'];
    }

    /**
     * Sets htmllibmanager_gzip
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $htmllibmanager_gzip htmllibmanager_gzip
     *
     * @return $this
     */
    public function setHtmllibmanagerGzip($htmllibmanager_gzip)
    {
        $this->container['htmllibmanager_gzip'] = $htmllibmanager_gzip;

        return $this;
    }

    /**
     * Gets htmllibmanager_maxage
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getHtmllibmanagerMaxage()
    {
        return $this->container['htmllibmanager_maxage'];
    }

    /**
     * Sets htmllibmanager_maxage
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $htmllibmanager_maxage htmllibmanager_maxage
     *
     * @return $this
     */
    public function setHtmllibmanagerMaxage($htmllibmanager_maxage)
    {
        $this->container['htmllibmanager_maxage'] = $htmllibmanager_maxage;

        return $this;
    }

    /**
     * Gets htmllibmanager_max_data_uri_size
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getHtmllibmanagerMaxDataUriSize()
    {
        return $this->container['htmllibmanager_max_data_uri_size'];
    }

    /**
     * Sets htmllibmanager_max_data_uri_size
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $htmllibmanager_max_data_uri_size htmllibmanager_max_data_uri_size
     *
     * @return $this
     */
    public function setHtmllibmanagerMaxDataUriSize($htmllibmanager_max_data_uri_size)
    {
        $this->container['htmllibmanager_max_data_uri_size'] = $htmllibmanager_max_data_uri_size;

        return $this;
    }

    /**
     * Gets htmllibmanager_minify
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getHtmllibmanagerMinify()
    {
        return $this->container['htmllibmanager_minify'];
    }

    /**
     * Sets htmllibmanager_minify
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $htmllibmanager_minify htmllibmanager_minify
     *
     * @return $this
     */
    public function setHtmllibmanagerMinify($htmllibmanager_minify)
    {
        $this->container['htmllibmanager_minify'] = $htmllibmanager_minify;

        return $this;
    }

    /**
     * Gets htmllibmanager_path_list
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getHtmllibmanagerPathList()
    {
        return $this->container['htmllibmanager_path_list'];
    }

    /**
     * Sets htmllibmanager_path_list
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $htmllibmanager_path_list htmllibmanager_path_list
     *
     * @return $this
     */
    public function setHtmllibmanagerPathList($htmllibmanager_path_list)
    {
        $this->container['htmllibmanager_path_list'] = $htmllibmanager_path_list;

        return $this;
    }

    /**
     * Gets htmllibmanager_timing
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getHtmllibmanagerTiming()
    {
        return $this->container['htmllibmanager_timing'];
    }

    /**
     * Sets htmllibmanager_timing
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $htmllibmanager_timing htmllibmanager_timing
     *
     * @return $this
     */
    public function setHtmllibmanagerTiming($htmllibmanager_timing)
    {
        $this->container['htmllibmanager_timing'] = $htmllibmanager_timing;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


