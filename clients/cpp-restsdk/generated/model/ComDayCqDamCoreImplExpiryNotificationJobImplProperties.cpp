/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqDamCoreImplExpiryNotificationJobImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqDamCoreImplExpiryNotificationJobImplProperties::ComDayCqDamCoreImplExpiryNotificationJobImplProperties()
{
    m_Cq_dam_expiry_notification_scheduler_istimebasedIsSet = false;
    m_Cq_dam_expiry_notification_scheduler_timebased_ruleIsSet = false;
    m_Cq_dam_expiry_notification_scheduler_period_ruleIsSet = false;
    m_Send_emailIsSet = false;
    m_Asset_expired_limitIsSet = false;
    m_Prior_notification_secondsIsSet = false;
    m_Cq_dam_expiry_notification_url_protocolIsSet = false;
}

ComDayCqDamCoreImplExpiryNotificationJobImplProperties::~ComDayCqDamCoreImplExpiryNotificationJobImplProperties()
{
}

void ComDayCqDamCoreImplExpiryNotificationJobImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqDamCoreImplExpiryNotificationJobImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Cq_dam_expiry_notification_scheduler_istimebasedIsSet)
    {
        val[utility::conversions::to_string_t("cq.dam.expiry.notification.scheduler.istimebased")] = ModelBase::toJson(m_Cq_dam_expiry_notification_scheduler_istimebased);
    }
    if(m_Cq_dam_expiry_notification_scheduler_timebased_ruleIsSet)
    {
        val[utility::conversions::to_string_t("cq.dam.expiry.notification.scheduler.timebased.rule")] = ModelBase::toJson(m_Cq_dam_expiry_notification_scheduler_timebased_rule);
    }
    if(m_Cq_dam_expiry_notification_scheduler_period_ruleIsSet)
    {
        val[utility::conversions::to_string_t("cq.dam.expiry.notification.scheduler.period.rule")] = ModelBase::toJson(m_Cq_dam_expiry_notification_scheduler_period_rule);
    }
    if(m_Send_emailIsSet)
    {
        val[utility::conversions::to_string_t("send_email")] = ModelBase::toJson(m_Send_email);
    }
    if(m_Asset_expired_limitIsSet)
    {
        val[utility::conversions::to_string_t("asset_expired_limit")] = ModelBase::toJson(m_Asset_expired_limit);
    }
    if(m_Prior_notification_secondsIsSet)
    {
        val[utility::conversions::to_string_t("prior_notification_seconds")] = ModelBase::toJson(m_Prior_notification_seconds);
    }
    if(m_Cq_dam_expiry_notification_url_protocolIsSet)
    {
        val[utility::conversions::to_string_t("cq.dam.expiry.notification.url.protocol")] = ModelBase::toJson(m_Cq_dam_expiry_notification_url_protocol);
    }

    return val;
}

void ComDayCqDamCoreImplExpiryNotificationJobImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("cq.dam.expiry.notification.scheduler.istimebased")))
    {
        if(!val[utility::conversions::to_string_t("cq.dam.expiry.notification.scheduler.istimebased")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.dam.expiry.notification.scheduler.istimebased")]);
            setCqDamExpiryNotificationSchedulerIstimebased( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.dam.expiry.notification.scheduler.timebased.rule")))
    {
        if(!val[utility::conversions::to_string_t("cq.dam.expiry.notification.scheduler.timebased.rule")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.dam.expiry.notification.scheduler.timebased.rule")]);
            setCqDamExpiryNotificationSchedulerTimebasedRule( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.dam.expiry.notification.scheduler.period.rule")))
    {
        if(!val[utility::conversions::to_string_t("cq.dam.expiry.notification.scheduler.period.rule")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.dam.expiry.notification.scheduler.period.rule")]);
            setCqDamExpiryNotificationSchedulerPeriodRule( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("send_email")))
    {
        if(!val[utility::conversions::to_string_t("send_email")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("send_email")]);
            setSendEmail( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("asset_expired_limit")))
    {
        if(!val[utility::conversions::to_string_t("asset_expired_limit")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("asset_expired_limit")]);
            setAssetExpiredLimit( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("prior_notification_seconds")))
    {
        if(!val[utility::conversions::to_string_t("prior_notification_seconds")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("prior_notification_seconds")]);
            setPriorNotificationSeconds( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.dam.expiry.notification.url.protocol")))
    {
        if(!val[utility::conversions::to_string_t("cq.dam.expiry.notification.url.protocol")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.dam.expiry.notification.url.protocol")]);
            setCqDamExpiryNotificationUrlProtocol( newItem );
        }
    }
}

void ComDayCqDamCoreImplExpiryNotificationJobImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Cq_dam_expiry_notification_scheduler_istimebasedIsSet)
    {
        if (m_Cq_dam_expiry_notification_scheduler_istimebased.get())
        {
            m_Cq_dam_expiry_notification_scheduler_istimebased->toMultipart(multipart, utility::conversions::to_string_t("cq.dam.expiry.notification.scheduler.istimebased."));
        }
    }
    if(m_Cq_dam_expiry_notification_scheduler_timebased_ruleIsSet)
    {
        if (m_Cq_dam_expiry_notification_scheduler_timebased_rule.get())
        {
            m_Cq_dam_expiry_notification_scheduler_timebased_rule->toMultipart(multipart, utility::conversions::to_string_t("cq.dam.expiry.notification.scheduler.timebased.rule."));
        }
    }
    if(m_Cq_dam_expiry_notification_scheduler_period_ruleIsSet)
    {
        if (m_Cq_dam_expiry_notification_scheduler_period_rule.get())
        {
            m_Cq_dam_expiry_notification_scheduler_period_rule->toMultipart(multipart, utility::conversions::to_string_t("cq.dam.expiry.notification.scheduler.period.rule."));
        }
    }
    if(m_Send_emailIsSet)
    {
        if (m_Send_email.get())
        {
            m_Send_email->toMultipart(multipart, utility::conversions::to_string_t("send_email."));
        }
    }
    if(m_Asset_expired_limitIsSet)
    {
        if (m_Asset_expired_limit.get())
        {
            m_Asset_expired_limit->toMultipart(multipart, utility::conversions::to_string_t("asset_expired_limit."));
        }
    }
    if(m_Prior_notification_secondsIsSet)
    {
        if (m_Prior_notification_seconds.get())
        {
            m_Prior_notification_seconds->toMultipart(multipart, utility::conversions::to_string_t("prior_notification_seconds."));
        }
    }
    if(m_Cq_dam_expiry_notification_url_protocolIsSet)
    {
        if (m_Cq_dam_expiry_notification_url_protocol.get())
        {
            m_Cq_dam_expiry_notification_url_protocol->toMultipart(multipart, utility::conversions::to_string_t("cq.dam.expiry.notification.url.protocol."));
        }
    }
}

void ComDayCqDamCoreImplExpiryNotificationJobImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.expiry.notification.scheduler.istimebased")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.expiry.notification.scheduler.istimebased")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.dam.expiry.notification.scheduler.istimebased."));
            setCqDamExpiryNotificationSchedulerIstimebased( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.expiry.notification.scheduler.timebased.rule")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.expiry.notification.scheduler.timebased.rule")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.dam.expiry.notification.scheduler.timebased.rule."));
            setCqDamExpiryNotificationSchedulerTimebasedRule( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.expiry.notification.scheduler.period.rule")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.expiry.notification.scheduler.period.rule")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.dam.expiry.notification.scheduler.period.rule."));
            setCqDamExpiryNotificationSchedulerPeriodRule( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("send_email")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("send_email")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("send_email."));
            setSendEmail( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("asset_expired_limit")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("asset_expired_limit")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("asset_expired_limit."));
            setAssetExpiredLimit( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("prior_notification_seconds")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("prior_notification_seconds")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("prior_notification_seconds."));
            setPriorNotificationSeconds( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.expiry.notification.url.protocol")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.expiry.notification.url.protocol")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.dam.expiry.notification.url.protocol."));
            setCqDamExpiryNotificationUrlProtocol( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqDamCoreImplExpiryNotificationJobImplProperties::getCqDamExpiryNotificationSchedulerIstimebased() const
{
    return m_Cq_dam_expiry_notification_scheduler_istimebased;
}


void ComDayCqDamCoreImplExpiryNotificationJobImplProperties::setCqDamExpiryNotificationSchedulerIstimebased(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Cq_dam_expiry_notification_scheduler_istimebased = value;
    m_Cq_dam_expiry_notification_scheduler_istimebasedIsSet = true;
}
bool ComDayCqDamCoreImplExpiryNotificationJobImplProperties::cqDamExpiryNotificationSchedulerIstimebasedIsSet() const
{
    return m_Cq_dam_expiry_notification_scheduler_istimebasedIsSet;
}

void ComDayCqDamCoreImplExpiryNotificationJobImplProperties::unsetCq_dam_expiry_notification_scheduler_istimebased()
{
    m_Cq_dam_expiry_notification_scheduler_istimebasedIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqDamCoreImplExpiryNotificationJobImplProperties::getCqDamExpiryNotificationSchedulerTimebasedRule() const
{
    return m_Cq_dam_expiry_notification_scheduler_timebased_rule;
}


void ComDayCqDamCoreImplExpiryNotificationJobImplProperties::setCqDamExpiryNotificationSchedulerTimebasedRule(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Cq_dam_expiry_notification_scheduler_timebased_rule = value;
    m_Cq_dam_expiry_notification_scheduler_timebased_ruleIsSet = true;
}
bool ComDayCqDamCoreImplExpiryNotificationJobImplProperties::cqDamExpiryNotificationSchedulerTimebasedRuleIsSet() const
{
    return m_Cq_dam_expiry_notification_scheduler_timebased_ruleIsSet;
}

void ComDayCqDamCoreImplExpiryNotificationJobImplProperties::unsetCq_dam_expiry_notification_scheduler_timebased_rule()
{
    m_Cq_dam_expiry_notification_scheduler_timebased_ruleIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqDamCoreImplExpiryNotificationJobImplProperties::getCqDamExpiryNotificationSchedulerPeriodRule() const
{
    return m_Cq_dam_expiry_notification_scheduler_period_rule;
}


void ComDayCqDamCoreImplExpiryNotificationJobImplProperties::setCqDamExpiryNotificationSchedulerPeriodRule(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cq_dam_expiry_notification_scheduler_period_rule = value;
    m_Cq_dam_expiry_notification_scheduler_period_ruleIsSet = true;
}
bool ComDayCqDamCoreImplExpiryNotificationJobImplProperties::cqDamExpiryNotificationSchedulerPeriodRuleIsSet() const
{
    return m_Cq_dam_expiry_notification_scheduler_period_ruleIsSet;
}

void ComDayCqDamCoreImplExpiryNotificationJobImplProperties::unsetCq_dam_expiry_notification_scheduler_period_rule()
{
    m_Cq_dam_expiry_notification_scheduler_period_ruleIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqDamCoreImplExpiryNotificationJobImplProperties::getSendEmail() const
{
    return m_Send_email;
}


void ComDayCqDamCoreImplExpiryNotificationJobImplProperties::setSendEmail(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Send_email = value;
    m_Send_emailIsSet = true;
}
bool ComDayCqDamCoreImplExpiryNotificationJobImplProperties::sendEmailIsSet() const
{
    return m_Send_emailIsSet;
}

void ComDayCqDamCoreImplExpiryNotificationJobImplProperties::unsetSend_email()
{
    m_Send_emailIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqDamCoreImplExpiryNotificationJobImplProperties::getAssetExpiredLimit() const
{
    return m_Asset_expired_limit;
}


void ComDayCqDamCoreImplExpiryNotificationJobImplProperties::setAssetExpiredLimit(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Asset_expired_limit = value;
    m_Asset_expired_limitIsSet = true;
}
bool ComDayCqDamCoreImplExpiryNotificationJobImplProperties::assetExpiredLimitIsSet() const
{
    return m_Asset_expired_limitIsSet;
}

void ComDayCqDamCoreImplExpiryNotificationJobImplProperties::unsetAsset_expired_limit()
{
    m_Asset_expired_limitIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqDamCoreImplExpiryNotificationJobImplProperties::getPriorNotificationSeconds() const
{
    return m_Prior_notification_seconds;
}


void ComDayCqDamCoreImplExpiryNotificationJobImplProperties::setPriorNotificationSeconds(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Prior_notification_seconds = value;
    m_Prior_notification_secondsIsSet = true;
}
bool ComDayCqDamCoreImplExpiryNotificationJobImplProperties::priorNotificationSecondsIsSet() const
{
    return m_Prior_notification_secondsIsSet;
}

void ComDayCqDamCoreImplExpiryNotificationJobImplProperties::unsetPrior_notification_seconds()
{
    m_Prior_notification_secondsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqDamCoreImplExpiryNotificationJobImplProperties::getCqDamExpiryNotificationUrlProtocol() const
{
    return m_Cq_dam_expiry_notification_url_protocol;
}


void ComDayCqDamCoreImplExpiryNotificationJobImplProperties::setCqDamExpiryNotificationUrlProtocol(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Cq_dam_expiry_notification_url_protocol = value;
    m_Cq_dam_expiry_notification_url_protocolIsSet = true;
}
bool ComDayCqDamCoreImplExpiryNotificationJobImplProperties::cqDamExpiryNotificationUrlProtocolIsSet() const
{
    return m_Cq_dam_expiry_notification_url_protocolIsSet;
}

void ComDayCqDamCoreImplExpiryNotificationJobImplProperties::unsetCq_dam_expiry_notification_url_protocol()
{
    m_Cq_dam_expiry_notification_url_protocolIsSet = false;
}

}
}
}
}

