/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComDayCqDamCoreImplServletDamContentDispositionFilterProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCqDamCoreImplServletDamContentDispositionFilterProperties::ComDayCqDamCoreImplServletDamContentDispositionFilterProperties()
{
    m_Cq_mime_type_blacklistIsSet = false;
    m_Cq_dam_empty_mimeIsSet = false;
    
}

ComDayCqDamCoreImplServletDamContentDispositionFilterProperties::~ComDayCqDamCoreImplServletDamContentDispositionFilterProperties()
{
}

void ComDayCqDamCoreImplServletDamContentDispositionFilterProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComDayCqDamCoreImplServletDamContentDispositionFilterProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Cq_mime_type_blacklistIsSet)
    {
        val["cq.mime.type.blacklist"] = ModelBase::toJson(m_Cq_mime_type_blacklist);
    }
    if(m_Cq_dam_empty_mimeIsSet)
    {
        val["cq.dam.empty.mime"] = ModelBase::toJson(m_Cq_dam_empty_mime);
    }
    

    return val;
}

void ComDayCqDamCoreImplServletDamContentDispositionFilterProperties::fromJson(nlohmann::json& val)
{
    if(val.find("cq.mime.type.blacklist") != val.end())
    {
        if(!val["cq.mime.type.blacklist"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["cq.mime.type.blacklist"]);
            setCqMimeTypeBlacklist( newItem );
        }
        
    }
    if(val.find("cq.dam.empty.mime") != val.end())
    {
        if(!val["cq.dam.empty.mime"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["cq.dam.empty.mime"]);
            setCqDamEmptyMime( newItem );
        }
        
    }
    
}


ConfigNodePropertyArray ComDayCqDamCoreImplServletDamContentDispositionFilterProperties::getCqMimeTypeBlacklist() const
{
    return m_Cq_mime_type_blacklist;
}
void ComDayCqDamCoreImplServletDamContentDispositionFilterProperties::setCqMimeTypeBlacklist(ConfigNodePropertyArray const& value)
{
    m_Cq_mime_type_blacklist = value;
    m_Cq_mime_type_blacklistIsSet = true;
}
bool ComDayCqDamCoreImplServletDamContentDispositionFilterProperties::cqMimeTypeBlacklistIsSet() const
{
    return m_Cq_mime_type_blacklistIsSet;
}
void ComDayCqDamCoreImplServletDamContentDispositionFilterProperties::unsetCq_mime_type_blacklist()
{
    m_Cq_mime_type_blacklistIsSet = false;
}
ConfigNodePropertyBoolean ComDayCqDamCoreImplServletDamContentDispositionFilterProperties::getCqDamEmptyMime() const
{
    return m_Cq_dam_empty_mime;
}
void ComDayCqDamCoreImplServletDamContentDispositionFilterProperties::setCqDamEmptyMime(ConfigNodePropertyBoolean const& value)
{
    m_Cq_dam_empty_mime = value;
    m_Cq_dam_empty_mimeIsSet = true;
}
bool ComDayCqDamCoreImplServletDamContentDispositionFilterProperties::cqDamEmptyMimeIsSet() const
{
    return m_Cq_dam_empty_mimeIsSet;
}
void ComDayCqDamCoreImplServletDamContentDispositionFilterProperties::unsetCq_dam_empty_mime()
{
    m_Cq_dam_empty_mimeIsSet = false;
}

}
}
}
}

