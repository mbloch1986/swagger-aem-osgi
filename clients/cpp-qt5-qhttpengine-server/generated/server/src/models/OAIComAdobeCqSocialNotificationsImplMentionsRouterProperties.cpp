/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqSocialNotificationsImplMentionsRouterProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqSocialNotificationsImplMentionsRouterProperties::OAIComAdobeCqSocialNotificationsImplMentionsRouterProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeCqSocialNotificationsImplMentionsRouterProperties::OAIComAdobeCqSocialNotificationsImplMentionsRouterProperties() {
    this->init();
}

OAIComAdobeCqSocialNotificationsImplMentionsRouterProperties::~OAIComAdobeCqSocialNotificationsImplMentionsRouterProperties() {
    
}

void
OAIComAdobeCqSocialNotificationsImplMentionsRouterProperties::init() {
    m_event_topics_isSet = false;
    m_event_filter_isSet = false;
}

void
OAIComAdobeCqSocialNotificationsImplMentionsRouterProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeCqSocialNotificationsImplMentionsRouterProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(event_topics, json[QString("event.topics")]);
    
    ::OpenAPI::fromJsonValue(event_filter, json[QString("event.filter")]);
    
}

QString
OAIComAdobeCqSocialNotificationsImplMentionsRouterProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqSocialNotificationsImplMentionsRouterProperties::asJsonObject() const {
    QJsonObject obj;
	if(event_topics.isSet()){
        obj.insert(QString("event.topics"), ::OpenAPI::toJsonValue(event_topics));
    }
	if(event_filter.isSet()){
        obj.insert(QString("event.filter"), ::OpenAPI::toJsonValue(event_filter));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIComAdobeCqSocialNotificationsImplMentionsRouterProperties::getEventTopics() const {
    return event_topics;
}
void
OAIComAdobeCqSocialNotificationsImplMentionsRouterProperties::setEventTopics(const OAIConfigNodePropertyString &event_topics) {
    this->event_topics = event_topics;
    this->m_event_topics_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeCqSocialNotificationsImplMentionsRouterProperties::getEventFilter() const {
    return event_filter;
}
void
OAIComAdobeCqSocialNotificationsImplMentionsRouterProperties::setEventFilter(const OAIConfigNodePropertyString &event_filter) {
    this->event_filter = event_filter;
    this->m_event_filter_isSet = true;
}


bool
OAIComAdobeCqSocialNotificationsImplMentionsRouterProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(event_topics.isSet()){ isObjectUpdated = true; break;}
    
        if(event_filter.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

