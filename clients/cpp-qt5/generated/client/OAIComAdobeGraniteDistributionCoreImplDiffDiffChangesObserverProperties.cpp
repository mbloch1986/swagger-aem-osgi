/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties::OAIComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties::OAIComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties() {
    init();
}

OAIComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties::~OAIComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties() {
    this->cleanup();
}

void
OAIComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties::init() {
    enabled = new OAIConfigNodePropertyBoolean();
    m_enabled_isSet = false;
    agent_name = new OAIConfigNodePropertyString();
    m_agent_name_isSet = false;
    diff_path = new OAIConfigNodePropertyString();
    m_diff_path_isSet = false;
    observed_path = new OAIConfigNodePropertyString();
    m_observed_path_isSet = false;
    service_name = new OAIConfigNodePropertyString();
    m_service_name_isSet = false;
    property_names = new OAIConfigNodePropertyString();
    m_property_names_isSet = false;
    distribution_delay = new OAIConfigNodePropertyInteger();
    m_distribution_delay_isSet = false;
    service_user_target = new OAIConfigNodePropertyString();
    m_service_user_target_isSet = false;
}

void
OAIComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties::cleanup() {
    if(enabled != nullptr) { 
        delete enabled;
    }
    if(agent_name != nullptr) { 
        delete agent_name;
    }
    if(diff_path != nullptr) { 
        delete diff_path;
    }
    if(observed_path != nullptr) { 
        delete observed_path;
    }
    if(service_name != nullptr) { 
        delete service_name;
    }
    if(property_names != nullptr) { 
        delete property_names;
    }
    if(distribution_delay != nullptr) { 
        delete distribution_delay;
    }
    if(service_user_target != nullptr) { 
        delete service_user_target;
    }
}

OAIComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties*
OAIComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&enabled, pJson["enabled"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&agent_name, pJson["agentName"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&diff_path, pJson["diffPath"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&observed_path, pJson["observedPath"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&service_name, pJson["serviceName"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&property_names, pJson["propertyNames"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&distribution_delay, pJson["distributionDelay"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&service_user_target, pJson["serviceUser.target"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties::asJsonObject() {
    QJsonObject obj;
    if((enabled != nullptr) && (enabled->isSet())){
        toJsonValue(QString("enabled"), enabled, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((agent_name != nullptr) && (agent_name->isSet())){
        toJsonValue(QString("agentName"), agent_name, obj, QString("OAIConfigNodePropertyString"));
    }
    if((diff_path != nullptr) && (diff_path->isSet())){
        toJsonValue(QString("diffPath"), diff_path, obj, QString("OAIConfigNodePropertyString"));
    }
    if((observed_path != nullptr) && (observed_path->isSet())){
        toJsonValue(QString("observedPath"), observed_path, obj, QString("OAIConfigNodePropertyString"));
    }
    if((service_name != nullptr) && (service_name->isSet())){
        toJsonValue(QString("serviceName"), service_name, obj, QString("OAIConfigNodePropertyString"));
    }
    if((property_names != nullptr) && (property_names->isSet())){
        toJsonValue(QString("propertyNames"), property_names, obj, QString("OAIConfigNodePropertyString"));
    }
    if((distribution_delay != nullptr) && (distribution_delay->isSet())){
        toJsonValue(QString("distributionDelay"), distribution_delay, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((service_user_target != nullptr) && (service_user_target->isSet())){
        toJsonValue(QString("serviceUser.target"), service_user_target, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties::getEnabled() {
    return enabled;
}
void
OAIComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties::setEnabled(OAIConfigNodePropertyBoolean* enabled) {
    this->enabled = enabled;
    this->m_enabled_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties::getAgentName() {
    return agent_name;
}
void
OAIComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties::setAgentName(OAIConfigNodePropertyString* agent_name) {
    this->agent_name = agent_name;
    this->m_agent_name_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties::getDiffPath() {
    return diff_path;
}
void
OAIComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties::setDiffPath(OAIConfigNodePropertyString* diff_path) {
    this->diff_path = diff_path;
    this->m_diff_path_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties::getObservedPath() {
    return observed_path;
}
void
OAIComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties::setObservedPath(OAIConfigNodePropertyString* observed_path) {
    this->observed_path = observed_path;
    this->m_observed_path_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties::getServiceName() {
    return service_name;
}
void
OAIComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties::setServiceName(OAIConfigNodePropertyString* service_name) {
    this->service_name = service_name;
    this->m_service_name_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties::getPropertyNames() {
    return property_names;
}
void
OAIComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties::setPropertyNames(OAIConfigNodePropertyString* property_names) {
    this->property_names = property_names;
    this->m_property_names_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties::getDistributionDelay() {
    return distribution_delay;
}
void
OAIComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties::setDistributionDelay(OAIConfigNodePropertyInteger* distribution_delay) {
    this->distribution_delay = distribution_delay;
    this->m_distribution_delay_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties::getServiceUserTarget() {
    return service_user_target;
}
void
OAIComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties::setServiceUserTarget(OAIConfigNodePropertyString* service_user_target) {
    this->service_user_target = service_user_target;
    this->m_service_user_target_isSet = true;
}


bool
OAIComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(enabled != nullptr && enabled->isSet()){ isObjectUpdated = true; break;}
        if(agent_name != nullptr && agent_name->isSet()){ isObjectUpdated = true; break;}
        if(diff_path != nullptr && diff_path->isSet()){ isObjectUpdated = true; break;}
        if(observed_path != nullptr && observed_path->isSet()){ isObjectUpdated = true; break;}
        if(service_name != nullptr && service_name->isSet()){ isObjectUpdated = true; break;}
        if(property_names != nullptr && property_names->isSet()){ isObjectUpdated = true; break;}
        if(distribution_delay != nullptr && distribution_delay->isSet()){ isObjectUpdated = true; break;}
        if(service_user_target != nullptr && service_user_target->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

