/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComDayCqDamCoreImplServletDamContentDispositionFilterProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ComDayCqDamCoreImplServletDamContentDispositionFilterProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ComDayCqDamCoreImplServletDamContentDispositionFilterProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyArray.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComDayCqDamCoreImplServletDamContentDispositionFilterProperties
    : public ModelBase
{
public:
    ComDayCqDamCoreImplServletDamContentDispositionFilterProperties();
    virtual ~ComDayCqDamCoreImplServletDamContentDispositionFilterProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ComDayCqDamCoreImplServletDamContentDispositionFilterProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getCqMimeTypeBlacklist() const;
    bool cqMimeTypeBlacklistIsSet() const;
    void unsetCq_mime_type_blacklist();
    void setCqMimeTypeBlacklist(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getCqDamEmptyMime() const;
    bool cqDamEmptyMimeIsSet() const;
    void unsetCq_dam_empty_mime();
    void setCqDamEmptyMime(std::shared_ptr<ConfigNodePropertyBoolean> value);

protected:
    std::shared_ptr<ConfigNodePropertyArray> m_Cq_mime_type_blacklist;
    bool m_Cq_mime_type_blacklistIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Cq_dam_empty_mime;
    bool m_Cq_dam_empty_mimeIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ComDayCqDamCoreImplServletDamContentDispositionFilterProperties_H_ */
