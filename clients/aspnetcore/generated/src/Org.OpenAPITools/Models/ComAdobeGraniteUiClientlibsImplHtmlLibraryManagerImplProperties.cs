/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties : IEquatable<ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties>
    { 
        /// <summary>
        /// Gets or Sets HtmllibmanagerTiming
        /// </summary>
        [DataMember(Name="htmllibmanager.timing")]
        public ConfigNodePropertyBoolean HtmllibmanagerTiming { get; set; }

        /// <summary>
        /// Gets or Sets HtmllibmanagerDebugInitJs
        /// </summary>
        [DataMember(Name="htmllibmanager.debug.init.js")]
        public ConfigNodePropertyString HtmllibmanagerDebugInitJs { get; set; }

        /// <summary>
        /// Gets or Sets HtmllibmanagerMinify
        /// </summary>
        [DataMember(Name="htmllibmanager.minify")]
        public ConfigNodePropertyBoolean HtmllibmanagerMinify { get; set; }

        /// <summary>
        /// Gets or Sets HtmllibmanagerDebug
        /// </summary>
        [DataMember(Name="htmllibmanager.debug")]
        public ConfigNodePropertyBoolean HtmllibmanagerDebug { get; set; }

        /// <summary>
        /// Gets or Sets HtmllibmanagerGzip
        /// </summary>
        [DataMember(Name="htmllibmanager.gzip")]
        public ConfigNodePropertyBoolean HtmllibmanagerGzip { get; set; }

        /// <summary>
        /// Gets or Sets HtmllibmanagerMaxDataUriSize
        /// </summary>
        [DataMember(Name="htmllibmanager.maxDataUriSize")]
        public ConfigNodePropertyInteger HtmllibmanagerMaxDataUriSize { get; set; }

        /// <summary>
        /// Gets or Sets HtmllibmanagerMaxage
        /// </summary>
        [DataMember(Name="htmllibmanager.maxage")]
        public ConfigNodePropertyInteger HtmllibmanagerMaxage { get; set; }

        /// <summary>
        /// Gets or Sets HtmllibmanagerForceCQUrlInfo
        /// </summary>
        [DataMember(Name="htmllibmanager.forceCQUrlInfo")]
        public ConfigNodePropertyBoolean HtmllibmanagerForceCQUrlInfo { get; set; }

        /// <summary>
        /// Gets or Sets HtmllibmanagerDefaultthemename
        /// </summary>
        [DataMember(Name="htmllibmanager.defaultthemename")]
        public ConfigNodePropertyString HtmllibmanagerDefaultthemename { get; set; }

        /// <summary>
        /// Gets or Sets HtmllibmanagerDefaultuserthemename
        /// </summary>
        [DataMember(Name="htmllibmanager.defaultuserthemename")]
        public ConfigNodePropertyString HtmllibmanagerDefaultuserthemename { get; set; }

        /// <summary>
        /// Gets or Sets HtmllibmanagerClientmanager
        /// </summary>
        [DataMember(Name="htmllibmanager.clientmanager")]
        public ConfigNodePropertyString HtmllibmanagerClientmanager { get; set; }

        /// <summary>
        /// Gets or Sets HtmllibmanagerPathList
        /// </summary>
        [DataMember(Name="htmllibmanager.path.list")]
        public ConfigNodePropertyArray HtmllibmanagerPathList { get; set; }

        /// <summary>
        /// Gets or Sets HtmllibmanagerExcludedPathList
        /// </summary>
        [DataMember(Name="htmllibmanager.excluded.path.list")]
        public ConfigNodePropertyArray HtmllibmanagerExcludedPathList { get; set; }

        /// <summary>
        /// Gets or Sets HtmllibmanagerProcessorJs
        /// </summary>
        [DataMember(Name="htmllibmanager.processor.js")]
        public ConfigNodePropertyArray HtmllibmanagerProcessorJs { get; set; }

        /// <summary>
        /// Gets or Sets HtmllibmanagerProcessorCss
        /// </summary>
        [DataMember(Name="htmllibmanager.processor.css")]
        public ConfigNodePropertyArray HtmllibmanagerProcessorCss { get; set; }

        /// <summary>
        /// Gets or Sets HtmllibmanagerLongcachePatterns
        /// </summary>
        [DataMember(Name="htmllibmanager.longcache.patterns")]
        public ConfigNodePropertyArray HtmllibmanagerLongcachePatterns { get; set; }

        /// <summary>
        /// Gets or Sets HtmllibmanagerLongcacheFormat
        /// </summary>
        [DataMember(Name="htmllibmanager.longcache.format")]
        public ConfigNodePropertyString HtmllibmanagerLongcacheFormat { get; set; }

        /// <summary>
        /// Gets or Sets HtmllibmanagerUseFileSystemOutputCache
        /// </summary>
        [DataMember(Name="htmllibmanager.useFileSystemOutputCache")]
        public ConfigNodePropertyBoolean HtmllibmanagerUseFileSystemOutputCache { get; set; }

        /// <summary>
        /// Gets or Sets HtmllibmanagerFileSystemOutputCacheLocation
        /// </summary>
        [DataMember(Name="htmllibmanager.fileSystemOutputCacheLocation")]
        public ConfigNodePropertyString HtmllibmanagerFileSystemOutputCacheLocation { get; set; }

        /// <summary>
        /// Gets or Sets HtmllibmanagerDisableReplacement
        /// </summary>
        [DataMember(Name="htmllibmanager.disable.replacement")]
        public ConfigNodePropertyArray HtmllibmanagerDisableReplacement { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties {\n");
            sb.Append("  HtmllibmanagerTiming: ").Append(HtmllibmanagerTiming).Append("\n");
            sb.Append("  HtmllibmanagerDebugInitJs: ").Append(HtmllibmanagerDebugInitJs).Append("\n");
            sb.Append("  HtmllibmanagerMinify: ").Append(HtmllibmanagerMinify).Append("\n");
            sb.Append("  HtmllibmanagerDebug: ").Append(HtmllibmanagerDebug).Append("\n");
            sb.Append("  HtmllibmanagerGzip: ").Append(HtmllibmanagerGzip).Append("\n");
            sb.Append("  HtmllibmanagerMaxDataUriSize: ").Append(HtmllibmanagerMaxDataUriSize).Append("\n");
            sb.Append("  HtmllibmanagerMaxage: ").Append(HtmllibmanagerMaxage).Append("\n");
            sb.Append("  HtmllibmanagerForceCQUrlInfo: ").Append(HtmllibmanagerForceCQUrlInfo).Append("\n");
            sb.Append("  HtmllibmanagerDefaultthemename: ").Append(HtmllibmanagerDefaultthemename).Append("\n");
            sb.Append("  HtmllibmanagerDefaultuserthemename: ").Append(HtmllibmanagerDefaultuserthemename).Append("\n");
            sb.Append("  HtmllibmanagerClientmanager: ").Append(HtmllibmanagerClientmanager).Append("\n");
            sb.Append("  HtmllibmanagerPathList: ").Append(HtmllibmanagerPathList).Append("\n");
            sb.Append("  HtmllibmanagerExcludedPathList: ").Append(HtmllibmanagerExcludedPathList).Append("\n");
            sb.Append("  HtmllibmanagerProcessorJs: ").Append(HtmllibmanagerProcessorJs).Append("\n");
            sb.Append("  HtmllibmanagerProcessorCss: ").Append(HtmllibmanagerProcessorCss).Append("\n");
            sb.Append("  HtmllibmanagerLongcachePatterns: ").Append(HtmllibmanagerLongcachePatterns).Append("\n");
            sb.Append("  HtmllibmanagerLongcacheFormat: ").Append(HtmllibmanagerLongcacheFormat).Append("\n");
            sb.Append("  HtmllibmanagerUseFileSystemOutputCache: ").Append(HtmllibmanagerUseFileSystemOutputCache).Append("\n");
            sb.Append("  HtmllibmanagerFileSystemOutputCacheLocation: ").Append(HtmllibmanagerFileSystemOutputCacheLocation).Append("\n");
            sb.Append("  HtmllibmanagerDisableReplacement: ").Append(HtmllibmanagerDisableReplacement).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties)obj);
        }

        /// <summary>
        /// Returns true if ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    HtmllibmanagerTiming == other.HtmllibmanagerTiming ||
                    HtmllibmanagerTiming != null &&
                    HtmllibmanagerTiming.Equals(other.HtmllibmanagerTiming)
                ) && 
                (
                    HtmllibmanagerDebugInitJs == other.HtmllibmanagerDebugInitJs ||
                    HtmllibmanagerDebugInitJs != null &&
                    HtmllibmanagerDebugInitJs.Equals(other.HtmllibmanagerDebugInitJs)
                ) && 
                (
                    HtmllibmanagerMinify == other.HtmllibmanagerMinify ||
                    HtmllibmanagerMinify != null &&
                    HtmllibmanagerMinify.Equals(other.HtmllibmanagerMinify)
                ) && 
                (
                    HtmllibmanagerDebug == other.HtmllibmanagerDebug ||
                    HtmllibmanagerDebug != null &&
                    HtmllibmanagerDebug.Equals(other.HtmllibmanagerDebug)
                ) && 
                (
                    HtmllibmanagerGzip == other.HtmllibmanagerGzip ||
                    HtmllibmanagerGzip != null &&
                    HtmllibmanagerGzip.Equals(other.HtmllibmanagerGzip)
                ) && 
                (
                    HtmllibmanagerMaxDataUriSize == other.HtmllibmanagerMaxDataUriSize ||
                    HtmllibmanagerMaxDataUriSize != null &&
                    HtmllibmanagerMaxDataUriSize.Equals(other.HtmllibmanagerMaxDataUriSize)
                ) && 
                (
                    HtmllibmanagerMaxage == other.HtmllibmanagerMaxage ||
                    HtmllibmanagerMaxage != null &&
                    HtmllibmanagerMaxage.Equals(other.HtmllibmanagerMaxage)
                ) && 
                (
                    HtmllibmanagerForceCQUrlInfo == other.HtmllibmanagerForceCQUrlInfo ||
                    HtmllibmanagerForceCQUrlInfo != null &&
                    HtmllibmanagerForceCQUrlInfo.Equals(other.HtmllibmanagerForceCQUrlInfo)
                ) && 
                (
                    HtmllibmanagerDefaultthemename == other.HtmllibmanagerDefaultthemename ||
                    HtmllibmanagerDefaultthemename != null &&
                    HtmllibmanagerDefaultthemename.Equals(other.HtmllibmanagerDefaultthemename)
                ) && 
                (
                    HtmllibmanagerDefaultuserthemename == other.HtmllibmanagerDefaultuserthemename ||
                    HtmllibmanagerDefaultuserthemename != null &&
                    HtmllibmanagerDefaultuserthemename.Equals(other.HtmllibmanagerDefaultuserthemename)
                ) && 
                (
                    HtmllibmanagerClientmanager == other.HtmllibmanagerClientmanager ||
                    HtmllibmanagerClientmanager != null &&
                    HtmllibmanagerClientmanager.Equals(other.HtmllibmanagerClientmanager)
                ) && 
                (
                    HtmllibmanagerPathList == other.HtmllibmanagerPathList ||
                    HtmllibmanagerPathList != null &&
                    HtmllibmanagerPathList.Equals(other.HtmllibmanagerPathList)
                ) && 
                (
                    HtmllibmanagerExcludedPathList == other.HtmllibmanagerExcludedPathList ||
                    HtmllibmanagerExcludedPathList != null &&
                    HtmllibmanagerExcludedPathList.Equals(other.HtmllibmanagerExcludedPathList)
                ) && 
                (
                    HtmllibmanagerProcessorJs == other.HtmllibmanagerProcessorJs ||
                    HtmllibmanagerProcessorJs != null &&
                    HtmllibmanagerProcessorJs.Equals(other.HtmllibmanagerProcessorJs)
                ) && 
                (
                    HtmllibmanagerProcessorCss == other.HtmllibmanagerProcessorCss ||
                    HtmllibmanagerProcessorCss != null &&
                    HtmllibmanagerProcessorCss.Equals(other.HtmllibmanagerProcessorCss)
                ) && 
                (
                    HtmllibmanagerLongcachePatterns == other.HtmllibmanagerLongcachePatterns ||
                    HtmllibmanagerLongcachePatterns != null &&
                    HtmllibmanagerLongcachePatterns.Equals(other.HtmllibmanagerLongcachePatterns)
                ) && 
                (
                    HtmllibmanagerLongcacheFormat == other.HtmllibmanagerLongcacheFormat ||
                    HtmllibmanagerLongcacheFormat != null &&
                    HtmllibmanagerLongcacheFormat.Equals(other.HtmllibmanagerLongcacheFormat)
                ) && 
                (
                    HtmllibmanagerUseFileSystemOutputCache == other.HtmllibmanagerUseFileSystemOutputCache ||
                    HtmllibmanagerUseFileSystemOutputCache != null &&
                    HtmllibmanagerUseFileSystemOutputCache.Equals(other.HtmllibmanagerUseFileSystemOutputCache)
                ) && 
                (
                    HtmllibmanagerFileSystemOutputCacheLocation == other.HtmllibmanagerFileSystemOutputCacheLocation ||
                    HtmllibmanagerFileSystemOutputCacheLocation != null &&
                    HtmllibmanagerFileSystemOutputCacheLocation.Equals(other.HtmllibmanagerFileSystemOutputCacheLocation)
                ) && 
                (
                    HtmllibmanagerDisableReplacement == other.HtmllibmanagerDisableReplacement ||
                    HtmllibmanagerDisableReplacement != null &&
                    HtmllibmanagerDisableReplacement.Equals(other.HtmllibmanagerDisableReplacement)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (HtmllibmanagerTiming != null)
                    hashCode = hashCode * 59 + HtmllibmanagerTiming.GetHashCode();
                    if (HtmllibmanagerDebugInitJs != null)
                    hashCode = hashCode * 59 + HtmllibmanagerDebugInitJs.GetHashCode();
                    if (HtmllibmanagerMinify != null)
                    hashCode = hashCode * 59 + HtmllibmanagerMinify.GetHashCode();
                    if (HtmllibmanagerDebug != null)
                    hashCode = hashCode * 59 + HtmllibmanagerDebug.GetHashCode();
                    if (HtmllibmanagerGzip != null)
                    hashCode = hashCode * 59 + HtmllibmanagerGzip.GetHashCode();
                    if (HtmllibmanagerMaxDataUriSize != null)
                    hashCode = hashCode * 59 + HtmllibmanagerMaxDataUriSize.GetHashCode();
                    if (HtmllibmanagerMaxage != null)
                    hashCode = hashCode * 59 + HtmllibmanagerMaxage.GetHashCode();
                    if (HtmllibmanagerForceCQUrlInfo != null)
                    hashCode = hashCode * 59 + HtmllibmanagerForceCQUrlInfo.GetHashCode();
                    if (HtmllibmanagerDefaultthemename != null)
                    hashCode = hashCode * 59 + HtmllibmanagerDefaultthemename.GetHashCode();
                    if (HtmllibmanagerDefaultuserthemename != null)
                    hashCode = hashCode * 59 + HtmllibmanagerDefaultuserthemename.GetHashCode();
                    if (HtmllibmanagerClientmanager != null)
                    hashCode = hashCode * 59 + HtmllibmanagerClientmanager.GetHashCode();
                    if (HtmllibmanagerPathList != null)
                    hashCode = hashCode * 59 + HtmllibmanagerPathList.GetHashCode();
                    if (HtmllibmanagerExcludedPathList != null)
                    hashCode = hashCode * 59 + HtmllibmanagerExcludedPathList.GetHashCode();
                    if (HtmllibmanagerProcessorJs != null)
                    hashCode = hashCode * 59 + HtmllibmanagerProcessorJs.GetHashCode();
                    if (HtmllibmanagerProcessorCss != null)
                    hashCode = hashCode * 59 + HtmllibmanagerProcessorCss.GetHashCode();
                    if (HtmllibmanagerLongcachePatterns != null)
                    hashCode = hashCode * 59 + HtmllibmanagerLongcachePatterns.GetHashCode();
                    if (HtmllibmanagerLongcacheFormat != null)
                    hashCode = hashCode * 59 + HtmllibmanagerLongcacheFormat.GetHashCode();
                    if (HtmllibmanagerUseFileSystemOutputCache != null)
                    hashCode = hashCode * 59 + HtmllibmanagerUseFileSystemOutputCache.GetHashCode();
                    if (HtmllibmanagerFileSystemOutputCacheLocation != null)
                    hashCode = hashCode * 59 + HtmllibmanagerFileSystemOutputCacheLocation.GetHashCode();
                    if (HtmllibmanagerDisableReplacement != null)
                    hashCode = hashCode * 59 + HtmllibmanagerDisableReplacement.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties left, ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties left, ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
