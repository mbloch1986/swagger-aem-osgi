/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties()
{
    m_ThreadPoolSizeIsSet = false;
    m_DelayTimeIsSet = false;
    m_WorkerSleepTimeIsSet = false;
}

ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::~ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties()
{
}

void ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_ThreadPoolSizeIsSet)
    {
        val[utility::conversions::to_string_t("threadPoolSize")] = ModelBase::toJson(m_ThreadPoolSize);
    }
    if(m_DelayTimeIsSet)
    {
        val[utility::conversions::to_string_t("delayTime")] = ModelBase::toJson(m_DelayTime);
    }
    if(m_WorkerSleepTimeIsSet)
    {
        val[utility::conversions::to_string_t("workerSleepTime")] = ModelBase::toJson(m_WorkerSleepTime);
    }

    return val;
}

void ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("threadPoolSize")))
    {
        if(!val[utility::conversions::to_string_t("threadPoolSize")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("threadPoolSize")]);
            setThreadPoolSize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("delayTime")))
    {
        if(!val[utility::conversions::to_string_t("delayTime")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("delayTime")]);
            setDelayTime( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("workerSleepTime")))
    {
        if(!val[utility::conversions::to_string_t("workerSleepTime")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("workerSleepTime")]);
            setWorkerSleepTime( newItem );
        }
    }
}

void ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_ThreadPoolSizeIsSet)
    {
        if (m_ThreadPoolSize.get())
        {
            m_ThreadPoolSize->toMultipart(multipart, utility::conversions::to_string_t("threadPoolSize."));
        }
    }
    if(m_DelayTimeIsSet)
    {
        if (m_DelayTime.get())
        {
            m_DelayTime->toMultipart(multipart, utility::conversions::to_string_t("delayTime."));
        }
    }
    if(m_WorkerSleepTimeIsSet)
    {
        if (m_WorkerSleepTime.get())
        {
            m_WorkerSleepTime->toMultipart(multipart, utility::conversions::to_string_t("workerSleepTime."));
        }
    }
}

void ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("threadPoolSize")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("threadPoolSize")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("threadPoolSize."));
            setThreadPoolSize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("delayTime")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("delayTime")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("delayTime."));
            setDelayTime( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("workerSleepTime")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("workerSleepTime")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("workerSleepTime."));
            setWorkerSleepTime( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::getThreadPoolSize() const
{
    return m_ThreadPoolSize;
}


void ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::setThreadPoolSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_ThreadPoolSize = value;
    m_ThreadPoolSizeIsSet = true;
}
bool ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::threadPoolSizeIsSet() const
{
    return m_ThreadPoolSizeIsSet;
}

void ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::unsetThreadPoolSize()
{
    m_ThreadPoolSizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::getDelayTime() const
{
    return m_DelayTime;
}


void ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::setDelayTime(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_DelayTime = value;
    m_DelayTimeIsSet = true;
}
bool ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::delayTimeIsSet() const
{
    return m_DelayTimeIsSet;
}

void ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::unsetDelayTime()
{
    m_DelayTimeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::getWorkerSleepTime() const
{
    return m_WorkerSleepTime;
}


void ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::setWorkerSleepTime(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_WorkerSleepTime = value;
    m_WorkerSleepTimeIsSet = true;
}
bool ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::workerSleepTimeIsSet() const
{
    return m_WorkerSleepTimeIsSet;
}

void ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties::unsetWorkerSleepTime()
{
    m_WorkerSleepTimeIsSet = false;
}

}
}
}
}

