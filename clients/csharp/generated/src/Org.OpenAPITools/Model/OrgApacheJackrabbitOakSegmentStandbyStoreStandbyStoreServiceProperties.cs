/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties
    /// </summary>
    [DataContract]
    public partial class OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties :  IEquatable<OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties" /> class.
        /// </summary>
        /// <param name="orgApacheSlingInstallerConfigurationPersist">orgApacheSlingInstallerConfigurationPersist.</param>
        /// <param name="mode">mode.</param>
        /// <param name="port">port.</param>
        /// <param name="primaryHost">primaryHost.</param>
        /// <param name="interval">interval.</param>
        /// <param name="primaryAllowedClientIpRanges">primaryAllowedClientIpRanges.</param>
        /// <param name="secure">secure.</param>
        /// <param name="standbyReadtimeout">standbyReadtimeout.</param>
        /// <param name="standbyAutoclean">standbyAutoclean.</param>
        public OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties(ConfigNodePropertyBoolean orgApacheSlingInstallerConfigurationPersist = default(ConfigNodePropertyBoolean), ConfigNodePropertyDropDown mode = default(ConfigNodePropertyDropDown), ConfigNodePropertyInteger port = default(ConfigNodePropertyInteger), ConfigNodePropertyString primaryHost = default(ConfigNodePropertyString), ConfigNodePropertyInteger interval = default(ConfigNodePropertyInteger), ConfigNodePropertyArray primaryAllowedClientIpRanges = default(ConfigNodePropertyArray), ConfigNodePropertyBoolean secure = default(ConfigNodePropertyBoolean), ConfigNodePropertyInteger standbyReadtimeout = default(ConfigNodePropertyInteger), ConfigNodePropertyBoolean standbyAutoclean = default(ConfigNodePropertyBoolean))
        {
            this.OrgApacheSlingInstallerConfigurationPersist = orgApacheSlingInstallerConfigurationPersist;
            this.Mode = mode;
            this.Port = port;
            this.PrimaryHost = primaryHost;
            this.Interval = interval;
            this.PrimaryAllowedClientIpRanges = primaryAllowedClientIpRanges;
            this.Secure = secure;
            this.StandbyReadtimeout = standbyReadtimeout;
            this.StandbyAutoclean = standbyAutoclean;
        }
        
        /// <summary>
        /// Gets or Sets OrgApacheSlingInstallerConfigurationPersist
        /// </summary>
        [DataMember(Name="org.apache.sling.installer.configuration.persist", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean OrgApacheSlingInstallerConfigurationPersist { get; set; }

        /// <summary>
        /// Gets or Sets Mode
        /// </summary>
        [DataMember(Name="mode", EmitDefaultValue=false)]
        public ConfigNodePropertyDropDown Mode { get; set; }

        /// <summary>
        /// Gets or Sets Port
        /// </summary>
        [DataMember(Name="port", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger Port { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryHost
        /// </summary>
        [DataMember(Name="primary.host", EmitDefaultValue=false)]
        public ConfigNodePropertyString PrimaryHost { get; set; }

        /// <summary>
        /// Gets or Sets Interval
        /// </summary>
        [DataMember(Name="interval", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger Interval { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryAllowedClientIpRanges
        /// </summary>
        [DataMember(Name="primary.allowed-client-ip-ranges", EmitDefaultValue=false)]
        public ConfigNodePropertyArray PrimaryAllowedClientIpRanges { get; set; }

        /// <summary>
        /// Gets or Sets Secure
        /// </summary>
        [DataMember(Name="secure", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean Secure { get; set; }

        /// <summary>
        /// Gets or Sets StandbyReadtimeout
        /// </summary>
        [DataMember(Name="standby.readtimeout", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger StandbyReadtimeout { get; set; }

        /// <summary>
        /// Gets or Sets StandbyAutoclean
        /// </summary>
        [DataMember(Name="standby.autoclean", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean StandbyAutoclean { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties {\n");
            sb.Append("  OrgApacheSlingInstallerConfigurationPersist: ").Append(OrgApacheSlingInstallerConfigurationPersist).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  PrimaryHost: ").Append(PrimaryHost).Append("\n");
            sb.Append("  Interval: ").Append(Interval).Append("\n");
            sb.Append("  PrimaryAllowedClientIpRanges: ").Append(PrimaryAllowedClientIpRanges).Append("\n");
            sb.Append("  Secure: ").Append(Secure).Append("\n");
            sb.Append("  StandbyReadtimeout: ").Append(StandbyReadtimeout).Append("\n");
            sb.Append("  StandbyAutoclean: ").Append(StandbyAutoclean).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties);
        }

        /// <summary>
        /// Returns true if OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrgApacheSlingInstallerConfigurationPersist == input.OrgApacheSlingInstallerConfigurationPersist ||
                    (this.OrgApacheSlingInstallerConfigurationPersist != null &&
                    this.OrgApacheSlingInstallerConfigurationPersist.Equals(input.OrgApacheSlingInstallerConfigurationPersist))
                ) && 
                (
                    this.Mode == input.Mode ||
                    (this.Mode != null &&
                    this.Mode.Equals(input.Mode))
                ) && 
                (
                    this.Port == input.Port ||
                    (this.Port != null &&
                    this.Port.Equals(input.Port))
                ) && 
                (
                    this.PrimaryHost == input.PrimaryHost ||
                    (this.PrimaryHost != null &&
                    this.PrimaryHost.Equals(input.PrimaryHost))
                ) && 
                (
                    this.Interval == input.Interval ||
                    (this.Interval != null &&
                    this.Interval.Equals(input.Interval))
                ) && 
                (
                    this.PrimaryAllowedClientIpRanges == input.PrimaryAllowedClientIpRanges ||
                    (this.PrimaryAllowedClientIpRanges != null &&
                    this.PrimaryAllowedClientIpRanges.Equals(input.PrimaryAllowedClientIpRanges))
                ) && 
                (
                    this.Secure == input.Secure ||
                    (this.Secure != null &&
                    this.Secure.Equals(input.Secure))
                ) && 
                (
                    this.StandbyReadtimeout == input.StandbyReadtimeout ||
                    (this.StandbyReadtimeout != null &&
                    this.StandbyReadtimeout.Equals(input.StandbyReadtimeout))
                ) && 
                (
                    this.StandbyAutoclean == input.StandbyAutoclean ||
                    (this.StandbyAutoclean != null &&
                    this.StandbyAutoclean.Equals(input.StandbyAutoclean))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrgApacheSlingInstallerConfigurationPersist != null)
                    hashCode = hashCode * 59 + this.OrgApacheSlingInstallerConfigurationPersist.GetHashCode();
                if (this.Mode != null)
                    hashCode = hashCode * 59 + this.Mode.GetHashCode();
                if (this.Port != null)
                    hashCode = hashCode * 59 + this.Port.GetHashCode();
                if (this.PrimaryHost != null)
                    hashCode = hashCode * 59 + this.PrimaryHost.GetHashCode();
                if (this.Interval != null)
                    hashCode = hashCode * 59 + this.Interval.GetHashCode();
                if (this.PrimaryAllowedClientIpRanges != null)
                    hashCode = hashCode * 59 + this.PrimaryAllowedClientIpRanges.GetHashCode();
                if (this.Secure != null)
                    hashCode = hashCode * 59 + this.Secure.GetHashCode();
                if (this.StandbyReadtimeout != null)
                    hashCode = hashCode * 59 + this.StandbyReadtimeout.GetHashCode();
                if (this.StandbyAutoclean != null)
                    hashCode = hashCode * 59 + this.StandbyAutoclean.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
