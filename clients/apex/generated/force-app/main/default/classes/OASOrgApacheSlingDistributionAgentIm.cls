/*
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OAS-api/OAS-codegen.git
 * Do not edit the class manually.
 */

/**
 * OASOrgApacheSlingDistributionAgentIm
 */
public class OASOrgApacheSlingDistributionAgentIm implements OAS.MappedProperties {
    /**
     * Get name
     * @return name
     */
    public OASConfigNodePropertyString name { get; set; }

    /**
     * Get title
     * @return title
     */
    public OASConfigNodePropertyString title { get; set; }

    /**
     * Get details
     * @return details
     */
    public OASConfigNodePropertyString details { get; set; }

    /**
     * Get enabled
     * @return enabled
     */
    public OASConfigNodePropertyBoolean enabled { get; set; }

    /**
     * Get serviceName
     * @return serviceName
     */
    public OASConfigNodePropertyString serviceName { get; set; }

    /**
     * Get logLevel
     * @return logLevel
     */
    public OASConfigNodePropertyDropDown logLevel { get; set; }

    /**
     * Get queueProcessingEnabled
     * @return queueProcessingEnabled
     */
    public OASConfigNodePropertyBoolean queueProcessingEnabled { get; set; }

    /**
     * Get passiveQueues
     * @return passiveQueues
     */
    public OASConfigNodePropertyArray passiveQueues { get; set; }

    /**
     * Get packageExporterEndpoints
     * @return packageExporterEndpoints
     */
    public OASConfigNodePropertyArray packageExporterEndpoints { get; set; }

    /**
     * Get packageImporterEndpoints
     * @return packageImporterEndpoints
     */
    public OASConfigNodePropertyArray packageImporterEndpoints { get; set; }

    /**
     * Get retryStrategy
     * @return retryStrategy
     */
    public OASConfigNodePropertyDropDown retryStrategy { get; set; }

    /**
     * Get retryAttempts
     * @return retryAttempts
     */
    public OASConfigNodePropertyInteger retryAttempts { get; set; }

    /**
     * Get pullItems
     * @return pullItems
     */
    public OASConfigNodePropertyInteger pullItems { get; set; }

    /**
     * Get httpConnTimeout
     * @return httpConnTimeout
     */
    public OASConfigNodePropertyInteger httpConnTimeout { get; set; }

    /**
     * Get requestAuthorizationStrategyTarget
     * @return requestAuthorizationStrategyTarget
     */
    public OASConfigNodePropertyString requestAuthorizationStrategyTarget { get; set; }

    /**
     * Get transportSecretProviderTarget
     * @return transportSecretProviderTarget
     */
    public OASConfigNodePropertyString transportSecretProviderTarget { get; set; }

    /**
     * Get packageBuilderTarget
     * @return packageBuilderTarget
     */
    public OASConfigNodePropertyString packageBuilderTarget { get; set; }

    /**
     * Get triggersTarget
     * @return triggersTarget
     */
    public OASConfigNodePropertyString triggersTarget { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'log.level' => 'logLevel',
        'queue.processing.enabled' => 'queueProcessingEnabled',
        'packageExporter.endpoints' => 'packageExporterEndpoints',
        'packageImporter.endpoints' => 'packageImporterEndpoints',
        'retry.strategy' => 'retryStrategy',
        'retry.attempts' => 'retryAttempts',
        'pull.items' => 'pullItems',
        'http.conn.timeout' => 'httpConnTimeout',
        'requestAuthorizationStrategy.target' => 'requestAuthorizationStrategyTarget',
        'transportSecretProvider.target' => 'transportSecretProviderTarget',
        'packageBuilder.target' => 'packageBuilderTarget',
        'triggers.target' => 'triggersTarget'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASOrgApacheSlingDistributionAgentIm getExample() {
        OASOrgApacheSlingDistributionAgentIm orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties = new OASOrgApacheSlingDistributionAgentIm();
          orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties.name = OASConfigNodePropertyString.getExample();
          orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties.title = OASConfigNodePropertyString.getExample();
          orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties.details = OASConfigNodePropertyString.getExample();
          orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties.enabled = OASConfigNodePropertyBoolean.getExample();
          orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties.serviceName = OASConfigNodePropertyString.getExample();
          orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties.logLevel = OASConfigNodePropertyDropDown.getExample();
          orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties.queueProcessingEnabled = OASConfigNodePropertyBoolean.getExample();
          orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties.passiveQueues = OASConfigNodePropertyArray.getExample();
          orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties.packageExporterEndpoints = OASConfigNodePropertyArray.getExample();
          orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties.packageImporterEndpoints = OASConfigNodePropertyArray.getExample();
          orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties.retryStrategy = OASConfigNodePropertyDropDown.getExample();
          orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties.retryAttempts = OASConfigNodePropertyInteger.getExample();
          orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties.pullItems = OASConfigNodePropertyInteger.getExample();
          orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties.httpConnTimeout = OASConfigNodePropertyInteger.getExample();
          orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties.requestAuthorizationStrategyTarget = OASConfigNodePropertyString.getExample();
          orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties.transportSecretProviderTarget = OASConfigNodePropertyString.getExample();
          orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties.packageBuilderTarget = OASConfigNodePropertyString.getExample();
          orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties.triggersTarget = OASConfigNodePropertyString.getExample();
        return orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASOrgApacheSlingDistributionAgentIm) {           
            OASOrgApacheSlingDistributionAgentIm orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties = (OASOrgApacheSlingDistributionAgentIm) obj;
            return this.name == orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties.name
                && this.title == orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties.title
                && this.details == orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties.details
                && this.enabled == orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties.enabled
                && this.serviceName == orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties.serviceName
                && this.logLevel == orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties.logLevel
                && this.queueProcessingEnabled == orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties.queueProcessingEnabled
                && this.passiveQueues == orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties.passiveQueues
                && this.packageExporterEndpoints == orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties.packageExporterEndpoints
                && this.packageImporterEndpoints == orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties.packageImporterEndpoints
                && this.retryStrategy == orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties.retryStrategy
                && this.retryAttempts == orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties.retryAttempts
                && this.pullItems == orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties.pullItems
                && this.httpConnTimeout == orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties.httpConnTimeout
                && this.requestAuthorizationStrategyTarget == orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties.requestAuthorizationStrategyTarget
                && this.transportSecretProviderTarget == orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties.transportSecretProviderTarget
                && this.packageBuilderTarget == orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties.packageBuilderTarget
                && this.triggersTarget == orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties.triggersTarget;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (name == null ? 0 : System.hashCode(name));
        hashCode = (17 * hashCode) + (title == null ? 0 : System.hashCode(title));
        hashCode = (17 * hashCode) + (details == null ? 0 : System.hashCode(details));
        hashCode = (17 * hashCode) + (enabled == null ? 0 : System.hashCode(enabled));
        hashCode = (17 * hashCode) + (serviceName == null ? 0 : System.hashCode(serviceName));
        hashCode = (17 * hashCode) + (logLevel == null ? 0 : System.hashCode(logLevel));
        hashCode = (17 * hashCode) + (queueProcessingEnabled == null ? 0 : System.hashCode(queueProcessingEnabled));
        hashCode = (17 * hashCode) + (passiveQueues == null ? 0 : System.hashCode(passiveQueues));
        hashCode = (17 * hashCode) + (packageExporterEndpoints == null ? 0 : System.hashCode(packageExporterEndpoints));
        hashCode = (17 * hashCode) + (packageImporterEndpoints == null ? 0 : System.hashCode(packageImporterEndpoints));
        hashCode = (17 * hashCode) + (retryStrategy == null ? 0 : System.hashCode(retryStrategy));
        hashCode = (17 * hashCode) + (retryAttempts == null ? 0 : System.hashCode(retryAttempts));
        hashCode = (17 * hashCode) + (pullItems == null ? 0 : System.hashCode(pullItems));
        hashCode = (17 * hashCode) + (httpConnTimeout == null ? 0 : System.hashCode(httpConnTimeout));
        hashCode = (17 * hashCode) + (requestAuthorizationStrategyTarget == null ? 0 : System.hashCode(requestAuthorizationStrategyTarget));
        hashCode = (17 * hashCode) + (transportSecretProviderTarget == null ? 0 : System.hashCode(transportSecretProviderTarget));
        hashCode = (17 * hashCode) + (packageBuilderTarget == null ? 0 : System.hashCode(packageBuilderTarget));
        hashCode = (17 * hashCode) + (triggersTarget == null ? 0 : System.hashCode(triggersTarget));
        return hashCode;
    }
}

