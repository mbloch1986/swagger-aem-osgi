/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties::OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties()
{
    m_IgnorePropertyNameRegexIsSet = false;
    m_ConfigCollectionPropertiesResourceNamesIsSet = false;
    
}

OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties::~OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties()
{
}

void OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_IgnorePropertyNameRegexIsSet)
    {
        val["ignorePropertyNameRegex"] = ModelBase::toJson(m_IgnorePropertyNameRegex);
    }
    if(m_ConfigCollectionPropertiesResourceNamesIsSet)
    {
        val["configCollectionPropertiesResourceNames"] = ModelBase::toJson(m_ConfigCollectionPropertiesResourceNames);
    }
    

    return val;
}

void OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties::fromJson(nlohmann::json& val)
{
    if(val.find("ignorePropertyNameRegex") != val.end())
    {
        if(!val["ignorePropertyNameRegex"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["ignorePropertyNameRegex"]);
            setIgnorePropertyNameRegex( newItem );
        }
        
    }
    if(val.find("configCollectionPropertiesResourceNames") != val.end())
    {
        if(!val["configCollectionPropertiesResourceNames"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["configCollectionPropertiesResourceNames"]);
            setConfigCollectionPropertiesResourceNames( newItem );
        }
        
    }
    
}


ConfigNodePropertyArray OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties::getIgnorePropertyNameRegex() const
{
    return m_IgnorePropertyNameRegex;
}
void OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties::setIgnorePropertyNameRegex(ConfigNodePropertyArray const& value)
{
    m_IgnorePropertyNameRegex = value;
    m_IgnorePropertyNameRegexIsSet = true;
}
bool OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties::ignorePropertyNameRegexIsSet() const
{
    return m_IgnorePropertyNameRegexIsSet;
}
void OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties::unsetIgnorePropertyNameRegex()
{
    m_IgnorePropertyNameRegexIsSet = false;
}
ConfigNodePropertyArray OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties::getConfigCollectionPropertiesResourceNames() const
{
    return m_ConfigCollectionPropertiesResourceNames;
}
void OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties::setConfigCollectionPropertiesResourceNames(ConfigNodePropertyArray const& value)
{
    m_ConfigCollectionPropertiesResourceNames = value;
    m_ConfigCollectionPropertiesResourceNamesIsSet = true;
}
bool OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties::configCollectionPropertiesResourceNamesIsSet() const
{
    return m_ConfigCollectionPropertiesResourceNamesIsSet;
}
void OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties::unsetConfigCollectionPropertiesResourceNames()
{
    m_ConfigCollectionPropertiesResourceNamesIsSet = false;
}

}
}
}
}

