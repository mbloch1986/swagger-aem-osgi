/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComAdobeGraniteLicenseImplLicenseCheckFilterProperties
    /// </summary>
    [DataContract]
    public partial class ComAdobeGraniteLicenseImplLicenseCheckFilterProperties :  IEquatable<ComAdobeGraniteLicenseImplLicenseCheckFilterProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAdobeGraniteLicenseImplLicenseCheckFilterProperties" /> class.
        /// </summary>
        /// <param name="checkInternval">checkInternval.</param>
        /// <param name="excludeIds">excludeIds.</param>
        /// <param name="encryptPing">encryptPing.</param>
        public ComAdobeGraniteLicenseImplLicenseCheckFilterProperties(ConfigNodePropertyInteger checkInternval = default(ConfigNodePropertyInteger), ConfigNodePropertyArray excludeIds = default(ConfigNodePropertyArray), ConfigNodePropertyBoolean encryptPing = default(ConfigNodePropertyBoolean))
        {
            this.CheckInternval = checkInternval;
            this.ExcludeIds = excludeIds;
            this.EncryptPing = encryptPing;
        }
        
        /// <summary>
        /// Gets or Sets CheckInternval
        /// </summary>
        [DataMember(Name="checkInternval", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger CheckInternval { get; set; }

        /// <summary>
        /// Gets or Sets ExcludeIds
        /// </summary>
        [DataMember(Name="excludeIds", EmitDefaultValue=false)]
        public ConfigNodePropertyArray ExcludeIds { get; set; }

        /// <summary>
        /// Gets or Sets EncryptPing
        /// </summary>
        [DataMember(Name="encryptPing", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean EncryptPing { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeGraniteLicenseImplLicenseCheckFilterProperties {\n");
            sb.Append("  CheckInternval: ").Append(CheckInternval).Append("\n");
            sb.Append("  ExcludeIds: ").Append(ExcludeIds).Append("\n");
            sb.Append("  EncryptPing: ").Append(EncryptPing).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComAdobeGraniteLicenseImplLicenseCheckFilterProperties);
        }

        /// <summary>
        /// Returns true if ComAdobeGraniteLicenseImplLicenseCheckFilterProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComAdobeGraniteLicenseImplLicenseCheckFilterProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeGraniteLicenseImplLicenseCheckFilterProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CheckInternval == input.CheckInternval ||
                    (this.CheckInternval != null &&
                    this.CheckInternval.Equals(input.CheckInternval))
                ) && 
                (
                    this.ExcludeIds == input.ExcludeIds ||
                    (this.ExcludeIds != null &&
                    this.ExcludeIds.Equals(input.ExcludeIds))
                ) && 
                (
                    this.EncryptPing == input.EncryptPing ||
                    (this.EncryptPing != null &&
                    this.EncryptPing.Equals(input.EncryptPing))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CheckInternval != null)
                    hashCode = hashCode * 59 + this.CheckInternval.GetHashCode();
                if (this.ExcludeIds != null)
                    hashCode = hashCode * 59 + this.ExcludeIds.GetHashCode();
                if (this.EncryptPing != null)
                    hashCode = hashCode * 59 + this.EncryptPing.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
