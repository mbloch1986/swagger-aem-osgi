/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeOctopusNcommBootstrapProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeOctopusNcommBootstrapProperties::ComAdobeOctopusNcommBootstrapProperties()
{
    m_MaxConnectionsIsSet = false;
    m_MaxRequestsIsSet = false;
    m_RequestTimeoutIsSet = false;
    m_RequestRetriesIsSet = false;
    m_LaunchTimeoutIsSet = false;
}

ComAdobeOctopusNcommBootstrapProperties::~ComAdobeOctopusNcommBootstrapProperties()
{
}

void ComAdobeOctopusNcommBootstrapProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeOctopusNcommBootstrapProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_MaxConnectionsIsSet)
    {
        val[utility::conversions::to_string_t("maxConnections")] = ModelBase::toJson(m_MaxConnections);
    }
    if(m_MaxRequestsIsSet)
    {
        val[utility::conversions::to_string_t("maxRequests")] = ModelBase::toJson(m_MaxRequests);
    }
    if(m_RequestTimeoutIsSet)
    {
        val[utility::conversions::to_string_t("requestTimeout")] = ModelBase::toJson(m_RequestTimeout);
    }
    if(m_RequestRetriesIsSet)
    {
        val[utility::conversions::to_string_t("requestRetries")] = ModelBase::toJson(m_RequestRetries);
    }
    if(m_LaunchTimeoutIsSet)
    {
        val[utility::conversions::to_string_t("launchTimeout")] = ModelBase::toJson(m_LaunchTimeout);
    }

    return val;
}

void ComAdobeOctopusNcommBootstrapProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("maxConnections")))
    {
        if(!val[utility::conversions::to_string_t("maxConnections")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("maxConnections")]);
            setMaxConnections( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("maxRequests")))
    {
        if(!val[utility::conversions::to_string_t("maxRequests")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("maxRequests")]);
            setMaxRequests( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("requestTimeout")))
    {
        if(!val[utility::conversions::to_string_t("requestTimeout")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("requestTimeout")]);
            setRequestTimeout( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("requestRetries")))
    {
        if(!val[utility::conversions::to_string_t("requestRetries")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("requestRetries")]);
            setRequestRetries( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("launchTimeout")))
    {
        if(!val[utility::conversions::to_string_t("launchTimeout")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("launchTimeout")]);
            setLaunchTimeout( newItem );
        }
    }
}

void ComAdobeOctopusNcommBootstrapProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_MaxConnectionsIsSet)
    {
        if (m_MaxConnections.get())
        {
            m_MaxConnections->toMultipart(multipart, utility::conversions::to_string_t("maxConnections."));
        }
    }
    if(m_MaxRequestsIsSet)
    {
        if (m_MaxRequests.get())
        {
            m_MaxRequests->toMultipart(multipart, utility::conversions::to_string_t("maxRequests."));
        }
    }
    if(m_RequestTimeoutIsSet)
    {
        if (m_RequestTimeout.get())
        {
            m_RequestTimeout->toMultipart(multipart, utility::conversions::to_string_t("requestTimeout."));
        }
    }
    if(m_RequestRetriesIsSet)
    {
        if (m_RequestRetries.get())
        {
            m_RequestRetries->toMultipart(multipart, utility::conversions::to_string_t("requestRetries."));
        }
    }
    if(m_LaunchTimeoutIsSet)
    {
        if (m_LaunchTimeout.get())
        {
            m_LaunchTimeout->toMultipart(multipart, utility::conversions::to_string_t("launchTimeout."));
        }
    }
}

void ComAdobeOctopusNcommBootstrapProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("maxConnections")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("maxConnections")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("maxConnections."));
            setMaxConnections( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("maxRequests")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("maxRequests")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("maxRequests."));
            setMaxRequests( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("requestTimeout")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("requestTimeout")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("requestTimeout."));
            setRequestTimeout( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("requestRetries")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("requestRetries")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("requestRetries."));
            setRequestRetries( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("launchTimeout")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("launchTimeout")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("launchTimeout."));
            setLaunchTimeout( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeOctopusNcommBootstrapProperties::getMaxConnections() const
{
    return m_MaxConnections;
}


void ComAdobeOctopusNcommBootstrapProperties::setMaxConnections(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_MaxConnections = value;
    m_MaxConnectionsIsSet = true;
}
bool ComAdobeOctopusNcommBootstrapProperties::maxConnectionsIsSet() const
{
    return m_MaxConnectionsIsSet;
}

void ComAdobeOctopusNcommBootstrapProperties::unsetMaxConnections()
{
    m_MaxConnectionsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeOctopusNcommBootstrapProperties::getMaxRequests() const
{
    return m_MaxRequests;
}


void ComAdobeOctopusNcommBootstrapProperties::setMaxRequests(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_MaxRequests = value;
    m_MaxRequestsIsSet = true;
}
bool ComAdobeOctopusNcommBootstrapProperties::maxRequestsIsSet() const
{
    return m_MaxRequestsIsSet;
}

void ComAdobeOctopusNcommBootstrapProperties::unsetMaxRequests()
{
    m_MaxRequestsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeOctopusNcommBootstrapProperties::getRequestTimeout() const
{
    return m_RequestTimeout;
}


void ComAdobeOctopusNcommBootstrapProperties::setRequestTimeout(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_RequestTimeout = value;
    m_RequestTimeoutIsSet = true;
}
bool ComAdobeOctopusNcommBootstrapProperties::requestTimeoutIsSet() const
{
    return m_RequestTimeoutIsSet;
}

void ComAdobeOctopusNcommBootstrapProperties::unsetRequestTimeout()
{
    m_RequestTimeoutIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeOctopusNcommBootstrapProperties::getRequestRetries() const
{
    return m_RequestRetries;
}


void ComAdobeOctopusNcommBootstrapProperties::setRequestRetries(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_RequestRetries = value;
    m_RequestRetriesIsSet = true;
}
bool ComAdobeOctopusNcommBootstrapProperties::requestRetriesIsSet() const
{
    return m_RequestRetriesIsSet;
}

void ComAdobeOctopusNcommBootstrapProperties::unsetRequestRetries()
{
    m_RequestRetriesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeOctopusNcommBootstrapProperties::getLaunchTimeout() const
{
    return m_LaunchTimeout;
}


void ComAdobeOctopusNcommBootstrapProperties::setLaunchTimeout(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_LaunchTimeout = value;
    m_LaunchTimeoutIsSet = true;
}
bool ComAdobeOctopusNcommBootstrapProperties::launchTimeoutIsSet() const
{
    return m_LaunchTimeoutIsSet;
}

void ComAdobeOctopusNcommBootstrapProperties::unsetLaunchTimeout()
{
    m_LaunchTimeoutIsSet = false;
}

}
}
}
}

