/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties()
{
    m_Translate_languageIsSet = false;
    m_Translate_displayIsSet = false;
    m_Translate_attributionIsSet = false;
    m_Translate_cachingIsSet = false;
    m_Translate_smart_renderingIsSet = false;
    m_Translate_caching_durationIsSet = false;
    m_Translate_session_save_intervalIsSet = false;
    m_Translate_session_save_batchLimitIsSet = false;
}

ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::~ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties()
{
}

void ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Translate_languageIsSet)
    {
        val[utility::conversions::to_string_t("translate.language")] = ModelBase::toJson(m_Translate_language);
    }
    if(m_Translate_displayIsSet)
    {
        val[utility::conversions::to_string_t("translate.display")] = ModelBase::toJson(m_Translate_display);
    }
    if(m_Translate_attributionIsSet)
    {
        val[utility::conversions::to_string_t("translate.attribution")] = ModelBase::toJson(m_Translate_attribution);
    }
    if(m_Translate_cachingIsSet)
    {
        val[utility::conversions::to_string_t("translate.caching")] = ModelBase::toJson(m_Translate_caching);
    }
    if(m_Translate_smart_renderingIsSet)
    {
        val[utility::conversions::to_string_t("translate.smart.rendering")] = ModelBase::toJson(m_Translate_smart_rendering);
    }
    if(m_Translate_caching_durationIsSet)
    {
        val[utility::conversions::to_string_t("translate.caching.duration")] = ModelBase::toJson(m_Translate_caching_duration);
    }
    if(m_Translate_session_save_intervalIsSet)
    {
        val[utility::conversions::to_string_t("translate.session.save.interval")] = ModelBase::toJson(m_Translate_session_save_interval);
    }
    if(m_Translate_session_save_batchLimitIsSet)
    {
        val[utility::conversions::to_string_t("translate.session.save.batchLimit")] = ModelBase::toJson(m_Translate_session_save_batchLimit);
    }

    return val;
}

void ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("translate.language")))
    {
        if(!val[utility::conversions::to_string_t("translate.language")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("translate.language")]);
            setTranslateLanguage( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("translate.display")))
    {
        if(!val[utility::conversions::to_string_t("translate.display")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("translate.display")]);
            setTranslateDisplay( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("translate.attribution")))
    {
        if(!val[utility::conversions::to_string_t("translate.attribution")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("translate.attribution")]);
            setTranslateAttribution( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("translate.caching")))
    {
        if(!val[utility::conversions::to_string_t("translate.caching")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("translate.caching")]);
            setTranslateCaching( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("translate.smart.rendering")))
    {
        if(!val[utility::conversions::to_string_t("translate.smart.rendering")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("translate.smart.rendering")]);
            setTranslateSmartRendering( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("translate.caching.duration")))
    {
        if(!val[utility::conversions::to_string_t("translate.caching.duration")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("translate.caching.duration")]);
            setTranslateCachingDuration( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("translate.session.save.interval")))
    {
        if(!val[utility::conversions::to_string_t("translate.session.save.interval")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("translate.session.save.interval")]);
            setTranslateSessionSaveInterval( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("translate.session.save.batchLimit")))
    {
        if(!val[utility::conversions::to_string_t("translate.session.save.batchLimit")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("translate.session.save.batchLimit")]);
            setTranslateSessionSaveBatchLimit( newItem );
        }
    }
}

void ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Translate_languageIsSet)
    {
        if (m_Translate_language.get())
        {
            m_Translate_language->toMultipart(multipart, utility::conversions::to_string_t("translate.language."));
        }
    }
    if(m_Translate_displayIsSet)
    {
        if (m_Translate_display.get())
        {
            m_Translate_display->toMultipart(multipart, utility::conversions::to_string_t("translate.display."));
        }
    }
    if(m_Translate_attributionIsSet)
    {
        if (m_Translate_attribution.get())
        {
            m_Translate_attribution->toMultipart(multipart, utility::conversions::to_string_t("translate.attribution."));
        }
    }
    if(m_Translate_cachingIsSet)
    {
        if (m_Translate_caching.get())
        {
            m_Translate_caching->toMultipart(multipart, utility::conversions::to_string_t("translate.caching."));
        }
    }
    if(m_Translate_smart_renderingIsSet)
    {
        if (m_Translate_smart_rendering.get())
        {
            m_Translate_smart_rendering->toMultipart(multipart, utility::conversions::to_string_t("translate.smart.rendering."));
        }
    }
    if(m_Translate_caching_durationIsSet)
    {
        if (m_Translate_caching_duration.get())
        {
            m_Translate_caching_duration->toMultipart(multipart, utility::conversions::to_string_t("translate.caching.duration."));
        }
    }
    if(m_Translate_session_save_intervalIsSet)
    {
        if (m_Translate_session_save_interval.get())
        {
            m_Translate_session_save_interval->toMultipart(multipart, utility::conversions::to_string_t("translate.session.save.interval."));
        }
    }
    if(m_Translate_session_save_batchLimitIsSet)
    {
        if (m_Translate_session_save_batchLimit.get())
        {
            m_Translate_session_save_batchLimit->toMultipart(multipart, utility::conversions::to_string_t("translate.session.save.batchLimit."));
        }
    }
}

void ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("translate.language")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("translate.language")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("translate.language."));
            setTranslateLanguage( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("translate.display")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("translate.display")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("translate.display."));
            setTranslateDisplay( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("translate.attribution")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("translate.attribution")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("translate.attribution."));
            setTranslateAttribution( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("translate.caching")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("translate.caching")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("translate.caching."));
            setTranslateCaching( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("translate.smart.rendering")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("translate.smart.rendering")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("translate.smart.rendering."));
            setTranslateSmartRendering( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("translate.caching.duration")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("translate.caching.duration")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("translate.caching.duration."));
            setTranslateCachingDuration( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("translate.session.save.interval")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("translate.session.save.interval")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("translate.session.save.interval."));
            setTranslateSessionSaveInterval( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("translate.session.save.batchLimit")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("translate.session.save.batchLimit")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("translate.session.save.batchLimit."));
            setTranslateSessionSaveBatchLimit( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyDropDown> ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::getTranslateLanguage() const
{
    return m_Translate_language;
}


void ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::setTranslateLanguage(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_Translate_language = value;
    m_Translate_languageIsSet = true;
}
bool ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::translateLanguageIsSet() const
{
    return m_Translate_languageIsSet;
}

void ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::unsetTranslate_language()
{
    m_Translate_languageIsSet = false;
}

std::shared_ptr<ConfigNodePropertyDropDown> ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::getTranslateDisplay() const
{
    return m_Translate_display;
}


void ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::setTranslateDisplay(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_Translate_display = value;
    m_Translate_displayIsSet = true;
}
bool ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::translateDisplayIsSet() const
{
    return m_Translate_displayIsSet;
}

void ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::unsetTranslate_display()
{
    m_Translate_displayIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::getTranslateAttribution() const
{
    return m_Translate_attribution;
}


void ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::setTranslateAttribution(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Translate_attribution = value;
    m_Translate_attributionIsSet = true;
}
bool ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::translateAttributionIsSet() const
{
    return m_Translate_attributionIsSet;
}

void ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::unsetTranslate_attribution()
{
    m_Translate_attributionIsSet = false;
}

std::shared_ptr<ConfigNodePropertyDropDown> ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::getTranslateCaching() const
{
    return m_Translate_caching;
}


void ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::setTranslateCaching(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_Translate_caching = value;
    m_Translate_cachingIsSet = true;
}
bool ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::translateCachingIsSet() const
{
    return m_Translate_cachingIsSet;
}

void ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::unsetTranslate_caching()
{
    m_Translate_cachingIsSet = false;
}

std::shared_ptr<ConfigNodePropertyDropDown> ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::getTranslateSmartRendering() const
{
    return m_Translate_smart_rendering;
}


void ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::setTranslateSmartRendering(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_Translate_smart_rendering = value;
    m_Translate_smart_renderingIsSet = true;
}
bool ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::translateSmartRenderingIsSet() const
{
    return m_Translate_smart_renderingIsSet;
}

void ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::unsetTranslate_smart_rendering()
{
    m_Translate_smart_renderingIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::getTranslateCachingDuration() const
{
    return m_Translate_caching_duration;
}


void ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::setTranslateCachingDuration(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Translate_caching_duration = value;
    m_Translate_caching_durationIsSet = true;
}
bool ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::translateCachingDurationIsSet() const
{
    return m_Translate_caching_durationIsSet;
}

void ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::unsetTranslate_caching_duration()
{
    m_Translate_caching_durationIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::getTranslateSessionSaveInterval() const
{
    return m_Translate_session_save_interval;
}


void ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::setTranslateSessionSaveInterval(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Translate_session_save_interval = value;
    m_Translate_session_save_intervalIsSet = true;
}
bool ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::translateSessionSaveIntervalIsSet() const
{
    return m_Translate_session_save_intervalIsSet;
}

void ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::unsetTranslate_session_save_interval()
{
    m_Translate_session_save_intervalIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::getTranslateSessionSaveBatchLimit() const
{
    return m_Translate_session_save_batchLimit;
}


void ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::setTranslateSessionSaveBatchLimit(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Translate_session_save_batchLimit = value;
    m_Translate_session_save_batchLimitIsSet = true;
}
bool ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::translateSessionSaveBatchLimitIsSet() const
{
    return m_Translate_session_save_batchLimitIsSet;
}

void ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::unsetTranslate_session_save_batchLimit()
{
    m_Translate_session_save_batchLimitIsSet = false;
}

}
}
}
}

