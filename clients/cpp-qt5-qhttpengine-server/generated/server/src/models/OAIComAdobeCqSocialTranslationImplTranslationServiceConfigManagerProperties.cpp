/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties() {
    this->init();
}

OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::~OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties() {
    
}

void
OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::init() {
    m_translate_language_isSet = false;
    m_translate_display_isSet = false;
    m_translate_attribution_isSet = false;
    m_translate_caching_isSet = false;
    m_translate_smart_rendering_isSet = false;
    m_translate_caching_duration_isSet = false;
    m_translate_session_save_interval_isSet = false;
    m_translate_session_save_batch_limit_isSet = false;
}

void
OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(translate_language, json[QString("translate.language")]);
    
    ::OpenAPI::fromJsonValue(translate_display, json[QString("translate.display")]);
    
    ::OpenAPI::fromJsonValue(translate_attribution, json[QString("translate.attribution")]);
    
    ::OpenAPI::fromJsonValue(translate_caching, json[QString("translate.caching")]);
    
    ::OpenAPI::fromJsonValue(translate_smart_rendering, json[QString("translate.smart.rendering")]);
    
    ::OpenAPI::fromJsonValue(translate_caching_duration, json[QString("translate.caching.duration")]);
    
    ::OpenAPI::fromJsonValue(translate_session_save_interval, json[QString("translate.session.save.interval")]);
    
    ::OpenAPI::fromJsonValue(translate_session_save_batch_limit, json[QString("translate.session.save.batchLimit")]);
    
}

QString
OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::asJsonObject() const {
    QJsonObject obj;
	if(translate_language.isSet()){
        obj.insert(QString("translate.language"), ::OpenAPI::toJsonValue(translate_language));
    }
	if(translate_display.isSet()){
        obj.insert(QString("translate.display"), ::OpenAPI::toJsonValue(translate_display));
    }
	if(translate_attribution.isSet()){
        obj.insert(QString("translate.attribution"), ::OpenAPI::toJsonValue(translate_attribution));
    }
	if(translate_caching.isSet()){
        obj.insert(QString("translate.caching"), ::OpenAPI::toJsonValue(translate_caching));
    }
	if(translate_smart_rendering.isSet()){
        obj.insert(QString("translate.smart.rendering"), ::OpenAPI::toJsonValue(translate_smart_rendering));
    }
	if(translate_caching_duration.isSet()){
        obj.insert(QString("translate.caching.duration"), ::OpenAPI::toJsonValue(translate_caching_duration));
    }
	if(translate_session_save_interval.isSet()){
        obj.insert(QString("translate.session.save.interval"), ::OpenAPI::toJsonValue(translate_session_save_interval));
    }
	if(translate_session_save_batch_limit.isSet()){
        obj.insert(QString("translate.session.save.batchLimit"), ::OpenAPI::toJsonValue(translate_session_save_batch_limit));
    }
    return obj;
}

OAIConfigNodePropertyDropDown
OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::getTranslateLanguage() const {
    return translate_language;
}
void
OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::setTranslateLanguage(const OAIConfigNodePropertyDropDown &translate_language) {
    this->translate_language = translate_language;
    this->m_translate_language_isSet = true;
}

OAIConfigNodePropertyDropDown
OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::getTranslateDisplay() const {
    return translate_display;
}
void
OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::setTranslateDisplay(const OAIConfigNodePropertyDropDown &translate_display) {
    this->translate_display = translate_display;
    this->m_translate_display_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::getTranslateAttribution() const {
    return translate_attribution;
}
void
OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::setTranslateAttribution(const OAIConfigNodePropertyBoolean &translate_attribution) {
    this->translate_attribution = translate_attribution;
    this->m_translate_attribution_isSet = true;
}

OAIConfigNodePropertyDropDown
OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::getTranslateCaching() const {
    return translate_caching;
}
void
OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::setTranslateCaching(const OAIConfigNodePropertyDropDown &translate_caching) {
    this->translate_caching = translate_caching;
    this->m_translate_caching_isSet = true;
}

OAIConfigNodePropertyDropDown
OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::getTranslateSmartRendering() const {
    return translate_smart_rendering;
}
void
OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::setTranslateSmartRendering(const OAIConfigNodePropertyDropDown &translate_smart_rendering) {
    this->translate_smart_rendering = translate_smart_rendering;
    this->m_translate_smart_rendering_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::getTranslateCachingDuration() const {
    return translate_caching_duration;
}
void
OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::setTranslateCachingDuration(const OAIConfigNodePropertyString &translate_caching_duration) {
    this->translate_caching_duration = translate_caching_duration;
    this->m_translate_caching_duration_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::getTranslateSessionSaveInterval() const {
    return translate_session_save_interval;
}
void
OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::setTranslateSessionSaveInterval(const OAIConfigNodePropertyString &translate_session_save_interval) {
    this->translate_session_save_interval = translate_session_save_interval;
    this->m_translate_session_save_interval_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::getTranslateSessionSaveBatchLimit() const {
    return translate_session_save_batch_limit;
}
void
OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::setTranslateSessionSaveBatchLimit(const OAIConfigNodePropertyString &translate_session_save_batch_limit) {
    this->translate_session_save_batch_limit = translate_session_save_batch_limit;
    this->m_translate_session_save_batch_limit_isSet = true;
}


bool
OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(translate_language.isSet()){ isObjectUpdated = true; break;}
    
        if(translate_display.isSet()){ isObjectUpdated = true; break;}
    
        if(translate_attribution.isSet()){ isObjectUpdated = true; break;}
    
        if(translate_caching.isSet()){ isObjectUpdated = true; break;}
    
        if(translate_smart_rendering.isSet()){ isObjectUpdated = true; break;}
    
        if(translate_caching_duration.isSet()){ isObjectUpdated = true; break;}
    
        if(translate_session_save_interval.isSet()){ isObjectUpdated = true; break;}
    
        if(translate_session_save_batch_limit.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

