/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties(QString json) {
    this->fromJson(json);
}

OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties() {
    this->init();
}

OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::~OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties() {
    
}

void
OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::init() {
    m_token_expiration_isSet = false;
    m_token_length_isSet = false;
    m_token_refresh_isSet = false;
    m_token_cleanup_threshold_isSet = false;
    m_password_hash_algorithm_isSet = false;
    m_password_hash_iterations_isSet = false;
    m_password_salt_size_isSet = false;
}

void
OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(token_expiration, json[QString("tokenExpiration")]);
    
    ::OpenAPI::fromJsonValue(token_length, json[QString("tokenLength")]);
    
    ::OpenAPI::fromJsonValue(token_refresh, json[QString("tokenRefresh")]);
    
    ::OpenAPI::fromJsonValue(token_cleanup_threshold, json[QString("tokenCleanupThreshold")]);
    
    ::OpenAPI::fromJsonValue(password_hash_algorithm, json[QString("passwordHashAlgorithm")]);
    
    ::OpenAPI::fromJsonValue(password_hash_iterations, json[QString("passwordHashIterations")]);
    
    ::OpenAPI::fromJsonValue(password_salt_size, json[QString("passwordSaltSize")]);
    
}

QString
OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::asJsonObject() const {
    QJsonObject obj;
	if(token_expiration.isSet()){
        obj.insert(QString("tokenExpiration"), ::OpenAPI::toJsonValue(token_expiration));
    }
	if(token_length.isSet()){
        obj.insert(QString("tokenLength"), ::OpenAPI::toJsonValue(token_length));
    }
	if(token_refresh.isSet()){
        obj.insert(QString("tokenRefresh"), ::OpenAPI::toJsonValue(token_refresh));
    }
	if(token_cleanup_threshold.isSet()){
        obj.insert(QString("tokenCleanupThreshold"), ::OpenAPI::toJsonValue(token_cleanup_threshold));
    }
	if(password_hash_algorithm.isSet()){
        obj.insert(QString("passwordHashAlgorithm"), ::OpenAPI::toJsonValue(password_hash_algorithm));
    }
	if(password_hash_iterations.isSet()){
        obj.insert(QString("passwordHashIterations"), ::OpenAPI::toJsonValue(password_hash_iterations));
    }
	if(password_salt_size.isSet()){
        obj.insert(QString("passwordSaltSize"), ::OpenAPI::toJsonValue(password_salt_size));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::getTokenExpiration() const {
    return token_expiration;
}
void
OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::setTokenExpiration(const OAIConfigNodePropertyString &token_expiration) {
    this->token_expiration = token_expiration;
    this->m_token_expiration_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::getTokenLength() const {
    return token_length;
}
void
OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::setTokenLength(const OAIConfigNodePropertyString &token_length) {
    this->token_length = token_length;
    this->m_token_length_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::getTokenRefresh() const {
    return token_refresh;
}
void
OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::setTokenRefresh(const OAIConfigNodePropertyBoolean &token_refresh) {
    this->token_refresh = token_refresh;
    this->m_token_refresh_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::getTokenCleanupThreshold() const {
    return token_cleanup_threshold;
}
void
OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::setTokenCleanupThreshold(const OAIConfigNodePropertyInteger &token_cleanup_threshold) {
    this->token_cleanup_threshold = token_cleanup_threshold;
    this->m_token_cleanup_threshold_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::getPasswordHashAlgorithm() const {
    return password_hash_algorithm;
}
void
OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::setPasswordHashAlgorithm(const OAIConfigNodePropertyString &password_hash_algorithm) {
    this->password_hash_algorithm = password_hash_algorithm;
    this->m_password_hash_algorithm_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::getPasswordHashIterations() const {
    return password_hash_iterations;
}
void
OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::setPasswordHashIterations(const OAIConfigNodePropertyInteger &password_hash_iterations) {
    this->password_hash_iterations = password_hash_iterations;
    this->m_password_hash_iterations_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::getPasswordSaltSize() const {
    return password_salt_size;
}
void
OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::setPasswordSaltSize(const OAIConfigNodePropertyInteger &password_salt_size) {
    this->password_salt_size = password_salt_size;
    this->m_password_salt_size_isSet = true;
}


bool
OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(token_expiration.isSet()){ isObjectUpdated = true; break;}
    
        if(token_length.isSet()){ isObjectUpdated = true; break;}
    
        if(token_refresh.isSet()){ isObjectUpdated = true; break;}
    
        if(token_cleanup_threshold.isSet()){ isObjectUpdated = true; break;}
    
        if(password_hash_algorithm.isSet()){ isObjectUpdated = true; break;}
    
        if(password_hash_iterations.isSet()){ isObjectUpdated = true; break;}
    
        if(password_salt_size.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

